uint64_t static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v148 = *(void *)(v4 - 8);
  uint64_t v149 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v144 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?));
  uint64_t v6 = MEMORY[0x270FA5388](v151);
  uint64_t v140 = (uint64_t)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v143 = (uint64_t)&v137 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v147 = (uint64_t)&v137 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v139 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v142 = (uint64_t)&v137 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v141 = (uint64_t)&v137 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v146 = (uint64_t)&v137 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v145 = (uint64_t)&v137 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v150 = (uint64_t)&v137 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v152 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v25 = (char *)&v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FullSvTime?, CLP_LogEntry_PrivateData_FullSvTime?));
  MEMORY[0x270FA5388](v26);
  v28 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  v32 = (char *)&v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  v34 = (char *)&v137 - v33;
  swift_beginAccess();
  float v35 = *(float *)(a1 + 16);
  uint64_t v153 = a1;
  char v36 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  char v37 = *(unsigned char *)(a2 + 20);
  if ((v36 & 1) == 0)
  {
    if (v35 != *(float *)(a2 + 16)) {
      char v37 = 1;
    }
    if (v37) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v38 = v153;
    swift_beginAccess();
    float v39 = *(float *)(v38 + 24);
    char v40 = *(unsigned char *)(v38 + 28);
    swift_beginAccess();
    char v41 = *(unsigned char *)(a2 + 28);
    if (v40)
    {
      if (!*(unsigned char *)(a2 + 28)) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v39 != *(float *)(a2 + 24)) {
        char v41 = 1;
      }
      if (v41) {
        goto LABEL_9;
      }
    }
    uint64_t v138 = a2;
    uint64_t v43 = v153
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    uint64_t v44 = v138;
    uint64_t v45 = v138
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    uint64_t v46 = (uint64_t)&v28[*(int *)(v26 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    v47 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v152 + 6);
    if (v47((uint64_t)v28, 1, v23) == 1)
    {
      uint64_t v48 = v153;
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      uint64_t v49 = v48;
      if (v47(v46, 1, v23) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        goto LABEL_20;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      if (v47(v46, 1, v23) != 1)
      {
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v46, (uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        uint64_t v49 = v153;
        swift_retain();
        swift_retain();
        char v52 = specialized static CLP_LogEntry_PrivateData_FullSvTime.== infix(_:_:)((uint64_t)v32, (uint64_t)v25);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        if ((v52 & 1) == 0) {
          goto LABEL_34;
        }
LABEL_20:
        uint64_t v53 = v49;
        uint64_t v54 = v49
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        uint64_t v55 = v150;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        uint64_t v56 = v44
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        uint64_t v57 = v147;
        uint64_t v58 = v147 + *(int *)(v151 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v147, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        uint64_t v59 = v149;
        v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
        if (v60(v57, 1, v149) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          uint64_t v61 = v53;
          if (v60(v58, 1, v59) == 1)
          {
            v152 = v60;
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v62 = v145;
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v145, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          if (v60(v58, 1, v59) != 1)
          {
            v152 = v60;
            uint64_t v63 = v144;
            outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v58, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            LODWORD(v148) = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v62, v63);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v63, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            uint64_t v61 = v53;
            if ((v148 & 1) == 0) {
              goto LABEL_34;
            }
LABEL_27:
            uint64_t v64 = v61
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            uint64_t v65 = v146;
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v146, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            uint64_t v66 = v44
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            uint64_t v67 = v143;
            uint64_t v68 = v143 + *(int *)(v151 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            v69 = v152;
            if (v152(v67, 1, v59) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              int v70 = v69(v68, 1, v59);
              uint64_t v71 = v153;
              if (v70 == 1)
              {
                v152 = v69;
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                goto LABEL_38;
              }
            }
            else
            {
              uint64_t v72 = v141;
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v141, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              if (v69(v68, 1, v59) != 1)
              {
                v152 = v69;
                uint64_t v74 = v144;
                outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v68, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                char v75 = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v72, v74);
                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v146, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v72, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                uint64_t v71 = v153;
                if ((v75 & 1) == 0) {
                  goto LABEL_34;
                }
LABEL_38:
                uint64_t v76 = v71
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                uint64_t v77 = v142;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                uint64_t v78 = v44
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                uint64_t v57 = v140;
                uint64_t v79 = v140 + *(int *)(v151 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v140, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v152;
                if (v152(v57, 1, v59) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  if (v80(v79, 1, v59) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                    goto LABEL_44;
                  }
                }
                else
                {
                  uint64_t v81 = v139;
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v139, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  if (v80(v79, 1, v59) != 1)
                  {
                    uint64_t v82 = v144;
                    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v79, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    char v83 = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v81, v82);
                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v82, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                    if ((v83 & 1) == 0) {
                      goto LABEL_34;
                    }
LABEL_44:
                    v84 = (int *)(v71
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
                    swift_beginAccess();
                    int v85 = *v84;
                    uint64_t v86 = v44;
                    char v87 = *((unsigned char *)v84 + 4);
                    uint64_t v88 = v86
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
                    swift_beginAccess();
                    char v89 = *(unsigned char *)(v88 + 4);
                    if (v87)
                    {
                      if (!*(unsigned char *)(v88 + 4)) {
                        goto LABEL_56;
                      }
                    }
                    else
                    {
                      if (v85 != *(_DWORD *)v88) {
                        char v89 = 1;
                      }
                      if (v89) {
                        goto LABEL_56;
                      }
                    }
                    v90 = (int *)(v71
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
                    swift_beginAccess();
                    int v91 = *v90;
                    char v92 = *((unsigned char *)v90 + 4);
                    uint64_t v93 = v138
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
                    swift_beginAccess();
                    char v94 = *(unsigned char *)(v93 + 4);
                    if (v92)
                    {
                      if (!*(unsigned char *)(v93 + 4)) {
                        goto LABEL_56;
                      }
                    }
                    else
                    {
                      if (v91 != *(_DWORD *)v93) {
                        char v94 = 1;
                      }
                      if (v94) {
                        goto LABEL_56;
                      }
                    }
                    v95 = (unsigned __int8 *)(v71
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    int v96 = *v95;
                    uint64_t v97 = v138;
                    v98 = (unsigned __int8 *)(v138
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    int v99 = *v98;
                    if (v96 == 7)
                    {
                      if (v99 != 7) {
                        goto LABEL_34;
                      }
                    }
                    else
                    {
                      char v42 = 0;
                      if (v99 == 7 || v96 != v99) {
                        goto LABEL_35;
                      }
                    }
                    v100 = (unsigned __int8 *)(v71
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    int v101 = *v100;
                    v102 = (unsigned __int8 *)(v97
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    int v103 = *v102;
                    if (v101 == 7)
                    {
                      if (v103 != 7) {
                        goto LABEL_34;
                      }
                    }
                    else
                    {
                      char v42 = 0;
                      if (v103 == 7 || v101 != v103) {
                        goto LABEL_35;
                      }
                    }
                    v104 = (int *)(v71
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
                    swift_beginAccess();
                    int v105 = *v104;
                    uint64_t v106 = v97;
                    char v107 = *((unsigned char *)v104 + 4);
                    uint64_t v108 = v106
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
                    swift_beginAccess();
                    char v109 = *(unsigned char *)(v108 + 4);
                    if ((v107 & 1) == 0)
                    {
                      if (v105 != *(_DWORD *)v108) {
                        char v109 = 1;
                      }
                      if (v109) {
                        goto LABEL_56;
                      }
LABEL_73:
                      uint64_t v110 = v71
                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                      swift_beginAccess();
                      float v111 = *(float *)v110;
                      char v112 = *(unsigned char *)(v110 + 4);
                      uint64_t v113 = v138;
                      uint64_t v114 = v138
                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                      swift_beginAccess();
                      char v115 = *(unsigned char *)(v114 + 4);
                      if (v112)
                      {
                        if (*(unsigned char *)(v114 + 4)) {
                          goto LABEL_79;
                        }
                      }
                      else
                      {
                        if (v111 != *(float *)v114) {
                          char v115 = 1;
                        }
                        if ((v115 & 1) == 0)
                        {
LABEL_79:
                          uint64_t v116 = v71
                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                          swift_beginAccess();
                          float v117 = *(float *)v116;
                          char v118 = *(unsigned char *)(v116 + 4);
                          uint64_t v119 = v113
                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                          swift_beginAccess();
                          char v120 = *(unsigned char *)(v119 + 4);
                          if (v118)
                          {
                            if (!*(unsigned char *)(v119 + 4)) {
                              goto LABEL_90;
                            }
                          }
                          else
                          {
                            if (v117 != *(float *)v119) {
                              char v120 = 1;
                            }
                            if (v120) {
                              goto LABEL_90;
                            }
                          }
                          v121 = (uint64_t *)(v153
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                          swift_beginAccess();
                          uint64_t v122 = *v121;
                          unint64_t v123 = v121[1];
                          v124 = (uint64_t *)(v138
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                          swift_beginAccess();
                          uint64_t v125 = *v124;
                          unint64_t v126 = v124[1];
                          if (v123 >> 60 == 15)
                          {
                            if (v126 >> 60 == 15)
                            {
LABEL_92:
                              v128 = (int *)(v153
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
                              swift_beginAccess();
                              int v129 = *v128;
                              char v130 = *((unsigned char *)v128 + 4);
                              uint64_t v131 = v138
                                   + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
                              swift_beginAccess();
                              char v132 = *(unsigned char *)(v131 + 4);
                              if ((v130 & 1) == 0)
                              {
                                if (v129 != *(_DWORD *)v131) {
                                  char v132 = 1;
                                }
                                if (v132) {
                                  goto LABEL_90;
                                }
LABEL_98:
                                v133 = (uint64_t *)(v153
                                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                                swift_beginAccess();
                                uint64_t v134 = *v133;
                                v135 = (uint64_t *)(v138
                                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                                swift_beginAccess();
                                uint64_t v136 = *v135;
                                swift_bridgeObjectRetain();
                                swift_bridgeObjectRetain();
                                char v42 = specialized static Array<A>.== infix(_:_:)(v134, v136);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                goto LABEL_35;
                              }
                              if (*(unsigned char *)(v131 + 4)) {
                                goto LABEL_98;
                              }
LABEL_90:
                              char v42 = 0;
                              goto LABEL_35;
                            }
                          }
                          else if (v126 >> 60 != 15)
                          {
                            outlined copy of Data?(v122, v123);
                            outlined copy of Data?(v125, v126);
                            char v127 = specialized static Data.== infix(_:_:)(v122, v123, v125, v126);
                            outlined consume of Data?(v125, v126);
                            outlined consume of Data?(v122, v123);
                            if ((v127 & 1) == 0) {
                              goto LABEL_90;
                            }
                            goto LABEL_92;
                          }
                          outlined copy of Data?(v122, v123);
                          outlined copy of Data?(v125, v126);
                          outlined consume of Data?(v122, v123);
                          outlined consume of Data?(v125, v126);
                          goto LABEL_90;
                        }
                      }
LABEL_34:
                      char v42 = 0;
LABEL_35:
                      swift_release();
                      swift_release();
                      return v42 & 1;
                    }
                    if (*(unsigned char *)(v108 + 4)) {
                      goto LABEL_73;
                    }
LABEL_56:
                    char v42 = 0;
                    goto LABEL_35;
                  }
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                }
                goto LABEL_25;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v146, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v72, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            }
            v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            uint64_t v51 = v67;
            goto LABEL_33;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
        }
LABEL_25:
        v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        uint64_t v51 = v57;
        goto LABEL_33;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
    }
    v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FullSvTime?, CLP_LogEntry_PrivateData_FullSvTime?);
    uint64_t v51 = (uint64_t)v28;
LABEL_33:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v50);
    goto LABEL_34;
  }
  if (*(unsigned char *)(a2 + 20)) {
    goto LABEL_7;
  }
LABEL_9:
  char v42 = 0;
  return v42 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementExtension.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementExtension@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementExtension@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Measurement.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Measurement.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Measurement.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v95 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v94 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v93 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v92 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v89 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v81 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v79 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v28 = *(void (**)(void))(*(void *)(v27 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v26, 1, 1, v27);
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v84 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 4) = 1;
  v34 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  unsigned char *v34 = 5;
  char v87 = v34;
  uint64_t v88 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  v28();
  float v35 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  *float v35 = 2;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v90 = v35;
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v39 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v40 = v78;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v39, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  uint64_t v42 = v41;
  uint64_t v43 = v81;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v44 = v80;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v43, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  uint64_t v46 = *v45;
  LOBYTE(v45) = *((unsigned char *)v45 + 8);
  swift_beginAccess();
  *(void *)uint64_t v21 = v46;
  *(unsigned char *)(v21 + 8) = (_BYTE)v45;
  v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  uint64_t v48 = *v47;
  LOBYTE(v47) = *((unsigned char *)v47 + 8);
  swift_beginAccess();
  *(void *)uint64_t v22 = v48;
  *(unsigned char *)(v22 + 8) = (_BYTE)v47;
  uint64_t v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  uint64_t v50 = *v49;
  LOBYTE(v49) = *((unsigned char *)v49 + 8);
  swift_beginAccess();
  *(void *)uint64_t v23 = v50;
  *(unsigned char *)(v23 + 8) = (_BYTE)v49;
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  uint64_t v52 = v51;
  uint64_t v53 = v89;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v54 = v82;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v53, v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  uint64_t v56 = v92;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v57 = v83;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v56, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  uint64_t v58 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  uint64_t v59 = v58;
  uint64_t v60 = v93;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v61 = v84;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v60, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  uint64_t v62 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  uint64_t v63 = v62;
  uint64_t v64 = v94;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v65 = v85;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v64, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)v66;
  LOBYTE(v66) = *(unsigned char *)(v66 + 4);
  uint64_t v67 = v86;
  swift_beginAccess();
  *(_DWORD *)uint64_t v67 = v57;
  *(unsigned char *)(v67 + 4) = v66;
  uint64_t v68 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  LOBYTE(v68) = *v68;
  v69 = v87;
  swift_beginAccess();
  unsigned char *v69 = (_BYTE)v68;
  uint64_t v70 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v71 = v88;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v56, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  uint64_t v72 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  LOBYTE(v72) = *v72;
  v73 = v90;
  swift_beginAccess();
  unsigned char *v73 = (_BYTE)v72;
  uint64_t v74 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  uint64_t v75 = v95;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_release();
  uint64_t v76 = v91;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v75, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_Measurement._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          goto LABEL_18;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState;
          goto LABEL_18;
        case 3:
        case 4:
        case 5:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_19;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime;
          goto LABEL_18;
        case 7:
        case 12:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset;
          goto LABEL_18;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking;
          goto LABEL_18;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension;
          goto LABEL_18;
        case 10:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_19;
        case 11:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_19;
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_19;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
LABEL_18:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_19:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  if (*v16 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #12 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t closure #12 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)(uint64_t a1, char *a2)
{
  v239 = a2;
  uint64_t v197 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v195 = *(void *)(v197 - 8);
  MEMORY[0x270FA5388](v197);
  uint64_t v192 = (uint64_t)&v191 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?));
  MEMORY[0x270FA5388](v194);
  uint64_t v198 = (uint64_t)&v191 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v193 = (uint64_t)&v191 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v196 = (uint64_t)&v191 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v206 = *(void *)(v9 - 8);
  uint64_t v207 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v202 = (uint64_t)&v191 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementExtension?, CLP_LogEntry_PrivateData_MeasurementExtension?));
  MEMORY[0x270FA5388](v205);
  uint64_t v208 = (uint64_t)&v191 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v203 = (uint64_t)&v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v215 = (uint64_t)&v191 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v212 = *(void *)(v16 - 8);
  uint64_t v213 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v204 = (uint64_t)&v191 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PhaseTracking?, CLP_LogEntry_PrivateData_PhaseTracking?));
  MEMORY[0x270FA5388](v211);
  uint64_t v214 = (uint64_t)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v209 = (uint64_t)&v191 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v226 = (uint64_t)&v191 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v220 = v23;
  uint64_t v221 = v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v210 = (uint64_t)&v191 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
  uint64_t v26 = MEMORY[0x270FA5388](v219);
  uint64_t v201 = (uint64_t)&v191 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v218 = (uint64_t)&v191 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v199 = (uint64_t)&v191 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v200 = (uint64_t)&v191 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v216 = (uint64_t)&v191 - v35;
  MEMORY[0x270FA5388](v34);
  uint64_t v236 = (uint64_t)&v191 - v36;
  uint64_t v224 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v235 = *(void *)(v224 - 8);
  MEMORY[0x270FA5388](v224);
  uint64_t v217 = (uint64_t)&v191 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?));
  MEMORY[0x270FA5388](v222);
  uint64_t v225 = (uint64_t)&v191 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v40 = MEMORY[0x270FA5388](v39 - 8);
  uint64_t v223 = (uint64_t)&v191 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v227 = (uint64_t)&v191 - v42;
  uint64_t v43 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v232 = *(void *)(v43 - 8);
  uint64_t v233 = v43;
  MEMORY[0x270FA5388](v43);
  uint64_t v228 = (uint64_t)&v191 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SyncState?, CLP_LogEntry_PrivateData_SyncState?));
  MEMORY[0x270FA5388](v231);
  uint64_t v234 = (uint64_t)&v191 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v47 = MEMORY[0x270FA5388](v46 - 8);
  uint64_t v229 = (uint64_t)&v191 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v237 = (uint64_t)&v191 - v49;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v230 = (uint64_t)&v191 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  uint64_t v54 = v53 - 8;
  MEMORY[0x270FA5388](v53);
  uint64_t v56 = (char *)&v191 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v58 = MEMORY[0x270FA5388](v57 - 8);
  uint64_t v238 = (uint64_t)&v191 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v61 = (char *)&v191 - v60;
  uint64_t v62 = a1;
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, (uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v64 = v239;
  uint64_t v65 = (uint64_t)&v239[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id];
  swift_beginAccess();
  uint64_t v66 = (uint64_t)&v56[*(int *)(v54 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, (uint64_t)v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v67 = *(uint64_t (**)(void, void, void))(v51 + 48);
  if (v67(v56, 1, v50) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    int v68 = v67(v66, 1, v50);
    v69 = v64;
    uint64_t v70 = v62;
    if (v68 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?);
    uint64_t v73 = (uint64_t)v56;
LABEL_15:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v72);
    goto LABEL_16;
  }
  uint64_t v71 = v62;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v56, v238, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v67(v66, 1, v50) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v238, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v74 = v230;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v66, v230, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v70 = v71;
  swift_retain();
  v69 = v64;
  swift_retain();
  uint64_t v75 = v238;
  char v76 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(v238, v74);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v75, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v76 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v77 = v70
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  uint64_t v78 = v237;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v79 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState];
  swift_beginAccess();
  uint64_t v80 = v234;
  uint64_t v81 = v234 + *(int *)(v231 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v234, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v82 = v233;
  uint64_t v83 = *(uint64_t (**)(void, void, void))(v232 + 48);
  if (v83(v80, 1, v233) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
    int v84 = v83(v81, 1, v82);
    uint64_t v85 = v235;
    uint64_t v86 = v236;
    if (v84 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SyncState?, CLP_LogEntry_PrivateData_SyncState?);
LABEL_14:
    uint64_t v73 = v80;
    goto LABEL_15;
  }
  uint64_t v87 = v229;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  int v88 = v83(v81, 1, v82);
  uint64_t v85 = v235;
  uint64_t v86 = v236;
  if (v88 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v87, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    goto LABEL_13;
  }
  uint64_t v90 = v228;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, v228, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  char v91 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v87, v90, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v90, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v87, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((v91 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v92 = (uint64_t *)(v70
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  uint64_t v93 = *v92;
  char v94 = *((unsigned char *)v92 + 8);
  uint64_t v95 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds];
  swift_beginAccess();
  if (v94)
  {
    if ((v95[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v95[8] & 1) != 0 || v93 != *(void *)v95)
  {
    goto LABEL_16;
  }
  int v96 = (uint64_t *)(v70
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  uint64_t v97 = *v96;
  char v98 = *((unsigned char *)v96 + 8);
  int v99 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds];
  swift_beginAccess();
  if (v98)
  {
    if ((v99[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v99[8] & 1) != 0 || v97 != *(void *)v99)
  {
    goto LABEL_16;
  }
  v100 = (uint64_t *)(v70
                   + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  uint64_t v101 = *v100;
  char v102 = *((unsigned char *)v100 + 8);
  int v103 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds];
  swift_beginAccess();
  if (v102)
  {
    if ((v103[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v103[8] & 1) != 0 || v101 != *(void *)v103)
  {
    goto LABEL_16;
  }
  uint64_t v104 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  uint64_t v105 = v104;
  uint64_t v106 = v227;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v107 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime];
  swift_beginAccess();
  uint64_t v108 = v225;
  uint64_t v109 = v225 + *(int *)(v222 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, v225, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v110 = v107;
  uint64_t v80 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v110, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  float v111 = *(uint64_t (**)(void, void, void))(v85 + 48);
  uint64_t v112 = v108;
  uint64_t v113 = v224;
  if (v111(v112, 1, v224) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    int v114 = v111(v109, 1, v113);
    uint64_t v115 = v226;
    if (v114 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v223, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v116 = v109;
  int v117 = v111(v109, 1, v113);
  uint64_t v115 = v226;
  if (v117 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v223, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_39:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?);
    goto LABEL_14;
  }
  uint64_t v118 = v217;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v116, v217, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v119 = v223;
  char v120 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v223, v118, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v118, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v119, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((v120 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_41:
  uint64_t v121 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v122 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset];
  swift_beginAccess();
  uint64_t v123 = v218;
  uint64_t v124 = v218 + *(int *)(v219 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v125 = v122;
  uint64_t v80 = v123;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v126 = v86;
  uint64_t v127 = v220;
  uint64_t v129 = v221 + 48;
  v128 = *(char **)(v221 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v80, 1, v220) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v124, 1, v127) == 1)
    {
      v239 = v128;
      uint64_t v221 = v129;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  uint64_t v130 = v216;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v124, 1, v127) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v236, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v130, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
LABEL_46:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?);
    goto LABEL_14;
  }
  v239 = v128;
  uint64_t v221 = v129;
  uint64_t v131 = v130;
  uint64_t v132 = v80;
  uint64_t v133 = v210;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v124, v210, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  char v134 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v131, v133, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v133, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v236, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v131, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v132, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((v134 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_48:
  uint64_t v135 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v135, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v136 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking];
  swift_beginAccess();
  uint64_t v137 = v214;
  uint64_t v138 = v214 + *(int *)(v211 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, v214, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v139 = v136;
  uint64_t v80 = v137;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v139, v138, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v140 = *(uint64_t (**)(void, void, void))(v212 + 48);
  uint64_t v141 = v137;
  uint64_t v142 = v213;
  if (v140(v141, 1, v213) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
    int v143 = v140(v138, 1, v142);
    uint64_t v144 = v215;
    if (v143 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  uint64_t v145 = v209;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v209, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  int v146 = v140(v138, 1, v142);
  uint64_t v144 = v215;
  if (v146 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v226, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v145, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
LABEL_53:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PhaseTracking?, CLP_LogEntry_PrivateData_PhaseTracking?);
    goto LABEL_14;
  }
  uint64_t v147 = v204;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v138, v204, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  char v148 = specialized static CLP_LogEntry_PrivateData_PhaseTracking.== infix(_:_:)(v145, v147);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v147, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v226, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v145, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((v148 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_55:
  uint64_t v149 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v149, v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v150 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension];
  swift_beginAccess();
  uint64_t v151 = v208;
  uint64_t v152 = v208 + *(int *)(v205 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, v208, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v153 = v150;
  uint64_t v80 = v151;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v153, v152, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v154 = *(unsigned int (**)(void, void, void))(v206 + 48);
  uint64_t v155 = v151;
  uint64_t v156 = v207;
  if (v154(v155, 1, v207) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
    if (v154(v152, 1, v156) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  uint64_t v157 = v203;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v203, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if (v154(v152, 1, v156) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v215, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v157, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
LABEL_60:
    uint64_t v72 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementExtension?, CLP_LogEntry_PrivateData_MeasurementExtension?);
    goto LABEL_14;
  }
  uint64_t v158 = v202;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v152, v202, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  char v159 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v157, v158, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v158, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v215, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v157, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((v159 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_62:
  uint64_t v160 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  float v161 = *(float *)v160;
  char v162 = *(unsigned char *)(v160 + 4);
  v163 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz];
  swift_beginAccess();
  if (v162)
  {
    if (v163[4]) {
      goto LABEL_67;
    }
LABEL_16:
    swift_release();
    swift_release();
    return 0;
  }
  if ((v163[4] & 1) != 0 || v161 != *(float *)v163) {
    goto LABEL_16;
  }
LABEL_67:
  uint64_t v164 = v70;
  v165 = (unsigned __int8 *)(v70
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  int v166 = *v165;
  v167 = v69;
  v168 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator];
  swift_beginAccess();
  int v169 = *v168;
  if (v166 == 5)
  {
    if (v169 != 5) {
      goto LABEL_16;
    }
  }
  else if (v169 == 5 || v166 != v169)
  {
    goto LABEL_16;
  }
  uint64_t v170 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  uint64_t v171 = v200;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v170, v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v172 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset];
  swift_beginAccess();
  uint64_t v173 = v201;
  uint64_t v174 = v201 + *(int *)(v219 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v171, v201, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v172, v174, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v173, 1, v220) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v174, 1, v220) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v201, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      goto LABEL_80;
    }
LABEL_77:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v201, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
    goto LABEL_16;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v201, v199, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v174, 1, v220) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v199, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_77;
  }
  uint64_t v175 = v210;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v174, v210, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v176 = v199;
  char v177 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v199, v175, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v175, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v176, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v201, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((v177 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_80:
  v178 = (unsigned __int8 *)(v164
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  int v179 = *v178;
  v180 = &v167[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable];
  swift_beginAccess();
  int v181 = *v180;
  if (v179 == 2)
  {
    if (v181 != 2) {
      goto LABEL_16;
    }
  }
  else if (v181 == 2 || ((((v181 & 1) == 0) ^ v179) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v182 = v164
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  uint64_t v183 = v196;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v182, v196, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v184 = (uint64_t)&v167[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking];
  swift_beginAccess();
  uint64_t v185 = v198;
  uint64_t v186 = v198 + *(int *)(v194 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, v198, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v184, v186, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v187 = *(unsigned int (**)(void, void, void))(v195 + 48);
  if (v187(v185, 1, v197) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v196, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
    if (v187(v186, 1, v197) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v198, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
      return 1;
    }
LABEL_90:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v198, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v198, v193, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if (v187(v186, 1, v197) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v196, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v193, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
    goto LABEL_90;
  }
  uint64_t v188 = v192;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v186, v192, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v189 = v193;
  char v190 = specialized static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.== infix(_:_:)(v193, v188);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v188, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v196, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v189, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v198, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  return (v190 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_Measurement.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Measurement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Measurement()
{
  return CLP_LogEntry_PrivateData_Measurement.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Measurement@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        break;
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverClockModel.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverClockModel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockModel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverClockCorrections.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName.getter()
{
  return 0xD000000000000034;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        goto LABEL_7;
      case 2:
      case 3:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        goto LABEL_7;
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_7:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Clock.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Clock.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Clock.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Clock._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Clock.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
          goto LABEL_11;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          goto LABEL_10;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
LABEL_10:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v4, v3);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Int CLP_LogEntry_PrivateData_Clock.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Clock, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Clock@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Clock()
{
  return CLP_LogEntry_PrivateData_Clock.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Clock@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = MEMORY[0x263F8EE78];
  uint64_t v9 = a1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v9, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  uint64_t v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v8 = v11;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
        uint64_t v9 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
    uint64_t v9 = v2;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_7:
    uint64_t v2 = v9;
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements;
  swift_beginAccess();
  if (*(void *)(*(void *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Clock?, CLP_LogEntry_PrivateData_Clock?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v17 = v32;
  uint64_t v18 = v32
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v18, v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v23 = v31;
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v19, v31, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      uint64_t v22 = a1;
      swift_retain();
      swift_retain();
      char v24 = specialized static CLP_LogEntry_PrivateData_Clock.== infix(_:_:)((uint64_t)v13, v23);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v23, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
      if (v24) {
        goto LABEL_8;
      }
LABEL_9:
      char v29 = 0;
      goto LABEL_10;
    }
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Clock?, CLP_LogEntry_PrivateData_Clock?));
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  unsigned int v21 = v20(v19, 1, v3);
  uint64_t v22 = a1;
  if (v21 != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
LABEL_8:
  uint64_t v25 = (uint64_t *)(v22
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v26 = *v25;
  uint64_t v27 = (uint64_t *)(v17
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v29 = specialized static Array<A>.== infix(_:_:)(v26, v28, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  swift_release();
  return v29 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementReport.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementReport@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementReport()
{
  return CLP_LogEntry_PrivateData_MeasurementReport.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementReport@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, MEMORY[0x263F50648]);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Wgs84Ecef.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Wgs84Ecef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvBandCorrections.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvBandCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvBandCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Int CLP_LogEntry_PrivateData_SvPositionAtTime.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvPositionAtTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 24);
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return CLP_LogEntry_PrivateData_SvPositionAtTime.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvPositionAtTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v3 = result;
  if ((*((unsigned char *)v0 + *(int *)(result + 32) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*((unsigned char *)v0 + *(int *)(v3 + 36) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(*v0 + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v0[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v0[2] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PolynomialOrbit.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PolynomialOrbit@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = v4;
  a2[2] = v4;
  uint64_t result = UnknownStorage.init()();
  uint64_t v6 = *(int *)(a1 + 36);
  uint64_t v7 = (char *)a2 + *(int *)(a1 + 32);
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return CLP_LogEntry_PrivateData_PolynomialOrbit.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return CLP_LogEntry_PrivateData_PolynomialOrbit.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PolynomialOrbit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvInfo.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          goto LABEL_14;
        case 2:
        case 5:
        case 6:
        case 7:
        case 23:
          swift_beginAccess();
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_18;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          uint64_t v13 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime;
          goto LABEL_12;
        case 8:
        case 9:
          swift_beginAccess();
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_18;
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
          goto LABEL_16;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections;
          uint64_t v13 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections;
LABEL_12:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v13, v12);
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_18;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v11, v10);
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_18;
        case 24:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
LABEL_16:
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_18:
          uint64_t v2 = v14;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  if (*v13 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions;
  swift_beginAccess();
  if (*(void *)(*(void *)v14 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v20 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  if (*v20 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  unsigned int v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  if (*v21 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v22 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  if (*v22 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v23 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  if (*v23 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  char v24 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  if (*v24 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections;
  swift_beginAccess();
  if (*(void *)(*(void *)v25 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v26 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  if (*v26 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v27 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  if (*v27 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v28 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  if (*v28 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  char v29 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  if (*v29 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v30 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  if (*v30 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v31 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v31 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v32 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v32 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = a2;
  uint64_t v130 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v128 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v125 = (uint64_t *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PolynomialOrbit?, CLP_LogEntry_PrivateData_PolynomialOrbit?));
  MEMORY[0x270FA5388](v127);
  uint64_t v131 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v126 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v129 = (uint64_t)&v124 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v132 = (uint64_t)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v133 = (uint64_t)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v124 - v19;
  uint64_t v21 = a1;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v23 = v134;
  uint64_t v24 = v134
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v25 = (uint64_t)&v15[*(int *)(v13 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    int v27 = v26(v25, 1, v9);
    uint64_t v28 = v21;
    if (v27 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
    goto LABEL_7;
  }
  uint64_t v29 = v21;
  uint64_t v30 = v133;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, v133, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v32 = v132;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v25, v132, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v28 = v29;
  swift_retain();
  swift_retain();
  char v33 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(v30, v32);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v33 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v34 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  double v35 = *(double *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 8);
  uint64_t v36 = v23
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if (v34)
  {
    if ((*(unsigned char *)(v36 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }
  uint64_t v37 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v38 = *v37;
  uint64_t v39 = (unsigned __int8 *)(v23
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v40 = *v39;
  if (v38 == 7)
  {
    if (v40 != 7) {
      goto LABEL_7;
    }
  }
  else if (v40 == 7 || v38 != v40)
  {
    goto LABEL_7;
  }
  uint64_t v41 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v42 = *v41;
  uint64_t v43 = (uint64_t *)(v23
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v44 = *v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = v23;
  char v46 = specialized static Array<A>.== infix(_:_:)(v42, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v47 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  double v48 = *(double *)v47;
  LOBYTE(v47) = *(unsigned char *)(v47 + 8);
  uint64_t v49 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if (v47)
  {
    if ((*(unsigned char *)(v49 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }
  uint64_t v50 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  double v51 = *(double *)v50;
  LOBYTE(v50) = *(unsigned char *)(v50 + 8);
  uint64_t v52 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if (v50)
  {
    if ((*(unsigned char *)(v52 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_7;
  }
  uint64_t v53 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  double v54 = *(double *)v53;
  LOBYTE(v53) = *(unsigned char *)(v53 + 8);
  uint64_t v55 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if (v53)
  {
    if ((*(unsigned char *)(v55 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_7;
  }
  uint64_t v56 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  float v57 = *(float *)v56;
  LOBYTE(v56) = *(unsigned char *)(v56 + 4);
  uint64_t v58 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if (v56)
  {
    if ((*(unsigned char *)(v58 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v58 + 4) & 1) != 0 || v57 != *(float *)v58)
  {
    goto LABEL_7;
  }
  uint64_t v59 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  float v60 = *(float *)v59;
  LOBYTE(v59) = *(unsigned char *)(v59 + 4);
  uint64_t v61 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if (v59)
  {
    if ((*(unsigned char *)(v61 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v61 + 4) & 1) != 0 || v60 != *(float *)v61)
  {
    goto LABEL_7;
  }
  uint64_t v62 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v63 = *v62;
  uint64_t v64 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v65 = *v64;
  if (v63 == 5)
  {
    if (v65 == 5) {
      goto LABEL_53;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if (v65 == 5 || v63 != v65) {
    goto LABEL_7;
  }
LABEL_53:
  uint64_t v66 = v28;
  uint64_t v67 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v68 = *v67;
  v69 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v70 = *v69;
  if (v68 == 5)
  {
    if (v70 != 5) {
      goto LABEL_7;
    }
  }
  else if (v70 == 5 || v68 != v70)
  {
    goto LABEL_7;
  }
  uint64_t v71 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v72 = *v71;
  uint64_t v73 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v74 = *v73;
  if (v72 == 5)
  {
    if (v74 != 5) {
      goto LABEL_7;
    }
  }
  else if (v74 == 5 || v72 != v74)
  {
    goto LABEL_7;
  }
  uint64_t v75 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v76 = *v75;
  uint64_t v77 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v78 = *v77;
  if (v76 == 5)
  {
    if (v78 != 5) {
      goto LABEL_7;
    }
  }
  else if (v78 == 5 || v76 != v78)
  {
    goto LABEL_7;
  }
  uint64_t v79 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v80 = *v79;
  uint64_t v81 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v82 = *v81;
  if (v80 == 5)
  {
    if (v82 != 5) {
      goto LABEL_7;
    }
  }
  else if (v82 == 5 || v80 != v82)
  {
    goto LABEL_7;
  }
  uint64_t v83 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v84 = *v83;
  uint64_t v85 = (uint64_t *)(v45
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v86 = *v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v87 = specialized static Array<A>.== infix(_:_:)(v84, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v87 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v88 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v89 = v129;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88, v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v90 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v91 = v131;
  uint64_t v92 = v131 + *(int *)(v127 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, v131, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v90, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v93(v91, 1, v130) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
    if (v93(v92, 1, v130) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, (uint64_t)v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if (v93(v92, 1, v130) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v126, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
LABEL_79:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PolynomialOrbit?, CLP_LogEntry_PrivateData_PolynomialOrbit?));
    goto LABEL_7;
  }
  char v94 = v125;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v92, (uint64_t)v125, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  uint64_t v95 = v126;
  char v96 = specialized static CLP_LogEntry_PrivateData_PolynomialOrbit.== infix(_:_:)(v126, v94);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((v96 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_81:
  uint64_t v97 = (unsigned __int8 *)(v66
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v98 = *v97;
  int v99 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v100 = *v99;
  if (v98 == 5)
  {
    if (v100 != 5) {
      goto LABEL_7;
    }
  }
  else if (v100 == 5 || v98 != v100)
  {
    goto LABEL_7;
  }
  uint64_t v101 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v102 = *v101;
  int v103 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v104 = *v103;
  if (v102 == 5)
  {
    if (v104 != 5) {
      goto LABEL_7;
    }
  }
  else if (v104 == 5 || v102 != v104)
  {
    goto LABEL_7;
  }
  uint64_t v105 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v106 = *v105;
  uint64_t v107 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v108 = *v107;
  if (v106 == 5)
  {
    if (v108 != 5) {
      goto LABEL_7;
    }
  }
  else if (v108 == 5 || v106 != v108)
  {
    goto LABEL_7;
  }
  uint64_t v109 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v110 = *v109;
  float v111 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v112 = *v111;
  if (v110 == 5)
  {
    if (v112 != 5) {
      goto LABEL_7;
    }
  }
  else if (v112 == 5 || v110 != v112)
  {
    goto LABEL_7;
  }
  uint64_t v113 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v114 = *v113;
  uint64_t v115 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v116 = *v115;
  if (v114 == 5)
  {
    if (v116 != 5) {
      goto LABEL_7;
    }
  }
  else if (v116 == 5 || v114 != v116)
  {
    goto LABEL_7;
  }
  uint64_t v117 = v66
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  double v118 = *(double *)v117;
  LOBYTE(v117) = *(unsigned char *)(v117 + 8);
  uint64_t v119 = v45
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if (v117)
  {
    if ((*(unsigned char *)(v119 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v119 + 8) & 1) != 0 || v118 != *(double *)v119)
  {
    goto LABEL_7;
  }
  char v120 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v121 = *v120;
  swift_release();
  uint64_t v122 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v123 = *v122;
  swift_release();
  if (v121 == 4) {
    return v123 == 4;
  }
  BOOL result = 0;
  if (v123 != 4 && v121 == v123) {
    return 1;
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvInfo()
{
  return CLP_LogEntry_PrivateData_SvInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverBandCorrections.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverBandCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverBandCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_LeapSecondChange.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_LeapSecondChange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChange@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #3 in CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Int CLP_LogEntry_PrivateData_LeapSecondInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_LeapSecondInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a2 + v4) = 5;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return CLP_LogEntry_PrivateData_LeapSecondInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GpsToUtcConversion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return CLP_LogEntry_PrivateData_GpsToUtcConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return CLP_LogEntry_PrivateData_GpsToUtcConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GpsTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return CLP_LogEntry_PrivateData_GlonassSubsecondConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return CLP_LogEntry_PrivateData_GlonassSubsecondConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #5 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GlonassTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 6;
  uint64_t v8 = a2 + v7;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[9];
  return v12(v10, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, MEMORY[0x263F50678]);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v12 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      uint64_t v13 = ((uint64_t (*)(void))a4)(0);
      a5(v5 + *(int *)(v13 + 20), a2, a3);
    }
    uint64_t v6 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SubSecondConversion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return CLP_LogEntry_PrivateData_SubSecondConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SubSecondConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 20) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  v14();
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  v14();
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  v14();
  swift_beginAccess();
  int v15 = *(_DWORD *)(a1 + 16);
  LOBYTE(v14) = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v15;
  *(unsigned char *)(v1 + 20) = (_BYTE)v14;
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v18, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v19 = v25;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v20, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v21 = v26;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_release();
  uint64_t v23 = v27;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
          goto LABEL_7;
        case 3:
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion;
LABEL_7:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v114 = *(void *)(v4 - 8);
  uint64_t v115 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v109 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  uint64_t v6 = MEMORY[0x270FA5388](v118);
  uint64_t v102 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v105 = (uint64_t)&v100 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v108 = (uint64_t)&v100 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v113 = (uint64_t)&v100 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v101 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  int v104 = (char *)&v100 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v103 = (uint64_t)&v100 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v107 = (uint64_t)&v100 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v106 = (uint64_t)&v100 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v111 = (uint64_t)&v100 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v110 = (uint64_t)&v100 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v117 = (uint64_t)&v100 - v28;
  uint64_t v119 = (void *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v29 = *(v119 - 1);
  MEMORY[0x270FA5388](v119);
  uint64_t v112 = (uint64_t)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x270FA5388](v31);
  char v33 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v116 = (uint64_t)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  int v38 = (char *)&v100 - v37;
  swift_beginAccess();
  int v39 = *(_DWORD *)(a1 + 16);
  uint64_t v120 = a1;
  char v40 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  uint64_t v41 = a2;
  char v42 = *(unsigned char *)(a2 + 20);
  if (v40)
  {
    if (!*(unsigned char *)(a2 + 20)) {
      return 0;
    }
  }
  else
  {
    if (v39 != *(_DWORD *)(a2 + 16)) {
      char v42 = 1;
    }
    if (v42) {
      return 0;
    }
  }
  uint64_t v43 = v120;
  uint64_t v44 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v45 = v41;
  uint64_t v46 = v41
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  uint64_t v47 = (uint64_t)&v33[*(int *)(v31 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  double v48 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v29 + 48);
  uint64_t v49 = v119;
  if (v48((uint64_t)v33, 1, v119) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v48(v47, 1, v49) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
    goto LABEL_36;
  }
  uint64_t v50 = v116;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v48(v47, 1, v49) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  uint64_t v51 = v112;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v47, v112, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  swift_retain();
  swift_retain();
  char v52 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)(v50, v51);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v51, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v43 = v120;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((v52 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_14:
  uint64_t v53 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  uint64_t v54 = v117;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v55 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  uint64_t v56 = v113;
  uint64_t v57 = v113 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v58 = v115;
  uint64_t v119 = *(void **)(v114 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v56, 1, v115) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v57, 1, v58) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      goto LABEL_22;
    }
LABEL_20:
    uint64_t v60 = v56;
LABEL_35:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
    goto LABEL_36;
  }
  uint64_t v59 = v110;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v57, 1, v58) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_20;
  }
  uint64_t v61 = v56;
  uint64_t v62 = v109;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v57, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v63 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v59, v62);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((v63 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_22:
  uint64_t v64 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  uint64_t v65 = v111;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v66 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  uint64_t v67 = v108;
  uint64_t v68 = v108 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v69 = v67;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v67, 1, v58) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v68, 1, v58) != 1)
    {
LABEL_34:
      uint64_t v60 = v69;
      goto LABEL_35;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v70 = v107;
    goto LABEL_28;
  }
  uint64_t v71 = v67;
  uint64_t v72 = v106;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  unsigned int v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v119)(v68, 1, v58);
  uint64_t v70 = v107;
  if (v73 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v74 = v72;
LABEL_33:
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v74, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_34;
  }
  uint64_t v75 = v109;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v68, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v76 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v72, v75);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v75, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((v76 & 1) == 0)
  {
LABEL_36:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_28:
  uint64_t v77 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v78 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  uint64_t v79 = v70;
  uint64_t v80 = v105;
  uint64_t v81 = v105 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v69 = v80;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v80, 1, v58) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v81, 1, v58) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      uint64_t v82 = (uint64_t)v104;
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  uint64_t v83 = v80;
  uint64_t v84 = v103;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  unsigned int v85 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v119)(v81, 1, v58);
  uint64_t v82 = (uint64_t)v104;
  if (v85 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v74 = v84;
    goto LABEL_33;
  }
  uint64_t v87 = v109;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v88 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v84, v87);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v87, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v84, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((v88 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_39:
  uint64_t v89 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v90 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  uint64_t v91 = v102;
  uint64_t v92 = v102 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v93 = v90;
  uint64_t v94 = v91;
  uint64_t v95 = v115;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v93, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v91, 1, v95) != 1)
  {
    uint64_t v96 = v91;
    uint64_t v97 = v101;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v92, 1, v95) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v97, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      goto LABEL_44;
    }
    uint64_t v98 = v109;
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v92, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    char v99 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v97, v98);
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v98, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v97, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    return (v99 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v92, 1, v95) != 1)
  {
LABEL_44:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GalileoTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];
  return v12(v10, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if ((*(unsigned char *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_NavicTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_NavicTimeInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a2 + *(int *)(a1 + 24);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return CLP_LogEntry_PrivateData_NavicTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_NavicTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v34 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v14, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v11, v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v28 = v34;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v28, v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v30 = v35;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v30, v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  uint64_t v32 = v36;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v32, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v4);
    *(void *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo;
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo;
          goto LABEL_7;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo;
          goto LABEL_7;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo;
          goto LABEL_7;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo;
          uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo;
LABEL_7:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v9, v8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20));
  uint64_t v9 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v127 = a2;
  uint64_t v101 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v111 = *(void *)(v101 - 8);
  MEMORY[0x270FA5388](v101);
  uint64_t v98 = (uint64_t)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_NavicTimeInfo?, CLP_LogEntry_PrivateData_NavicTimeInfo?));
  MEMORY[0x270FA5388](v100);
  uint64_t v102 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v110 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v109 = (char *)&v97 - v8;
  uint64_t v107 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v106 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  uint64_t v99 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoTimeInfo?, CLP_LogEntry_PrivateData_GalileoTimeInfo?));
  MEMORY[0x270FA5388](v105);
  uint64_t v108 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v103 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v113 = (uint64_t)&v97 - v14;
  uint64_t v118 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v104 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouTimeInfo?, CLP_LogEntry_PrivateData_BeidouTimeInfo?));
  MEMORY[0x270FA5388](v115);
  uint64_t v119 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v112 = (uint64_t)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v116 = (uint64_t)&v97 - v20;
  uint64_t v125 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v124 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v114 = (uint64_t)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassTimeInfo?, CLP_LogEntry_PrivateData_GlonassTimeInfo?));
  MEMORY[0x270FA5388](v122);
  uint64_t v126 = (uint64_t)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v120 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v123 = (uint64_t)&v97 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v121 = (uint64_t)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsTimeInfo?, CLP_LogEntry_PrivateData_GpsTimeInfo?));
  uint64_t v31 = v30 - 8;
  MEMORY[0x270FA5388](v30);
  char v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v37 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  int v39 = (char *)&v97 - v38;
  uint64_t v40 = a1;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, (uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v42 = v127;
  uint64_t v43 = v127
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  uint64_t v44 = (uint64_t)&v33[*(int *)(v31 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v45((uint64_t)v33, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
    uint64_t v46 = v40;
    if (v45(v44, 1, v27) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
      goto LABEL_8;
    }
LABEL_6:
    double v48 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsTimeInfo?, CLP_LogEntry_PrivateData_GpsTimeInfo?);
    uint64_t v49 = (uint64_t)v33;
LABEL_29:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v48);
    goto LABEL_30;
  }
  uint64_t v47 = v40;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if (v45(v44, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
    goto LABEL_6;
  }
  uint64_t v50 = v121;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v44, v121, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v46 = v47;
  swift_retain();
  swift_retain();
  char v51 = specialized static CLP_LogEntry_PrivateData_GpsTimeInfo.== infix(_:_:)((uint64_t)v37, v50);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v50, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((v51 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v52 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  uint64_t v53 = v123;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v123, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v54 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  uint64_t v55 = v126;
  uint64_t v56 = v126 + *(int *)(v122 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  uint64_t v58 = v125;
  if (v57(v55, 1, v125) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
    if (v57(v56, 1, v58) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
      goto LABEL_15;
    }
LABEL_13:
    double v48 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassTimeInfo?, CLP_LogEntry_PrivateData_GlonassTimeInfo?);
LABEL_28:
    uint64_t v49 = v55;
    goto LABEL_29;
  }
  uint64_t v59 = v120;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if (v57(v56, 1, v58) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    goto LABEL_13;
  }
  uint64_t v60 = v114;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v56, v114, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  char v61 = specialized static CLP_LogEntry_PrivateData_GlonassTimeInfo.== infix(_:_:)(v59, v60);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v60, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((v61 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  uint64_t v62 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v63 = v116;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v64 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v55 = v119;
  uint64_t v65 = v119 + *(int *)(v115 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  uint64_t v67 = v118;
  if (v66(v55, 1, v118) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    if (v66(v65, 1, v67) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v68 = v112;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if (v66(v65, 1, v67) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v68, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
LABEL_20:
    double v48 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouTimeInfo?, CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    goto LABEL_28;
  }
  uint64_t v69 = v104;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, v104, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  char v70 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v68, v69, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v69, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v68, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((v70 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_22:
  uint64_t v71 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v72 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v73 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v55 = v108;
  uint64_t v74 = v108 + *(int *)(v105 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  uint64_t v76 = v107;
  if (v75(v55, 1, v107) != 1)
  {
    uint64_t v81 = v103;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    int v82 = v75(v74, 1, v76);
    uint64_t v78 = v111;
    uint64_t v79 = (uint64_t)v110;
    uint64_t v80 = (uint64_t)v109;
    if (v82 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
      goto LABEL_27;
    }
    uint64_t v84 = v99;
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v74, v99, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    char v85 = specialized static CLP_LogEntry_PrivateData_GalileoTimeInfo.== infix(_:_:)(v81, v84);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v84, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v81, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    if (v85) {
      goto LABEL_34;
    }
LABEL_30:
    swift_release();
    swift_release();
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  int v77 = v75(v74, 1, v76);
  uint64_t v78 = v111;
  uint64_t v79 = (uint64_t)v110;
  uint64_t v80 = (uint64_t)v109;
  if (v77 != 1)
  {
LABEL_27:
    double v48 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoTimeInfo?, CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    goto LABEL_28;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
LABEL_34:
  uint64_t v86 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v87 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  uint64_t v88 = v102;
  uint64_t v89 = v102 + *(int *)(v100 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v90 = v87;
  uint64_t v91 = v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v90, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  uint64_t v93 = v88;
  uint64_t v94 = v101;
  if (v92(v93, 1, v101) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
    if (v92(v89, 1, v94) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
      return 1;
    }
    goto LABEL_39;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if (v92(v89, 1, v94) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v79, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
LABEL_39:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_NavicTimeInfo?, CLP_LogEntry_PrivateData_NavicTimeInfo?));
    return 0;
  }
  uint64_t v95 = v98;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v89, v98, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  char v96 = specialized static CLP_LogEntry_PrivateData_NavicTimeInfo.== infix(_:_:)(v79, v95);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v95, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v79, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  return (v96 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_TimeConversionInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TimeConversionInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return CLP_LogEntry_PrivateData_TimeConversionInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TimeConversionInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #6 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #7 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #8 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #9 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_KlobucharModelParameters.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1[10];
  uint64_t v12 = a2 + a1[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a2 + v11;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, MEMORY[0x263F50648]);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_SfcfXyz.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_SfcfXyz.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SfcfXyz@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          goto LABEL_10;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    if (*(unsigned char *)(v5 + *(int *)(v10 + 24)) != 13)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Int CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 13;
  *(unsigned char *)(a2 + v6) = 4;
  uint64_t v7 = a2 + a1[8];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, MEMORY[0x263F50648]);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_ReceivedTimeStamp.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName.getter()
{
  return 0xD00000000000003ALL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v51 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v1;
  uint64_t v17 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = MEMORY[0x263F8EE78];
  uint64_t v19 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = v18;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v52 = v20;
  uint64_t v21 = v16;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v20, 1, 1, v22);
  uint64_t v23 = v21;
  uint64_t v24 = v21
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v23
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  uint64_t v53 = v23
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 8) = 1;
  uint64_t v26 = v23
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v54 = v23
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v55 = v23;
  uint64_t v27 = v23;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v26, 1, 1, v28);
  uint64_t v29 = (void *)(v27
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  *uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v30, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v11, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v32 = v51;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v32, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  char v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v34 = *v33;
  swift_beginAccess();
  *uint64_t v17 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v36 = *v35;
  swift_beginAccess();
  *uint64_t v19 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v38 = v56;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v39 = v52;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v38, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  uint64_t v40 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
  swift_beginAccess();
  uint64_t v41 = *v40;
  LOBYTE(v40) = *((unsigned char *)v40 + 8);
  swift_beginAccess();
  *(void *)uint64_t v24 = v41;
  *(unsigned char *)(v24 + 8) = (_BYTE)v40;
  uint64_t v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
  swift_beginAccess();
  uint64_t v43 = *v42;
  LOBYTE(v42) = *((unsigned char *)v42 + 8);
  uint64_t v44 = v53;
  swift_beginAccess();
  *(void *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = (_BYTE)v42;
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  uint64_t v46 = v57;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v47 = v54;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v46, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  double v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  uint64_t v49 = *v48;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v29 = v49;
  swift_bridgeObjectRelease();
  return v55;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport;
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo;
          uint64_t v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo;
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          uint64_t v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          goto LABEL_16;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo;
          goto LABEL_14;
        case 6:
        case 7:
          swift_beginAccess();
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v10, v9);
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          uint64_t v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
LABEL_16:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v12, v11);
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_17:
          uint64_t v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo;
  swift_beginAccess();
  if (*(void *)(*(void *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections;
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset;
  swift_beginAccess();
  if (*(void *)(*(void *)v16 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v136 = a2;
  uint64_t v116 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v129 = *(void *)(v116 - 8);
  MEMORY[0x270FA5388](v116);
  uint64_t v113 = (uint64_t)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_KlobucharModelParameters?, CLP_LogEntry_PrivateData_KlobucharModelParameters?));
  MEMORY[0x270FA5388](v115);
  uint64_t v117 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v114 = (uint64_t)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v119 = (uint64_t)&v112 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v122 = *(void *)(v9 - 8);
  uint64_t v123 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v118 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeConversionInfo?, CLP_LogEntry_PrivateData_TimeConversionInfo?));
  MEMORY[0x270FA5388](v121);
  uint64_t v124 = (uint64_t)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v120 = (uint64_t)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v125 = (uint64_t)&v112 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v131 = *(void *)(v16 - 8);
  uint64_t v132 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v126 = (uint64_t)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementReport?, CLP_LogEntry_PrivateData_MeasurementReport?));
  MEMORY[0x270FA5388](v130);
  uint64_t v133 = (uint64_t)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v127 = (uint64_t)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v134 = (uint64_t)&v112 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v128 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceivedTimeStamp?, CLP_LogEntry_PrivateData_ReceivedTimeStamp?));
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v135 = (uint64_t)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v112 - v33;
  uint64_t v35 = a1;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v37 = v136;
  uint64_t v38 = v136
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  uint64_t v39 = (uint64_t)&v29[*(int *)(v27 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v40((uint64_t)v29, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
    uint64_t v41 = v37;
    uint64_t v42 = v35;
    if (v40(v39, 1, v23) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceivedTimeStamp?, CLP_LogEntry_PrivateData_ReceivedTimeStamp?));
    goto LABEL_43;
  }
  uint64_t v42 = v35;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v135, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if (v40(v39, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v135, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
    goto LABEL_6;
  }
  uint64_t v43 = v128;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v39, v128, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  swift_retain();
  uint64_t v41 = v37;
  swift_retain();
  uint64_t v44 = v135;
  char v45 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v135, v43, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v43, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v44, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_8:
  uint64_t v46 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v47 = v134;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v48 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v49 = v133;
  uint64_t v50 = v133 + *(int *)(v130 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v133, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v51 = v48;
  uint64_t v52 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  uint64_t v54 = v49;
  uint64_t v55 = v132;
  if (v53(v54, 1, v132) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
    int v56 = v53(v50, 1, v55);
    uint64_t v57 = v129;
    if (v56 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
      goto LABEL_16;
    }
LABEL_13:
    uint64_t v60 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementReport?, CLP_LogEntry_PrivateData_MeasurementReport?);
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v60);
    goto LABEL_43;
  }
  uint64_t v58 = v127;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  int v59 = v53(v50, 1, v55);
  uint64_t v57 = v129;
  if (v59 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v58, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    goto LABEL_13;
  }
  uint64_t v61 = v58;
  uint64_t v62 = v126;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v50, v126, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  char v63 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v61, v62, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v61, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((v63 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_16:
  uint64_t v64 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v65 = *v64;
  uint64_t v66 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v67 = *v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v68 = specialized static Array<A>.== infix(_:_:)(v65, v67, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v70 = *v69;
  uint64_t v71 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v72 = *v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v73 = specialized static Array<A>.== infix(_:_:)(v70, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v74 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v75 = v125;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v125, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v76 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v77 = v124;
  uint64_t v78 = v124 + *(int *)(v121 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v79 = v76;
  uint64_t v52 = v77;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v81 = v77;
  uint64_t v82 = v123;
  if (v80(v81, 1, v123) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
    if (v80(v78, 1, v82) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v83 = v120;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if (v80(v78, 1, v82) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
LABEL_23:
    uint64_t v60 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeConversionInfo?, CLP_LogEntry_PrivateData_TimeConversionInfo?);
    goto LABEL_14;
  }
  uint64_t v84 = v118;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v78, v118, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  char v85 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v83, v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((v85 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_25:
  uint64_t v86 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  double v87 = *(double *)v86;
  char v88 = *(unsigned char *)(v86 + 8);
  uint64_t v89 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if (v88)
  {
    uint64_t v90 = v119;
    if ((*(unsigned char *)(v89 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v90 = v119;
    if ((*(unsigned char *)(v89 + 8) & 1) != 0 || v87 != *(double *)v89) {
      goto LABEL_43;
    }
  }
  uint64_t v91 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  double v92 = *(double *)v91;
  char v93 = *(unsigned char *)(v91 + 8);
  uint64_t v94 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if (v93)
  {
    if ((*(unsigned char *)(v94 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }
  else if ((*(unsigned char *)(v94 + 8) & 1) != 0 || v92 != *(double *)v94)
  {
    goto LABEL_43;
  }
  uint64_t v95 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, v90, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v96 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  uint64_t v97 = v117;
  uint64_t v98 = v117 + *(int *)(v115 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v90, v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v99 = v96;
  uint64_t v52 = v97;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99, v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  uint64_t v101 = v97;
  uint64_t v102 = v116;
  if (v100(v101, 1, v116) != 1)
  {
    uint64_t v103 = v114;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    if (v100(v98, 1, v102) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v103, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
      goto LABEL_40;
    }
    uint64_t v104 = v113;
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v98, v113, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    char v105 = specialized static CLP_LogEntry_PrivateData_KlobucharModelParameters.== infix(_:_:)(v103, v104);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v104, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v103, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    if (v105) {
      goto LABEL_42;
    }
LABEL_43:
    swift_release();
    swift_release();
    char v110 = 0;
    return v110 & 1;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v90, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if (v100(v98, 1, v102) != 1)
  {
LABEL_40:
    uint64_t v60 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_KlobucharModelParameters?, CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
LABEL_42:
  uint64_t v106 = (uint64_t *)(v42
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  uint64_t v107 = *v106;
  uint64_t v108 = (uint64_t *)(v41
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  uint64_t v109 = *v108;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v110 = specialized static Array<A>.== infix(_:_:)(v107, v109);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v110 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

Swift::Int CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v26 = a5;
  uint64_t v28 = a3(0);
  uint64_t v8 = MEMORY[0x270FA5388](v28);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v21 = 0;
    return v21 & 1;
  }
  if (v14 && a1 != a2)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v27 = *(void *)(v11 + 72);
    uint64_t v16 = v14 - 1;
    while (1)
    {
      outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1 + v15, (uint64_t)v13, a4);
      outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v15, (uint64_t)v10, a4);
      uint64_t v17 = *(int *)(v28 + 20);
      uint64_t v18 = *(void *)&v13[v17];
      uint64_t v19 = *(void *)&v10[v17];
      if (v18 != v19)
      {
        swift_retain();
        swift_retain();
        char v20 = v26(v18, v19);
        swift_release();
        swift_release();
        if ((v20 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, a4);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a4);
      BOOL v23 = v16-- != 0;
      if (v21)
      {
        v15 += v27;
        if (v23) {
          continue;
        }
      }
      return v21 & 1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, a4);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a4);
    goto LABEL_15;
  }
  char v21 = 1;
  return v21 & 1;
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;

  BOOL v23 = a5;
  uint64_t v24 = a3(0);
  uint64_t v8 = MEMORY[0x270FA5388](v24);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 == *(void *)(a2 + 16))
  {
    if (!v14 || a1 == a2) {
      return 1;
    }
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v22 = *(void *)(v11 + 72);
    while (1)
    {
      outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a1 + v15, (uint64_t)v13, a4);
      outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a2 + v15, (uint64_t)v10, a4);
      uint64_t v16 = *(int *)(v24 + 20);
      uint64_t v17 = *(void *)&v13[v16];
      uint64_t v18 = *(void *)&v10[v16];
      if (v17 != v18)
      {
        swift_retain();
        swift_retain();
        uint64_t v19 = v23(v17, v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, a4);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v13, a4);
      v15 += v22;
      if (!--v14) {
        return 1;
      }
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, a4);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v13, a4);
  }
  return 0;
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x246E38BF4);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)()
{
  return 0;
}

unint64_t specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(unint64_t result)
{
  if (result >= 0xD) {
    return 13;
  }
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SyncState._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Measurement._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Clock);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvInfo._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v93 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v75 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v74 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v76 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  uint64_t v10 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = MEMORY[0x263F8EE78];
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v80 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  uint64_t v81 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  uint64_t v82 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  uint64_t v83 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  uint64_t v84 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  uint64_t v17 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  *uint64_t v17 = v11;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  char v85 = v17;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  double v87 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  char v88 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  uint64_t v89 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  uint64_t v90 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  uint64_t v91 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v94 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v22 = v21;
  uint64_t v23 = v75;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v24 = v74;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v23, v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  uint64_t v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
  swift_beginAccess();
  uint64_t v26 = *v25;
  LOBYTE(v25) = *((unsigned char *)v25 + 8);
  swift_beginAccess();
  *(void *)uint64_t v9 = v26;
  *(unsigned char *)(v9 + 8) = (_BYTE)v25;
  char v27 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  LOBYTE(v26) = *v27;
  char v28 = v76;
  swift_beginAccess();
  unsigned char *v28 = v26;
  char v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v30 = *v29;
  swift_beginAccess();
  *uint64_t v10 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
  swift_beginAccess();
  uint64_t v32 = *v31;
  LOBYTE(v31) = *((unsigned char *)v31 + 8);
  swift_beginAccess();
  *(void *)uint64_t v12 = v32;
  *(unsigned char *)(v12 + 8) = (_BYTE)v31;
  uint64_t v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
  swift_beginAccess();
  uint64_t v34 = *v33;
  LOBYTE(v33) = *((unsigned char *)v33 + 8);
  swift_beginAccess();
  *(void *)uint64_t v13 = v34;
  *(unsigned char *)(v13 + 8) = (_BYTE)v33;
  uint64_t v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
  swift_beginAccess();
  uint64_t v36 = *v35;
  LOBYTE(v35) = *((unsigned char *)v35 + 8);
  uint64_t v37 = v77;
  swift_beginAccess();
  *(void *)uint64_t v37 = v36;
  *(unsigned char *)(v37 + 8) = (_BYTE)v35;
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  LODWORD(v35) = *(_DWORD *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = v78;
  swift_beginAccess();
  *(_DWORD *)uint64_t v39 = v35;
  *(unsigned char *)(v39 + 4) = v38;
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  LODWORD(v35) = *(_DWORD *)v40;
  LOBYTE(v40) = *(unsigned char *)(v40 + 4);
  uint64_t v41 = v79;
  swift_beginAccess();
  *(_DWORD *)uint64_t v41 = v35;
  *(unsigned char *)(v41 + 4) = v40;
  uint64_t v42 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  LOBYTE(v42) = *v42;
  uint64_t v43 = v80;
  swift_beginAccess();
  *uint64_t v43 = (_BYTE)v42;
  uint64_t v44 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  LOBYTE(v44) = *v44;
  char v45 = v81;
  swift_beginAccess();
  *char v45 = (_BYTE)v44;
  uint64_t v46 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  LOBYTE(v46) = *v46;
  uint64_t v47 = v82;
  swift_beginAccess();
  unsigned char *v47 = (_BYTE)v46;
  uint64_t v48 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  LOBYTE(v48) = *v48;
  uint64_t v49 = v83;
  swift_beginAccess();
  *uint64_t v49 = (_BYTE)v48;
  uint64_t v50 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  LOBYTE(v50) = *v50;
  uint64_t v51 = v84;
  swift_beginAccess();
  *uint64_t v51 = (_BYTE)v50;
  uint64_t v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v53 = *v52;
  uint64_t v54 = v85;
  swift_beginAccess();
  *uint64_t v54 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v56 = v93;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v57 = v86;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v56, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  swift_endAccess();
  uint64_t v58 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  LOBYTE(v58) = *v58;
  int v59 = v87;
  swift_beginAccess();
  *int v59 = (_BYTE)v58;
  uint64_t v60 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  LOBYTE(v60) = *v60;
  uint64_t v61 = v88;
  swift_beginAccess();
  *uint64_t v61 = (_BYTE)v60;
  uint64_t v62 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  LOBYTE(v62) = *v62;
  char v63 = v89;
  swift_beginAccess();
  *char v63 = (_BYTE)v62;
  uint64_t v64 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  LOBYTE(v64) = *v64;
  uint64_t v65 = v90;
  swift_beginAccess();
  *uint64_t v65 = (_BYTE)v64;
  uint64_t v66 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  LOBYTE(v66) = *v66;
  uint64_t v67 = v91;
  swift_beginAccess();
  *uint64_t v67 = (_BYTE)v66;
  char v68 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
  swift_beginAccess();
  uint64_t v69 = *v68;
  LOBYTE(v68) = *((unsigned char *)v68 + 8);
  uint64_t v70 = v92;
  swift_beginAccess();
  *(void *)uint64_t v70 = v69;
  *(unsigned char *)(v70 + 8) = (_BYTE)v68;
  uint64_t v71 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  LOBYTE(v71) = *v71;
  uint64_t v72 = v94;
  swift_beginAccess();
  *uint64_t v72 = (_BYTE)v71;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass);
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x246E3A3FCLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v32 - v9;
  BOOL v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_24;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_24;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2) {
      goto LABEL_23;
    }
LABEL_24:
    char v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  char v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v41 - v9;
  BOOL v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_27;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_27;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = v11[8];
  char v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (float *)(a1 + v32);
    char v34 = *(unsigned char *)(a1 + v32 + 4);
    uint64_t v35 = (float *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
    if (v34)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if (v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v71 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v70 = (char *)&v68 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v69 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SfcfXyz?, CLP_LogEntry_PrivateData_SfcfXyz?));
  MEMORY[0x270FA5388](v74);
  uint64_t v75 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v80 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v78 = (char *)&v68 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v79 = (char *)&v68 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  int v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  char v29 = (char *)&v68 - v28;
  MEMORY[0x270FA5388](v27);
  int v31 = (char *)&v68 - v30;
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  uint64_t v33 = v32[5];
  uint64_t v77 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v33, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83 + v32[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v34 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v35((uint64_t)v22, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    if (v35(v34, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_11;
    }
LABEL_6:
    int v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?);
    uint64_t v37 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v36);
LABEL_8:
    char v38 = 0;
    return v38 & 1;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v35(v34, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v40 = v76;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v34, v76, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  char v41 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)((uint64_t)v26, v40);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v40, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v41 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v42 = v32[6];
  uint64_t v43 = v77;
  int v44 = *(unsigned __int8 *)(v77 + v42);
  uint64_t v45 = v83;
  int v46 = *(unsigned __int8 *)(v83 + v42);
  if (v44 == 13)
  {
    uint64_t v48 = v81;
    uint64_t v47 = v82;
    uint64_t v50 = (uint64_t)v79;
    uint64_t v49 = (uint64_t)v80;
    uint64_t v51 = (uint64_t)v78;
    if (v46 != 13) {
      goto LABEL_8;
    }
  }
  else
  {
    char v38 = 0;
    uint64_t v48 = v81;
    uint64_t v47 = v82;
    uint64_t v50 = (uint64_t)v79;
    uint64_t v49 = (uint64_t)v80;
    uint64_t v51 = (uint64_t)v78;
    if (v46 == 13 || v44 != v46) {
      return v38 & 1;
    }
  }
  uint64_t v52 = v32[7];
  int v53 = *(unsigned __int8 *)(v77 + v52);
  int v54 = *(unsigned __int8 *)(v83 + v52);
  if (v53 == 4)
  {
    if (v54 != 4) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  char v38 = 0;
  if (v54 != 4 && v53 == v54)
  {
LABEL_21:
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + v32[8], v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45 + v32[8], v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v55 = v75;
    uint64_t v56 = v75 + *(int *)(v74 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v57 = v55;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    if (v58(v57, 1, v47) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      if (v58(v56, 1, v47) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
LABEL_28:
        uint64_t v63 = v72;
        uint64_t v62 = v73;
        uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
        uint64_t v65 = v70;
        v64(v70, v43, v73);
        uint64_t v66 = v71;
        v64(v71, v45, v62);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v67 = *(void (**)(char *, uint64_t))(v63 + 8);
        v67(v66, v62);
        v67(v65, v62);
        return v38 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      if (v58(v56, 1, v47) != 1)
      {
        uint64_t v59 = v69;
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v56, v69, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        uint64_t v60 = v57;
        char v61 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v49, v59, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v49, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        if (v61) {
          goto LABEL_28;
        }
        goto LABEL_8;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v49, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    }
    int v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SfcfXyz?, CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v37 = v75;
    goto LABEL_7;
  }
  return v38 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverClockCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_27;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_27;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (double *)(a1 + v32);
    char v34 = *(unsigned char *)(a1 + v32 + 8);
    uint64_t v35 = (double *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if (v34)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if (v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_KlobucharModelParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_51;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_51;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_51;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (float *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 4);
  uint64_t v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if (v29)
  {
    if (!v31) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_51;
    }
  }
  uint64_t v32 = v11[9];
  uint64_t v33 = (float *)(a1 + v32);
  char v34 = *(unsigned char *)(a1 + v32 + 4);
  uint64_t v35 = (float *)(a2 + v32);
  int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if (v34)
  {
    if (!v36) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if (v36) {
      goto LABEL_51;
    }
  }
  uint64_t v37 = v11[10];
  char v38 = (float *)(a1 + v37);
  char v39 = *(unsigned char *)(a1 + v37 + 4);
  uint64_t v40 = (float *)(a2 + v37);
  int v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if (v39)
  {
    if (!v41) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_51;
    }
  }
  uint64_t v42 = v11[11];
  uint64_t v43 = (float *)(a1 + v42);
  char v44 = *(unsigned char *)(a1 + v42 + 4);
  uint64_t v45 = (float *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_51;
    }
  }
  uint64_t v47 = v11[12];
  uint64_t v48 = (float *)(a1 + v47);
  char v49 = *(unsigned char *)(a1 + v47 + 4);
  uint64_t v50 = (float *)(a2 + v47);
  int v51 = *(unsigned __int8 *)(a2 + v47 + 4);
  if ((v49 & 1) == 0)
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if (v51) {
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v52 = v11[13];
    int v53 = (float *)(a1 + v52);
    char v54 = *(unsigned char *)(a1 + v52 + 4);
    uint64_t v55 = (float *)(a2 + v52);
    int v56 = *(unsigned __int8 *)(a2 + v52 + 4);
    if (v54)
    {
      if (!v56) {
        goto LABEL_51;
      }
    }
    else
    {
      if (*v53 != *v55) {
        LOBYTE(v56) = 1;
      }
      if (v56) {
        goto LABEL_51;
      }
    }
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v59(v10, a1, v4);
    v59(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v5 + 8);
    v60(v8, v4);
    v60(v10, v4);
    return v57 & 1;
  }
  if (v51) {
    goto LABEL_49;
  }
LABEL_51:
  char v57 = 0;
  return v57 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverBandCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_23;
    }
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_23;
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = (double *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 8);
  char v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if (v18)
  {
    if (!v20) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_23;
    }
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 4);
  char v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) == 0)
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v26 = v11[8];
    uint64_t v27 = (float *)(a1 + v26);
    char v28 = *(unsigned char *)(a1 + v26 + 4);
    char v29 = (float *)(a2 + v26);
    int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
    if (v28)
    {
      if (!v30) {
        goto LABEL_23;
      }
    }
    else
    {
      if (*v27 != *v29) {
        LOBYTE(v30) = 1;
      }
      if (v30) {
        goto LABEL_23;
      }
    }
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a1, v4);
    v33(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v34 = *(void (**)(char *, uint64_t))(v5 + 8);
    v34(v8, v4);
    v34(v10, v4);
    return v31 & 1;
  }
  if (v25) {
    goto LABEL_21;
  }
LABEL_23:
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalCorrelationPeak.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v66 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v65 = (char *)&v64 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v69 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
  MEMORY[0x270FA5388](v71);
  uint64_t v75 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v70 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v77 = (uint64_t)&v64 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v72 = (uint64_t)&v64 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  char v29 = (char *)&v64 - v28;
  MEMORY[0x270FA5388](v27);
  char v31 = (char *)&v64 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v32 + 20), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v76 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79 + *(int *)(v32 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?);
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  char v37 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((v37 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v38 = v76;
  uint64_t v39 = v78;
  uint64_t v40 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v76 + 24), v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v41 = v79;
  uint64_t v42 = v77;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79 + *(int *)(v38 + 24), v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v43 = v75;
  uint64_t v44 = v75 + *(int *)(v71 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v45 = v74;
  int v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v46(v43, 1, v74) != 1)
  {
    uint64_t v47 = v70;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (v46(v44, 1, v45) != 1)
    {
      uint64_t v50 = v69;
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v44, v69, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      char v51 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v47, v50, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v50, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v47, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      if ((v51 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v47, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (v46(v44, 1, v45) != 1)
  {
LABEL_13:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?);
    uint64_t v36 = v43;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
LABEL_18:
  uint64_t v52 = *(int *)(v76 + 28);
  int v53 = (float *)(v39 + v52);
  char v54 = *(unsigned char *)(v39 + v52 + 4);
  uint64_t v55 = (float *)(v41 + v52);
  int v56 = *(unsigned __int8 *)(v41 + v52 + 4);
  if (v54)
  {
    if (v56)
    {
LABEL_24:
      uint64_t v57 = v67;
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v59 = v65;
      uint64_t v60 = v39;
      uint64_t v61 = v68;
      v58(v65, v60, v68);
      uint64_t v62 = v66;
      v58(v66, v41, v61);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v63(v62, v61);
      v63(v59, v61);
      return v48 & 1;
    }
  }
  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if ((v56 & 1) == 0) {
      goto LABEL_24;
    }
  }
LABEL_15:
  char v48 = 0;
  return v48 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (float *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 4);
    uint64_t v25 = (float *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GpsToUtcConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_21;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_21;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (double *)(a1 + v27);
    char v29 = *(unsigned char *)(a1 + v27 + 8);
    uint64_t v30 = (double *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if (v29)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if (v31) {
        goto LABEL_21;
      }
    }
    char v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoE5SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_52;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_52;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_52;
    }
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_52;
    }
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_52;
    }
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      goto LABEL_52;
    }
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v30 = v11[11];
  int v31 = *(unsigned __int8 *)(a1 + v30);
  int v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2) {
      goto LABEL_52;
    }
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v33 = v11[12];
  int v34 = *(unsigned __int8 *)(a1 + v33);
  int v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2) {
      goto LABEL_52;
    }
  }
  else if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v36 = v11[13];
  int v37 = *(unsigned __int8 *)(a1 + v36);
  int v38 = *(unsigned __int8 *)(a2 + v36);
  if (v37 == 2)
  {
    if (v38 != 2) {
      goto LABEL_52;
    }
  }
  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v39 = v11[14];
  int v40 = *(unsigned __int8 *)(a1 + v39);
  int v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 == 2) {
      goto LABEL_51;
    }
LABEL_52:
    char v43 = 0;
    return v43 & 1;
  }
  if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v10, a1, v4);
  v42(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v8, v4);
  v44(v10, v4);
  return v43 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvBandCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_29;
    }
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_29;
  }
  uint64_t v16 = v11[6];
  int v17 = (double *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 8);
  int v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if (v18)
  {
    if (!v20) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_29;
    }
  }
  uint64_t v21 = v11[7];
  int v22 = (double *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 8);
  uint64_t v24 = (double *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if (v23)
  {
    if (!v25) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_29;
    }
  }
  uint64_t v26 = v11[8];
  uint64_t v27 = (double *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 8);
  int v29 = (double *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if (v28)
  {
    if (!v30) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_29;
    }
  }
  uint64_t v31 = v11[9];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 3)
  {
    if (v33 != 3)
    {
LABEL_29:
      char v34 = 0;
      return v34 & 1;
    }
LABEL_33:
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v36(v10, a1, v4);
    v36(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v8, v4);
    v37(v10, v4);
    return v34 & 1;
  }
  char v34 = 0;
  if (v33 != 3 && v32 == v33) {
    goto LABEL_33;
  }
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvPositionAtTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  int v19 = (char *)&v43 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  int v25 = (double *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 8);
  uint64_t v50 = a2;
  uint64_t v27 = (double *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    if (v31(v30, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      uint64_t v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      int v41 = v47;
      v38(v47, v50, v40);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  char v36 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v32, v35, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v35, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SbasL1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_17;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_17;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2) {
      goto LABEL_16;
    }
LABEL_17:
    char v22 = 0;
    return v22 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PolynomialOrbit.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 32);
  int v14 = (double *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  int v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_17;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_17;
    }
  }
  uint64_t v18 = *(int *)(v11 + 36);
  int v19 = (double *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v20)
  {
    if (!v22)
    {
LABEL_17:
      char v24 = 0;
      return v24 & 1;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_17;
    }
  }
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    || !specialized static Array<A>.== infix(_:_:)(a1[1], a2[1])
    || !specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
  {
    goto LABEL_17;
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v23(v10, (char *)a1 + *(int *)(v12 + 28), v4);
  v23(v8, (char *)a2 + *(int *)(v12 + 28), v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_27;
    }
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_27;
    }
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_27;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2) {
      goto LABEL_27;
    }
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v26 = v13[9];
  int v27 = *(unsigned __int8 *)(a1 + v26);
  int v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 2)
  {
    if (v28 == 2) {
      goto LABEL_26;
    }
LABEL_27:
    char v30 = 0;
    return v30 & 1;
  }
  if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v12, a1, v6);
  v29(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v10, v6);
  v31(v12, v6);
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    int v18 = (double *)(a1 + v17);
    char v19 = *(unsigned char *)(a1 + v17 + 8);
    uint64_t v20 = (double *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
    if (v19)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        goto LABEL_9;
      }
    }
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v80 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v79 = (char *)&v73 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v85 = v8;
  uint64_t v86 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v83 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, CLP_LogEntry_PrivateData_GlonassSubsecondConversion?));
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v84 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v73 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v82 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  int v21 = (char *)&v73 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  int v24 = (char *)&v73 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  int v27 = (char *)&v73 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  char v30 = (char *)&v73 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v73 - v31;
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v34 = a2;
  uint64_t v35 = v33;
  uint64_t v36 = v33[5];
  uint64_t v37 = (_DWORD *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 4);
  uint64_t v39 = (_DWORD *)(v34 + v36);
  int v40 = *(unsigned __int8 *)(v34 + v36 + 4);
  if (v38)
  {
    if (!v40) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_32;
    }
  }
  uint64_t v41 = v33[6];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 4);
  uint64_t v44 = (_DWORD *)(v34 + v41);
  int v45 = *(unsigned __int8 *)(v34 + v41 + 4);
  if (v43)
  {
    if (!v45) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_32;
    }
  }
  uint64_t v46 = v33[7];
  int v47 = *(unsigned __int8 *)(a1 + v46);
  int v48 = *(unsigned __int8 *)(v34 + v46);
  uint64_t v76 = v4;
  if (v47 == 6)
  {
    if (v48 != 6) {
      goto LABEL_32;
    }
LABEL_18:
    uint64_t v50 = v33[8];
    uint64_t v74 = a1;
    uint64_t v51 = a1 + v50;
    uint64_t v52 = v34;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v53 = v35[8];
    uint64_t v75 = v52;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52 + v53, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v54 = (uint64_t)&v15[*(int *)(v11 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v77 = v54;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v55 = v85;
    uint64_t v56 = v86 + 48;
    uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    if (v78((uint64_t)v15, 1, v85) == 1)
    {
      uint64_t v86 = v56;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      uint64_t v57 = v78;
      if (v78(v77, 1, v55) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
LABEL_25:
        uint64_t v60 = v74;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v35[9], (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v35[9], (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        uint64_t v61 = v84;
        uint64_t v62 = v84 + *(int *)(v11 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if (v57(v61, 1, v55) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          if (v57(v62, 1, v55) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
LABEL_35:
            uint64_t v67 = v81;
            uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
            uint64_t v69 = v79;
            uint64_t v70 = v76;
            v68(v79, v60, v76);
            uint64_t v71 = v80;
            v68(v80, v75, v70);
            lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v72 = *(void (**)(char *, uint64_t))(v67 + 8);
            v72(v71, v70);
            v72(v69, v70);
            return v49 & 1;
          }
          goto LABEL_30;
        }
        uint64_t v63 = v82;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if (v57(v62, 1, v55) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v63, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_30:
          uint64_t v58 = v61;
          goto LABEL_31;
        }
        uint64_t v65 = v83;
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, v83, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        char v66 = specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)(v63, v65);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v63, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if (v66) {
          goto LABEL_35;
        }
LABEL_32:
        char v49 = 0;
        return v49 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      if (v78(v77, 1, v55) != 1)
      {
        uint64_t v86 = v56;
        uint64_t v59 = v83;
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v77, v83, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        LODWORD(v77) = specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)((uint64_t)v27, v59);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        uint64_t v57 = v78;
        if ((v77 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    }
    uint64_t v58 = (uint64_t)v15;
LABEL_31:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, CLP_LogEntry_PrivateData_GlonassSubsecondConversion?));
    goto LABEL_32;
  }
  char v49 = 0;
  if (v48 != 6 && v47 == v48) {
    goto LABEL_18;
  }
  return v49 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v83 = (char *)&v81 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v88 = (uint64_t)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  uint64_t v10 = MEMORY[0x270FA5388](v97);
  uint64_t v89 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v96 = (uint64_t)&v81 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v87 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v91 = (char *)&v81 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v92 = (char *)&v81 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v90 = (uint64_t)&v81 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v98 = (uint64_t)&v81 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v93 = (uint64_t)&v81 - v24;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v35 = (char *)&v81 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  char v38 = (char *)&v81 - v37;
  MEMORY[0x270FA5388](v36);
  int v40 = (char *)&v81 - v39;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v42 = *(int *)(v41 + 20);
  char v43 = (_DWORD *)(a1 + v42);
  char v44 = *(unsigned char *)(a1 + v42 + 4);
  uint64_t v99 = a2;
  int v45 = (_DWORD *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_28;
    }
  }
  uint64_t v47 = *(int *)(v41 + 24);
  uint64_t v48 = v41;
  uint64_t v81 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v47, (uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v82 = v48;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99 + *(int *)(v48 + 24), (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v49 = (uint64_t)&v31[*(int *)(v29 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v50((uint64_t)v31, 1, v25) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v50(v49, 1, v25) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?);
    uint64_t v52 = (uint64_t)v31;
LABEL_27:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v51);
    goto LABEL_28;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v50(v49, 1, v25) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v49, (uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  char v53 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)((uint64_t)v35, (uint64_t)v28);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((v53 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v55 = v81;
  uint64_t v54 = v82;
  uint64_t v56 = v93;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81 + *(int *)(v82 + 28), v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v57 = v98;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99 + *(int *)(v54 + 28), v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v58 = v96;
  uint64_t v59 = v96 + *(int *)(v97 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v96, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v60 = v95;
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v61(v58, 1, v95) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    int v62 = v61(v59, 1, v60);
    uint64_t v64 = (uint64_t)v91;
    uint64_t v63 = (uint64_t)v92;
    if (v62 != 1)
    {
LABEL_26:
      uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?);
      uint64_t v52 = v58;
      goto LABEL_27;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_20:
    uint64_t v69 = v82;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55 + *(int *)(v82 + 32), v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99 + *(int *)(v69 + 32), v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v58 = v89;
    uint64_t v70 = v89 + *(int *)(v97 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v61(v58, 1, v60) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      if (v61(v70, 1, v60) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_31:
        uint64_t v75 = v85;
        uint64_t v76 = v86;
        uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
        uint64_t v78 = v83;
        v77(v83, v55, v86);
        uint64_t v79 = v84;
        v77(v84, v99, v76);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v80 = *(void (**)(char *, uint64_t))(v75 + 8);
        v80(v79, v76);
        v80(v78, v76);
        return v71 & 1;
      }
      goto LABEL_26;
    }
    uint64_t v65 = v87;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v61(v70, 1, v60) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      uint64_t v67 = v63;
      goto LABEL_25;
    }
    uint64_t v73 = v88;
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v70, v88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    char v74 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v65, v73);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v73, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v74) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  uint64_t v65 = v90;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v90, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  int v66 = v61(v59, 1, v60);
  uint64_t v64 = (uint64_t)v91;
  uint64_t v63 = (uint64_t)v92;
  if (v66 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v67 = v56;
LABEL_25:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_26;
  }
  uint64_t v68 = v88;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v59, v88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  LODWORD(v94) = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v65, v68);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v94) {
    goto LABEL_20;
  }
LABEL_28:
  char v71 = 0;
  return v71 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PhaseTracking.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_31;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if (v29)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (double *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 8);
    uint64_t v25 = (double *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_NavicTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v45 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v49 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v50 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = (uint64_t)v51;
    uint64_t v29 = v52;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v27(v26, 1, v8) != 1)
    {
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v26, v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      char v32 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v29, v28);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v29, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      if ((v32 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v29, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_10:
  uint64_t v33 = *(int *)(v23 + 24);
  uint64_t v34 = v50;
  uint64_t v35 = (_DWORD *)(v49 + v33);
  char v36 = *(unsigned char *)(v49 + v33 + 4);
  uint64_t v37 = (_DWORD *)(v50 + v33);
  int v38 = *(unsigned __int8 *)(v50 + v33 + 4);
  if (v36)
  {
    if (v38)
    {
LABEL_16:
      uint64_t v40 = v47;
      uint64_t v39 = v48;
      uint64_t v41 = *(void (**)(char *))(v47 + 16);
      uint64_t v42 = v45;
      v41(v45);
      char v43 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v41)(v46, v34, v39);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v39);
      v44(v42, v39);
      return v30 & 1;
    }
  }
  else
  {
    if (*v35 != *v37) {
      LOBYTE(v38) = 1;
    }
    if ((v38 & 1) == 0) {
      goto LABEL_16;
    }
  }
LABEL_7:
  char v30 = 0;
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_LeapSecondChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    uint64_t v18 = (_DWORD *)(a1 + v17);
    char v19 = *(unsigned char *)(a1 + v17 + 4);
    uint64_t v20 = (_DWORD *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if (v19)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        goto LABEL_9;
      }
    }
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v53 = (char *)&v49 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v56 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondChange?, CLP_LogEntry_PrivateData_LeapSecondChange?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v18);
  char v22 = (char *)&v49 - v21;
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v24 = a2;
  uint64_t v25 = v23;
  uint64_t v26 = v23[5];
  char v27 = (_DWORD *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 4);
  uint64_t v29 = (_DWORD *)(v24 + v26);
  int v30 = *(unsigned __int8 *)(v24 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_18;
    }
  }
  uint64_t v52 = v4;
  uint64_t v31 = v23[6];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(v24 + v31);
  if (v32 == 5)
  {
    if (v33 != 5) {
      goto LABEL_18;
    }
LABEL_12:
    uint64_t v35 = v23[7];
    uint64_t v50 = a1;
    uint64_t v36 = a1 + v35;
    uint64_t v37 = v24;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    uint64_t v38 = v25[7];
    uint64_t v51 = v37;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37 + v38, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    uint64_t v39 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
    if (v40((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      if (v40(v39, 1, v8) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
LABEL_21:
        uint64_t v43 = v55;
        char v44 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
        uint64_t v45 = v52;
        int v46 = v53;
        v44(v53, v50, v52);
        uint64_t v47 = v54;
        v44(v54, v51, v45);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v43 + 8);
        v48(v47, v45);
        v48(v46, v45);
        return v34 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      if (v40(v39, 1, v8) != 1)
      {
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v39, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        char v42 = specialized static CLP_LogEntry_PrivateData_LeapSecondChange.== infix(_:_:)((uint64_t)v17, (uint64_t)v10);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        if (v42) {
          goto LABEL_21;
        }
LABEL_18:
        char v34 = 0;
        return v34 & 1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondChange?, CLP_LogEntry_PrivateData_LeapSecondChange?));
    goto LABEL_18;
  }
  char v34 = 0;
  if (v33 != 5 && v32 == v33) {
    goto LABEL_12;
  }
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GpsTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v65 = (char *)&v63 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v64 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsToUtcConversion?, CLP_LogEntry_PrivateData_GpsToUtcConversion?));
  MEMORY[0x270FA5388](v71);
  uint64_t v76 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v72 = (uint64_t)&v63 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v73 = (uint64_t)&v63 - v16;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v70 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x270FA5388](v20);
  char v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v33 = v32;
  uint64_t v34 = *(int *)(v32 + 20);
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v35 = (_DWORD *)(a1 + v34);
  char v36 = *(unsigned char *)(a1 + v34 + 4);
  uint64_t v37 = (_DWORD *)(a2 + v34);
  int v38 = *(unsigned __int8 *)(a2 + v34 + 4);
  if (v36)
  {
    if (!v38) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v35 != *v37) {
      LOBYTE(v38) = 1;
    }
    if (v38) {
      goto LABEL_21;
    }
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v32 + 24), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v33 + 24), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v39 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v40((uint64_t)v22, 1, v17) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v40(v39, 1, v17) != 1)
    {
      uint64_t v43 = v70;
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v39, v70, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      char v44 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)((uint64_t)v26, v43);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v43, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      if ((v44 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_12:
    uint64_t v41 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?);
    uint64_t v42 = (uint64_t)v22;
LABEL_20:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v41);
    goto LABEL_21;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v40(v39, 1, v17) != 1) {
    goto LABEL_12;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
LABEL_14:
  uint64_t v45 = v73;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v33 + 28), v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  uint64_t v46 = v78 + *(int *)(v33 + 28);
  uint64_t v47 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  uint64_t v48 = v76;
  uint64_t v49 = v76 + *(int *)(v71 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  uint64_t v50 = v75;
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v51(v48, 1, v75) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    if (v51(v49, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
LABEL_24:
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v60 = v65;
      v59(v65, v77, v68);
      uint64_t v61 = v66;
      v59(v66, v78, v57);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v61, v57);
      v62(v60, v57);
      return v53 & 1;
    }
    goto LABEL_19;
  }
  uint64_t v52 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if (v51(v49, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v52, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
LABEL_19:
    uint64_t v41 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsToUtcConversion?, CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    uint64_t v42 = v48;
    goto LABEL_20;
  }
  uint64_t v55 = v64;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v49, v64, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  char v56 = specialized static CLP_LogEntry_PrivateData_GpsToUtcConversion.== infix(_:_:)(v52, v55);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v55, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v52, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if (v56) {
    goto LABEL_24;
  }
LABEL_21:
  char v53 = 0;
  return v53 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FullSvTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_20;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_20;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_20;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_20;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 6)
  {
    if (v24 != 6 && v23 == v24) {
      goto LABEL_15;
    }
LABEL_20:
    char v26 = 0;
    return v26 & 1;
  }
  if (v24 != 6) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v25(v10, a1, v4);
  v25(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_22;
    }
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_22;
    }
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_22;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2) {
      goto LABEL_21;
    }
LABEL_22:
    char v27 = 0;
    return v27 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  char v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v12, a1, v6);
  v26(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v10, v6);
  v28(v12, v6);
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v24 = v13[7];
    int v25 = (double *)(a1 + v24);
    char v26 = *(unsigned char *)(a1 + v24 + 8);
    char v27 = (double *)(a2 + v24);
    int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if (v26)
    {
      if (!v28) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v25 != *v27) {
        LOBYTE(v28) = 1;
      }
      if (v28) {
        goto LABEL_15;
      }
    }
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v6);
    v32(v12, v6);
    return v29 & 1;
  }
  if (v23) {
    goto LABEL_13;
  }
LABEL_15:
  char v29 = 0;
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_19;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if (v21)
  {
    if (!v23) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_19;
    }
  }
  uint64_t v24 = v13[7];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2) {
      goto LABEL_18;
    }
LABEL_19:
    char v28 = 0;
    return v28 & 1;
  }
  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_18:
  char v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v12, a1, v6);
  v27(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  return v28 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverClockModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  char v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_31;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  int v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = v11[8];
  char v28 = (float *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 4);
  uint64_t v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if (v29)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Clock.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = type metadata accessor for UnknownStorage();
  uint64_t v99 = *(void *)(v89 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v89);
  uint64_t v88 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v87 = (char *)&v85 - v6;
  uint64_t v92 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v98 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v86 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?));
  MEMORY[0x270FA5388](v91);
  uint64_t v93 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v97 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v95 = (char *)&v85 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v96 = (char *)&v85 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v102 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v90 = (uint64_t)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockCorrections?, CLP_LogEntry_PrivateData_ReceiverClockCorrections?));
  MEMORY[0x270FA5388](v100);
  uint64_t v103 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v94 = (uint64_t)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v104 = (uint64_t)&v85 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v105 = (uint64_t)&v85 - v23;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockModel?, CLP_LogEntry_PrivateData_ReceiverClockModel?));
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  int v34 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  uint64_t v37 = (char *)&v85 - v36;
  MEMORY[0x270FA5388](v35);
  uint64_t v39 = (char *)&v85 - v38;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v42 = (void *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 8);
  char v44 = (void *)(a2 + v41);
  int v45 = *(unsigned __int8 *)(a2 + v41 + 8);
  if (v43)
  {
    if (!v45) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_28;
    }
  }
  uint64_t v46 = v40;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106 + *(int *)(v40 + 24), (uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v85 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107 + *(int *)(v46 + 24), (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v47 = (uint64_t)&v30[*(int *)(v28 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v48((uint64_t)v30, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    if (v48(v47, 1, v24) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v49 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockModel?, CLP_LogEntry_PrivateData_ReceiverClockModel?);
    uint64_t v50 = (uint64_t)v30;
LABEL_27:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v49);
    goto LABEL_28;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if (v48(v47, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    goto LABEL_12;
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v47, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  char v51 = specialized static CLP_LogEntry_PrivateData_ReceiverClockModel.== infix(_:_:)((uint64_t)v34, (uint64_t)v27);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((v51 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v52 = v85;
  uint64_t v53 = v105;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106 + *(int *)(v85 + 28), v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v54 = v104;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107 + *(int *)(v52 + 28), v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v55 = v103;
  uint64_t v56 = v103 + *(int *)(v100 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v57 = v102;
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  if (v58(v55, 1, v102) != 1)
  {
    uint64_t v65 = v94;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    int v66 = v58(v56, 1, v57);
    uint64_t v61 = v98;
    uint64_t v67 = v99;
    uint64_t v63 = (uint64_t)v96;
    uint64_t v68 = v97;
    uint64_t v64 = (uint64_t)v95;
    if (v66 != 1)
    {
      uint64_t v69 = v90;
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v56, v90, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      LODWORD(v102) = specialized static CLP_LogEntry_PrivateData_ReceiverClockCorrections.== infix(_:_:)(v65, v69);
      uint64_t v70 = (uint64_t)v68;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v69, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      uint64_t v60 = v67;
      uint64_t v62 = v70;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      if ((v102 & 1) == 0) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
    goto LABEL_19;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  int v59 = v58(v56, 1, v57);
  uint64_t v61 = v98;
  uint64_t v60 = v99;
  uint64_t v63 = (uint64_t)v96;
  uint64_t v62 = (uint64_t)v97;
  uint64_t v64 = (uint64_t)v95;
  if (v59 != 1)
  {
LABEL_19:
    uint64_t v49 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockCorrections?, CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    uint64_t v50 = v55;
    goto LABEL_27;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
LABEL_21:
  uint64_t v71 = v85;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106 + *(int *)(v85 + 32), v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107 + *(int *)(v71 + 32), v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v72 = v93;
  uint64_t v73 = v93 + *(int *)(v91 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  uint64_t v75 = v92;
  if (v74(v72, 1, v92) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    if (v74(v73, 1, v75) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
LABEL_31:
      uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v81 = v87;
      uint64_t v82 = v89;
      v80(v87, v106, v89);
      uint64_t v83 = v88;
      v80(v88, v107, v82);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v60 + 8);
      v84(v83, v82);
      v84(v81, v82);
      return v76 & 1;
    }
    goto LABEL_26;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if (v74(v73, 1, v75) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
LABEL_26:
    uint64_t v49 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    uint64_t v50 = v72;
    goto LABEL_27;
  }
  uint64_t v78 = v86;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v73, v86, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  char v79 = specialized static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.== infix(_:_:)(v62, v78);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v78, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if (v79) {
    goto LABEL_31;
  }
LABEL_28:
  char v76 = 0;
  return v76 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSlotInfo?, CLP_LogEntry_PrivateData_GlonassSlotInfo?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 4);
  uint64_t v50 = a2;
  uint64_t v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    if (v31(v30, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      uint64_t v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      uint64_t v41 = v47;
      v38(v47, v50, v40);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSlotInfo?, CLP_LogEntry_PrivateData_GlonassSlotInfo?));
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  char v36 = specialized static CLP_LogEntry_PrivateData_GlonassSlotInfo.== infix(_:_:)(v32, v35);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v35, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ConstellationId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v72 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v71 = (char *)&v68 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassId?, CLP_LogEntry_PrivateData_GlonassId?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v68 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v24 = a1;
  uint64_t v25 = (int *)v23;
  uint64_t v26 = *(int *)(v23 + 20);
  uint64_t v27 = (_DWORD *)(v24 + v26);
  char v28 = *(unsigned char *)(v24 + v26 + 4);
  uint64_t v75 = a2;
  uint64_t v29 = (_DWORD *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_13;
    }
  }
  uint64_t v69 = v4;
  uint64_t v70 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24 + *(int *)(v23 + 24), (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v25[6], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  uint64_t v31 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v32((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    if (v32(v31, 1, v8) != 1)
    {
      uint64_t v35 = v74;
      outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v31, v74, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      char v36 = specialized static CLP_LogEntry_PrivateData_GlonassId.== infix(_:_:)((uint64_t)v17, v35);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v35, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      if ((v36 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassId?, CLP_LogEntry_PrivateData_GlonassId?));
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if (v32(v31, 1, v8) != 1) {
    goto LABEL_12;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
LABEL_16:
  uint64_t v37 = v25[7];
  uint64_t v38 = (_DWORD *)(v70 + v37);
  char v39 = *(unsigned char *)(v70 + v37 + 4);
  uint64_t v40 = (_DWORD *)(v75 + v37);
  int v41 = *(unsigned __int8 *)(v75 + v37 + 4);
  if (v39)
  {
    if (!v41) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_13;
    }
  }
  uint64_t v42 = v25[8];
  uint64_t v43 = (_DWORD *)(v70 + v42);
  char v44 = *(unsigned char *)(v70 + v42 + 4);
  uint64_t v45 = (_DWORD *)(v75 + v42);
  int v46 = *(unsigned __int8 *)(v75 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_13;
    }
  }
  uint64_t v47 = v25[9];
  uint64_t v48 = (_DWORD *)(v70 + v47);
  char v49 = *(unsigned char *)(v70 + v47 + 4);
  uint64_t v50 = (_DWORD *)(v75 + v47);
  int v51 = *(unsigned __int8 *)(v75 + v47 + 4);
  if (v49)
  {
    if (!v51) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if (v51) {
      goto LABEL_13;
    }
  }
  uint64_t v52 = v25[10];
  uint64_t v53 = (_DWORD *)(v70 + v52);
  char v54 = *(unsigned char *)(v70 + v52 + 4);
  uint64_t v55 = (_DWORD *)(v75 + v52);
  int v56 = *(unsigned __int8 *)(v75 + v52 + 4);
  if (v54)
  {
    if (!v56) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if (v56) {
      goto LABEL_13;
    }
  }
  uint64_t v57 = v25[11];
  uint64_t v58 = (_DWORD *)(v70 + v57);
  char v59 = *(unsigned char *)(v70 + v57 + 4);
  uint64_t v60 = (_DWORD *)(v75 + v57);
  int v61 = *(unsigned __int8 *)(v75 + v57 + 4);
  if ((v59 & 1) == 0)
  {
    if (*v58 != *v60) {
      LOBYTE(v61) = 1;
    }
    if (v61) {
      goto LABEL_13;
    }
LABEL_46:
    uint64_t v62 = v73;
    uint64_t v63 = *(void (**)(char *))(v73 + 16);
    uint64_t v64 = v71;
    uint64_t v65 = v69;
    v63(v71);
    int v66 = v72;
    ((void (*)(char *, uint64_t, uint64_t))v63)(v72, v75, v65);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v62 + 8);
    v67(v66, v65);
    v67(v64, v65);
    return v33 & 1;
  }
  if (v61) {
    goto LABEL_46;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ConstellationId?, CLP_LogEntry_PrivateData_ConstellationId?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 4);
  uint64_t v50 = a2;
  uint64_t v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    if (v31(v30, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      char v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      int v41 = v47;
      v38(v47, v50, v40);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ConstellationId?, CLP_LogEntry_PrivateData_ConstellationId?));
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  char v36 = specialized static CLP_LogEntry_PrivateData_ConstellationId.== infix(_:_:)(v32, v35);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v35, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v32, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassSlotInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_14;
    }
  }
  uint64_t v17 = *(int *)(v11 + 24);
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 != 5)
  {
    if (v19 != 5 && v18 == v19) {
      goto LABEL_9;
    }
LABEL_14:
    char v21 = 0;
    return v21 & 1;
  }
  if (v19 != 5) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, a1, v4);
  v20(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GlonassSlotSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GlonassSlotSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SatelliteSystem] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SatelliteSystem]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Band()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Band] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Band]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_FullSvTimeSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_FullSvTimeSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MeasurementDetectionMethod] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MeasurementDetectionMethod]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MultipathIndicator] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MultipathIndicator]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvPositionSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvPositionSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvPositionSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvHealthIndication] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvHealthIndication]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IonosphericCorrectionSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IonosphericCorrectionSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvReferencePoint] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvReferencePoint]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E47EE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E48078);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Band()
{
  return &type metadata for CLP_LogEntry_PrivateData_Band;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator;
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementDetectionMethod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E481BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvPositionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E48360);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E48464);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTimeSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTimeSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E485F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246E486FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassSlotInfo(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E48A80);
}

uint64_t sub_246E48A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E48B5C);
}

uint64_t sub_246E48B5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    unsigned int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)unsigned int v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    char v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      char v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_GlonassId(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v31 = a1;
  uint64_t v13 = (unsigned char *)(a1 + v12);
  uint64_t v14 = (unsigned char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v26 = *(int *)(v15 + 20);
      uint64_t v27 = &v13[v26];
      int v28 = &v14[v26];
      int v29 = *(_DWORD *)v28;
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = v29;
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      return v31;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v24 - 8) + 64));
    return v31;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 16))(v13, v14, v6);
  uint64_t v20 = *(int *)(v15 + 20);
  char v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  int v23 = *(_DWORD *)v22;
  v21[4] = v22[4];
  *(_DWORD *)char v21 = v23;
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v31;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v28 = a1;
  uint64_t v12 = (unsigned char *)(a1 + v9);
  uint64_t v13 = (unsigned char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      uint64_t v24 = *(int *)(v14 + 20);
      uint64_t v25 = &v12[v24];
      uint64_t v26 = &v13[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
      return v28;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return v28;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32))(v12, v13, v6);
  uint64_t v19 = *(int *)(v14 + 20);
  uint64_t v20 = &v12[v19];
  char v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return v28;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E49628);
}

uint64_t sub_246E49628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_201Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E49648);
}

uint64_t sub_246E49648(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_202Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ConstellationId(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      char v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = *(int *)(v15 + 24);
      int v46 = v13;
      __dst = &v13[v22];
      int v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v45 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v23, 1, v24))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        __dst[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
        (*(void (**)(void))(v45 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v46, 0, 1, v15);
    }
    uint64_t v29 = a3[7];
    uint64_t v30 = a3[8];
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    char v33 = (char *)a1 + v30;
    int v34 = (char *)a2 + v30;
    *(_DWORD *)char v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    uint64_t v35 = a3[9];
    uint64_t v36 = a3[10];
    uint64_t v37 = (char *)a1 + v35;
    uint64_t v38 = (char *)a2 + v35;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    char v39 = (char *)a1 + v36;
    uint64_t v40 = (char *)a2 + v36;
    *(_DWORD *)char v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = a3[11];
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    LODWORD(v37) = *(_DWORD *)v43;
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = v37;
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v10(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    uint64_t v44 = v12;
    __dst = &v12[v20];
    char v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v80 + 24);
  uint64_t v81 = v6;
  v7(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v82 = a3;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v79 = *(void *)(v15 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  int v17 = v16(v13, 1, v15);
  int v18 = v16((uint64_t)v14, 1, v15);
  if (!v17)
  {
    if (!v18)
    {
      uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v7;
      ((void (*)(uint64_t, char *, uint64_t))v7)(v13, v14, v81);
      uint64_t v34 = *(int *)(v15 + 20);
      uint64_t v35 = v13 + v34;
      uint64_t v36 = &v14[v34];
      char v37 = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      *(unsigned char *)(v35 + 4) = v37;
      uint64_t v38 = *(int *)(v15 + 24);
      uint64_t v39 = v13 + v38;
      uint64_t v40 = &v14[v38];
      uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
      int v44 = v43(v39, 1, v41);
      int v45 = v43((uint64_t)v40, 1, v41);
      if (v44)
      {
        if (!v45)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v80 + 16))(v39, v40, v81);
          uint64_t v46 = *(int *)(v41 + 20);
          uint64_t v47 = v39 + v46;
          uint64_t v48 = &v40[v46];
          int v49 = *(_DWORD *)v48;
          *(unsigned char *)(v47 + 4) = v48[4];
          *(_DWORD *)uint64_t v47 = v49;
          *(unsigned char *)(v39 + *(int *)(v41 + 24)) = v40[*(int *)(v41 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v45)
        {
          v33(v39, v40, v81);
          uint64_t v75 = *(int *)(v41 + 20);
          uint64_t v76 = v39 + v75;
          uint64_t v77 = &v40[v75];
          int v78 = *(_DWORD *)v77;
          *(unsigned char *)(v76 + 4) = v77[4];
          *(_DWORD *)uint64_t v76 = v78;
          *(unsigned char *)(v39 + *(int *)(v41 + 24)) = v40[*(int *)(v41 + 24)];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v39, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      uint64_t v31 = (void *)v39;
      uint64_t v32 = v40;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                - 8)
                    + 64);
    uint64_t v31 = (void *)v13;
    uint64_t v32 = v14;
LABEL_8:
    memcpy(v31, v32, v30);
    goto LABEL_14;
  }
  if (v18) {
    goto LABEL_7;
  }
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 16);
  v19(v13, v14, v81);
  uint64_t v20 = *(int *)(v15 + 20);
  uint64_t v21 = v13 + v20;
  uint64_t v22 = &v14[v20];
  char v23 = v22[4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = v23;
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = (char *)(v13 + v24);
  uint64_t v26 = &v14[v24];
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v25, v26, v81);
    uint64_t v50 = *(int *)(v27 + 20);
    int v51 = &v25[v50];
    uint64_t v52 = &v26[v50];
    int v53 = *(_DWORD *)v52;
    v51[4] = v52[4];
    *(_DWORD *)int v51 = v53;
    v25[*(int *)(v27 + 24)] = v26[*(int *)(v27 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v13, 0, 1, v15);
LABEL_14:
  uint64_t v54 = v82[7];
  uint64_t v55 = a1 + v54;
  int v56 = (int *)(a2 + v54);
  int v57 = *v56;
  *(unsigned char *)(v55 + 4) = *((unsigned char *)v56 + 4);
  *(_DWORD *)uint64_t v55 = v57;
  uint64_t v58 = v82[8];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = (int *)(a2 + v58);
  int v61 = *v60;
  *(unsigned char *)(v59 + 4) = *((unsigned char *)v60 + 4);
  *(_DWORD *)uint64_t v59 = v61;
  uint64_t v62 = v82[9];
  uint64_t v63 = a1 + v62;
  uint64_t v64 = (int *)(a2 + v62);
  int v65 = *v64;
  *(unsigned char *)(v63 + 4) = *((unsigned char *)v64 + 4);
  *(_DWORD *)uint64_t v63 = v65;
  uint64_t v66 = v82[10];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = (int *)(a2 + v66);
  int v69 = *v68;
  *(unsigned char *)(v67 + 4) = *((unsigned char *)v68 + 4);
  *(_DWORD *)uint64_t v67 = v69;
  uint64_t v70 = v82[11];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (int *)(a2 + v70);
  int v73 = *v72;
  *(unsigned char *)(v71 + 4) = *((unsigned char *)v72 + 4);
  *(_DWORD *)uint64_t v71 = v73;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    int v44 = v12;
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v69 + 40);
  uint64_t v70 = v6;
  v7(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v71 = a3;
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v16 = v15(v12, 1, v14);
  int v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v7;
      ((void (*)(uint64_t, char *, uint64_t))v7)(v12, v13, v70);
      uint64_t v32 = *(int *)(v14 + 20);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = &v13[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      *(unsigned char *)(v33 + 4) = v34[4];
      uint64_t v35 = *(int *)(v14 + 24);
      uint64_t v36 = v12 + v35;
      uint64_t v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      int v41 = v40(v36, 1, v38);
      int v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v36, v37, v70);
          uint64_t v43 = *(int *)(v38 + 20);
          uint64_t v44 = v36 + v43;
          int v45 = &v37[v43];
          *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
          *(unsigned char *)(v44 + 4) = v45[4];
          *(unsigned char *)(v36 + *(int *)(v38 + 24)) = v37[*(int *)(v38 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          v31(v36, v37, v70);
          uint64_t v65 = *(int *)(v38 + 20);
          uint64_t v66 = v36 + v65;
          uint64_t v67 = &v37[v65];
          *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
          *(unsigned char *)(v66 + 4) = v67[4];
          *(unsigned char *)(v36 + *(int *)(v38 + 24)) = v37[*(int *)(v38 + 24)];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v36, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      uint64_t v29 = (void *)v36;
      uint64_t v30 = v37;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    goto LABEL_14;
  }
  if (v17) {
    goto LABEL_7;
  }
  int v18 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
  v18(v12, v13, v70);
  uint64_t v19 = *(int *)(v14 + 20);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  uint64_t v22 = *(int *)(v14 + 24);
  uint64_t v23 = (char *)(v12 + v22);
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v18((uint64_t)v23, v24, v70);
    uint64_t v46 = *(int *)(v25 + 20);
    uint64_t v47 = &v23[v46];
    uint64_t v48 = &v24[v46];
    *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v23[*(int *)(v25 + 24)] = v24[*(int *)(v25 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v49 = v71[7];
  uint64_t v50 = v71[8];
  uint64_t v51 = a1 + v49;
  uint64_t v52 = a2 + v49;
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  *(unsigned char *)(v51 + 4) = *(unsigned char *)(v52 + 4);
  uint64_t v53 = a1 + v50;
  uint64_t v54 = a2 + v50;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(unsigned char *)(v53 + 4) = *(unsigned char *)(v54 + 4);
  uint64_t v55 = v71[9];
  uint64_t v56 = v71[10];
  uint64_t v57 = a1 + v55;
  uint64_t v58 = a2 + v55;
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
  *(unsigned char *)(v57 + 4) = *(unsigned char *)(v58 + 4);
  uint64_t v59 = a1 + v56;
  uint64_t v60 = a2 + v56;
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  *(unsigned char *)(v59 + 4) = *(unsigned char *)(v60 + 4);
  uint64_t v61 = v71[11];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  LODWORD(v57) = *(_DWORD *)v63;
  *(unsigned char *)(v62 + 4) = *(unsigned char *)(v63 + 4);
  *(_DWORD *)uint64_t v62 = v57;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E4AC4C);
}

uint64_t sub_246E4AC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_201Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E4AC6C);
}

uint64_t sub_246E4AC6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_202Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_ConstellationId()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v16;
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(__dst, v23, *(void *)(*(void *)(v26 - 8) + 64));
        uint64_t v27 = v59;
      }
      else
      {
        uint64_t v56 = v8;
        uint64_t v57 = v25;
        v8(__dst, v23, v7);
        uint64_t v28 = *(int *)(v24 + 20);
        uint64_t v29 = &__dst[v28];
        uint64_t v30 = &v23[v28];
        *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
        v29[4] = v30[4];
        uint64_t v58 = v24;
        uint64_t v31 = *(int *)(v24 + 24);
        uint64_t v32 = &__dst[v31];
        uint64_t v33 = &v23[v31];
        uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          v56(v32, v33, v7);
          uint64_t v37 = *(int *)(v34 + 20);
          uint64_t v38 = &v32[v37];
          uint64_t v39 = &v33[v37];
          *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
          v38[4] = v39[4];
          v32[*(int *)(v34 + 24)] = v33[*(int *)(v34 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        uint64_t v27 = v59;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v58);
      }
      uint64_t v40 = v15[7];
      int v41 = &v13[v40];
      int v42 = &v14[v40];
      *(_DWORD *)int v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      uint64_t v43 = v15[8];
      uint64_t v44 = &v13[v43];
      int v45 = &v14[v43];
      v44[4] = v45[4];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      uint64_t v46 = v15[9];
      uint64_t v47 = &v13[v46];
      uint64_t v48 = &v14[v46];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      uint64_t v49 = v15[10];
      uint64_t v50 = &v13[v49];
      uint64_t v51 = &v14[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v15[11];
      uint64_t v53 = &v13[v52];
      uint64_t v54 = &v14[v52];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      (*(void (**)(char *, void, uint64_t, int *))(v27 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v12(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      v12(v8, v4);
      uint64_t v10 = v8 + *(int *)(v9 + 24);
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
      if (!result)
      {
        return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v57 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v57;
    }
    else
    {
      uint64_t v54 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v55 = v23;
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v26 = *(int *)(v22 + 20);
      uint64_t v27 = &__dst[v26];
      uint64_t v28 = &v21[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v56 = v22;
      uint64_t v29 = *(int *)(v22 + 24);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v21[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        v54(v30, v31, v6);
        uint64_t v35 = *(int *)(v32 + 20);
        uint64_t v36 = &v30[v35];
        uint64_t v37 = &v31[v35];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        v36[4] = v37[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v25 = v57;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v56);
    }
    uint64_t v38 = v14[7];
    uint64_t v39 = &v12[v38];
    uint64_t v40 = &v13[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = v14[8];
    int v42 = &v12[v41];
    uint64_t v43 = &v13[v41];
    v42[4] = v43[4];
    *(_DWORD *)int v42 = *(_DWORD *)v43;
    uint64_t v44 = v14[9];
    int v45 = &v12[v44];
    uint64_t v46 = &v13[v44];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    uint64_t v47 = v14[10];
    uint64_t v48 = &v12[v47];
    uint64_t v49 = &v13[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v14[11];
    uint64_t v51 = &v12[v50];
    uint64_t v52 = &v13[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(char *, void, uint64_t, int *))(v25 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v145 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v32 = v15[5];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    char v35 = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v35;
    uint64_t v36 = v15[6];
    uint64_t v37 = &v13[v36];
    uint64_t v136 = v14;
    uint64_t v38 = &v14[v36];
    uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v132 = *(void *)(v39 - 8);
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
    uint64_t v140 = (uint64_t)v37;
    LODWORD(v37) = v40(v37, 1, v39);
    uint64_t v133 = v39;
    int v41 = v40(v38, 1, v39);
    if (v37)
    {
      if (!v41)
      {
        uint64_t v53 = (void (*)(uint64_t, char *, uint64_t))__dst[2];
        v53(v140, v38, v6);
        uint64_t v54 = *(int *)(v39 + 20);
        uint64_t v55 = v140 + v54;
        uint64_t v56 = &v38[v54];
        char v57 = v56[4];
        *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
        *(unsigned char *)(v55 + 4) = v57;
        uint64_t v58 = *(int *)(v39 + 24);
        __dstb = (char *)(v140 + v58);
        uint64_t v59 = &v38[v58];
        uint64_t v60 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v61 = *(void *)(v60 - 8);
        uint64_t v52 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          v53((uint64_t)__dstb, v59, v6);
          uint64_t v99 = *(int *)(v60 + 20);
          uint64_t v100 = &__dstb[v99];
          uint64_t v101 = &v59[v99];
          int v102 = *(_DWORD *)v101;
          v100[4] = v101[4];
          *(_DWORD *)uint64_t v100 = v102;
          __dstb[*(int *)(v60 + 24)] = v59[*(int *)(v60 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dstb, 0, 1, v60);
        }
        uint64_t v30 = v145;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v140, 0, 1, v133);
        goto LABEL_32;
      }
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      uint64_t v43 = (void *)v140;
      goto LABEL_15;
    }
    if (v41)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v140, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v42 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      uint64_t v43 = (void *)v140;
LABEL_15:
      memcpy(v43, v38, v42);
      uint64_t v30 = v145;
      uint64_t v52 = v136;
LABEL_32:
      uint64_t v111 = v15[7];
      uint64_t v112 = &v13[v111];
      uint64_t v113 = &v52[v111];
      int v114 = *(_DWORD *)v113;
      v112[4] = v113[4];
      *(_DWORD *)uint64_t v112 = v114;
      uint64_t v115 = v15[8];
      uint64_t v116 = &v13[v115];
      uint64_t v117 = &v52[v115];
      int v118 = *(_DWORD *)v117;
      v116[4] = v117[4];
      *(_DWORD *)uint64_t v116 = v118;
      uint64_t v119 = v15[9];
      uint64_t v120 = &v13[v119];
      uint64_t v121 = &v52[v119];
      int v122 = *(_DWORD *)v121;
      v120[4] = v121[4];
      *(_DWORD *)uint64_t v120 = v122;
      uint64_t v123 = v15[10];
      uint64_t v124 = &v13[v123];
      uint64_t v125 = &v52[v123];
      int v126 = *(_DWORD *)v125;
      v124[4] = v125[4];
      *(_DWORD *)uint64_t v124 = v126;
      uint64_t v127 = v15[11];
      uint64_t v128 = &v13[v127];
      uint64_t v129 = &v52[v127];
      int v130 = *(_DWORD *)v129;
      v128[4] = v129[4];
      *(_DWORD *)uint64_t v128 = v130;
      return v30;
    }
    v7(v140, (uint64_t)v38, v6);
    uint64_t v87 = *(int *)(v39 + 20);
    uint64_t v88 = v140 + v87;
    uint64_t v89 = &v38[v87];
    char v90 = v89[4];
    *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
    *(unsigned char *)(v88 + 4) = v90;
    uint64_t v91 = *(int *)(v39 + 24);
    uint64_t v92 = v140 + v91;
    uint64_t v93 = &v38[v91];
    uint64_t v94 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v135 = *(void *)(v94 - 8);
    uint64_t v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
    uint64_t v141 = v92;
    LODWORD(v92) = v95(v92, 1, v94);
    __srca = v93;
    int v96 = v95((uint64_t)v93, 1, v94);
    if (v92)
    {
      uint64_t v52 = v136;
      if (!v96)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v141, __srca, v6);
        uint64_t v103 = *(int *)(v94 + 20);
        uint64_t v104 = v141 + v103;
        uint64_t v105 = &__srca[v103];
        int v106 = *(_DWORD *)v105;
        *(unsigned char *)(v104 + 4) = v105[4];
        *(_DWORD *)uint64_t v104 = v106;
        *(unsigned char *)(v141 + *(int *)(v94 + 24)) = __srca[*(int *)(v94 + 24)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v135 + 56))(v141, 0, 1, v94);
        goto LABEL_31;
      }
      size_t v97 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      uint64_t v98 = (void *)v141;
    }
    else
    {
      uint64_t v52 = v136;
      if (!v96)
      {
        v7(v141, (uint64_t)__srca, v6);
        uint64_t v107 = *(int *)(v94 + 20);
        uint64_t v108 = v141 + v107;
        uint64_t v109 = &__srca[v107];
        int v110 = *(_DWORD *)v109;
        *(unsigned char *)(v108 + 4) = v109[4];
        *(_DWORD *)uint64_t v108 = v110;
        *(unsigned char *)(v141 + *(int *)(v94 + 24)) = __srca[*(int *)(v94 + 24)];
        goto LABEL_31;
      }
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v141, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      size_t v97 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      uint64_t v98 = (void *)v141;
    }
    memcpy(v98, __srca, v97);
LABEL_31:
    uint64_t v30 = v145;
    goto LABEL_32;
  }
  if (v19)
  {
LABEL_7:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64));
    return v145;
  }
  __dsta = (void (*)(char *, char *, uint64_t))__dst[2];
  __dsta(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v23;
  uint64_t v24 = v15[6];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = v145;
  }
  else
  {
    __dsta(v25, v26, v6);
    uint64_t v44 = *(int *)(v27 + 20);
    int v45 = &v25[v44];
    uint64_t v46 = &v26[v44];
    char v47 = v46[4];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v47;
    uint64_t v48 = *(int *)(v27 + 24);
    uint64_t v137 = v25;
    __src = &v25[v48];
    uint64_t v49 = &v26[v48];
    uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v134 = *(void *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v49, 1, v50))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__src, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      __dsta(__src, v49, v6);
      uint64_t v63 = *(int *)(v50 + 20);
      uint64_t v64 = &__src[v63];
      uint64_t v65 = &v49[v63];
      int v66 = *(_DWORD *)v65;
      v64[4] = v65[4];
      *(_DWORD *)uint64_t v64 = v66;
      __src[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(__src, 0, 1, v50);
    }
    uint64_t v30 = v145;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v137, 0, 1, v27);
  }
  uint64_t v67 = v15[7];
  uint64_t v68 = &v13[v67];
  uint64_t v69 = &v14[v67];
  int v70 = *(_DWORD *)v69;
  v68[4] = v69[4];
  *(_DWORD *)uint64_t v68 = v70;
  uint64_t v71 = v15[8];
  uint64_t v72 = &v13[v71];
  int v73 = &v14[v71];
  int v74 = *(_DWORD *)v73;
  v72[4] = v73[4];
  *(_DWORD *)uint64_t v72 = v74;
  uint64_t v75 = v15[9];
  uint64_t v76 = &v13[v75];
  uint64_t v77 = &v14[v75];
  int v78 = *(_DWORD *)v77;
  v76[4] = v77[4];
  *(_DWORD *)uint64_t v76 = v78;
  uint64_t v79 = v15[10];
  uint64_t v80 = &v13[v79];
  uint64_t v81 = &v14[v79];
  int v82 = *(_DWORD *)v81;
  v80[4] = v81[4];
  *(_DWORD *)uint64_t v80 = v82;
  uint64_t v83 = v15[11];
  uint64_t v84 = &v13[v83];
  uint64_t v85 = &v14[v83];
  int v86 = *(_DWORD *)v85;
  v84[4] = v85[4];
  *(_DWORD *)uint64_t v84 = v86;
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return v30;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v57 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v57;
    }
    else
    {
      uint64_t v54 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v55 = v23;
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v26 = *(int *)(v22 + 20);
      uint64_t v27 = &__dst[v26];
      uint64_t v28 = &v21[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v56 = v22;
      uint64_t v29 = *(int *)(v22 + 24);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v21[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        v54(v30, v31, v6);
        uint64_t v35 = *(int *)(v32 + 20);
        uint64_t v36 = &v30[v35];
        uint64_t v37 = &v31[v35];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        v36[4] = v37[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v25 = v57;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v56);
    }
    uint64_t v38 = v14[7];
    uint64_t v39 = &v12[v38];
    uint64_t v40 = &v13[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = v14[8];
    size_t v42 = &v12[v41];
    uint64_t v43 = &v13[v41];
    v42[4] = v43[4];
    *(_DWORD *)size_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v14[9];
    int v45 = &v12[v44];
    uint64_t v46 = &v13[v44];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    uint64_t v47 = v14[10];
    uint64_t v48 = &v12[v47];
    uint64_t v49 = &v13[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v14[11];
    uint64_t v51 = &v12[v50];
    uint64_t v52 = &v13[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(char *, void, uint64_t, int *))(v25 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[5];
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v125 = a1;
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v30 = v14[5];
    uint64_t v31 = &v12[v30];
    uint64_t v32 = &v13[v30];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    uint64_t v33 = v14[6];
    uint64_t v34 = &v12[v33];
    uint64_t v116 = v13;
    uint64_t v35 = &v13[v33];
    uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v112 = *(void *)(v36 - 8);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    uint64_t v120 = (uint64_t)v34;
    LODWORD(v34) = v37(v34, 1, v36);
    uint64_t v113 = v36;
    int v38 = v37(v35, 1, v36);
    if (v34)
    {
      if (!v38)
      {
        uint64_t v49 = (void (*)(uint64_t, char *, uint64_t))__dst[4];
        v49(v120, v35, v6);
        uint64_t v50 = *(int *)(v36 + 20);
        uint64_t v51 = v120 + v50;
        uint64_t v52 = &v35[v50];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        *(unsigned char *)(v51 + 4) = v52[4];
        uint64_t v53 = *(int *)(v36 + 24);
        __dstb = (char *)(v120 + v53);
        uint64_t v54 = &v35[v53];
        uint64_t v55 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v56 = *(void *)(v55 - 8);
        uint64_t v48 = v116;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v54, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          v49((uint64_t)__dstb, v54, v6);
          uint64_t v87 = *(int *)(v55 + 20);
          uint64_t v88 = &__dstb[v87];
          uint64_t v89 = &v54[v87];
          *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
          v88[4] = v89[4];
          __dstb[*(int *)(v55 + 24)] = v54[*(int *)(v55 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(__dstb, 0, 1, v55);
        }
        uint64_t v28 = v125;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v120, 0, 1, v113);
        goto LABEL_32;
      }
      size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      uint64_t v40 = (void *)v120;
      goto LABEL_15;
    }
    if (v38)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v120, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      uint64_t v40 = (void *)v120;
LABEL_15:
      memcpy(v40, v35, v39);
      uint64_t v28 = v125;
      uint64_t v48 = v116;
LABEL_32:
      uint64_t v96 = v14[7];
      size_t v97 = &v12[v96];
      uint64_t v98 = &v48[v96];
      *(_DWORD *)size_t v97 = *(_DWORD *)v98;
      v97[4] = v98[4];
      uint64_t v99 = v14[8];
      uint64_t v100 = &v12[v99];
      uint64_t v101 = &v48[v99];
      v100[4] = v101[4];
      *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
      uint64_t v102 = v14[9];
      uint64_t v103 = &v12[v102];
      uint64_t v104 = &v48[v102];
      *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
      v103[4] = v104[4];
      uint64_t v105 = v14[10];
      int v106 = &v12[v105];
      uint64_t v107 = &v48[v105];
      *(_DWORD *)int v106 = *(_DWORD *)v107;
      v106[4] = v107[4];
      uint64_t v108 = v14[11];
      uint64_t v109 = &v12[v108];
      int v110 = &v48[v108];
      *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
      v109[4] = v110[4];
      return v28;
    }
    v7(v120, (uint64_t)v35, v6);
    uint64_t v76 = *(int *)(v36 + 20);
    uint64_t v77 = v120 + v76;
    int v78 = &v35[v76];
    *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
    *(unsigned char *)(v77 + 4) = v78[4];
    uint64_t v79 = *(int *)(v36 + 24);
    uint64_t v80 = v120 + v79;
    uint64_t v81 = &v35[v79];
    uint64_t v82 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v115 = *(void *)(v82 - 8);
    uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
    uint64_t v121 = v80;
    LODWORD(v80) = v83(v80, 1, v82);
    __srca = v81;
    int v84 = v83((uint64_t)v81, 1, v82);
    if (v80)
    {
      uint64_t v48 = v116;
      if (!v84)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v121, __srca, v6);
        uint64_t v90 = *(int *)(v82 + 20);
        uint64_t v91 = v121 + v90;
        uint64_t v92 = &__srca[v90];
        *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
        *(unsigned char *)(v91 + 4) = v92[4];
        *(unsigned char *)(v121 + *(int *)(v82 + 24)) = __srca[*(int *)(v82 + 24)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v121, 0, 1, v82);
        goto LABEL_31;
      }
      size_t v85 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      int v86 = (void *)v121;
    }
    else
    {
      uint64_t v48 = v116;
      if (!v84)
      {
        v7(v121, (uint64_t)__srca, v6);
        uint64_t v93 = *(int *)(v82 + 20);
        uint64_t v94 = v121 + v93;
        uint64_t v95 = &__srca[v93];
        *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
        *(unsigned char *)(v94 + 4) = v95[4];
        *(unsigned char *)(v121 + *(int *)(v82 + 24)) = __srca[*(int *)(v82 + 24)];
        goto LABEL_31;
      }
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v121, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      size_t v85 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      int v86 = (void *)v121;
    }
    memcpy(v86, __srca, v85);
LABEL_31:
    uint64_t v28 = v125;
    goto LABEL_32;
  }
  if (v18)
  {
LABEL_7:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v12, v13, *(void *)(*(void *)(v29 - 8) + 64));
    return v125;
  }
  __dsta = (void (*)(char *, char *, uint64_t))__dst[4];
  __dsta(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = v14[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v28 = v125;
  }
  else
  {
    __dsta(v23, v24, v6);
    uint64_t v41 = *(int *)(v25 + 20);
    size_t v42 = &v23[v41];
    uint64_t v43 = &v24[v41];
    *(_DWORD *)size_t v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    uint64_t v44 = *(int *)(v25 + 24);
    uint64_t v117 = v23;
    __src = &v23[v44];
    int v45 = &v24[v44];
    uint64_t v46 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v114 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v45, 1, v46))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__src, v45, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      __dsta(__src, v45, v6);
      uint64_t v58 = *(int *)(v46 + 20);
      uint64_t v59 = &__src[v58];
      uint64_t v60 = &v45[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      __src[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(__src, 0, 1, v46);
    }
    uint64_t v28 = v125;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v117, 0, 1, v25);
  }
  uint64_t v61 = v14[7];
  uint64_t v62 = &v12[v61];
  uint64_t v63 = &v13[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  uint64_t v64 = v14[8];
  uint64_t v65 = &v12[v64];
  int v66 = &v13[v64];
  v65[4] = v66[4];
  *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
  uint64_t v67 = v14[9];
  uint64_t v68 = &v12[v67];
  uint64_t v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  uint64_t v70 = v14[10];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  v71[4] = v72[4];
  uint64_t v73 = v14[11];
  int v74 = &v12[v73];
  uint64_t v75 = &v13[v73];
  *(_DWORD *)int v74 = *(_DWORD *)v75;
  v74[4] = v75[4];
  (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return v28;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E4D05C);
}

uint64_t sub_246E4D05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_201Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E4D07C);
}

uint64_t sub_246E4D07C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_202Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_0);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_1);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsL2CSyncState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_2);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_3);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_3);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_4);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsL1SyncState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_5);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_5);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GalileoE5SyncState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v11 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[14];
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_6);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_6);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SbasL1SyncState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E4E1C8);
}

uint64_t __swift_get_extra_inhabitant_index_210Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E4E2BC);
}

uint64_t __swift_store_extra_inhabitant_index_211Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_240Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_241Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvTime()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_240Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_241Tm_0);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E4E85C);
}

uint64_t __swift_get_extra_inhabitant_index_240Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E4E950);
}

uint64_t __swift_store_extra_inhabitant_index_241Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PhaseTracking(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    int v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(void *)int v18 = *(void *)v19;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_249Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_250Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PhaseTracking()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v22 = a3[6];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
    uint64_t v26 = *((void *)v25 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v23, (uint64_t *)v24, v7);
      uint64_t v28 = v25[5];
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v25[6];
      uint64_t v32 = &v23[v31];
      uint64_t v33 = &v24[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      v23[v25[7]] = v24[v25[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v34 = a3[7];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v10(v5, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    uint64_t v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v58(a1, a2, v6);
  uint64_t v60 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      uint64_t v18 = *(void *)v17;
      v16[8] = v17[8];
      *(void *)uint64_t v16 = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      LOBYTE(v18) = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v18;
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v58((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v44 = v10[5];
  int v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  uint64_t v47 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)int v45 = v47;
  uint64_t v48 = v10[6];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = &v9[v48];
  LOBYTE(v47) = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v47;
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v23 = *(int *)(v60 + 24);
  uint64_t v24 = (unsigned char *)(a1 + v23);
  uint64_t v25 = (unsigned char *)(a2 + v23);
  uint64_t v26 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v27 = *((void *)v26 - 1);
  uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v58((uint64_t)v24, (uint64_t)v25, v6);
      uint64_t v51 = v26[5];
      uint64_t v52 = &v24[v51];
      uint64_t v53 = &v25[v51];
      uint64_t v54 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = v54;
      uint64_t v55 = v26[6];
      uint64_t v56 = &v24[v55];
      uint64_t v57 = &v25[v55];
      LOBYTE(v54) = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v54;
      v24[v26[7]] = v25[v26[7]];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v24, v25, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 16))(v24, v25, v6);
  uint64_t v31 = v26[5];
  uint64_t v32 = &v24[v31];
  uint64_t v33 = &v25[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = v26[6];
  uint64_t v36 = &v24[v35];
  uint64_t v37 = &v25[v35];
  LOBYTE(v34) = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v34;
  v24[v26[7]] = v25[v26[7]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  uint64_t v39 = *(int *)(v60 + 28);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (int *)(a2 + v39);
  int v42 = *v41;
  *(unsigned char *)(v40 + 4) = *((unsigned char *)v41 + 4);
  *(_DWORD *)uint64_t v40 = v42;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    int v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  uint64_t v55 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v54 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  int v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  int v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)int v45 = *(void *)v46;
  v45[8] = v46[8];
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v22 = *(int *)(v55 + 24);
  uint64_t v23 = (unsigned char *)(a1 + v22);
  uint64_t v24 = (unsigned char *)(a2 + v22);
  uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v26 = *((void *)v25 - 1);
  uint64_t v27 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v53((uint64_t)v23, (uint64_t)v24, v6);
      uint64_t v47 = v25[5];
      uint64_t v48 = &v23[v47];
      uint64_t v49 = &v24[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v25[6];
      uint64_t v51 = &v23[v50];
      uint64_t v52 = &v24[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      v23[v25[7]] = v24[v25[7]];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v54 + 32))(v23, v24, v6);
  uint64_t v30 = v25[5];
  uint64_t v31 = &v23[v30];
  uint64_t v32 = &v24[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = v25[6];
  uint64_t v34 = &v23[v33];
  uint64_t v35 = &v24[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  v23[v25[7]] = v24[v25[7]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
LABEL_13:
  uint64_t v37 = *(int *)(v55 + 28);
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E502A4);
}

uint64_t sub_246E502A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5040C);
}

uint64_t sub_246E5040C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvTime(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E50A88);
}

uint64_t sub_246E50A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u) {
      int v10 = 6;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E50B64);
}

uint64_t sub_246E50B64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FullSvTime()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(_DWORD *)int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_0);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_1);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverClockModel(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    char v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 4);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E515C8);
}

uint64_t __swift_get_extra_inhabitant_index_249Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E516BC);
}

uint64_t __swift_store_extra_inhabitant_index_250Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *(void *)v22;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = v23;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v26;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_0);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    LODWORD(v16) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = v16;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_1);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Clock(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      uint64_t v25 = v15[7];
      char v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(_DWORD *)char v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      uint64_t v28 = v15[8];
      int v29 = &v13[v28];
      uint64_t v30 = &v14[v28];
      *(_DWORD *)int v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v13[v15[9]] = v14[v15[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v31 = a3[7];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    uint64_t v35 = *((void *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v32, (uint64_t *)v33, v7);
      uint64_t v37 = v34[5];
      uint64_t v38 = &v32[v37];
      uint64_t v39 = &v33[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v34[6];
      uint64_t v41 = &v32[v40];
      int v42 = &v33[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v34[7];
      uint64_t v44 = &v32[v43];
      int v45 = &v33[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v34[8];
      uint64_t v47 = &v32[v46];
      uint64_t v48 = &v33[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = v34[9];
      uint64_t v50 = &v32[v49];
      uint64_t v51 = &v33[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v52 = a3[8];
    uint64_t v53 = (char *)a1 + v52;
    uint64_t v54 = (char *)a2 + v52;
    uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    uint64_t v56 = *((void *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v53, (uint64_t *)v54, v7);
      uint64_t v58 = v55[5];
      uint64_t v59 = &v53[v58];
      uint64_t v60 = &v54[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      v59[8] = v60[8];
      uint64_t v61 = v55[6];
      uint64_t v62 = &v53[v61];
      uint64_t v63 = &v54[v61];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      uint64_t v64 = v55[7];
      uint64_t v65 = &v53[v64];
      int v66 = &v54[v64];
      *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      uint64_t v67 = v55[8];
      uint64_t v68 = &v53[v67];
      uint64_t v69 = &v54[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v55[9];
      uint64_t v71 = &v53[v70];
      uint64_t v72 = &v54[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v12(v5, v4);
  }
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
    v12(v7, v4);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    int v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)int v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    uint64_t v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    uint64_t v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    int v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)int v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    uint64_t v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v146 = *(void *)(v6 - 8);
  uint64_t v147 = v6;
  uint64_t v145 = *(void (**)(uint64_t, uint64_t))(v146 + 24);
  v145(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 16))(v12, v13, v147);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      int v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      uint64_t v25 = &v13[v23];
      LOBYTE(v22) = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v22;
      uint64_t v26 = v14[7];
      uint64_t v27 = &v12[v26];
      uint64_t v28 = &v13[v26];
      LOBYTE(v22) = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v22;
      uint64_t v29 = v14[8];
      uint64_t v30 = &v12[v29];
      uint64_t v31 = &v13[v29];
      LOBYTE(v22) = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v22;
      v12[v14[9]] = v13[v14[9]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v145)(v12, v13, v147);
  uint64_t v92 = v14[5];
  uint64_t v93 = &v12[v92];
  uint64_t v94 = &v13[v92];
  int v95 = *(_DWORD *)v94;
  v93[4] = v94[4];
  *(_DWORD *)uint64_t v93 = v95;
  uint64_t v96 = v14[6];
  size_t v97 = &v12[v96];
  uint64_t v98 = &v13[v96];
  LOBYTE(v95) = v98[4];
  *(_DWORD *)size_t v97 = *(_DWORD *)v98;
  v97[4] = v95;
  uint64_t v99 = v14[7];
  uint64_t v100 = &v12[v99];
  uint64_t v101 = &v13[v99];
  LOBYTE(v95) = v101[4];
  *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
  v100[4] = v95;
  uint64_t v102 = v14[8];
  uint64_t v103 = &v12[v102];
  uint64_t v104 = &v13[v102];
  LOBYTE(v95) = v104[4];
  *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
  v103[4] = v95;
  v12[v14[9]] = v13[v14[9]];
LABEL_7:
  uint64_t v33 = a3[7];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v34, v35, v147);
      uint64_t v41 = v36[5];
      int v42 = &v34[v41];
      uint64_t v43 = &v35[v41];
      char v44 = v43[8];
      *(void *)int v42 = *(void *)v43;
      v42[8] = v44;
      uint64_t v45 = v36[6];
      uint64_t v46 = &v34[v45];
      uint64_t v47 = &v35[v45];
      char v48 = v47[8];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v48;
      uint64_t v49 = v36[7];
      uint64_t v50 = &v34[v49];
      uint64_t v51 = &v35[v49];
      char v52 = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v52;
      uint64_t v53 = v36[8];
      uint64_t v54 = &v34[v53];
      uint64_t v55 = &v35[v53];
      char v56 = v55[8];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v56;
      uint64_t v57 = v36[9];
      uint64_t v58 = &v34[v57];
      uint64_t v59 = &v35[v57];
      char v60 = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v60;
      (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v34, v35, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v145)(v34, v35, v147);
  uint64_t v105 = v36[5];
  int v106 = &v34[v105];
  uint64_t v107 = &v35[v105];
  char v108 = v107[8];
  *(void *)int v106 = *(void *)v107;
  v106[8] = v108;
  uint64_t v109 = v36[6];
  int v110 = &v34[v109];
  uint64_t v111 = &v35[v109];
  char v112 = v111[8];
  *(void *)int v110 = *(void *)v111;
  v110[8] = v112;
  uint64_t v113 = v36[7];
  uint64_t v114 = &v34[v113];
  uint64_t v115 = &v35[v113];
  char v116 = v115[8];
  *(void *)uint64_t v114 = *(void *)v115;
  v114[8] = v116;
  uint64_t v117 = v36[8];
  int v118 = &v34[v117];
  uint64_t v119 = &v35[v117];
  char v120 = v119[8];
  *(void *)int v118 = *(void *)v119;
  v118[8] = v120;
  uint64_t v121 = v36[9];
  int v122 = &v34[v121];
  uint64_t v123 = &v35[v121];
  char v124 = v123[8];
  *(void *)int v122 = *(void *)v123;
  v122[8] = v124;
LABEL_13:
  uint64_t v62 = a3[8];
  uint64_t v63 = (char *)(a1 + v62);
  uint64_t v64 = (char *)(a2 + v62);
  uint64_t v65 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v66 = *((void *)v65 - 1);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, int *))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      ((void (*)(char *, char *, uint64_t))v145)(v63, v64, v147);
      uint64_t v125 = v65[5];
      int v126 = &v63[v125];
      uint64_t v127 = &v64[v125];
      char v128 = v127[8];
      *(void *)int v126 = *(void *)v127;
      v126[8] = v128;
      uint64_t v129 = v65[6];
      int v130 = &v63[v129];
      uint64_t v131 = &v64[v129];
      char v132 = v131[4];
      *(_DWORD *)int v130 = *(_DWORD *)v131;
      v130[4] = v132;
      uint64_t v133 = v65[7];
      uint64_t v134 = &v63[v133];
      uint64_t v135 = &v64[v133];
      char v136 = v135[4];
      *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
      v134[4] = v136;
      uint64_t v137 = v65[8];
      uint64_t v138 = &v63[v137];
      uint64_t v139 = &v64[v137];
      char v140 = v139[8];
      *(void *)uint64_t v138 = *(void *)v139;
      v138[8] = v140;
      uint64_t v141 = v65[9];
      uint64_t v142 = &v63[v141];
      int v143 = &v64[v141];
      char v144 = v143[4];
      *(_DWORD *)uint64_t v142 = *(_DWORD *)v143;
      v142[4] = v144;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v63, v64, *(void *)(*(void *)(v90 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v63, v64, v147);
  uint64_t v70 = v65[5];
  uint64_t v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  char v73 = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v65[6];
  uint64_t v75 = &v63[v74];
  uint64_t v76 = &v64[v74];
  char v77 = v76[4];
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v77;
  uint64_t v78 = v65[7];
  uint64_t v79 = &v63[v78];
  uint64_t v80 = &v64[v78];
  char v81 = v80[4];
  *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
  v79[4] = v81;
  uint64_t v82 = v65[8];
  uint64_t v83 = &v63[v82];
  int v84 = &v64[v82];
  char v85 = v84[8];
  *(void *)uint64_t v83 = *(void *)v84;
  v83[8] = v85;
  uint64_t v86 = v65[9];
  uint64_t v87 = &v63[v86];
  uint64_t v88 = &v64[v86];
  char v89 = v88[4];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v89;
  (*(void (**)(char *, void, uint64_t, int *))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    int v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    int v39 = &v30[v38];
    int v40 = &v31[v38];
    *(void *)int v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    uint64_t v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    char v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)char v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  char v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    char v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)char v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    uint64_t v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    int v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v123 = *(void *)(v6 - 8);
  uint64_t v124 = v6;
  int v122 = *(void (**)(uint64_t, uint64_t))(v123 + 40);
  v122(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (unsigned char *)(a1 + v8);
  uint64_t v12 = (unsigned char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v123 + 32))(v11, v12, v124);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      uint64_t v21 = v13[6];
      int v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(_DWORD *)int v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      uint64_t v24 = v13[7];
      uint64_t v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v13[8];
      uint64_t v28 = &v11[v27];
      uint64_t v29 = &v12[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v11[v13[9]] = v12[v13[9]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v122)(v11, v12, v124);
  uint64_t v80 = v13[5];
  char v81 = &v11[v80];
  uint64_t v82 = &v12[v80];
  *(_DWORD *)char v81 = *(_DWORD *)v82;
  v81[4] = v82[4];
  uint64_t v83 = v13[6];
  int v84 = &v11[v83];
  char v85 = &v12[v83];
  *(_DWORD *)int v84 = *(_DWORD *)v85;
  v84[4] = v85[4];
  uint64_t v86 = v13[7];
  uint64_t v87 = &v11[v86];
  uint64_t v88 = &v12[v86];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v88[4];
  uint64_t v89 = v13[8];
  uint64_t v90 = &v11[v89];
  uint64_t v91 = &v12[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v11[v13[9]] = v12[v13[9]];
LABEL_7:
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v32, v33, v124);
      uint64_t v39 = v34[5];
      int v40 = &v32[v39];
      uint64_t v41 = &v33[v39];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v34[6];
      uint64_t v43 = &v32[v42];
      uint64_t v44 = &v33[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v34[7];
      uint64_t v46 = &v32[v45];
      uint64_t v47 = &v33[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v34[8];
      uint64_t v49 = &v32[v48];
      uint64_t v50 = &v33[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v34[9];
      char v52 = &v32[v51];
      uint64_t v53 = &v33[v51];
      *(void *)char v52 = *(void *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v32, v33, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v122)(v32, v33, v124);
  uint64_t v92 = v34[5];
  uint64_t v93 = &v32[v92];
  uint64_t v94 = &v33[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  v93[8] = v94[8];
  uint64_t v95 = v34[6];
  uint64_t v96 = &v32[v95];
  size_t v97 = &v33[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  v96[8] = v97[8];
  uint64_t v98 = v34[7];
  uint64_t v99 = &v32[v98];
  uint64_t v100 = &v33[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  v99[8] = v100[8];
  uint64_t v101 = v34[8];
  uint64_t v102 = &v32[v101];
  uint64_t v103 = &v33[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  v102[8] = v103[8];
  uint64_t v104 = v34[9];
  uint64_t v105 = &v32[v104];
  int v106 = &v33[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
LABEL_13:
  uint64_t v55 = a3[8];
  uint64_t v56 = (char *)(a1 + v55);
  uint64_t v57 = (char *)(a2 + v55);
  uint64_t v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v59 = *((void *)v58 - 1);
  char v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      ((void (*)(char *, char *, uint64_t))v122)(v56, v57, v124);
      uint64_t v107 = v58[5];
      char v108 = &v56[v107];
      uint64_t v109 = &v57[v107];
      *(void *)char v108 = *(void *)v109;
      v108[8] = v109[8];
      uint64_t v110 = v58[6];
      uint64_t v111 = &v56[v110];
      char v112 = &v57[v110];
      *(_DWORD *)uint64_t v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      uint64_t v113 = v58[7];
      uint64_t v114 = &v56[v113];
      uint64_t v115 = &v57[v113];
      *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      uint64_t v116 = v58[8];
      uint64_t v117 = &v56[v116];
      int v118 = &v57[v116];
      *(void *)uint64_t v117 = *(void *)v118;
      v117[8] = v118[8];
      uint64_t v119 = v58[9];
      char v120 = &v56[v119];
      uint64_t v121 = &v57[v119];
      *(_DWORD *)char v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v56, v57, *(void *)(*(void *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v56, v57, v124);
  uint64_t v63 = v58[5];
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v66 = v58[6];
  uint64_t v67 = &v56[v66];
  uint64_t v68 = &v57[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  uint64_t v69 = v58[7];
  uint64_t v70 = &v56[v69];
  uint64_t v71 = &v57[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  uint64_t v72 = v58[8];
  char v73 = &v56[v72];
  uint64_t v74 = &v57[v72];
  *(void *)char v73 = *(void *)v74;
  v73[8] = v74[8];
  uint64_t v75 = v58[9];
  uint64_t v76 = &v56[v75];
  char v77 = &v57[v75];
  *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
  v76[4] = v77[4];
  (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E54280);
}

uint64_t sub_246E54280(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E54438);
}

uint64_t sub_246E54438(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];
  return v19(v21, a2, a2, v20);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Clock()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_2);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_2);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvBandCorrections(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[8] = v14[8];
    *(void *)uint64_t v13 = *(void *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E54C94);
}

uint64_t sub_246E54C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E54D70);
}

uint64_t sub_246E54D70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 3;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    unsigned int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)unsigned int v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      uint64_t v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_GlonassId(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v10(a1, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = a3(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v6);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v47 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v34 = v15[5];
      uint64_t v35 = &v13[v34];
      uint64_t v36 = &v14[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v15[6];
      uint64_t v39 = &v13[v38];
      int v40 = &v14[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v15[7];
      uint64_t v43 = &v13[v42];
      uint64_t v44 = &v14[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      return v47;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v13, v14, *(void *)(*(void *)(v32 - 8) + 64));
    return v47;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v15[6];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = v15[7];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return v47;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v40 = a1;
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      uint64_t v30 = v14[5];
      char v31 = &v12[v30];
      uint64_t v32 = &v13[v30];
      *(void *)char v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v14[6];
      uint64_t v34 = &v12[v33];
      uint64_t v35 = &v13[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v14[7];
      char v37 = &v12[v36];
      uint64_t v38 = &v13[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      return v40;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v12, v13, *(void *)(*(void *)(v28 - 8) + 64));
    return v40;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v14[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = v14[7];
  uint64_t v26 = &v12[v25];
  char v27 = &v13[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return v40;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E55B2C);
}

uint64_t sub_246E55B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_201Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t __swift_get_extra_inhabitant_index_201Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v10(a1, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E55C48);
}

uint64_t sub_246E55C48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_202Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t __swift_store_extra_inhabitant_index_202Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v12(a1, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 24);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    uint64_t v20 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v20, v10, v11);
    uint64_t v13 = a3[8];
    uint64_t v14 = a3[9];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    int v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_PolynomialOrbit(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  int v18 = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v18, v8, v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_PolynomialOrbit(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[8];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v17;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_PolynomialOrbit(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E56388);
}

uint64_t sub_246E56388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5644C);
}

void *sub_246E5644C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_3);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_3);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverBandCorrections(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    v15[4] = v16[4];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E56A24);
}

uint64_t sub_246E56A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0xDu) {
      int v10 = 13;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 13;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0xDu) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E56B00);
}

uint64_t sub_246E56B00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 13;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_3);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_3);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_LeapSecondInfo(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    char v13 = a2[v10];
    v11[4] = v12[4];
    a1[v10] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      v8(v15, v16, v7);
      uint64_t v21 = *(int *)(v17 + 20);
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = *(int *)(v17 + 24);
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    uint64_t v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (int *)(a2 + v8);
  int v11 = *v10;
  *(unsigned char *)(v9 + 4) = *((unsigned char *)v10 + 4);
  *(_DWORD *)uint64_t v9 = v11;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = a3[7];
  uint64_t v39 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v30 = *(int *)(v15 + 20);
      char v31 = &v13[v30];
      uint64_t v32 = &v14[v30];
      char v33 = v32[8];
      *(void *)char v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = *(int *)(v15 + 24);
      uint64_t v35 = &v13[v34];
      uint64_t v36 = &v14[v34];
      char v37 = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      v35[4] = v37;
      return v39;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v13, v14, *(void *)(*(void *)(v28 - 8) + 64));
    return v39;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v13, v14, v6);
  uint64_t v20 = *(int *)(v15 + 20);
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  char v27 = v26[4];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v27;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v39;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    char v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(_DWORD *)char v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v36 = a1;
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v29 = *(int *)(v16 + 20);
      uint64_t v30 = &v14[v29];
      char v31 = &v15[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = *(int *)(v16 + 24);
      char v33 = &v14[v32];
      uint64_t v34 = &v15[v32];
      *(_DWORD *)char v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      return v36;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(void *)(*(void *)(v27 - 8) + 64));
    return v36;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v14, v15, v6);
  uint64_t v21 = *(int *)(v16 + 20);
  uint64_t v22 = &v14[v21];
  char v23 = &v15[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = *(int *)(v16 + 24);
  uint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return v36;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E57B28);
}

uint64_t sub_246E57B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 28);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E57C70);
}

uint64_t sub_246E57C70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 250)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    int v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_4);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      char v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v51 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v23, 1, v24))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        uint64_t v30 = &__dst[v29];
        char v31 = &v23[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v51 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v32 = a3[7];
    char v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    uint64_t v36 = *((void *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      uint64_t v38 = v35[5];
      uint64_t v39 = &v33[v38];
      uint64_t v40 = &v34[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      uint64_t v41 = v35[6];
      uint64_t v42 = &v33[v41];
      uint64_t v43 = &v34[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      uint64_t v44 = v35[7];
      char v45 = &v33[v44];
      uint64_t v46 = &v34[v44];
      *(void *)char v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v35[8];
      uint64_t v48 = &v33[v47];
      uint64_t v49 = &v34[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
      v12(v7, v4);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      uint64_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v30 = a3[7];
  char v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  char v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    uint64_t v40 = &v31[v39];
    uint64_t v41 = &v32[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    uint64_t v46 = &v31[v45];
    uint64_t v47 = &v32[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v113 = *(void *)(v6 - 8);
  uint64_t v114 = v6;
  char v112 = *(void (**)(uint64_t, uint64_t))(v113 + 24);
  v112(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v110 = *(void (**)(uint64_t, char *, uint64_t))(v113 + 16);
      v110(v12, v13, v114);
      uint64_t v19 = v14[5];
      uint64_t v20 = v12 + v19;
      uint64_t v21 = &v13[v19];
      int v22 = *(_DWORD *)v21;
      *(unsigned char *)(v20 + 4) = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v23 = v14[7];
      __dst = (char *)(v12 + v23);
      uint64_t v24 = &v13[v23];
      uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        v110((uint64_t)__dst, v24, v114);
        uint64_t v52 = *(int *)(v25 + 20);
        uint64_t v53 = &__dst[v52];
        uint64_t v54 = &v24[v52];
        char v55 = v54[8];
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v55;
        uint64_t v56 = *(int *)(v25 + 24);
        uint64_t v57 = &__dst[v56];
        uint64_t v58 = &v24[v56];
        char v59 = v58[4];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v59;
        (*(void (**)(void))(v26 + 56))();
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
LABEL_14:
    uint64_t v43 = v114;
    goto LABEL_15;
  }
  ((void (*)(uint64_t, char *, uint64_t))v112)(v12, v13, v114);
  uint64_t v31 = v14[5];
  uint64_t v32 = v12 + v31;
  char v33 = &v13[v31];
  int v34 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = v33[4];
  *(_DWORD *)uint64_t v32 = v34;
  *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v35 = v14[7];
  uint64_t v36 = v12 + v35;
  uint64_t v37 = &v13[v35];
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40((uint64_t)v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      uint64_t v43 = v114;
      (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v36, v37, v114);
      uint64_t v44 = *(int *)(v38 + 20);
      uint64_t v45 = v36 + v44;
      uint64_t v46 = &v37[v44];
      char v47 = v46[8];
      *(void *)uint64_t v45 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = v47;
      uint64_t v48 = *(int *)(v38 + 24);
      uint64_t v49 = v36 + v48;
      uint64_t v50 = &v37[v48];
      char v51 = v50[4];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      *(unsigned char *)(v49 + 4) = v51;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v42)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
LABEL_25:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v36;
    uint64_t v30 = v37;
    goto LABEL_8;
  }
  uint64_t v43 = v114;
  ((void (*)(uint64_t, char *, uint64_t))v112)(v36, v37, v114);
  uint64_t v102 = *(int *)(v38 + 20);
  uint64_t v103 = v36 + v102;
  uint64_t v104 = &v37[v102];
  char v105 = v104[8];
  *(void *)uint64_t v103 = *(void *)v104;
  *(unsigned char *)(v103 + 8) = v105;
  uint64_t v106 = *(int *)(v38 + 24);
  uint64_t v107 = v36 + v106;
  char v108 = &v37[v106];
  char v109 = v108[4];
  *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
  *(unsigned char *)(v107 + 4) = v109;
LABEL_15:
  uint64_t v60 = a3[7];
  int v61 = (char *)(a1 + v60);
  int v62 = (char *)(a2 + v60);
  uint64_t v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v64 = *((void *)v63 - 1);
  uint64_t v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (!v67)
    {
      ((void (*)(char *, char *, uint64_t))v112)(v61, v62, v43);
      uint64_t v86 = v63[5];
      uint64_t v87 = &v61[v86];
      uint64_t v88 = &v62[v86];
      char v89 = v88[8];
      *(void *)uint64_t v87 = *(void *)v88;
      v87[8] = v89;
      uint64_t v90 = v63[6];
      uint64_t v91 = &v61[v90];
      uint64_t v92 = &v62[v90];
      char v93 = v92[8];
      *(void *)uint64_t v91 = *(void *)v92;
      v91[8] = v93;
      uint64_t v94 = v63[7];
      uint64_t v95 = &v61[v94];
      uint64_t v96 = &v62[v94];
      char v97 = v96[8];
      *(void *)uint64_t v95 = *(void *)v96;
      v95[8] = v97;
      uint64_t v98 = v63[8];
      uint64_t v99 = &v61[v98];
      uint64_t v100 = &v62[v98];
      char v101 = v100[8];
      *(void *)uint64_t v99 = *(void *)v100;
      v99[8] = v101;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v61, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_20;
  }
  if (v67)
  {
LABEL_20:
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v61, v62, *(void *)(*(void *)(v84 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v61, v62, v43);
  uint64_t v68 = v63[5];
  uint64_t v69 = &v61[v68];
  uint64_t v70 = &v62[v68];
  char v71 = v70[8];
  *(void *)uint64_t v69 = *(void *)v70;
  v69[8] = v71;
  uint64_t v72 = v63[6];
  char v73 = &v61[v72];
  uint64_t v74 = &v62[v72];
  char v75 = v74[8];
  *(void *)char v73 = *(void *)v74;
  v73[8] = v75;
  uint64_t v76 = v63[7];
  char v77 = &v61[v76];
  uint64_t v78 = &v62[v76];
  char v79 = v78[8];
  *(void *)char v77 = *(void *)v78;
  v77[8] = v79;
  uint64_t v80 = v63[8];
  char v81 = &v61[v80];
  uint64_t v82 = &v62[v80];
  char v83 = v82[8];
  *(void *)char v81 = *(void *)v82;
  v81[8] = v83;
  (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      size_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)size_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  char v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    uint64_t v40 = &v31[v39];
    int v41 = &v32[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    uint64_t v46 = &v31[v45];
    char v47 = &v32[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = v6;
  uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v96 + 40);
  v95(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      char v93 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
      v93(v11, v12, v97);
      uint64_t v18 = v13[5];
      uint64_t v19 = v11 + v18;
      uint64_t v20 = &v12[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      *(unsigned char *)(v19 + 4) = v20[4];
      *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v21 = v13[7];
      __dst = (char *)(v11 + v21);
      uint64_t v22 = &v12[v21];
      uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v93((uint64_t)__dst, v22, v97);
        uint64_t v47 = *(int *)(v23 + 20);
        uint64_t v48 = &__dst[v47];
        uint64_t v49 = &v22[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        uint64_t v50 = *(int *)(v23 + 24);
        char v51 = &__dst[v50];
        uint64_t v52 = &v22[v50];
        *(_DWORD *)char v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        (*(void (**)(void))(v24 + 56))();
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    uint64_t v27 = (void *)v11;
    size_t v28 = v12;
LABEL_8:
    memcpy(v27, v28, v26);
LABEL_14:
    uint64_t v40 = v97;
    goto LABEL_15;
  }
  ((void (*)(uint64_t, char *, uint64_t))v95)(v11, v12, v97);
  uint64_t v29 = v13[5];
  uint64_t v30 = v11 + v29;
  uint64_t v31 = &v12[v29];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = v31[4];
  *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v32 = v13[7];
  uint64_t v33 = v11 + v32;
  uint64_t v34 = &v12[v32];
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v40 = v97;
      (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v33, v34, v97);
      uint64_t v41 = *(int *)(v35 + 20);
      uint64_t v42 = v33 + v41;
      uint64_t v43 = &v34[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v43[8];
      uint64_t v44 = *(int *)(v35 + 24);
      uint64_t v45 = v33 + v44;
      uint64_t v46 = &v34[v44];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      *(unsigned char *)(v45 + 4) = v46[4];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v39)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
LABEL_25:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                - 8)
                    + 64);
    uint64_t v27 = (void *)v33;
    size_t v28 = v34;
    goto LABEL_8;
  }
  uint64_t v40 = v97;
  ((void (*)(uint64_t, char *, uint64_t))v95)(v33, v34, v97);
  uint64_t v87 = *(int *)(v35 + 20);
  uint64_t v88 = v33 + v87;
  char v89 = &v34[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *(unsigned char *)(v88 + 8) = v89[8];
  uint64_t v90 = *(int *)(v35 + 24);
  uint64_t v91 = v33 + v90;
  uint64_t v92 = &v34[v90];
  *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
  *(unsigned char *)(v91 + 4) = v92[4];
LABEL_15:
  uint64_t v53 = a3[7];
  uint64_t v54 = (char *)(a1 + v53);
  char v55 = (char *)(a2 + v53);
  uint64_t v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v57 = *((void *)v56 - 1);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      ((void (*)(char *, char *, uint64_t))v95)(v54, v55, v40);
      uint64_t v75 = v56[5];
      uint64_t v76 = &v54[v75];
      char v77 = &v55[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v77[8];
      uint64_t v78 = v56[6];
      char v79 = &v54[v78];
      uint64_t v80 = &v55[v78];
      *(void *)char v79 = *(void *)v80;
      v79[8] = v80[8];
      uint64_t v81 = v56[7];
      uint64_t v82 = &v54[v81];
      char v83 = &v55[v81];
      *(void *)uint64_t v82 = *(void *)v83;
      v82[8] = v83[8];
      uint64_t v84 = v56[8];
      char v85 = &v54[v84];
      uint64_t v86 = &v55[v84];
      *(void *)char v85 = *(void *)v86;
      v85[8] = v86[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v54, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_20;
  }
  if (v60)
  {
LABEL_20:
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v54, v55, *(void *)(*(void *)(v73 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v54, v55, v40);
  uint64_t v61 = v56[5];
  int v62 = &v54[v61];
  uint64_t v63 = &v55[v61];
  *(void *)int v62 = *(void *)v63;
  v62[8] = v63[8];
  uint64_t v64 = v56[6];
  uint64_t v65 = &v54[v64];
  int v66 = &v55[v64];
  *(void *)uint64_t v65 = *(void *)v66;
  v65[8] = v66[8];
  uint64_t v67 = v56[7];
  uint64_t v68 = &v54[v67];
  uint64_t v69 = &v55[v67];
  *(void *)uint64_t v68 = *(void *)v69;
  v68[8] = v69[8];
  uint64_t v70 = v56[8];
  char v71 = &v54[v70];
  uint64_t v72 = &v55[v70];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v72[8];
  (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E5A120);
}

uint64_t sub_246E5A120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_309Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5A140);
}

uint64_t sub_246E5A140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_310Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_5);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_5);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassTimeInfo(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = &a1[v10];
    char v14 = &a2[v10];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    int v16 = &a1[v15];
    int v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    uint64_t v19 = *(void *)(v18 - 8);
    int v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v39(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v8(v16, v17, v7);
      uint64_t v22 = *(int *)(v18 + 20);
      uint64_t v23 = &v16[v22];
      uint64_t v24 = &v17[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = *(int *)(v18 + 24);
      size_t v26 = &v16[v25];
      uint64_t v27 = &v17[v25];
      *(void *)size_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v28 = a3[9];
    uint64_t v29 = &a1[v28];
    uint64_t v30 = &a2[v28];
    if (v39(v30, 1, v18))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v8(v29, v30, v7);
      uint64_t v32 = *(int *)(v18 + 20);
      uint64_t v33 = &v29[v32];
      uint64_t v34 = &v30[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = *(int *)(v18 + 24);
      uint64_t v36 = &v29[v35];
      uint64_t v37 = &v30[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v10(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 36);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = *(int *)(v17 + 24);
    uint64_t v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  if (v37(v28, 1, v17))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    uint64_t v30 = *(int *)(v17 + 20);
    uint64_t v31 = &v27[v30];
    uint64_t v32 = &v28[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = *(int *)(v17 + 24);
    uint64_t v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v61(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v62 = *(void *)(v17 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  int v19 = v18(v15, 1, v17);
  int v20 = v18(v16, 1, v17);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v16, v6);
      uint64_t v21 = *(int *)(v17 + 20);
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v24;
      uint64_t v25 = *(int *)(v17 + 24);
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v28;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v61((uint64_t)v15, (uint64_t)v16, v6);
  uint64_t v45 = *(int *)(v17 + 20);
  uint64_t v46 = &v15[v45];
  uint64_t v47 = &v16[v45];
  char v48 = v47[8];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v48;
  uint64_t v49 = *(int *)(v17 + 24);
  uint64_t v50 = &v15[v49];
  char v51 = &v16[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
LABEL_7:
  uint64_t v30 = a3[9];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  int v33 = v18((char *)(a1 + v30), 1, v17);
  int v34 = v18(v32, 1, v17);
  if (!v33)
  {
    if (!v34)
    {
      v61((uint64_t)v31, (uint64_t)v32, v6);
      uint64_t v53 = *(int *)(v17 + 20);
      uint64_t v54 = &v31[v53];
      char v55 = &v32[v53];
      char v56 = v55[8];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v56;
      uint64_t v57 = *(int *)(v17 + 24);
      uint64_t v58 = &v31[v57];
      int v59 = &v32[v57];
      char v60 = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v60;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v31, v32, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v31, v32, v6);
  uint64_t v35 = *(int *)(v17 + 20);
  uint64_t v36 = &v31[v35];
  uint64_t v37 = &v32[v35];
  char v38 = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v38;
  uint64_t v39 = *(int *)(v17 + 24);
  uint64_t v40 = &v31[v39];
  uint64_t v41 = &v32[v39];
  char v42 = v41[8];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v42;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v31, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = *(int *)(v17 + 24);
    char v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)(a1 + v26);
  char v28 = (char *)(a2 + v26);
  if (v37(v28, 1, v17))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    uint64_t v30 = *(int *)(v17 + 20);
    uint64_t v31 = &v27[v30];
    uint64_t v32 = &v28[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = *(int *)(v17 + 24);
    int v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    *(void *)int v34 = *(void *)v35;
    v34[8] = v35[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v6 - 8);
  char v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v52(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v53 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v15, v6);
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = *(int *)(v16 + 24);
      char v24 = &v14[v23];
      uint64_t v25 = &v15[v23];
      *(void *)char v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v14, v15, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v52((uint64_t)v14, (uint64_t)v15, v6);
  uint64_t v40 = *(int *)(v16 + 20);
  uint64_t v41 = &v14[v40];
  char v42 = &v15[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = *(int *)(v16 + 24);
  uint64_t v44 = &v14[v43];
  uint64_t v45 = &v15[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
LABEL_7:
  uint64_t v27 = a3[9];
  char v28 = (char *)(a1 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  int v30 = v17((char *)(a1 + v27), 1, v16);
  int v31 = v17(v29, 1, v16);
  if (!v30)
  {
    if (!v31)
    {
      v52((uint64_t)v28, (uint64_t)v29, v6);
      uint64_t v46 = *(int *)(v16 + 20);
      uint64_t v47 = &v28[v46];
      char v48 = &v29[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = *(int *)(v16 + 24);
      uint64_t v50 = &v28[v49];
      char v51 = &v29[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v28, v29, v6);
  uint64_t v32 = *(int *)(v16 + 20);
  uint64_t v33 = &v28[v32];
  int v34 = &v29[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  uint64_t v35 = *(int *)(v16 + 24);
  uint64_t v36 = &v28[v35];
  uint64_t v37 = &v29[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v28, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E5B920);
}

uint64_t sub_246E5B920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 249)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u) {
      int v10 = 6;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5BA68);
}

uint64_t sub_246E5BA68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 249)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_6);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_6);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_4);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    uint64_t v16 = *((void *)v15 - 1);
    uint64_t v64 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v62 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v23, 1, v24))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8(__dst, v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        char v28 = &v23[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        int v30 = &__dst[v29];
        int v31 = &v23[v29];
        *(_DWORD *)int v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v62 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    int v34 = (char *)a2 + v32;
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1, v35))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      v64(v33, v34, v7);
      uint64_t v39 = v35[5];
      uint64_t v40 = &v33[v39];
      uint64_t v41 = &v34[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v35[6];
      uint64_t v43 = &v33[v42];
      uint64_t v44 = &v34[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v35[7];
      uint64_t v46 = &v33[v45];
      uint64_t v47 = &v34[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v48 = a3[8];
    uint64_t v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    if (v37(v50, 1, v35))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      v64(v49, v50, v7);
      uint64_t v52 = v35[5];
      uint64_t v53 = &v49[v52];
      uint64_t v54 = &v50[v52];
      *(void *)uint64_t v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = v35[6];
      char v56 = &v49[v55];
      uint64_t v57 = &v50[v55];
      *(void *)char v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = v35[7];
      int v59 = &v49[v58];
      char v60 = &v50[v58];
      *(void *)int v59 = *(void *)v60;
      v59[8] = v60[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v49, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v14(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v14(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
      v14(v7, v4);
    }
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10)) {
    v14(v9, v4);
  }
  uint64_t v12 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v63 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = &__dst[v25];
      uint64_t v27 = &v21[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = *(int *)(v22 + 24);
      uint64_t v29 = &__dst[v28];
      int v30 = &v21[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      (*(void (**)(void))(v23 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    a3 = v63;
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  int v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v35 + 48);
  if (v36(v33, 1, v34))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v62(v32, v33, v6);
    uint64_t v38 = v34[5];
    uint64_t v39 = &v32[v38];
    uint64_t v40 = &v33[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v34[6];
    uint64_t v42 = &v32[v41];
    uint64_t v43 = &v33[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v34[7];
    uint64_t v45 = &v32[v44];
    uint64_t v46 = &v33[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v47 = v63[8];
  uint64_t v48 = (char *)(a1 + v47);
  uint64_t v49 = (char *)(a2 + v47);
  if (v36(v49, 1, v34))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v62(v48, v49, v6);
    uint64_t v51 = v34[5];
    uint64_t v52 = &v48[v51];
    uint64_t v53 = &v49[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    uint64_t v54 = v34[6];
    uint64_t v55 = &v48[v54];
    char v56 = &v49[v54];
    *(void *)uint64_t v55 = *(void *)v56;
    v55[8] = v56[8];
    uint64_t v57 = v34[7];
    uint64_t v58 = &v48[v57];
    int v59 = &v49[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = v59[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v48, 0, 1, v34);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v135 = *(void *)(v6 - 8);
  uint64_t v136 = v6;
  uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v135 + 24);
  v134(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      ((void (*)(uint64_t, char *, uint64_t))v134)(v12, v13, v136);
      uint64_t v31 = v14[5];
      uint64_t v32 = v12 + v31;
      uint64_t v33 = &v13[v31];
      int v34 = *(_DWORD *)v33;
      *(unsigned char *)(v32 + 4) = v33[4];
      *(_DWORD *)uint64_t v32 = v34;
      *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v35 = v14[7];
      uint64_t v36 = v12 + v35;
      uint64_t v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      int v41 = v40(v36, 1, v38);
      int v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v36, v37, v136);
          uint64_t v43 = *(int *)(v38 + 20);
          uint64_t v44 = v36 + v43;
          uint64_t v45 = &v37[v43];
          char v46 = v45[8];
          *(void *)uint64_t v44 = *(void *)v45;
          *(unsigned char *)(v44 + 8) = v46;
          uint64_t v47 = *(int *)(v38 + 24);
          uint64_t v48 = v36 + v47;
          uint64_t v49 = &v37[v47];
          char v50 = v49[4];
          *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
          *(unsigned char *)(v48 + 4) = v50;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          ((void (*)(uint64_t, char *, uint64_t))v134)(v36, v37, v136);
          uint64_t v124 = *(int *)(v38 + 20);
          uint64_t v125 = v36 + v124;
          int v126 = &v37[v124];
          char v127 = v126[8];
          *(void *)uint64_t v125 = *(void *)v126;
          *(unsigned char *)(v125 + 8) = v127;
          uint64_t v128 = *(int *)(v38 + 24);
          uint64_t v129 = v36 + v128;
          int v130 = &v37[v128];
          char v131 = v130[4];
          *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
          *(unsigned char *)(v129 + 4) = v131;
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      uint64_t v29 = (void *)v36;
      int v30 = v37;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v12;
    int v30 = v13;
    goto LABEL_8;
  }
  if (v18) {
    goto LABEL_7;
  }
  char v132 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
  v132(v12, v13, v136);
  uint64_t v19 = v14[5];
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  int v22 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  *(_DWORD *)uint64_t v20 = v22;
  *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v23 = v14[7];
  __dst = (char *)(v12 + v23);
  uint64_t v24 = &v13[v23];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v132((uint64_t)__dst, v24, v136);
    uint64_t v51 = *(int *)(v25 + 20);
    uint64_t v52 = &__dst[v51];
    uint64_t v53 = &v24[v51];
    char v54 = v53[8];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v54;
    uint64_t v55 = *(int *)(v25 + 24);
    char v56 = &__dst[v55];
    uint64_t v57 = &v24[v55];
    char v58 = v57[4];
    *(_DWORD *)char v56 = *(_DWORD *)v57;
    v56[4] = v58;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v59 = a3[7];
  char v60 = (char *)(a1 + v59);
  uint64_t v61 = (char *)(a2 + v59);
  uint64_t v62 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v63 = *((void *)v62 - 1);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      uint64_t v67 = v136;
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v60, v61, v136);
      uint64_t v68 = v62[5];
      uint64_t v69 = &v60[v68];
      uint64_t v70 = &v61[v68];
      char v71 = v70[8];
      *(void *)uint64_t v69 = *(void *)v70;
      v69[8] = v71;
      uint64_t v72 = v62[6];
      uint64_t v73 = &v60[v72];
      uint64_t v74 = &v61[v72];
      char v75 = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v75;
      uint64_t v76 = v62[7];
      char v77 = &v60[v76];
      uint64_t v78 = &v61[v76];
      char v79 = v78[8];
      *(void *)char v77 = *(void *)v78;
      v77[8] = v79;
      (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v66)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v60, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v60, v61, *(void *)(*(void *)(v80 - 8) + 64));
    uint64_t v67 = v136;
    goto LABEL_20;
  }
  uint64_t v67 = v136;
  ((void (*)(char *, char *, uint64_t))v134)(v60, v61, v136);
  uint64_t v100 = v62[5];
  char v101 = &v60[v100];
  uint64_t v102 = &v61[v100];
  char v103 = v102[8];
  *(void *)char v101 = *(void *)v102;
  v101[8] = v103;
  uint64_t v104 = v62[6];
  char v105 = &v60[v104];
  uint64_t v106 = &v61[v104];
  char v107 = v106[8];
  *(void *)char v105 = *(void *)v106;
  v105[8] = v107;
  uint64_t v108 = v62[7];
  char v109 = &v60[v108];
  uint64_t v110 = &v61[v108];
  char v111 = v110[8];
  *(void *)char v109 = *(void *)v110;
  v109[8] = v111;
LABEL_20:
  uint64_t v81 = a3[8];
  uint64_t v82 = (char *)(a1 + v81);
  char v83 = (char *)(a2 + v81);
  int v84 = v64((char *)(a1 + v81), 1, v62);
  int v85 = v64(v83, 1, v62);
  if (!v84)
  {
    if (!v85)
    {
      ((void (*)(char *, char *, uint64_t))v134)(v82, v83, v67);
      uint64_t v112 = v62[5];
      uint64_t v113 = &v82[v112];
      uint64_t v114 = &v83[v112];
      char v115 = v114[8];
      *(void *)uint64_t v113 = *(void *)v114;
      v113[8] = v115;
      uint64_t v116 = v62[6];
      uint64_t v117 = &v82[v116];
      int v118 = &v83[v116];
      char v119 = v118[8];
      *(void *)uint64_t v117 = *(void *)v118;
      v117[8] = v119;
      uint64_t v120 = v62[7];
      uint64_t v121 = &v82[v120];
      int v122 = &v83[v120];
      char v123 = v122[8];
      *(void *)uint64_t v121 = *(void *)v122;
      v121[8] = v123;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v85)
  {
LABEL_25:
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v82, v83, *(void *)(*(void *)(v98 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v82, v83, v67);
  uint64_t v86 = v62[5];
  uint64_t v87 = &v82[v86];
  uint64_t v88 = &v83[v86];
  char v89 = v88[8];
  *(void *)uint64_t v87 = *(void *)v88;
  v87[8] = v89;
  uint64_t v90 = v62[6];
  uint64_t v91 = &v82[v90];
  uint64_t v92 = &v83[v90];
  char v93 = v92[8];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v93;
  uint64_t v94 = v62[7];
  uint64_t v95 = &v82[v94];
  uint64_t v96 = &v83[v94];
  char v97 = v96[8];
  *(void *)uint64_t v95 = *(void *)v96;
  v95[8] = v97;
  (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v82, 0, 1, v62);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v63 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = &__dst[v25];
      uint64_t v27 = &v21[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = *(int *)(v22 + 24);
      uint64_t v29 = &__dst[v28];
      int v30 = &v21[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      (*(void (**)(void))(v23 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    a3 = v63;
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  int v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v35 + 48);
  if (v36(v33, 1, v34))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v62(v32, v33, v6);
    uint64_t v38 = v34[5];
    uint64_t v39 = &v32[v38];
    uint64_t v40 = &v33[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v34[6];
    int v42 = &v32[v41];
    uint64_t v43 = &v33[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v34[7];
    uint64_t v45 = &v32[v44];
    char v46 = &v33[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v47 = v63[8];
  uint64_t v48 = (char *)(a1 + v47);
  uint64_t v49 = (char *)(a2 + v47);
  if (v36(v49, 1, v34))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v62(v48, v49, v6);
    uint64_t v51 = v34[5];
    uint64_t v52 = &v48[v51];
    uint64_t v53 = &v49[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    uint64_t v54 = v34[6];
    uint64_t v55 = &v48[v54];
    char v56 = &v49[v54];
    *(void *)uint64_t v55 = *(void *)v56;
    v55[8] = v56[8];
    uint64_t v57 = v34[7];
    char v58 = &v48[v57];
    uint64_t v59 = &v49[v57];
    *(void *)char v58 = *(void *)v59;
    v58[8] = v59[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v48, 0, 1, v34);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v114 = *(void *)(v6 - 8);
  uint64_t v115 = v6;
  uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v114 + 40);
  v113(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      ((void (*)(uint64_t, char *, uint64_t))v113)(v11, v12, v115);
      uint64_t v29 = v13[5];
      uint64_t v30 = v11 + v29;
      uint64_t v31 = &v12[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      *(unsigned char *)(v30 + 4) = v31[4];
      *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v32 = v13[7];
      uint64_t v33 = v11 + v32;
      int v34 = &v12[v32];
      uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, v35);
      int v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v33, v34, v115);
          uint64_t v40 = *(int *)(v35 + 20);
          uint64_t v41 = v33 + v40;
          int v42 = &v34[v40];
          *(void *)uint64_t v41 = *(void *)v42;
          *(unsigned char *)(v41 + 8) = v42[8];
          uint64_t v43 = *(int *)(v35 + 24);
          uint64_t v44 = v33 + v43;
          uint64_t v45 = &v34[v43];
          *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
          *(unsigned char *)(v44 + 4) = v45[4];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v39)
        {
          ((void (*)(uint64_t, char *, uint64_t))v113)(v33, v34, v115);
          uint64_t v105 = *(int *)(v35 + 20);
          uint64_t v106 = v33 + v105;
          char v107 = &v34[v105];
          *(void *)uint64_t v106 = *(void *)v107;
          *(unsigned char *)(v106 + 8) = v107[8];
          uint64_t v108 = *(int *)(v35 + 24);
          uint64_t v109 = v33 + v108;
          uint64_t v110 = &v34[v108];
          *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
          *(unsigned char *)(v109 + 4) = v110[4];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      uint64_t v27 = (void *)v33;
      uint64_t v28 = v34;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    uint64_t v27 = (void *)v11;
    uint64_t v28 = v12;
    goto LABEL_8;
  }
  if (v17) {
    goto LABEL_7;
  }
  char v111 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
  v111(v11, v12, v115);
  uint64_t v18 = v13[5];
  uint64_t v19 = v11 + v18;
  uint64_t v20 = &v12[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = v20[4];
  *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v21 = v13[7];
  __dst = (char *)(v11 + v21);
  uint64_t v22 = &v12[v21];
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v111((uint64_t)__dst, v22, v115);
    uint64_t v46 = *(int *)(v23 + 20);
    uint64_t v47 = &__dst[v46];
    uint64_t v48 = &v22[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = *(int *)(v23 + 24);
    uint64_t v50 = &__dst[v49];
    uint64_t v51 = &v22[v49];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  uint64_t v52 = a3[7];
  uint64_t v53 = (char *)(a1 + v52);
  uint64_t v54 = (char *)(a2 + v52);
  uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v56 = *((void *)v55 - 1);
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, int *))(v56 + 48);
  int v58 = v57(v53, 1, v55);
  int v59 = v57(v54, 1, v55);
  if (v58)
  {
    if (!v59)
    {
      uint64_t v60 = v115;
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v53, v54, v115);
      uint64_t v61 = v55[5];
      uint64_t v62 = &v53[v61];
      uint64_t v63 = &v54[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v63[8];
      uint64_t v64 = v55[6];
      int v65 = &v53[v64];
      int v66 = &v54[v64];
      *(void *)int v65 = *(void *)v66;
      v65[8] = v66[8];
      uint64_t v67 = v55[7];
      uint64_t v68 = &v53[v67];
      uint64_t v69 = &v54[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v59)
  {
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v53, v54, *(void *)(*(void *)(v70 - 8) + 64));
    uint64_t v60 = v115;
    goto LABEL_20;
  }
  uint64_t v60 = v115;
  ((void (*)(char *, char *, uint64_t))v113)(v53, v54, v115);
  uint64_t v87 = v55[5];
  uint64_t v88 = &v53[v87];
  char v89 = &v54[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  v88[8] = v89[8];
  uint64_t v90 = v55[6];
  uint64_t v91 = &v53[v90];
  uint64_t v92 = &v54[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v92[8];
  uint64_t v93 = v55[7];
  uint64_t v94 = &v53[v93];
  uint64_t v95 = &v54[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  v94[8] = v95[8];
LABEL_20:
  uint64_t v71 = a3[8];
  uint64_t v72 = (char *)(a1 + v71);
  uint64_t v73 = (char *)(a2 + v71);
  int v74 = v57((char *)(a1 + v71), 1, v55);
  int v75 = v57(v73, 1, v55);
  if (!v74)
  {
    if (!v75)
    {
      ((void (*)(char *, char *, uint64_t))v113)(v72, v73, v60);
      uint64_t v96 = v55[5];
      char v97 = &v72[v96];
      uint64_t v98 = &v73[v96];
      *(void *)char v97 = *(void *)v98;
      v97[8] = v98[8];
      uint64_t v99 = v55[6];
      uint64_t v100 = &v72[v99];
      char v101 = &v73[v99];
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = v101[8];
      uint64_t v102 = v55[7];
      char v103 = &v72[v102];
      uint64_t v104 = &v73[v102];
      *(void *)char v103 = *(void *)v104;
      v103[8] = v104[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v75)
  {
LABEL_25:
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v72, v73, *(void *)(*(void *)(v85 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v72, v73, v60);
  uint64_t v76 = v55[5];
  char v77 = &v72[v76];
  uint64_t v78 = &v73[v76];
  *(void *)char v77 = *(void *)v78;
  v77[8] = v78[8];
  uint64_t v79 = v55[6];
  uint64_t v80 = &v72[v79];
  uint64_t v81 = &v73[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  v80[8] = v81[8];
  uint64_t v82 = v55[7];
  char v83 = &v72[v82];
  int v84 = &v73[v82];
  *(void *)char v83 = *(void *)v84;
  v83[8] = v84[8];
  (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v72, 0, 1, v55);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E5DF9C);
}

uint64_t sub_246E5DF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_309Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t __swift_get_extra_inhabitant_index_309Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a4);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a3 + 28);
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5E110);
}

uint64_t sub_246E5E110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_310Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t __swift_store_extra_inhabitant_index_310Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
LABEL_5:
    return v13(v14, a2, a2, v12);
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v16 = *(void *)(v15 - 8);
  if (*(_DWORD *)(v16 + 84) == a3)
  {
    uint64_t v12 = v15;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    goto LABEL_5;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + *(int *)(a4 + 28);
  return v19(v21, a2, a2, v20);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = *(int *)(a3 + 24);
    size_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(_DWORD *)size_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v49 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v34 = v11[5];
      uint64_t v35 = &v9[v34];
      uint64_t v36 = &v10[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v11[6];
      int v39 = &v9[v38];
      uint64_t v40 = &v10[v38];
      char v41 = v40[8];
      *(void *)int v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v11[7];
      uint64_t v43 = &v9[v42];
      uint64_t v44 = &v10[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v11[6];
  uint64_t v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v11[7];
  uint64_t v25 = &v9[v24];
  size_t v26 = &v10[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v29 = *(int *)(v47 + 24);
  uint64_t result = v49;
  uint64_t v31 = v49 + v29;
  uint64_t v32 = (int *)(v48 + v29);
  int v33 = *v32;
  *(unsigned char *)(v31 + 4) = *((unsigned char *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  return result;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v42 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v30 = v11[5];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v11[6];
      uint64_t v34 = &v9[v33];
      uint64_t v35 = &v10[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v11[7];
      char v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v11[7];
  uint64_t v23 = &v9[v22];
  uint64_t v24 = &v10[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v26 = *(int *)(v40 + 24);
  uint64_t result = v42;
  uint64_t v28 = v42 + v26;
  uint64_t v29 = v41 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E5F010);
}

uint64_t sub_246E5F010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E5F120);
}

uint64_t sub_246E5F120(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_5);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_5);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    int v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)uint64_t v22 = v24;
    uint64_t v25 = (char *)a1 + v21;
    uint64_t v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = (char *)a1 + v28;
    uint64_t v32 = (char *)a2 + v28;
    v31[4] = v32[4];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    uint64_t v33 = a3[13];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    v34[4] = v35[4];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(unsigned char *)(v28 + 4) = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  char v34 = *(unsigned char *)(v33 + 4);
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  char v38 = *(unsigned char *)(v37 + 4);
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(unsigned char *)(v36 + 4) = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  char v42 = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = v42;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_7);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_7);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_8);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      uint64_t v19 = *(int *)(v12 + 24);
      uint64_t v85 = v10;
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      uint64_t v86 = v8;
      char v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
      uint64_t v23 = *((void *)v22 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        uint64_t v8 = v86;
        uint64_t v25 = v85;
      }
      else
      {
        uint64_t v82 = v23;
        v86(v20, v21, v7);
        uint64_t v26 = v22[5];
        uint64_t v27 = &v20[v26];
        uint64_t v28 = &v21[v26];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        uint64_t v29 = v22[6];
        char v83 = v20;
        __dst = &v20[v29];
        uint64_t v81 = v21;
        uint64_t v30 = &v21[v29];
        uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
          uint64_t v25 = v85;
        }
        else
        {
          uint64_t v78 = v32;
          v86(__dst, v30, v7);
          uint64_t v34 = *(int *)(v31 + 20);
          uint64_t v35 = &__dst[v34];
          uint64_t v36 = &v30[v34];
          *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
          v35[4] = v36[4];
          uint64_t v79 = v31;
          uint64_t v37 = *(int *)(v31 + 24);
          char v77 = &__dst[v37];
          char v38 = &v30[v37];
          uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v76 = *(void *)(v39 - 8);
          __src = (int *)v39;
          uint64_t v25 = v85;
          if ((*(unsigned int (**)(char *, uint64_t))(v76 + 48))(v38, 1))
          {
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(v77, v38, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            v86(v77, v38, v7);
            uint64_t v41 = __src[5];
            char v42 = &v77[v41];
            uint64_t v43 = &v38[v41];
            *(_DWORD *)char v42 = *(_DWORD *)v43;
            v42[4] = v43[4];
            v77[__src[6]] = v38[__src[6]];
            (*(void (**)(char *, void, uint64_t))(v76 + 56))(v77, 0, 1);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v79);
        }
        uint64_t v44 = v22[7];
        char v45 = &v83[v44];
        uint64_t v46 = &v81[v44];
        *(_DWORD *)char v45 = *(_DWORD *)v46;
        v45[4] = v46[4];
        uint64_t v47 = v22[8];
        uint64_t v48 = &v83[v47];
        uint64_t v49 = &v81[v47];
        v48[4] = v49[4];
        *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
        uint64_t v50 = v22[9];
        uint64_t v51 = &v83[v50];
        uint64_t v52 = &v81[v50];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        uint64_t v53 = v22[10];
        uint64_t v54 = &v83[v53];
        uint64_t v55 = &v81[v53];
        *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
        v54[4] = v55[4];
        uint64_t v56 = v22[11];
        uint64_t v57 = &v83[v56];
        int v58 = &v81[v56];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        (*(void (**)(void))(v82 + 56))();
        uint64_t v8 = v86;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v12);
    }
    uint64_t v59 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v59] = a2[v59];
    uint64_t v60 = a3[8];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &a2[v60];
    uint64_t v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
    uint64_t v64 = *((void *)v63 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v64 + 48))(v62, 1, v63))
    {
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      v8(v61, v62, v7);
      uint64_t v66 = v63[5];
      uint64_t v67 = &v61[v66];
      uint64_t v68 = &v62[v66];
      *(void *)uint64_t v67 = *(void *)v68;
      v67[8] = v68[8];
      uint64_t v69 = v63[6];
      uint64_t v70 = &v61[v69];
      uint64_t v71 = &v62[v69];
      *(void *)uint64_t v70 = *(void *)v71;
      v70[8] = v71[8];
      uint64_t v72 = v63[7];
      uint64_t v73 = &v61[v72];
      int v74 = &v62[v72];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v74[8];
      (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v16(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v16(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 24);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v16(v7, v4);
      uint64_t v9 = v7 + *(int *)(v8 + 24);
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v16(v9, v4);
        uint64_t v11 = v9 + *(int *)(v10 + 24);
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)) {
          v16(v11, v4);
        }
      }
    }
  }
  uint64_t v13 = a1 + *(int *)(a2 + 32);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v13, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    char v83 = v9;
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    int v84 = v7;
    uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v7 = v84;
      uint64_t v23 = v83;
    }
    else
    {
      uint64_t v80 = v21;
      v84((uint64_t)v18, (uint64_t)v19, v6);
      uint64_t v24 = v20[5];
      uint64_t v25 = &v18[v24];
      uint64_t v26 = &v19[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v20[6];
      uint64_t v81 = v18;
      __dst = &v18[v27];
      uint64_t v79 = v19;
      uint64_t v28 = &v19[v27];
      uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v23 = v83;
      }
      else
      {
        uint64_t v76 = v30;
        v84((uint64_t)__dst, (uint64_t)v28, v6);
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v33 = &__dst[v32];
        uint64_t v34 = &v28[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        uint64_t v77 = v29;
        uint64_t v35 = *(int *)(v29 + 24);
        int v75 = &__dst[v35];
        uint64_t v36 = &v28[v35];
        uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v74 = *(void *)(v37 - 8);
        __src = (int *)v37;
        uint64_t v23 = v83;
        if ((*(unsigned int (**)(char *, uint64_t))(v74 + 48))(v36, 1))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v75, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v75, (uint64_t)v36, v6);
          uint64_t v39 = __src[5];
          uint64_t v40 = &v75[v39];
          uint64_t v41 = &v36[v39];
          *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
          v40[4] = v41[4];
          v75[__src[6]] = v36[__src[6]];
          (*(void (**)(char *, void, uint64_t))(v74 + 56))(v75, 0, 1);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v77);
      }
      uint64_t v42 = v20[7];
      uint64_t v43 = &v81[v42];
      uint64_t v44 = &v79[v42];
      *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      uint64_t v45 = v20[8];
      uint64_t v46 = &v81[v45];
      uint64_t v47 = &v79[v45];
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v48 = v20[9];
      uint64_t v49 = &v81[v48];
      uint64_t v50 = &v79[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      uint64_t v51 = v20[10];
      uint64_t v52 = &v81[v51];
      uint64_t v53 = &v79[v51];
      *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
      v52[4] = v53[4];
      uint64_t v54 = v20[11];
      uint64_t v55 = &v81[v54];
      uint64_t v56 = &v79[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      (*(void (**)(void))(v80 + 56))();
      uint64_t v7 = v84;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  }
  uint64_t v57 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v57) = *(unsigned char *)(a2 + v57);
  uint64_t v58 = a3[8];
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v62 = *((void *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    uint64_t v64 = v61[5];
    uint64_t v65 = &v59[v64];
    uint64_t v66 = &v60[v64];
    *(void *)uint64_t v65 = *(void *)v66;
    v65[8] = v66[8];
    uint64_t v67 = v61[6];
    uint64_t v68 = &v59[v67];
    uint64_t v69 = &v60[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v61[7];
    uint64_t v71 = &v59[v70];
    uint64_t v72 = &v60[v70];
    *(void *)uint64_t v71 = *(void *)v72;
    v71[8] = v72[8];
    (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v250 = *(void *)(v6 - 8);
  uint64_t v251 = v6;
  v249 = *(void (**)(uint64_t, uint64_t))(v250 + 24);
  v249(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    ((void (*)(uint64_t, char *, uint64_t))v249)(v8, v9, v251);
    uint64_t v28 = *(int *)(v10 + 20);
    uint64_t v29 = v8 + v28;
    uint64_t v30 = &v9[v28];
    char v31 = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    *(unsigned char *)(v29 + 4) = v31;
    uint64_t v32 = *(int *)(v10 + 24);
    uint64_t v33 = v8 + v32;
    uint64_t v34 = &v9[v32];
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
    int v38 = v37(v33, 1, v35);
    int v39 = v37((uint64_t)v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        v239 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
        v239(v33, v34, v251);
        uint64_t v40 = v35[5];
        uint64_t v41 = v33 + v40;
        uint64_t v42 = &v34[v40];
        char v43 = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        *(unsigned char *)(v41 + 4) = v43;
        uint64_t v44 = v35[6];
        uint64_t v45 = (char *)(v33 + v44);
        __srca = v34;
        uint64_t v46 = &v34[v44];
        uint64_t v47 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v48 = *(void *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
          uint64_t v50 = __srca;
        }
        else
        {
          uint64_t v232 = v48;
          v239((uint64_t)v45, v46, v251);
          uint64_t v84 = *(int *)(v47 + 20);
          uint64_t v85 = &v45[v84];
          uint64_t v86 = &v46[v84];
          char v87 = v86[4];
          *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
          v85[4] = v87;
          __dsta = (void *)v47;
          uint64_t v238 = v45;
          uint64_t v88 = *(int *)(v47 + 24);
          char v89 = &v45[v88];
          uint64_t v90 = &v46[v88];
          uint64_t v91 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v92 = *(void *)(v91 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          }
          else
          {
            v239((uint64_t)v89, v90, v251);
            uint64_t v163 = *(int *)(v91 + 20);
            uint64_t v164 = &v89[v163];
            v165 = &v90[v163];
            int v166 = *(_DWORD *)v165;
            v164[4] = v165[4];
            *(_DWORD *)uint64_t v164 = v166;
            v89[*(int *)(v91 + 24)] = v90[*(int *)(v91 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
          }
          uint64_t v50 = __srca;
          (*(void (**)(char *, void, uint64_t, void *))(v232 + 56))(v238, 0, 1, __dsta);
        }
        uint64_t v167 = v35[7];
        uint64_t v168 = v33 + v167;
        int v169 = &v50[v167];
        int v170 = *(_DWORD *)v169;
        *(unsigned char *)(v168 + 4) = v169[4];
        *(_DWORD *)uint64_t v168 = v170;
        uint64_t v171 = v35[8];
        uint64_t v172 = v33 + v171;
        uint64_t v173 = &v50[v171];
        int v174 = *(_DWORD *)v173;
        *(unsigned char *)(v172 + 4) = v173[4];
        *(_DWORD *)uint64_t v172 = v174;
        uint64_t v175 = v35[9];
        uint64_t v176 = v33 + v175;
        char v177 = &v50[v175];
        int v178 = *(_DWORD *)v177;
        *(unsigned char *)(v176 + 4) = v177[4];
        *(_DWORD *)uint64_t v176 = v178;
        uint64_t v179 = v35[10];
        uint64_t v180 = v33 + v179;
        int v181 = &v50[v179];
        int v182 = *(_DWORD *)v181;
        *(unsigned char *)(v180 + 4) = v181[4];
        *(_DWORD *)uint64_t v180 = v182;
        uint64_t v183 = v35[11];
        uint64_t v184 = v33 + v183;
        uint64_t v185 = &v50[v183];
        int v186 = *(_DWORD *)v185;
        *(unsigned char *)(v184 + 4) = v185[4];
        *(_DWORD *)uint64_t v184 = v186;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if (v39)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v33, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      uint64_t v27 = v34;
      goto LABEL_8;
    }
    ((void (*)(uint64_t, char *, uint64_t))v249)(v33, v34, v251);
    uint64_t v72 = v35[5];
    uint64_t v73 = v33 + v72;
    uint64_t v74 = &v34[v72];
    char v75 = v74[4];
    *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
    *(unsigned char *)(v73 + 4) = v75;
    uint64_t v76 = v35[6];
    uint64_t v77 = v33 + v76;
    __srcb = &v34[v76];
    uint64_t v78 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v237 = *(void *)(v78 - 8);
    uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v237 + 48);
    uint64_t v244 = v77;
    LODWORD(v77) = v79(v77, 1, v78);
    uint64_t v241 = v78;
    int v80 = v79((uint64_t)__srcb, 1, v78);
    if (v77)
    {
      if (!v80)
      {
        v154 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
        v154(v244, __srcb, v251);
        uint64_t v155 = *(int *)(v78 + 20);
        uint64_t v156 = v244 + v155;
        uint64_t v157 = &__srcb[v155];
        char v158 = v157[4];
        *(_DWORD *)uint64_t v156 = *(_DWORD *)v157;
        *(unsigned char *)(v156 + 4) = v158;
        uint64_t v159 = *(int *)(v78 + 24);
        __dstb = (char *)(v244 + v159);
        uint64_t v160 = &__srcb[v159];
        uint64_t v161 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __srcc = *(void (***)(void *, void, uint64_t, uint64_t))(v161 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcc[6])(v160, 1, v161))
        {
          uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v160, *(void *)(*(void *)(v162 - 8) + 64));
        }
        else
        {
          v154((uint64_t)__dstb, v160, v251);
          uint64_t v196 = *(int *)(v161 + 20);
          uint64_t v197 = &__dstb[v196];
          uint64_t v198 = &v160[v196];
          int v199 = *(_DWORD *)v198;
          v197[4] = v198[4];
          *(_DWORD *)uint64_t v197 = v199;
          __dstb[*(int *)(v161 + 24)] = v160[*(int *)(v161 + 24)];
          __srcc[7](__dstb, 0, 1, v161);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v237 + 56))(v244, 0, 1, v241);
        goto LABEL_52;
      }
      uint64_t v81 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?;
LABEL_23:
      size_t v82 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v81) - 8) + 64);
      char v83 = (void *)v244;
LABEL_41:
      memcpy(v83, __srcb, v82);
LABEL_52:
      uint64_t v200 = v35[7];
      uint64_t v201 = v33 + v200;
      uint64_t v202 = &v34[v200];
      int v203 = *(_DWORD *)v202;
      *(unsigned char *)(v201 + 4) = v202[4];
      *(_DWORD *)uint64_t v201 = v203;
      uint64_t v204 = v35[8];
      uint64_t v205 = v33 + v204;
      uint64_t v206 = &v34[v204];
      int v207 = *(_DWORD *)v206;
      *(unsigned char *)(v205 + 4) = v206[4];
      *(_DWORD *)uint64_t v205 = v207;
      uint64_t v208 = v35[9];
      uint64_t v209 = v33 + v208;
      uint64_t v210 = &v34[v208];
      int v211 = *(_DWORD *)v210;
      *(unsigned char *)(v209 + 4) = v210[4];
      *(_DWORD *)uint64_t v209 = v211;
      uint64_t v212 = v35[10];
      uint64_t v213 = v33 + v212;
      uint64_t v214 = &v34[v212];
      int v215 = *(_DWORD *)v214;
      *(unsigned char *)(v213 + 4) = v214[4];
      *(_DWORD *)uint64_t v213 = v215;
      uint64_t v216 = v35[11];
      uint64_t v217 = v33 + v216;
      uint64_t v218 = &v34[v216];
      int v219 = *(_DWORD *)v218;
      *(unsigned char *)(v217 + 4) = v218[4];
      *(_DWORD *)uint64_t v217 = v219;
      goto LABEL_30;
    }
    if (v80)
    {
      uint64_t v152 = (void *)v244;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v244, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      uint64_t v153 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?;
    }
    else
    {
      ((void (*)(uint64_t, char *, uint64_t))v249)(v244, __srcb, v251);
      uint64_t v187 = *(int *)(v78 + 20);
      uint64_t v188 = v244 + v187;
      uint64_t v189 = &__srcb[v187];
      char v190 = v189[4];
      *(_DWORD *)uint64_t v188 = *(_DWORD *)v189;
      *(unsigned char *)(v188 + 4) = v190;
      uint64_t v191 = *(int *)(v78 + 24);
      uint64_t v192 = v244 + v191;
      __srcb += v191;
      uint64_t v193 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v242 = *(void *)(v193 - 8);
      uint64_t v244 = v192;
      uint64_t v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v242 + 48);
      LODWORD(v192) = v194(v192, 1, v193);
      int v195 = v194((uint64_t)__srcb, 1, v193);
      if (v192)
      {
        if (!v195)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v250 + 16))(v244, __srcb, v251);
          uint64_t v220 = *(int *)(v193 + 20);
          uint64_t v221 = v244 + v220;
          uint64_t v222 = &__srcb[v220];
          int v223 = *(_DWORD *)v222;
          *(unsigned char *)(v221 + 4) = v222[4];
          *(_DWORD *)uint64_t v221 = v223;
          *(unsigned char *)(v244 + *(int *)(v193 + 24)) = __srcb[*(int *)(v193 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v242 + 56))(v244, 0, 1, v193);
          goto LABEL_52;
        }
        uint64_t v81 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?;
        goto LABEL_23;
      }
      if (!v195)
      {
        ((void (*)(uint64_t, char *, uint64_t))v249)(v244, __srcb, v251);
        uint64_t v224 = *(int *)(v193 + 20);
        uint64_t v225 = v244 + v224;
        uint64_t v226 = &__srcb[v224];
        int v227 = *(_DWORD *)v226;
        *(unsigned char *)(v225 + 4) = v226[4];
        *(_DWORD *)uint64_t v225 = v227;
        *(unsigned char *)(v244 + *(int *)(v193 + 24)) = __srcb[*(int *)(v193 + 24)];
        goto LABEL_52;
      }
      uint64_t v152 = (void *)v244;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v244, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      uint64_t v153 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?;
    }
    size_t v82 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v153) - 8) + 64);
    char v83 = v152;
    goto LABEL_41;
  }
  if (v14)
  {
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v8;
    uint64_t v27 = v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_30;
  }
  __src = a3;
  v243 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
  v243(v8, v9, v251);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  char v18 = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = *(int *)(v10 + 24);
  uint64_t v20 = (char *)(v8 + v19);
  uint64_t v21 = &v9[v19];
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v231 = v23;
    v243((uint64_t)v20, v21, v251);
    uint64_t v51 = v22[5];
    uint64_t v52 = &v20[v51];
    uint64_t v53 = &v21[v51];
    char v54 = v53[4];
    *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
    v52[4] = v54;
    uint64_t v55 = v22[6];
    __dst = v20;
    v240 = &v20[v55];
    uint64_t v230 = v21;
    uint64_t v56 = &v21[v55];
    uint64_t v57 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v240, v56, *(void *)(*(void *)(v59 - 8) + 64));
      uint64_t v61 = v231;
      uint64_t v60 = __dst;
      uint64_t v62 = v230;
    }
    else
    {
      uint64_t v228 = v58;
      v243((uint64_t)v240, v56, v251);
      uint64_t v63 = *(int *)(v57 + 20);
      uint64_t v64 = &v240[v63];
      uint64_t v65 = &v56[v63];
      char v66 = v65[4];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v66;
      uint64_t v229 = v57;
      uint64_t v67 = *(int *)(v57 + 24);
      uint64_t v68 = &v240[v67];
      uint64_t v69 = &v56[v67];
      uint64_t v70 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v236 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v236 + 48))(v69, 1, v70))
      {
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        v243((uint64_t)v68, v69, v251);
        uint64_t v94 = *(int *)(v70 + 20);
        uint64_t v95 = &v68[v94];
        uint64_t v96 = &v69[v94];
        int v97 = *(_DWORD *)v96;
        v95[4] = v96[4];
        *(_DWORD *)uint64_t v95 = v97;
        v68[*(int *)(v70 + 24)] = v69[*(int *)(v70 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v236 + 56))(v68, 0, 1, v70);
      }
      uint64_t v61 = v231;
      uint64_t v60 = __dst;
      uint64_t v62 = v230;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v228 + 56))(v240, 0, 1, v229);
    }
    uint64_t v98 = v22[7];
    uint64_t v99 = &v60[v98];
    uint64_t v100 = &v62[v98];
    int v101 = *(_DWORD *)v100;
    v99[4] = v100[4];
    *(_DWORD *)uint64_t v99 = v101;
    uint64_t v102 = v22[8];
    char v103 = &v60[v102];
    uint64_t v104 = &v62[v102];
    int v105 = *(_DWORD *)v104;
    v103[4] = v104[4];
    *(_DWORD *)char v103 = v105;
    uint64_t v106 = v22[9];
    char v107 = &v60[v106];
    uint64_t v108 = &v62[v106];
    int v109 = *(_DWORD *)v108;
    v107[4] = v108[4];
    *(_DWORD *)char v107 = v109;
    uint64_t v110 = v22[10];
    char v111 = &v60[v110];
    uint64_t v112 = &v62[v110];
    int v113 = *(_DWORD *)v112;
    v111[4] = v112[4];
    *(_DWORD *)char v111 = v113;
    uint64_t v114 = v22[11];
    uint64_t v115 = &v60[v114];
    uint64_t v116 = &v62[v114];
    int v117 = *(_DWORD *)v116;
    v115[4] = v116[4];
    *(_DWORD *)uint64_t v115 = v117;
    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v60, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  a3 = __src;
LABEL_30:
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v118 = a3[8];
  char v119 = (char *)(a1 + v118);
  uint64_t v120 = (char *)(a2 + v118);
  uint64_t v121 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v122 = *((void *)v121 - 1);
  char v123 = *(uint64_t (**)(char *, uint64_t, int *))(v122 + 48);
  int v124 = v123(v119, 1, v121);
  int v125 = v123(v120, 1, v121);
  if (!v124)
  {
    if (!v125)
    {
      ((void (*)(char *, char *, uint64_t))v249)(v119, v120, v251);
      uint64_t v140 = v121[5];
      uint64_t v141 = &v119[v140];
      uint64_t v142 = &v120[v140];
      char v143 = v142[8];
      *(void *)uint64_t v141 = *(void *)v142;
      v141[8] = v143;
      uint64_t v144 = v121[6];
      uint64_t v145 = &v119[v144];
      uint64_t v146 = &v120[v144];
      char v147 = v146[8];
      *(void *)uint64_t v145 = *(void *)v146;
      v145[8] = v147;
      uint64_t v148 = v121[7];
      uint64_t v149 = &v119[v148];
      uint64_t v150 = &v120[v148];
      char v151 = v150[8];
      *(void *)uint64_t v149 = *(void *)v150;
      v149[8] = v151;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v119, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_35;
  }
  if (v125)
  {
LABEL_35:
    uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v119, v120, *(void *)(*(void *)(v138 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v119, v120, v251);
  uint64_t v126 = v121[5];
  char v127 = &v119[v126];
  uint64_t v128 = &v120[v126];
  char v129 = v128[8];
  *(void *)char v127 = *(void *)v128;
  v127[8] = v129;
  uint64_t v130 = v121[6];
  char v131 = &v119[v130];
  char v132 = &v120[v130];
  char v133 = v132[8];
  *(void *)char v131 = *(void *)v132;
  v131[8] = v133;
  uint64_t v134 = v121[7];
  uint64_t v135 = &v119[v134];
  uint64_t v136 = &v120[v134];
  char v137 = v136[8];
  *(void *)uint64_t v135 = *(void *)v136;
  v135[8] = v137;
  (*(void (**)(char *, void, uint64_t, int *))(v122 + 56))(v119, 0, 1, v121);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    char v83 = v9;
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v84 = v7;
    uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v7 = v84;
      uint64_t v23 = v83;
    }
    else
    {
      uint64_t v80 = v21;
      v84((uint64_t)v18, (uint64_t)v19, v6);
      uint64_t v24 = v20[5];
      size_t v25 = &v18[v24];
      uint64_t v26 = &v19[v24];
      *(_DWORD *)size_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v20[6];
      uint64_t v81 = v18;
      __dst = &v18[v27];
      uint64_t v79 = v19;
      uint64_t v28 = &v19[v27];
      uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v23 = v83;
      }
      else
      {
        uint64_t v76 = v30;
        v84((uint64_t)__dst, (uint64_t)v28, v6);
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v33 = &__dst[v32];
        uint64_t v34 = &v28[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        uint64_t v77 = v29;
        uint64_t v35 = *(int *)(v29 + 24);
        char v75 = &__dst[v35];
        uint64_t v36 = &v28[v35];
        uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v74 = *(void *)(v37 - 8);
        __src = (int *)v37;
        uint64_t v23 = v83;
        if ((*(unsigned int (**)(char *, uint64_t))(v74 + 48))(v36, 1))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v75, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v75, (uint64_t)v36, v6);
          uint64_t v39 = __src[5];
          uint64_t v40 = &v75[v39];
          uint64_t v41 = &v36[v39];
          *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
          v40[4] = v41[4];
          v75[__src[6]] = v36[__src[6]];
          (*(void (**)(char *, void, uint64_t))(v74 + 56))(v75, 0, 1);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v77);
      }
      uint64_t v42 = v20[7];
      char v43 = &v81[v42];
      uint64_t v44 = &v79[v42];
      *(_DWORD *)char v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      uint64_t v45 = v20[8];
      uint64_t v46 = &v81[v45];
      uint64_t v47 = &v79[v45];
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v48 = v20[9];
      uint64_t v49 = &v81[v48];
      uint64_t v50 = &v79[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      uint64_t v51 = v20[10];
      uint64_t v52 = &v81[v51];
      uint64_t v53 = &v79[v51];
      *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
      v52[4] = v53[4];
      uint64_t v54 = v20[11];
      uint64_t v55 = &v81[v54];
      uint64_t v56 = &v79[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      (*(void (**)(void))(v80 + 56))();
      uint64_t v7 = v84;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  }
  uint64_t v57 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v57) = *(unsigned char *)(a2 + v57);
  uint64_t v58 = a3[8];
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v62 = *((void *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    uint64_t v64 = v61[5];
    uint64_t v65 = &v59[v64];
    char v66 = &v60[v64];
    *(void *)uint64_t v65 = *(void *)v66;
    v65[8] = v66[8];
    uint64_t v67 = v61[6];
    uint64_t v68 = &v59[v67];
    uint64_t v69 = &v60[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v61[7];
    uint64_t v71 = &v59[v70];
    uint64_t v72 = &v60[v70];
    *(void *)uint64_t v71 = *(void *)v72;
    v71[8] = v72[8];
    (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v216 = *(void *)(v6 - 8);
  uint64_t v217 = v6;
  int v215 = *(void (**)(uint64_t, uint64_t))(v216 + 40);
  v215(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    ((void (*)(uint64_t, char *, uint64_t))v215)(v8, v9, v217);
    uint64_t v27 = *(int *)(v10 + 20);
    uint64_t v28 = v8 + v27;
    uint64_t v29 = &v9[v27];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    *(unsigned char *)(v28 + 4) = v29[4];
    uint64_t v30 = *(int *)(v10 + 24);
    uint64_t v31 = v8 + v30;
    uint64_t v32 = &v9[v30];
    uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v34 = *((void *)v33 - 1);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v34 + 48);
    int v36 = v35(v31, 1, v33);
    int v37 = v35((uint64_t)v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        uint64_t v205 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
        v205(v31, v32, v217);
        uint64_t v38 = v33[5];
        uint64_t v39 = v31 + v38;
        uint64_t v40 = &v32[v38];
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        *(unsigned char *)(v39 + 4) = v40[4];
        uint64_t v41 = v33[6];
        uint64_t v42 = (char *)(v31 + v41);
        __srca = v32;
        char v43 = &v32[v41];
        uint64_t v44 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
          uint64_t v47 = __srca;
        }
        else
        {
          uint64_t v198 = v45;
          v205((uint64_t)v42, v43, v217);
          uint64_t v78 = *(int *)(v44 + 20);
          uint64_t v79 = &v42[v78];
          uint64_t v80 = &v43[v78];
          *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
          v79[4] = v80[4];
          __dsta = (void *)v44;
          uint64_t v204 = v42;
          uint64_t v81 = *(int *)(v44 + 24);
          size_t v82 = &v42[v81];
          char v83 = &v43[v81];
          uint64_t v84 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v85 = *(void *)(v84 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
          {
            uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
          }
          else
          {
            v205((uint64_t)v82, v83, v217);
            uint64_t v144 = *(int *)(v84 + 20);
            uint64_t v145 = &v82[v144];
            uint64_t v146 = &v83[v144];
            *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
            v145[4] = v146[4];
            v82[*(int *)(v84 + 24)] = v83[*(int *)(v84 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
          }
          uint64_t v47 = __srca;
          (*(void (**)(char *, void, uint64_t, void *))(v198 + 56))(v204, 0, 1, __dsta);
        }
        uint64_t v147 = v33[7];
        uint64_t v148 = v31 + v147;
        uint64_t v149 = &v47[v147];
        *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
        *(unsigned char *)(v148 + 4) = v149[4];
        uint64_t v150 = v33[8];
        uint64_t v151 = v31 + v150;
        uint64_t v152 = &v47[v150];
        *(unsigned char *)(v151 + 4) = v152[4];
        *(_DWORD *)uint64_t v151 = *(_DWORD *)v152;
        uint64_t v153 = v33[9];
        uint64_t v154 = v31 + v153;
        uint64_t v155 = &v47[v153];
        *(_DWORD *)uint64_t v154 = *(_DWORD *)v155;
        *(unsigned char *)(v154 + 4) = v155[4];
        uint64_t v156 = v33[10];
        uint64_t v157 = v31 + v156;
        char v158 = &v47[v156];
        *(_DWORD *)uint64_t v157 = *(_DWORD *)v158;
        *(unsigned char *)(v157 + 4) = v158[4];
        uint64_t v159 = v33[11];
        uint64_t v160 = v31 + v159;
        uint64_t v161 = &v47[v159];
        *(_DWORD *)uint64_t v160 = *(_DWORD *)v161;
        *(unsigned char *)(v160 + 4) = v161[4];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if (v37)
    {
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v31, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?)
                                  - 8)
                      + 64);
      size_t v25 = (void *)v31;
      uint64_t v26 = v32;
      goto LABEL_8;
    }
    ((void (*)(uint64_t, char *, uint64_t))v215)(v31, v32, v217);
    uint64_t v67 = v33[5];
    uint64_t v68 = v31 + v67;
    uint64_t v69 = &v32[v67];
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
    *(unsigned char *)(v68 + 4) = v69[4];
    uint64_t v70 = v33[6];
    uint64_t v71 = v31 + v70;
    __srcb = &v32[v70];
    uint64_t v72 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v203 = *(void *)(v72 - 8);
    uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
    uint64_t v210 = v71;
    LODWORD(v71) = v73(v71, 1, v72);
    uint64_t v207 = v72;
    int v74 = v73((uint64_t)__srcb, 1, v72);
    if (v71)
    {
      if (!v74)
      {
        uint64_t v136 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
        v136(v210, __srcb, v217);
        uint64_t v137 = *(int *)(v72 + 20);
        uint64_t v138 = v210 + v137;
        uint64_t v139 = &__srcb[v137];
        *(_DWORD *)uint64_t v138 = *(_DWORD *)v139;
        *(unsigned char *)(v138 + 4) = v139[4];
        uint64_t v140 = *(int *)(v72 + 24);
        __dstb = (char *)(v210 + v140);
        uint64_t v141 = &__srcb[v140];
        uint64_t v142 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __srcc = *(void (***)(void *, void, uint64_t, uint64_t))(v142 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcc[6])(v141, 1, v142))
        {
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          v136((uint64_t)__dstb, v141, v217);
          uint64_t v170 = *(int *)(v142 + 20);
          uint64_t v171 = &__dstb[v170];
          uint64_t v172 = &v141[v170];
          *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
          v171[4] = v172[4];
          __dstb[*(int *)(v142 + 24)] = v141[*(int *)(v142 + 24)];
          __srcc[7](__dstb, 0, 1, v142);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56))(v210, 0, 1, v207);
        goto LABEL_52;
      }
      char v75 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?;
LABEL_23:
      size_t v76 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v75) - 8) + 64);
      uint64_t v77 = (void *)v210;
LABEL_41:
      memcpy(v77, __srcb, v76);
LABEL_52:
      uint64_t v173 = v33[7];
      uint64_t v174 = v31 + v173;
      uint64_t v175 = &v32[v173];
      *(_DWORD *)uint64_t v174 = *(_DWORD *)v175;
      *(unsigned char *)(v174 + 4) = v175[4];
      uint64_t v176 = v33[8];
      uint64_t v177 = v31 + v176;
      int v178 = &v32[v176];
      *(unsigned char *)(v177 + 4) = v178[4];
      *(_DWORD *)uint64_t v177 = *(_DWORD *)v178;
      uint64_t v179 = v33[9];
      uint64_t v180 = v31 + v179;
      int v181 = &v32[v179];
      *(_DWORD *)uint64_t v180 = *(_DWORD *)v181;
      *(unsigned char *)(v180 + 4) = v181[4];
      uint64_t v182 = v33[10];
      uint64_t v183 = v31 + v182;
      uint64_t v184 = &v32[v182];
      *(_DWORD *)uint64_t v183 = *(_DWORD *)v184;
      *(unsigned char *)(v183 + 4) = v184[4];
      uint64_t v185 = v33[11];
      uint64_t v186 = v31 + v185;
      uint64_t v187 = &v32[v185];
      *(_DWORD *)uint64_t v186 = *(_DWORD *)v187;
      *(unsigned char *)(v186 + 4) = v187[4];
      goto LABEL_30;
    }
    if (v74)
    {
      uint64_t v134 = (void *)v210;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v210, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      uint64_t v135 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?;
    }
    else
    {
      ((void (*)(uint64_t, char *, uint64_t))v215)(v210, __srcb, v217);
      uint64_t v162 = *(int *)(v72 + 20);
      uint64_t v163 = v210 + v162;
      uint64_t v164 = &__srcb[v162];
      *(_DWORD *)uint64_t v163 = *(_DWORD *)v164;
      *(unsigned char *)(v163 + 4) = v164[4];
      uint64_t v165 = *(int *)(v72 + 24);
      uint64_t v166 = v210 + v165;
      __srcb += v165;
      uint64_t v167 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v208 = *(void *)(v167 - 8);
      uint64_t v210 = v166;
      uint64_t v168 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
      LODWORD(v166) = v168(v166, 1, v167);
      int v169 = v168((uint64_t)__srcb, 1, v167);
      if (v166)
      {
        if (!v169)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v216 + 32))(v210, __srcb, v217);
          uint64_t v188 = *(int *)(v167 + 20);
          uint64_t v189 = v210 + v188;
          char v190 = &__srcb[v188];
          *(_DWORD *)uint64_t v189 = *(_DWORD *)v190;
          *(unsigned char *)(v189 + 4) = v190[4];
          *(unsigned char *)(v210 + *(int *)(v167 + 24)) = __srcb[*(int *)(v167 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v208 + 56))(v210, 0, 1, v167);
          goto LABEL_52;
        }
        char v75 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?;
        goto LABEL_23;
      }
      if (!v169)
      {
        ((void (*)(uint64_t, char *, uint64_t))v215)(v210, __srcb, v217);
        uint64_t v191 = *(int *)(v167 + 20);
        uint64_t v192 = v210 + v191;
        uint64_t v193 = &__srcb[v191];
        *(_DWORD *)uint64_t v192 = *(_DWORD *)v193;
        *(unsigned char *)(v192 + 4) = v193[4];
        *(unsigned char *)(v210 + *(int *)(v167 + 24)) = __srcb[*(int *)(v167 + 24)];
        goto LABEL_52;
      }
      uint64_t v134 = (void *)v210;
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v210, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      uint64_t v135 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?;
    }
    size_t v76 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v135) - 8) + 64);
    uint64_t v77 = v134;
    goto LABEL_41;
  }
  if (v14)
  {
LABEL_7:
    size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?)
                                - 8)
                    + 64);
    size_t v25 = (void *)v8;
    uint64_t v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_30;
  }
  __src = a3;
  uint64_t v209 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
  v209(v8, v9, v217);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v17[4];
  uint64_t v18 = *(int *)(v10 + 24);
  uint64_t v19 = (char *)(v8 + v18);
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v22 = *((void *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v197 = v22;
    v209((uint64_t)v19, v20, v217);
    uint64_t v48 = v21[5];
    uint64_t v49 = &v19[v48];
    uint64_t v50 = &v20[v48];
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    uint64_t v51 = v21[6];
    __dst = v19;
    uint64_t v206 = &v19[v51];
    uint64_t v196 = v20;
    uint64_t v52 = &v20[v51];
    uint64_t v53 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v206, v52, *(void *)(*(void *)(v55 - 8) + 64));
      uint64_t v57 = v197;
      uint64_t v56 = __dst;
      uint64_t v58 = v196;
    }
    else
    {
      uint64_t v194 = v54;
      v209((uint64_t)v206, v52, v217);
      uint64_t v59 = *(int *)(v53 + 20);
      uint64_t v60 = &v206[v59];
      uint64_t v61 = &v52[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      uint64_t v195 = v53;
      uint64_t v62 = *(int *)(v53 + 24);
      uint64_t v63 = &v206[v62];
      uint64_t v64 = &v52[v62];
      uint64_t v65 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v202 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v64, 1, v65))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        v209((uint64_t)v63, v64, v217);
        uint64_t v87 = *(int *)(v65 + 20);
        uint64_t v88 = &v63[v87];
        char v89 = &v64[v87];
        *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
        v88[4] = v89[4];
        v63[*(int *)(v65 + 24)] = v64[*(int *)(v65 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v63, 0, 1, v65);
      }
      uint64_t v57 = v197;
      uint64_t v56 = __dst;
      uint64_t v58 = v196;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v206, 0, 1, v195);
    }
    uint64_t v90 = v21[7];
    uint64_t v91 = &v56[v90];
    uint64_t v92 = &v58[v90];
    *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
    v91[4] = v92[4];
    uint64_t v93 = v21[8];
    uint64_t v94 = &v56[v93];
    uint64_t v95 = &v58[v93];
    v94[4] = v95[4];
    *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
    uint64_t v96 = v21[9];
    int v97 = &v56[v96];
    uint64_t v98 = &v58[v96];
    *(_DWORD *)int v97 = *(_DWORD *)v98;
    v97[4] = v98[4];
    uint64_t v99 = v21[10];
    uint64_t v100 = &v56[v99];
    int v101 = &v58[v99];
    *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
    v100[4] = v101[4];
    uint64_t v102 = v21[11];
    char v103 = &v56[v102];
    uint64_t v104 = &v58[v102];
    *(_DWORD *)char v103 = *(_DWORD *)v104;
    v103[4] = v104[4];
    (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v56, 0, 1, v21);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  a3 = __src;
LABEL_30:
  uint64_t v105 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v105) = *(unsigned char *)(a2 + v105);
  uint64_t v106 = a3[8];
  char v107 = (char *)(a1 + v106);
  uint64_t v108 = (char *)(a2 + v106);
  int v109 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v110 = *((void *)v109 - 1);
  char v111 = *(uint64_t (**)(char *, uint64_t, int *))(v110 + 48);
  int v112 = v111(v107, 1, v109);
  int v113 = v111(v108, 1, v109);
  if (!v112)
  {
    if (!v113)
    {
      ((void (*)(char *, char *, uint64_t))v215)(v107, v108, v217);
      uint64_t v125 = v109[5];
      uint64_t v126 = &v107[v125];
      char v127 = &v108[v125];
      *(void *)uint64_t v126 = *(void *)v127;
      v126[8] = v127[8];
      uint64_t v128 = v109[6];
      char v129 = &v107[v128];
      uint64_t v130 = &v108[v128];
      *(void *)char v129 = *(void *)v130;
      v129[8] = v130[8];
      uint64_t v131 = v109[7];
      char v132 = &v107[v131];
      char v133 = &v108[v131];
      *(void *)char v132 = *(void *)v133;
      v132[8] = v133[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v107, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_35;
  }
  if (v113)
  {
LABEL_35:
    uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v107, v108, *(void *)(*(void *)(v123 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v107, v108, v217);
  uint64_t v114 = v109[5];
  uint64_t v115 = &v107[v114];
  uint64_t v116 = &v108[v114];
  *(void *)uint64_t v115 = *(void *)v116;
  v115[8] = v116[8];
  uint64_t v117 = v109[6];
  uint64_t v118 = &v107[v117];
  char v119 = &v108[v117];
  *(void *)uint64_t v118 = *(void *)v119;
  v118[8] = v119[8];
  uint64_t v120 = v109[7];
  uint64_t v121 = &v107[v120];
  uint64_t v122 = &v108[v120];
  *(void *)uint64_t v121 = *(void *)v122;
  v121[8] = v122[8];
  (*(void (**)(char *, void, uint64_t, int *))(v110 + 56))(v107, 0, 1, v109);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E63310);
}

uint64_t sub_246E63310(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 251)
  {
    if (*(unsigned __int8 *)(a1 + a3[7]) <= 4u) {
      int v14 = 4;
    }
    else {
      int v14 = *(unsigned __int8 *)(a1 + a3[7]);
    }
    unsigned int v15 = v14 - 4;
    if (*(unsigned __int8 *)(a1 + a3[7]) >= 4u) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[8];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E634B0);
}

uint64_t sub_246E634B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 251)
  {
    *(unsigned char *)(a1 + a4[7]) = a2 + 4;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[8];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    int v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_9);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_9);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_6);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_6);
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_SyncState._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SyncState._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_Measurement._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Measurement._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_SvInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvInfo._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t CLP_LogEntry_LogEntry.eventRecordTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  unint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
}

int *CLP_LogEntry_LogEntry.TimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_LogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t CLP_LogEntry_LogEntry.eventRecordTime.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined init with take of CLP_LogEntry_LogEntry.TimeStamp(a1, v3, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_LogEntry.eventRecordTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  return CLP_LogEntry_LogEntry.eventRecordTime.modify;
}

void CLP_LogEntry_LogEntry.eventRecordTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_LogEntry.hasEventRecordTime.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.clearEventRecordTime()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_LogEntry.privateDataCapture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  CLP_LogEntry_PrivateData_PrivateDataCapture.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
}

uint64_t outlined init with take of CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CLP_LogEntry_LogEntry.privateDataCapture.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined init with take of CLP_LogEntry_LogEntry.TimeStamp(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_LogEntry.privateDataCapture.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    CLP_LogEntry_PrivateData_PrivateDataCapture.init()((uint64_t)v10);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  return CLP_LogEntry_LogEntry.privateDataCapture.modify;
}

void CLP_LogEntry_LogEntry.privateDataCapture.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_LogEntry.eventRecordTime.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_LogEntry.TimeStamp(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v13, a3);
    outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(**(void **)a1 + v7, a3);
    outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

uint64_t outlined init with copy of CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL CLP_LogEntry_LogEntry.hasPrivateDataCapture.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.clearPrivateDataCapture()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

double CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasCfAbsoluteTimeS.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearCfAbsoluteTimeS()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

double CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasMachAbsoluteTimeS.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearMachAbsoluteTimeS()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

double CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasMachContinuousTimeS.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearMachContinuousTimeS()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasPipelinedMonotonicTimeNs.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearPipelinedMonotonicTimeNs()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_LogEntry.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  ExtensionFieldValueSet.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_LogEntry._eventRecordTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_LogEntry._eventRecordTime(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_LogEntry._privateDataCapture@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_LogEntry._eventRecordTime(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_LogEntry._eventRecordTime@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for ExtensibleMessage._protobuf_extensionFieldValues.getter in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for ExtensibleMessage._protobuf_extensionFieldValues.setter in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

void *CLP_LogEntry_LogEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_LogEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_LogEntry.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CLP_LogEntry_LogEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_LogEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_LogEntry.isInitialized.getter()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t CLP_LogEntry_LogEntry.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 4) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
        dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)();
        goto LABEL_12;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_11:
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_11;
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)();
    closure #2 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  }
  outlined init with take of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

Swift::Int CLP_LogEntry_LogEntry.hashValue.getter()
{
  return CLP_LogEntry_LogEntry.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_LogEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  ExtensionFieldValueSet.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.isInitialized.getter in conformance CLP_LogEntry_LogEntry()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_LogEntry()
{
  return CLP_LogEntry_LogEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_LogEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_LogEntry(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t *CLP_LogEntry_LogEntry.TimeStamp.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName;
}

uint64_t static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName.getter()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v0 = static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      case 4:
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_LogEntry.TimeStamp.hashValue.getter()
{
  return CLP_LogEntry_LogEntry.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

Swift::Int CLP_LogEntry_LogEntry.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  return CLP_LogEntry_LogEntry.TimeStamp.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  return CLP_LogEntry_LogEntry.TimeStamp.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_LogEntry.TimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t specialized static CLP_LogEntry_LogEntry.TimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_21;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_21;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  size_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (void *)(a1 + v27);
    char v29 = *(unsigned char *)(a1 + v27 + 8);
    uint64_t v30 = (void *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if (v29)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if (v31) {
        goto LABEL_21;
      }
    }
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_LogEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v2 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v71 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v70 = (char *)&v70 - v5;
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  size_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v75 = (char *)&v70 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v82 = *(void *)(v10 - 8);
  uint64_t v83 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PrivateDataCapture?, CLP_LogEntry_PrivateData_PrivateDataCapture?));
  MEMORY[0x270FA5388](v80);
  uint64_t v84 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v79 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v85 = (uint64_t)&v70 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v86 = (uint64_t)&v70 - v18;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_LogEntry.TimeStamp?, CLP_LogEntry_LogEntry.TimeStamp?));
  uint64_t v24 = v23 - 8;
  MEMORY[0x270FA5388](v23);
  int v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v30 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)&v70 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v70 - v34;
  uint64_t v36 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87 + *(int *)(v36 + 24), (uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v81 = v36;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88 + *(int *)(v36 + 24), (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v37 = (uint64_t)&v26[*(int *)(v24 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v35, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, v37, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v38((uint64_t)v26, 1, v19) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    if (v38(v37, 1, v19) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v39 = &demangling cache variable for type metadata for (CLP_LogEntry_LogEntry.TimeStamp?, CLP_LogEntry_LogEntry.TimeStamp?);
    uint64_t v40 = (uint64_t)v26;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v39);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if (v38(v37, 1, v19) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v30, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_LogEntry.TimeStamp(v37, (uint64_t)v22, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  char v41 = specialized static CLP_LogEntry_LogEntry.TimeStamp.== infix(_:_:)((uint64_t)v30, (uint64_t)v22);
  outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v22, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v30, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((v41 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v42 = v81;
  uint64_t v44 = v86;
  uint64_t v43 = v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87 + *(int *)(v81 + 28), v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v45 = v85;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88 + *(int *)(v42 + 28), v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v46 = v84;
  uint64_t v47 = v84 + *(int *)(v80 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v48 = v83;
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v49(v46, 1, v83) != 1)
  {
    uint64_t v50 = v79;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    if (v49(v47, 1, v48) != 1)
    {
      uint64_t v53 = v74;
      outlined init with take of CLP_LogEntry_LogEntry.TimeStamp(v47, v74, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_LogEntry.TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      outlined destroy of CLP_LogEntry_LogEntry.TimeStamp(v50, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      if ((v54 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp(v50, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if (v49(v47, 1, v48) != 1)
  {
LABEL_13:
    uint64_t v39 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PrivateDataCapture?, CLP_LogEntry_PrivateData_PrivateDataCapture?);
    uint64_t v40 = v46;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
LABEL_18:
  uint64_t v56 = v77;
  uint64_t v55 = v78;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v58 = v75;
  v57(v75, v43, v78);
  uint64_t v59 = v76;
  uint64_t v60 = v88;
  v57(v76, v88, v55);
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v56 + 8);
  v62(v59, v55);
  v62(v58, v55);
  if (v61)
  {
    uint64_t v63 = v43 + *(int *)(v42 + 20);
    uint64_t v65 = v72;
    uint64_t v64 = v73;
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    uint64_t v67 = v70;
    v66(v70, v63, v73);
    uint64_t v68 = v71;
    v66(v71, v60 + *(int *)(v42 + 20), v64);
    lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type ExtensionFieldValueSet and conformance ExtensionFieldValueSet, MEMORY[0x263F50588]);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v69 = *(void (**)(char *, uint64_t))(v65 + 8);
    v69(v68, v64);
    v69(v67, v64);
    return v51 & 1;
  }
LABEL_15:
  char v51 = 0;
  return v51 & 1;
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Message in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_LogEntry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ExtensionFieldValueSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v14, (uint64_t *)v15, v7);
      uint64_t v20 = v16[5];
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v16[6];
      uint64_t v24 = &v14[v23];
      uint64_t v25 = &v15[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      uint64_t v27 = &v14[v26];
      uint64_t v28 = &v15[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      uint64_t v29 = v16[8];
      uint64_t v30 = &v14[v29];
      uint64_t v31 = &v15[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
      uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
      swift_retain();
      v38(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_LogEntry(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v5(v8, v4);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    v5(v10, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    uint64_t v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    swift_retain();
    v36(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v64 + 24);
  v63(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v12, v13, v65);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      uint64_t v25 = &v13[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      uint64_t v27 = v14[7];
      uint64_t v28 = &v12[v27];
      uint64_t v29 = &v13[v27];
      char v30 = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v30;
      uint64_t v31 = v14[8];
      uint64_t v32 = &v12[v31];
      uint64_t v33 = &v13[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v34;
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v63)(v12, v13, v65);
  uint64_t v47 = v14[5];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  char v50 = v49[8];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v50;
  uint64_t v51 = v14[6];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  char v54 = v53[8];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v54;
  uint64_t v55 = v14[7];
  uint64_t v56 = &v12[v55];
  uint64_t v57 = &v13[v55];
  char v58 = v57[8];
  *(void *)uint64_t v56 = *(void *)v57;
  v56[8] = v58;
  uint64_t v59 = v14[8];
  uint64_t v60 = &v12[v59];
  char v61 = &v13[v59];
  char v62 = v61[8];
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v62;
LABEL_7:
  uint64_t v36 = a3[7];
  uint64_t v37 = (char *)(a1 + v36);
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v40 = *(void *)(v39 - 8);
  char v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      ((void (*)(char *, char *, uint64_t))v63)(v37, v38, v65);
      *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v43)
  {
LABEL_12:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v37, v38, *(void *)(*(void *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v37, v38, v65);
  *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
  uint64_t v44 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
  swift_retain();
  v44(v37, 0, 1, v39);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    char v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    char v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    uint64_t v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  char v54 = *(void (**)(uint64_t, uint64_t))(v55 + 40);
  v54(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v12, v13, v56);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v14[6];
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v13[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v14[7];
      char v26 = &v12[v25];
      uint64_t v27 = &v13[v25];
      *(void *)char v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v14[8];
      uint64_t v29 = &v12[v28];
      uint64_t v30 = &v13[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v54)(v12, v13, v56);
  uint64_t v42 = v14[5];
  int v43 = &v12[v42];
  uint64_t v44 = &v13[v42];
  *(void *)int v43 = *(void *)v44;
  v43[8] = v44[8];
  uint64_t v45 = v14[6];
  uint64_t v46 = &v12[v45];
  uint64_t v47 = &v13[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v47[8];
  uint64_t v48 = v14[7];
  uint64_t v49 = &v12[v48];
  char v50 = &v13[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v50[8];
  uint64_t v51 = v14[8];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v53[8];
LABEL_7:
  uint64_t v32 = a3[7];
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      ((void (*)(char *, char *, uint64_t))v54)(v33, v34, v56);
      *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_LogEntry.TimeStamp((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v33, v34, v56);
  *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E69C0C);
}

uint64_t sub_246E69C0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E69DC0);
}

uint64_t sub_246E69DC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for ExtensionFieldValueSet();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];
  return v19(v21, a2, a2, v20);
}

void type metadata completion function for CLP_LogEntry_LogEntry()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExtensionFieldValueSet();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E6A14C);
}

uint64_t sub_246E6A14C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E6A1CC);
}

uint64_t sub_246E6A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CLP_LogEntry_LogEntry.TimeStamp()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ALResultOptions.toPb()@<X0>(void *a1@<X8>)
{
  CLP_LogEntry_AONLoc_Request.ResultOptions.init()(a1);
  uint64_t v1 = ALResultOptions._maxBatchSize.getter();
  if ((v1 & 0x100000000) == 0) {
    CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.setter(v1);
  }
  uint64_t v2 = ALResultOptions._intervalSec.getter();
  if ((v2 & 0x100000000) == 0) {
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(*(float *)&v2);
  }
  uint64_t v3 = ALResultOptions._maxAgeSec.getter();
  if ((v3 & 0x100000000) == 0) {
    CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.setter(*(float *)&v3);
  }
  uint64_t started = ALResultOptions._startCfaTimeSec.getter();
  if ((v5 & 1) == 0) {
    CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.setter(*(double *)&started);
  }
  uint64_t result = ALResultOptions._endCfaTimeSec.getter();
  if ((v7 & 1) == 0) {
    return CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.setter(*(double *)&result);
  }
  return result;
}

uint64_t ALResultOptions.serializedData()()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  char v5 = (void *)((char *)v12 - v4);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CLP_LogEntry_AONLoc_Request.init()((uint64_t)v8);
  CLP_LogEntry_AONLoc_Request.type.setter(3);
  CLP_LogEntry_AONLoc_Request.ResultOptions.init()(v5);
  ALResultOptions.intervalSec.getter();
  CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(v9);
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0((uint64_t)v5, (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  CLP_LogEntry_AONLoc_Request.resultOptions.setter((uint64_t)v3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v10 = Message.serializedData(partial:)();
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v5, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return v10;
}

uint64_t ALResultOptions.init(pb:)(uint64_t a1)
{
  if (CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter())
  {
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter();
    ALResultOptions._intervalSec.setter();
  }
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t ALResultOptions.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = type metadata accessor for ALResultOptions();
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  uint64_t v17 = v19;
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0((uint64_t)v15, (uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  ALResultOptions.init()();
  if (CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter())
  {
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter();
    LOBYTE(v20) = 0;
    ALResultOptions._intervalSec.setter();
  }
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v23, v8, v6);
  outlined consume of Data._Representation(a1, a2);
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t ALWiFiScanSingleAccessPoint.Band.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20998];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209A0];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209A8];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209B0];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_WifiRfBand.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x263F209B0]) {
    return 0;
  }
  if (v4 == *MEMORY[0x263F20998]) {
    return 1;
  }
  if (v4 == *MEMORY[0x263F209A0]) {
    return 2;
  }
  if (v4 != *MEMORY[0x263F209A8])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t ALWiFiScanSingleAccessPoint.Mode.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209B8];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209C0];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209C8];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F209D0];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPointMode.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x263F209D0]) {
    return 0;
  }
  if (v4 == *MEMORY[0x263F209B8]) {
    return 1;
  }
  if (v4 == *MEMORY[0x263F209C0]) {
    return 2;
  }
  if (v4 != *MEMORY[0x263F209C8])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t ALWiFiScanSingleAccessPoint.toPb(pb:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v40 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v40);
  int v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v39 = (char *)&v37 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = MEMORY[0x24C549B90](v15);
  if ((v19 & 1) == 0) {
    uint64_t v18 = CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(v18);
  }
  uint64_t v20 = MEMORY[0x24C549BF0](v18);
  if (v21) {
    uint64_t v20 = CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.setter(v20, v21);
  }
  uint64_t v22 = MEMORY[0x24C549C50](v20);
  if ((v22 & 0x100000000) == 0) {
    uint64_t v22 = CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(v22);
  }
  uint64_t v23 = MEMORY[0x24C549C70](v22);
  if ((v23 & 0x100000000) == 0) {
    uint64_t v23 = CLP_LogEntry_PrivateData_WifiAccessPoint.channel.setter(v23);
  }
  uint64_t v24 = MEMORY[0x24C549C30](v23);
  if ((v24 & 0x100000000) == 0) {
    uint64_t v24 = CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.setter(*(float *)&v24);
  }
  uint64_t v25 = MEMORY[0x24C549C90](v24);
  if (v25 != 2) {
    uint64_t v25 = CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.setter(v25 & 1);
  }
  uint64_t v26 = MEMORY[0x24C549B50](v25);
  if ((v26 & 0x100000000) == 0) {
    uint64_t v26 = CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.setter(v26);
  }
  uint64_t v27 = MEMORY[0x24C549C10](v26);
  if (v27 != 2) {
    uint64_t v27 = CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.setter(v27 & 1);
  }
  MEMORY[0x24C549BB0](v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t v28 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v29 != *MEMORY[0x263F209B0])
  {
    if (v29 == *MEMORY[0x263F20998])
    {
      char v30 = 1;
      goto LABEL_27;
    }
    if (v29 == *MEMORY[0x263F209A0])
    {
      char v30 = 2;
      goto LABEL_27;
    }
    if (v29 == *MEMORY[0x263F209A8])
    {
      char v30 = 3;
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  char v30 = 0;
LABEL_27:
  CLP_LogEntry_PrivateData_WifiAccessPoint.band.setter(v30);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_28:
  MEMORY[0x24C549BD0](v28);
  uint64_t v31 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v2, 1, v40) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v2, &demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  }
  uint64_t v33 = v39;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v39, v2, v31);
  uint64_t v34 = v38;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v38, v33, v31);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v34, v31);
  if (v35 != *MEMORY[0x263F209D0])
  {
    if (v35 == *MEMORY[0x263F209B8])
    {
      char v36 = 1;
      goto LABEL_38;
    }
    if (v35 == *MEMORY[0x263F209C0])
    {
      char v36 = 2;
      goto LABEL_38;
    }
    if (v35 == *MEMORY[0x263F209C8])
    {
      char v36 = 3;
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v34, v31);
  }
  char v36 = 0;
LABEL_38:
  CLP_LogEntry_PrivateData_WifiAccessPoint.mode.setter(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v33, v31);
}

uint64_t ALWiFiScanSingleAccessPoint.toPb()@<X0>(uint64_t a1@<X8>)
{
  CLP_LogEntry_PrivateData_WifiAccessPoint.init()(a1);
  return ALWiFiScanSingleAccessPoint.toPb(pb:)();
}

uint64_t ALWiFiScanSingleAccessPoint.serializedData()()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v2);
  ALWiFiScanSingleAccessPoint.toPb(pb:)();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  uint64_t v3 = Message.serializedData(partial:)();
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v3;
}

uint64_t ALWiFiScanResult.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  ALWiFiScanResult.init(pb:)((uint64_t)v11, a3);
  outlined consume of Data._Representation(a1, a2);
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t ALWiFiScanResult.toPb()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v37 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ALTimeStamp();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = CLP_LogEntry_PrivateData_WifiScanResult.init()(a1);
  MEMORY[0x24C549730](v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v18 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    ALTimeStamp.toPb()((uint64_t)v9);
    CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter((uint64_t)v9);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v19 = MEMORY[0x24C549710](v18);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v22 = v36 + 16;
    uint64_t v21 = *(void *)(v36 + 16);
    uint64_t v23 = *(unsigned __int8 *)(v36 + 80);
    v34[1] = v19;
    uint64_t v24 = v19 + ((v23 + 32) & ~v23);
    uint64_t v35 = *(void *)(v36 + 72);
    uint64_t v36 = v21;
    uint64_t v25 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v26 = a1;
    uint64_t v27 = v38;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v36)(v6, v24, v27);
      CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v4);
      ALWiFiScanSingleAccessPoint.toPb(pb:)();
      unint64_t v28 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1) {
        unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      *(void *)(v28 + 16) = v30 + 1;
      outlined init with take of CLP_LogEntry_PrivateData_WifiAccessPoint((uint64_t)v4, v28+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v30, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      a1 = v26;
      *uint64_t v26 = v28;
      uint64_t v27 = v38;
      (*v25)(v6, v38);
      v24 += v35;
      --v20;
    }
    while (v20);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for ALProtobufUtil();
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v32 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(a1, v31, v32);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.init(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = CLP_LogEntry_PrivateData_WifiAssociationState.init()(a3);
  if ((a2 & 1) == 0)
  {
    CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(1);
    CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(a1);
    return CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter((uint64_t)v8);
  }
  return result;
}

uint64_t ALWiFiNotification.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v90 = (uint64_t)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v100 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v89 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v101 = (uint64_t)&v83 - v8;
  uint64_t v102 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v86 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x270FA5388](v88);
  char v103 = (unint64_t *)((char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanResult?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v92 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALWiFiScanResult();
  uint64_t v96 = *(void *)(v14 - 8);
  uint64_t v97 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v94 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v91 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v87 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v83 - v21;
  uint64_t v93 = type metadata accessor for ALTimeStamp();
  uint64_t v95 = *(void *)(v93 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v93);
  uint64_t v85 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v83 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  MEMORY[0x270FA5388](v27 - 8);
  unint64_t v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v83 - v35;
  uint64_t v98 = a1;
  uint64_t v37 = CLP_LogEntry_PrivateData_WifiNotification.init()(a1);
  uint64_t v99 = v1;
  MEMORY[0x24C549A80](v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    uint64_t v38 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v36, v29, v30);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, v36, v30);
    char v39 = specialized CLP_LogEntry_PrivateData_WifiNotificationType.init(_:)((uint64_t)v34);
    CLP_LogEntry_PrivateData_WifiNotification.type.setter(v39);
    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v36, v30);
  }
  MEMORY[0x24C549A20](v38);
  uint64_t v40 = v95;
  char v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  uint64_t v42 = v93;
  int v43 = v41(v22, 1, v93);
  uint64_t v44 = v103;
  uint64_t v45 = v96;
  uint64_t v46 = (uint64_t)v92;
  if (v43 == 1)
  {
    uint64_t v47 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v26, v22, v42);
    uint64_t v84 = v41;
    uint64_t v48 = v91;
    ALTimeStamp.toPb()(v91);
    char v41 = v84;
    CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.setter(v48);
    uint64_t v47 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v26, v42);
  }
  MEMORY[0x24C549A40](v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v97) == 1)
  {
    uint64_t v49 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for ALWiFiScanResult?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v94, v46, v97);
    uint64_t v50 = CLP_LogEntry_PrivateData_WifiScanResult.init()(v44);
    uint64_t v51 = (uint64_t)v87;
    MEMORY[0x24C549730](v50);
    uint64_t v52 = v93;
    if (v41((char *)v51, 1, v93) == 1)
    {
      uint64_t v53 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for ALTimeStamp?);
    }
    else
    {
      uint64_t v54 = v95;
      uint64_t v55 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v85, v51, v52);
      uint64_t v56 = v91;
      ALTimeStamp.toPb()(v91);
      CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter(v56);
      uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v52);
    }
    uint64_t v57 = MEMORY[0x24C549710](v53);
    uint64_t v58 = *(void *)(v57 + 16);
    uint64_t v59 = v96;
    if (v58)
    {
      uint64_t v60 = *(void (**)(char *, unint64_t, uint64_t))(v86 + 16);
      unint64_t v61 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
      uint64_t v95 = v57;
      unint64_t v62 = v57 + v61;
      uint64_t v63 = *(void *)(v86 + 72);
      uint64_t v64 = (void (**)(char *, uint64_t))(v86 + 8);
      uint64_t v66 = v101;
      uint64_t v65 = v102;
      do
      {
        v60(v10, v62, v65);
        CLP_LogEntry_PrivateData_WifiAccessPoint.init()(v66);
        ALWiFiScanSingleAccessPoint.toPb(pb:)();
        unint64_t v67 = *v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1, v67, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        unint64_t v69 = *(void *)(v67 + 16);
        unint64_t v68 = *(void *)(v67 + 24);
        if (v69 >= v68 >> 1) {
          unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1, v67, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        *(void *)(v67 + 16) = v69 + 1;
        uint64_t v70 = v67
            + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))
            + *(void *)(v100 + 72) * v69;
        uint64_t v66 = v101;
        outlined init with take of CLP_LogEntry_PrivateData_WifiAccessPoint(v101, v70, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        uint64_t v44 = v103;
        *char v103 = v67;
        uint64_t v65 = v102;
        (*v64)(v10, v102);
        v62 += v63;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      uint64_t v59 = v96;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for ALProtobufUtil();
    uint64_t v71 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v44, v88, v71);
    CLP_LogEntry_PrivateData_WifiNotification.scan.setter((uint64_t)v44);
    uint64_t v49 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v94, v97);
  }
  uint64_t v72 = MEMORY[0x24C549A60](v49);
  if ((v73 & 1) == 0)
  {
    uint64_t v74 = v72;
    uint64_t v75 = v90;
    CLP_LogEntry_PrivateData_WifiAssociationState.init()(v90);
    CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(1);
    uint64_t v76 = v89;
    CLP_LogEntry_PrivateData_WifiAccessPoint.init()(v89);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(v76);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter(v76);
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(v74);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(v76);
    CLP_LogEntry_PrivateData_WifiNotification.associatedState.setter(v75);
  }
  char v77 = ALWiFiNotification._simulated.getter();
  if (v77 != 2) {
    CLP_LogEntry_PrivateData_WifiNotification.simulated.setter(v77 & 1);
  }
  char v78 = ALWiFiNotification._available.getter();
  if (v78 != 2) {
    CLP_LogEntry_PrivateData_WifiNotification.available.setter(v78 & 1);
  }
  char isAp = ALWiFiNotification._isApAwake.getter();
  if (isAp != 2) {
    CLP_LogEntry_PrivateData_WifiNotification.isApAwake.setter(isAp & 1);
  }
  type metadata accessor for ALProtobufUtil();
  uint64_t v80 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v81 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v98, v80, v81);
}

uint64_t ALWiFiNotifications.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v40 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALWiFiNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v34 = (uint64_t)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (void *)((char *)v31 - v14);
  CLP_LogEntry_AONLoc_Indication.init()(a1);
  CLP_LogEntry_AONLoc_Indication.type.setter(4);
  CLP_LogEntry_AONLoc_WiFiIndication.init()(v15);
  uint64_t v35 = v1;
  uint64_t v16 = ALWiFiNotifications.results.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v32 = a1;
    uint64_t v33 = v2;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v18 = v8 + 16;
    uint64_t v20 = *(unsigned __int8 *)(v18 + 64);
    v31[1] = v16;
    uint64_t v21 = v16 + ((v20 + 32) & ~v20);
    uint64_t v36 = *(void *)(v18 + 56);
    uint64_t v37 = v19;
    uint64_t v38 = v18;
    char v39 = v6;
    do
    {
      v37(v10, v21, v7);
      ALWiFiNotification.toPb()((uint64_t)v6);
      unint64_t v22 = *v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiNotification>, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      unint64_t v24 = *(void *)(v22 + 16);
      unint64_t v23 = *(void *)(v22 + 24);
      if (v24 >= v23 >> 1) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiNotification>, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      *(void *)(v22 + 16) = v24 + 1;
      uint64_t v25 = v22
          + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
          + *(void *)(v40 + 72) * v24;
      uint64_t v6 = v39;
      outlined init with take of CLP_LogEntry_PrivateData_WifiAccessPoint((uint64_t)v39, v25, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *uint64_t v15 = v22;
      (*(void (**)(char *, uint64_t))(v18 - 8))(v10, v7);
      v21 += v36;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    a1 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v26 = ALWiFiNotifications.isLastBatch.getter();
  CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(v26 & 1);
  uint64_t v27 = v34;
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0((uint64_t)v15, v34, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  CLP_LogEntry_AONLoc_Indication.wifiIndication.setter(v27);
  type metadata accessor for ALProtobufUtil();
  uint64_t v28 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v29 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  ALFWiFiScanResultsRequester.query(options:callback:start:end:)(a1, v28, v29);
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t ALWiFiNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALWiFiNotifications();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.toPb()((uint64_t)v12);
  if (!v1)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v13 = Message.serializedData(partial:)();
    unint64_t v15 = v14;
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    corelog.getter((uint64_t)v9);
    uint64_t v17 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    outlined copy of Data._Representation(v13, v15);
    uint64_t v35 = v13;
    outlined copy of Data._Representation(v13, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v40 = v34;
      *(_DWORD *)uint64_t v21 = 136446466;
      os_log_t v33 = v18;
      int v32 = v20;
      uint64_t v22 = ALWiFiNotifications.description.getter();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v40);
      uint64_t v31 = &v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v24 = v35;
      outlined copy of Data._Representation(v35, v15);
      uint64_t v25 = Data.description.getter();
      unint64_t v27 = v26;
      outlined consume of Data._Representation(v24, v15);
      uint64_t v28 = v25;
      uint64_t v0 = v24;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v24, v15);
      outlined consume of Data._Representation(v24, v15);
      os_log_t v29 = v33;
      _os_log_impl(&dword_246DB2000, v33, (os_log_type_t)v32, "#WiFi,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v21, 0x16u);
      uint64_t v30 = v34;
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v30, -1, -1);
      MEMORY[0x24C54A990](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      uint64_t v0 = v35;
      outlined consume of Data._Representation(v35, v15);
      outlined consume of Data._Representation(v0, v15);
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  }
  return v0;
}

uint64_t static ALWiFiNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0 = type metadata accessor for ALWiFiNotifications();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALWiFiNotifications.init(_results:_isLastBatch:)();
  uint64_t v4 = ALWiFiNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t specialized CLP_LogEntry_PrivateData_WifiNotificationType.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x263F20968]) {
    return 0;
  }
  if (v4 == *MEMORY[0x263F20970]) {
    return 1;
  }
  if (v4 == *MEMORY[0x263F20960]) {
    return 2;
  }
  if (v4 == *MEMORY[0x263F20988]) {
    return 3;
  }
  if (v4 == *MEMORY[0x263F20958]) {
    return 4;
  }
  if (v4 == *MEMORY[0x263F20980]) {
    return 5;
  }
  if (v4 == *MEMORY[0x263F20928]) {
    return 6;
  }
  if (v4 == *MEMORY[0x263F20918]) {
    return 7;
  }
  if (v4 == *MEMORY[0x263F20950]) {
    return 8;
  }
  if (v4 == *MEMORY[0x263F20938]) {
    return 9;
  }
  if (v4 == *MEMORY[0x263F20930]) {
    return 10;
  }
  if (v4 == *MEMORY[0x263F20940]) {
    return 11;
  }
  if (v4 == *MEMORY[0x263F20948]) {
    return 12;
  }
  if (v4 == *MEMORY[0x263F20978]) {
    return 13;
  }
  if (v4 != *MEMORY[0x263F20920])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 14;
}

uint64_t outlined init with take of CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t ALTimeStamp.toPb()@<X0>(uint64_t a1@<X8>)
{
  CLP_LogEntry_PrivateData_TimeStamp.init()(a1);
  uint64_t v1 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v2 & 1) == 0) {
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(*(double *)&v1);
  }
  uint64_t v3 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v4 & 1) == 0) {
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(*(double *)&v3);
  }
  uint64_t result = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v6 & 1) == 0) {
    return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(*(double *)&result);
  }
  return result;
}

uint64_t ALTimeStamp.serializedData()()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v14 - v4;
  CLP_LogEntry_PrivateData_TimeStamp.init()((uint64_t)v3);
  uint64_t v6 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v7 & 1) == 0) {
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(*(double *)&v6);
  }
  uint64_t v8 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v9 & 1) == 0) {
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(*(double *)&v8);
  }
  uint64_t v10 = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v11 & 1) == 0) {
    CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(*(double *)&v10);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v3, (uint64_t)v5);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp();
  uint64_t v12 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5);
  return v12;
}

uint64_t outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp);
  }
  return result;
}

uint64_t static ALProtobufUtil.stringfyJson<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Logger();
  MEMORY[0x270FA5388](v0);
  uint64_t v1 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for JSONEncodingOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONEncodingOptions.init()();
  uint64_t v6 = Message.jsonUTF8Data(options:)();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.init(data:encoding:)();
  uint64_t v11 = v10;
  outlined consume of Data._Representation(v6, v8);
  if (v11) {
    return v9;
  }
  else {
    return 0x3E6C696E3CLL;
  }
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (uint64_t)&v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for JSONEncodingOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ALXPCDataService(a1, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
  swift_dynamicCast();
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  uint64_t v13 = Message.jsonUTF8Data(options:)();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    outlined destroy of CLP_LogEntry_LogEntry((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  else
  {
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter();
    uint64_t v5 = String.init(data:encoding:)();
    uint64_t v18 = v17;
    outlined consume of Data._Representation(v15, v16);
    if (!v18) {
      uint64_t v5 = 0x3E6C696E3CLL;
    }
    outlined destroy of CLP_LogEntry_LogEntry((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return v5;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(serializedData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for JSONEncodingOptions();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  Message.init(serializedData:extensions:partial:options:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_247108640;
    CLP_LogEntry_LogEntry.eventRecordTime.getter((uint64_t)v10);
    double v16 = CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.getter();
    outlined destroy of CLP_LogEntry_LogEntry((uint64_t)v10, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    uint64_t v17 = MEMORY[0x263F8D5B8];
    *(void *)(v15 + 56) = MEMORY[0x263F8D538];
    *(void *)(v15 + 64) = v17;
    *(double *)(v15 + 32) = v16;
    BOOL v18 = CLP_LogEntry_LogEntry.hasPrivateDataCapture.getter();
    uint64_t v19 = MEMORY[0x263F8D530];
    *(void *)(v15 + 96) = MEMORY[0x263F8D4F8];
    *(void *)(v15 + 104) = v19;
    *(unsigned char *)(v15 + 72) = v18;
    type metadata accessor for OS_os_log();
    int v20 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    uint64_t v21 = v30;
    JSONEncodingOptions.init()();
    uint64_t v23 = Message.jsonUTF8Data(options:)();
    unint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v6);
    static String.Encoding.utf8.getter();
    uint64_t v26 = String.init(data:encoding:)();
    uint64_t v28 = v27;
    outlined consume of Data._Representation(v23, v25);
    if (v28) {
      a1 = v26;
    }
    else {
      a1 = 0x3E6C696E3CLL;
    }
    outlined destroy of CLP_LogEntry_LogEntry((uint64_t)v14, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return a1;
}

uint64_t static ALProtobufUtil.serialized(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_UInt32Value();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C549D10](v4);
  MEMORY[0x24C549D00](a1);
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type Google_Protobuf_UInt32Value and conformance Google_Protobuf_UInt32Value, MEMORY[0x263F50340]);
  uint64_t v7 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t static ALProtobufUtil.serialized(_:)()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_DoubleValue();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C549CE0](v2);
  Google_Protobuf_DoubleValue.value.setter();
  lazy protocol witness table accessor for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry(&lazy protocol witness table cache variable for type Google_Protobuf_DoubleValue and conformance Google_Protobuf_DoubleValue, MEMORY[0x263F50308]);
  uint64_t v5 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

uint64_t outlined destroy of CLP_LogEntry_LogEntry(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t type metadata accessor for ALProtobufUtil()
{
  return self;
}

uint64_t method lookup function for ALProtobufUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALProtobufUtil);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  Proto_Gpsd_LogEntry.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, type metadata accessor for Proto_Gpsd_LogEntry, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass);
}

void (*CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_LogEntry.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  }
  else
  {
    outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify;
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()()
{
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  CLP_LogEntry_AONLoc_LogEntry.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v9 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v16 = (char *)&v29 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v18 = swift_allocObject();
    uint64_t v29 = v9;
    uint64_t v19 = a1;
    int v20 = a3;
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    uint64_t v23 = v18;
    uint64_t v24 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v24);
    *(void *)(v5 + v17) = v23;
    a5 = v22;
    a4 = v21;
    a3 = v20;
    a1 = v19;
    uint64_t v9 = v29;
    swift_release();
  }
  uint64_t v25 = *(void *)(v5 + v17);
  outlined init with take of Proto_Gpsd_LogEntry(a1, (uint64_t)v16, a3);
  uint64_t v26 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v16, (uint64_t)v14, v9);
  uint64_t v27 = v25 + *a5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v14, v27, v9);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    CLP_LogEntry_AONLoc_LogEntry.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  }
  else
  {
    outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  return CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify;
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  size_t v8 = *(void **)a1;
  uint64_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void **)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of Proto_Gpsd_LogEntry((uint64_t)v10, (uint64_t)v9, a4);
    CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter((uint64_t)v9, a3, a4, a4, a5);
    outlined destroy of Proto_Gpsd_LogEntry((uint64_t)v10, a4);
  }
  else
  {
    CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter((uint64_t)v10, a3, a4, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasAonlocLogEntry.getter()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PrivateDataCapture.clearAonlocLogEntry()()
{
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v12);
    *(void *)(v3 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v3 + v10);
  uint64_t v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_PrivateDataCapture._storage()
{
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  return swift_retain();
}

void *CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap.unsafeMutableAddressor()
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v13, (uint64_t)v8, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  swift_endAccess();
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v11, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  swift_endAccess();
  return v1;
}

uint64_t outlined init with take of Proto_Gpsd_LogEntry(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Proto_Gpsd_LogEntry(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Proto_Gpsd_LogEntry(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v4);
    *(void *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v6) {
        return swift_release();
      }
      if (v5 == 1018) {
        break;
      }
      if (v5 == 1004)
      {
        swift_beginAccess();
        type metadata accessor for Proto_Gpsd_LogEntry(0);
        uint64_t v8 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry;
        uint64_t v9 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry;
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry;
    uint64_t v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry;
LABEL_7:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(v9, v8);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20));
  uint64_t v9 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(v9, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  }
  outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Proto_Gpsd_LogEntry((uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  }
  outlined init with take of Proto_Gpsd_LogEntry((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Proto_Gpsd_LogEntry((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v43 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_LogEntry?, CLP_LogEntry_AONLoc_LogEntry?));
  MEMORY[0x270FA5388](v46);
  uint64_t v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v44 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (uint64_t)&v43 - v9;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_LogEntry?, Proto_Gpsd_LogEntry?));
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  int v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, (uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v24 = v51;
  uint64_t v25 = v51
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v16, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v26, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v27((uint64_t)v16, 1, v10) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
    if (v27(v26, 1, v10) != 1)
    {
      uint64_t v29 = v26;
      uint64_t v30 = v45;
      outlined init with take of Proto_Gpsd_LogEntry(v29, v45, type metadata accessor for Proto_Gpsd_LogEntry);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
      swift_retain();
      swift_retain();
      uint64_t v28 = a1;
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Proto_Gpsd_LogEntry(v30, type metadata accessor for Proto_Gpsd_LogEntry);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
      outlined destroy of Proto_Gpsd_LogEntry((uint64_t)v20, type metadata accessor for Proto_Gpsd_LogEntry);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
      if (v31) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
    outlined destroy of Proto_Gpsd_LogEntry((uint64_t)v20, type metadata accessor for Proto_Gpsd_LogEntry);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for (Proto_Gpsd_LogEntry?, Proto_Gpsd_LogEntry?));
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  uint64_t v28 = a1;
  if (v27(v26, 1, v10) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
LABEL_9:
  uint64_t v32 = v28
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  uint64_t v33 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v32, v47, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v34 = v24
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  uint64_t v35 = v50;
  uint64_t v36 = v50 + *(int *)(v46 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, v50, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v36, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  uint64_t v37 = v49;
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v38(v35, 1, v49) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
    if (v38(v36, 1, v37) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v39 = v44;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, v44, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if (v38(v36, 1, v37) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
    outlined destroy of Proto_Gpsd_LogEntry(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_LogEntry?, CLP_LogEntry_AONLoc_LogEntry?));
    return 0;
  }
  uint64_t v41 = v43;
  outlined init with take of Proto_Gpsd_LogEntry(v36, v43, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of Proto_Gpsd_LogEntry(v41, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  outlined destroy of Proto_Gpsd_LogEntry(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  return (v42 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_PrivateDataCapture.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PrivateDataCapture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t specialized static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        BOOL v14 = closure #1 in static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246E70B04);
}

uint64_t sub_246E70B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246E70BD8);
}

uint64_t sub_246E70BD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass()
{
  type metadata accessor for Proto_Gpsd_LogEntry?(319, &lazy cache variable for type metadata for Proto_Gpsd_LogEntry?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Proto_Gpsd_LogEntry?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Proto_Gpsd_LogEntry?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_LocationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType(uint64_t a1, uint64_t a2)
{
  unint64_t fixed = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
  return MEMORY[0x270F44AF0](a1, a2, fixed);
}

void *static CLP_LogEntry_PrivateData_BatchedLocationFixType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatchedLocationFixType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_GnssModeOfOperation.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssModeOfOperation.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_BatchMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatchMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_OperatingMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_OperatingMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_OperatingMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_OperatingMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_OperatingMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_PipelineOperatingMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PipelineOperatingMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t CLP_LogEntry_PrivateData_DominantMotionModeType.rawValue.getter(char a1)
{
  return qword_24711E0C0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(char *a1, char *a2)
{
  return qword_24711E0C0[*a1] == qword_24711E0C0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return qword_24711E0C0[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(void *a1@<X8>)
{
  *a1 = qword_24711E0C0[*v1];
}

void *static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityType.rawValue.getter(char a1)
{
  return qword_24711E300[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_ReachabilityType(char *a1, char *a2)
{
  return qword_24711E300[*a1] == qword_24711E300[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReachabilityType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType()
{
  return qword_24711E300[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType(void *a1@<X8>)
{
  *a1 = qword_24711E300[*v1];
}

void *static CLP_LogEntry_PrivateData_ReachabilityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ReachabilityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatteryChargerType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_BatteryChargerType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatteryChargerType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SensorFusionMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_SensorFusionMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SensorFusionMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_WifiAccessPointMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiAccessPointMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiRfBand(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_WifiRfBand.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiRfBand.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiScanType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiScanType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiNotificationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiNotificationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_LocationServicesEnabled.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationServicesEnabled.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DataAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_DataAvailability.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DataAvailability.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DataAvailability(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DataAvailability;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_IndoorOutdoorType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IndoorOutdoorType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearCfAbsoluteTimeS()()
{
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearMachAbsoluteTimeS()()
{
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearMachContinuousTimeS()()
{
}

int *CLP_LogEntry_PrivateData_TimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TimeStamp.init()(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

void CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearApplicableTime()()
{
}

float CLP_LogEntry_PrivateData_AccelSample.xMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.xMps2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearXMps2()()
{
}

float CLP_LogEntry_PrivateData_AccelSample.yMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.yMps2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearYMps2()()
{
}

float CLP_LogEntry_PrivateData_AccelSample.zMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.zMps2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearZMps2()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Accel.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Accel(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Accel.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t (*CLP_LogEntry_PrivateData_Accel.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Accel.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GyroSample.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.clearApplicableTime()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

float CLP_LogEntry_PrivateData_GyroSample.xRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.xRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.xRadps.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasXRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearXRadps()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.clearXMps2()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_GyroSample.yRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.yRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.yRadps.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasYRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearYRadps()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.clearYMps2()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_GyroSample.zRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.zRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.zRadps.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasZRadps.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearZRadps()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.clearZMps2()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = (int *)a1(0);
  uint64_t v5 = a2 + v4[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a2 + v4[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v4[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v4[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Gyro.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Gyro.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Accel.clearEventReceiptTime()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CLP_LogEntry_PrivateData_Gyro.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t v3 = a1(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_BaroSample.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearApplicableTime()()
{
}

float CLP_LogEntry_PrivateData_BaroSample.pressure.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.pressure.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BaroSample.pressure.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasPressure.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearPressure()()
{
}

float CLP_LogEntry_PrivateData_BaroSample.temperature.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.temperature.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BaroSample.temperature.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasTemperature.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearTemperature()()
{
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Baro.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Baro.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Baro(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Baro.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Baro.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Baro.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t (*CLP_LogEntry_PrivateData_Baro.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Baro.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

double CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientLocationCoordinate.hasLatitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientLocationCoordinate.clearLatitude()()
{
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.clearCfAbsoluteTimeS()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientLocationCoordinate.hasLongitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientLocationCoordinate.clearLongitude()()
{
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.clearMachAbsoluteTimeS()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.suitability.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.suitability.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSuitability.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSuitability()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 16) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.altitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

double CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  double result = *(double *)v3;
  if (*(unsigned char *)(v3 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.altitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a3(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v14 = a5;
  *(unsigned char *)(v14 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 88);
    uint64_t v13 = *(void *)(v9 + 80);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(void *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 8) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearAltitude()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    a3(v11);
    swift_release();
    *(void *)(v8 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearVerticalAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.speed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.speed.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.speed.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.speed.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSpeed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSpeed()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSpeedAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSpeedAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.course.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.course.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.course.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.course.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.course.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCourse()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCourseAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearTimestamp()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocation.lifespan.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.lifespan.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasLifespan.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearLifespan()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v1 == 14) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.type.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 14) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.type.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.type.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasType.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  return *v1 != 14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  *uint64_t v5 = 14;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawCourse()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.floor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned char *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (v3[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.floor.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(int a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a5;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v14 = a1;
  *(unsigned char *)(v14 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.floor.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.floor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.floor.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFloor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearFloor()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    a3(v11);
    swift_release();
    *(void *)(v8 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.integrity.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.integrity.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.integrity.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.setter(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = (unsigned char *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v14 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocation.type.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *uint64_t v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasIntegrity.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasIntegrity.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearIntegrity()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  *uint64_t v5 = 5;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearReferenceFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 3) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawReferenceFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSignalEnvironmentType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  *uint64_t v5 = 8;
}

double CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasEllipsoidalAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearEllipsoidalAltitude()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearFromSimulationController()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.rawValue.getter(char a1)
{
  return qword_24711E078[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(char *a1, char *a2)
{
  return qword_24711E078[*a1] == qword_24711E078[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return qword_24711E078[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(void *a1@<X8>)
{
  *a1 = qword_24711E078[*v1];
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.rawValue.getter(char a1)
{
  return qword_24711E098[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(char *a1, char *a2)
{
  return qword_24711E098[*a1] == qword_24711E098[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return qword_24711E098[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(void *a1@<X8>)
{
  *a1 = qword_24711E098[*v1];
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DaemonLocation._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

double CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasRawUnmodifiedCourse.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearRawUnmodifiedCourse()()
{
}

double CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasRawUnmodifiedCourseUnc.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearRawUnmodifiedCourseUnc()()
{
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.isStatic.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasIsStatic.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearIsStatic()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.isMounted.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasIsMounted.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearIsMounted()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_MapMatcherData.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_PressureSample.value.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.value.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PressureSample.value.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PressureSample.hasValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PressureSample.clearValue()()
{
}

double CLP_LogEntry_PrivateData_PressureSample.std.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.std.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PressureSample.std.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PressureSample.hasStd.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PressureSample.clearStd()()
{
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasConstellation.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearConstellation()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasSatID.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearSatID()()
{
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasElevationDeg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearElevationDeg()()
{
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasAzimuthDeg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearAzimuthDeg()()
{
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL1Cn0()()
{
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL5Cn0()()
{
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasIsTracked.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearIsTracked()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasIsPhaseTracked.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearIsPhaseTracked()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) = 2;
}

int *CLP_LogEntry_PrivateData_ClientSatelliteInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(a1 + result[5]) = 7;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_ClientSatelliteInfo._constellation()
{
  return 7;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearOdometer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(unsigned char *)(v7 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearDeltaDistance()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 48) = a1;
  *(unsigned char *)(v7 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 48);
  if (*(unsigned char *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearDeltaDistanceAccuracy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 48) = 0;
  *(unsigned char *)(v5 + 56) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 64) = a1;
  *(unsigned char *)(v7 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 64);
  if (*(unsigned char *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 64) = v4;
  *(unsigned char *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearTimestampGps()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 80);
  if (*(unsigned char *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 80) = a1;
  *(unsigned char *)(v7 + 88) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 80);
  if (*(unsigned char *)(v5 + 88)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 80) = v4;
  *(unsigned char *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMachTime.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMachTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 80) = 0;
  *(unsigned char *)(v5 + 88) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(unsigned char *)(v7 + 96) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 92);
  if (*(unsigned char *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(unsigned char *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMaj()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(unsigned char *)(v5 + 96) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(unsigned char *)(v7 + 104) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 100);
  if (*(unsigned char *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(unsigned char *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMin()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(unsigned char *)(v5 + 104) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(unsigned char *)(v7 + 112) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 108);
  if (*(unsigned char *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(unsigned char *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMajAz()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(unsigned char *)(v5 + 112) = 1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 113) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 113) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 113) & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 113) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsFitnessMatch.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 113) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsFitnessMatch()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 113) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 114) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 114);
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 114) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchQuality.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 114) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchQuality()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 114) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchCourse()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchFormOfWay.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchFormOfWay()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchRoadClass.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchRoadClass()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = (unsigned char *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v14 = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *uint64_t v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchShifted.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchShifted()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPressure.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPressure()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearUndulationModel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  *uint64_t v5 = 4;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(float a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearUndulation()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSpecialCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSpecialCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSpecialHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSpecialHorizontalAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMachContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMachContinuousTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOriginDevice.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearOriginDevice()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsMatcherPropagatedCoordinates.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsMatcherPropagatedCoordinates()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMapMatcherData.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMapMatcherData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSlope.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSlope()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMaxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMaxAbsSlope()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGroundAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGroundAltitude()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGroundAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGroundAltitudeUncertainty()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSmoothedGpsAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSmoothedGpsAltitude()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSmoothedGpsAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSmoothedGpsAltitudeUncertainty()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsSimulatedOrSpoofed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsSimulatedOrSpoofed()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawHorizontalAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawCourseAccuracy()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsCoordinateFused.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsCoordinateFused()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedHorizontalAccuracy()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedReferenceFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCourse.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCourse()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCourseAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedWorstCaseError.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedWorstCaseError()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPreFusingAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPreFusingAltitude()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPreFusingVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPreFusingVerticalAccuracy()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsCoordinateFusedWithVl.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsCoordinateFusedWithVl()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedAltitude()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedVerticalAccuracy()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = (void *)(*(void *)(v2 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  *uint64_t v7 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      uint64_t v6 = swift_allocObject();
      uint64_t v7 = swift_retain();
      specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
      swift_release();
      *(void *)(v5 + v4) = v6;
      swift_release();
    }
    uint64_t v8 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *uint64_t v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 88);
      uint64_t v10 = *(void *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = swift_retain();
      specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
      swift_release();
      *(void *)(v10 + v9) = v11;
      swift_release();
    }
    uint64_t v13 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *uint64_t v13 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGnssContent.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGnssContent()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a1 + v7[8]) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
}

int *CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[8]) = 4;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v9[v6[8]] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawAltitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawAltitude()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextState()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextStateProbabilityIndoor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextStateProbabilityIndoor()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextStateProbabilityOutdoor()()
{
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 4) {
    return 0;
  }
  else {
    return *v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMapMatcherType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMapMatcherType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  *uint64_t v5 = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsRouteHintsTriggeredMapMatching.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsRouteHintsTriggeredMapMatching()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasLoiLocationSourceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearLoiLocationSourceAccuracy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.integrity.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.integrity.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 5) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasBatchedLocationFixType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasIntegrity.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasIntegrity.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearBatchedLocationFixType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  *uint64_t v5 = 5;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsWifiFixWithAssociatedAp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsWifiFixWithAssociatedAp()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType(uint64_t a1, uint64_t a2)
{
  unint64_t matched = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
  return MEMORY[0x270F44AF0](a1, a2, matched);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.rawValue.getter(unsigned __int8 a1)
{
  return a1 - 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return *v0 - 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType(void *a1@<X8>)
{
  *a1 = *v1 - 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearAltitude()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearVerticalAccuracy()()
{
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasUndulation.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearUndulation()()
{
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.clearMachContinuousTimeS()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasUndulationModel.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0)
                           + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearUndulationModel()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DaemonLocationPrivate._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.locationType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20));
  if (v1 == 14) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.locationType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TechnologyStatus.locationType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 14) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TechnologyStatus.hasLocationType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) != 14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TechnologyStatus.clearLocationType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) = 14;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.getter()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t (*CLP_LogEntry_PrivateData_TechnologyStatus.active.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TechnologyStatus.hasActive.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TechnologyStatus.clearActive()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, 14, 2, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TechnologyStatus._locationType()
{
  return 14;
}

double CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearTimestamp()()
{
}

double CLP_LogEntry_PrivateData_VehicleSpeed.speed.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.speed.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasSpeed.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearSpeed()()
{
}

double CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasMachContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearMachContinuousTime()()
{
}

double CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearMachAbsoluteTime()()
{
}

int *CLP_LogEntry_PrivateData_VehicleSpeed.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.init()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

double CLP_LogEntry_PrivateData_VehicleHeading.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleHeading.timestamp.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleHeading.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleHeading.clearTimestamp()()
{
}

double CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleHeading.hasTrueHeading.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleHeading.clearTrueHeading()()
{
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

double CLP_LogEntry_PrivateData_XtraFileAvailable.when.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.when.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_XtraFileAvailable.when.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhen.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhen()()
{
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t (*CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()()
{
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(a1 + *(int *)(result + 24));
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearTimestamp()()
{
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasSpeed.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearSpeed()()
{
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearUncertainty()()
{
}

int *CLP_LogEntry_PrivateData_LocationDerivedSpeed.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TimeStamp.init()(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

int *CLP_LogEntry_PrivateData_TimeStamp.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearEventReceiptTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_Location.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_Location.client.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_Location.client.modify;
}

void CLP_LogEntry_PrivateData_Location.client.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_Location.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
}

uint64_t CLP_LogEntry_PrivateData_Location.location.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.location.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  return CLP_LogEntry_PrivateData_Location.location.modify;
}

void CLP_LogEntry_PrivateData_Location.location.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.locationPrivate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
}

uint64_t CLP_LogEntry_PrivateData_Location.locationPrivate.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.locationPrivate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  return CLP_LogEntry_PrivateData_Location.locationPrivate.modify;
}

void CLP_LogEntry_PrivateData_Location.locationPrivate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocationPrivate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocationPrivate()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 14;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
}

uint64_t CLP_LogEntry_PrivateData_Location.status.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.status.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 14;
    v9[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  return CLP_LogEntry_PrivateData_Location.status.modify;
}

void CLP_LogEntry_PrivateData_Location.status.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasStatus.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearStatus()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.active.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t CLP_LogEntry_PrivateData_Location.active.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

void (*CLP_LogEntry_PrivateData_Location.active.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_Location.active.modify;
}

void CLP_LogEntry_PrivateData_Location.active.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasActive.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearActive()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  *uint64_t v4 = 2;
}

double CLP_LogEntry_PrivateData_Location.odometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t CLP_LogEntry_PrivateData_Location.odometer.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, a1);
}

void (*CLP_LogEntry_PrivateData_Location.odometer.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_Location.odometer.modify;
}

void CLP_LogEntry_PrivateData_Location.odometer.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasOdometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearOdometer()()
{
}

uint64_t CLP_LogEntry_PrivateData_Location.signalQuality.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t CLP_LogEntry_PrivateData_Location.signalQuality.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.signalQuality.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

void (*CLP_LogEntry_PrivateData_Location.signalQuality.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Location.signalQuality.modify;
}

void CLP_LogEntry_PrivateData_Location.signalQuality.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasSignalQuality.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearSignalQuality()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  *uint64_t v4 = 3;
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleSpeed.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  return CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify;
}

void CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasVehicleSpeed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearVehicleSpeed()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleHeading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleHeading.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.vehicleHeading.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  return CLP_LogEntry_PrivateData_Location.vehicleHeading.modify;
}

void CLP_LogEntry_PrivateData_Location.vehicleHeading.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasVehicleHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearVehicleHeading()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.xtraFileAvailable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = (void *)(a1 + *(int *)(v7 + 24));
  *uint64_t v9 = 0;
  v9[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
}

uint64_t CLP_LogEntry_PrivateData_Location.xtraFileAvailable.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  return CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify;
}

void CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasXtraFileAvailable.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearXtraFileAvailable()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.motionDetected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t CLP_LogEntry_PrivateData_Location.motionDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.signalQuality.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t CLP_LogEntry_PrivateData_Location.signalQuality.setter(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v13 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_Location.motionDetected.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Location.motionDetected.modify;
}

void CLP_LogEntry_PrivateData_Location.motionDetected.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_Location.signalQuality.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *uint64_t v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_Location.hasMotionDetected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearMotionDetected()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  *uint64_t v4 = 3;
}

uint64_t CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
}

uint64_t CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  return CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify;
}

void CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocationDerivedSpeed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocationDerivedSpeed()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_Location.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_Location, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Location._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_Location.SignalQualityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Location.SignalQualityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

void *static CLP_LogEntry_PrivateData_Location.MotionDetectedType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Location.MotionDetectedType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t (*CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return UnknownStorage.init()();
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasGnssModeOfOperation.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearGnssModeOfOperation()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.getter()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasActiveGnssSession.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearActiveGnssSession()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0)
                                   + 28));
  if (v1 == 5) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 1;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasRhythmicMode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearRhythmicMode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasCurrentModesOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearCurrentModesOfOperation()()
{
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasHasSubscribedRhythmicClient_p.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearHasSubscribedRhythmicClient_p()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(a1 + result[5]) = 3;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 5;
  uint64_t v3 = a1 + result[8];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicStreamingControl.hasAllowStreaming.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicStreamingControl.clearAllowStreaming()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.type.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 72) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.type.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.type.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.type.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.type.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearType()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 16) = 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.confidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 17) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 17);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.confidence.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 17) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.confidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.confidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.confidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 17);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasConfidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 17) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearConfidence()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 17) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedState.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 18) == 3) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 18);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedState.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 18) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 18);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 18);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasMountedState.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 18) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearMountedState()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 18) = 3;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 19) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 19);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 19) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 19);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 19);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasMountedConfidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 19) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearMountedConfidence()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 19) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isStanding.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 20) & 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isStanding.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 20) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 20) & 1;
  return CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 20) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasIsStanding.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 20) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearIsStanding()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 20) = 2;
}

float CLP_LogEntry_PrivateData_MotionActivity.tilt.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 24);
  if (*(unsigned char *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.tilt.setter(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 28) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.tilt.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 24);
  if (*(unsigned char *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.tilt.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.tilt.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(unsigned char *)(v10 + 28) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTilt.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 28) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTilt()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 28) = 1;
}

double CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 32);
  if (*(unsigned char *)(v2 + 40)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 32) = a1;
  *(unsigned char *)(v6 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTimestampDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 40) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTimestampDeprecated()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 41) & 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 41) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 41) & 1;
  return CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 41) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasIsVehicleConnected.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 41) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearIsVehicleConnected()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 41) = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.exitState.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 42) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 42);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.exitState.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 42) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.exitState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 42);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.exitState.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.exitState.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 42);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasExitState.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 42) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearExitState()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 42) = 4;
}

double CLP_LogEntry_PrivateData_MotionActivity.estExitTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 48);
  if (*(unsigned char *)(v2 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.estExitTime.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 48) = a1;
  *(unsigned char *)(v6 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 48);
  if (*(unsigned char *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasEstExitTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 56) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearEstExitTime()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 56) = 1;
}

double CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 64);
  if (*(unsigned char *)(v2 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 64) = a1;
  *(unsigned char *)(v6 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 64);
  if (*(unsigned char *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 64) = v4;
  *(unsigned char *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasStartTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 72) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearStartTimeDeprecated()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 73) == 72) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 73);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawType.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 73) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.rawType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 73);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.rawType.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.rawType.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 73);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasRawType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 73) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearRawType()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 73) = 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 74) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 74);
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 74) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 74);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 74);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasRawConfidence.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 74) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearRawConfidence()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 74) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestamp.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTimestamp()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionActivity.startTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionActivity.startTime.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.startTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearStartTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionActivity._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

void *static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

void *static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionState.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionState.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionState.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionState.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.activity.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

void (*CLP_LogEntry_PrivateData_MotionState.activity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  return CLP_LogEntry_PrivateData_MotionState.activity.modify;
}

void CLP_LogEntry_PrivateData_MotionState.activity.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasActivity.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearActivity()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionState._activity@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20));
  if (v1 == 72) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasActivityType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearActivityType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) = 72;
}

double CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasStartTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearStartTimeDeprecated()()
{
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearStartTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionState.clearActivity()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32));
  if (v1 == 72) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasPredictedWorkoutType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearPredictedWorkoutType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) = 72;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(a1 + v2[5]) = 72;
  uint64_t v3 = a1 + v2[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(unsigned char *)(a1 + v2[8]) = 72;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutUpdate._activityType()
{
  return 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionStateObserver.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 72;
  uint64_t v8 = a1 + v7[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(unsigned char *)(a1 + v7[8]) = 72;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

void (*CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 72;
    uint64_t v12 = &v10[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v10[v6[8]] = 72;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  return CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify;
}

void CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasWorkoutUpdate.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearWorkoutUpdate()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = (int *)a1(0);
  uint64_t v7 = a3 + v6[5];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = a3 + v6[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v6[7];
  uint64_t v11 = a2(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionStateObserver._workoutUpdate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.setter(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *int v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasSessionID.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearSessionID()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasOverviewID.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearOverviewID()()
{
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28));
  if (v1 == 67) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 67) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) != 67;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) = 67;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutLocationType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutLocationType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutMode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutMode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) = 3;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

int *CLP_LogEntry_PrivateData_WorkoutSettings.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v3 = (void *)(a1 + result[5]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = (void *)(a1 + result[6]);
  *unint64_t v4 = 0;
  v4[1] = 0;
  *(unsigned char *)(a1 + result[7]) = 67;
  *(unsigned char *)(a1 + result[8]) = 5;
  *(unsigned char *)(a1 + result[9]) = 3;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutSettings._workoutType()
{
  return 67;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.startTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.startTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearStartTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.endTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.endTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEndTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEndTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28));
  if (v1 == 19) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutEvent.eventType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 19) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEventType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEventType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) = 19;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEventTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  UnknownStorage.init()();
  uint64_t v8 = (void *)(a1 + v7[5]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  size_t v9 = (void *)(a1 + v7[6]);
  *size_t v9 = 0;
  v9[1] = 0;
  *(unsigned char *)(a1 + v7[7]) = 67;
  *(unsigned char *)(a1 + v7[8]) = 5;
  *(unsigned char *)(a1 + v7[9]) = 3;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *uint64_t v12 = 0;
    v12[1] = 0;
    uint64_t v13 = &v10[v6[6]];
    *uint64_t v13 = 0;
    v13[1] = 0;
    v10[v6[7]] = 67;
    v10[v6[8]] = 5;
    v10[v6[9]] = 3;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  return CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify;
}

void CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasWorkoutSettings.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearWorkoutSettings()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(a1 + v2[6], 1, 1, v4);
  *(unsigned char *)(a1 + v2[7]) = 19;
  v5(a1 + v2[8], 1, 1, v4);
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutEvent._eventType()
{
  return 19;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutEvent._workoutSettings@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, a1);
}

void *static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearEventReceiptTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_Location.client.setter(int a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a5;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v13 = a1;
  *(unsigned char *)(v13 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.client.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionStateMediator.client.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.client.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_Location.client.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_Location.clearClient()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + v7[6], 1, 1, v9);
  *(unsigned char *)(a1 + v7[7]) = 19;
  v10(a1 + v7[8], 1, 1, v9);
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(&v9[v6[6]], 1, 1, v12);
    v9[v6[7]] = 19;
    v13(&v9[v6[8]], 1, 1, v12);
    uint64_t v14 = &v9[v6[9]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  return CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasWorkoutEvent.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearWorkoutEvent()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionStateMediator._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.gender.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.gender.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.gender.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasGender.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearGender()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) = 3;
}

float CLP_LogEntry_PrivateData_BodyMetrics.heightM.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.heightM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.heightM.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHeightM.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHeightM()()
{
}

float CLP_LogEntry_PrivateData_BodyMetrics.weightKg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.weightKg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.weightKg.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasWeightKg.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearWeightKg()()
{
}

float CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasVo2Max.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearVo2Max()()
{
}

float CLP_LogEntry_PrivateData_BodyMetrics.age.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.age.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.age.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasAge.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearAge()()
{
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL1Cn0()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmin.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmin.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hrmin.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHrmin.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHrmin()()
{
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL5Cn0()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hrmax.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHrmax()()
{
}

float CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hronset.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()()
{
}

float CLP_LogEntry_PrivateData_BodyMetrics.pal.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.pal.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.pal.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasPal.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearPal()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.condition.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.condition.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.condition.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasCondition.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearCondition()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) = 8;
}

float CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v4 = v1 + *(int *)(result + 60);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasRunVo2Max.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearRunVo2Max()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

int *CLP_LogEntry_PrivateData_BodyMetrics.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(a1 + result[5]) = 3;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + result[14]) = 8;
  uint64_t v11 = a1 + result[15];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_BodyMetrics._condition()
{
  return 8;
}

void *static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

void *static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, a1);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t (*CLP_LogEntry_PrivateData_Natalimetry.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 3;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[11];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[12];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[13];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  *(unsigned char *)(a1 + v7[14]) = 8;
  uint64_t v16 = a1 + v7[15];
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

void (*CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 3;
    uint64_t v12 = &v10[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v10[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v10[v6[12]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v10[v6[13]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    v10[v6[14]] = 8;
    int v20 = &v10[v6[15]];
    *(_DWORD *)int v20 = 0;
    v20[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  return CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify;
}

void CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasBodyMetrics.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearBodyMetrics()()
{
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Natalimetry._bodyMetrics@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Timer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Timer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Timer.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Timer(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Timer.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Timer.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Timer.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearApplicableTime()()
{
}

double CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasGroundAltitudeAboveWgs84M.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearGroundAltitudeAboveWgs84M()()
{
}

double CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasGroundAltitudeAboveWgs84UncM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearGroundAltitudeAboveWgs84UncM()()
{
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasUndulationM.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearUndulationM()()
{
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasSlopeInDirectionOfTravel.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearSlopeInDirectionOfTravel()()
{
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasMaxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearMaxAbsSlope()()
{
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.clearHrmax()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearApplicableTime()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearCourseDeg()()
{
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.clearMachAbsoluteTime()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearCourseUncDeg()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadLengthM.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadLengthM()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasSpeedMps.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearSpeedMps()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsOneWay.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsOneWay()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsRailWay.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsRailWay()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsTunnel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsTunnel()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsBridge.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsBridge()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[9];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[10];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v2[11];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v2[12];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v2[13];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v2[14];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  *(unsigned char *)(a1 + v2[15]) = 2;
  *(unsigned char *)(a1 + v2[16]) = 2;
  *(unsigned char *)(a1 + v2[17]) = 2;
  *(unsigned char *)(a1 + v2[18]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearEventReceiptTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_MapVector.client.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MapVector.client.modify;
}

void CLP_LogEntry_PrivateData_MapVector.client.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_MapVector.dotData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[9];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[10];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[11];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = a1 + v7[12];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a1 + v7[13];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a1 + v7[14];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  *(unsigned char *)(a1 + v7[15]) = 2;
  *(unsigned char *)(a1 + v7[16]) = 2;
  *(unsigned char *)(a1 + v7[17]) = 2;
  *(unsigned char *)(a1 + v7[18]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.dotData.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MapVector.dotData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(void *)uint64_t v17 = 0;
    v17[8] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(void *)uint64_t v18 = 0;
    v18[8] = 1;
    uint64_t v19 = &v9[v6[12]];
    *(void *)uint64_t v19 = 0;
    v19[8] = 1;
    uint64_t v20 = &v9[v6[13]];
    *(void *)uint64_t v20 = 0;
    v20[8] = 1;
    uint64_t v21 = &v9[v6[14]];
    *(void *)uint64_t v21 = 0;
    v21[8] = 1;
    v9[v6[15]] = 2;
    v9[v6[16]] = 2;
    v9[v6[17]] = 2;
    v9[v6[18]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  return CLP_LogEntry_PrivateData_MapVector.dotData.modify;
}

void CLP_LogEntry_PrivateData_MapVector.dotData.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasDotData.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearDotData()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MapVector._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearApplicableTime()()
{
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchPointLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchPointLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchPointLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchPointLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchRadiusM.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchRadiusM()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsCloseToTunnel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsCloseToTunnel()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsCloseToBridge.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsCloseToBridge()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 44)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsTunnel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsTunnel()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 48)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsBridge.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsBridge()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a1 + v2[9]) = 2;
  *(unsigned char *)(a1 + v2[10]) = 2;
  *(unsigned char *)(a1 + v2[11]) = 2;
  *(unsigned char *)(a1 + v2[12]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[v6[6]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[7]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[8]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    v10[v6[9]] = 2;
    v10[v6[10]] = 2;
    v10[v6[11]] = 2;
    v10[v6[12]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  return CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify;
}

void CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasTunnelBridgeData.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearTunnelBridgeData()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelBridgeNotification._tunnelBridgeData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearApplicableTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasHorizontalUncM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearHorizontalUncM()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasAltitudeM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearAltitudeM()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasVerticalUncM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearVerticalUncM()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearReferenceFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  *uint64_t v5 = 3;
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasCourseAtExitDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearCourseAtExitDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasCourseAtExitUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearCourseAtExitUncDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasTunnelWidthAtExitM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearTunnelWidthAtExitM()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasIsTunnelCurved.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearIsTunnelCurved()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearStartLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearStartLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasTunnelLengthM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearTunnelLengthM()()
{
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasEndPointDistanceFromCurrentSolutionM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearEndPointDistanceFromCurrentSolutionM()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelEndPointAssistance._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  double v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelEndPoint.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  return CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasTunnelEndPointData.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearTunnelEndPointData()()
{
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelEndPoint._tunnelEndPointData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.getter()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasRoadID.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearRoadID()()
{
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearStartLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearStartLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasEndLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearEndLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasEndLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearEndLongitudeDeg()()
{
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearCourseUncDeg()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

int *CLP_LogEntry_PrivateData_MapsRouteHintData.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasRouteType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearRouteType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasStepType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearStepType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[7], 1, 1, v4);
  *((unsigned char *)a1 + v2[8]) = 7;
  *((unsigned char *)a1 + v2[9]) = 7;
  return result;
}

void *static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.clearEventTime()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                                   + 40));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasTransmissionState.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 40)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearTransmissionState()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 44));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSampleCount.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSampleCount()()
{
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSlipDetected.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSlipDetected()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSensorType.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSensorType()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

ALProtobuf::CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification::SensorType_optional __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.value = ALProtobuf_CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification_SensorType_stCombined;
  }
  else {
    v1.value = ALProtobuf_CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification_SensorType_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  char v3 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  UnknownStorage.init()();
  unint64_t v4 = (char *)a1 + v3[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a1 + v3[8], 1, 1, v5);
  uint64_t v8 = (char *)a1 + v3[9];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  *((unsigned char *)a1 + v3[10]) = 5;
  size_t v9 = (char *)a1 + v3[11];
  *(_DWORD *)size_t v9 = 0;
  v9[4] = 1;
  *((unsigned char *)a1 + v3[12]) = 2;
  *((unsigned char *)a1 + v3[13]) = 2;
  return result;
}

void *static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

void *static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.getter()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.previous.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasPrevious.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearPrevious()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.current.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.current.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.current.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasCurrent.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearCurrent()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasAboutToSleep.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearAboutToSleep()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasRecentlyWoke.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearRecentlyWoke()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_ReachabilityState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  *(unsigned char *)(a1 + result[6]) = 5;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_Battery.level.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return -1.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Battery.level.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_Battery, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.level.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = -1.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasLevel.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearLevel()()
{
}

uint64_t CLP_LogEntry_PrivateData_Battery.charged.getter()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.charged.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.charged.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasCharged.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearCharged()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.connected.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.connected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.connected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasConnected.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearConnected()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerType.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.chargerType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasChargerType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearChargerType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_Battery.wasConnected.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.wasConnected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.wasConnected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasWasConnected.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearWasConnected()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerFamily.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerFamily.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.chargerFamily.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasChargerFamily.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearChargerFamily()()
{
}

int *CLP_LogEntry_PrivateData_Battery.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 5;
  *(unsigned char *)(a1 + result[9]) = 2;
  uint64_t v4 = a1 + result[10];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearEventReceiptTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.client.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.client.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.client.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.notificationData.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v1 == 20) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.notificationData.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 20) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasNotificationData.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  return *v1 != 20;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearNotificationData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  *uint64_t v5 = 20;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.reachability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 5;
  *(unsigned char *)(a1 + v7[6]) = 5;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.reachability.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 5;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasReachability.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearReachability()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.battery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 5;
  *(unsigned char *)(a1 + v7[9]) = 2;
  uint64_t v9 = a1 + v7[10];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.battery.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.battery.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 5;
    v9[v6[9]] = 2;
    uint64_t v12 = &v9[v6[10]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.battery.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.battery.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasBattery.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearBattery()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasAirplaneMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearAirplaneMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.displayOn.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.displayOn.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasDisplayOn.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearDisplayOn()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasLockScreen.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearLockScreen()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasIsBatterySaverModeEnabled.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearIsBatterySaverModeEnabled()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasPushServiceConnected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearPushServiceConnected()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasWirelessModemClients.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearWirelessModemClients()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasThermalLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearThermalLevel()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasRestrictedMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearRestrictedMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceStatus._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  int v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasCoarseSignalEnvironment.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearCoarseSignalEnvironment()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasHighResolutionSignalEnvironment.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearHighResolutionSignalEnvironment()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.client.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 32));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearClient()()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 8;
  *(unsigned char *)(a1 + v2[7]) = 8;
  uint64_t v6 = a1 + v2[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  return result;
}

void *static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hasType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironmentInfo.clearType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hasFidelityLevel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironmentInfo.clearFidelityLevel()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, 8, 4, a1);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.init()@<X0>(uint64_t (*a1)(void)@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  *(unsigned char *)(a4 + *(int *)(result + 20)) = a2;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MagSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MagSample.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearApplicableTime()()
{
}

float CLP_LogEntry_PrivateData_MagSample.xUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.xUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.xUT.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasXUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearXUT()()
{
}

float CLP_LogEntry_PrivateData_MagSample.yUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.yUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.yUT.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasYUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearYUT()()
{
}

float CLP_LogEntry_PrivateData_MagSample.zUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.zUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.zUT.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasZUT.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearZUT()()
{
}

uint64_t CLP_LogEntry_PrivateData_MagSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Magnetometer.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Magnetometer.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t (*CLP_LogEntry_PrivateData_Magnetometer.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Reset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Reset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Reset.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Reset(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Reset.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Reset.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Reset.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

double CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasCalibrated.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearCalibrated()()
{
}

double CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasLowerBound.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearLowerBound()()
{
}

double CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasUpperBound.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearUpperBound()()
{
}

int *CLP_LogEntry_PrivateData_AccelerometerPace.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TimeStamp.init()(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasAccelPoseXHigh.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearAccelPoseXHigh()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.getter()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasAccelVarXyzLow.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearAccelVarXyzLow()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasGyroNumSamplesSufficient.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearGyroNumSamplesSufficient()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasGyroVarXHigh.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearGyroVarXHigh()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasConsecutiveRequirement.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearConsecutiveRequirement()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 40)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasIsVehicularLowConfidence.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearIsVehicularLowConfidence()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasIsVehicularHighConfidence.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearIsVehicularHighConfidence()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasConsistentStepsProtection.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearConsistentStepsProtection()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) = 2;
}

int *CLP_LogEntry_PrivateData_FalseStepDetectorState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  *(unsigned char *)(a1 + result[9]) = 2;
  *(unsigned char *)(a1 + result[10]) = 2;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.timestamp.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearTimestamp()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.startTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearStartTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFirstStepTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFirstStepTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.count.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.count.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.count.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.count.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.count.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCount.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCount()()
{
}

double CLP_LogEntry_PrivateData_StepCountEntry.distanceM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.odometer.setter(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a3(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a4;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v13 = a5;
  *(unsigned char *)(v13 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_Location.odometer.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 88);
    uint64_t v13 = *(void *)(v9 + 80);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(void *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 8) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearDistanceM()()
{
}

uint64_t CLP_LogEntry_PrivateData_Location.clearOdometer()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasRawDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearRawDistanceM()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFloorsAscended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFloorsAscended()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFloorsDescended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFloorsDescended()()
{
}

double CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCurrentPaceSpm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCurrentPaceSpm()()
{
}

double CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCurrentCadence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCurrentCadence()()
{
}

double CLP_LogEntry_PrivateData_StepCountEntry.activeTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.activeTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasActiveTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearActiveTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.recordID.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.recordID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasRecordID.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearRecordID()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.sourceID.getter()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.sourceID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = (void *)(*(void *)(v2 + v5)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *uint64_t v8 = a1;
  v8[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (uint64_t *)(*(void *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v5[1])
  {
    uint64_t v6 = *v5;
    unint64_t v7 = v5[1];
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = swift_retain();
      CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v8);
      *(void *)(v6 + v5) = v7;
      swift_release();
    }
    uint64_t v9 = (void *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    *uint64_t v9 = v3;
    v9[1] = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      uint64_t v12 = swift_allocObject();
      uint64_t v13 = swift_retain();
      CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v13);
      *(void *)(v11 + v10) = v12;
      swift_release();
    }
    uint64_t v14 = (void *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    *uint64_t v14 = v3;
    v14[1] = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasSourceID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  return *(void *)(v1 + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearSourceID()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (void *)(*(void *)(v0 + v1)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *uint64_t v4 = 0;
  v4[1] = 0;
  swift_bridgeObjectRelease();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t CLP_LogEntry_PrivateData_Location.active.setter(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v13 = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_Location.active.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *uint64_t v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasIsOdometerDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearIsOdometerDistance()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  *uint64_t v4 = 2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasIsOdometerPace.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearIsOdometerPace()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  *uint64_t v4 = 2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasAccelerometerPace.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearAccelerometerPace()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pushCount.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pushCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasPushCount.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearPushCount()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.workoutType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.workoutType.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasWorkoutType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearWorkoutType()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasPedometerArmConstraintedState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearPedometerArmConstraintedState()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasElevationAscendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearElevationAscendedCm()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasElevationDescendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearElevationDescendedCm()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFalseStepsSuppressed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFalseStepsSuppressed()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v1 == 6) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.signalQuality.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 6) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasDistanceSource.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  return *v1 != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearDistanceSource()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  *uint64_t v4 = 6;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFalseStepDetectorState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFalseStepDetectorState()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_StepCountEntry._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCount.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t (*CLP_LogEntry_PrivateData_StepCount.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCount.stepCountEntry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.stepCountEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void (*CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  return CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify;
}

void CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasStepCountEntry.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearStepCountEntry()()
{
}

uint64_t CLP_LogEntry_PrivateData_StepCount.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_StepCount._stepCountEntry@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.x.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.x.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.x.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasX.getter()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.hasX.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearX()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.y.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.y.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.y.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasY.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearY()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.z.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.z.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.z.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearZ()()
{
}

int *CLP_LogEntry_PrivateData_MotionTypeVector3.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasW.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearW()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasX.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearX()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasY.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearY()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearZ()()
{
}

int *CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

int *CLP_LogEntry_PrivateData_VehicleSpeed.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a2 + result[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagneticField()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasUnassistedMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearUnassistedMagneticField()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  float result = *(float *)v3;
  if (*(unsigned char *)(v3 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagneticHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagneticHeading()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(void *a1, float a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a1;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasTrueHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearTrueHeading()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearAccuracy()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 8) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.signalQuality.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearCalibrationLevel()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  *uint64_t v4 = 8;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasUsingDatabaseBias.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearUsingDatabaseBias()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  *uint64_t v4 = 2;
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagnitude()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasInclination.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearInclination()()
{
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasHorizontal.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearHorizontal()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + v11[6];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a3 + v11[7];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a3 + v11[8];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  float v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  float v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasQuaternion.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearQuaternion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionTypeCompass._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearTimestamp()()
{
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compass.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

void (*CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  return CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify;
}

void CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasCompass.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearCompass()()
{
}

float CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasCompassCalQuality.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearCompassCalQuality()()
{
}

float CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.setter(float a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasGyroMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearGyroMagnitude()()
{
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasIsLocationAvailable.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearIsLocationAvailable()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[8];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(a1 + v2[9]) = 2;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_CompassTypeSample._compass@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Compass.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Compass(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Compass.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Compass.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Compass.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t (*CLP_LogEntry_PrivateData_Compass.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Compass.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasQuaternion.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearQuaternion()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasUserAcceleration.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearUserAcceleration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasRotationRate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearRotationRate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a3 + v11[6];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a3 + v11[7];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearMagneticField()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasMagneticFieldCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearMagneticFieldCalibrationLevel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  *uint64_t v5 = 8;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasDoingYawCorrection.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearDoingYawCorrection()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasDoingBiasEstimation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearDoingBiasEstimation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasIsInitialized_p.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearIsInitialized_p()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

float CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a3(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v14 = a5;
  *(unsigned char *)(v14 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasHeading.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearHeading()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.bits.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.bits.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SensorFusionStatus.bits.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SensorFusionStatus.hasBits.getter()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.hasX.getter(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasX.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SensorFusionStatus.clearBits()()
{
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.clearX()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  float v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  int v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearTimestamp()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  return CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify;
}

void CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasDeviceMotion.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearDeviceMotion()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasFsync.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearFsync()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasClientID.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearClientID()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.mode.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.mode.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.mode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasMode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearMode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify;
}

void CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()()
{
}

float CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 44);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearAccuracy()()
{
}

float CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 48);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasVisionCompassBias.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 48) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearVisionCompassBias()()
{
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(unsigned char *)(a1 + v2[7]) = 2;
  uint64_t v7 = a1 + v2[8];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + v2[9]) = 5;
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v2[12];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceMotionSample._deviceMotion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceMotionSample._status@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotion.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotion.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasX.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearX()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasY.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearY()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearZ()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearMagnitude()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasHorizontal.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearHorizontal()()
{
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 40);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasDeclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearDeclination()()
{
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 44);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasInclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearInclination()()
{
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 48), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  double v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasTimestamp.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 48), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearTimestamp()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + v2[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + v2[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[10];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[11];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[12];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[10];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[11];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[12];
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.data.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void (*CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    uint64_t v17 = &v10[v6[10]];
    *(void *)uint64_t v17 = 0;
    v17[8] = 1;
    uint64_t v18 = &v10[v6[11]];
    *(void *)uint64_t v18 = 0;
    v18[8] = 1;
    uint64_t v19 = &v10[v6[12]];
    uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  return CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify;
}

void CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GeomagneticModelData.hasData.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GeomagneticModelData.clearData()()
{
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GeomagneticModelData._data@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.mac.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearMac()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearSsid()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearRssiDb()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mode.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.mode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearMode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.channel.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.channel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearChannel()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearAgeS()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearIsApplePersonalHotspot()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearIsMoving()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.band.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.band.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearBand()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearFrequencyKhz()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

int *CLP_LogEntry_PrivateData_WifiAccessPoint.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(a1 + result[6]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a1 + result[8]) = 4;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  *(unsigned char *)(a1 + result[13]) = 4;
  uint64_t v8 = a1 + result[14];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAssociationState.clearIsAssociated()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

void (*CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *uint64_t v13 = 0;
    v13[1] = 0;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    v10[v6[8]] = 4;
    uint64_t v15 = &v10[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    v10[v6[11]] = 2;
    v10[v6[12]] = 2;
    v10[v6[13]] = 4;
    uint64_t v17 = &v10[v6[14]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  return CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify;
}

void CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAssociationState.clearAp()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(unsigned char *)(a1 + *(int *)(v2 + 20)) = 2;
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WifiAssociationState._ap@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiScanResult.clearScanTimestamp()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearEventReceiptTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.client.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.client.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.client.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.type.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.type.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.type.modify(uint64_t *a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  *uint64_t v5 = 15;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scanType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.type.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scanType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.scanType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.scanType.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.scanType.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasScanType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearScanType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  *uint64_t v5 = 15;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.power.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.power.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.power.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.power.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.power.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasPower.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearPower()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.associatedState.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearAssociatedState()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scan.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.scan.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.scan.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.scan.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearScan()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.simulated.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.simulated.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.simulated.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.simulated.modify(uint64_t *a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearSimulated()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.available.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.available.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.available.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.available.modify(uint64_t *a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearAvailable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasIsInvoluntaryLinkDown.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearIsInvoluntaryLinkDown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isApAwake.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isApAwake.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify(uint64_t *a1, char a2)
{
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearIsApAwake()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  *uint64_t v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WifiNotification._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasState.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearState()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) = 4;
}

double CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasStateProbability.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearStateProbability()()
{
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasMeasurementSource.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearMeasurementSource()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) = 4;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 4;
  uint64_t v6 = a1 + v2[7];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a1 + v2[8]) = 4;
  return result;
}

void *static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

void *static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

double CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.clearLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.clearLongitudeDeg()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasBaseHeightAboveGroundM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearBaseHeightAboveGroundM()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasHeightAboveBaseM.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearHeightAboveBaseM()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasHasTerrainElevation_p.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearHasTerrainElevation_p()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) = 2;
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevationM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearTerrainElevationM()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasMinBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearMinBaseHeightM()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasMaxBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearMaxBaseHeightM()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 48);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTopHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 48) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearTopHeightM()()
{
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a1 + v2[8]) = 2;
  uint64_t v6 = (char *)a1 + v2[9];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = (char *)a1 + v2[11];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (char *)a1 + v2[12];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hasBuildingHash.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.clearBuildingHash()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hasBuildingID.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.clearBuildingID()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v2 + 24);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapBuildingData.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapBuildingData.clearReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

void (*CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify;
}

void CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GEOMapBuildingData.hasQueryLocationCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapBuildingData.clearQueryLocationCoordinate()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a1 + *(int *)(v3 + 32);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapBuildingData._queryLocationCoordinate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchType.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0)
                           + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchType()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchNumber.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchNumber()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchWidthMm.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchWidthMm()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchLengthMm.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchLengthMm()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + v2[6]) = 4;
  unint64_t v4 = (char *)a1 + v2[7];
  *(_DWORD *)unint64_t v4 = 0;
  v4[4] = 1;
  int v5 = (char *)a1 + v2[8];
  *(_DWORD *)int v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  return result;
}

void *static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasNorthLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearNorthLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasWestLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearWestLongitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasSouthLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearSouthLatitudeDeg()()
{
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasEastLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearEastLongitudeDeg()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0;
  v5[8] = 1;
  uint64_t v6 = (char *)a1 + v2[8];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[9];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + v7[6];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (char *)a1 + v7[7];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (char *)a1 + v7[8];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  uint64_t v11 = (char *)a1 + v7[9];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

void (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + v6[6];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = (char *)v10 + v6[7];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = (char *)v10 + v6[8];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = (char *)v10 + v6[9];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify;
}

void CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasBoundingBox.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearBoundingBox()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.getter()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 28));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeID.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeID()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeType.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasReliabilityScoreDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearReliabilityScoreDeprecated()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 2;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, 2, 2, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[*(int *)(v6 + 20)] = 2;
    v10[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify;
}

void CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeFeatures.getter()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeFeatures()()
{
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.getter()
{
  uint64_t v1 = (unsigned char *)(v0
               + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasBranchCount.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearBranchCount()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasHasBranchWidths_p.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.clearHasBranchWidths_p()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                    + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.getter()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasHasBranchLengths_p.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.clearHasBranchLengths_p()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                    + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + v2[7];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a1 + v2[8]) = 4;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v10 = (char *)a1 + v2[11];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._boundingBox@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._treeFeatures@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, a1);
}

void *static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v10, a4);
  uint64_t v11 = a5(0);
  BOOL v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.clearReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.getter()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hasContainsBranchGeometry.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.clearContainsBranchGeometry()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Accel.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *((unsigned char *)a1 + *(int *)(v2 + 28)) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchOrientation.hasWristOrientation.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchOrientation.clearWristOrientation()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchOrientation.hasCrownOrientation.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchOrientation.clearCrownOrientation()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) = 4;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, 4, 4, a1);
}

void *static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

uint64_t CLP_LogEntry_PrivateData_WristState.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WristState.applicableTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearApplicableTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWrist.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWrist.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWrist.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWrist.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWrist()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristSensor.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristSensor.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWristSensor.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWristSensor.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWristSensor()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristConfidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristConfidence.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWristConfidence.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWristConfidence.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWristConfidence()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isOnCharger.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isOnCharger.setter(char a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isOnCharger.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsOnCharger.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsOnCharger()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsForcedOnWristEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsForcedOnWristEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsWristDetectionEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsWristDetectionEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState.WristStateType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WristState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 4;
  *(unsigned char *)(a1 + v2[7]) = 4;
  *(unsigned char *)(a1 + v2[8]) = 4;
  *(unsigned char *)(a1 + v2[9]) = 2;
  *(unsigned char *)(a1 + v2[10]) = 2;
  *(unsigned char *)(a1 + v2[11]) = 2;
  return result;
}

void *static CLP_LogEntry_PrivateData_WristState.WristStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WristState.WristStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
}

void *static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearEventReceiptTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_WatchState.client.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t (*CLP_LogEntry_PrivateData_WatchState.client.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearClient()()
{
}

uint64_t CLP_LogEntry_PrivateData_WatchState.watchOrientation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 4;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.watchOrientation.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MotionState.activity.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.activity.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[*(int *)(v6 + 20)] = 4;
    v10[*(int *)(v6 + 24)] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  return CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify;
}

void CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasWatchOrientation.getter()
{
  return CLP_LogEntry_PrivateData_MotionState.hasActivity.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearWatchOrientation()()
{
}

uint64_t CLP_LogEntry_PrivateData_WatchState.wristState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(unsigned char *)(a1 + v7[6]) = 4;
  *(unsigned char *)(a1 + v7[7]) = 4;
  *(unsigned char *)(a1 + v7[8]) = 4;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.wristState.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_WatchState.wristState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v10[v6[6]] = 4;
    v10[v6[7]] = 4;
    v10[v6[8]] = 4;
    v10[v6[9]] = 2;
    v10[v6[10]] = 2;
    v10[v6[11]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  return CLP_LogEntry_PrivateData_WatchState.wristState.modify;
}

void CLP_LogEntry_PrivateData_WatchState.wristState.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, a3);
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, a5);
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(**(void **)a1 + v8, a3);
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);
  free(v7);
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasWristState.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearWristState()()
{
}

uint64_t CLP_LogEntry_PrivateData_WatchState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WatchState._watchOrientation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WatchState._wristState@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.getter()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasUserSpecificPlaceType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearUserSpecificPlaceType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.placeType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.placeType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.placeType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasPlaceType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearPlaceType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.preferredName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.preferredName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.preferredName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasPreferredName.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearPreferredName()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasLoiUuidIdentifier.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearLoiUuidIdentifier()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

int *CLP_LogEntry_PrivateData_PlaceInference.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  *(unsigned char *)(a1 + result[6]) = 3;
  uint64_t v3 = (void *)(a1 + result[7]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = (void *)(a1 + result[8]);
  *unint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

void *static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

void *static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearReceiptTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasArrivalTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearArrivalTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.departureTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.departureTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasDepartureTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearDepartureTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasDetectionTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearDetectionTime()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.placeInference.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 5;
  *(unsigned char *)(a1 + v7[6]) = 3;
  uint64_t v8 = (void *)(a1 + v7[7]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)(a1 + v7[8]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.placeInference.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 3;
    uint64_t v11 = &v9[v6[7]];
    *uint64_t v11 = 0;
    v11[1] = 0;
    uint64_t v12 = &v9[v6[8]];
    *uint64_t v12 = 0;
    v12[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasPlaceInference.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearPlaceInference()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.coordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + *(int *)(v11 + 20);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + *(int *)(v11 + 24);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.coordinate.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearCoordinate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM, a1);
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasHorizontalAccuracyM.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearHorizontalAccuracyM()()
{
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_RoutineVisit._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasStartTimeCfatSec.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearStartTimeCfatSec()()
{
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasMctTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearMctTimestampSec()()
{
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.type.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.type.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.type.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasConfidence.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearConfidence()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) = 4;
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasEstimatedStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearEstimatedStateProbabilityOutdoor()()
{
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasDaylightConfidence.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearDaylightConfidence()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasIsAstronomicalDaytime.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearIsAstronomicalDaytime()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) = 2;
}

float CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasCurrentLux.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearCurrentLux()()
{
}

int *CLP_LogEntry_PrivateData_OutdoorUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 3;
  *(unsigned char *)(a1 + result[8]) = 4;
  uint64_t v5 = a1 + result[9];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[10]) = 4;
  *(unsigned char *)(a1 + result[11]) = 2;
  uint64_t v6 = a1 + result[12];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 16);
  if (*(unsigned char *)(v2 + 24)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasCfAbsoluteTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 24) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearCfAbsoluteTimestampSec()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 1;
}

double CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(unsigned char *)(v7 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasMachContinuousTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearMachContinuousTimestampSec()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 44);
  if (*(unsigned char *)(v1 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 44) = a1;
  *(unsigned char *)(v7 + 48) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 44);
  if (*(unsigned char *)(v5 + 48)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 44) = v4;
  *(unsigned char *)(v10 + 48) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasSampleIntervalSec.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 48) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearSampleIntervalSec()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 44) = 0;
  *(unsigned char *)(v5 + 48) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 52);
  if (*(unsigned char *)(v1 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 52) = a1;
  *(unsigned char *)(v7 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 52);
  if (*(unsigned char *)(v5 + 56)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 52) = v4;
  *(unsigned char *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosXM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 56) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosXM()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 52) = 0;
  *(unsigned char *)(v5 + 56) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 60);
  if (*(unsigned char *)(v1 + 64)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 60) = a1;
  *(unsigned char *)(v7 + 64) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 60);
  if (*(unsigned char *)(v5 + 64)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 60) = v4;
  *(unsigned char *)(v10 + 64) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosYM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 64) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosYM()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 60) = 0;
  *(unsigned char *)(v5 + 64) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 68);
  if (*(unsigned char *)(v1 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 68) = a1;
  *(unsigned char *)(v7 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 68);
  if (*(unsigned char *)(v5 + 72)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 68) = v4;
  *(unsigned char *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosZM.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 72) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosZM()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 68) = 0;
  *(unsigned char *)(v5 + 72) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 76);
  if (*(unsigned char *)(v1 + 80)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 76) = a1;
  *(unsigned char *)(v7 + 80) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 76);
  if (*(unsigned char *)(v5 + 80)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 76) = v4;
  *(unsigned char *)(v10 + 80) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelXMps.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 80) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelXMps()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 76) = 0;
  *(unsigned char *)(v5 + 80) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 84);
  if (*(unsigned char *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 84) = a1;
  *(unsigned char *)(v7 + 88) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 84);
  if (*(unsigned char *)(v5 + 88)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 84) = v4;
  *(unsigned char *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelYMps.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelYMps()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 84) = 0;
  *(unsigned char *)(v5 + 88) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 92);
  if (*(unsigned char *)(v2 + 96)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(unsigned char *)(v7 + 96) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 92);
  if (*(unsigned char *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(unsigned char *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelZMps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 96) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelZMps()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(unsigned char *)(v5 + 96) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qX.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 100);
  if (*(unsigned char *)(v2 + 104)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qX.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(unsigned char *)(v7 + 104) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 100);
  if (*(unsigned char *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(unsigned char *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQX.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 104) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQX()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(unsigned char *)(v5 + 104) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qY.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 108);
  if (*(unsigned char *)(v2 + 112)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qY.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(unsigned char *)(v7 + 112) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 108);
  if (*(unsigned char *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(unsigned char *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQY.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 112) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQY()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(unsigned char *)(v5 + 112) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 116);
  if (*(unsigned char *)(v1 + 120)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 116) = a1;
  *(unsigned char *)(v7 + 120) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 116);
  if (*(unsigned char *)(v5 + 120)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 116) = v4;
  *(unsigned char *)(v10 + 120) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQZ.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 120) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQZ()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 116) = 0;
  *(unsigned char *)(v5 + 120) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qW.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 124);
  if (*(unsigned char *)(v1 + 128)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qW.setter(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 124) = a1;
  *(unsigned char *)(v7 + 128) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 124);
  if (*(unsigned char *)(v5 + 128)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 124) = v4;
  *(unsigned char *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQW.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 128) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQW()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 124) = 0;
  *(unsigned char *)(v5 + 128) = 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 129) == 3) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 129);
  }
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 129) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 129);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 129);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasReferenceFrame.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 129) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearReferenceFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 129) = 3;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 130) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 130) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 130) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsDeltaPositionValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsDeltaPositionValid()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 130) = 2;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 131) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 131) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 131) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsDeltaVelocityValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsDeltaVelocityValid()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 131) = 2;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 132) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 132) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 132) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 132) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsAttitudeValid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 132) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsAttitudeValid()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 132) = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.init()(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_InertialOdometrySample._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_OperatingMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiNotificationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DataAvailability@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_TimeStamp.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TimeStamp.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TimeStamp.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_TimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_AccelSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccelSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccelSample.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t static CLP_LogEntry_PrivateData_AccelSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_AccelSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccelSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccelSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Accel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Accel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Accel.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Accel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_Accel.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Accel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Accel()
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Accel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Accel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GyroSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GyroSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GyroSample.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, a4);
  if (!v6)
  {
    uint64_t v9 = (int *)a5(0);
    if ((*(unsigned char *)(v5 + v9[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v9[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v9[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GyroSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GyroSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AccelSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + a1[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GyroSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GyroSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GyroSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GyroSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Gyro.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Gyro.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Gyro.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_Gyro.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Gyro()
{
  return CLP_LogEntry_PrivateData_Gyro.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Gyro@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Gyro(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_BaroSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BaroSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BaroSample.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  if (!v4)
  {
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
    if ((*(unsigned char *)(v3 + *(int *)(v6 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + *(int *)(v6 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BaroSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BaroSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BaroSample()
{
  return CLP_LogEntry_PrivateData_BaroSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BaroSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BaroSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BaroSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Baro.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Baro.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Baro.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_Baro._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_Baro.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Baro, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Baro()
{
  return CLP_LogEntry_PrivateData_Baro.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Baro@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Baro(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_ClientLocationCoordinate.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
          goto LABEL_14;
        case 2:
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_16;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 12:
        case 15:
        case 21:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_16;
        case 11:
        case 16:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 13:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
          goto LABEL_14;
        case 17:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
          goto LABEL_14;
        case 18:
        case 19:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          goto LABEL_14;
        case 20:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
LABEL_14:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 22:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_16:
          uint64_t v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(unsigned char *)(v9 + 16) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v21 != 14)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if ((*(unsigned char *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if ((*(unsigned char *)(v23 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v24 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  if (*v24 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v25 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v25 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v26 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  if (*v26 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v27 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  if (*v27 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v28 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v29 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  if (*v29 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v4 = *(void *)(v116 - 8);
  MEMORY[0x270FA5388](v116);
  uint64_t v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  uint64_t v7 = MEMORY[0x270FA5388](v115);
  uint64_t v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v109 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v114 = (uint64_t)&v109 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v109 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v109 - v21;
  swift_beginAccess();
  uint64_t v117 = a1;
  uint64_t v23 = *(char *)(a1 + 16);
  swift_beginAccess();
  uint64_t v24 = *(char *)(a2 + 16);
  if (v23 == 4)
  {
    if (v24 != 4) {
      return 0;
    }
  }
  else if (v24 == 4 || qword_24711E078[v23] != qword_24711E078[v24])
  {
    return 0;
  }
  char v111 = v15;
  int v112 = v9;
  int v113 = v6;
  uint64_t v25 = a2;
  uint64_t v26 = v117;
  uint64_t v27 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v28 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v29 = (uint64_t)&v11[*(int *)(v115 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  uint64_t v30 = v4 + 48;
  char v31 = v32;
  uint64_t v33 = v116;
  if (v32((uint64_t)v11, 1, v116) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    uint64_t v110 = v31;
    if (v31(v29, 1, v33) == 1)
    {
      uint64_t v109 = v30;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_15;
    }
LABEL_11:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_12;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v31(v29, 1, v33) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_11;
  }
  uint64_t v109 = v30;
  uint64_t v110 = v31;
  uint64_t v35 = v29;
  uint64_t v36 = (uint64_t)v113;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v35, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v26 = v117;
  swift_retain();
  swift_retain();
  char v37 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v20, v36, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v36, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((v37 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v38 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  double v39 = *(double *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 8);
  uint64_t v40 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  if (v38)
  {
    if ((*(unsigned char *)(v40 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_12;
  }
  uint64_t v41 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  double v42 = *(double *)v41;
  LOBYTE(v41) = *(unsigned char *)(v41 + 8);
  uint64_t v43 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if (v41)
  {
    if ((*(unsigned char *)(v43 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v43 + 8) & 1) != 0 || v42 != *(double *)v43)
  {
    goto LABEL_12;
  }
  uint64_t v44 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  double v45 = *(double *)v44;
  LOBYTE(v44) = *(unsigned char *)(v44 + 8);
  uint64_t v46 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if (v44)
  {
    if ((*(unsigned char *)(v46 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_12;
  }
  uint64_t v47 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  double v48 = *(double *)v47;
  LOBYTE(v47) = *(unsigned char *)(v47 + 8);
  uint64_t v49 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if (v47)
  {
    if ((*(unsigned char *)(v49 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_12;
  }
  uint64_t v50 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  double v51 = *(double *)v50;
  LOBYTE(v50) = *(unsigned char *)(v50 + 8);
  uint64_t v52 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if (v50)
  {
    if ((*(unsigned char *)(v52 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_12;
  }
  uint64_t v53 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  double v54 = *(double *)v53;
  LOBYTE(v53) = *(unsigned char *)(v53 + 8);
  uint64_t v55 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if (v53)
  {
    if ((*(unsigned char *)(v55 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_12;
  }
  uint64_t v56 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  double v57 = *(double *)v56;
  LOBYTE(v56) = *(unsigned char *)(v56 + 8);
  uint64_t v58 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if (v56)
  {
    if ((*(unsigned char *)(v58 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v58 + 8) & 1) != 0 || v57 != *(double *)v58)
  {
    goto LABEL_12;
  }
  uint64_t v59 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  double v60 = *(double *)v59;
  LOBYTE(v59) = *(unsigned char *)(v59 + 8);
  uint64_t v61 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if (v59)
  {
    if (*(unsigned char *)(v61 + 8)) {
      goto LABEL_55;
    }
LABEL_12:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(unsigned char *)(v61 + 8) & 1) != 0 || v60 != *(double *)v61) {
    goto LABEL_12;
  }
LABEL_55:
  uint64_t v62 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  int v63 = *(_DWORD *)v62;
  LOBYTE(v62) = *(unsigned char *)(v62 + 4);
  uint64_t v64 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if (v62)
  {
    if ((*(unsigned char *)(v64 + 4) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v64 + 4) & 1) != 0 || v63 != *(_DWORD *)v64)
  {
    goto LABEL_12;
  }
  uint64_t v65 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  double v66 = *(double *)v65;
  LOBYTE(v65) = *(unsigned char *)(v65 + 8);
  uint64_t v67 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if (v65)
  {
    if ((*(unsigned char *)(v67 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v67 + 8) & 1) != 0 || v66 != *(double *)v67)
  {
    goto LABEL_12;
  }
  unint64_t v68 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v69 = *v68;
  uint64_t v70 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v71 = *v70;
  if (v69 == 14)
  {
    if (v71 != 14) {
      goto LABEL_12;
    }
  }
  else if (v71 == 14 || v69 != v71)
  {
    goto LABEL_12;
  }
  uint64_t v72 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  uint64_t v73 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v74 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  uint64_t v75 = (uint64_t)v112;
  uint64_t v76 = (uint64_t)&v112[*(int *)(v115 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, (uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v110(v75, 1, v116) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    if (v110(v76, 1, v116) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_78;
    }
LABEL_75:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_12;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, (uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v110(v76, 1, v116) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v111, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_75;
  }
  uint64_t v77 = (uint64_t)v113;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v76, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v78 = (uint64_t)v111;
  char v79 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v111, v77, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v77, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v78, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((v79 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_78:
  uint64_t v80 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  double v81 = *(double *)v80;
  LOBYTE(v80) = *(unsigned char *)(v80 + 8);
  uint64_t v82 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if (v80)
  {
    if ((*(unsigned char *)(v82 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v82 + 8) & 1) != 0 || v81 != *(double *)v82)
  {
    goto LABEL_12;
  }
  uint64_t v83 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  int v84 = *(_DWORD *)v83;
  LOBYTE(v83) = *(unsigned char *)(v83 + 4);
  uint64_t v85 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if (v83)
  {
    if ((*(unsigned char *)(v85 + 4) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v85 + 4) & 1) != 0 || v84 != *(_DWORD *)v85)
  {
    goto LABEL_12;
  }
  uint64_t v86 = (char *)(v117
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  uint64_t v87 = *v86;
  uint64_t v88 = (char *)(v25
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  uint64_t v89 = *v88;
  if (v87 == 5)
  {
    if (v89 != 5) {
      goto LABEL_12;
    }
  }
  else if (v89 == 5 || qword_24711E098[v87] != qword_24711E098[v89])
  {
    goto LABEL_12;
  }
  uint64_t v90 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v91 = *v90;
  uint64_t v92 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v93 = *v92;
  if (v91 == 3)
  {
    if (v93 != 3) {
      goto LABEL_12;
    }
  }
  else if (v93 == 3 || v91 != v93)
  {
    goto LABEL_12;
  }
  uint64_t v94 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v95 = *v94;
  uint64_t v96 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v97 = *v96;
  if (v95 == 3)
  {
    if (v97 != 3) {
      goto LABEL_12;
    }
  }
  else if (v97 == 3 || v95 != v97)
  {
    goto LABEL_12;
  }
  uint64_t v98 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v99 = *v98;
  uint64_t v100 = (unsigned __int8 *)(v25
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v101 = *v100;
  if (v99 == 8)
  {
    if (v101 != 8) {
      goto LABEL_12;
    }
  }
  else if (v101 == 8 || v99 != v101)
  {
    goto LABEL_12;
  }
  uint64_t v102 = v117
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  double v103 = *(double *)v102;
  LOBYTE(v102) = *(unsigned char *)(v102 + 8);
  uint64_t v104 = v25
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if (v102)
  {
    if ((*(unsigned char *)(v104 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v104 + 8) & 1) != 0 || v103 != *(double *)v104)
  {
    goto LABEL_12;
  }
  uint64_t v105 = (unsigned __int8 *)(v117
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  int v106 = *v105;
  swift_release();
  char v107 = (unsigned __int8 *)(v25
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  int v108 = *v107;
  swift_release();
  if (v106 == 2)
  {
    if (v108 != 2) {
      return 0;
    }
  }
  else if (v108 == 2 || ((((v108 & 1) == 0) ^ v106) & 1) == 0)
  {
    return 0;
  }
  return 1;
}