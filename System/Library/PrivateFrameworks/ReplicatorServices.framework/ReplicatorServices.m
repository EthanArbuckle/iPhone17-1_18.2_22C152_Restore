ReplicatorServices::ZoneReplicationPriority_optional __swiftcall ZoneReplicationPriority.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3) {
    v2 = rawValue;
  }
  *v1 = v2;
  return (ReplicatorServices::ZoneReplicationPriority_optional)rawValue;
}

uint64_t ZoneReplicationPriority.rawValue.getter()
{
  return *v0;
}

unint64_t sub_25B2C373C()
{
  unint64_t result = qword_26A4EB960;
  if (!qword_26A4EB960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB960);
  }
  return result;
}

uint64_t sub_25B2C3790()
{
  return sub_25B380290();
}

uint64_t sub_25B2C37D8()
{
  return sub_25B380280();
}

uint64_t sub_25B2C3804()
{
  return sub_25B380290();
}

ReplicatorServices::ZoneReplicationPriority_optional sub_25B2C3848(Swift::Int64 *a1)
{
  return ZoneReplicationPriority.init(rawValue:)(*a1);
}

void sub_25B2C3850(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25B2C385C()
{
  return sub_25B37FAC0();
}

uint64_t sub_25B2C38BC()
{
  return sub_25B37FAA0();
}

BOOL sub_25B2C390C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ZoneReplicationPriority(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ZoneReplicationPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2C3A8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_25B2C3AB4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_25B2C3AC0(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ZoneReplicationPriority()
{
  return &type metadata for ZoneReplicationPriority;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorProtocolVersion(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorProtocolVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void sub_25B2C3B7C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_25B2C3BC4(uint64_t a1, uint64_t a2)
{
  return sub_25B2C4174(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_25B2C3BE4(uint64_t a1, uint64_t a2)
{
  return sub_25B2C4174(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_25B2C3C08(uint64_t a1, id *a2)
{
  uint64_t result = sub_25B37F980();
  *a2 = 0;
  return result;
}

uint64_t sub_25B2C3C80(uint64_t a1, id *a2)
{
  char v3 = sub_25B37F990();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_25B2C3D00@<X0>(uint64_t *a1@<X8>)
{
  sub_25B37F9A0();
  uint64_t v2 = sub_25B37F970();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_25B2C3D48()
{
  uint64_t v0 = sub_25B37F9A0();
  uint64_t v2 = v1;
  if (v0 == sub_25B37F9A0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_25B3801A0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_25B2C3DD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25B37F970();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_25B2C3E20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25B37F9A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25B2C3E4C(uint64_t a1)
{
  uint64_t v2 = sub_25B2C3F98((unint64_t *)&qword_26B340BE8, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_25B2C3F98((unint64_t *)&unk_26A4EB9C0, type metadata accessor for FileAttributeKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25B2C3F08()
{
  return sub_25B2C3F98(&qword_26A4EB978, type metadata accessor for FileAttributeKey);
}

uint64_t sub_25B2C3F50()
{
  return sub_25B2C3F98(&qword_26A4EB980, type metadata accessor for FileAttributeKey);
}

uint64_t sub_25B2C3F98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B2C3FE0(uint64_t a1)
{
  uint64_t v2 = sub_25B2C3F98(&qword_26A4EB9A8, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_25B2C3F98((unint64_t *)&unk_26A4EB9B0, type metadata accessor for FileProtectionType);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25B2C409C()
{
  return sub_25B2C3F98(&qword_26A4EB988, type metadata accessor for FileProtectionType);
}

uint64_t sub_25B2C40E4()
{
  return sub_25B2C3F98(&qword_26A4EB990, type metadata accessor for FileProtectionType);
}

uint64_t sub_25B2C412C()
{
  return sub_25B2C3F98((unint64_t *)&unk_26A4EB998, type metadata accessor for FileProtectionType);
}

uint64_t sub_25B2C4174(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_25B37F9A0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25B2C41B8()
{
  sub_25B37F9A0();
  sub_25B37FA10();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2C420C()
{
  sub_25B37F9A0();
  sub_25B380250();
  sub_25B37FA10();
  uint64_t v0 = sub_25B380290();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25B2C4280()
{
  return sub_25B2C3F98(&qword_26B340BF0, type metadata accessor for FileAttributeKey);
}

unint64_t sub_25B2C42C8()
{
  unint64_t result = qword_26B3415C8;
  if (!qword_26B3415C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415C8);
  }
  return result;
}

uint64_t ReplicatorProtocolVersion.current.getter()
{
  return *(void *)v0;
}

uint64_t ReplicatorProtocolVersion.minimum.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ReplicatorProtocolVersion.init(current:minimum:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL ReplicatorProtocolVersion.isCompatible(with:)(void *a1)
{
  return *v1 >= a1[1] && *a1 >= v1[1];
}

Swift::Bool __swiftcall ReplicatorProtocolVersion.isCompatible(with:)(Swift::UInt64 with)
{
  return *v1 >= with && v1[1] <= with;
}

unint64_t ReplicatorProtocolVersion.highestCompatibleProtocolVersion(with:)(unint64_t *a1)
{
  unint64_t v2 = *a1;
  BOOL v4 = *v1 < a1[1] || v2 < v1[1];
  if (*v1 < v2) {
    unint64_t v2 = *v1;
  }
  if (v4) {
    return 0;
  }
  else {
    return v2;
  }
}

Swift::UInt64_optional __swiftcall ReplicatorProtocolVersion.highestCompatibleProtocolVersion(with:)(Swift::UInt64 with)
{
  BOOL v3 = v1[1] > with || *v1 < with;
  if (v3) {
    with = 0;
  }
  result.value = with;
  result.is_nil = v3;
  return result;
}

uint64_t ReplicatorProtocolVersion.description.getter()
{
  return 0x3A746E6572727563;
}

uint64_t ReplicatorProtocolVersion.hash(into:)()
{
  return sub_25B380280();
}

BOOL static ReplicatorProtocolVersion.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_25B2C451C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_25B2C4534()
{
  return sub_25B380290();
}

uint64_t sub_25B2C457C()
{
  return sub_25B380260();
}

uint64_t sub_25B2C45A8()
{
  return sub_25B380290();
}

uint64_t sub_25B2C45EC()
{
  if (*v0) {
    return 0x6D756D696E696DLL;
  }
  else {
    return 0x746E6572727563;
  }
}

uint64_t sub_25B2C4620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B2C4FB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B2C4648()
{
  return 0;
}

void sub_25B2C4654(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_25B2C4660(uint64_t a1)
{
  unint64_t v2 = sub_25B2C48CC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B2C469C(uint64_t a1)
{
  unint64_t v2 = sub_25B2C48CC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorProtocolVersion.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341718);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  BOOL v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B2C48CC();
  sub_25B3802C0();
  char v11 = 0;
  sub_25B380170();
  if (!v2)
  {
    char v10 = 1;
    sub_25B380170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_25B2C48CC()
{
  unint64_t result = qword_26B3414E0;
  if (!qword_26B3414E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3414E0);
  }
  return result;
}

uint64_t ReplicatorProtocolVersion.hashValue.getter()
{
  return sub_25B380290();
}

uint64_t ReplicatorProtocolVersion.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341778);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  int v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B2C48CC();
  sub_25B3802B0();
  if (!v2)
  {
    char v14 = 0;
    uint64_t v9 = sub_25B3800C0();
    char v13 = 1;
    uint64_t v10 = sub_25B3800C0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B2C4B18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicatorProtocolVersion.init(from:)(a1, a2);
}

uint64_t sub_25B2C4B30(void *a1)
{
  return ReplicatorProtocolVersion.encode(to:)(a1);
}

uint64_t sub_25B2C4B48()
{
  return sub_25B380290();
}

uint64_t sub_25B2C4BA4()
{
  return sub_25B380280();
}

uint64_t sub_25B2C4BE0()
{
  return sub_25B380290();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_25B2C4C8C()
{
  unint64_t result = qword_26A4EBAF0;
  if (!qword_26A4EBAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBAF0);
  }
  return result;
}

BOOL sub_25B2C4CE0(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

ValueMetadata *type metadata accessor for ReplicatorProtocolVersion()
{
  return &type metadata for ReplicatorProtocolVersion;
}

uint64_t getEnumTagSinglePayload for ReplicatorProtocolVersion.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorProtocolVersion.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2C4E68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_25B2C4E90(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorProtocolVersion.CodingKeys()
{
  return &type metadata for ReplicatorProtocolVersion.CodingKeys;
}

unint64_t sub_25B2C4EB0()
{
  unint64_t result = qword_26A4EBAF8;
  if (!qword_26A4EBAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBAF8);
  }
  return result;
}

unint64_t sub_25B2C4F08()
{
  unint64_t result = qword_26B3414F0;
  if (!qword_26B3414F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3414F0);
  }
  return result;
}

unint64_t sub_25B2C4F60()
{
  unint64_t result = qword_26B3414E8;
  if (!qword_26B3414E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3414E8);
  }
  return result;
}

uint64_t sub_25B2C4FB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E6572727563 && a2 == 0xE700000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D756D696E696DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t static ReplicatorCoder.encode(_:version:)()
{
  return sub_25B37F6A0();
}

uint64_t static ReplicatorCoder.decode<A>(_:from:version:)()
{
  return sub_25B37F690();
}

uint64_t static ReplicatorCoder.encodeNSSecureCoding(_:)()
{
  return sub_25B37F680();
}

uint64_t static ReplicatorCoder.decodeNSSecureCoding<A>(_:from:)()
{
  return sub_25B37F670();
}

uint64_t ReplicatorCoder.deinit()
{
  return v0;
}

uint64_t ReplicatorCoder.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ReplicatorCoder()
{
  return self;
}

uint64_t method lookup function for ReplicatorCoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicatorCoder);
}

uint64_t ReplicatorRecordVersion.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2C5CBC(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t ReplicatorRecordVersion.id.setter(uint64_t a1)
{
  return sub_25B2C52D0(a1, v1);
}

uint64_t sub_25B2C52D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ReplicatorRecordVersion.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecordVersion.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for ReplicatorRecordVersion()
{
  uint64_t result = qword_26B3413B8;
  if (!qword_26B3413B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ReplicatorRecordVersion.version.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*ReplicatorRecordVersion.version.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecordVersion.init(id:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_25B2C555C(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  uint64_t v6 = sub_25B37F640();
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a2, v6);
}

uint64_t sub_25B2C555C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B2C55C0()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 25705;
  }
}

uint64_t sub_25B2C55F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B2C6E04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B2C5618(uint64_t a1)
{
  unint64_t v2 = sub_25B2C5890();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B2C5654(uint64_t a1)
{
  unint64_t v2 = sub_25B2C5890();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorRecordVersion.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB510);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B2C5890();
  sub_25B3802C0();
  v8[15] = 0;
  type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B2C5DCC(&qword_26B341730, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  sub_25B380160();
  if (!v1)
  {
    type metadata accessor for ReplicatorRecordVersion();
    v8[14] = 1;
    sub_25B37F640();
    sub_25B2C5DCC(&qword_26A4EB370, MEMORY[0x263F07508]);
    sub_25B380160();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_25B2C5890()
{
  unint64_t result = qword_26B340FB8;
  if (!qword_26B340FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FB8);
  }
  return result;
}

uint64_t ReplicatorRecordVersion.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = sub_25B37F640();
  uint64_t v21 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388]();
  v26 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D50);
  uint64_t v23 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388]();
  int v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecordVersion();
  MEMORY[0x270FA5388]();
  char v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B2C5890();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = a1;
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  char v29 = 0;
  sub_25B2C5DCC(&qword_26B3410A0, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  uint64_t v15 = (uint64_t)v26;
  sub_25B3800B0();
  sub_25B2C555C(v15, v12);
  char v28 = 1;
  sub_25B2C5DCC((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
  v16 = v5;
  uint64_t v17 = v14;
  uint64_t v18 = v27;
  sub_25B3800B0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v12 + *(int *)(v9 + 20), v16, v17);
  sub_25B2C5CBC(v12, v22, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_25B2C5D24(v12, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
}

uint64_t sub_25B2C5CBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2C5D24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B2C5D84()
{
  return sub_25B2C5DCC(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_25B2C5DCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B2C5E14@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2C5CBC(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_25B2C5E48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorRecordVersion.init(from:)(a1, a2);
}

uint64_t sub_25B2C5E60(void *a1)
{
  return ReplicatorRecordVersion.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecordVersion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = type metadata accessor for ReplicatorRecord.ID(0);
    uint64_t v10 = *(int *)(v9 + 28);
    __dst = (char *)v4 + v10;
    uint64_t v27 = v9;
    char v11 = (char *)a2 + v10;
    uint64_t v12 = sub_25B37F640();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = *(int *)(v27 + 32);
    uint64_t v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = *(int *)(a3 + 20);
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_bridgeObjectRetain();
    v24(v22, v23, v12);
  }
  return v4;
}

uint64_t destroy for ReplicatorRecordVersion(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for ReplicatorRecord.ID(0) + 28);
  uint64_t v5 = sub_25B37F640();
  uint64_t v9 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  return v7(v6, v5);
}

void *initializeWithCopy for ReplicatorRecordVersion(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v9 = *(int *)(v8 + 28);
  __dst = (char *)a1 + v9;
  uint64_t v25 = v8;
  uint64_t v10 = (char *)a2 + v9;
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v15 = *(int *)(v25 + 32);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v11);
  return a1;
}

char *assignWithCopy for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v6 = *(int *)(v5 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_25B37F640();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v9);
  return a1;
}

char *initializeWithTake for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v8 = *(int *)(v7 + 28);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v14(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)&a1[*(int *)(v7 + 32)] = *(_OWORD *)&a2[*(int *)(v7 + 32)];
  v14(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v11);
  return a1;
}

char *assignWithTake for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v9 = *(int *)(v8 + 28);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_25B37F640();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = *(int *)(v8 + 32);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = v22;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecordVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B2C6920);
}

uint64_t sub_25B2C6920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_25B37F640();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B2C6A2C);
}

uint64_t sub_25B2C6A2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_25B37F640();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_25B2C6B30()
{
  uint64_t result = type metadata accessor for ReplicatorRecord.ID(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_25B37F640();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorRecordVersion.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2C6CC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordVersion.CodingKeys()
{
  return &type metadata for ReplicatorRecordVersion.CodingKeys;
}

unint64_t sub_25B2C6D00()
{
  unint64_t result = qword_26A4EBB00;
  if (!qword_26A4EBB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBB00);
  }
  return result;
}

unint64_t sub_25B2C6D58()
{
  unint64_t result = qword_26B340FC8;
  if (!qword_26B340FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FC8);
  }
  return result;
}

unint64_t sub_25B2C6DB0()
{
  unint64_t result = qword_26B340FC0;
  if (!qword_26B340FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FC0);
  }
  return result;
}

uint64_t sub_25B2C6E04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t XPCInterfaceDomain.domain.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCInterfaceDomain.domain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*XPCInterfaceDomain.domain.modify())()
{
  return nullsub_1;
}

uint64_t XPCInterfaceDomain.machName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCInterfaceDomain.machName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*XPCInterfaceDomain.machName.modify())()
{
  return nullsub_1;
}

ReplicatorServices::XPCInterfaceDomain __swiftcall XPCInterfaceDomain.init(domain:machName:)(Swift::String domain, Swift::String machName)
{
  *uint64_t v2 = domain;
  v2[1] = machName;
  result.machName = machName;
  result.domain = domain;
  return result;
}

void static XPCInterfaceDomain.replicatorServices.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000025B38A580;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000025B38A5A0;
}

id BSServiceConnectionEndpoint.init<A>(definition:instance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24))(&v13, a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  uint64_t v9 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v10 = (void *)sub_25B37F970();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_endpointForMachName_service_instance_, v8, v9, v10);

  return v11;
}

Swift::Void __swiftcall BSServiceConnectionListenerConfiguring.setDomain(_:)(ReplicatorServices::XPCInterfaceDomain a1)
{
  id v2 = (id)sub_25B37F970();
  objc_msgSend(v1, sel_setDomain_, v2);
}

id BSServiceConnection.init<A>(endpointedDefinedBy:instance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRelease();
  sub_25B2C7344();
  id v8 = BSServiceConnectionEndpoint.init<A>(definition:instance:)(a1, 0, 0, a4, a5);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_connectionWithEndpoint_, v8);

    if (v10) {
  }
    }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB08);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_25B3819A0;
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    sub_25B37FE70();
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000025;
    unint64_t v17 = 0x800000025B38A5C0;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 24))(v15, a4, a5);
    swift_bridgeObjectRelease();
    sub_25B37FA40();
    swift_bridgeObjectRelease();
    unint64_t v12 = v16;
    unint64_t v13 = v17;
    *(void *)(v11 + 56) = MEMORY[0x263F8D310];
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v13;
    sub_25B380230();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

unint64_t sub_25B2C7344()
{
  unint64_t result = qword_26A4EB260;
  if (!qword_26A4EB260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A4EB260);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCInterfaceDomain(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for XPCInterfaceDomain()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for XPCInterfaceDomain(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCInterfaceDomain(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for XPCInterfaceDomain(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCInterfaceDomain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCInterfaceDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCInterfaceDomain()
{
  return &type metadata for XPCInterfaceDomain;
}

uint64_t dispatch thunk of static XPCInterfaceDefinition.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static XPCInterfaceDefinition.serviceName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ReplicatorServices::ReplicatorSchedule_optional __swiftcall ReplicatorSchedule.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (ReplicatorServices::ReplicatorSchedule_optional)rawValue;
}

uint64_t ReplicatorSchedule.rawValue.getter()
{
  return *v0;
}

unint64_t sub_25B2C75E0()
{
  unint64_t result = qword_26A4EBB10;
  if (!qword_26A4EBB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBB10);
  }
  return result;
}

void *sub_25B2C7634@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_25B2C7654()
{
  return sub_25B37FAB0();
}

uint64_t sub_25B2C76B4()
{
  return sub_25B37FA90();
}

unsigned char *storeEnumTagSinglePayload for ReplicatorSchedule(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2C77D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorSchedule()
{
  return &type metadata for ReplicatorSchedule;
}

unint64_t sub_25B2C7808()
{
  unint64_t result = qword_26B341560;
  if (!qword_26B341560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341560);
  }
  return result;
}

uint64_t ZoneDescriptor.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ZoneDescriptor.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ZoneDescriptor.id.modify())()
{
  return nullsub_1;
}

void ZoneDescriptor.publicationMethod.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *ZoneDescriptor.publicationMethod.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*ZoneDescriptor.publicationMethod.modify())()
{
  return nullsub_1;
}

void ZoneDescriptor.replicationPriority.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *ZoneDescriptor.replicationPriority.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*ZoneDescriptor.replicationPriority.modify())()
{
  return nullsub_1;
}

__n128 ZoneDescriptor.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t ZoneDescriptor.compressFiles.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ZoneDescriptor.compressFiles.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*ZoneDescriptor.compressFiles.modify())()
{
  return nullsub_1;
}

__n128 ZoneDescriptor.init(id:publicationMethod:replicationPriority:protocolVersion:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a3;
  char v7 = *a4;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = v6;
  *(unsigned char *)(a6 + 17) = v7;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  *(unsigned char *)(a6 + 40) = 0;
  return result;
}

__n128 ZoneDescriptor.init(id:publicationMethod:replicationPriority:protocolVersion:compressFiles:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, __n128 *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7 = *a3;
  char v8 = *a4;
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = v7;
  *(unsigned char *)(a7 + 17) = v8;
  __n128 result = *a5;
  *(__n128 *)(a7 + 24) = *a5;
  *(unsigned char *)(a7 + 40) = a6;
  return result;
}

uint64_t ZoneDescriptor.hash(into:)()
{
  return sub_25B380270();
}

uint64_t ZoneDescriptor.hashValue.getter()
{
  return sub_25B380290();
}

uint64_t sub_25B2C7B3C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B2C7B54()
{
  return sub_25B380290();
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_25B380000();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v2 = v1;
  result.value = ZoneDescriptor.CodingKeys.init(rawValue:)(stringValue).value;
  *uint64_t v2 = v4;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  unsigned char *v1 = 5;
  return (ReplicatorServices::ZoneDescriptor::CodingKeys_optional)intValue;
}

uint64_t ZoneDescriptor.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t ZoneDescriptor.CodingKeys.rawValue.getter()
{
  unint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 4:
      unint64_t result = 0x73736572706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t ZoneDescriptor.CodingKeys.stringValue.getter()
{
  unint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 4:
      unint64_t result = 0x73736572706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B2C7E44(char *a1, char *a2)
{
  return sub_25B35DF18(*a1, *a2);
}

uint64_t sub_25B2C7E50()
{
  return sub_25B35D770();
}

uint64_t sub_25B2C7E58()
{
  return sub_25B35DA60();
}

uint64_t sub_25B2C7E60()
{
  return sub_25B35DB5C();
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional sub_25B2C7E68(Swift::String *a1)
{
  return ZoneDescriptor.CodingKeys.init(rawValue:)(*a1);
}

unint64_t sub_25B2C7E74@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ZoneDescriptor.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional sub_25B2C7EA0@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  result.value = ZoneDescriptor.CodingKeys.init(rawValue:)(*(Swift::String *)&a1).value;
  *a2 = v5;
  return result;
}

void sub_25B2C7ED8(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_25B2C7EE4(uint64_t a1)
{
  unint64_t v2 = sub_25B2C8588();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B2C7F20(uint64_t a1)
{
  unint64_t v2 = sub_25B2C8588();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ZoneDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341840);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B2C8588();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v19) = 0;
  uint64_t v9 = sub_25B380090();
  uint64_t v11 = v10;
  char v22 = 1;
  sub_25B2C85DC();
  swift_bridgeObjectRetain();
  sub_25B3800B0();
  int v21 = v19;
  char v22 = 2;
  sub_25B2C8630();
  sub_25B3800B0();
  int v18 = v19;
  char v22 = 3;
  sub_25B2C8684();
  sub_25B3800B0();
  uint64_t v16 = v20;
  uint64_t v17 = v19;
  LOBYTE(v19) = 4;
  char v13 = sub_25B380040();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v21;
  *(unsigned char *)(a2 + 17) = v18;
  uint64_t v14 = v16;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = v13 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t ZoneDescriptor.encode(to:)(void *a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B3417C8) - 8);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v22 = *(unsigned __int8 *)(v1 + 16);
  int v19 = *(unsigned __int8 *)(v1 + 17);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v17 = *(void *)(v1 + 32);
  uint64_t v18 = v7;
  v16[1] = *(unsigned __int8 *)(v1 + 40);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_25B2C8588();
  sub_25B3802C0();
  LOBYTE(v20) = 0;
  sub_25B380140();
  if (!v2)
  {
    char v12 = v19;
    uint64_t v14 = v17;
    uint64_t v13 = v18;
    LOBYTE(v20) = v22;
    char v23 = 1;
    sub_25B2C86D8();
    sub_25B380160();
    LOBYTE(v20) = v12;
    char v23 = 2;
    sub_25B2C872C();
    sub_25B380160();
    uint64_t v20 = v13;
    uint64_t v21 = v14;
    char v23 = 3;
    sub_25B2C8780();
    sub_25B380160();
    LOBYTE(v20) = 4;
    sub_25B380150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v11);
}

uint64_t sub_25B2C8488@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ZoneDescriptor.init(from:)(a1, a2);
}

uint64_t sub_25B2C84A0(void *a1)
{
  return ZoneDescriptor.encode(to:)(a1);
}

uint64_t _s18ReplicatorServices14ZoneDescriptorV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 17);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  int v6 = *(unsigned __int8 *)(a1 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  int v8 = *(unsigned __int8 *)(a2 + 17);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  int v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t result = 0;
    if ((v2 ^ v7) == 1) {
      return result;
    }
  }
  else
  {
    char v13 = sub_25B3801A0();
    uint64_t result = 0;
    if ((v13 & 1) == 0 || v2 != v7) {
      return result;
    }
  }
  if (v3 == v8 && v5 == v10 && v4 == v9) {
    return v6 ^ v11 ^ 1u;
  }
  return result;
}

unint64_t sub_25B2C8588()
{
  unint64_t result = qword_26B3417D0;
  if (!qword_26B3417D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417D0);
  }
  return result;
}

unint64_t sub_25B2C85DC()
{
  unint64_t result = qword_26B341758;
  if (!qword_26B341758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341758);
  }
  return result;
}

unint64_t sub_25B2C8630()
{
  unint64_t result = qword_26B341760;
  if (!qword_26B341760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341760);
  }
  return result;
}

unint64_t sub_25B2C8684()
{
  unint64_t result = qword_26B341728;
  if (!qword_26B341728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341728);
  }
  return result;
}

unint64_t sub_25B2C86D8()
{
  unint64_t result = qword_26B3415A8;
  if (!qword_26B3415A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415A8);
  }
  return result;
}

unint64_t sub_25B2C872C()
{
  unint64_t result = qword_26B3415B8;
  if (!qword_26B3415B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415B8);
  }
  return result;
}

unint64_t sub_25B2C8780()
{
  unint64_t result = qword_26B3414F8;
  if (!qword_26B3414F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3414F8);
  }
  return result;
}

uint64_t sub_25B2C87D4()
{
  return MEMORY[0x263F8D320];
}

unint64_t sub_25B2C87E4()
{
  unint64_t result = qword_26A4EBB18;
  if (!qword_26A4EBB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBB18);
  }
  return result;
}

unint64_t sub_25B2C883C()
{
  unint64_t result = qword_26A4EBB20;
  if (!qword_26A4EBB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBB20);
  }
  return result;
}

unint64_t sub_25B2C8894()
{
  unint64_t result = qword_26B3417E0;
  if (!qword_26B3417E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417E0);
  }
  return result;
}

unint64_t sub_25B2C88EC()
{
  unint64_t result = qword_26B3417D8;
  if (!qword_26B3417D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417D8);
  }
  return result;
}

uint64_t destroy for ZoneDescriptor()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZoneDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoneDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoneDescriptor()
{
  return &type metadata for ZoneDescriptor;
}

uint64_t getEnumTagSinglePayload for ZoneDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ZoneDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2C8C7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoneDescriptor.CodingKeys()
{
  return &type metadata for ZoneDescriptor.CodingKeys;
}

uint64_t dispatch thunk of ReplicatorClientRegistering.isRegistered.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.registrationUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.register()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.unregister()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_25B2C8D2C()
{
  uint64_t v1 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned int v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(*(void *)(v0
                              + OBJC_IVAR____TtC18ReplicatorServices33ReplicatorControlClientObjcBridge_controlClient)
                  + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v5 = v21;
  uint64_t v6 = *(void *)(v21 + 16);
  if (v6)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_25B37FF10();
    uint64_t v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v8 = *(void *)(v2 + 72);
    uint64_t v16 = v5;
    uint64_t v17 = v8;
    uint64_t v18 = v1;
    do
    {
      sub_25B2C9E68(v7, (uint64_t)v4);
      uint64_t v19 = qword_25B381E40[v4[*(int *)(v1 + 32)]];
      id v9 = objc_allocWithZone((Class)RPLReplicatorDevice);
      swift_bridgeObjectRetain();
      uint64_t v10 = (void *)sub_25B37F600();
      int v11 = (void *)sub_25B37F600();
      char v12 = (void *)sub_25B37F970();
      swift_bridgeObjectRelease();
      char v13 = (void *)sub_25B37F580();
      objc_msgSend(v9, sel_initWithDeviceID_relationshipID_name_deviceType_initialDiscoveryDate_, v10, v11, v12, v19, v13, v16);

      sub_25B2C9ECC((uint64_t)v4);
      sub_25B37FEE0();
      sub_25B37FF20();
      uint64_t v1 = v18;
      sub_25B37FF30();
      sub_25B37FEF0();
      v7 += v17;
      --v6;
    }
    while (v6);
    uint64_t v14 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v14;
}

uint64_t sub_25B2C9018()
{
  return sub_25B2C92B4();
}

void sub_25B2C9048(Swift::Bool a1)
{
  ReplicatorControlClient.setEnabled(_:)(a1);
  if (v1)
  {
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_25B37F780();
    __swift_project_value_buffer(v2, (uint64_t)qword_26A4EB630);
    id v3 = v1;
    id v4 = v1;
    oslog = sub_25B37F760();
    os_log_type_t v5 = sub_25B37FCB0();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138543362;
      id v8 = v1;
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      sub_25B37FD70();
      *uint64_t v7 = v10;

      _os_log_impl(&dword_25B2C1000, oslog, v5, "Could not set replicator enabled state: %{public}@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F8);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v7, -1, -1);
      MEMORY[0x2611621B0](v6, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t sub_25B2C929C()
{
  return sub_25B2C92B4();
}

uint64_t sub_25B2C92B4()
{
  sub_25B37FD10();
  return v1;
}

uint64_t sub_25B2C933C(void *a1)
{
  id v1 = a1;
  sub_25B37FD10();

  return v3;
}

uint64_t sub_25B2C93C0()
{
  sub_25B37FD10();
  uint64_t result = 0;
  if (v1 == 1)
  {
    MEMORY[0x270FA5388](0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
    sub_25B37FD10();
    return v1;
  }
  return result;
}

void sub_25B2C9534(Swift::OpaquePointer a1)
{
  if (a1._rawValue)
  {
    sub_25B37FD10();
    ReplicatorControlClient.setAllowList(idsIDs:)(a1);
    if (v2)
    {
      if (qword_26A4EB648 != -1) {
        swift_once();
      }
      uint64_t v3 = sub_25B37F780();
      __swift_project_value_buffer(v3, (uint64_t)qword_26A4EB630);
      id v4 = v2;
      id v5 = v2;
      uint64_t v6 = sub_25B37F760();
      os_log_type_t v7 = sub_25B37FCB0();
      if (os_log_type_enabled(v6, v7))
      {
        id v8 = (uint8_t *)swift_slowAlloc();
        id v9 = (void *)swift_slowAlloc();
        *(_DWORD *)id v8 = 138543362;
        id v10 = v2;
        uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
        sub_25B37FD70();
        *id v9 = v11;

        _os_log_impl(&dword_25B2C1000, v6, v7, "Could not set replicator allow list: %{public}@", v8, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F8);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v9, -1, -1);
        MEMORY[0x2611621B0](v8, -1, -1);
      }
      else
      {
      }
    }
  }
  else
  {
    sub_25B37FD10();
  }
}

uint64_t sub_25B2C9824()
{
  uint64_t v0 = sub_25B37F640();
  MEMORY[0x270FA5388](v0);
  sub_25B37FD10();
  return v2;
}

id ReplicatorControlClientObjcBridge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ReplicatorControlClientObjcBridge.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC18ReplicatorServices33ReplicatorControlClientObjcBridge_controlClient;
  type metadata accessor for ReplicatorControlClient();
  swift_allocObject();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = ReplicatorControlClient.init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ReplicatorControlClientObjcBridge();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ReplicatorControlClientObjcBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReplicatorControlClientObjcBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_25B2C9E4C@<X0>(void *a1@<X8>)
{
  return sub_25B34AA34(*(void *)(v1 + 16), a1);
}

uint64_t sub_25B2C9E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B2C9ECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_25B2C9F28(unsigned char *a1@<X8>)
{
  sub_25B34E94C(*(void *)(v1 + 16), a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_25B2C9F7C@<X0>(unsigned char *a1@<X8>)
{
  return sub_25B34DE44(a1);
}

uint64_t sub_25B2C9F98@<X0>(uint64_t *a1@<X8>)
{
  return sub_25B34E350(a1);
}

uint64_t sub_25B2C9FB4()
{
  return sub_25B34D9A8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_25B2C9FD4@<X0>(void *a1@<X8>)
{
  return sub_25B34C448(*(void *)(v1 + 16), a1);
}

unint64_t sub_25B2C9FF0()
{
  unint64_t result = qword_26A4EC110;
  if (!qword_26A4EC110)
  {
    sub_25B37F640();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC110);
  }
  return result;
}

uint64_t sub_25B2CA048(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_25B2CA370(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25B2CA52C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25B2CA52C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t type metadata accessor for ReplicatorControlClientObjcBridge()
{
  return self;
}

uint64_t method lookup function for ReplicatorControlClientObjcBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicatorControlClientObjcBridge);
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.devices()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.isEnabled()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.setEnabled(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.isAllowListEnabled()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.allowList()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.setAllowList(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.pushToken(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t sub_25B2CA2C4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25B2CA2D8(a1, a2);
  }
  return a1;
}

uint64_t sub_25B2CA2D8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_25B2CA330()
{
  unint64_t result = qword_26A4EBB38;
  if (!qword_26A4EBB38)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A4EBB38);
  }
  return result;
}

uint64_t sub_25B2CA370(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_25B37FD80();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_25B2CA588(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_25B37FED0();
  if (!v8)
  {
    sub_25B37FF80();
    __break(1u);
LABEL_17:
    uint64_t result = sub_25B37FFD0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_25B2CA52C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25B2CA588(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25B2CA620(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25B2CA800(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25B2CA800(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25B2CA620(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_25B2CA798(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_25B37FE80();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_25B37FF80();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_25B37FA50();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_25B37FFD0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_25B37FF80();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_25B2CA798(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340E88);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_25B2CA800(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B340E88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B2CA954@<X0>(unsigned char *a1@<X8>)
{
  return sub_25B2C9F7C(a1);
}

void sub_25B2CA96C(unsigned char *a1@<X8>)
{
}

uint64_t sub_25B2CA984()
{
  return sub_25B2C9FB4();
}

uint64_t sub_25B2CA99C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_25B37FC50();
  if (!v20) {
    return sub_25B37FB30();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_25B37F8D0();
  uint64_t v35 = sub_25B37FF60();
  sub_25B37FF00();
  v41 = v19;
  uint64_t result = sub_25B37FC40();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    char v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))sub_25B37FC70();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_25B37FF40();
      sub_25B37FC60();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t sub_25B2CAD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = type metadata accessor for ReplicatorStore.Entry();
  return sub_25B2E3598(a2, a4 + *(int *)(v6 + 36), type metadata accessor for ReplicatorRecord);
}

uint64_t sub_25B2CAE30()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_25B37F910();
  sub_25B2CBCB8((uint64_t)sub_25B2CB0BC, v0, v1);
  return v3;
}

uint64_t sub_25B2CAF20()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2CB0BC()
{
  return sub_25B2CAF20();
}

uint64_t sub_25B2CB0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a1;
  uint64_t v35 = a3;
  uint64_t v6 = sub_25B37FD60();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = *(void *)(a4 + 24);
  v38 = (char *)v33 - v8;
  uint64_t v39 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for ReplicatorStore.Entry();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = TupleTypeMetadata2 - 8;
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v41 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = *(int *)(v12 + 56);
  uint64_t v17 = (char *)v33 + v16 - v15;
  v33[1] = a2;
  uint64_t v34 = v17;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  v36 = (char *)v33 - v15;
  uint64_t v37 = v19;
  uint64_t v20 = *(void (**)(void))(v19 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v20)((char *)v33 - v15, a2, AssociatedTypeWitness);
  uint64_t v21 = *(void *)(v10 - 8);
  int v22 = *(void (**)(char *, uint64_t))(v21 + 16);
  char v23 = v17;
  uint64_t v24 = v18;
  uint64_t v25 = v18;
  uint64_t v26 = v10;
  v22(v23, v24);
  uint64_t v27 = &v41[*(int *)(v12 + 56)];
  v20();
  ((void (*)(char *, uint64_t, uint64_t))v22)(v27, v25, v10);
  uint64_t v28 = v35;
  uint64_t v29 = *(void *)(v35 - 8);
  uint64_t v30 = v38;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v38, v27, v35);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v27, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v28);
  swift_getAssociatedConformanceWitness();
  sub_25B37F910();
  sub_25B37F930();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v41, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v31)(v34, v26);
}

uint64_t sub_25B2CB420(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB828);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_25B2E344C(a1, &qword_26A4EB828);
    unint64_t v13 = sub_25B2D5F28(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_25B2DACC8();
        uint64_t v17 = v21;
      }
      sub_25B2E3598(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8, type metadata accessor for ReplicatorRecord.Value);
      sub_25B350C28(v15, v17);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_25B2E344C((uint64_t)v8, &qword_26A4EB828);
  }
  else
  {
    sub_25B2E3598(a1, (uint64_t)v12, type metadata accessor for ReplicatorRecord.Value);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_25B2D9488((uint64_t)v12, a2, v18);
    *uint64_t v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25B2CB680(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB830);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_25B2E344C(a1, &qword_26A4EB830);
    sub_25B311410(a2, (uint64_t)v8);
    sub_25B2E3600((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
    return sub_25B2E344C((uint64_t)v8, &qword_26A4EB830);
  }
  else
  {
    sub_25B2E3598(a1, (uint64_t)v11, type metadata accessor for ReplicatorRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_25B2D97CC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    return sub_25B2E3600((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
  }
}

uint64_t sub_25B2CB868(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F640();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_25B2E344C(a1, &qword_26B3414D0);
    sub_25B3115D8(a2, (uint64_t)v8);
    sub_25B2E3600((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
    return sub_25B2E344C((uint64_t)v8, &qword_26B3414D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_25B2D9AF8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    return sub_25B2E3600((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
  }
}

uint64_t sub_25B2CBA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F500();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_25B2E344C(a1, &qword_26B340CE0);
    unint64_t v13 = sub_25B2D5F28(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_25B2DC52C();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      sub_25B3519FC(v15, v17);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_25B2E344C((uint64_t)v8, &qword_26B340CE0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_25B2D9CD4((uint64_t)v12, a2, v18);
    *uint64_t v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

void sub_25B2CBCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(void *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_25B2E3958();
  os_unfair_lock_unlock(v3);
}

void *ReplicatorStore.__allocating_init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_allocObject();
  uint64_t v17 = sub_25B2DC7BC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  swift_release();
  swift_release();
  return v17;
}

void *ReplicatorStore.init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_25B2DC7BC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  swift_release();
  swift_release();
  return v9;
}

uint64_t sub_25B2CBE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB858);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37FBA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = *(void *)(v4 + 80);
  v10[5] = *(void *)(v4 + 88);
  v10[6] = v9;
  sub_25B2D28E0((uint64_t)v7, a2, (uint64_t)v10);
  return swift_release();
}

void sub_25B2CBFD8()
{
  uint64_t v1 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v81 = sub_25B37FD60();
  v76 = *(void (***)(uint64_t, uint64_t))(v81 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v81);
  v88 = (char *)&v70 - v3;
  uint64_t v82 = v1;
  v77 = *(void (***)(char *, uint64_t))(v1 - 8);
  MEMORY[0x270FA5388](v2);
  v80 = (char *)&v70 - v4;
  uint64_t v5 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v89 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v86 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB820);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  unint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v16 - 8);
  char v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v0[5];
  uint64_t v20 = v0[10];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
  v84 = v15;
  v85 = v13;
  v90 = v9;
  uint64_t v22 = sub_25B2D12EC((void (*)(char *))sub_25B2E31B4, (uint64_t)v0, v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = v0[5];
  uint64_t v24 = v0[10];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v23);
  uint64_t v25 = sub_25B37F500();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v18, 1, 1, v25);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, void, void, uint64_t, uint64_t))(v24 + 40))(v22, v18, v0[15], 0, v23, v24);
  sub_25B2E344C((uint64_t)v18, &qword_26B340CE0);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0;
  uint64_t v79 = v26;
  uint64_t v30 = *(void *)(v26 + 64);
  uint64_t v29 = v26 + 64;
  uint64_t v28 = v30;
  uint64_t v31 = 1 << *(unsigned char *)(v29 - 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v28;
  unint64_t v34 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v35 = v77;
  v83 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 6);
  ++v77;
  v78 = (uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 4);
  ++v76;
  unint64_t v71 = v34 - 1;
  uint64_t v74 = v29;
  int64_t v75 = v34;
  uint64_t v72 = v29 + 40;
  unint64_t v73 = v34 - 5;
  uint64_t v36 = v82;
  uint64_t v37 = v89;
  if (!v33) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v46 = __clz(__rbit64(v33));
  v33 &= v33 - 1;
  unint64_t v47 = v27;
  unint64_t v48 = v46 | (v27 << 6);
LABEL_7:
  uint64_t v49 = v79;
  uint64_t v50 = (uint64_t)v85;
  sub_25B2E3660(*(void *)(v79 + 48) + *(void *)(v86 + 72) * v48, (uint64_t)v85, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v51 = *(void *)(v49 + 56) + *(void *)(v87 + 72) * v48;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
  sub_25B2E3660(v51, v50 + *(int *)(v52 + 48), type metadata accessor for ReplicatorRecord);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v50, 0, 1, v52);
  uint64_t v53 = (uint64_t)v88;
  while (1)
  {
    uint64_t v57 = v50;
    uint64_t v58 = (uint64_t)v84;
    sub_25B2E31F0(v57, (uint64_t)v84, &qword_26A4EB820);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v58, 1, v59) == 1)
    {
      swift_release();
      return;
    }
    uint64_t v60 = v58 + *(int *)(v59 + 48);
    sub_25B2E3598(v58, (uint64_t)v90, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E3598(v60, v37, type metadata accessor for ReplicatorRecord);
    sub_25B2D4790(v37, v53);
    if ((*v83)(v53, 1, v36) == 1)
    {
      sub_25B2E3600(v37, type metadata accessor for ReplicatorRecord);
      sub_25B2E3600((uint64_t)v90, type metadata accessor for ReplicatorRecord.ID);
      (*v76)(v53, v81);
      unint64_t v27 = v47;
      if (v33) {
        goto LABEL_6;
      }
    }
    else
    {
      v38 = v80;
      uint64_t v39 = (*v78)(v80, v53, v36);
      uint64_t v40 = MEMORY[0x270FA5388](v39);
      *(&v70 - 4) = (uint64_t)v0;
      *(&v70 - 3) = (uint64_t)v38;
      uint64_t v41 = (uint64_t)v90;
      *(&v70 - 2) = (uint64_t)v90;
      MEMORY[0x270FA5388](v40);
      *(&v70 - 2) = (uint64_t)sub_25B2E31D0;
      *(&v70 - 1) = v42;
      v44 = v43 + 4;
      os_unfair_lock_lock(v43 + 4);
      sub_25B2E39D4();
      os_unfair_lock_unlock(v44);
      uint64_t v36 = v82;
      sub_25B2E3600(v89, type metadata accessor for ReplicatorRecord);
      v45 = v38;
      uint64_t v37 = v89;
      (*v77)(v45, v36);
      sub_25B2E3600(v41, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v27 = v47;
      if (v33) {
        goto LABEL_6;
      }
    }
LABEL_8:
    int64_t v54 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v54 >= v75)
    {
      unint64_t v47 = v27;
LABEL_13:
      uint64_t v53 = (uint64_t)v88;
      uint64_t v50 = (uint64_t)v85;
      goto LABEL_14;
    }
    unint64_t v55 = *(void *)(v74 + 8 * v54);
    if (v55) {
      goto LABEL_11;
    }
    if ((uint64_t)(v27 + 2) >= v75)
    {
      unint64_t v47 = v27 + 1;
      goto LABEL_13;
    }
    unint64_t v55 = *(void *)(v74 + 8 * (v27 + 2));
    if (v55)
    {
      int64_t v54 = v27 + 2;
LABEL_11:
      unint64_t v33 = (v55 - 1) & v55;
      unint64_t v48 = __clz(__rbit64(v55)) + (v54 << 6);
      unint64_t v47 = v54;
      goto LABEL_7;
    }
    unint64_t v47 = v27 + 3;
    if ((uint64_t)(v27 + 3) >= v75)
    {
      unint64_t v47 = v27 + 2;
      goto LABEL_13;
    }
    unint64_t v55 = *(void *)(v74 + 8 * v47);
    if (v55)
    {
      int64_t v54 = v27 + 3;
      goto LABEL_11;
    }
    int64_t v54 = v27 + 4;
    if ((uint64_t)(v27 + 4) >= v75) {
      goto LABEL_13;
    }
    unint64_t v55 = *(void *)(v74 + 8 * v54);
    if (v55) {
      goto LABEL_11;
    }
    uint64_t v53 = (uint64_t)v88;
    uint64_t v50 = (uint64_t)v85;
    while (v73 != v27)
    {
      unint64_t v55 = *(void *)(v72 + 8 * v27++);
      if (v55)
      {
        int64_t v54 = v27 + 4;
        goto LABEL_11;
      }
    }
    unint64_t v47 = v71;
LABEL_14:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v50, 1, 1, v56);
    unint64_t v33 = 0;
  }
  __break(1u);
  swift_once();
  uint64_t v61 = sub_25B37F780();
  __swift_project_value_buffer(v61, (uint64_t)qword_26B3417A8);
  id v62 = 0;
  id v63 = 0;
  v64 = sub_25B37F760();
  os_log_type_t v65 = sub_25B37FCB0();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    v67 = (void *)swift_slowAlloc();
    *(_DWORD *)v66 = 138543362;
    id v68 = 0;
    uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v91 = v69;
    sub_25B37FD70();
    void *v67 = v69;

    _os_log_impl(&dword_25B2C1000, v64, v65, "Could not fetch initial record set: %{public}@", v66, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F8);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v67, -1, -1);
    MEMORY[0x2611621B0](v66, -1, -1);
  }
  else
  {
  }
}

void sub_25B2CCACC()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x270FA5388](v4);
    MEMORY[0x270FA5388](v5);
    uint64_t v7 = v6 + 4;
    os_unfair_lock_lock(v6 + 4);
    sub_25B2E39D4();
    os_unfair_lock_unlock(v7);
    if (v1) {
      __break(1u);
    }
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B37F780();
    __swift_project_value_buffer(v8, (uint64_t)qword_26B3417A8);
    uint64_t v9 = sub_25B37F760();
    os_log_type_t v10 = sub_25B37FCB0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_25B2C1000, v9, v10, "Client is not registered", v11, 2u);
      MEMORY[0x2611621B0](v11, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v12 = 2;
    *(void *)(v12 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_25B2CCCD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v26 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v6 = sub_25B37FD60();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v23 - v11;
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x261161040](v28, v13, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
    uint64_t v16 = sub_25B37F640();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v29, 1, 1, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v5);
    uint64_t v18 = v27;
    sub_25B2E3660((uint64_t)&v12[*(int *)(v5 + 36)], v27, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v5);
    uint64_t v19 = v18 + *(int *)(v26 + 20);
    uint64_t v20 = sub_25B37F640();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v29, v19, v20);
    sub_25B2E3600(v18, type metadata accessor for ReplicatorRecord);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
  }
}

void sub_25B2CD0AC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  if (v3)
  {
    uint64_t v4 = MEMORY[0x270FA5388](v3);
    MEMORY[0x270FA5388](v4);
    uint64_t v6 = v5 + 4;
    os_unfair_lock_lock(v5 + 4);
    sub_25B2DCD6C();
    os_unfair_lock_unlock(v6);
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_25B37F780();
    __swift_project_value_buffer(v7, (uint64_t)qword_26B3417A8);
    uint64_t v8 = sub_25B37F760();
    os_log_type_t v9 = sub_25B37FCB0();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_25B2C1000, v8, v9, "Client is not registered", v10, 2u);
      MEMORY[0x2611621B0](v10, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 2;
    *(void *)(v11 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_25B2CD2C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  int v50 = a4;
  uint64_t v53 = a3;
  uint64_t v55 = a2;
  uint64_t v7 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v8 = sub_25B37FD60();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v47 - v10;
  uint64_t v54 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v47 - v12;
  swift_beginAccess();
  uint64_t v14 = a1[31];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x261161040](v55, v14, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  uint64_t v17 = v7;
  uint64_t v18 = v54;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v49);
    uint64_t v19 = sub_25B37F500();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v52, 1, 1, v19);
  }
  else
  {
    uint64_t v21 = v13;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v11, v17);
    if (v50) {
      uint64_t v53 = a1[15];
    }
    uint64_t v22 = a1[5];
    uint64_t v23 = a1[10];
    __swift_project_boxed_opaque_existential_1(a1 + 2, v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D88);
    uint64_t v24 = *(void *)(type metadata accessor for ReplicatorRecord.ID(0) - 8);
    unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_25B3819A0;
    uint64_t v27 = v26 + v25;
    uint64_t v28 = v21;
    uint64_t v29 = &v21[*(int *)(v17 + 36)];
    sub_25B2E3660((uint64_t)v29, v27, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v30 = v56;
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v23 + 48))(v26, v51, v53, 0, v22, v23);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      if (*(void *)(v32 + 16) && (unint64_t v33 = sub_25B2D5F6C(v29), (v34 & 1) != 0))
      {
        uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v35 + 16))
        {
          unint64_t v36 = sub_25B2D5F28(v53);
          uint64_t v37 = v52;
          if (v38)
          {
            uint64_t v56 = *(void *)(v35 + 56);
            unint64_t v39 = v36;
            uint64_t v40 = sub_25B37F500();
            uint64_t v41 = *(void *)(v40 - 8);
            uint64_t v42 = v41;
            uint64_t v43 = v56 + *(void *)(v41 + 72) * v39;
            uint64_t v28 = v21;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v37, v43, v40);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v37, 0, 1, v40);
          }
          else
          {
            uint64_t v46 = sub_25B37F500();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v37, 1, 1, v46);
          }
        }
        else
        {
          uint64_t v45 = sub_25B37F500();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v52, 1, 1, v45);
        }
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v28, v17);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
        uint64_t v44 = sub_25B37F500();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v52, 1, 1, v44);
      }
    }
  }
}

void sub_25B2CD8BC()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x270FA5388](v4);
    MEMORY[0x270FA5388](v5);
    uint64_t v7 = v6 + 4;
    os_unfair_lock_lock(v6 + 4);
    sub_25B2E39D4();
    os_unfair_lock_unlock(v7);
    if (v1) {
      __break(1u);
    }
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B37F780();
    __swift_project_value_buffer(v8, (uint64_t)qword_26B3417A8);
    uint64_t v9 = sub_25B37F760();
    os_log_type_t v10 = sub_25B37FCB0();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_25B2C1000, v9, v10, "Client is not registered", v11, 2u);
      MEMORY[0x2611621B0](v11, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v12 = 2;
    *(void *)(v12 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_25B2CDAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v4 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v5 = sub_25B37FD60();
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v21 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v19 - v10;
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x261161040](v22, v12, AssociatedTypeWitness, v4, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
    uint64_t v15 = type metadata accessor for ReplicatorRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v23, 1, 1, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v4);
    uint64_t v17 = v23;
    sub_25B2E3660((uint64_t)&v11[*(int *)(v4 + 36)], v23, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v4);
    uint64_t v18 = type metadata accessor for ReplicatorRecord(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
  }
}

uint64_t sub_25B2CDDD8(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *a3;
  uint64_t v13 = *a2;
  HIBYTE(v12) = v9;
  uint64_t v10 = sub_25B37F5D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_25B2CDEE0(a1, &v13, (unsigned __int8 *)&v12 + 7);
  return sub_25B2E344C((uint64_t)v8, &qword_26B340F80);
}

uint64_t sub_25B2CDEE0(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v9 = *a3;
  uint64_t v14 = *a2;
  unsigned __int8 v13 = v9;
  uint64_t v10 = sub_25B37F5D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  uint64_t v12 = 0;
  sub_25B2CDFFC(a1, &v14, &v13, (uint64_t)v8, &v12);
  return sub_25B2E344C((uint64_t)v8, &qword_26B340F80);
}

uint64_t sub_25B2CDFFC(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v141 = a4;
  uint64_t v171 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v144 = (uint64_t)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v145 = *(void *)(v143 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v143);
  v142 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v136 - v15;
  uint64_t v17 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v17 - 8);
  v149 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v140 = (uint64_t)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v136 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB5F0);
  MEMORY[0x270FA5388](v24 - 8);
  v154 = (char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = (void *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v166 = *(v168 - 1);
  MEMORY[0x270FA5388](v168);
  unint64_t v167 = (unint64_t)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_25B37F640();
  uint64_t v151 = *(void *)(v156 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v156);
  v146 = (char *)&v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v147 = (char *)&v136 - v30;
  MEMORY[0x270FA5388](v29);
  v157 = (char *)&v136 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v32 - 8);
  *(void *)&long long v172 = (char *)&v136 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v170 = *(void *)(v34 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v155 = (uint64_t)&v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  v150 = (char *)&v136 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v136 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v136 - v42;
  uint64_t v153 = *a2;
  int v179 = *a3;
  uint64_t v139 = *a5;
  uint64_t v44 = *(void *)(v7 + 40);
  uint64_t v45 = *(void *)(v7 + 56);
  v169 = (void *)(v7 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v7 + 16), v44);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45) & 1) == 0)
  {
    if (qword_26B3417C0 != -1) {
      goto LABEL_68;
    }
    goto LABEL_5;
  }
  sub_25B2E2FE0(v7 + 144, (uint64_t)&v174, (uint64_t *)&unk_26A4EB838);
  v152 = (void *)v7;
  if ((void)v175)
  {
    sub_25B2DCE7C(&v174, &v177);
  }
  else
  {
    uint64_t v52 = *(void *)(v7 + 40);
    long long v165 = *(_OWORD *)(v7 + 64);
    uint64_t v53 = __swift_project_boxed_opaque_existential_1(v169, v52);
    *(void *)v178 = v52;
    *(_OWORD *)&v178[8] = v165;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v177);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v52 - 8) + 16))(boxed_opaque_existential_2, v53, v52);
    sub_25B2E344C((uint64_t)&v174, (uint64_t *)&unk_26A4EB838);
  }
  uint64_t v55 = (uint64_t)v154;
  uint64_t v56 = v172;
  uint64_t v57 = v157;
  uint64_t v173 = v6;
  v137 = v16;
  v138 = v23;
  if (v153)
  {
    uint64_t v58 = *(void *)(v153 + 16);
    if (!v58)
    {
LABEL_55:
      v111 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
      swift_bridgeObjectRetain();
      uint64_t v61 = (void *)MEMORY[0x263F8EE80];
      id v62 = v152;
      v111(v56, 1, 1, v156);
LABEL_59:
      swift_bridgeObjectRelease();
LABEL_60:
      *(void *)&long long v172 = v62[24];
      uint64_t v170 = v62[25];
      v112 = v62;
      uint64_t v113 = v62[13];
      v168 = (void *)v62[12];
      uint64_t v114 = v62[5];
      uint64_t v115 = v62[6];
      __swift_project_boxed_opaque_existential_1(v169, v114);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v115 + 8))(&v174, v114, v115);
      long long v116 = v174;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v117 = (uint64_t)v149;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v151 + 56))(v149, 1, 1, v156);
      uint64_t v118 = (uint64_t)v138;
      uint64_t v119 = v171;
      uint64_t v120 = v173;
      ((void (*)(uint64_t, void *, uint64_t, void, void, uint64_t))v172)(v171, v168, v113, v116, *((void *)&v116 + 1), v117);
      if (v120)
      {
        swift_bridgeObjectRelease();
        sub_25B2E3600(v117, type metadata accessor for ReplicatorRecord.ID.Ownership);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_25B2E3600(v117, type metadata accessor for ReplicatorRecord.ID.Ownership);
        swift_bridgeObjectRelease();
        v121 = v147;
        ((void (*)(uint64_t))v112[26])(v119);
        uint64_t v122 = v140;
        sub_25B2E3660(v118, v140, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v123 = v151;
        uint64_t v124 = v156;
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v146, v121, v156);
        uint64_t v125 = v144;
        sub_25B2E2FE0(v141, v144, &qword_26B340F80);
        v126 = (int *)v143;
        uint64_t v127 = (uint64_t)v142;
        uint64_t v128 = (uint64_t)&v142[*(int *)(v143 + 28)];
        uint64_t v129 = sub_25B37F5D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v128, 1, 1, v129);
        sub_25B2E3598(v122, v127, type metadata accessor for ReplicatorRecord.ID);
        (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v127 + v126[5], v146, v124);
        *(void *)(v127 + v126[6]) = v61;
        sub_25B2DCE14(v125, v128);
        *(void *)(v127 + v126[8]) = v139;
        v130 = v152;
        uint64_t v131 = (uint64_t)v137;
        sub_25B2E3598(v127, (uint64_t)v137, type metadata accessor for ReplicatorRecord);
        uint64_t v132 = v130[5];
        uint64_t v133 = v130[10];
        __swift_project_boxed_opaque_existential_1(v169, v132);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D90);
        unint64_t v134 = (*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
        uint64_t v135 = swift_allocObject();
        *(_OWORD *)(v135 + 16) = xmmword_25B3819A0;
        sub_25B2E3660(v131, v135 + v134, type metadata accessor for ReplicatorRecord);
        *(void *)&long long v174 = v153;
        char v180 = v179;
        (*(void (**)(uint64_t, long long *, char *, uint64_t, uint64_t))(v133 + 24))(v135, &v174, &v180, v132, v133);
        swift_bridgeObjectRelease();
        sub_25B2E3600(v131, type metadata accessor for ReplicatorRecord);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v147, v124);
        sub_25B2E3600((uint64_t)v138, type metadata accessor for ReplicatorRecord.ID);
      }
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
    }
    *(void *)&long long v165 = *(void *)(v151 + 16);
    uint64_t v59 = v153 + ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80));
    uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
    uint64_t v159 = *(void *)(v151 + 72);
    v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
    v162 = (void (**)(char *, uint64_t, uint64_t))(v151 + 32);
    v161 = (unsigned int (**)(uint64_t, uint64_t, void *))(v166 + 48);
    uint64_t v166 = v151 + 16;
    v160 = (void (**)(char *, uint64_t))(v151 + 8);
    swift_bridgeObjectRetain();
    uint64_t v61 = (void *)MEMORY[0x263F8EE80];
    v164 = v60;
    unint64_t v136 = (unint64_t)v60 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    id v62 = v152;
    uint64_t v63 = v156;
    while (1)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v165)(v56, v59, v63);
      v158 = *v164;
      v158(v56, 0, 1, v63);
      if ((*v163)(v56, 1, v63) == 1) {
        goto LABEL_59;
      }
      (*v162)(v57, v56, v63);
      uint64_t v64 = v62[5];
      os_log_type_t v65 = v57;
      uint64_t v66 = v62[11];
      __swift_project_boxed_opaque_existential_1(v169, v64);
      uint64_t v67 = v64;
      id v68 = v168;
      ReplicatorRemoteDeviceProviding.device(relationshipID:)(v67, v66, v55);
      if ((*v161)(v55, 1, v68) != 1) {
        break;
      }
      (*v160)(v65, v63);
      sub_25B2E344C(v55, &qword_26A4EB5F0);
      uint64_t v56 = v172;
      uint64_t v57 = v65;
LABEL_13:
      v59 += v159;
      if (!--v58)
      {
        v158(v56, 1, 1, v63);
        goto LABEL_59;
      }
    }
    uint64_t v69 = v167;
    sub_25B2E3598(v55, v167, type metadata accessor for ReplicatorDevice);
    uint64_t v70 = (unint64_t *)(v69 + *((int *)v68 + 7));
    unint64_t v71 = *v70;
    unint64_t v72 = v70[1];
    unint64_t v73 = v62[15];
    BOOL v74 = v71 >= v62[16] && v73 >= v72;
    if (!v74)
    {
      sub_25B2E3600(v69, type metadata accessor for ReplicatorDevice);
      uint64_t v57 = v157;
      (*v160)(v157, v63);
LABEL_36:
      uint64_t v56 = v172;
      goto LABEL_13;
    }
    if (v71 >= v73) {
      uint64_t v75 = v62[15];
    }
    else {
      uint64_t v75 = v71;
    }
    v76 = (void (*)(uint64_t, long long *, uint64_t))v62[28];
    uint64_t v77 = *(void *)&v178[16];
    long long v148 = *(_OWORD *)v178;
    uint64_t v78 = *(void *)v178;
    uint64_t v79 = __swift_project_boxed_opaque_existential_1(&v177, *(uint64_t *)v178);
    long long v175 = v148;
    uint64_t v176 = *(void *)(v77 + 16);
    v80 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v174);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v78 - 8) + 16))(v80, v79, v78);
    uint64_t v81 = (uint64_t)v150;
    uint64_t v82 = v173;
    v76(v171, &v174, v75);
    uint64_t v173 = v82;
    if (v82)
    {
      sub_25B2E3600(v167, type metadata accessor for ReplicatorDevice);
      (*v160)(v157, v156);
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
    sub_25B2E3598(v81, v155, type metadata accessor for ReplicatorRecord.Value);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v174 = v61;
    unint64_t v85 = sub_25B2D5F28(v75);
    uint64_t v86 = v61[2];
    BOOL v87 = (v84 & 1) == 0;
    uint64_t v88 = v86 + v87;
    if (__OFADD__(v86, v87)) {
      goto LABEL_67;
    }
    char v89 = v84;
    if (v61[3] >= v88)
    {
      uint64_t v57 = v157;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_25B2DACC8();
        uint64_t v57 = v157;
      }
      uint64_t v55 = (uint64_t)v154;
      uint64_t v61 = (void *)v174;
      if ((v89 & 1) == 0)
      {
LABEL_29:
        v61[(v85 >> 6) + 8] |= 1 << v85;
        *(void *)(v61[6] + 8 * v85) = v75;
        sub_25B2E3598(v155, v61[7] + *(void *)(v170 + 72) * v85, type metadata accessor for ReplicatorRecord.Value);
        uint64_t v92 = v61[2];
        BOOL v93 = __OFADD__(v92, 1);
        uint64_t v94 = v92 + 1;
        if (v93)
        {
          __break(1u);
          goto LABEL_70;
        }
        v61[2] = v94;
        goto LABEL_35;
      }
    }
    else
    {
      sub_25B2D6104(v88, isUniquelyReferenced_nonNull_native);
      unint64_t v90 = sub_25B2D5F28(v75);
      if ((v89 & 1) != (v91 & 1)) {
        goto LABEL_71;
      }
      unint64_t v85 = v90;
      uint64_t v55 = (uint64_t)v154;
      uint64_t v57 = v157;
      uint64_t v61 = (void *)v174;
      if ((v89 & 1) == 0) {
        goto LABEL_29;
      }
    }
    sub_25B2E2BD0(v155, v61[7] + *(void *)(v170 + 72) * v85, type metadata accessor for ReplicatorRecord.Value);
LABEL_35:
    swift_bridgeObjectRelease();
    sub_25B2E3600(v167, type metadata accessor for ReplicatorDevice);
    uint64_t v63 = v156;
    (*v160)(v57, v156);
    id v62 = v152;
    goto LABEL_36;
  }
  unint64_t v95 = v152[16];
  unint64_t v167 = v152[15];
  if (v167 < v95)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
  v168 = (void *)v152[28];
  uint64_t v61 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v96 = *(void *)&v178[16];
    long long v172 = *(_OWORD *)v178;
    uint64_t v97 = *(void *)v178;
    v98 = __swift_project_boxed_opaque_existential_1(&v177, *(uint64_t *)v178);
    long long v175 = v172;
    uint64_t v176 = *(void *)(v96 + 16);
    v99 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v174);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v97 - 8) + 16))(v99, v98, v97);
    uint64_t v100 = v173;
    ((void (*)(uint64_t, long long *, unint64_t))v168)(v171, &v174, v95);
    uint64_t v173 = v100;
    if (v100)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
    sub_25B2E3598((uint64_t)v43, (uint64_t)v41, type metadata accessor for ReplicatorRecord.Value);
    char v101 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v174 = v61;
    unint64_t v103 = sub_25B2D5F28(v95);
    uint64_t v104 = v61[2];
    BOOL v105 = (v102 & 1) == 0;
    uint64_t v106 = v104 + v105;
    if (__OFADD__(v104, v105)) {
      break;
    }
    uint64_t v56 = v102;
    if (v61[3] >= v106)
    {
      if (v101)
      {
        uint64_t v61 = (void *)v174;
        if (v102) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_25B2DACC8();
        uint64_t v61 = (void *)v174;
        if (v56) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      sub_25B2D6104(v106, v101);
      unint64_t v107 = sub_25B2D5F28(v95);
      if ((v56 & 1) != (v108 & 1)) {
        goto LABEL_71;
      }
      unint64_t v103 = v107;
      uint64_t v61 = (void *)v174;
      if (v56)
      {
LABEL_47:
        sub_25B2E2BD0((uint64_t)v41, v61[7] + *(void *)(v170 + 72) * v103, type metadata accessor for ReplicatorRecord.Value);
        goto LABEL_51;
      }
    }
    v61[(v103 >> 6) + 8] |= 1 << v103;
    *(void *)(v61[6] + 8 * v103) = v95;
    sub_25B2E3598((uint64_t)v41, v61[7] + *(void *)(v170 + 72) * v103, type metadata accessor for ReplicatorRecord.Value);
    uint64_t v109 = v61[2];
    BOOL v93 = __OFADD__(v109, 1);
    uint64_t v110 = v109 + 1;
    if (v93) {
      goto LABEL_66;
    }
    v61[2] = v110;
LABEL_51:
    swift_bridgeObjectRelease();
    if (v167 == v95)
    {
      id v62 = v152;
      goto LABEL_60;
    }
    BOOL v74 = __CFADD__(v95++, 1);
    if (v74)
    {
      __break(1u);
      goto LABEL_55;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  swift_once();
LABEL_5:
  uint64_t v46 = sub_25B37F780();
  __swift_project_value_buffer(v46, (uint64_t)qword_26B3417A8);
  uint64_t v47 = sub_25B37F760();
  os_log_type_t v48 = sub_25B37FCB0();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl(&dword_25B2C1000, v47, v48, "Client is not registered", v49, 2u);
    MEMORY[0x2611621B0](v49, -1, -1);
  }

  sub_25B2DCCD4();
  swift_allocError();
  *(unsigned char *)uint64_t v50 = 2;
  *(void *)(v50 + 8) = 0;
  return swift_willThrow();
}

void sub_25B2CF3D0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v36 - v12;
  int v40 = *a2;
  uint64_t v14 = v3[5];
  uint64_t v15 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  if (v16)
  {
    uint64_t v17 = MEMORY[0x270FA5388](v16);
    *(&v36 - 2) = (uint64_t)v3;
    *(&v36 - 1) = a1;
    MEMORY[0x270FA5388](v17);
    *(&v36 - 2) = (uint64_t)sub_25B2DCE94;
    *(&v36 - 1) = v18;
    uint64_t v20 = v19 + 4;
    os_unfair_lock_lock(v19 + 4);
    uint64_t v21 = v38;
    sub_25B2E39D4();
    if (v21)
    {
      os_unfair_lock_unlock(v20);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v20);
      sub_25B2E2FE0((uint64_t)v13, (uint64_t)v11, (uint64_t *)&unk_26B341370);
      uint64_t v22 = v39;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v11, 1, v6) == 1)
      {
        sub_25B2E344C((uint64_t)v13, (uint64_t *)&unk_26B341370);
        uint64_t v23 = (uint64_t)v11;
      }
      else
      {
        uint64_t v29 = (uint64_t)v11;
        uint64_t v30 = v37;
        sub_25B2E3598(v29, v37, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v31 = v22;
        uint64_t v32 = v3[5];
        uint64_t v33 = v3[10];
        __swift_project_boxed_opaque_existential_1(v3 + 2, v32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D88);
        unint64_t v34 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_25B3819A0;
        sub_25B2E3660(v30, v35 + v34, type metadata accessor for ReplicatorRecord.ID);
        char v41 = v40;
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v33 + 32))(v35, &v41, v32, v33);
        swift_bridgeObjectRelease();
        sub_25B2E3600(v30, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v23 = (uint64_t)v13;
      }
      sub_25B2E344C(v23, (uint64_t *)&unk_26B341370);
    }
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_25B37F780();
    __swift_project_value_buffer(v24, (uint64_t)qword_26B3417A8);
    uint64_t v25 = sub_25B37F760();
    os_log_type_t v26 = sub_25B37FCB0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_25B2C1000, v25, v26, "Client is not registered", v27, 2u);
      MEMORY[0x2611621B0](v27, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v28 = 2;
    *(void *)(v28 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_25B2CF834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v23 = a3;
  uint64_t v4 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v21 = sub_25B37FD60();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v22 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v8 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v19 = (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x261161040](v20, v10, AssociatedTypeWitness, v4, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v7, 1, v4))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
    uint64_t v13 = 1;
    uint64_t v14 = v23;
  }
  else
  {
    uint64_t v15 = v19;
    sub_25B2E3660((uint64_t)&v7[*(int *)(v4 + 36)], v19, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
    uint64_t v16 = v15;
    uint64_t v17 = v23;
    sub_25B2E3598(v16, v23, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v13 = 0;
    uint64_t v14 = v17;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, v13, 1, v22);
}

uint64_t sub_25B2CFB30()
{
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  uint64_t v0 = sub_25B37FBD0();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - v1;
  swift_checkMetadataState();
  uint64_t v3 = *MEMORY[0x263F8F580];
  uint64_t v4 = sub_25B37FBD0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  return sub_25B37FC20();
}

uint64_t sub_25B2CFC74(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  uint64_t v5 = *(void *)(*(void *)a2 + 88);
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  uint64_t v6 = sub_25B37FBF0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v27 = sub_25B37F640();
  uint64_t v10 = *(void *)(v27 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v27);
  uint64_t v25 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v24 = (uint64_t)&v23 - v13;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v26 = v6;
  v14(v9, a1, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  *(void *)(v16 + 24) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, v9, v6);
  uint64_t v17 = v24;
  sub_25B2D008C((uint64_t)sub_25B2E2CE4, v16, v24);
  swift_release();
  uint64_t v18 = v25;
  uint64_t v19 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v25, v17, v27);
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v4;
  *((void *)v21 + 3) = v5;
  *((void *)v21 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v20], v18, v19);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v17, v19);
}

uint64_t sub_25B2CFF74(uint64_t a1)
{
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  uint64_t v2 = sub_25B37FBB0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v7 - v4;
  v7[1] = a1;
  sub_25B37FBF0();
  swift_bridgeObjectRetain();
  sub_25B37FBE0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B2D008C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v8 = *v4;
  uint64_t v27 = sub_25B37F830();
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25B37F860();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v14 = v4[30];
  uint64_t v32 = v4;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v15 = *(void *)(v8 + 88);
  uint64_t v16 = *(void *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry();
  swift_getAssociatedConformanceWitness();
  sub_25B37F910();
  sub_25B2CBCB8((uint64_t)sub_25B2E2ED4, (uint64_t)v31, v14);
  uint64_t v37 = aBlock[0];
  type metadata accessor for ReplicatorStore.Change();
  swift_getWitnessTable();
  uint64_t v17 = sub_25B37FA70();
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)v4[34];
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v16;
  v19[3] = v15;
  uint64_t v20 = v25;
  v19[4] = v26;
  v19[5] = v20;
  v19[6] = v17;
  aBlock[4] = sub_25B2E2F50;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v18;
  swift_retain();
  sub_25B37F840();
  uint64_t v37 = MEMORY[0x263F8EE78];
  sub_25B2E30B0(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B2E30F8(&qword_26B3411E0, &qword_26B3411D8);
  uint64_t v23 = v27;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v13, v10, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  return swift_release();
}

void sub_25B2D04B0()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 240) + 16);
  os_unfair_lock_lock(v1);
  sub_25B2DCD6C();
  os_unfair_lock_unlock(v1);
}

uint64_t ReplicatorStore.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  sub_25B2E344C(v0 + 144, (uint64_t *)&unk_26A4EB838);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ReplicatorStore.__deallocating_deinit()
{
  ReplicatorStore.deinit();
  return MEMORY[0x270FA0228](v0, 280, 7);
}

uint64_t sub_25B2D05C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = sub_25B37F640();
  MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = *(void *)(v10 + 80);
  v14[3] = *(void *)(v10 + 88);
  v14[4] = a3;
  v14[5] = a4;
  v16[1] = sub_25B2E3044;
  _DWORD v16[2] = v14;
  swift_beginAccess();
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  swift_getFunctionTypeMetadata1();
  sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F910();
  swift_retain();
  sub_25B37F930();
  swift_endAccess();
  swift_beginAccess();
  *a5 = a1[31];
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B2D0800@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v82 = a3;
  uint64_t v5 = *a2;
  uint64_t v80 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v80);
  uint64_t v81 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  BOOL v87 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v90 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v8);
  char v89 = (char *)&v69 - v11;
  uint64_t v12 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v78 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v69 = a2;
  uint64_t v17 = *(void *)(v5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = v10;
  uint64_t v79 = v17;
  uint64_t v19 = type metadata accessor for ReplicatorStore.Entry();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v21 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v77 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&v69 - v23);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB828);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v76);
  uint64_t v86 = (uint64_t)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = TupleTypeMetadata2;
  uint64_t v29 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v30 = (char *)v24 + v29;
  uint64_t v31 = a1 + v29;
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  unint64_t v71 = v24;
  uint64_t v101 = a1;
  uint64_t v72 = AssociatedTypeWitness;
  uint64_t v95 = v70 + 16;
  char v84 = v32;
  v32((char *)v24, a1, AssociatedTypeWitness);
  uint64_t v33 = *(void *)(v19 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  uint64_t v35 = v31;
  uint64_t v83 = v33 + 16;
  uint64_t v94 = v34;
  v34(v30, v31, v19);
  sub_25B2E3660((uint64_t)&v30[*(int *)(v19 + 36)], (uint64_t)v16, type metadata accessor for ReplicatorRecord);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v75 = v19;
  uint64_t v85 = v33 + 8;
  v36(v30, v19);
  uint64_t v37 = v12;
  uint64_t v38 = *(void *)&v16[*(int *)(v12 + 24)];
  swift_bridgeObjectRetain();
  sub_25B2E3600((uint64_t)v16, type metadata accessor for ReplicatorRecord);
  if (*(void *)(v38 + 16) && (unint64_t v39 = sub_25B2D5F28(v69[15]), (v40 & 1) != 0))
  {
    unint64_t v41 = v39;
    uint64_t v42 = *(void *)(v38 + 56);
    uint64_t v43 = type metadata accessor for ReplicatorRecord.Value(0);
    uint64_t v44 = *(void *)(v43 - 8);
    sub_25B2E3660(v42 + *(void *)(v44 + 72) * v41, (uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v27, 0, 1, v43);
  }
  else
  {
    uint64_t v43 = type metadata accessor for ReplicatorRecord.Value(0);
    uint64_t v44 = *(void *)(v43 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v27, 1, 1, v43);
  }
  uint64_t v45 = v86;
  swift_bridgeObjectRelease();
  type metadata accessor for ReplicatorRecord.Value(0);
  int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v27, 1, v43);
  BOOL v93 = v36;
  uint64_t v74 = v37;
  if (v46 == 1)
  {
    uint64_t v47 = (v70 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v48 = v72;
    uint64_t v70 = *(void *)(v70 + 8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v70)(v71, v72);
    sub_25B2E344C((uint64_t)v27, &qword_26A4EB828);
    uint64_t v49 = sub_25B37F500();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v45, 1, 1, v49);
  }
  else
  {
    sub_25B2E2FE0((uint64_t)&v27[*(int *)(v43 + 20)], v45, &qword_26B340CE0);
    sub_25B2E3600((uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
    uint64_t v47 = (v70 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v48 = v72;
    uint64_t v70 = *(void *)(v70 + 8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v70)(v71, v72);
  }
  uint64_t v50 = v77;
  uint64_t v51 = &v77[*(int *)(v96 + 48)];
  uint64_t v52 = v84;
  v84(v77, v101, v48);
  uint64_t v73 = v35;
  uint64_t v53 = v75;
  v94(v51, v35, v75);
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v89, v51, v88);
  v93(v51, v53);
  uint64_t v72 = v47;
  uint64_t v54 = (void (*)(char *, uint64_t))v70;
  ((void (*)(char *, uint64_t))v70)(v50, v48);
  uint64_t v55 = &v50[*(int *)(v96 + 48)];
  v52(v50, v101, v48);
  v94(v55, v35, v53);
  uint64_t v56 = (uint64_t)&v55[*(int *)(v53 + 36)];
  unint64_t v71 = type metadata accessor for ReplicatorRecord;
  uint64_t v57 = v78;
  sub_25B2E3660(v56, v78, type metadata accessor for ReplicatorRecord);
  v93(v55, v53);
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v87, v57 + *(int *)(v74 + 20), v92);
  sub_25B2E3600(v57, type metadata accessor for ReplicatorRecord);
  v54(v50, v48);
  uint64_t v58 = &v50[*(int *)(v96 + 48)];
  v84(v50, v101, v48);
  v94(v58, v73, v53);
  sub_25B2E3660((uint64_t)&v58[*(int *)(v53 + 36)], v57, v71);
  v93(v58, v53);
  uint64_t v59 = v81;
  sub_25B2E3660(v57, v81, type metadata accessor for ReplicatorRecord.ID);
  sub_25B2E3600(v57, type metadata accessor for ReplicatorRecord);
  v54(v50, v48);
  uint64_t v60 = v88;
  uint64_t v97 = v88;
  uint64_t v98 = v80;
  uint64_t v61 = v92;
  uint64_t v99 = v76;
  uint64_t v100 = v92;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v63 = v82;
  uint64_t v64 = v82 + TupleTypeMetadata[12];
  uint64_t v65 = v82 + TupleTypeMetadata[16];
  uint64_t v66 = v82 + TupleTypeMetadata[20];
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v82, v89, v60);
  sub_25B2E3598(v59, v64, type metadata accessor for ReplicatorRecord.ID);
  sub_25B2E31F0(v86, v65, &qword_26B340CE0);
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v66, v87, v61);
  uint64_t v67 = type metadata accessor for ReplicatorStore.Change();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v63, 0, 1, v67);
}

uint64_t sub_25B2D12EC(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v8 = *(void *)(v45 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v45);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v39 = (uint64_t)&v38 - v11;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v12 = MEMORY[0x270FA5388](v46);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v42 = a3 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v8;
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v50 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  unint64_t v41 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v20)
    {
      unint64_t v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v22 >= v43) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v42 + 8 * v22);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_19:
    uint64_t v28 = v50;
    uint64_t v29 = *(void *)(v49 + 72);
    sub_25B2E3660(*(void *)(v50 + 48) + v29 * v24, (uint64_t)v16, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v30 = *(void *)(v28 + 56);
    uint64_t v31 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(&v16[*(int *)(v46 + 48)], v30 + *(void *)(*(void *)(v31 - 8) + 72) * v24, v31);
    sub_25B2E31F0((uint64_t)v16, (uint64_t)v14, &qword_26B341050);
    v47(v14);
    if (v3)
    {
      sub_25B2E344C((uint64_t)v14, &qword_26B341050);
      unint64_t v37 = v41;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v37;
    }
    sub_25B2E344C((uint64_t)v14, &qword_26B341050);
    if ((*v44)(v7, 1, v45) == 1)
    {
      uint64_t result = sub_25B2E344C((uint64_t)v7, (uint64_t *)&unk_26B341370);
    }
    else
    {
      uint64_t v32 = v39;
      sub_25B2E3598((uint64_t)v7, v39, type metadata accessor for ReplicatorRecord.ID);
      sub_25B2E3598(v32, v40, type metadata accessor for ReplicatorRecord.ID);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = sub_25B310380(0, *(void *)(v41 + 16) + 1, 1, v41);
      }
      unint64_t v34 = *(void *)(v41 + 16);
      unint64_t v33 = *(void *)(v41 + 24);
      if (v34 >= v33 >> 1) {
        unint64_t v41 = sub_25B310380(v33 > 1, v34 + 1, 1, v41);
      }
      uint64_t v35 = v40;
      unint64_t v36 = v41;
      *(void *)(v41 + 16) = v34 + 1;
      uint64_t result = sub_25B2E3598(v35, v36+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ v34 * v29, type metadata accessor for ReplicatorRecord.ID);
    }
  }
  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v43) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v43) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v43) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 4;
  if (v22 + 4 >= v43)
  {
LABEL_32:
    unint64_t v37 = v41;
    goto LABEL_33;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v22 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v43) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v42 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_25B2D17E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B37F640();
  MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v7[4] = 0;
  v7[5] = 0;
  swift_beginAccess();
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  swift_getFunctionTypeMetadata1();
  sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F910();
  sub_25B37F930();
  return swift_endAccess();
}

uint64_t sub_25B2D199C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_25B37F830();
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37F860();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v2[30];
  sub_25B37F640();
  uint64_t v12 = *(void *)(v4 + 80);
  uint64_t v13 = *(void *)(v4 + 88);
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  swift_getFunctionTypeMetadata1();
  sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F910();
  sub_25B2CBCB8((uint64_t)sub_25B2E3704, (uint64_t)v2, v11);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = (void *)v2[34];
  uint64_t v16 = (void *)swift_allocObject();
  _DWORD v16[2] = v12;
  void v16[3] = v13;
  v16[4] = v14;
  v16[5] = a1;
  aBlock[4] = sub_25B2E3794;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_30;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v24 = MEMORY[0x263F8EE78];
  sub_25B2E30B0(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B2E30F8(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v10, v7, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return swift_release();
}

uint64_t sub_25B2D1D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v63 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37F640();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v59 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  id v68 = (char *)&v51 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v52 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v58 = v9 + 16;
  uint64_t v67 = (void (**)(void))(v9 + 32);
  uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v60 = v9;
  id v62 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  int64_t v53 = (unint64_t)(v21 + 63) >> 6;
  int64_t v51 = v53 - 1;
  uint64_t v61 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v65 = 0;
  uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v54 = v11;
  if (!v23) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v26 = __clz(__rbit64(v23));
  uint64_t v27 = (v23 - 1) & v23;
  unint64_t v28 = v26 | (v65 << 6);
LABEL_5:
  unint64_t v69 = v27;
  uint64_t v30 = v60;
  uint64_t v29 = v61;
  uint64_t v31 = v59;
  (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(v59, *(void *)(v61 + 48) + *(void *)(v60 + 72) * v28, v8);
  uint64_t v32 = *(void *)(v29 + 56);
  uint64_t v33 = *(int *)(v5 + 48);
  unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  long long v71 = *(_OWORD *)(v32 + 16 * v28);
  v34(v14, v31, v8);
  *(_OWORD *)&v14[v33] = v71;
  uint64_t v35 = *v70;
  (*v70)(v14, 0, 1, v5);
  swift_retain();
  uint64_t v24 = v66;
  while (1)
  {
    uint64_t v40 = *v24;
    uint64_t v41 = 1;
    if ((*v24)(v14, 1, v5) != 1)
    {
      *(void *)&long long v71 = v35;
      uint64_t v42 = *(int *)(v5 + 48);
      int64_t v43 = *v67;
      ((void (*)(char *, char *, uint64_t))*v67)(v55, v14, v8);
      uint64_t v44 = swift_allocObject();
      uint64_t v45 = v57;
      *(void *)(v44 + 16) = v56;
      *(void *)(v44 + 24) = v45;
      *(_OWORD *)(v44 + 32) = *(_OWORD *)&v14[v42];
      uint64_t v46 = v19;
      uint64_t v47 = v14;
      uint64_t v48 = v5;
      uint64_t v49 = (uint64_t (**)(uint64_t))&v68[*(int *)(v5 + 48)];
      uint64_t v24 = v66;
      v43();
      uint64_t v11 = v54;
      uint64_t v41 = 0;
      *uint64_t v49 = sub_25B2E37D8;
      v49[1] = (uint64_t (*)(uint64_t))v44;
      uint64_t v5 = v48;
      uint64_t v14 = v47;
      uint64_t v19 = v46;
      uint64_t v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v71;
    }
    uint64_t v50 = v68;
    v35(v68, v41, 1, v5);
    (*v64)(v19, v50, v11);
    if (v40(v19, 1, v5) == 1) {
      return swift_release();
    }
    (*(void (**)(uint64_t))&v19[*(int *)(v5 + 48)])(v63);
    swift_release();
    uint64_t result = (*v62)(v19, v8);
    unint64_t v23 = v69;
    if (v69) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v36 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v36 < v53)
    {
      unint64_t v37 = *(void *)(v52 + 8 * v36);
      if (v37) {
        goto LABEL_9;
      }
      int64_t v38 = v65 + 2;
      ++v65;
      if (v36 + 1 < v53)
      {
        unint64_t v37 = *(void *)(v52 + 8 * v38);
        if (v37)
        {
          ++v36;
LABEL_9:
          uint64_t v27 = (v37 - 1) & v37;
          unint64_t v28 = __clz(__rbit64(v37)) + (v36 << 6);
          int64_t v65 = v36;
          goto LABEL_5;
        }
        int64_t v39 = v36 + 2;
        int64_t v65 = v36 + 1;
        if (v36 + 2 < v53) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v35 = *v70;
    (*v70)(v14, 1, 1, v5);
    unint64_t v69 = 0;
  }
  unint64_t v37 = *(void *)(v52 + 8 * v39);
  if (v37)
  {
    v36 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v36 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v36 >= v53)
    {
      int64_t v65 = v51;
      goto LABEL_21;
    }
    unint64_t v37 = *(void *)(v52 + 8 * v36);
    ++v39;
    if (v37) {
      goto LABEL_9;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_25B2D2338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B40);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB880);
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25B2D245C, 0, 0);
}

uint64_t sub_25B2D245C()
{
  swift_beginAccess();
  Strong = (void *)swift_weakLoadStrong();
  v0[12] = Strong;
  if (Strong)
  {
    uint64_t v3 = v0[7];
    uint64_t v2 = v0[8];
    uint64_t v4 = v0[6];
    uint64_t v5 = Strong[5];
    uint64_t v6 = Strong[7];
    __swift_project_boxed_opaque_existential_1(Strong + 2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    sub_25B37FC00();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[13] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_25B2D260C;
    uint64_t v8 = v0[9];
    return MEMORY[0x270FA1F68](v0 + 14, 0, 0, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_25B2D260C()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25B2D2708, 0, 0);
}

uint64_t sub_25B2D2708()
{
  int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    if ((v1 & 1) == 0) {
      sub_25B2D2830();
    }
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_25B2D260C;
    uint64_t v5 = *(void *)(v0 + 72);
    return MEMORY[0x270FA1F68](v0 + 112, 0, 0, v5);
  }
}

uint64_t sub_25B2D2830()
{
  uint64_t v1 = *(void *)(v0 + 240);
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  sub_25B2CBCB8((uint64_t)sub_25B2E391C, v0, v1);
  sub_25B2D199C(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2D28E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B37FBA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_25B37FB90();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_25B2E344C(a1, &qword_26A4EB858);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25B37FB80();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_25B2D2A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  uint64_t v6 = type metadata accessor for ReplicatorRecord.Value(0);
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ReplicatorStore.Entry();
  v5[20] = v7;
  uint64_t v8 = sub_25B37FD60();
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = *(void *)(v7 - 8);
  v5[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB830);
  v5[26] = swift_task_alloc();
  v5[27] = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ReplicatorRecord(0);
  v5[30] = v9;
  v5[31] = *(void *)(v9 - 8);
  v5[32] = swift_task_alloc();
  type metadata accessor for ReplicatorRecordVersion();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = type metadata accessor for ReplicatorStore.Change();
  v5[36] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[37] = AssociatedTypeWitness;
  v5[38] = *(void *)(AssociatedTypeWitness - 8);
  v5[39] = swift_task_alloc();
  uint64_t v11 = sub_25B37FD60();
  v5[40] = v11;
  v5[41] = *(void *)(v11 - 8);
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ReplicatorRecord.ID(0);
  v5[44] = v12;
  v5[45] = *(void *)(v12 - 8);
  v5[46] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ReplicatorRecordChange();
  v5[47] = v13;
  v5[48] = *(void *)(v13 - 8);
  v5[49] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB888);
  v5[50] = v14;
  v5[51] = *(void *)(v14 - 8);
  v5[52] = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB878);
  v5[53] = v15;
  v5[54] = *(void *)(v15 - 8);
  v5[55] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25B2D2FCC, 0, 0);
}

uint64_t sub_25B2D2FCC()
{
  swift_beginAccess();
  Strong = (void *)swift_weakLoadStrong();
  v0[56] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[51];
    uint64_t v4 = v0[52];
    uint64_t v14 = v0[50];
    uint64_t v5 = Strong[5];
    uint64_t v6 = Strong[10];
    __swift_project_boxed_opaque_existential_1(Strong + 2, v5);
    uint64_t v8 = v2[12];
    uint64_t v7 = v2[13];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v9(v8, v7, v5, v6);
    swift_bridgeObjectRelease();
    sub_25B37FC00();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v14);
    v0[57] = 0;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[58] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_25B2D3270;
    uint64_t v11 = v0[53];
    return MEMORY[0x270FA1F68](v0 + 13, 0, 0, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_25B2D3270()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25B2D336C, 0, 0);
}

uint64_t sub_25B2D336C()
{
  long long v116 = v0;
  if (v0[13])
  {
    uint64_t v106 = v0[13];
    uint64_t v1 = sub_25B37F8D0();
    v0[14] = v1;
    uint64_t v114 = *(void *)(v106 + 16);
    if (v114)
    {
      uint64_t v2 = v0[48];
      uint64_t v3 = v106 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v110 = *(void *)(v2 + 72);
      v112 = (void *)v0[57];
      while (1)
      {
        sub_25B2E3660(v3, v0[49], (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v12 = v0[56];
        uint64_t v13 = v0[49];
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v14 = v0[46];
          sub_25B2E3598(v13, v14, type metadata accessor for ReplicatorRecord.ID);
          BOOL v15 = *(void *)(v14 + 16) == *(void *)(v12 + 96) && *(void *)(v14 + 24) == *(void *)(v12 + 104);
          if (!v15 && (sub_25B3801A0() & 1) == 0)
          {
            uint64_t v57 = v0[46];
            uint64_t v58 = type metadata accessor for ReplicatorRecord.ID;
LABEL_32:
            sub_25B2E3600(v57, v58);
            goto LABEL_6;
          }
          uint64_t v111 = v3;
          uint64_t v16 = v0[56];
          uint64_t v17 = v0[46];
          uint64_t v18 = v0[42];
          uint64_t v19 = v0[43];
          uint64_t v20 = v0[40];
          uint64_t v21 = v0[41];
          uint64_t v22 = v0[38];
          uint64_t v108 = v0[37];
          uint64_t v23 = *(void *)(v16 + 240);
          uint64_t v24 = swift_task_alloc();
          *(void *)(v24 + 16) = v16;
          *(void *)(v24 + 24) = v17;
          swift_retain();
          sub_25B2CBCB8((uint64_t)sub_25B2E36E8, v24, v23);
          swift_release();
          swift_task_dealloc();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v18, 1, v108);
          uint64_t v26 = v0[46];
          if (v25 == 1)
          {
            uint64_t v27 = v0[42];
            uint64_t v28 = v0[40];
            uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0[41] + 8);
            v29(v0[43], v28);
            sub_25B2E3600(v26, type metadata accessor for ReplicatorRecord.ID);
            v29(v27, v28);
          }
          else
          {
            uint64_t v4 = v0[43];
            uint64_t v5 = v0[41];
            uint64_t v6 = v0[39];
            uint64_t v107 = v0[40];
            uint64_t v8 = v0[37];
            uint64_t v7 = v0[38];
            uint64_t v9 = v0[36];
            (*(void (**)(uint64_t, void, uint64_t))(v7 + 32))(v6, v0[42], v8);
            uint64_t v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v6, v8);
            sub_25B2E3660(v26, v10, type metadata accessor for ReplicatorRecord.ID);
            swift_storeEnumTagMultiPayload();
            sub_25B37FB70();
            sub_25B37FB60();
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v107);
            sub_25B2E3600(v26, type metadata accessor for ReplicatorRecord.ID);
          }
        }
        else
        {
          uint64_t v30 = v0[34];
          sub_25B2E3598(v13, v30, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
          BOOL v31 = *(void *)(v30 + 16) == *(void *)(v12 + 96) && *(void *)(v30 + 24) == *(void *)(v12 + 104);
          if (!v31 && (sub_25B3801A0() & 1) == 0)
          {
            uint64_t v57 = v0[34];
            uint64_t v58 = (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion;
            goto LABEL_32;
          }
          uint64_t v111 = v3;
          uint64_t v32 = (void *)v0[56];
          uint64_t v33 = v0[45];
          uint64_t v34 = v0[34];
          uint64_t v35 = v0[29];
          uint64_t v36 = v32[5];
          uint64_t v37 = v32[10];
          __swift_project_boxed_opaque_existential_1(v32 + 2, v36);
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D88);
          unint64_t v38 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
          uint64_t v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = xmmword_25B3819A0;
          sub_25B2E3660(v34, v39 + v38, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v40 = sub_25B37F500();
          uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
          v41(v35, 1, 1, v40);
          uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v37 + 40))(v39, v35, v32[15], 0, v36, v37);
          uint64_t v43 = v0[29];
          swift_bridgeObjectRelease();
          sub_25B2E344C(v43, &qword_26B340CE0);
          if (v112)
          {
            if (qword_26B3417C0 != -1) {
              swift_once();
            }
            uint64_t v44 = v0[33];
            uint64_t v45 = v0[34];
            uint64_t v46 = sub_25B37F780();
            __swift_project_value_buffer(v46, (uint64_t)qword_26B3417A8);
            sub_25B2E3660(v45, v44, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
            uint64_t v47 = sub_25B37F760();
            os_log_type_t v48 = sub_25B37FCB0();
            if (os_log_type_enabled(v47, v48))
            {
              uint64_t v49 = v0[33];
              uint64_t v50 = swift_slowAlloc();
              uint64_t v51 = swift_slowAlloc();
              v115[0] = v51;
              *(_DWORD *)uint64_t v50 = 136446210;
              v0[11] = 0;
              v0[12] = 0xE000000000000000;
              sub_25B37FE70();
              uint64_t v52 = v0[12];
              v0[9] = v0[11];
              v0[10] = v52;
              sub_25B37FA40();
              swift_bridgeObjectRetain();
              sub_25B37FA40();
              swift_bridgeObjectRelease();
              sub_25B37FA40();
              swift_bridgeObjectRetain();
              sub_25B37FA40();
              swift_bridgeObjectRelease();
              sub_25B37FA40();
              swift_bridgeObjectRetain();
              sub_25B37FA40();
              swift_bridgeObjectRelease();
              sub_25B37FA40();
              type metadata accessor for ReplicatorRecord.ID.Ownership(0);
              sub_25B37FF70();
              *(void *)(v50 + 4) = sub_25B2CA048(v0[9], v0[10], v115);
              swift_bridgeObjectRelease();
              sub_25B2E3600(v49, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
              _os_log_impl(&dword_25B2C1000, v47, v48, "Failed to fetch record for update with record ID: %{public}s", (uint8_t *)v50, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x2611621B0](v51, -1, -1);
              MEMORY[0x2611621B0](v50, -1, -1);
            }
            else
            {
              sub_25B2E3600(v0[33], (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
            }

            uint64_t v3 = v111;
            sub_25B2E3600(v0[34], (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
            v112 = 0;
            goto LABEL_6;
          }
          if (*(void *)(v42 + 16))
          {
            unint64_t v53 = sub_25B2D5F6C((void *)v0[34]);
            uint64_t v54 = v41;
            if (v55)
            {
              sub_25B2E3660(*(void *)(v42 + 56) + *(void *)(v0[31] + 72) * v53, v0[26], type metadata accessor for ReplicatorRecord);
              uint64_t v56 = 0;
            }
            else
            {
              uint64_t v56 = 1;
            }
          }
          else
          {
            uint64_t v56 = 1;
            uint64_t v54 = v41;
          }
          uint64_t v59 = v0[30];
          uint64_t v60 = v0[31];
          uint64_t v61 = v0[26];
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v61, v56, 1, v59);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v61, 1, v59) == 1)
          {
            uint64_t v62 = v0[26];
            sub_25B2E3600(v0[34], (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
            sub_25B2E344C(v62, &qword_26A4EB830);
            v112 = 0;
          }
          else
          {
            uint64_t v63 = v0[32];
            uint64_t v64 = v0[23];
            sub_25B2E3598(v0[26], v63, type metadata accessor for ReplicatorRecord);
            sub_25B2D4790(v63, v64);
            uint64_t v65 = v0[23];
            uint64_t v66 = v0[24];
            uint64_t v67 = v0[20];
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v65, 1, v67) == 1)
            {
              uint64_t v68 = v0[34];
              uint64_t v69 = v0[21];
              uint64_t v70 = v0[22];
              sub_25B2E3600(v0[32], type metadata accessor for ReplicatorRecord);
              sub_25B2E3600(v68, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v65, v69);
              v112 = 0;
            }
            else
            {
              uint64_t v71 = v0[32];
              uint64_t v72 = v0[30];
              (*(void (**)(void, uint64_t, uint64_t))(v66 + 32))(v0[25], v65, v67);
              uint64_t v73 = *(void *)(v71 + *(int *)(v72 + 24));
              if (*(void *)(v73 + 16) && (unint64_t v74 = sub_25B2D5F28(*(void *)(v0[56] + 120)), (v75 & 1) != 0))
              {
                uint64_t v76 = v0[28];
                uint64_t v77 = v0[19];
                uint64_t v78 = v0[17];
                sub_25B2E3660(*(void *)(v73 + 56) + *(void *)(v0[18] + 72) * v74, v77, type metadata accessor for ReplicatorRecord.Value);
                sub_25B2E2FE0(v77 + *(int *)(v78 + 20), v76, &qword_26B340CE0);
                sub_25B2E3600(v77, type metadata accessor for ReplicatorRecord.Value);
              }
              else
              {
                v54(v0[28], 1, 1, v40);
              }
              uint64_t v79 = v0[56];
              uint64_t v80 = v0[34];
              uint64_t v81 = v0[25];
              uint64_t v82 = *(os_unfair_lock_s **)(v79 + 240);
              uint64_t v83 = (void *)swift_task_alloc();
              v83[2] = v79;
              v83[3] = v80;
              v83[4] = v81;
              uint64_t v84 = swift_task_alloc();
              *(void *)(v84 + 16) = sub_25B2E36C8;
              *(void *)(v84 + 24) = v83;
              swift_retain();
              os_unfair_lock_lock(v82 + 4);
              sub_25B2E39D4();
              uint64_t v85 = v0[44];
              uint64_t v86 = v0[36];
              uint64_t v113 = v0[34];
              uint64_t v104 = v0[30];
              uint64_t v105 = v0[32];
              uint64_t v87 = v0[27];
              uint64_t v103 = v0[28];
              uint64_t v88 = v0[25];
              uint64_t v109 = v0[24];
              uint64_t v102 = v0[20];
              uint64_t v89 = v0[16];
              os_unfair_lock_unlock(v82 + 4);
              swift_release();
              swift_task_dealloc();
              swift_task_dealloc();
              v0[2] = v89;
              v0[3] = v85;
              v0[4] = v87;
              v0[5] = sub_25B37F640();
              TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
              uint64_t v91 = v86 + TupleTypeMetadata[12];
              uint64_t v92 = v86 + TupleTypeMetadata[16];
              uint64_t v93 = v86 + TupleTypeMetadata[20];
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(v86, v88, v89);
              sub_25B2E3660(v88 + *(int *)(v102 + 36), v91, type metadata accessor for ReplicatorRecord.ID);
              sub_25B2E2FE0(v103, v92, &qword_26B340CE0);
              uint64_t v94 = v105 + *(int *)(v104 + 20);
              uint64_t v95 = sub_25B37F640();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16))(v93, v94, v95);
              swift_storeEnumTagMultiPayload();
              sub_25B37FB70();
              sub_25B37FB60();
              sub_25B2E344C(v103, &qword_26B340CE0);
              sub_25B2E3600(v105, type metadata accessor for ReplicatorRecord);
              (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v88, v102);
              sub_25B2E3600(v113, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
              v112 = 0;
            }
          }
        }
        uint64_t v3 = v111;
LABEL_6:
        v3 += v110;
        if (!--v114)
        {
          swift_bridgeObjectRelease();
          uint64_t v96 = v0[14];
          uint64_t v97 = v112;
          goto LABEL_49;
        }
      }
    }
    uint64_t v96 = v1;
    swift_bridgeObjectRelease();
    uint64_t v97 = (void *)v0[57];
LABEL_49:
    sub_25B2D199C(v96);
    swift_bridgeObjectRelease();
    v0[57] = v97;
    uint64_t v100 = (void *)swift_task_alloc();
    v0[58] = v100;
    *uint64_t v100 = v0;
    v100[1] = sub_25B2D3270;
    uint64_t v101 = v0[53];
    return MEMORY[0x270FA1F68](v0 + 13, 0, 0, v101);
  }
  else
  {
    (*(void (**)(void, void))(v0[54] + 8))(v0[55], v0[53]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v98 = (uint64_t (*)(void))v0[1];
    return v98();
  }
}

uint64_t sub_25B2D42A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v35 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 80);
  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t v32 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v10 = sub_25B37FD60();
  MEMORY[0x270FA5388](v10 - 8);
  BOOL v31 = (char *)&v26 - v11;
  uint64_t v28 = *(void *)(v9 + 24);
  uint64_t v33 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v26 - v14;
  uint64_t v15 = sub_25B37FD60();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v30 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v29 = a1 + 32;
  swift_beginAccess();
  uint64_t v21 = a1[32];
  uint64_t v22 = sub_25B2E30B0(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v36 = v6;
  MEMORY[0x261161040](a2, v21, v6, AssociatedTypeWitness, v22);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v37, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v24 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v37, v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v27, v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
    swift_beginAccess();
    swift_getAssociatedConformanceWitness();
    sub_25B37F910();
    sub_25B37F930();
    swift_endAccess();
    sub_25B2E3660(v34, v35, type metadata accessor for ReplicatorRecord.ID);
    int v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v25(v30, 1, 1, AssociatedTypeWitness);
    swift_beginAccess();
    sub_25B37F910();
    sub_25B37F930();
    swift_endAccess();
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v25)(v24, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_25B2D4790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v55 = *v2;
  uint64_t v6 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v52 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v55 + 80);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v54 = (char *)&v47 - v13;
  uint64_t v14 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (uint64_t *)((char *)&v47 - v19);
  uint64_t v21 = *(int *)(v7 + 32);
  uint64_t v53 = a1;
  uint64_t v22 = *(void *)(a1 + v21);
  if (*(void *)(v22 + 16) && (uint64_t v23 = v3[15], v24 = sub_25B2D5F28(v23), (v25 & 1) != 0))
  {
    sub_25B2E3660(*(void *)(v22 + 56) + *(void *)(v15 + 72) * v24, (uint64_t)v18, type metadata accessor for ReplicatorRecord.Value);
    sub_25B2E3598((uint64_t)v18, (uint64_t)v20, type metadata accessor for ReplicatorRecord.Value);
    sub_25B2E2FE0((uint64_t)(v3 + 18), (uint64_t)&v56, (uint64_t *)&unk_26A4EB838);
    uint64_t v48 = a2;
    uint64_t v49 = v23;
    if (v57)
    {
      sub_25B2DCE7C(&v56, &v58);
    }
    else
    {
      uint64_t v28 = v3[5];
      long long v47 = *((_OWORD *)v3 + 4);
      uint64_t v29 = __swift_project_boxed_opaque_existential_1(v3 + 2, v28);
      uint64_t v59 = v28;
      long long v60 = v47;
      boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v58);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(boxed_opaque_existential_2, v29, v28);
      sub_25B2E344C((uint64_t)&v56, (uint64_t *)&unk_26A4EB838);
    }
    uint64_t v31 = v59;
    uint64_t v32 = *((void *)&v60 + 1);
    __swift_project_boxed_opaque_existential_1(&v58, v59);
    uint64_t v34 = *v20;
    unint64_t v33 = v20[1];
    uint64_t v35 = *(void *)(v32 + 8);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8);
    sub_25B2E2B14(*v20, v33);
    uint64_t v37 = *(void *)(v55 + 88);
    uint64_t v38 = *(void *)(v37 + 8);
    uint64_t v39 = *(void *)(v37 + 16);
    uint64_t v55 = v37;
    uint64_t v46 = v35;
    uint64_t v40 = v54;
    uint64_t v41 = v61;
    v36(v10, v34, v33, v49, v10, v38, v39, v31, v46);
    sub_25B2E3600((uint64_t)v20, type metadata accessor for ReplicatorRecord.Value);
    sub_25B2CA2D8(v34, v33);
    uint64_t v61 = v41;
    if (!v41)
    {
      uint64_t v42 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v51, v40, v10);
      uint64_t v43 = v52;
      sub_25B2E3660(v53, v52, type metadata accessor for ReplicatorRecord);
      uint64_t v44 = v48;
      sub_25B2CAD98(v42, v43, v10, v48);
      uint64_t v45 = type metadata accessor for ReplicatorStore.Entry();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  }
  else
  {
    uint64_t v26 = type metadata accessor for ReplicatorStore.Entry();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a2, 1, 1, v26);
  }
}

uint64_t sub_25B2D4C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 88);
  v20[1] = *(void *)(*(void *)a1 + 80);
  uint64_t v21 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v6 = sub_25B37FD60();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v22 = (char *)v20 - v7;
  uint64_t v23 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v20[2] = (char *)v20 - v10;
  uint64_t v11 = sub_25B37FD60();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v14);
  sub_25B2E3660(a2, (uint64_t)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ReplicatorRecord.ID);
  sub_25B37FE90();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_25B2E30B0(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  sub_25B37F910();
  sub_25B37F930();
  swift_endAccess();
  sub_25B37FE90();
  uint64_t v17 = v21;
  uint64_t v16 = v22;
  uint64_t v18 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, a3, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_25B37F910();
  sub_25B37F930();
  return swift_endAccess();
}

uint64_t sub_25B2D5030@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v13 = a1[31];
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v12 = *(void *)(v3 + 88);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = sub_25B37F910();
  uint64_t v5 = type metadata accessor for ReplicatorStore.Change();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_25B2CA99C((void (*)(char *, char *))sub_25B2E3938, (uint64_t)v10, v4, v5, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for ReplicatorRecord.ID(255);
  sub_25B2E30B0(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  sub_25B37F910();
  sub_25B37F900();
  swift_endAccess();
  swift_beginAccess();
  sub_25B37F900();
  uint64_t result = swift_endAccess();
  *uint64_t v14 = v8;
  return result;
}

uint64_t sub_25B2D5288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v43 = a4;
  uint64_t v6 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v38 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for ReplicatorStore.Entry();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = TupleTypeMetadata2 - 8;
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v42 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v32 - v14;
  type metadata accessor for ReplicatorRecord.ID(255);
  uint64_t v16 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v35 = a1;
  uint64_t v36 = v16;
  uint64_t v17 = *(int *)(v11 + 56);
  uint64_t v18 = &v15[v17];
  uint64_t v37 = &v15[v17];
  uint64_t v19 = a1;
  uint64_t v34 = a1 + v17;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = *(void (**)(void))(v20 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v15, v19, AssociatedTypeWitness);
  uint64_t v22 = v9;
  uint64_t v33 = v9;
  uint64_t v23 = *(void *)(v9 - 8);
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  char v25 = v18;
  uint64_t v26 = v34;
  v24(v25, v34, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v43, v15, v41);
  uint64_t v27 = &v42[*(int *)(v11 + 56)];
  v21();
  uint64_t v28 = v33;
  v24(v27, v26, v33);
  uint64_t v29 = v38;
  sub_25B2E3660((uint64_t)&v27[*(int *)(v28 + 36)], v38, type metadata accessor for ReplicatorRecord);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
  v30(v27, v28);
  sub_25B2E3660(v29, v36, type metadata accessor for ReplicatorRecord.ID);
  sub_25B2E3600(v29, type metadata accessor for ReplicatorRecord);
  type metadata accessor for ReplicatorStore.Change();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v42, v41);
  return ((uint64_t (*)(char *, uint64_t))v30)(v37, v28);
}

uint64_t sub_25B2D55F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v30 = v9;
  uint64_t v31 = a1;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = (char *)&v27 + v12 - v10;
  uint64_t v14 = a1 + v12;
  sub_25B2E3660(a1, (uint64_t)&v27 - v10, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v15 = sub_25B37F640();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v29 = v14;
  v28(v13, v14, v15);
  uint64_t v18 = *((void *)v11 + 2);
  uint64_t v17 = *((void *)v11 + 3);
  swift_bridgeObjectRetain();
  sub_25B2E3600((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  if (v18 == *(void *)(a2 + 96) && v17 == *(void *)(a2 + 104))
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v13, v15);
    uint64_t v22 = v32;
LABEL_8:
    uint64_t v23 = &v8[*(int *)(v30 + 48)];
    sub_25B2E3660(v31, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID);
    v28(v23, v29, v15);
    sub_25B2E3598((uint64_t)v8, v22, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v24 = type metadata accessor for ReplicatorRecord.ID(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v22, 0, 1, v24);
    return ((uint64_t (*)(char *, uint64_t))v21)(v23, v15);
  }
  char v20 = sub_25B3801A0();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v13, v15);
  uint64_t v22 = v32;
  if (v20) {
    goto LABEL_8;
  }
  uint64_t v26 = type metadata accessor for ReplicatorRecord.ID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v22, 1, 1, v26);
}

uint64_t sub_25B2D58E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t v19 = a1 + 248;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_25B37FD60();
  MEMORY[0x270FA5388](v5 - 8);
  char v20 = (char *)&v17 - v6;
  uint64_t v21 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v18 = (uint64_t)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ReplicatorStore.Entry();
  uint64_t v9 = sub_25B37FD60();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v17 = a2;
  sub_25B37FE90();
  uint64_t v14 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_25B37F910();
  sub_25B37F930();
  swift_endAccess();
  sub_25B2E3660(v22, v18, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v15 = v20;
  sub_25B37FE90();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_25B2E30B0(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  sub_25B37F910();
  sub_25B37F930();
  return swift_endAccess();
}

uint64_t sub_25B2D5CB4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_25B2D5CDC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_25B2D5DB8;
  return v6(a1);
}

uint64_t sub_25B2D5DB8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_25B2D5EB0(uint64_t a1, uint64_t a2)
{
  sub_25B380250();
  sub_25B37FA10();
  uint64_t v4 = sub_25B380290();
  return sub_25B2DA2E0(a1, a2, v4);
}

unint64_t sub_25B2D5F28(uint64_t a1)
{
  uint64_t v2 = sub_25B380240();
  return sub_25B2DA3C4(a1, v2);
}

unint64_t sub_25B2D5F6C(void *a1)
{
  sub_25B380250();
  ReplicatorRecord.ID.hash(into:)();
  uint64_t v2 = sub_25B380290();
  return sub_25B2DA460(a1, v2);
}

unint64_t sub_25B2D5FD8(uint64_t a1)
{
  sub_25B37F9A0();
  sub_25B380250();
  sub_25B37FA10();
  uint64_t v2 = sub_25B380290();
  swift_bridgeObjectRelease();
  return sub_25B2DA990(a1, v2);
}

unint64_t sub_25B2D606C(uint64_t a1)
{
  sub_25B37F640();
  sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
  uint64_t v2 = sub_25B37F940();
  return sub_25B2DAB08(a1, v2);
}

uint64_t sub_25B2D6104(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8A0);
  char v9 = a2;
  uint64_t result = sub_25B37FFB0();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v35 = v3;
    int64_t v12 = 0;
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v13;
    int64_t v36 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          int64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      uint64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        sub_25B2E3598(v26, (uint64_t)v7, type metadata accessor for ReplicatorRecord.Value);
      }
      else {
        sub_25B2E3660(v26, (uint64_t)v7, type metadata accessor for ReplicatorRecord.Value);
      }
      uint64_t result = sub_25B380240();
      uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = sub_25B2E3598((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18, type metadata accessor for ReplicatorRecord.Value);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_25B2D6490(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B50);
  char v40 = a2;
  uint64_t v6 = sub_25B37FFB0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    char v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    long long v41 = *(_OWORD *)(v33 + 16);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_25B380250();
    sub_25B37FA10();
    uint64_t result = sub_25B380290();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v41;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  int64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25B2D67C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CB0);
  char v40 = a2;
  uint64_t v6 = sub_25B37FFB0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 48 * v21;
      uint64_t v33 = *(void *)v32;
      uint64_t v34 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      long long v43 = *(_OWORD *)(v32 + 24);
      char v41 = *(unsigned char *)(v32 + 40);
      char v42 = *(unsigned char *)(v32 + 17);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_25B380250();
      sub_25B37FA10();
      uint64_t result = sub_25B380290();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
      *(void *)uint64_t v19 = v33;
      *(void *)(v19 + 8) = v34;
      *(unsigned char *)(v19 + 16) = v35;
      *(unsigned char *)(v19 + 17) = v42;
      *(_OWORD *)(v19 + 24) = v43;
      *(unsigned char *)(v19 + 40) = v41;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25B2D6B14(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v46 = sub_25B37F640();
  uint64_t v7 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v47 = a2;
  uint64_t v11 = sub_25B37FFB0();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    char v40 = v3;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    char v42 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v41 = (unint64_t)(v13 + 63) >> 6;
    long long v43 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v7 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v44 = v10;
    uint64_t v45 = v9;
    while (1)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v41) {
          goto LABEL_34;
        }
        unint64_t v24 = v42[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v24 = v42[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v40;
              if (v47)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v10 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v42 = -1 << v38;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v42[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v24 = v42[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = v7;
      uint64_t v27 = *(void *)(v7 + 72);
      unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
      uint64_t v29 = v45;
      uint64_t v30 = v46;
      if (v47)
      {
        (*v48)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      }
      else
      {
        (*v43)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
        swift_retain();
      }
      sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
      uint64_t result = sub_25B37F940();
      uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v17 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v12 + 48) + v27 * v20, v29, v30);
      *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20) = v49;
      ++*(void *)(v12 + 16);
      uint64_t v7 = v26;
      uint64_t v10 = v44;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v5 = v12;
  return result;
}

uint64_t sub_25B2D6F40(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB40);
  char v6 = a2;
  uint64_t v7 = sub_25B37FFB0();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_25B2E2B14(v37, *((unint64_t *)&v37 + 1));
      }
      sub_25B380250();
      sub_25B37FA10();
      uint64_t result = sub_25B380290();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_25B2D7250(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v60 = sub_25B37F640();
  uint64_t v5 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v54 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v59 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v57 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v58 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB898);
  int v61 = a2;
  uint64_t v14 = sub_25B37FFB0();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_44;
  }
  long long v49 = v2;
  char v16 = *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v51 = (void *)(v13 + 64);
  uint64_t v18 = 1 << v16;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v17;
  int64_t v50 = (unint64_t)(v18 + 63) >> 6;
  long long v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v52 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v21 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  uint64_t v24 = (uint64_t)v55;
  while (1)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v28 >= v50) {
      break;
    }
    uint64_t v29 = v51;
    unint64_t v30 = v51[v28];
    ++v23;
    if (!v30)
    {
      int64_t v23 = v28 + 1;
      if (v28 + 1 >= v50) {
        goto LABEL_37;
      }
      unint64_t v30 = v51[v23];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v50)
        {
LABEL_37:
          swift_release();
          uint64_t v3 = v49;
          if ((v61 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
        unint64_t v30 = v51[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v23 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_46;
            }
            if (v23 >= v50) {
              goto LABEL_37;
            }
            unint64_t v30 = v51[v23];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v23 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v58 + 72);
    uint64_t v33 = *(void *)(v13 + 48) + v32 * v27;
    int64_t v62 = v23;
    if (v61)
    {
      sub_25B2E3598(v33, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v34 = *(void *)(v57 + 72);
      sub_25B2E3598(*(void *)(v13 + 56) + v34 * v27, v24, type metadata accessor for ReplicatorRecord);
    }
    else
    {
      sub_25B2E3660(v33, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v34 = *(void *)(v57 + 72);
      sub_25B2E3660(*(void *)(v13 + 56) + v34 * v27, v24, type metadata accessor for ReplicatorRecord);
    }
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v35 = v59;
    sub_25B2E3660((uint64_t)&v12[*(int *)(v63 + 28)], v59, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v36 = v60;
    if ((*v56)(v35, 1, v60) == 1)
    {
      sub_25B380260();
    }
    else
    {
      uint64_t v37 = v13;
      uint64_t v38 = v54;
      (*v53)(v54, v35, v36);
      sub_25B380260();
      sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      uint64_t v39 = v38;
      uint64_t v13 = v37;
      uint64_t v24 = (uint64_t)v55;
      (*v52)(v39, v36);
    }
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25B380290();
    uint64_t v40 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v41 = result & ~v40;
    unint64_t v42 = v41 >> 6;
    if (((-1 << v41) & ~*(void *)(v21 + 8 * (v41 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v41) & ~*(void *)(v21 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v45 = v42 == v44;
        if (v42 == v44) {
          unint64_t v42 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v21 + 8 * v42);
      }
      while (v46 == -1);
      unint64_t v25 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(void *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    sub_25B2E3598((uint64_t)v12, *(void *)(v15 + 48) + v32 * v25, type metadata accessor for ReplicatorRecord.ID);
    uint64_t result = sub_25B2E3598(v24, *(void *)(v15 + 56) + v34 * v25, type metadata accessor for ReplicatorRecord);
    ++*(void *)(v15 + 16);
    int64_t v23 = v62;
  }
  swift_release();
  uint64_t v3 = v49;
  uint64_t v29 = v51;
  if ((v61 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v47 = 1 << *(unsigned char *)(v13 + 32);
  if (v47 >= 64) {
    bzero(v29, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v47;
  }
  *(void *)(v13 + 16) = 0;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v3 = v15;
  return result;
}

uint64_t sub_25B2D79A8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = sub_25B37F640();
  uint64_t v5 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v55 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB48);
  int v57 = a2;
  uint64_t v13 = sub_25B37FFB0();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_44;
  }
  uint64_t v46 = v2;
  char v15 = *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v48 = (void *)(v12 + 64);
  uint64_t v17 = 1 << v15;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v54 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  long long v49 = (void (**)(char *, uint64_t))(v5 + 8);
  int64_t v50 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v20 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  uint64_t v53 = v12;
  uint64_t v23 = v52;
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v27 >= v47) {
      break;
    }
    int64_t v28 = v48;
    unint64_t v29 = v48[v27];
    ++v22;
    if (!v29)
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v47) {
        goto LABEL_37;
      }
      unint64_t v29 = v48[v22];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v47)
        {
LABEL_37:
          swift_release();
          uint64_t v3 = v46;
          if ((v57 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
        unint64_t v29 = v48[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v22 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_46;
            }
            if (v22 >= v47) {
              goto LABEL_37;
            }
            unint64_t v29 = v48[v22];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v55 + 72);
    uint64_t v32 = *(void *)(v12 + 48) + v31 * v26;
    if (v57)
    {
      sub_25B2E3598(v32, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v58 = *(void *)(*(void *)(v12 + 56) + 8 * v26);
    }
    else
    {
      sub_25B2E3660(v32, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v58 = *(void *)(*(void *)(v12 + 56) + 8 * v26);
      swift_bridgeObjectRetain();
    }
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    sub_25B2E3660((uint64_t)&v11[*(int *)(v23 + 28)], (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v33 = v56;
    if ((*v54)(v9, 1, v56) == 1)
    {
      sub_25B380260();
    }
    else
    {
      uint64_t v34 = v9;
      uint64_t v35 = v51;
      (*v50)(v51, v34, v33);
      sub_25B380260();
      sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      uint64_t v36 = v35;
      uint64_t v9 = v34;
      uint64_t v23 = v52;
      (*v49)(v36, v33);
    }
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25B380290();
    uint64_t v37 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v12 = v53;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      uint64_t v12 = v53;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v20 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = sub_25B2E3598((uint64_t)v11, *(void *)(v14 + 48) + v31 * v24, type metadata accessor for ReplicatorRecord.ID);
    *(void *)(*(void *)(v14 + 56) + 8 * v24) = v58;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v3 = v46;
  int64_t v28 = v48;
  if ((v57 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v44 = 1 << *(unsigned char *)(v12 + 32);
  if (v44 >= 64) {
    bzero(v28, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v28 = -1 << v44;
  }
  *(void *)(v12 + 16) = 0;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v3 = v14;
  return result;
}

uint64_t sub_25B2D8018(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v55 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  int64_t v50 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (char *)&v44 - v11;
  uint64_t v59 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v54 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D48);
  int v56 = a2;
  uint64_t v15 = sub_25B37FFB0();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_44;
  }
  uint64_t v45 = v2;
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  int64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  int v57 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v52 = v8;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v48 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v49 = v8 + 16;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v27 >= v46) {
      break;
    }
    int64_t v28 = v47;
    unint64_t v29 = v47[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v46) {
        goto LABEL_37;
      }
      unint64_t v29 = v47[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v46)
        {
LABEL_37:
          swift_release();
          uint64_t v3 = v45;
          if ((v56 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
        unint64_t v29 = v47[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_46;
            }
            if (v23 >= v46) {
              goto LABEL_37;
            }
            unint64_t v29 = v47[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v20 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v54 + 72);
    uint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v56)
    {
      sub_25B2E3598(v32, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v33 = *(void *)(v52 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v52 + 32))(v58, *(void *)(v14 + 56) + v33 * v26, v7);
    }
    else
    {
      sub_25B2E3660(v32, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v33 = *(void *)(v52 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v58, *(void *)(v14 + 56) + v33 * v26, v7);
    }
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v34 = v55;
    sub_25B2E3660((uint64_t)&v13[*(int *)(v59 + 28)], v55, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if ((*v53)(v34, 1, v7) == 1)
    {
      sub_25B380260();
    }
    else
    {
      uint64_t v35 = v50;
      (*v57)(v50, v34, v7);
      sub_25B380260();
      sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      (*v48)(v35, v7);
    }
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25B380290();
    uint64_t v36 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    sub_25B2E3598((uint64_t)v13, *(void *)(v16 + 48) + v31 * v24, type metadata accessor for ReplicatorRecord.ID);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v57)(*(void *)(v16 + 56) + v33 * v24, v58, v7);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v3 = v45;
  int64_t v28 = v47;
  if ((v56 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v43 = 1 << *(unsigned char *)(v14 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v28 = -1 << v43;
  }
  *(void *)(v14 + 16) = 0;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v3 = v16;
  return result;
}

uint64_t sub_25B2D870C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = sub_25B37F640();
  uint64_t v5 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v52 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v56 = *(void *)(v59 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v59);
  uint64_t v58 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E70);
  int v57 = a2;
  uint64_t v15 = sub_25B37FFB0();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_44;
  }
  int64_t v47 = v2;
  char v17 = *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v49 = (void *)(v14 + 64);
  uint64_t v19 = 1 << v17;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v18;
  int64_t v48 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v54 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int64_t v50 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v29 >= v48) {
      break;
    }
    int64_t v30 = v49;
    unint64_t v31 = v49[v29];
    ++v24;
    if (!v31)
    {
      int64_t v24 = v29 + 1;
      if (v29 + 1 >= v48) {
        goto LABEL_37;
      }
      unint64_t v31 = v49[v24];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v48)
        {
LABEL_37:
          swift_release();
          uint64_t v3 = v47;
          if ((v57 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
        unint64_t v31 = v49[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v24 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_46;
            }
            if (v24 >= v48) {
              goto LABEL_37;
            }
            unint64_t v31 = v49[v24];
            ++v32;
            if (v31) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v32;
      }
    }
LABEL_21:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_22:
    uint64_t v33 = *(void *)(v56 + 72);
    unint64_t v34 = v33 * v28;
    uint64_t v35 = *(void *)(v14 + 48) + v33 * v28;
    if (v57)
    {
      sub_25B2E3598(v35, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      sub_25B2E3598(*(void *)(v14 + 56) + v34, v58, type metadata accessor for ReplicatorRecord.ID);
    }
    else
    {
      sub_25B2E3660(v35, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      sub_25B2E3660(*(void *)(v14 + 56) + v34, v58, type metadata accessor for ReplicatorRecord.ID);
    }
    uint64_t v36 = v55;
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    sub_25B2E3660((uint64_t)&v13[*(int *)(v59 + 28)], (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if ((*v54)(v9, 1, v36) == 1)
    {
      sub_25B380260();
    }
    else
    {
      unint64_t v37 = v52;
      (*v51)(v52, v9, v36);
      sub_25B380260();
      sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      (*v50)(v37, v36);
    }
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25B380290();
    uint64_t v38 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v39 = result & ~v38;
    unint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v22 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v39) & ~*(void *)(v22 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v43 = v40 == v42;
        if (v40 == v42) {
          unint64_t v40 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v22 + 8 * v40);
      }
      while (v44 == -1);
      unint64_t v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    unint64_t v26 = v33 * v25;
    sub_25B2E3598((uint64_t)v13, *(void *)(v16 + 48) + v33 * v25, type metadata accessor for ReplicatorRecord.ID);
    uint64_t result = sub_25B2E3598(v58, *(void *)(v16 + 56) + v26, type metadata accessor for ReplicatorRecord.ID);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  int64_t v30 = v49;
  if ((v57 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v45 = 1 << *(unsigned char *)(v14 + 32);
  if (v45 >= 64) {
    bzero(v30, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v30 = -1 << v45;
  }
  *(void *)(v14 + 16) = 0;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v3 = v16;
  return result;
}

uint64_t sub_25B2D8DB8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB58);
  char v37 = a2;
  uint64_t v6 = sub_25B37FFB0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    unint64_t v25 = (long long *)(*(void *)(v5 + 56) + 48 * v17);
    if (v37)
    {
      sub_25B2DCE7C(v25, v38);
    }
    else
    {
      sub_25B2E2B6C((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_25B380250();
    sub_25B37FA10();
    uint64_t result = sub_25B380290();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = (uint64_t)sub_25B2DCE7C(v38, (_OWORD *)(*(void *)(v7 + 56) + 48 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_25B2D90E0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = sub_25B37F500();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB50);
  int v40 = a2;
  uint64_t result = sub_25B37FFB0();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    unint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = sub_25B380240();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_25B2D9488(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_25B2D5F28(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = type metadata accessor for ReplicatorRecord.Value(0);
      return sub_25B2E2BD0(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for ReplicatorRecord.Value);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_25B2DACC8();
    goto LABEL_7;
  }
  sub_25B2D6104(v13, a3 & 1);
  unint64_t v20 = sub_25B2D5F28(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return sub_25B2D9E3C(v10, a2, a1, v16);
}

uint64_t sub_25B2D95DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_25B2D960C(a1, a2, a3, a4, &qword_26A4EB350);
}

uint64_t sub_25B2D95E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_25B2D960C(a1, a2, a3, a4, &qword_26B340B48);
}

uint64_t sub_25B2D95F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_25B2D960C(a1, a2, a3, a4, &qword_26B341268);
}

uint64_t sub_25B2D9600(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_25B2D960C(a1, a2, a3, a4, &qword_26A4EB890);
}

uint64_t sub_25B2D960C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = (void **)v5;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v10 = sub_25B37F640();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v5;
  unint64_t v16 = sub_25B2D606C(a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      int64_t v23 = (void *)(v22[7] + 16 * v16);
      uint64_t result = swift_release();
      uint64_t v25 = v29;
      *int64_t v23 = v28;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_25B2DB320(a5);
    goto LABEL_7;
  }
  sub_25B2D6B14(v19, a4 & 1, a5);
  unint64_t v26 = sub_25B2D606C(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  unint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  return sub_25B2D9EE4(v16, (uint64_t)v13, v28, v29, v22);
}

uint64_t sub_25B2D97CC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_25B2D5F6C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t v21 = type metadata accessor for ReplicatorRecord(0);
      return sub_25B2E2BD0(a1, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v13, type metadata accessor for ReplicatorRecord);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_25B2DB78C();
    goto LABEL_7;
  }
  sub_25B2D7250(v16, a3 & 1);
  unint64_t v23 = sub_25B2D5F6C(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
  unint64_t v13 = v23;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_25B2E3660((uint64_t)a2, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
  return sub_25B2D9FA4(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_25B2D9978(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_25B2D5F6C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_25B2DBABC();
    goto LABEL_7;
  }
  sub_25B2D79A8(v16, a3 & 1);
  unint64_t v22 = sub_25B2D5F6C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_25B2E3660((uint64_t)a2, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
  return sub_25B2DA090(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_25B2D9AF8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_25B2D5F6C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_25B2DBD44();
      goto LABEL_7;
    }
    sub_25B2D8018(v16, a3 & 1);
    unint64_t v27 = sub_25B2D5F6C(a2);
    if ((v17 & 1) == (v28 & 1))
    {
      unint64_t v13 = v27;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      sub_25B2E3660((uint64_t)a2, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
      return sub_25B2DA144(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7];
  uint64_t v21 = sub_25B37F640();
  uint64_t v22 = *(void *)(v21 - 8);
  char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40);
  uint64_t v24 = v21;
  uint64_t v25 = v20 + *(void *)(v22 + 72) * v13;
  return v23(v25, a1, v24);
}

uint64_t sub_25B2D9CD4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_25B2D5F28(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_25B2DC52C();
      goto LABEL_7;
    }
    sub_25B2D90E0(v13, a3 & 1);
    unint64_t v24 = sub_25B2D5F28(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_25B3801C0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = sub_25B37F500();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:
  return sub_25B2DA234(v10, a2, a1, v16);
}

uint64_t sub_25B2D9E3C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t result = sub_25B2E3598(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.Value);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_25B2D9EE4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = sub_25B37F640();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_25B2D9FA4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B2E3598(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for ReplicatorRecord(0);
  uint64_t result = sub_25B2E3598(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_25B2DA090(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t result = sub_25B2E3598(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.ID);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_25B2DA144(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B2E3598(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_25B37F640();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_25B2DA234(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = sub_25B37F500();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t sub_25B2DA2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_25B3801A0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_25B3801A0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_25B2DA3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_25B2DA460(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v42 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v50);
  uint64_t v46 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v51);
  BOOL v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = v2 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v17 = a2 & ~v16;
  if ((*(void *)(v2 + 64 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
  {
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v12 + 72);
    uint64_t v48 = ~v16;
    uint64_t v49 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v44 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v45 = v10;
    uint64_t v20 = v5;
    uint64_t v21 = v46;
    uint64_t v47 = v19;
    do
    {
      sub_25B2E3660(*(void *)(v2 + 48) + v19 * v17, (uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
      BOOL v22 = *v14 == *a1 && v14[1] == a1[1];
      if (!v22 && (sub_25B3801A0() & 1) == 0) {
        goto LABEL_4;
      }
      BOOL v23 = v14[2] == a1[2] && v14[3] == a1[3];
      if (!v23 && (sub_25B3801A0() & 1) == 0 || (v14[4] != a1[4] || v14[5] != a1[5]) && (sub_25B3801A0() & 1) == 0) {
        goto LABEL_4;
      }
      uint64_t v24 = v15;
      uint64_t v25 = *(int *)(v51 + 28);
      uint64_t v26 = (uint64_t)a1 + v25;
      uint64_t v27 = v21 + *(int *)(v50 + 48);
      uint64_t v28 = v21;
      sub_25B2E3660((uint64_t)v14 + v25, v21, type metadata accessor for ReplicatorRecord.ID.Ownership);
      sub_25B2E3660(v26, v27, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v29 = *v49;
      if ((*v49)(v28, 1, v20) == 1)
      {
        int v30 = v29(v27, 1, v20);
        uint64_t v15 = v24;
        uint64_t v21 = v28;
        uint64_t v19 = v47;
        uint64_t v18 = v48;
        if (v30 != 1) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v31 = v28;
        uint64_t v32 = (uint64_t)v45;
        sub_25B2E3660(v31, (uint64_t)v45, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v29(v27, 1, v20) == 1)
        {
          (*v44)(v32, v20);
          uint64_t v15 = v24;
          uint64_t v21 = v46;
          uint64_t v19 = v47;
          uint64_t v18 = v48;
LABEL_23:
          sub_25B2E344C(v21, &qword_26B341530);
          goto LABEL_4;
        }
        BOOL v33 = v42;
        (*v41)(v42, v27, v20);
        int v43 = sub_25B37F610();
        uint64_t v34 = *v44;
        (*v44)((uint64_t)v33, v20);
        v34(v32, v20);
        uint64_t v15 = v24;
        uint64_t v21 = v46;
        uint64_t v19 = v47;
        uint64_t v18 = v48;
        if ((v43 & 1) == 0)
        {
          sub_25B2E3600(v46, type metadata accessor for ReplicatorRecord.ID.Ownership);
          goto LABEL_4;
        }
      }
      sub_25B2E3600(v21, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v35 = *(int *)(v51 + 32);
      uint64_t v36 = *(void *)((char *)v14 + v35);
      uint64_t v37 = *(void *)((char *)v14 + v35 + 8);
      uint64_t v38 = (void *)((char *)a1 + v35);
      if (v36 == *v38 && v37 == v38[1] || (sub_25B3801A0() & 1) != 0)
      {
        sub_25B2E3600((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
        return v17;
      }
LABEL_4:
      sub_25B2E3600((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v17 = (v17 + 1) & v18;
    }
    while (((*(void *)(v15 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  return v17;
}

unint64_t sub_25B2DA990(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_25B37F9A0();
    uint64_t v8 = v7;
    if (v6 == sub_25B37F9A0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_25B37F9A0();
          uint64_t v15 = v14;
          if (v13 == sub_25B37F9A0() && v15 == v16) {
            break;
          }
          char v18 = sub_25B3801A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_25B2DAB08(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    char v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_25B2E30B0((unint64_t *)&unk_26B340CF0, MEMORY[0x263F07508]);
      char v15 = sub_25B37F960();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

void *sub_25B2DACC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8A0);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_25B37FFA0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v20 = *(void *)(v25 + 72) * v17;
    sub_25B2E3660(*(void *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for ReplicatorRecord.Value);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    unint64_t result = (void *)sub_25B2E3598((uint64_t)v4, *(void *)(v7 + 56) + v20, type metadata accessor for ReplicatorRecord.Value);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25B2DAF44()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FFA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    long long v25 = *(_OWORD *)(v21 + 16);
    *uint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(_OWORD *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25B2DB10C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CB0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FFA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v31 - 1) & v31;
    unint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    char v24 = *(unsigned char *)(v21 + 16);
    char v25 = *(unsigned char *)(v21 + 17);
    char v26 = *(unsigned char *)(v21 + 40);
    int64_t v27 = (void *)(*(void *)(v4 + 48) + v16);
    long long v28 = *(_OWORD *)(v21 + 24);
    *int64_t v27 = v19;
    v27[1] = v18;
    uint64_t v29 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v29 = v22;
    *(void *)(v29 + 8) = v23;
    *(unsigned char *)(v29 + 16) = v24;
    *(unsigned char *)(v29 + 17) = v25;
    *(_OWORD *)(v29 + 24) = v28;
    *(unsigned char *)(v29 + 40) = v26;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  unint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    int64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25B2DB2F0()
{
  return sub_25B2DB320(&qword_26A4EB350);
}

void *sub_25B2DB2FC()
{
  return sub_25B2DB320(&qword_26B340B48);
}

void *sub_25B2DB308()
{
  return sub_25B2DB320(&qword_26B341268);
}

void *sub_25B2DB314()
{
  return sub_25B2DB320(&qword_26A4EB890);
}

void *sub_25B2DB320(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v8 = *v1;
  uint64_t v9 = sub_25B37FFA0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v3 = v10;
    return result;
  }
  int64_t v27 = v3;
  unint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    unint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v14);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 16 * v19;
    unint64_t v22 = *(void *)(v10 + 48) + v20;
    uint64_t v23 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    long long v31 = *(_OWORD *)(*(void *)(v8 + 56) + v21);
    v23(v22, v7, v4);
    *(_OWORD *)(*(void *)(v10 + 56) + v21) = v31;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v3 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v14);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_25B2DB5C4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB40);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FFA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    void *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)sub_25B2E2B14(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25B2DB78C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB898);
  uint64_t v8 = *v0;
  uint64_t v9 = sub_25B37FFA0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v10;
    return result;
  }
  int64_t v27 = v1;
  unint64_t result = (void *)(v9 + 64);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v12 + 8 * v13) {
    unint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v13);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v18) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v12 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v28 + 72) * v20;
    sub_25B2E3660(*(void *)(v8 + 48) + v21, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v22 = *(void *)(v29 + 72) * v20;
    sub_25B2E3660(*(void *)(v8 + 56) + v22, (uint64_t)v4, type metadata accessor for ReplicatorRecord);
    sub_25B2E3598((uint64_t)v7, *(void *)(v10 + 48) + v21, type metadata accessor for ReplicatorRecord.ID);
    unint64_t result = (void *)sub_25B2E3598((uint64_t)v4, *(void *)(v10 + 56) + v22, type metadata accessor for ReplicatorRecord);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v18)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v12 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25B2DBABC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB48);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_25B37FFA0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  unint64_t v24 = v1;
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_25B2E3660(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    sub_25B2E3598((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for ReplicatorRecord.ID);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25B2DBD44()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D48);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = sub_25B37FFA0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v24 = v10;
    return result;
  }
  unint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    unint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v29 + 72) * v18;
    sub_25B2E3660(*(void *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v20 = *(void *)(v2 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v8 + 56) + v20, v1);
    sub_25B2E3598((uint64_t)v7, *(void *)(v10 + 48) + v19, type metadata accessor for ReplicatorRecord.ID);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v10 + 56) + v20, v4, v1);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_25B2DC084()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v25 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E70);
  uint64_t v8 = *v0;
  uint64_t v9 = sub_25B37FFA0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v10;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v9 + 64);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v12 + 8 * v13) {
    unint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v13);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v12 + 8 * v14);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v26 + 72) * v20;
    sub_25B2E3660(*(void *)(v8 + 48) + v21, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E3660(*(void *)(v8 + 56) + v21, (uint64_t)v5, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E3598((uint64_t)v7, *(void *)(v10 + 48) + v21, type metadata accessor for ReplicatorRecord.ID);
    unint64_t result = (void *)sub_25B2E3598((uint64_t)v5, *(void *)(v10 + 56) + v21, type metadata accessor for ReplicatorRecord.ID);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v18)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v12 + 8 * v24);
  if (v23)
  {
    int64_t v14 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25B2DC340()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB58);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FFA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_25B2E2B6C(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_25B2DCE7C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_25B2DC52C()
{
  uint64_t v1 = sub_25B37F500();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB50);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_25B37FFA0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_25B2DC7BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v10 = (void *)v9;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v37 = a1;
  uint64_t v40 = a9;
  uint64_t v12 = sub_25B37FD00();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v34 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = sub_25B37F860();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v16 = *a2;
  uint64_t v31 = a2[1];
  uint64_t v32 = v16;
  LODWORD(v16) = *((unsigned __int8 *)a2 + 16);
  int v29 = *((unsigned __int8 *)a2 + 17);
  int v30 = v16;
  uint64_t v17 = a2[3];
  uint64_t v27 = a2[4];
  uint64_t v28 = v17;
  int v33 = *((unsigned __int8 *)a2 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(void *)(v9 + 240) = v18;
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry();
  swift_getAssociatedConformanceWitness();
  *(void *)(v9 + 248) = sub_25B37F8C0();
  type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B2E30B0(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  *(void *)(v9 + 256) = sub_25B37F8C0();
  sub_25B37F640();
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  swift_getFunctionTypeMetadata1();
  sub_25B2E30B0(&qword_26B340FA0, MEMORY[0x263F07508]);
  *(void *)(v9 + 264) = sub_25B37F8C0();
  sub_25B2E3070();
  sub_25B37F840();
  uint64_t v45 = MEMORY[0x263F8EE78];
  sub_25B2E30B0((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B2E30F8((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x263F8F130], v36);
  *(void *)(v9 + 272) = sub_25B37FD30();
  uint64_t v19 = v37;
  sub_25B2E3148(v37, v9 + 16);
  uint64_t v20 = v31;
  *(void *)(v9 + 96) = v32;
  *(void *)(v9 + 104) = v20;
  *(unsigned char *)(v9 + 112) = v30;
  *(unsigned char *)(v9 + 113) = v29;
  uint64_t v21 = v27;
  *(void *)(v9 + 120) = v28;
  *(void *)(v9 + 128) = v21;
  *(unsigned char *)(v9 + 136) = v33;
  uint64_t v22 = v38;
  sub_25B2E2FE0(v38, v9 + 144, (uint64_t *)&unk_26A4EB838);
  uint64_t v23 = v40;
  uint64_t v24 = v41;
  *(void *)(v9 + 192) = v39;
  *(void *)(v9 + 200) = v24;
  uint64_t v25 = v43;
  v10[26] = v42;
  v10[27] = v25;
  v10[28] = v44;
  v10[29] = v23;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_25B2CBE98((uint64_t)&unk_2708E84A0, (uint64_t)&unk_26A4EBB88);
  sub_25B2CBE98((uint64_t)&unk_2708E8400, (uint64_t)&unk_26A4EBB68);
  sub_25B2CBFD8();
  sub_25B2E344C(v22, (uint64_t *)&unk_26A4EB838);
  __swift_destroy_boxed_opaque_existential_1(v19);
  return v10;
}

unint64_t sub_25B2DCCD4()
{
  unint64_t result = qword_26A4EB610;
  if (!qword_26A4EB610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB610);
  }
  return result;
}

uint64_t sub_25B2DCD28@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2CCCD4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_25B2DCD44@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2CD2C8(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_25B2DCD6C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25B2DCD94@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2CDAC4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_2(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_25B2DCE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_OWORD *sub_25B2DCE7C(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_25B2DCE94@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2CF834(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for ReplicatorStore.Change()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25B2DCEC8(uint64_t a1)
{
  return sub_25B2CFC74(a1, v1);
}

uint64_t sub_25B2DCED4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ReplicatorStore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ReplicatorStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicatorStore);
}

uint64_t dispatch thunk of ReplicatorStore.entries.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ReplicatorStore.__allocating_init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ReplicatorStore.version(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ReplicatorStore.retrieveFile(for:protocolVersion:path:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 304))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of ReplicatorStore.record(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ReplicatorStore.add(_:destination:schedule:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ReplicatorStore.add(_:destination:schedule:expiration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of ReplicatorStore.add(_:destination:schedule:expiration:options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of ReplicatorStore.delete(id:schedule:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of ReplicatorStore.entryUpdates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t sub_25B2DD1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

void sub_25B2DD1D4()
{
  swift_getAssociatedTypeWitness();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ReplicatorRecord.ID(319);
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v7 = &v6;
      swift_checkMetadataState();
      if (v2 <= 0x3F)
      {
        sub_25B2E0894();
        if (v3 <= 0x3F)
        {
          sub_25B37F640();
          if (v4 <= 0x3F)
          {
            swift_getTupleTypeLayout();
            uint64_t v8 = &v5;
            swift_initEnumMetadataMultiPayload();
          }
        }
      }
    }
  }
}

void *sub_25B2DD3A0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v75 = v7;
  uint64_t v76 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = v9 | 7;
  uint64_t v67 = v11 + v6;
  uint64_t v12 = *(void *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84)) {
    size_t v13 = *(void *)(v8 + 64);
  }
  else {
    size_t v13 = v12 + 1;
  }
  size_t __n = v13;
  size_t v74 = v13 + 7;
  unint64_t v14 = ((v13 + 7 + ((v9 + 48) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v71 = v4;
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v66 = *(void *)(v15 + 64) + v11;
  uint64_t v16 = sub_25B37F500();
  uint64_t v17 = v5;
  uint64_t v18 = *(void *)(v16 - 8);
  int v19 = *(_DWORD *)(v18 + 80);
  uint64_t v20 = v19;
  unint64_t v72 = v14;
  if (*(_DWORD *)(v18 + 84)) {
    uint64_t v22 = *(void *)(v18 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v18 + 64) + 1;
  }
  unint64_t v21 = (v14 + v19 + (v66 & ~v11)) & ~(unint64_t)v19;
  if (((v22 + v9 + v21) & ~(unint64_t)v9) + v12 <= v14 + ((v11 + v6) & ~v11)) {
    unint64_t v23 = v14 + ((v11 + v6) & ~v11);
  }
  else {
    unint64_t v23 = ((v22 + v9 + v21) & ~(unint64_t)v9) + v12;
  }
  uint64_t v24 = v11 | (v19 | *(unsigned char *)(v15 + 80) | *(unsigned char *)(v17 + 80));
  int v25 = (*(_DWORD *)(v15 + 80) | *(_DWORD *)(v17 + 80) | v9 | v19) & 0x100000;
  if (v24 != 7 || v25 != 0 || v23 + 1 > 0x18)
  {
    uint64_t v28 = *(void *)a2;
    *a1 = *(void *)a2;
    int v29 = (void *)(v28 + ((v24 + 16) & ~v24));
    swift_retain();
  }
  else
  {
    unsigned int v30 = a2[v23];
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *a2;
          if (v23 < 4) {
            goto LABEL_29;
          }
          goto LABEL_31;
        case 2:
          int v33 = *(unsigned __int16 *)a2;
          if (v23 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_29;
        case 3:
          int v33 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v23 < 4) {
            goto LABEL_29;
          }
          goto LABEL_31;
        case 4:
          int v33 = *(_DWORD *)a2;
          if (v23 < 4) {
LABEL_29:
          }
            unsigned int v30 = (v33 | (v31 << (8 * v23))) + 2;
          else {
LABEL_31:
          }
            unsigned int v30 = v33 + 2;
          break;
        default:
          break;
      }
    }
    unint64_t v65 = v23;
    uint64_t v34 = ~v11;
    uint64_t v35 = ~v10;
    if (v30 == 1)
    {
      uint64_t v64 = *(void *)(v16 - 8);
      uint64_t v68 = v22 + v10;
      uint64_t v70 = v16;
      size_t v62 = v22;
      uint64_t v63 = ~v20;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v71);
      uint64_t v36 = (void *)(((unint64_t)a1 + v66) & v34);
      uint64_t v37 = (void *)((unint64_t)&a2[v66] & v34);
      void *v36 = *v37;
      v36[1] = v37[1];
      uint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
      void *v38 = *v39;
      v38[1] = v39[1];
      uint64_t v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
      void *v40 = *v41;
      v40[1] = v41[1];
      uint64_t v42 = (void *)(((unint64_t)v40 + v10 + 16) & v35);
      uint64_t v43 = (const void *)(((unint64_t)v41 + v10 + 16) & v35);
      uint64_t v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v76 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v44(v43, 1, v75))
      {
        memcpy(v42, v43, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v76 + 16))(v42, v43, v75);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v42, 0, 1, v75);
      }
      uint64_t v54 = (void *)(((unint64_t)v42 + v74) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v55 = (void *)(((unint64_t)v43 + v74) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v54 = *v55;
      v54[1] = v55[1];
      uint64_t v56 = (void *)(((unint64_t)v36 + v72 + v20) & v63);
      int v57 = (const void *)(((unint64_t)v37 + v72 + v20) & v63);
      uint64_t v58 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48);
      swift_bridgeObjectRetain();
      int v29 = a1;
      if (v58(v57, 1, v70))
      {
        memcpy(v56, v57, v62);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(v56, v57, v70);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v56, 0, 1, v70);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))(((unint64_t)v56 + v68) & ~v10, ((unint64_t)v57 + v68) & ~v10, v75);
      *((unsigned char *)a1 + v65) = 1;
    }
    else
    {
      int v29 = a1;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v17 + 16))(a1, a2, AssociatedTypeWitness);
      uint64_t v45 = (void *)(((unint64_t)a1 + v67) & v34);
      uint64_t v46 = (void *)((unint64_t)&a2[v67] & v34);
      void *v45 = *v46;
      v45[1] = v46[1];
      uint64_t v47 = (void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v48 = (void *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v47 = *v48;
      v47[1] = v48[1];
      uint64_t v49 = (void *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v50 = (void *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v49 = *v50;
      v49[1] = v50[1];
      uint64_t v51 = (void *)(((unint64_t)v49 + v10 + 16) & v35);
      uint64_t v52 = (const void *)(((unint64_t)v50 + v10 + 16) & v35);
      uint64_t v53 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v76 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53(v52, 1, v75))
      {
        memcpy(v51, v52, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v76 + 16))(v51, v52, v75);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v51, 0, 1, v75);
      }
      uint64_t v59 = (void *)(((unint64_t)v51 + v74) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v60 = (void *)(((unint64_t)v52 + v74) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v59 = *v60;
      v59[1] = v60[1];
      *((unsigned char *)a1 + v65) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v29;
}

uint64_t sub_25B2DDA80(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v5 = *(void *)(v35 + 64);
  uint64_t v41 = sub_25B37F640();
  uint64_t v6 = *(void *)(v41 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v42 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v37 = v3;
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v9 = *(void *)(*(void *)(v41 - 8) + 64);
  }
  else {
    uint64_t v9 = v8 + 1;
  }
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v33 = (v7 | 7) + v5;
  uint64_t v39 = v9;
  uint64_t v38 = (v7 + 48) & ~v7;
  unint64_t v10 = ((v9 + 7 + v38) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v11 = v10 + (v33 & ~(v7 | 7));
  uint64_t v12 = *(void *)(v34 + 64) + (v7 | 7);
  uint64_t v40 = sub_25B37F500();
  uint64_t v13 = *(void *)(v40 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (v12 & ~(v7 | 7)) + v14 + v10;
  uint64_t v16 = v8;
  unint64_t v17 = v15 & ~v14;
  uint64_t v18 = *(void *)(v13 + 64);
  if (!*(_DWORD *)(v13 + 84)) {
    ++v18;
  }
  uint64_t v19 = v18 + v7;
  unint64_t v20 = ((v18 + v7 + v17) & ~v7) + v16;
  if (v20 <= v11) {
    unint64_t v20 = v11;
  }
  unsigned int v21 = a1[v20];
  unsigned int v22 = v21 - 2;
  if (v21 >= 2)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *a1;
        if (v20 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 2:
        int v24 = *(unsigned __int16 *)a1;
        if (v20 >= 4) {
          goto LABEL_20;
        }
        goto LABEL_18;
      case 3:
        int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v20 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 4:
        int v24 = *(_DWORD *)a1;
        if (v20 < 4) {
LABEL_18:
        }
          unsigned int v21 = (v24 | (v22 << (8 * v20))) + 2;
        else {
LABEL_20:
        }
          unsigned int v21 = v24 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v25 = ~(v7 | 7);
  uint64_t v26 = ~v7;
  if (v21 == 1)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v34 + 8))(a1, v37);
    unint64_t v27 = (unint64_t)&a1[v12] & v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v28 = (v7 + ((((v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v26;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v28, 1, v41)) {
      (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v28, v41);
    }
    swift_bridgeObjectRelease();
    unint64_t v29 = (v27 + v14 + ((v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v14;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v29, 1, v40)) {
      (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v29, v40);
    }
    unsigned int v30 = *(uint64_t (**)(unint64_t, uint64_t))(v42 + 8);
    return v30((v19 + v29) & v26, v41);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v35 + 8))(a1, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v32 = (v7 + ((((((unint64_t)&a1[v33] & v25) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v26;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v32, 1, v41)) {
      (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v32, v41);
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25B2DDF80(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v6 = *(void *)(v58 + 64);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v11 = (v9 | 7) + v6;
  uint64_t v70 = v7;
  uint64_t v71 = v8;
  uint64_t v12 = *(void *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84)) {
    size_t v13 = *(void *)(v8 + 64);
  }
  else {
    size_t v13 = v12 + 1;
  }
  size_t __n = v13;
  size_t v68 = v13 + 7;
  unint64_t v14 = ((v13 + 7 + ((v9 + 48) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v62 = v4;
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v15 = *(void *)(v57 + 64);
  uint64_t v16 = v15 + v10;
  uint64_t v17 = (v15 + v10) & ~v10;
  uint64_t v18 = sub_25B37F500();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  unint64_t v64 = v14;
  uint64_t v65 = v19;
  uint64_t v66 = v18;
  if (*(_DWORD *)(v19 + 84)) {
    uint64_t v21 = *(void *)(v19 + 64);
  }
  else {
    uint64_t v21 = *(void *)(v19 + 64) + 1;
  }
  if (((v21 + v9 + ((v14 + v20 + v17) & ~v20)) & ~v9) + v12 <= v14 + (v11 & ~(v9 | 7))) {
    unint64_t v22 = v14 + (v11 & ~(v9 | 7));
  }
  else {
    unint64_t v22 = ((v21 + v9 + ((v14 + v20 + v17) & ~v20)) & ~v9) + v12;
  }
  unsigned int v23 = a2[v22];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v22 <= 3) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *a2;
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 2:
        int v26 = *(unsigned __int16 *)a2;
        if (v22 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_20;
      case 3:
        int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 4:
        int v26 = *(_DWORD *)a2;
        if (v22 < 4) {
LABEL_20:
        }
          unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
        else {
LABEL_22:
        }
          unsigned int v23 = v26 + 2;
        break;
      default:
        break;
    }
  }
  unint64_t v69 = v22;
  uint64_t v27 = ~v10;
  uint64_t v28 = ~v9;
  if (v23 == 1)
  {
    size_t v56 = v21;
    uint64_t v59 = ~v20;
    uint64_t v61 = v21 + v9;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v57 + 16))(a1, a2, v62);
    unint64_t v29 = (void *)((v16 + a1) & v27);
    unsigned int v30 = (void *)((unint64_t)&a2[v16] & v27);
    *unint64_t v29 = *v30;
    v29[1] = v30[1];
    unsigned int v31 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v31 = *v32;
    v31[1] = v32[1];
    uint64_t v33 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v33 = *v34;
    v33[1] = v34[1];
    uint64_t v35 = (void *)(((unint64_t)v33 + v9 + 16) & v28);
    uint64_t v63 = ~v9;
    uint64_t v36 = (const void *)(((unint64_t)v34 + v9 + 16) & v28);
    uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v37(v36, 1, v70))
    {
      memcpy(v35, v36, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v71 + 16))(v35, v36, v70);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v35, 0, 1, v70);
    }
    uint64_t v48 = (void *)(((unint64_t)v35 + v68) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v49 = (void *)(((unint64_t)v36 + v68) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v48 = *v49;
    v48[1] = v49[1];
    uint64_t v50 = (void *)(((unint64_t)v29 + v64 + v20) & v59);
    uint64_t v51 = (const void *)(((unint64_t)v30 + v64 + v20) & v59);
    uint64_t v52 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    uint64_t v38 = a1;
    if (v52(v51, 1, v66))
    {
      memcpy(v50, v51, v56);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v50, v51, v66);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v50, 0, 1, v66);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 16))(((unint64_t)v50 + v61) & v63, ((unint64_t)v51 + v61) & v63, v70);
    *(unsigned char *)(a1 + v69) = 1;
  }
  else
  {
    uint64_t v38 = a1;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v58 + 16))(a1, a2, v60);
    uint64_t v39 = (void *)((v11 + a1) & v27);
    uint64_t v40 = (void *)((unint64_t)&a2[v11] & v27);
    *uint64_t v39 = *v40;
    v39[1] = v40[1];
    uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v41 = *v42;
    v41[1] = v42[1];
    uint64_t v43 = (void *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = (void *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v44;
    v43[1] = v44[1];
    uint64_t v45 = (void *)(((unint64_t)v43 + v9 + 16) & v28);
    uint64_t v46 = (const void *)(((unint64_t)v44 + v9 + 16) & v28);
    uint64_t v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v47(v46, 1, v70))
    {
      memcpy(v45, v46, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v71 + 16))(v45, v46, v70);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v45, 0, 1, v70);
    }
    uint64_t v53 = (void *)(((unint64_t)v45 + v68) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v54 = (void *)(((unint64_t)v46 + v68) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v53 = *v54;
    v53[1] = v54[1];
    *(unsigned char *)(a1 + v69) = 0;
    swift_bridgeObjectRetain();
  }
  return v38;
}

unsigned __int8 *sub_25B2DE5EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v68 = AssociatedTypeWitness;
    uint64_t v7 = *(void *)(v67 + 64);
    uint64_t v78 = sub_25B37F640();
    uint64_t v8 = *(void *)(v78 - 8);
    uint64_t v9 = v8;
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = v10 | 7;
    uint64_t v66 = (v10 | 7) + v7;
    uint64_t v12 = *(void *)(v8 + 64);
    if (*(_DWORD *)(v8 + 84)) {
      size_t v13 = *(void *)(v8 + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    size_t __n = v13;
    size_t v76 = v13 + 7;
    unint64_t v14 = ((v13 + 7 + ((v10 + 48) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v69 = v5;
    uint64_t v64 = *(void *)(v5 - 8);
    uint64_t v65 = *(void *)(v64 + 64) + v11;
    uint64_t v15 = v65 & ~v11;
    uint64_t v75 = sub_25B37F500();
    uint64_t v16 = *(void *)(v75 - 8);
    uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
    unint64_t v61 = v14;
    uint64_t v72 = v16;
    size_t v18 = *(void *)(v16 + 64);
    if (!*(_DWORD *)(v16 + 84)) {
      ++v18;
    }
    size_t v60 = v18;
    size_t v73 = v18 + v10;
    if (((v18 + v10 + ((v14 + v17 + v15) & ~v17)) & ~v10) + v12 <= v14 + (v66 & ~(v10 | 7))) {
      unint64_t v19 = v14 + (v66 & ~(v10 | 7));
    }
    else {
      unint64_t v19 = ((v18 + v10 + ((v14 + v17 + v15) & ~v17)) & ~v10) + v12;
    }
    unsigned int v20 = a1[v19];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a1;
          if (v19 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v23 = *(unsigned __int16 *)a1;
          if (v19 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v23 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v19 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v23 = *(_DWORD *)a1;
          if (v19 < 4) {
LABEL_20:
          }
            unsigned int v20 = (v23 | (v21 << (8 * v19))) + 2;
          else {
LABEL_22:
          }
            unsigned int v20 = v23 + 2;
          break;
        default:
          break;
      }
    }
    unint64_t v77 = v19;
    uint64_t v24 = ~v11;
    uint64_t v25 = ~v10;
    uint64_t v70 = v17;
    uint64_t v71 = ~v10;
    uint64_t v63 = ~v17;
    if (v20 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v64 + 8))(a1, v69);
      unint64_t v26 = (unint64_t)&a1[v65] & v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = (v10 + ((((v26 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v25;
      uint64_t v62 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      if (!v62(v27, 1, v78)) {
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v27, v78);
      }
      swift_bridgeObjectRelease();
      unint64_t v28 = (v26 + v70 + ((((v10 + 48) & ~v10) + __n + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & v63;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))(v28, 1, v75)) {
        (*(void (**)(unint64_t, uint64_t))(v72 + 8))(v28, v75);
      }
      uint64_t v29 = ~v10;
      (*(void (**)(size_t, uint64_t))(v9 + 8))((v73 + v28) & v71, v78);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v67 + 8))(a1, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v30 = (v10
           + ((((((unint64_t)&a1[v66] & v24) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 16) & v25;
      uint64_t v62 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      uint64_t v29 = ~v10;
      if (!v62(v30, 1, v78)) {
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v30, v78);
      }
      swift_bridgeObjectRelease();
    }
    unsigned int v31 = a2[v77];
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v77 <= 3) {
        uint64_t v33 = v77;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *a2;
          if (v77 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_42;
        case 2:
          int v34 = *(unsigned __int16 *)a2;
          if (v77 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_42;
        case 3:
          int v34 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v77 < 4) {
            goto LABEL_42;
          }
          goto LABEL_52;
        case 4:
          int v34 = *(_DWORD *)a2;
          if (v77 < 4)
          {
LABEL_42:
            unsigned int v31 = (v34 | (v32 << (8 * v77))) + 2;
            break;
          }
LABEL_52:
          if (v34 != -1) {
            goto LABEL_53;
          }
          goto LABEL_44;
        default:
          break;
      }
    }
    if (v31 == 1)
    {
LABEL_44:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v64 + 16))(a1, a2, v69);
      uint64_t v35 = (void *)((unint64_t)&a1[v65] & v24);
      uint64_t v36 = v29;
      uint64_t v37 = (void *)((unint64_t)&a2[v65] & v24);
      *uint64_t v35 = *v37;
      v35[1] = v37[1];
      uint64_t v38 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
      void *v38 = *v39;
      v38[1] = v39[1];
      uint64_t v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
      void *v40 = *v41;
      v40[1] = v41[1];
      uint64_t v42 = (void *)(((unint64_t)v40 + v10 + 16) & v36);
      uint64_t v43 = (const void *)(((unint64_t)v41 + v10 + 16) & v36);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v62((unint64_t)v43, 1, v78))
      {
        memcpy(v42, v43, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v42, v43, v78);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v78);
      }
      uint64_t v44 = (void *)(((unint64_t)v42 + v76) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v45 = (void *)(((unint64_t)v43 + v76) & 0xFFFFFFFFFFFFFFF8);
      void *v44 = *v45;
      v44[1] = v45[1];
      uint64_t v46 = (void *)(((unint64_t)v35 + v61 + v70) & v63);
      uint64_t v47 = (const void *)(((unint64_t)v37 + v61 + v70) & v63);
      uint64_t v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48);
      swift_bridgeObjectRetain();
      if (v48(v47, 1, v75))
      {
        memcpy(v46, v47, v60);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v72 + 16))(v46, v47, v75);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v46, 0, 1, v75);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v46 + v73) & v71, ((unint64_t)v47 + v73) & v71, v78);
      a1[v77] = 1;
    }
    else
    {
LABEL_53:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v67 + 16))(a1, a2, v68);
      uint64_t v49 = (void *)((unint64_t)&a1[v66] & v24);
      uint64_t v50 = (void *)((unint64_t)&a2[v66] & v24);
      *uint64_t v49 = *v50;
      v49[1] = v50[1];
      uint64_t v51 = (void *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v52 = (void *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v51 = *v52;
      v51[1] = v52[1];
      uint64_t v53 = (void *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v54 = (void *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v53 = *v54;
      v53[1] = v54[1];
      uint64_t v55 = (void *)(((unint64_t)v53 + v10 + 16) & v29);
      size_t v56 = (const void *)(((unint64_t)v54 + v10 + 16) & v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v62((unint64_t)v56, 1, v78))
      {
        memcpy(v55, v56, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v55, v56, v78);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v55, 0, 1, v78);
      }
      uint64_t v57 = (void *)(((unint64_t)v55 + v76) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v58 = (void *)(((unint64_t)v56 + v76) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v57 = *v58;
      v57[1] = v58[1];
      a1[v77] = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_25B2DEF34(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v6 = *(void *)(v54 + 64);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v53 = (v9 | 7) + v6;
  uint64_t v68 = v8;
  uint64_t v11 = *(void *)(v8 + 64);
  int v65 = *(_DWORD *)(v8 + 84);
  if (v65) {
    size_t v12 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  else {
    size_t v12 = v11 + 1;
  }
  size_t __n = v12;
  uint64_t v56 = v4;
  size_t v57 = (((v9 + 48) & ~v9) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = v53 & ~(v9 | 7);
  unint64_t v13 = v57 + 16 + v60;
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v14 = *(void *)(v52 + 64);
  uint64_t v15 = v14 + v10;
  uint64_t v16 = (v14 + v10) & ~v10;
  uint64_t v17 = sub_25B37F500();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  size_t v59 = v57 + 16;
  uint64_t v62 = v18;
  uint64_t v63 = v17;
  if (*(_DWORD *)(v18 + 84)) {
    uint64_t v21 = *(void *)(v18 + 64);
  }
  else {
    uint64_t v21 = *(void *)(v18 + 64) + 1;
  }
  uint64_t v66 = v11;
  uint64_t v20 = (v16 + v19 + v57 + 16) & ~v19;
  unint64_t v22 = ((v21 + v9 + v20) & ~v9) + v11;
  if (v22 > v13) {
    unint64_t v13 = ((v21 + v9 + v20) & ~v9) + v11;
  }
  unsigned int v23 = a2[v13];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v25 = v13;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *a2;
        if (v13 < 4) {
          goto LABEL_19;
        }
        goto LABEL_21;
      case 2:
        int v26 = *(unsigned __int16 *)a2;
        if (v13 >= 4) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 3:
        int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_19;
        }
        goto LABEL_21;
      case 4:
        int v26 = *(_DWORD *)a2;
        if (v13 < 4) {
LABEL_19:
        }
          unsigned int v23 = (v26 | (v24 << (8 * v13))) + 2;
        else {
LABEL_21:
        }
          unsigned int v23 = v26 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v67 = v7;
  uint64_t v27 = ~v10;
  uint64_t v28 = ~v9;
  if (v23 == 1)
  {
    size_t v58 = v21;
    uint64_t v61 = v21 + v9;
    uint64_t v29 = ~v19;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v52 + 32))(a1, a2, v56);
    unint64_t v30 = (_OWORD *)((v15 + a1) & v27);
    unsigned int v31 = (_OWORD *)((unint64_t)&a2[v15] & v27);
    *unint64_t v30 = *v31;
    unsigned int v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v32 = *v33;
    int v34 = (_OWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
    *int v34 = *v35;
    uint64_t v36 = (void *)(((unint64_t)v34 + v9 + 16) & v28);
    uint64_t v37 = (const void *)(((unint64_t)v35 + v9 + 16) & v28);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v37, 1, v67))
    {
      memcpy(v36, v37, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v36, v37, v67);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v36, 0, 1, v67);
    }
    uint64_t v46 = 7;
    if (!v65) {
      uint64_t v46 = 8;
    }
    *(_OWORD *)(((unint64_t)v36 + v66 + v46) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v37
                                                                                         + v66
                                                                                         + v46) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = (void *)(((unint64_t)v30 + v19 + v59) & v29);
    uint64_t v48 = (const void *)(((unint64_t)v31 + v19 + v59) & v29);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v48, 1, v63))
    {
      memcpy(v47, v48, v58);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v62 + 32))(v47, v48, v63);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v47, 0, 1, v63);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v68 + 32))(((unint64_t)v47 + v61) & v28, ((unint64_t)v48 + v61) & v28, v67);
    char v49 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v54 + 32))(a1, a2, v55);
    uint64_t v38 = (_OWORD *)((v53 + a1) & v27);
    uint64_t v39 = (_OWORD *)((unint64_t)&a2[v53] & v27);
    _OWORD *v38 = *v39;
    uint64_t v40 = (_OWORD *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = (_OWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    _OWORD *v40 = *v41;
    uint64_t v42 = (_OWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v43 = (_OWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v42 = *v43;
    uint64_t v44 = (void *)(((unint64_t)v42 + v9 + 16) & v28);
    uint64_t v45 = (const void *)(((unint64_t)v43 + v9 + 16) & v28);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v45, 1, v67))
    {
      memcpy(v44, v45, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v44, v45, v67);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v44, 0, 1, v67);
    }
    char v49 = 0;
    uint64_t v50 = 7;
    if (!v65) {
      uint64_t v50 = 8;
    }
    *(_OWORD *)(((unint64_t)v44 + v11 + v50) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v45
                                                                                         + v11
                                                                                         + v50) & 0xFFFFFFFFFFFFFFF8);
    if (v22 <= v60 + v57 + 16) {
      unint64_t v13 = v60 + v57 + 16;
    }
    else {
      unint64_t v13 = v22;
    }
  }
  uint64_t result = a1;
  *(unsigned char *)(a1 + v13) = v49;
  return result;
}

unsigned __int8 *sub_25B2DF55C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v63 = AssociatedTypeWitness;
    uint64_t v7 = *(void *)(v62 + 64);
    uint64_t v8 = sub_25B37F640();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v10 | 7;
    uint64_t v61 = (v10 | 7) + v7;
    uint64_t v12 = *(void *)(v9 + 64);
    int v72 = *(_DWORD *)(v9 + 84);
    if (v72) {
      size_t v13 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    size_t v71 = v13;
    unint64_t v66 = (((v10 + 48) & ~v10) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = v66 + 16 + (v61 & ~(v10 | 7));
    uint64_t v64 = v5;
    uint64_t v59 = *(void *)(v5 - 8);
    uint64_t v60 = *(void *)(v59 + 64) + v11;
    uint64_t v70 = sub_25B37F500();
    uint64_t v15 = *(void *)(v70 - 8);
    uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
    unint64_t v56 = v66 + 16;
    uint64_t v68 = v15;
    if (*(_DWORD *)(v15 + 84)) {
      size_t v17 = *(void *)(v15 + 64);
    }
    else {
      size_t v17 = *(void *)(v15 + 64) + 1;
    }
    size_t v69 = v17 + v10;
    uint64_t v73 = v12;
    unint64_t v55 = ((v17 + v10 + (((v60 & ~v11) + v16 + v66 + 16) & ~v16)) & ~v10) + v12;
    if (v55 > v14) {
      unint64_t v14 = ((v17 + v10 + (((v60 & ~v11) + v16 + v66 + 16) & ~v16)) & ~v10) + v12;
    }
    unsigned int v18 = a1[v14];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v20 = v14;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v21 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v21 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v21 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_20:
          }
            unsigned int v18 = (v21 | (v19 << (8 * v14))) + 2;
          else {
LABEL_22:
          }
            unsigned int v18 = v21 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v74 = v8;
    uint64_t v22 = ~v11;
    uint64_t v23 = ~v10;
    uint64_t v65 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v58 = ~v16;
    if (v18 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v59 + 8))(a1, v64);
      unint64_t v24 = (unint64_t)&a1[v60] & v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v25 = (v10 + ((((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v23;
      size_t v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      if (!v57(v25, 1, v74)) {
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v25, v74);
      }
      swift_bridgeObjectRelease();
      uint64_t v26 = (v24 + v65 + v66 + 16) & v58;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v26, 1, v70)) {
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v26, v70);
      }
      uint64_t v23 = ~v10;
      uint64_t v8 = v74;
      (*(void (**)(size_t, uint64_t))(v9 + 8))((v69 + v26) & ~v10, v74);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v62 + 8))(a1, v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      size_t v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      if (!v57((v10+ ((((((unint64_t)&a1[v61] & v22) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16) & v23, 1, v8))(*(void (**)(unint64_t, uint64_t))(v9 + 8))((v10 + ((((((unint64_t)&a1[v61] & v22) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v23, v8); {
      swift_bridgeObjectRelease();
      }
    }
    unsigned int v27 = a2[v14];
    unsigned int v28 = v27 - 2;
    if (v27 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v29 = v14;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *a2;
          if (v14 >= 4) {
            goto LABEL_54;
          }
          goto LABEL_42;
        case 2:
          int v30 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_54;
          }
          goto LABEL_42;
        case 3:
          int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_42;
          }
          goto LABEL_54;
        case 4:
          int v30 = *(_DWORD *)a2;
          if (v14 < 4)
          {
LABEL_42:
            unsigned int v27 = (v30 | (v28 << (8 * v14))) + 2;
            break;
          }
LABEL_54:
          if (v30 != -1) {
            goto LABEL_55;
          }
          goto LABEL_44;
        default:
          break;
      }
    }
    if (v27 == 1)
    {
LABEL_44:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v59 + 32))(a1, a2, v64);
      uint64_t v31 = v23;
      uint64_t v32 = v8;
      uint64_t v33 = (_OWORD *)((unint64_t)&a1[v60] & v22);
      int v34 = (_OWORD *)((unint64_t)&a2[v60] & v22);
      _OWORD *v33 = *v34;
      uint64_t v35 = (_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v35 = *v36;
      uint64_t v37 = (_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = (_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v37 = *v38;
      uint64_t v39 = (void *)(((unint64_t)v37 + v10 + 16) & v31);
      uint64_t v67 = v31;
      uint64_t v40 = (const void *)(((unint64_t)v38 + v10 + 16) & v31);
      if (v57((unint64_t)v40, 1, v32))
      {
        memcpy(v39, v40, v71);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v39, v40, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v39, 0, 1, v32);
      }
      uint64_t v41 = 7;
      if (!v72) {
        uint64_t v41 = 8;
      }
      *(_OWORD *)(((unint64_t)v39 + v73 + v41) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v40
                                                                                           + v73
                                                                                           + v41) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v42 = (void *)(((unint64_t)v33 + v65 + v56) & v58);
      uint64_t v43 = (const void *)(((unint64_t)v34 + v65 + v56) & v58);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v43, 1, v70))
      {
        memcpy(v42, v43, v17);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v42, v43, v70);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v42, 0, 1, v70);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v42 + v69) & v67, ((unint64_t)v43 + v69) & v67, v74);
      a1[v14] = 1;
    }
    else
    {
LABEL_55:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v62 + 32))(a1, a2, v63);
      uint64_t v44 = (_OWORD *)((unint64_t)&a1[v61] & v22);
      uint64_t v45 = (_OWORD *)((unint64_t)&a2[v61] & v22);
      _OWORD *v44 = *v45;
      uint64_t v46 = (_OWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v47 = (_OWORD *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v46 = *v47;
      uint64_t v48 = (_OWORD *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
      char v49 = (_OWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v48 = *v49;
      uint64_t v50 = (void *)(((unint64_t)v48 + v10 + 16) & v23);
      uint64_t v51 = (const void *)(((unint64_t)v49 + v10 + 16) & v23);
      if (v57((unint64_t)v51, 1, v8))
      {
        memcpy(v50, v51, v71);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v50, v51, v8);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
      }
      uint64_t v52 = 7;
      if (!v72) {
        uint64_t v52 = 8;
      }
      *(_OWORD *)(((unint64_t)v50 + v73 + v52) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v51
                                                                                           + v73
                                                                                           + v52) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v53 = (v61 & ~(v10 | 7)) + v66 + 16;
      if (v55 > v53) {
        unint64_t v53 = v55;
      }
      a1[v53] = 0;
    }
  }
  return a1;
}

uint64_t sub_25B2DFE6C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v7 = *(void *)(sub_25B37F640() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((v8 | 7) + v6) & ~(v8 | 7);
  int v10 = *(_DWORD *)(v7 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v13 = *(void *)(sub_25B37F500() - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  int v15 = *(_DWORD *)(v13 + 84);
  uint64_t v16 = *(void *)(v13 + 64);
  if (v10) {
    uint64_t v17 = v11;
  }
  else {
    uint64_t v17 = v11 + 1;
  }
  BOOL v18 = v15 == 0;
  unint64_t v19 = ((v17 + ((v8 + 48) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v20 = v16 + v8;
  if (v18) {
    ++v20;
  }
  unint64_t v21 = ((v20 + ((((v12 + (v8 | 7)) & ~(v8 | 7)) + v14 + v19) & ~v14)) & ~v8) + v11;
  if (v21 <= v19 + v9) {
    unint64_t v22 = v19 + v9;
  }
  else {
    unint64_t v22 = v21;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_28;
  }
  unint64_t v23 = v22 + 1;
  char v24 = 8 * (v22 + 1);
  if ((v22 + 1) <= 3)
  {
    unsigned int v27 = ((a2 + ~(-1 << v24) - 254) >> v24) + 1;
    if (HIWORD(v27))
    {
      int v25 = *(_DWORD *)((char *)a1 + v23);
      if (!v25) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v27 > 0xFF)
    {
      int v25 = *(unsigned __int16 *)((char *)a1 + v23);
      if (!*(unsigned __int16 *)((char *)a1 + v23)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v27 < 2)
    {
LABEL_28:
      unsigned int v29 = *((unsigned __int8 *)a1 + v22);
      if (v29 >= 2) {
        return (v29 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v25 = *((unsigned __int8 *)a1 + v23);
  if (!*((unsigned char *)a1 + v23)) {
    goto LABEL_28;
  }
LABEL_20:
  int v28 = (v25 - 1) << v24;
  if (v23 > 3) {
    int v28 = 0;
  }
  if (v23)
  {
    if (v23 > 3) {
      LODWORD(v23) = 4;
    }
    switch((int)v23)
    {
      case 2:
        LODWORD(v23) = *a1;
        break;
      case 3:
        LODWORD(v23) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v23) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v23) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v23 | v28) + 255;
}

void sub_25B2E0108(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v9 = *(void *)(sub_25B37F640() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ((v10 | 7) + v8) & ~(v10 | 7);
  int v12 = *(_DWORD *)(v9 + 84);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v15 = *(void *)(sub_25B37F500() - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  int v17 = *(_DWORD *)(v15 + 84);
  uint64_t v18 = *(void *)(v15 + 64);
  if (v12) {
    uint64_t v19 = v13;
  }
  else {
    uint64_t v19 = v13 + 1;
  }
  BOOL v20 = v17 == 0;
  unint64_t v21 = ((v19 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v22 = v18 + v10;
  if (v20) {
    ++v22;
  }
  unint64_t v23 = ((v22 + ((((v14 + (v10 | 7)) & ~(v10 | 7)) + v16 + v21) & ~v16)) & ~v10) + v13;
  if (v23 <= v21 + v11) {
    unint64_t v23 = v21 + v11;
  }
  size_t v24 = v23 + 1;
  if (a3 < 0xFF)
  {
    int v25 = 0;
  }
  else if (v24 <= 3)
  {
    unsigned int v28 = ((a3 + ~(-1 << (8 * v24)) - 254) >> (8 * v24)) + 1;
    if (HIWORD(v28))
    {
      int v25 = 4;
    }
    else if (v28 >= 0x100)
    {
      int v25 = 2;
    }
    else
    {
      int v25 = v28 > 1;
    }
  }
  else
  {
    int v25 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v26 = a2 - 255;
    if (v24 < 4)
    {
      int v27 = (v26 >> (8 * v24)) + 1;
      if (v23 != -1)
      {
        int v29 = v26 & ~(-1 << (8 * v24));
        bzero(a1, v24);
        if (v24 == 3)
        {
          *(_WORD *)a1 = v29;
          a1[2] = BYTE2(v29);
        }
        else if (v24 == 2)
        {
          *(_WORD *)a1 = v29;
        }
        else
        {
          *a1 = v29;
        }
      }
    }
    else
    {
      bzero(a1, v23 + 1);
      *(_DWORD *)a1 = v26;
      int v27 = 1;
    }
    switch(v25)
    {
      case 1:
        a1[v24] = v27;
        break;
      case 2:
        *(_WORD *)&a1[v24] = v27;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x25B2E0410);
      case 4:
        *(_DWORD *)&a1[v24] = v27;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v25)
    {
      case 1:
        a1[v24] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v24] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v24] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          a1[v23] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25B2E0438(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v5 = *(void *)(sub_25B37F640() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((v6 | 7) + v4) & ~(v6 | 7);
  uint64_t v8 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v9 = v8 + 1;
  }
  unint64_t v10 = ((v9 + ((v6 + 48) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v11 = v10 + v7;
  uint64_t v12 = (*(void *)(*(void *)(v3 - 8) + 64) + (v6 | 7)) & ~(v6 | 7);
  uint64_t v13 = *(void *)(sub_25B37F500() - 8);
  unint64_t v14 = (v12 + *(unsigned __int8 *)(v13 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v13 + 64) + v6;
  if (!*(_DWORD *)(v13 + 84)) {
    ++v15;
  }
  unint64_t v16 = ((v15 + v14) & ~v6) + v8;
  if (v16 <= v11) {
    unint64_t v16 = v11;
  }
  uint64_t result = a1[v16];
  if (result >= 2)
  {
    if (v16 <= 3) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a1;
        if (v16 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 2:
        int v19 = *(unsigned __int16 *)a1;
        if (v16 >= 4) {
          goto LABEL_20;
        }
        goto LABEL_18;
      case 3:
        int v19 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v16 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 4:
        int v19 = *(_DWORD *)a1;
        if (v16 < 4) {
LABEL_18:
        }
          uint64_t result = (v19 | ((result - 2) << (8 * v16))) + 2;
        else {
LABEL_20:
        }
          uint64_t result = (v19 + 2);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_25B2E065C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v7 = *(void *)(sub_25B37F640() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((v8 | 7) + v6) & ~(v8 | 7);
  uint64_t v10 = *(void *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  unint64_t v12 = ((v11 + ((v8 + 48) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v13 = v12 + v9;
  uint64_t v14 = (*(void *)(*(void *)(v5 - 8) + 64) + (v8 | 7)) & ~(v8 | 7);
  uint64_t v15 = *(void *)(sub_25B37F500() - 8);
  unint64_t v16 = (v14 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v15 + 64) + v8;
  if (!*(_DWORD *)(v15 + 84)) {
    ++v17;
  }
  size_t v18 = ((v17 + v16) & ~v8) + v10;
  if (v18 <= v13) {
    size_t v19 = v13;
  }
  else {
    size_t v19 = v18;
  }
  if (a2 > 1)
  {
    if (v19 <= 3) {
      char v20 = ((a2 - 2) >> (8 * v19)) + 2;
    }
    else {
      char v20 = 2;
    }
    if (v19 <= 3) {
      int v21 = (a2 - 2) & ~(-1 << (8 * v19));
    }
    else {
      int v21 = a2 - 2;
    }
    a1[v19] = v20;
    if (v19 >= 4) {
      int v22 = 4;
    }
    else {
      int v22 = v19;
    }
    bzero(a1, v19);
    switch(v22)
    {
      case 2:
        *(_WORD *)a1 = v21;
        break;
      case 3:
        *(_WORD *)a1 = v21;
        a1[2] = BYTE2(v21);
        break;
      case 4:
        *(_DWORD *)a1 = v21;
        break;
      default:
        *a1 = v21;
        break;
    }
  }
  else
  {
    a1[v19] = a2;
  }
}

void sub_25B2E0894()
{
  if (!qword_26B340CE8)
  {
    sub_25B37F500();
    unint64_t v0 = sub_25B37FD60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B340CE8);
    }
  }
}

uint64_t sub_25B2E08EC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ReplicatorRecord(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_25B2E09B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v54 = sub_25B37F640();
  uint64_t v7 = *(void *)(v54 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9;
  uint64_t v56 = sub_25B37F5D0();
  uint64_t v11 = *(void *)(v56 - 8);
  unint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v9 | v12 | 7;
  uint64_t v14 = v13 + v6;
  uint64_t v15 = *(void *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v16 = *(void *)(v7 + 64);
  }
  else {
    size_t v16 = v15 + 1;
  }
  uint64_t v55 = *(void *)(v56 - 8);
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v17 = *(void *)(*(void *)(v56 - 8) + 64);
  }
  else {
    uint64_t v17 = *(void *)(*(void *)(v56 - 8) + 64) + 1;
  }
  uint64_t v18 = v13 | *(_DWORD *)(v5 + 80);
  if (v18 != 7
    || ((*(_DWORD *)(v11 + 80) | v9 | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v13 + v6) & ~v13)
     + ((v17
       + 7
       + ((v12
         + 8
         + ((v15
           + 7
           + ((((v16 + 7 + ((v9 + 48) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
             + 16
             + v9) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    int v22 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  else
  {
    size_t __n = v16;
    size_t v46 = v17;
    size_t v48 = v16 + 7;
    unint64_t v49 = ((v16 + 7 + ((v9 + 48) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v50 = v15 + 7;
    unint64_t v51 = v12 + 8;
    uint64_t v52 = v17 + 7;
    uint64_t v23 = ~v13;
    uint64_t v47 = ~v12;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v4);
    unint64_t v53 = a1;
    size_t v24 = (void *)(((unint64_t)a1 + v14) & v23);
    int v25 = (void *)(((unint64_t)a2 + v14) & v23);
    *size_t v24 = *v25;
    v24[1] = v25[1];
    unsigned int v26 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v27 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v26 = *v27;
    v26[1] = v27[1];
    unsigned int v28 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v29 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v28 = *v29;
    v28[1] = v29[1];
    int v30 = (void *)(((unint64_t)v28 + v9 + 16) & ~(unint64_t)v9);
    unint64_t v58 = ~(unint64_t)v9;
    uint64_t v31 = (const void *)(((unint64_t)v29 + v9 + 16) & v58);
    uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v31, 1, v54))
    {
      memcpy(v30, v31, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v30, v31, v54);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v30, 0, 1, v54);
    }
    int v34 = (void *)(((unint64_t)v30 + v48) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)(((unint64_t)v31 + v48) & 0xFFFFFFFFFFFFFFF8);
    *int v34 = *v35;
    v34[1] = v35[1];
    unint64_t v36 = ((unint64_t)v24 + v10 + v49) & v58;
    unint64_t v37 = ((unint64_t)v25 + v10 + v49) & v58;
    uint64_t v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    v38(v36, v37, v54);
    uint64_t v39 = (void *)((v50 + v36) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = (void *)((v50 + v37) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v39 = *v40;
    uint64_t v41 = (void *)(((unint64_t)v39 + v51) & v47);
    uint64_t v42 = (const void *)(((unint64_t)v40 + v51) & v47);
    uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    if (v43(v42, 1, v56))
    {
      memcpy(v41, v42, v46);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v55 + 16))(v41, v42, v56);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v41, 0, 1, v56);
    }
    int v22 = v53;
    *(void *)(((unint64_t)v41 + v52) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v42 + v52) & 0xFFFFFFFFFFFFFFF8);
  }
  return v22;
}

uint64_t sub_25B2E0E44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = sub_25B37F5D0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v9 = (v4 + a1 + (v7 | v8 | 7)) & ~(v7 | v8 | 7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v7 + 16;
  uint64_t v11 = ~v7;
  unint64_t v12 = (v7 + 16 + ((((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v14 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v14 = v13 + 1;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v10 + v9 + ((v14 + ((v7 + 48) & v11) + 7) & 0xFFFFFFFFFFFFFFF8)) & v11, v5);
  swift_bridgeObjectRelease();
  unint64_t v15 = (v8
       + ((v13 + ((v10 + v9 + ((v14 + ((v7 + 48) & v11) + 7) & 0xFFFFFFFFFFFFFFF8)) & v11) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~v8;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
  if (!result)
  {
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v19 + 8);
    return v17(v15, v18);
  }
  return result;
}

uint64_t sub_25B2E10A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v46 = sub_25B37F5D0();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v45 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v10 = v9 | v45 | 7;
  uint64_t v48 = a1;
  uint64_t v11 = (void *)((v10 + v6 + a1) & ~v10);
  unint64_t v12 = (void *)((v10 + v6 + a2) & ~v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = v12;
  uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  unint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  size_t v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  v15[1] = v16[1];
  __dst = (void *)(((unint64_t)v15 + v9 + 16) & ~v9);
  uint64_t v43 = ~v9;
  uint64_t v17 = (const void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v7;
  if (v18(v17, 1, v7))
  {
    int v20 = *(_DWORD *)(v8 + 84);
    uint64_t v21 = *(void *)(v8 + 64);
    if (v20) {
      size_t v22 = *(void *)(v8 + 64);
    }
    else {
      size_t v22 = v21 + 1;
    }
    uint64_t v23 = __dst;
    memcpy(__dst, v17, v22);
  }
  else
  {
    uint64_t v23 = __dst;
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(__dst, v17, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v19);
    int v20 = *(_DWORD *)(v8 + 84);
    uint64_t v21 = *(void *)(v8 + 64);
  }
  uint64_t v24 = v19;
  if (v20) {
    uint64_t v25 = v21;
  }
  else {
    uint64_t v25 = v21 + 1;
  }
  unsigned int v26 = (void *)(((unint64_t)v23 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v27 = (void *)(((unint64_t)v17 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v26 = *v27;
  v26[1] = v27[1];
  unint64_t v28 = ((v25 + ((v9 + 48) & v43) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v29 = ((unint64_t)v11 + v9 + v28) & v43;
  unint64_t v30 = ((unint64_t)v44 + v9 + v28) & v43;
  uint64_t v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v31(v29, v30, v24);
  uint64_t v32 = (void *)((v21 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)((v21 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  int v34 = (void *)(((unint64_t)v32 + v45 + 8) & ~v45);
  uint64_t v35 = (const void *)(((unint64_t)v33 + v45 + 8) & ~v45);
  unint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v36(v35, 1, v46))
  {
    int v37 = *(_DWORD *)(v47 + 84);
    uint64_t v38 = *(void *)(v47 + 64);
    if (v37) {
      size_t v39 = *(void *)(v47 + 64);
    }
    else {
      size_t v39 = v38 + 1;
    }
    memcpy(v34, v35, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v34, v35, v46);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v34, 0, 1, v46);
    int v37 = *(_DWORD *)(v47 + 84);
    uint64_t v38 = *(void *)(v47 + 64);
  }
  if (v37) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = v38 + 1;
  }
  *(void *)(((unint64_t)v34 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v48;
}

uint64_t sub_25B2E145C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v47 = sub_25B37F5D0();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v46 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v10 = v9 | v46 | 7;
  uint64_t v11 = v10 + v6;
  uint64_t v49 = a1;
  unint64_t v12 = (void *)((v10 + v6 + a1) & ~v10);
  uint64_t v13 = (void *)((v11 + a2) & ~v10);
  *unint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = v13;
  unint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  size_t v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = ~v9;
  uint64_t v18 = (void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  uint64_t v19 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  int v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v21 = v20(v18, 1, v7);
  int v22 = v20(v19, 1, v7);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v18, v19, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
      goto LABEL_12;
    }
    int v23 = *(_DWORD *)(v8 + 84);
    size_t v24 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v18, v19, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v18, v7);
    int v23 = *(_DWORD *)(v8 + 84);
    size_t v24 = *(void *)(v8 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v18, v19, v25);
LABEL_12:
  uint64_t v26 = *(void *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v27 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v27 = v26 + 1;
  }
  unint64_t v28 = (void *)(((unint64_t)v18 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (void *)(((unint64_t)v19 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v30 = ((v27 + ((v9 + 48) & v44) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v31 = ((unint64_t)v12 + v9 + v30) & v44;
  unint64_t v32 = ((unint64_t)v45 + v9 + v30) & v44;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v31, v32, v7);
  uint64_t v33 = (void *)((v26 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  int v34 = (void *)((v26 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)(((unint64_t)v33 + v46 + 8) & ~v46);
  unint64_t v36 = (void *)(((unint64_t)v34 + v46 + 8) & ~v46);
  int v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  LODWORD(v32) = v37(v35, 1, v47);
  int v38 = v37(v36, 1, v47);
  if (v32)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 16))(v35, v36, v47);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v35, 0, 1, v47);
      goto LABEL_26;
    }
    int v39 = *(_DWORD *)(v48 + 84);
    size_t v40 = *(void *)(v48 + 64);
  }
  else
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 24))(v35, v36, v47);
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v35, v47);
    int v39 = *(_DWORD *)(v48 + 84);
    size_t v40 = *(void *)(v48 + 64);
  }
  if (v39) {
    size_t v41 = v40;
  }
  else {
    size_t v41 = v40 + 1;
  }
  memcpy(v35, v36, v41);
LABEL_26:
  if (*(_DWORD *)(v48 + 84)) {
    uint64_t v42 = *(void *)(v48 + 64);
  }
  else {
    uint64_t v42 = *(void *)(v48 + 64) + 1;
  }
  *(void *)(((unint64_t)v35 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v36 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v49;
}

uint64_t sub_25B2E191C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v48 = sub_25B37F5D0();
  uint64_t v49 = a1;
  uint64_t v10 = *(void *)(v48 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v9 | v11 | 7;
  uint64_t v13 = (_OWORD *)((v12 + v6 + a1) & ~v12);
  uint64_t v14 = (_OWORD *)((v12 + v6 + a2) & ~v12);
  *uint64_t v13 = *v14;
  uint64_t v46 = v13;
  uint64_t v47 = v14;
  unint64_t v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  size_t v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  uint64_t v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  uint64_t v19 = ~v9;
  int v20 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  int v21 = (const void *)(((unint64_t)v18 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v21, 1, v7))
  {
    int v22 = *(_DWORD *)(v8 + 84);
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v8 + 64);
    if (v22) {
      size_t v25 = *(void *)(v8 + 64);
    }
    else {
      size_t v25 = v24 + 1;
    }
    memcpy(v20, v21, v25);
    uint64_t v26 = v23;
    uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  }
  else
  {
    unint64_t v28 = *(void (**)(void *, const void *, uint64_t))(v8 + 32);
    v28(v20, v21, v7);
    unint64_t v30 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v29 = v8 + 56;
    v30(v20, 0, 1, v7);
    uint64_t v27 = (void (*)(unint64_t, unint64_t, uint64_t))v28;
    int v22 = *(_DWORD *)(v29 + 28);
    uint64_t v26 = v7;
    uint64_t v24 = *(void *)(v29 + 8);
  }
  if (v22) {
    uint64_t v31 = v24;
  }
  else {
    uint64_t v31 = v24 + 1;
  }
  *(_OWORD *)(((unint64_t)v20 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = ((v31 + ((v9 + 48) & v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v33 = ((unint64_t)v46 + v9 + v32) & v19;
  unint64_t v34 = ((unint64_t)v47 + v9 + v32) & v19;
  v27(v33, v34, v26);
  uint64_t v35 = (void *)((v24 + 7 + v33) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = (void *)((v24 + 7 + v34) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v35 = *v36;
  int v37 = (void *)(((unint64_t)v35 + v11 + 8) & ~v11);
  int v38 = (const void *)(((unint64_t)v36 + v11 + 8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1, v48))
  {
    int v39 = *(_DWORD *)(v10 + 84);
    uint64_t v40 = *(void *)(v10 + 64);
    if (v39) {
      size_t v41 = *(void *)(v10 + 64);
    }
    else {
      size_t v41 = v40 + 1;
    }
    memcpy(v37, v38, v41);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v48);
    uint64_t v43 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v42 = v10 + 56;
    v43(v37, 0, 1, v48);
    int v39 = *(_DWORD *)(v42 + 28);
    uint64_t v40 = *(void *)(v42 + 8);
  }
  if (v39) {
    uint64_t v44 = v40;
  }
  else {
    uint64_t v44 = v40 + 1;
  }
  *(void *)(((unint64_t)v37 + v44 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v38 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v49;
}

uint64_t sub_25B2E1C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v47 = sub_25B37F5D0();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v46 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v10 = v9 | v46 | 7;
  uint64_t v11 = v10 + v6;
  uint64_t v49 = a1;
  uint64_t v12 = (void *)((v10 + v6 + a1) & ~v10);
  uint64_t v13 = (void *)((v11 + a2) & ~v10);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = v13;
  unint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRelease();
  size_t v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRelease();
  uint64_t v44 = ~v9;
  uint64_t v18 = (void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  uint64_t v19 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  int v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v21 = v20(v18, 1, v7);
  int v22 = v20(v19, 1, v7);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v18, v19, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
      goto LABEL_12;
    }
    int v23 = *(_DWORD *)(v8 + 84);
    size_t v24 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v18, v19, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v18, v7);
    int v23 = *(_DWORD *)(v8 + 84);
    size_t v24 = *(void *)(v8 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v18, v19, v25);
LABEL_12:
  uint64_t v26 = *(void *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v27 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v27 = v26 + 1;
  }
  unint64_t v28 = (void *)(((unint64_t)v18 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v19 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRelease();
  unint64_t v30 = ((v27 + ((v9 + 48) & v44) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v31 = ((unint64_t)v12 + v9 + v30) & v44;
  unint64_t v32 = ((unint64_t)v45 + v9 + v30) & v44;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(v31, v32, v7);
  unint64_t v33 = (void *)((v26 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (void *)((v26 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)(((unint64_t)v33 + v46 + 8) & ~v46);
  unint64_t v36 = (void *)(((unint64_t)v34 + v46 + 8) & ~v46);
  int v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  LODWORD(v32) = v37(v35, 1, v47);
  int v38 = v37(v36, 1, v47);
  if (v32)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v35, v36, v47);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v35, 0, 1, v47);
      goto LABEL_26;
    }
    int v39 = *(_DWORD *)(v48 + 84);
    size_t v40 = *(void *)(v48 + 64);
  }
  else
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v35, v36, v47);
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v35, v47);
    int v39 = *(_DWORD *)(v48 + 84);
    size_t v40 = *(void *)(v48 + 64);
  }
  if (v39) {
    size_t v41 = v40;
  }
  else {
    size_t v41 = v40 + 1;
  }
  memcpy(v35, v36, v41);
LABEL_26:
  if (*(_DWORD *)(v48 + 84)) {
    uint64_t v42 = *(void *)(v48 + 64);
  }
  else {
    uint64_t v42 = *(void *)(v48 + 64) + 1;
  }
  *(void *)(((unint64_t)v35 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v36 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v49;
}

uint64_t sub_25B2E2118(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v45 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v45 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v44 = sub_25B37F640();
  uint64_t v6 = *(void *)(v44 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v7 <= v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v11 = *(void *)(sub_25B37F5D0() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v10 > v14) {
    unsigned int v14 = v10;
  }
  if (v14 <= v5) {
    unsigned int v15 = v5;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = v18 + 7;
  if (v7) {
    uint64_t v20 = v18 + 7;
  }
  else {
    uint64_t v20 = v18 + 8;
  }
  uint64_t v21 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v22 = 7;
  }
  else {
    uint64_t v22 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v23 = v16 | v17 | 7;
  uint64_t v24 = v23 + *(void *)(v4 + 64);
  unint64_t v25 = ((v20 + ((v16 + 48) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v26 = v17 + 8;
  uint64_t v27 = a1;
  if (v15 < a2)
  {
    unint64_t v28 = (v24 & ~v23)
        + ((v22 + v21 + ((v26 + ((v19 + ((v25 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if ((v28 & 0xFFFFFFF8) != 0) {
      unsigned int v29 = 2;
    }
    else {
      unsigned int v29 = a2 - v15 + 1;
    }
    if (v29 >= 0x10000) {
      unsigned int v30 = 4;
    }
    else {
      unsigned int v30 = 2;
    }
    if (v29 < 0x100) {
      unsigned int v30 = 1;
    }
    if (v29 >= 2) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    switch(v31)
    {
      case 1:
        int v32 = *((unsigned __int8 *)a1 + v28);
        if (!*((unsigned char *)a1 + v28)) {
          break;
        }
        goto LABEL_41;
      case 2:
        int v32 = *(unsigned __int16 *)((char *)a1 + v28);
        if (*(_WORD *)((char *)a1 + v28)) {
          goto LABEL_41;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25B2E24FCLL);
      case 4:
        int v32 = *(_DWORD *)((char *)a1 + v28);
        if (!v32) {
          break;
        }
LABEL_41:
        int v34 = v32 - 1;
        if ((v28 & 0xFFFFFFF8) != 0)
        {
          int v34 = 0;
          int v35 = *a1;
        }
        else
        {
          int v35 = 0;
        }
        return v15 + (v35 | v34) + 1;
      default:
        break;
    }
  }
  if (v5 >= v14)
  {
    uint64_t v39 = v45;
    size_t v40 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v41 = v5;
    return v40(v27, v41, v39);
  }
  uint64_t v36 = ~v16;
  unint64_t v37 = ((unint64_t)a1 + v24) & ~v23;
  if (v9 != v14)
  {
    uint64_t v27 = (_DWORD *)((v37 + v16 + v25) & v36);
    if (v7 != v14)
    {
      uint64_t v42 = (unint64_t *)(((unint64_t)v27 + v19) & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 0x80000000) == 0)
      {
        unint64_t v38 = *v42;
        goto LABEL_57;
      }
      unsigned int v43 = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v42 + v26) & ~v17);
LABEL_64:
      if (v43 >= 2) {
        return v43 - 1;
      }
      else {
        return 0;
      }
    }
    size_t v40 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v41 = v7;
    uint64_t v39 = v44;
    return v40(v27, v41, v39);
  }
  if ((v8 & 0x80000000) != 0)
  {
    unsigned int v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v16 + ((((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v36, v7, v44);
    goto LABEL_64;
  }
  unint64_t v38 = *(void *)((((unint64_t)a1 + v24) & ~v23) + 8);
LABEL_57:
  if (v38 >= 0xFFFFFFFF) {
    LODWORD(v38) = -1;
  }
  return (v38 + 1);
}

void sub_25B2E2510(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v61 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(v61 - 8);
  uint64_t v60 = v5;
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v58 = sub_25B37F640();
  uint64_t v7 = *(void *)(v58 - 8);
  uint64_t v64 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v59 = v9;
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v8 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  int v12 = 0;
  uint64_t v13 = *(void *)(sub_25B37F5D0() - 8);
  uint64_t v14 = v13;
  int v15 = *(_DWORD *)(v13 + 84);
  unsigned int v16 = v15 - 1;
  if (!v15) {
    unsigned int v16 = 0;
  }
  if (v11 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = v11;
  }
  if (v17 <= v6) {
    unsigned int v18 = v6;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = *(void *)(v7 + 64);
  if (v8) {
    size_t v20 = *(void *)(v7 + 64);
  }
  else {
    size_t v20 = v19 + 1;
  }
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = v21 | v22 | 7;
  uint64_t v24 = v23 + *(void *)(v5 + 64);
  unint64_t v25 = ((((v21 + 48) & ~v21) + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v26 = v19 + 7;
  uint64_t v27 = v19 + 7 + ((v25 + v21) & ~v21);
  uint64_t v28 = v22 + 8;
  size_t v29 = *(void *)(v13 + 64);
  if (!v15) {
    ++v29;
  }
  size_t v30 = (v24 & ~v23) + ((v29 + ((v22 + 8 + (v27 & 0xFFFFFFFFFFFFFFF8)) & ~v22) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v18 < a3)
  {
    if ((v24 & ~v23)
       + ((v29 + (((int)v22 + 8 + (v27 & 0xFFFFFFF8)) & ~v22) + 7) & 0xFFFFFFF8) == -8)
      unsigned int v31 = a3 - v18 + 1;
    else {
      unsigned int v31 = 2;
    }
    if (v31 >= 0x10000) {
      int v32 = 4;
    }
    else {
      int v32 = 2;
    }
    if (v31 < 0x100) {
      int v32 = 1;
    }
    if (v31 >= 2) {
      int v12 = v32;
    }
    else {
      int v12 = 0;
    }
  }
  if (a2 > v18)
  {
    if ((v24 & ~v23)
       + ((v29 + (((int)v22 + 8 + (v27 & 0xFFFFFFF8)) & ~v22) + 7) & 0xFFFFFFF8) == -8)
      int v33 = a2 - v18;
    else {
      int v33 = 1;
    }
    if ((v24 & ~v23)
       + ((v29 + (((int)v22 + 8 + (v27 & 0xFFFFFFF8)) & ~v22) + 7) & 0xFFFFFFF8) != -8)
    {
      unsigned int v34 = ~v18 + a2;
      bzero(a1, v30);
      *a1 = v34;
    }
    switch(v12)
    {
      case 1:
        *((unsigned char *)a1 + v30) = v33;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v30) = v33;
        return;
      case 3:
        goto LABEL_104;
      case 4:
        *(unsigned int *)((char *)a1 + v30) = v33;
        return;
      default:
        return;
    }
  }
  uint64_t v35 = ~v22;
  uint64_t v36 = ~v23;
  uint64_t v37 = ~v21;
  unint64_t v38 = a1;
  switch(v12)
  {
    case 1:
      *((unsigned char *)a1 + v30) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_50;
    case 2:
      *(_WORD *)((char *)a1 + v30) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_50;
    case 3:
LABEL_104:
      __break(1u);
      JUMPOUT(0x25B2E2AB4);
    case 4:
      *(unsigned int *)((char *)a1 + v30) = 0;
      goto LABEL_49;
    default:
LABEL_49:
      if (!a2) {
        return;
      }
LABEL_50:
      if (v6 >= v17)
      {
        uint64_t v42 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v60 + 56);
        uint64_t v43 = a2;
        uint64_t v44 = v6;
        uint64_t v45 = v61;
LABEL_55:
        v42(v38, v43, v44, v45);
        return;
      }
      uint64_t v39 = (_DWORD *)(((unint64_t)a1 + v24) & v36);
      if (v17 < a2)
      {
        int v40 = (((v28 + (v27 & 0xFFFFFFF8)) & v35) + v29 + 7) & 0xFFFFFFF8;
        if (v40 != -8)
        {
          unsigned int v41 = ~v17 + a2;
          bzero((void *)(((unint64_t)a1 + v24) & v36), (v40 + 8));
          *uint64_t v39 = v41;
        }
        return;
      }
      if (v10 == v17)
      {
        if ((v59 & 0x80000000) == 0)
        {
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)uint64_t v39 = a2 ^ 0x80000000;
            *(void *)((((unint64_t)a1 + v24) & v36) + 8) = 0;
          }
          else
          {
            *(void *)((((unint64_t)a1 + v24) & v36) + 8) = a2 - 1;
          }
          return;
        }
        unint64_t v48 = v21 + (((((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
        uint64_t v49 = (unsigned char *)(v48 & v37);
        if (v59 < a2)
        {
          if (v20 <= 3) {
            int v50 = ~(-1 << (8 * v20));
          }
          else {
            int v50 = -1;
          }
          if (v20)
          {
            int v51 = v50 & (~v59 + a2);
            if (v20 <= 3) {
              int v52 = v20;
            }
            else {
              int v52 = 4;
            }
            bzero(v49, v20);
            switch(v52)
            {
              case 2:
                *(_WORD *)uint64_t v49 = v51;
                break;
              case 3:
                *(_WORD *)uint64_t v49 = v51;
                v49[2] = BYTE2(v51);
                break;
              case 4:
                *(_DWORD *)uint64_t v49 = v51;
                break;
              default:
                *uint64_t v49 = v51;
                break;
            }
          }
          return;
        }
        uint64_t v43 = a2 + 1;
        uint64_t v42 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v64 + 56);
        unint64_t v38 = (_DWORD *)(v48 & v37);
        goto LABEL_91;
      }
      unint64_t v38 = (_DWORD *)(((unint64_t)v39 + v21 + v25) & v37);
      if (v8 == v17)
      {
        uint64_t v42 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v64 + 56);
        uint64_t v43 = a2;
LABEL_91:
        uint64_t v44 = v8;
        uint64_t v45 = v58;
        goto LABEL_55;
      }
      uint64_t v46 = (void *)(((unint64_t)v38 + v26) & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 0x80000000) != 0)
      {
        unint64_t v53 = (unsigned char *)(((unint64_t)v46 + v28) & v35);
        if (v16 >= a2)
        {
          size_t v57 = *(void (**)(unsigned char *, void))(v14 + 56);
          v57(v53, a2 + 1);
        }
        else
        {
          if (v29 <= 3) {
            int v54 = ~(-1 << (8 * v29));
          }
          else {
            int v54 = -1;
          }
          if (v29)
          {
            int v55 = v54 & (~v16 + a2);
            if (v29 <= 3) {
              int v56 = v29;
            }
            else {
              int v56 = 4;
            }
            bzero(v53, v29);
            switch(v56)
            {
              case 2:
                *(_WORD *)unint64_t v53 = v55;
                break;
              case 3:
                *(_WORD *)unint64_t v53 = v55;
                v53[2] = BYTE2(v55);
                break;
              case 4:
                *(_DWORD *)unint64_t v53 = v55;
                break;
              default:
                *unint64_t v53 = v55;
                break;
            }
          }
        }
      }
      else
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v47 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v47 = a2 - 1;
        }
        *uint64_t v46 = v47;
      }
      return;
  }
}

uint64_t type metadata accessor for ReplicatorStore.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25B2E2B14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_25B2E2B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25B2E2BD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2E2C38()
{
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  uint64_t v1 = sub_25B37FBF0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25B2E2CE4(uint64_t a1)
{
  type metadata accessor for ReplicatorStore.Change();
  sub_25B37FB70();
  sub_25B37FBF0();
  return sub_25B2CFF74(a1);
}

uint64_t sub_25B2E2D88()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void sub_25B2E2E54()
{
}

uint64_t sub_25B2E2EB8()
{
  return sub_25B2D17E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B2E2ED4@<X0>(void *a1@<X8>)
{
  return sub_25B2D05C8(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_25B2E2EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B2D0800(a1, v2, a2);
}

uint64_t sub_25B2E2F10()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25B2E2F50()
{
  return (*(uint64_t (**)(void))(v0 + 32))(*(void *)(v0 + 48));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_25B2E2FE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2E3044(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 32))(*a1);
}

unint64_t sub_25B2E3070()
{
  unint64_t result = qword_26B341238;
  if (!qword_26B341238)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B341238);
  }
  return result;
}

uint64_t sub_25B2E30B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B2E30F8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B2E3148(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25B2E31B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B2D55F4(a1, v2, a2);
}

uint64_t sub_25B2E31D0()
{
  return sub_25B2D58E8(v0[2], v0[3], v0[4]);
}

uint64_t sub_25B2E31F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2E3254()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25B2E3290(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[6];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_25B2E3358;
  return sub_25B2D2A8C(a1, v5, v6, v7, v4);
}

uint64_t sub_25B2E3358()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25B2E344C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B2E34A8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B2E34E0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25B2E3358;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26A4EBB70 + dword_26A4EBB70);
  return v6(a1, v4);
}

uint64_t sub_25B2E3598(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2E3600(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B2E3660(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B2E36C8()
{
  return sub_25B2D4C5C(v0[2], v0[3], v0[4]);
}

uint64_t sub_25B2E36E8@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2D42A8(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_25B2E3704@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 264);
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B2E3754()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25B2E3794()
{
  return sub_25B2D1D48(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_25B2E37A0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25B2E37D8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 32);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t objectdestroy_15Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25B2E3854(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_25B2E39F0;
  return sub_25B2D2338(a1, v4, v5, v6);
}

uint64_t sub_25B2E391C@<X0>(uint64_t *a1@<X8>)
{
  return sub_25B2D5030(v1, a1);
}

uint64_t sub_25B2E3938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B2D5288(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25B2E3958()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_25B2E3980(uint64_t a1, uint64_t a2)
{
  return sub_25B2CB0D8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25B2E39D4()
{
  return sub_25B2DCD6C();
}

uint64_t sub_25B2E39F4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v35 = MEMORY[0x263F8EE78];
    sub_25B37FF10();
    uint64_t result = sub_25B3661D4(v1);
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = v1 + 64;
    uint64_t v26 = v1 + 80;
    uint64_t v30 = v1;
    uint64_t v27 = v2;
    int v28 = v4;
    uint64_t v29 = v1 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v1 + 32))
    {
      unint64_t v9 = (unint64_t)v5 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v1 + 36) != v4) {
        goto LABEL_23;
      }
      uint64_t v31 = v6;
      uint64_t v10 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v5);
      uint64_t v11 = v10[1];
      uint64_t v33 = *v10;
      int v12 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v5);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      sub_25B2E2B14(v14, v13);
      swift_bridgeObjectRetain();
      sub_25B2E2B14(v14, v13);
      swift_bridgeObjectRelease();
      sub_25B2CA2D8(v14, v13);
      swift_bridgeObjectRetain();
      sub_25B2E2B14(v14, v13);
      sub_25B2CA2D8(v14, v13);
      swift_bridgeObjectRetain();
      sub_25B2E2B14(v14, v13);
      swift_bridgeObjectRelease();
      int v32 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
      int v15 = (char *)objc_allocWithZone(v32);
      unsigned int v16 = &v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
      *(void *)unsigned int v16 = 0;
      *((void *)v16 + 1) = 0;
      unsigned int v17 = (uint64_t *)&v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
      *(_OWORD *)&v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_25B381FA0;
      swift_beginAccess();
      *(void *)unsigned int v16 = v33;
      *((void *)v16 + 1) = v11;
      unsigned int v18 = v15;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v19 = *v17;
      unint64_t v20 = v17[1];
      *unsigned int v17 = v14;
      v17[1] = v13;
      sub_25B2E2B14(v14, v13);
      sub_25B2CA2C4(v19, v20);

      v34.receiver = v18;
      v34.super_class = v32;
      objc_msgSendSuper2(&v34, sel_init);
      sub_25B2CA2D8(v14, v13);
      swift_bridgeObjectRelease();
      sub_25B2CA2D8(v14, v13);
      sub_25B37FEE0();
      sub_25B37FF20();
      uint64_t v1 = v30;
      sub_25B37FF30();
      uint64_t result = sub_25B37FEF0();
      int64_t v8 = 1 << *(unsigned char *)(v30 + 32);
      if (v5 >= v8) {
        goto LABEL_24;
      }
      uint64_t v7 = v29;
      uint64_t v21 = *(void *)(v29 + 8 * v9);
      if ((v21 & (1 << v5)) == 0) {
        goto LABEL_25;
      }
      int v4 = v28;
      if (*(_DWORD *)(v30 + 36) != v28) {
        goto LABEL_26;
      }
      unint64_t v22 = v21 & (-2 << (v5 & 0x3F));
      if (v22)
      {
        int64_t v8 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = v9 + 1;
        unint64_t v24 = (unint64_t)(v8 + 63) >> 6;
        if (v9 + 1 < v24)
        {
          unint64_t v25 = *(void *)(v29 + 8 * v23);
          if (v25)
          {
LABEL_18:
            int64_t v8 = __clz(__rbit64(v25)) + (v23 << 6);
          }
          else
          {
            while (v24 - 2 != v9)
            {
              unint64_t v25 = *(void *)(v26 + 8 * v9++);
              if (v25)
              {
                unint64_t v23 = v9 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v6 = v31 + 1;
      uint64_t v5 = v8;
      if (v31 + 1 == v27) {
        return v35;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_25B2E3D58(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v42 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v34 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v43 = (uint64_t)&v34 - v9;
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (!v10) {
    return v11;
  }
  uint64_t v36 = v1;
  uint64_t v44 = MEMORY[0x263F8EE78];
  sub_25B310964(0, v10, 0);
  uint64_t result = sub_25B3129AC(a1);
  uint64_t v14 = result;
  uint64_t v15 = 0;
  uint64_t v16 = a1 + 64;
  char v17 = *(unsigned char *)(a1 + 32);
  uint64_t v35 = a1 + 88;
  uint64_t v39 = a1 + 64;
  uint64_t v40 = v4;
  int64_t v37 = v10;
  uint64_t v38 = v13;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v17)
  {
    unint64_t v20 = (unint64_t)v14 >> 6;
    if ((*(void *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 36) != v13) {
      goto LABEL_28;
    }
    uint64_t v21 = a1;
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(v4 + 72);
    uint64_t v24 = v41;
    sub_25B3198C0(v22 + v23 * v14, v41, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v25 = v24;
    uint64_t v26 = v42;
    sub_25B319928(v25, v42, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v26, v43, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v26, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v11 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_25B310964(0, *(void *)(v11 + 16) + 1, 1);
      uint64_t v11 = v44;
    }
    unint64_t v28 = *(void *)(v11 + 16);
    unint64_t v27 = *(void *)(v11 + 24);
    if (v28 >= v27 >> 1)
    {
      sub_25B310964(v27 > 1, v28 + 1, 1);
      uint64_t v11 = v44;
    }
    *(void *)(v11 + 16) = v28 + 1;
    uint64_t v4 = v40;
    uint64_t result = sub_25B319928(v43, v11+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ v28 * v23, type metadata accessor for ReplicatorRecord.ID);
    char v17 = *(unsigned char *)(v21 + 32);
    unint64_t v18 = 1 << v17;
    if (v14 >= 1 << v17) {
      goto LABEL_29;
    }
    uint64_t v16 = v39;
    uint64_t v29 = *(void *)(v39 + 8 * v20);
    if ((v29 & (1 << v14)) == 0) {
      goto LABEL_30;
    }
    a1 = v21;
    LODWORD(v13) = v38;
    if (*(_DWORD *)(v21 + 36) != v38) {
      goto LABEL_31;
    }
    unint64_t v30 = v29 & (-2 << (v14 & 0x3F));
    if (v30)
    {
      unint64_t v18 = __clz(__rbit64(v30)) | v14 & 0xFFFFFFFFFFFFFFC0;
      int64_t v19 = v37;
    }
    else
    {
      unint64_t v31 = v20 + 1;
      unint64_t v32 = (v18 + 63) >> 6;
      int64_t v19 = v37;
      if (v20 + 1 < v32)
      {
        unint64_t v33 = *(void *)(v39 + 8 * v31);
        if (!v33)
        {
          unint64_t v31 = v20 + 2;
          if (v20 + 2 >= v32) {
            goto LABEL_4;
          }
          unint64_t v33 = *(void *)(v39 + 8 * v31);
          if (!v33)
          {
            while (v32 - 3 != v20)
            {
              unint64_t v33 = *(void *)(v35 + 8 * v20++);
              if (v33)
              {
                unint64_t v31 = v20 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v18 = __clz(__rbit64(v33)) + (v31 << 6);
      }
    }
LABEL_4:
    ++v15;
    uint64_t v14 = v18;
    if (v15 == v19) {
      return v11;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void *sub_25B2E4100(void *a1, void (*a2)(void **, id *), uint64_t a3, unint64_t a4)
{
  uint64_t v14 = a1;
  uint64_t v7 = a1;
  if (a4 >> 62) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = sub_25B37FF90())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v10 = (a4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2611615C0](i - 4, a4) : *(id *)(a4 + 8 * i);
      uint64_t v7 = v10;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v10;
      a2(&v14, &v13);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25B2E423C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t static ReplicatorClient.maximumRecordSize.getter()
{
  return 102400;
}

uint64_t static ReplicatorClient.maximumMessageSize.getter()
{
  return 102400;
}

uint64_t static ReplicatorClient.maximumRecordBatchSize.getter()
{
  return 512000;
}

uint64_t static ReplicatorClient.maximumRecordIDSize.getter()
{
  return 1024;
}

uint64_t static ReplicatorClient.maximumBatchSize.getter()
{
  return 50;
}

uint64_t ReplicatorClient.descriptor.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 80);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B3102F8(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t sub_25B2E4338@<X0>(void *a1@<X0>, ReplicatorServices::ClientDescriptor *a2@<X8>)
{
  uint64_t v3 = a1[18];
  uint64_t v4 = a1[19];
  uint64_t v5 = a1[20];
  uint64_t v6 = (void *)a1[21];
  uint64_t v7 = a1[22];
  uint64_t v8 = (void *)a1[23];
  uint64_t v9 = a1[24];
  id v10 = (void *)a1[25];
  uint64_t v11 = (void *)a1[26];
  int v12 = (void *)a1[27];
  if (v4)
  {
    a2->id._countAndFlagsBits = v3;
    a2->id._object = (void *)v4;
    a2->entitlement._countAndFlagsBits = v5;
    a2->entitlement._object = v6;
    a2->messageNotificationName._countAndFlagsBits = v7;
    a2->messageNotificationName._object = v8;
    a2->recordNotificationName._countAndFlagsBits = v9;
    a2->recordNotificationName._object = v10;
    a2->zoneDescriptors._rawValue = v11;
    a2->messageDescriptors._rawValue = v12;
  }
  else
  {
    unint64_t v18 = (void *)a1[3];
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[18];
    swift_bridgeObjectRetain();
    v13._object = v18;
    v13._countAndFlagsBits = v19;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    ClientDescriptor.init(id:entitlement:messageNotificationName:recordNotificationName:zoneDescriptors:messageDescriptors:)(a2, v13, v14, v15, v16, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78]);
    uint64_t v3 = v20;
  }
  return sub_25B31947C(v3, v4);
}

uint64_t sub_25B2E441C@<X0>(ReplicatorServices::ClientDescriptor *a1@<X8>)
{
  return sub_25B2E4338(v1, a1);
}

uint64_t ReplicatorClient.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorClient.messageUpdates.getter()
{
  return sub_25B2E5D30(&qword_26A4EB318, (uint64_t *)&unk_26B3416F0);
}

uint64_t sub_25B2E4490(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB320);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Swift::String v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B2E4728((uint64_t)sub_25B319C68, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B2E4728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_25B37F640();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v12 = *(os_unfair_lock_s **)(v4 + 80);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v4 + 128);
  *(void *)(v4 + 128) = 0x8000000000000000;
  sub_25B2D95DC((uint64_t)sub_25B319E3C, v13, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 128) = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess();
  os_unfair_lock_unlock(v12 + 4);
  return swift_release();
}

uint64_t sub_25B2E48EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.deviceUpdates.getter()
{
  return sub_25B2E5D30(&qword_26B340B30, (uint64_t *)&unk_26B3416E0);
}

uint64_t sub_25B2E4990(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B38);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B2E4C28((uint64_t)sub_25B319AC0, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B2E4C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v29 = sub_25B37F830();
  uint64_t v32 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  unint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v27 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = v4[14];
  v4[14] = 0x8000000000000000;
  sub_25B2D95E8((uint64_t)sub_25B319F68, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[14] = v35;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  uint64_t v33 = v4[7];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v18 = aBlock[0];
  uint64_t v19 = (void *)v4[9];
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a1;
  void v20[3] = a2;
  v20[4] = v18;
  aBlock[4] = sub_25B3198BC;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_348;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = v19;
  uint64_t v23 = v27;
  sub_25B37F840();
  uint64_t v35 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  uint64_t v25 = v28;
  uint64_t v24 = v29;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v23, v25, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
  return swift_release();
}

uint64_t sub_25B2E50CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.pairedDeviceUpdates.getter()
{
  return sub_25B2E5D30(&qword_26B340B30, (uint64_t *)&unk_26B3416E0);
}

uint64_t sub_25B2E5170(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B38);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B2E5408((uint64_t)sub_25B319AC0, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B2E5408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v59 = a1;
  uint64_t v7 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_25B37F830();
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  int v54 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_25B37F860();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  int v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v65 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v51 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = sub_25B37F640();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  unint64_t v66 = *(os_unfair_lock_s **)(v4 + 80);
  uint64_t v24 = v66 + 4;
  os_unfair_lock_t v58 = v66 + 4;
  swift_retain();
  os_unfair_lock_lock(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a3, v20);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v59;
  *(void *)(v25 + 24) = a2;
  swift_beginAccess();
  uint64_t v51 = a2;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v69 = *(void *)(v4 + 120);
  *(void *)(v4 + 120) = 0x8000000000000000;
  sub_25B2D95E8((uint64_t)sub_25B319B0C, v25, (uint64_t)v23, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 120) = v69;
  swift_bridgeObjectRelease();
  unint64_t v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v61 = v21 + 8;
  uint64_t v62 = v20;
  uint64_t v60 = v27;
  v27(v23, v20);
  swift_endAccess();
  os_unfair_lock_unlock(v58);
  swift_release();
  os_unfair_lock_t v58 = (os_unfair_lock_t)v4;
  uint64_t v67 = *(void *)(v4 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  uint64_t result = sub_25B37FD10();
  uint64_t v29 = aBlock[0];
  uint64_t v30 = MEMORY[0x263F8EE78];
  aBlock[0] = MEMORY[0x263F8EE78];
  unint64_t v66 = *(os_unfair_lock_s **)(v29 + 16);
  if (v66)
  {
    unint64_t v31 = 0;
    uint64_t v33 = v63;
    uint64_t v32 = v64;
    while (1)
    {
      if (v31 >= *(void *)(v29 + 16))
      {
        __break(1u);
        return result;
      }
      unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v35 = *(void *)(v33 + 72);
      sub_25B3198C0(v29 + v34 + v35 * v31, (uint64_t)v19, type metadata accessor for ReplicatorDevice);
      sub_25B3198C0((uint64_t)&v19[*(int *)(v32 + 48)], (uint64_t)v9, type metadata accessor for ReplicatorDevice.RelationshipState);
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v9, 4, v36);
      if ((v37 - 2) >= 2)
      {
        if (v37)
        {
          sub_25B319990((uint64_t)v9, type metadata accessor for ReplicatorDevice.RelationshipState);
          sub_25B3198C0((uint64_t)v19, (uint64_t)v17, type metadata accessor for ReplicatorDevice);
          sub_25B319990((uint64_t)v17, type metadata accessor for ReplicatorDevice);
          goto LABEL_4;
        }
        v60(v9, v62);
      }
      sub_25B3198C0((uint64_t)v19, (uint64_t)v17, type metadata accessor for ReplicatorDevice);
      char v38 = v17[*(int *)(v32 + 56)];
      sub_25B319990((uint64_t)v17, type metadata accessor for ReplicatorDevice);
      if ((v38 & 1) == 0)
      {
        sub_25B319928((uint64_t)v19, v65, type metadata accessor for ReplicatorDevice);
        uint64_t v39 = aBlock[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_25B3109DC(0, *(void *)(v39 + 16) + 1, 1);
          uint64_t v39 = aBlock[0];
        }
        unint64_t v41 = *(void *)(v39 + 16);
        unint64_t v40 = *(void *)(v39 + 24);
        if (v41 >= v40 >> 1)
        {
          sub_25B3109DC(v40 > 1, v41 + 1, 1);
          uint64_t v39 = aBlock[0];
        }
        *(void *)(v39 + 16) = v41 + 1;
        uint64_t result = sub_25B319928(v65, v39 + v34 + v41 * v35, type metadata accessor for ReplicatorDevice);
        uint64_t v33 = v63;
        uint64_t v32 = v64;
        goto LABEL_5;
      }
LABEL_4:
      uint64_t result = sub_25B319990((uint64_t)v19, type metadata accessor for ReplicatorDevice);
LABEL_5:
      if (v66 == (os_unfair_lock_s *)++v31)
      {
        uint64_t v42 = aBlock[0];
        uint64_t v30 = MEMORY[0x263F8EE78];
        goto LABEL_18;
      }
    }
  }
  uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void **)&v58[18]._os_unfair_lock_opaque;
  uint64_t v44 = (void *)swift_allocObject();
  uint64_t v45 = v51;
  v44[2] = v59;
  v44[3] = v45;
  v44[4] = v42;
  aBlock[4] = sub_25B3198BC;
  aBlock[5] = v44;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_330;
  uint64_t v46 = _Block_copy(aBlock);
  swift_retain();
  id v47 = v43;
  unint64_t v48 = v52;
  sub_25B37F840();
  uint64_t v69 = v30;
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  uint64_t v49 = v54;
  uint64_t v50 = v57;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v48, v49, v46);
  _Block_release(v46);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v49, v50);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v55);
  return swift_release();
}

uint64_t sub_25B2E5C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.recordUpdates.getter()
{
  return sub_25B2E5D30(&qword_26B341210, &qword_26B3411B0);
}

uint64_t sub_25B2E5D30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F580], v3);
  return sub_25B37FC20();
}

uint64_t sub_25B2E5E34(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341218);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B2E60CC((uint64_t)sub_25B3197E4, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B2E60CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = sub_25B37F830();
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = v4[12];
  v4[12] = 0x8000000000000000;
  sub_25B2D95F4((uint64_t)sub_25B319E3C, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[12] = v38;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  uint64_t v18 = v4[17];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  uint64_t v19 = MEMORY[0x263F8EE78];
  unint64_t v20 = sub_25B36A9C4(MEMORY[0x263F8EE78]);
  uint64_t v21 = sub_25B3149EC(v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)v4[9];
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = v21;
  aBlock[4] = sub_25B3198BC;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_313;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  id v25 = v22;
  uint64_t v26 = v31;
  sub_25B37F840();
  uint64_t v38 = v19;
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  unint64_t v28 = v32;
  uint64_t v27 = v33;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v26, v28, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
  return swift_release();
}

uint64_t sub_25B2E655C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.zoneUpdates(zone:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341210);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = v2;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411B0);
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F580], v5);
  return sub_25B37FC20();
}

uint64_t sub_25B2E6704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a2;
  uint64_t v22 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341218);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F640();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v8, v5);
  uint64_t v18 = v25;
  sub_25B2E6A9C(v23, v24, (uint64_t)sub_25B3197E4, v17, (uint64_t)v15);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v20 + v19, v13, v9);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_25B2E69A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  sub_25B37FBE0();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_25B2E6A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v38 = sub_25B37F830();
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  int v37 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25B37F860();
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_25B37F640();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = (void *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25B37F630();
  uint64_t v20 = (os_unfair_lock_s *)v6[10];
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_25B319880;
  *(void *)(v21 + 24) = v19;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v6[12];
  v6[12] = 0x8000000000000000;
  sub_25B2D95F4((uint64_t)sub_25B31988C, v21, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  v6[12] = v43;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  swift_endAccess();
  uint64_t v23 = v6[17];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  uint64_t v24 = MEMORY[0x263F8EE78];
  unint64_t v25 = sub_25B36A9C4(MEMORY[0x263F8EE78]);
  uint64_t v26 = sub_25B3149EC(v23, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = (void *)v6[9];
  unint64_t v28 = (void *)swift_allocObject();
  v28[2] = sub_25B319880;
  v28[3] = v19;
  v28[4] = v26;
  aBlock[4] = sub_25B3198BC;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_296;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  id v30 = v27;
  unint64_t v31 = v36;
  sub_25B37F840();
  uint64_t v43 = v24;
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  uint64_t v33 = v37;
  uint64_t v32 = v38;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v31, v33, v29);
  _Block_release(v29);
  swift_release();

  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v40);
  return swift_release();
}

uint64_t sub_25B2E6F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.registrationUpdates.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB868);
  MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F580]);
  return sub_25B37FC20();
}

uint64_t sub_25B2E70F4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B2E747C((uint64_t)sub_25B3196BC, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B2E738C(char a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB860);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7[15] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  sub_25B37FBE0();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B2E747C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v29 = sub_25B37F830();
  uint64_t v32 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  unint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v27 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = v4[11];
  v4[11] = 0x8000000000000000;
  sub_25B2D9600((uint64_t)sub_25B319768, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[11] = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  uint64_t v18 = v4[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 20));
  sub_25B2E7F24((unsigned char *)(v18 + 16), aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 20));
  LOBYTE(a3) = aBlock[0];
  swift_release();
  unint64_t v19 = (void *)v4[9];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = a3;
  aBlock[4] = sub_25B3197A8;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_277;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = v19;
  uint64_t v23 = v27;
  sub_25B37F840();
  uint64_t v34 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  unint64_t v25 = v28;
  uint64_t v24 = v29;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v23, v25, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
  return swift_release();
}

uint64_t sub_25B2E7918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.localDeviceID.getter()
{
  return sub_25B37FD10();
}

uint64_t ReplicatorClient.devices.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  return v1;
}

uint64_t ReplicatorClient.pairedDevices.getter()
{
  uint64_t v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v28 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v30 = *(void *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  uint64_t result = sub_25B37FD10();
  uint64_t v14 = v31;
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v29 = *(void *)(v14 + 16);
  if (!v29)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v15;
  }
  unint64_t v16 = 0;
  uint64_t v26 = v5;
  uint64_t v27 = v4;
  while (v16 < *(void *)(v14 + 16))
  {
    unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v18 = *(void *)(v5 + 72);
    sub_25B3198C0(v14 + v17 + v18 * v16, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
    sub_25B3198C0((uint64_t)&v12[*(int *)(v4 + 48)], (uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v3, 4, v19);
    if ((v20 - 2) >= 2)
    {
      if (v20)
      {
        sub_25B319990((uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B3198C0((uint64_t)v12, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
        sub_25B319990((uint64_t)v10, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      uint64_t v21 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v3, v21);
    }
    sub_25B3198C0((uint64_t)v12, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
    char v22 = v10[*(int *)(v4 + 56)];
    sub_25B319990((uint64_t)v10, type metadata accessor for ReplicatorDevice);
    if ((v22 & 1) == 0)
    {
      sub_25B319928((uint64_t)v12, v28, type metadata accessor for ReplicatorDevice);
      uint64_t v23 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B3109DC(0, *(void *)(v23 + 16) + 1, 1);
        uint64_t v23 = v31;
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_25B3109DC(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v31;
      }
      *(void *)(v23 + 16) = v25 + 1;
      uint64_t result = sub_25B319928(v28, v23 + v17 + v25 * v18, type metadata accessor for ReplicatorDevice);
      uint64_t v5 = v26;
      uint64_t v4 = v27;
      goto LABEL_5;
    }
LABEL_4:
    uint64_t result = sub_25B319990((uint64_t)v12, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v29 == ++v16)
    {
      uint64_t v15 = v31;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorClient.isRegistered.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_25B2E7F24((unsigned char *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  uint64_t v2 = v4;
  swift_release();
  return v2;
}

unsigned char *sub_25B2E7F24@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

__n128 ReplicatorClient.replicatorProtocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

uint64_t ReplicatorClient.__allocating_init(descriptor:recordVersions:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ReplicatorClient.init(descriptor:recordVersions:)(a1, a2);
  return v4;
}

uint64_t ReplicatorClient.init(descriptor:recordVersions:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a2;
  uint64_t v5 = sub_25B37FD00();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = sub_25B37F750();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v31 - v15;
  long long v17 = a1[2];
  long long v37 = a1[1];
  long long v18 = a1[3];
  long long v36 = a1[2];
  v42[2] = v17;
  v42[3] = v18;
  v42[4] = a1[4];
  long long v19 = a1[1];
  long long v32 = *a1;
  v42[0] = v32;
  v42[1] = v19;
  uint64_t v33 = *((void *)a1 + 6);
  uint64_t v35 = *((void *)a1 + 9);
  sub_25B37F650();
  uint64_t v20 = sub_25B37F730();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  long long v31 = *(long long *)((char *)a1 + 56);
  v21(v16, v10);
  sub_25B37F650();
  uint64_t v22 = sub_25B37F740();
  v21(v14, v10);
  *(void *)(v3 + 32) = v20;
  *(void *)(v3 + 40) = v22;
  *(void *)(v3 + 48) = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341250);
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 20) = 0;
  *(unsigned char *)(v23 + 16) = 0;
  *(void *)(v3 + 64) = v23;
  sub_25B2E3070();
  sub_25B37F840();
  *(void *)&long long v43 = MEMORY[0x263F8EE78];
  sub_25B3193FC((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B319318((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, *MEMORY[0x263F8F130], v40);
  *(void *)(v3 + 72) = sub_25B37FD30();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
  uint64_t v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  uint64_t v25 = MEMORY[0x263F8EE80];
  *(void *)(v3 + 80) = v24;
  *(void *)(v3 + 88) = v25;
  *(void *)(v3 + 96) = v25;
  *(void *)(v3 + 104) = v25;
  *(void *)(v3 + 112) = v25;
  *(void *)(v3 + 120) = v25;
  *(void *)(v3 + 128) = v25;
  *(void *)(v3 + 136) = v25;
  *(unsigned char *)(v3 + 224) = 2;
  long long v26 = v37;
  *(_OWORD *)(v3 + 144) = v32;
  *(_OWORD *)(v3 + 160) = v26;
  *(_OWORD *)(v3 + 176) = v36;
  *(void *)(v3 + 192) = v33;
  *(_OWORD *)(v3 + 200) = v31;
  *(void *)(v3 + 216) = v35;
  sub_25B310A18((uint64_t)v42);
  sub_25B310A8C(0, 0);
  long long v43 = v42[0];
  *(_OWORD *)(v3 + 16) = v42[0];
  sub_25B310A18((uint64_t)v42);
  sub_25B315CA4((uint64_t)&v43);
  uint64_t v27 = sub_25B317F6C(v41, (uint64_t)v42, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_25B315768);
  sub_25B315CD0((uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_25B315CD0((uint64_t)v42);
  *(void *)(v3 + 136) = v27;
  swift_bridgeObjectRelease();
  if (qword_26B340EA0 != -1) {
    swift_once();
  }
  uint64_t v28 = (void *)qword_26B341138;
  *(void *)(v3 + 56) = qword_26B341138;
  id v29 = v28;
  return v3;
}

uint64_t ReplicatorClient.__allocating_init(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ReplicatorClient.init(id:)(a1, a2);
  return v4;
}

uint64_t ReplicatorClient.init(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = v2;
  uint64_t v30 = a1;
  uint64_t v4 = sub_25B37FD00();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v6);
  v26[1] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37F860();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = sub_25B37F750();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v26 - v14;
  sub_25B37F650();
  uint64_t v16 = sub_25B37F730();
  long long v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v15, v9);
  sub_25B37F650();
  uint64_t v18 = sub_25B37F740();
  v17(v13, v9);
  *(void *)(v3 + 32) = v16;
  *(void *)(v3 + 40) = v18;
  *(void *)(v3 + 48) = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341250);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 20) = 0;
  *(unsigned char *)(v19 + 16) = 0;
  *(void *)(v3 + 64) = v19;
  sub_25B2E3070();
  sub_25B37F840();
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_25B3193FC((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B319318((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, *MEMORY[0x263F8F130], v29);
  *(void *)(v3 + 72) = sub_25B37FD30();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  *(void *)(v3 + 80) = v20;
  *(void *)(v3 + 88) = v21;
  *(void *)(v3 + 96) = v21;
  *(void *)(v3 + 104) = v21;
  *(void *)(v3 + 112) = v21;
  *(void *)(v3 + 120) = v21;
  *(void *)(v3 + 128) = v21;
  *(void *)(v3 + 136) = v21;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(unsigned char *)(v3 + 224) = 2;
  uint64_t v22 = v31;
  *(void *)(v3 + 16) = v30;
  *(void *)(v3 + 24) = v22;
  if (qword_26B340EA0 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)qword_26B341138;
  *(void *)(v3 + 56) = qword_26B341138;
  id v24 = v23;
  return v3;
}

uint64_t ReplicatorClient.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B310A8C(*(void *)(v0 + 144), *(void *)(v0 + 152));
  return v0;
}

uint64_t ReplicatorClient.__deallocating_deinit()
{
  ReplicatorClient.deinit();
  return MEMORY[0x270FA0228](v0, 225, 7);
}

uint64_t sub_25B2E8A2C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)v0 + 80);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B319EEC(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.setEnabled(_:)(Swift::Bool a1)
{
  uint64_t v3 = v1;
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25B37F780();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B3417A8);
  uint64_t v6 = sub_25B37F760();
  os_log_type_t v7 = sub_25B37FCD0();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67240192;
    LODWORD(v23) = a1;
    sub_25B37FD70();
    _os_log_impl(&dword_25B2C1000, v6, v7, "Setting client enabled state to %{BOOL,public}d", v8, 8u);
    MEMORY[0x2611621B0](v8, -1, -1);
  }

  uint64_t v9 = *(void *)(v3 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 20));
  sub_25B2E7F24((unsigned char *)(v9 + 16), &v23);
  if (v2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    __break(1u);
    os_unfair_lock_unlock((os_unfair_lock_t)v9);
    __break(1u);
    os_unfair_lock_unlock((os_unfair_lock_t)v3);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    char v10 = v23;
    uint64_t v11 = swift_release();
    if (v10)
    {
      uint64_t v12 = *(os_unfair_lock_s **)(v3 + 80);
      MEMORY[0x270FA5388](v11);
      swift_retain();
      os_unfair_lock_lock(v12 + 4);
      sub_25B319EEC(v13);
      os_unfair_lock_unlock(v12 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v14);
      sub_25B37FD10();
      uint64_t v19 = swift_bridgeObjectRelease();
      uint64_t v20 = *(os_unfair_lock_s **)(v3 + 80);
      uint64_t v21 = MEMORY[0x270FA5388](v19);
      MEMORY[0x270FA5388](v21);
      swift_retain();
      os_unfair_lock_lock(v20 + 4);
      sub_25B3102F8(v22);
      os_unfair_lock_unlock(v20 + 4);
      swift_release();
    }
    else
    {
      uint64_t v15 = sub_25B37F760();
      os_log_type_t v16 = sub_25B37FCB0();
      if (os_log_type_enabled(v15, v16))
      {
        long long v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v17 = 0;
        _os_log_impl(&dword_25B2C1000, v15, v16, "Client is not registered", v17, 2u);
        MEMORY[0x2611621B0](v17, -1, -1);
      }

      sub_25B2DCCD4();
      swift_allocError();
      *(unsigned char *)uint64_t v18 = 2;
      *(void *)(v18 + 8) = 0;
      swift_willThrow();
    }
  }
}

uint64_t ReplicatorClient.isEnabled.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  sub_25B2E7F24((unsigned char *)(v2 + 16), &v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  int v3 = v22;
  uint64_t v4 = swift_release();
  if (v3 == 1)
  {
    uint64_t v5 = *(os_unfair_lock_s **)(v1 + 80);
    MEMORY[0x270FA5388](v4);
    swift_retain();
    os_unfair_lock_lock(v5 + 4);
    sub_25B315DE8(&v22);
    os_unfair_lock_unlock(v5 + 4);
    int v6 = v22;
    uint64_t v7 = swift_release();
    if (v6 == 2)
    {
      uint64_t v8 = *(os_unfair_lock_s **)(v1 + 80);
      MEMORY[0x270FA5388](v7);
      swift_retain();
      os_unfair_lock_lock(v8 + 4);
      sub_25B319EEC(v9);
      os_unfair_lock_unlock(v8 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v10);
      sub_25B37FD10();
      uint64_t v15 = swift_bridgeObjectRelease();
      uint64_t v16 = v21;
      long long v17 = *(os_unfair_lock_s **)(v1 + 80);
      uint64_t v18 = MEMORY[0x270FA5388](v15);
      MEMORY[0x270FA5388](v18);
      swift_retain();
      os_unfair_lock_lock(v17 + 4);
      sub_25B319EEC(v19);
      os_unfair_lock_unlock(v17 + 4);
      swift_release();
    }
    else
    {
      return v6 & 1;
    }
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_25B37F780();
    __swift_project_value_buffer(v11, (uint64_t)qword_26B3417A8);
    uint64_t v12 = sub_25B37F760();
    os_log_type_t v13 = sub_25B37FCB0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_25B2C1000, v12, v13, "Client is not registered", v14, 2u);
      MEMORY[0x2611621B0](v14, -1, -1);
    }

    return 0;
  }
  return v16;
}

uint64_t sub_25B2E9424()
{
  return ReplicatorClient.isEnabled.getter() & 1;
}

void sub_25B2E944C(Swift::Bool a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.register()()
{
  uint64_t v2 = v1;
  int v3 = v0;
  uint64_t v4 = (os_unfair_lock_s *)sub_25B37F780();
  uint64_t v5 = *(void *)&v4[-2]._os_unfair_lock_opaque;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v8 = (os_unfair_lock_s *)__swift_project_value_buffer((uint64_t)v4, (uint64_t)qword_26B3417A8);
  uint64_t v9 = *(void (**)(char *))(v5 + 16);
  os_unfair_lock_t v132 = v8;
  v9(v7);
  swift_retain_n();
  uint64_t v10 = sub_25B37F760();
  int v11 = sub_25B37FCD0();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    LODWORD(v97) = v11;
    uint64_t v98 = v4;
    os_log_t v99 = v10;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v96 = v13;
    uint64_t v102 = v13;
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v15 = (os_unfair_lock_s *)v3[10];
    MEMORY[0x270FA5388](v13);
    unint64_t v77 = sub_25B2E441C;
    uint64_t v78 = v3;
    uint64_t v4 = v15 + 4;
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    sub_25B319EEC(v16);
    uint64_t v100 = v3;
    uint64_t v101 = v1;
    if (v1)
    {
LABEL_22:
      swift_release();
      os_unfair_lock_unlock(v4);
      __break(1u);
      os_unfair_lock_unlock(v15);
      __break(1u);
      return;
    }
    uint64_t v95 = v14 + 4;
    os_unfair_lock_unlock(v15 + 4);
    swift_release();
    uint64_t v17 = v112;
    uint64_t v4 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v112 = sub_25B2CA048(v17, (unint64_t)v4, &v102);
    sub_25B37FD70();
    int v3 = v100;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v18 = v99;
    _os_log_impl(&dword_25B2C1000, v99, (os_log_type_t)v97, "Registering client %{public}s", v14, 0xCu);
    uint64_t v19 = v96;
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v19, -1, -1);
    MEMORY[0x2611621B0](v14, -1, -1);

    (*(void (**)(char *, os_unfair_lock_s *))(v5 + 8))(v7, v98);
    uint64_t v2 = v101;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, os_unfair_lock_s *))(v5 + 8))(v7, v4);
  }
  uint64_t v15 = (os_unfair_lock_s *)v3[8];
  swift_retain();
  os_unfair_lock_lock(v15 + 5);
  sub_25B2E7F24(&v15[4], &v112);
  if (v2)
  {
    os_unfair_lock_unlock(v15 + 5);
    __break(1u);
    goto LABEL_22;
  }
  os_unfair_lock_unlock(v15 + 5);
  char v20 = v112;
  uint64_t v21 = swift_release();
  if (v20)
  {
    uint64_t v22 = sub_25B37F760();
    os_log_type_t v23 = sub_25B37FCB0();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl(&dword_25B2C1000, v22, v23, "Client is already registered", v24, 2u);
      MEMORY[0x2611621B0](v24, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v25 = 2;
    *(void *)(v25 + 8) = 0;
    swift_willThrow();
  }
  else
  {
    long long v26 = (os_unfair_lock_s *)v3[10];
    MEMORY[0x270FA5388](v21);
    unint64_t v77 = sub_25B315E70;
    uint64_t v78 = v3;
    swift_retain();
    os_unfair_lock_lock(v26 + 4);
    sub_25B3102F8(v27);
    os_log_t v99 = 0;
    os_unfair_lock_unlock(v26 + 4);
    uint64_t v28 = swift_release();
    uint64_t v29 = v112;
    uint64_t v30 = v114;
    os_unfair_lock_t v132 = v115;
    uint64_t v31 = (uint64_t)v116;
    uint64_t v32 = v118;
    uint64_t v34 = v120;
    uint64_t v33 = (void *)v121;
    uint64_t v101 = v119;
    if (v113)
    {
      uint64_t v94 = v121;
      uint64_t v95 = v120;
      uint64_t v96 = (uint64_t)v113;
      uint64_t v98 = v117;
    }
    else
    {
      uint64_t v48 = v112;
      uint64_t v97 = v118;
      MEMORY[0x270FA5388](v28);
      *(&v79 - 4) = v49;
      *(&v79 - 3) = v50;
      unint64_t v77 = v51;
      int v52 = v99;
      sub_25B37FD10();
      os_log_t v99 = v52;
      if (v52)
      {
        unint64_t v77 = v34;
        uint64_t v78 = v33;
        sub_25B310A8C(v48, 0);
        return;
      }
      uint64_t v83 = v102;
      uint64_t v65 = (os_unfair_lock_s *)v103;
      uint64_t v96 = v103;
      uint64_t v81 = v104;
      uint64_t v80 = v105;
      uint64_t v98 = v106;
      unint64_t v66 = v107;
      uint64_t v94 = v108;
      uint64_t v95 = v109;
      uint64_t v84 = v110;
      uint64_t v82 = v111;
      unint64_t v77 = v34;
      uint64_t v78 = v33;
      sub_25B310A8C(v48, 0);
      uint64_t v29 = v83;
      uint64_t v112 = v83;
      uint64_t v113 = v65;
      uint64_t v30 = v81;
      uint64_t v67 = v80;
      uint64_t v114 = v81;
      uint64_t v115 = v80;
      uint64_t v68 = v98;
      long long v116 = v98;
      uint64_t v117 = v66;
      uint64_t v69 = v94;
      uint64_t v118 = v94;
      uint64_t v119 = (os_unfair_lock_s *)v95;
      uint64_t v101 = (os_unfair_lock_s *)v3[10];
      uint64_t v70 = v101 + 4;
      os_unfair_lock_t v132 = v101 + 4;
      size_t v71 = v84;
      uint64_t v72 = v82;
      uint64_t v120 = v84;
      uint64_t v121 = v82;
      swift_retain();
      os_unfair_lock_lock(v70);
      uint64_t v97 = v3[18];
      uint64_t v93 = v3[19];
      os_unfair_lock_t v92 = (os_unfair_lock_t)v3[20];
      uint64_t v91 = v3[21];
      uint64_t v90 = (uint64_t *)v3[22];
      uint64_t v89 = v3[23];
      uint64_t v88 = v3[24];
      uint64_t v87 = v3[25];
      uint64_t v86 = (void *)v3[26];
      uint64_t v85 = (void *)v3[27];
      uint64_t v73 = v96;
      v3[18] = v29;
      v3[19] = v73;
      v3[20] = v30;
      v3[21] = v67;
      uint64_t v74 = v67;
      v3[22] = v68;
      v3[23] = v66;
      uint64_t v75 = (os_unfair_lock_s *)v95;
      v3[24] = v69;
      v3[25] = v75;
      size_t v76 = v71;
      v3[26] = v71;
      v3[27] = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v78 = v85;
      unint64_t v77 = v86;
      sub_25B310A8C(v97, v93);
      os_unfair_lock_unlock(v132);
      swift_release();
      os_unfair_lock_t v132 = v74;
      uint64_t v31 = (uint64_t)v98;
      uint64_t v98 = v66;
      uint64_t v32 = v94;
      uint64_t v101 = v75;
      uint64_t v95 = v76;
      uint64_t v94 = v72;
    }
    uint64_t v97 = v32;
    uint64_t v100 = v3;
    uint64_t v35 = v3[8];
    swift_retain();
    os_unfair_lock_t v92 = (os_unfair_lock_t)(v35 + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 20));
    uint64_t v90 = &v79;
    uint64_t v36 = v96;
    uint64_t v122 = v29;
    uint64_t v123 = v96;
    uint64_t v91 = v30;
    uint64_t v124 = v30;
    os_unfair_lock_t v125 = v132;
    uint64_t v37 = v31;
    uint64_t v38 = v132;
    uint64_t v93 = v37;
    uint64_t v39 = v98;
    uint64_t v126 = v37;
    uint64_t v127 = v98;
    uint64_t v40 = v101;
    uint64_t v128 = v32;
    uint64_t v129 = v101;
    uint64_t v41 = v95;
    uint64_t v42 = (void *)v94;
    v130 = v95;
    uint64_t v131 = v94;
    uint64_t v88 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue;
    MEMORY[0x270FA5388](v43);
    uint64_t v89 = v44;
    swift_bridgeObjectRetain();
    os_unfair_lock_t v132 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_t v45 = v99;
    sub_25B37FD10();
    unint64_t v77 = v41;
    uint64_t v78 = v42;
    if (v45)
    {
      uint64_t v101 = v40;
      uint64_t v100 = (void *)v35;
      uint64_t v98 = v39;
      sub_25B310A8C(v29, v36);
      os_unfair_lock_unlock(v92);
      swift_release();
      unint64_t v77 = v41;
      uint64_t v78 = v42;
      uint64_t v46 = v29;
      uint64_t v47 = v36;
    }
    else
    {
      uint64_t v87 = v29;
      sub_25B310A8C(v29, v36);
      *(unsigned char *)(v35 + 16) = 1;
      os_unfair_lock_unlock(v92);
      uint64_t v53 = swift_release();
      int v54 = v100;
      MEMORY[0x270FA5388](v53);
      *(&v79 - 4) = v55;
      *(&v79 - 3) = (uint64_t)v56;
      os_unfair_lock_t v92 = v56;
      os_log_t v99 = v57;
      unint64_t v77 = v57;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340EB0);
      uint64_t v58 = sub_25B37FD10();
      uint64_t v59 = v102;
      uint64_t v60 = (os_unfair_lock_s *)v54[10];
      uint64_t v61 = MEMORY[0x270FA5388](v58);
      MEMORY[0x270FA5388](v61);
      swift_retain();
      os_unfair_lock_lock(v60 + 4);
      sub_25B315EE0(&v102);
      os_unfair_lock_unlock(v60 + 4);
      uint64_t v62 = v102;
      swift_release();
      sub_25B2EA5F8(v59, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = sub_25B2F83CC();
      swift_allocObject();
      swift_weakInit();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B341158);
      sub_25B319318(&qword_26B341150, &qword_26B341158);
      sub_25B37F810();
      swift_release();
      swift_release();
      swift_beginAccess();
      sub_25B37F7B0();
      swift_endAccess();
      uint64_t v63 = swift_release();
      MEMORY[0x270FA5388](v63);
      os_log_t v64 = v99;
      *(&v79 - 4) = (uint64_t)v92;
      *(&v79 - 3) = (uint64_t)v64;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416F0);
      sub_25B37FD10();
      os_log_t v99 = 0;
      sub_25B2EAA98(v102);
      swift_bridgeObjectRelease();
      uint64_t v102 = sub_25B2F83F0();
      swift_allocObject();
      swift_weakInit();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B341178);
      sub_25B319318(&qword_26B341170, &qword_26B341178);
      sub_25B37F810();
      swift_release();
      swift_release();
      swift_beginAccess();
      sub_25B37F7B0();
      swift_endAccess();
      swift_release();
      uint64_t v102 = sub_25B2F84B4();
      swift_allocObject();
      swift_weakInit();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B341168);
      sub_25B319318(&qword_26B341160, &qword_26B341168);
      sub_25B37F810();
      swift_release();
      swift_release();
      swift_beginAccess();
      sub_25B37F7B0();
      swift_endAccess();
      swift_release();
      uint64_t v102 = sub_25B2F8598();
      swift_allocObject();
      swift_weakInit();
      sub_25B37F810();
      swift_release();
      swift_release();
      swift_beginAccess();
      sub_25B37F7B0();
      swift_endAccess();
      swift_release();
      sub_25B2EB4D8(1);
      uint64_t v78 = (void *)v94;
      unint64_t v77 = v95;
      uint64_t v46 = v87;
      uint64_t v47 = v96;
    }
    sub_25B310A8C(v46, v47);
  }
}

uint64_t sub_25B2EA598@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[18];
  uint64_t v2 = a1[19];
  uint64_t v4 = a1[20];
  uint64_t v5 = a1[21];
  uint64_t v6 = a1[22];
  uint64_t v7 = a1[23];
  uint64_t v8 = a1[24];
  uint64_t v9 = a1[25];
  uint64_t v10 = a1[26];
  uint64_t v11 = a1[27];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  a2[8] = v10;
  a2[9] = v11;
  return sub_25B31947C(v3, v2);
}

uint64_t sub_25B2EA5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_25B37F830();
  uint64_t v22 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v21 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (os_unfair_lock_s *)v3[10];
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_beginAccess();
  uint64_t v13 = v3[12];
  swift_beginAccess();
  uint64_t v14 = v3[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  uint64_t v15 = (void *)v3[9];
  uint64_t v16 = (void *)swift_allocObject();
  _DWORD v16[2] = v3;
  void v16[3] = a1;
  v16[4] = a2;
  v16[5] = v13;
  v16[6] = v14;
  aBlock[4] = sub_25B3193B4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_244;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v23 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v11, v8, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  return swift_release();
}

uint64_t sub_25B2EA948()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_retain();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_25B31677C(v2, v1);
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_release();
    uint64_t v5 = *(os_unfair_lock_s **)(v1 + 80);
    uint64_t v6 = MEMORY[0x270FA5388](v4);
    MEMORY[0x270FA5388](v6);
    swift_retain();
    os_unfair_lock_lock(v5 + 4);
    sub_25B315EE0(&v8);
    os_unfair_lock_unlock(v5 + 4);
    uint64_t v7 = v8;
    swift_release();
    sub_25B2EA5F8(v3, v7);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25B2EAA98(uint64_t a1)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25B37F860();
  uint64_t v7 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  uint64_t v11 = v1[16];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  uint64_t v12 = (void *)v1[9];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_25B319274;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_232;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v19 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t sub_25B2EADA8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_retain();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_25B31551C(v2, v1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_25B2EAA98(v3);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25B2EAE44(uint64_t a1)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25B37F860();
  uint64_t v7 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  uint64_t v11 = v1[14];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  uint64_t v12 = (void *)v1[9];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_25B3191F8;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_222;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v19 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t sub_25B2EB154(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_25B2EB1C8(uint64_t a1)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25B37F860();
  uint64_t v7 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  uint64_t v11 = v1[15];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  uint64_t v12 = (void *)v1[9];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_25B3191B4;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_213;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v19 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t sub_25B2EB4D8(char a1)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25B37F860();
  uint64_t v7 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  uint64_t v11 = v1[11];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  uint64_t v12 = (void *)v1[9];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(unsigned char *)(v13 + 24) = a1;
  aBlock[4] = sub_25B31919C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_204;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  sub_25B37F840();
  uint64_t v19 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.unregister()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = sub_25B37F780();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)qword_26B3417A8);
  uint64_t v9 = *(void (**)(char *))(v5 + 16);
  uint64_t v42 = v8;
  v9(v7);
  swift_retain_n();
  uint64_t v10 = sub_25B37F760();
  int v11 = sub_25B37FCD0();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    int v35 = v11;
    uint64_t v36 = v4;
    os_log_t v37 = v10;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v34 = v13;
    uint64_t v39 = v13;
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v12 = 136446210;
    id v15 = (os_unfair_lock_s *)*((void *)v3 + 10);
    MEMORY[0x270FA5388](v13);
    *(&v32 - 2) = (uint8_t *)sub_25B2E441C;
    *(&v32 - 1) = v3;
    uint64_t v16 = v15 + 4;
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    sub_25B319EEC(v17);
    uint64_t v33 = v3;
    uint64_t v38 = v1;
    if (v1)
    {
LABEL_14:
      swift_release();
      os_unfair_lock_unlock(v16);
      __break(1u);
      return;
    }
    uint64_t v32 = v12 + 4;
    os_unfair_lock_unlock(v15 + 4);
    swift_release();
    long long v18 = v40[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v40[0] = sub_25B2CA048(v18, *((unint64_t *)&v18 + 1), &v39);
    sub_25B37FD70();
    uint64_t v3 = v33;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v19 = v37;
    _os_log_impl(&dword_25B2C1000, v37, (os_log_type_t)v35, "Unregistering client %{public}s", v12, 0xCu);
    uint64_t v20 = v34;
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v20, -1, -1);
    MEMORY[0x2611621B0](v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v36);
    uint64_t v2 = v38;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v16 = (os_unfair_lock_s *)*((void *)v3 + 8);
  swift_retain();
  os_unfair_lock_lock(v16 + 5);
  sub_25B2E7F24(&v16[4], v40);
  if (v2)
  {
    os_unfair_lock_unlock(v16 + 5);
    __break(1u);
    goto LABEL_14;
  }
  os_unfair_lock_unlock(v16 + 5);
  char v21 = v40[0];
  swift_release();
  if (v21)
  {
    uint64_t v22 = *((void *)v3 + 8);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v22 + 20));
    sub_25B2EBDE8((unsigned char *)(v22 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 20));
    uint64_t v23 = swift_release();
    id v24 = (uint8_t *)*((void *)v3 + 7);
    uint64_t v25 = (os_unfair_lock_s *)*((void *)v3 + 10);
    MEMORY[0x270FA5388](v23);
    *(&v32 - 2) = (uint8_t *)sub_25B2E441C;
    *(&v32 - 1) = v3;
    swift_retain();
    os_unfair_lock_lock(v25 + 4);
    sub_25B319EEC(v26);
    os_unfair_lock_unlock(v25 + 4);
    uint64_t v27 = swift_release();
    v41[3] = v40[3];
    v41[4] = v40[4];
    v41[1] = v40[1];
    v41[2] = v40[2];
    v41[0] = v40[0];
    MEMORY[0x270FA5388](v27);
    *(&v32 - 2) = v24;
    *(&v32 - 1) = (uint8_t *)v41;
    sub_25B37FD10();
    sub_25B315CD0((uint64_t)v41);
    sub_25B2EB4D8(0);
  }
  else
  {
    uint64_t v28 = sub_25B37F760();
    os_log_type_t v29 = sub_25B37FCB0();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_25B2C1000, v28, v29, "Client is not registered", v30, 2u);
      MEMORY[0x2611621B0](v30, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v31 = 2;
    *(void *)(v31 + 8) = 0;
    swift_willThrow();
  }
}

unsigned char *sub_25B2EBDE8(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_25B2EBDF0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_25B2E7F24((unsigned char *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  uint64_t v2 = v4;
  swift_release();
  return v2;
}

uint64_t sub_25B2EBE68()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB868);
  MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F580]);
  return sub_25B37FC20();
}

void sub_25B2EBF64()
{
}

void sub_25B2EBF88()
{
}

uint64_t ReplicatorClient.add(records:destination:schedule:)(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v375 = *MEMORY[0x263EF8340];
  uint64_t v330 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v358 = *(void *)(v330 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v330);
  v334 = (char *)v317 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v350 = (char *)v317 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v9 - 8);
  v347 = (char *)v317 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v348 = sub_25B37F500();
  unint64_t v328 = *(void *)(v348 - 8);
  MEMORY[0x270FA5388](v348);
  v349 = (char *)v317 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340DA0);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  v365 = (char *)v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v17 = (unint64_t)v317 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  v346 = (char *)v317 - v19;
  MEMORY[0x270FA5388](v18);
  *(void *)&long long v352 = (char *)v317 - v20;
  uint64_t v339 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v332 = *(void *)(v339 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v339);
  uint64_t v357 = (uint64_t)v317 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v341 = (uint64_t)v317 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)v317 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v324 = (uint64_t)v317 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v325 = (uint64_t)v317 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v323 = (uint64_t)v317 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v326 = (uint64_t)v317 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v327 = (uint64_t)v317 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v331 = (uint64_t)v317 - v39;
  MEMORY[0x270FA5388](v38);
  unint64_t v335 = (unint64_t)v317 - v40;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v41 - 8);
  v337 = (char *)v317 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = sub_25B37F640();
  int64_t v362 = *(void *)(v363 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v363);
  v329 = (char *)v317 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  v355 = (char *)v317 - v46;
  MEMORY[0x270FA5388](v45);
  v353 = (void *)((char *)v317 - v47);
  uint64_t v48 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v48 - 8);
  uint64_t v50 = (char *)v317 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v364 = type metadata accessor for ReplicatorDevice(0);
  unint64_t v361 = *(void *)(v364 - 8);
  uint64_t v51 = MEMORY[0x270FA5388](v364);
  v354 = (void *)((char *)v317 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v360 = (char *)v317 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  v356 = (void (**)(char *, uint64_t))((char *)v317 - v56);
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  unint64_t v59 = (unint64_t)v317 - v58;
  MEMORY[0x270FA5388](v57);
  uint64_t v61 = (void *)((char *)v317 - v60);
  uint64_t v340 = *a2;
  int v333 = *a3;
  if (qword_26B3417C0 != -1) {
LABEL_233:
  }
    swift_once();
  uint64_t v62 = sub_25B37F780();
  uint64_t v63 = __swift_project_value_buffer(v62, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain();
  uint64_t v344 = v63;
  os_log_t v64 = sub_25B37F760();
  os_log_type_t v65 = sub_25B37FCD0();
  BOOL v66 = os_log_type_enabled(v64, v65);
  uint64_t v342 = a1;
  v338 = v27;
  uint64_t v351 = (uint64_t)v50;
  if (v66)
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 134349056;
    *(void *)&long long v372 = *(void *)(a1 + 16);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v64, v65, "Adding %{public}ld records", v67, 0xCu);
    MEMORY[0x2611621B0](v67, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v68 = *(void *)(v345 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v68 + 20));
  unint64_t v69 = v366;
  sub_25B2E7F24((unsigned char *)(v68 + 16), &v372);
  uint64_t v70 = v364;
  if (v69)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v68 + 20));
    __break(1u);
LABEL_240:
    os_unfair_lock_unlock((os_unfair_lock_t)v17);
    __break(1u);
    JUMPOUT(0x25B2EF818);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v68 + 20));
  char v71 = v372;
  uint64_t v72 = swift_release();
  if ((v71 & 1) == 0)
  {
    uint64_t v86 = sub_25B37F760();
    os_log_type_t v87 = sub_25B37FCB0();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl(&dword_25B2C1000, v86, v87, "Client is not registered", v88, 2u);
      MEMORY[0x2611621B0](v88, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v89 = 2;
    goto LABEL_25;
  }
  uint64_t v321 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue;
  MEMORY[0x270FA5388](v72);
  uint64_t v322 = v73;
  v317[-2] = v73;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v336 = 0;
  uint64_t v74 = v372;
  uint64_t v75 = MEMORY[0x263F8EE78];
  *(void *)&long long v372 = MEMORY[0x263F8EE78];
  uint64_t v76 = *(void *)(v74 + 16);
  unint64_t v366 = v17;
  uint64_t v359 = v76;
  if (!v76) {
    goto LABEL_27;
  }
  unint64_t v17 = 0;
  v343 = (void (**)(uint64_t, uint64_t))(v362 + 8);
  uint64_t v77 = v351;
  do
  {
    if (v17 >= *(void *)(v74 + 16)) {
      goto LABEL_219;
    }
    unint64_t v78 = (*(unsigned __int8 *)(v361 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v361 + 80);
    uint64_t v79 = *(void *)(v361 + 72);
    sub_25B3198C0(v74 + v78 + v79 * v17, (uint64_t)v61, type metadata accessor for ReplicatorDevice);
    sub_25B3198C0((uint64_t)v61 + *(int *)(v70 + 48), v77, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48))(v77, 4, v80);
    if ((v81 - 2) >= 2)
    {
      if (v81)
      {
        sub_25B319990(v77, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B3198C0((uint64_t)v61, v59, type metadata accessor for ReplicatorDevice);
        sub_25B319990(v59, type metadata accessor for ReplicatorDevice);
LABEL_10:
        sub_25B319990((uint64_t)v61, type metadata accessor for ReplicatorDevice);
        goto LABEL_11;
      }
      (*v343)(v77, v363);
    }
    sub_25B3198C0((uint64_t)v61, v59, type metadata accessor for ReplicatorDevice);
    char v82 = *(unsigned char *)(v59 + *(int *)(v70 + 56));
    sub_25B319990(v59, type metadata accessor for ReplicatorDevice);
    if (v82) {
      goto LABEL_10;
    }
    sub_25B319928((uint64_t)v61, (uint64_t)v356, type metadata accessor for ReplicatorDevice);
    uint64_t v83 = v372;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_25B3109DC(0, *(void *)(v83 + 16) + 1, 1);
      uint64_t v83 = v372;
    }
    unint64_t v85 = *(void *)(v83 + 16);
    unint64_t v84 = *(void *)(v83 + 24);
    if (v85 >= v84 >> 1)
    {
      sub_25B3109DC(v84 > 1, v85 + 1, 1);
      uint64_t v83 = v372;
    }
    *(void *)(v83 + 16) = v85 + 1;
    sub_25B319928((uint64_t)v356, v83 + v78 + v85 * v79, type metadata accessor for ReplicatorDevice);
    uint64_t v70 = v364;
    uint64_t v77 = v351;
LABEL_11:
    ++v17;
  }
  while (v359 != v17);
  uint64_t v75 = v372;
  unint64_t v17 = v366;
LABEL_27:
  swift_bridgeObjectRelease();
  int64_t v91 = *(void *)(v75 + 16);
  uint64_t v92 = v363;
  uint64_t v359 = v75;
  if (v91)
  {
    *(void *)&long long v372 = MEMORY[0x263F8EE78];
    sub_25B3109A0(0, v91, 0);
    uint64_t v93 = v75 + ((*(unsigned __int8 *)(v361 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v361 + 80));
    uint64_t v94 = *(void *)(v361 + 72);
    uint64_t v95 = (void (**)(uint64_t *, char *, uint64_t))(v362 + 16);
    uint64_t v96 = v353;
    do
    {
      uint64_t v97 = v360;
      sub_25B3198C0(v93, (uint64_t)v360, type metadata accessor for ReplicatorDevice);
      (*v95)(v96, &v97[*(int *)(v364 + 20)], v92);
      sub_25B319990((uint64_t)v97, type metadata accessor for ReplicatorDevice);
      uint64_t v98 = v372;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B3109A0(0, *(void *)(v98 + 16) + 1, 1);
        uint64_t v96 = v353;
        uint64_t v98 = v372;
      }
      unint64_t v100 = *(void *)(v98 + 16);
      unint64_t v99 = *(void *)(v98 + 24);
      if (v100 >= v99 >> 1)
      {
        sub_25B3109A0(v99 > 1, v100 + 1, 1);
        uint64_t v96 = v353;
        uint64_t v98 = v372;
      }
      *(void *)(v98 + 16) = v100 + 1;
      uint64_t v92 = v363;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v362 + 32))(v98+ ((*(unsigned __int8 *)(v362 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v362 + 80))+ *(void *)(v362 + 72) * v100, v96, v363);
      *(void *)&long long v372 = v98;
      v93 += v94;
      --v91;
    }
    while (v91);
    unint64_t v17 = v366;
  }
  swift_bridgeObjectRetain();
  uint64_t v101 = sub_25B37F760();
  os_log_type_t v102 = sub_25B37FCD0();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    *(void *)&long long v372 = v104;
    *(_DWORD *)uint64_t v103 = 136380675;
    v360 = (char *)(v103 + 4);
    uint64_t v105 = swift_bridgeObjectRetain();
    uint64_t v106 = MEMORY[0x261161220](v105, v363);
    unint64_t v108 = v107;
    swift_bridgeObjectRelease();
    v371 = (void *)sub_25B2CA048(v106, v108, (uint64_t *)&v372);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v101, v102, "Retrieved paired relationships: %{private}s", v103, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v104, -1, -1);
    MEMORY[0x2611621B0](v103, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v109 = v342;
  uint64_t v61 = v365;
  uint64_t v110 = v337;
  uint64_t v111 = v340;
  if (!v340)
  {
    swift_release();
    goto LABEL_52;
  }
  v343 = *(void (***)(uint64_t, uint64_t))(v340 + 16);
  if (!v343)
  {
    swift_release();
    v204 = sub_25B37F760();
    os_log_type_t v205 = sub_25B37FCB0();
    if (os_log_type_enabled(v204, v205))
    {
      v206 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v206 = 0;
      _os_log_impl(&dword_25B2C1000, v204, v205, "No destination relationship IDs specified", v206, 2u);
      MEMORY[0x2611621B0](v206, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v89 = 0;
LABEL_25:
    *(void *)(v89 + 8) = 0;
    return swift_willThrow();
  }
  unint64_t v112 = v340 + ((*(unsigned __int8 *)(v362 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v362 + 80));
  uint64_t v113 = v362 + 16;
  uint64_t v114 = v362 + 56;
  v360 = (char *)(v362 + 48);
  v353 = (uint64_t *)(v362 + 32);
  v356 = (void (**)(char *, uint64_t))(v362 + 8);
  swift_bridgeObjectRetain();
  uint64_t v115 = 0;
  uint64_t v351 = v113;
  uint64_t v320 = v114;
  unint64_t v319 = v112;
  do
  {
    if ((unint64_t)v115 >= *(void *)(v111 + 16)) {
      goto LABEL_235;
    }
    int64_t v116 = v362;
    unint64_t v117 = v112 + *(void *)(v362 + 72) * (void)v115;
    uint64_t v118 = *(void (**)(char *, unint64_t, uint64_t))(v362 + 16);
    uint64_t v119 = v363;
    v118(v110, v117, v363);
    uint64_t v120 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56);
    v120(v110, 0, 1, v119);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v110, 1, v119) == 1) {
      goto LABEL_50;
    }
    ((void (*)(char *, char *, uint64_t))*v353)(v355, v110, v119);
    uint64_t v121 = *(void *)(v359 + 16);
    if (!v121)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_115;
    }
    uint64_t v115 = (void (**)(uint64_t, uint64_t))((char *)v115 + 1);
    unint64_t v122 = v361;
    uint64_t v123 = v359 + ((*(unsigned __int8 *)(v361 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v361 + 80));
    swift_retain();
    uint64_t v124 = *(void *)(v122 + 72);
    while (1)
    {
      uint64_t v125 = (uint64_t)v354;
      sub_25B3198C0(v123, (uint64_t)v354, type metadata accessor for ReplicatorDevice);
      char v126 = sub_25B37F610();
      sub_25B319990(v125, type metadata accessor for ReplicatorDevice);
      if (v126) {
        break;
      }
      v123 += v124;
      if (!--v121)
      {
        swift_bridgeObjectRelease();
        swift_release_n();
LABEL_115:
        v195 = v329;
        uint64_t v196 = v363;
        v118(v329, (unint64_t)v355, v363);
        v197 = sub_25B37F760();
        os_log_type_t v198 = sub_25B37FCB0();
        if (os_log_type_enabled(v197, v198))
        {
          v199 = (uint8_t *)swift_slowAlloc();
          uint64_t v200 = swift_slowAlloc();
          *(void *)&long long v372 = v200;
          *(_DWORD *)v199 = 136446210;
          sub_25B3193FC((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
          uint64_t v201 = sub_25B380190();
          v371 = (void *)sub_25B2CA048(v201, v202, (uint64_t *)&v372);
          uint64_t v196 = v363;
          sub_25B37FD70();
          swift_bridgeObjectRelease();
          v203 = *v356;
          (*v356)(v195, v196);
          _os_log_impl(&dword_25B2C1000, v197, v198, "Unpaired or unknown destination relationship ID: %{public}s", v199, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x2611621B0](v200, -1, -1);
          MEMORY[0x2611621B0](v199, -1, -1);
        }
        else
        {
          v203 = *v356;
          (*v356)(v195, v196);
        }

        sub_25B2DCCD4();
        swift_allocError();
        *(unsigned char *)uint64_t v207 = 0;
        *(void *)(v207 + 8) = 0;
        swift_willThrow();
        return ((uint64_t (*)(char *, uint64_t))v203)(v355, v196);
      }
    }
    swift_release();
    (*v356)(v355, v363);
    uint64_t v111 = v340;
    uint64_t v109 = v342;
    uint64_t v110 = v337;
    unint64_t v112 = v319;
  }
  while (v115 != v343);
  v120(v337, 1, 1, v363);
LABEL_50:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v61 = v365;
  unint64_t v17 = v366;
LABEL_52:
  uint64_t v127 = *(void *)(v109 + 16);
  if (v127)
  {
    uint64_t v128 = (char *)(v109
                  + ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80)));
    uint64_t v129 = *(char **)(v332 + 72);
    uint64_t v364 = v328 + 48;
    v360 = (char *)(v328 + 32);
    v356 = (void (**)(char *, uint64_t))*MEMORY[0x263F080A8];
    uint64_t v351 = *MEMORY[0x263F08080];
    v343 = (void (**)(uint64_t, uint64_t))*MEMORY[0x263F08088];
    unint64_t v361 = v328 + 8;
    swift_bridgeObjectRetain();
    v130 = 0;
    v317[1] = "licatorClient.callout";
    unint64_t v318 = 0x800000025B38AA60;
    uint64_t v359 = MEMORY[0x263F8EE58] + 8;
    uint64_t v131 = v335;
    v354 = (uint64_t *)v127;
    v337 = v128;
    v329 = v129;
    while (1)
    {
      v353 = v130;
      uint64_t v132 = sub_25B3198C0((uint64_t)&v128[(void)v129 * (void)v130], v131, type metadata accessor for ReplicatorRecord);
      unint64_t v134 = *(void *)(v131 + 32);
      unint64_t v133 = *(void *)(v131 + 40);
      uint64_t v135 = *(os_unfair_lock_s **)(v345 + 80);
      MEMORY[0x270FA5388](v132);
      v317[-2] = sub_25B2E441C;
      v317[-1] = v136;
      unint64_t v17 = (unint64_t)&v135[4];
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v135 + 4);
      uint64_t v137 = v336;
      sub_25B319EEC(v138);
      if (v137) {
        goto LABEL_240;
      }
      os_unfair_lock_unlock(v135 + 4);
      swift_release();
      long long v139 = v372;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__PAIR128__(v133, v134) == v139)
      {
        uint64_t v140 = swift_bridgeObjectRelease_n();
        unint64_t v17 = v335;
      }
      else
      {
        char v141 = sub_25B3801A0();
        swift_bridgeObjectRelease();
        uint64_t v140 = swift_bridgeObjectRelease();
        unint64_t v17 = v335;
        if ((v141 & 1) == 0) {
          goto LABEL_221;
        }
      }
      v142 = *(os_unfair_lock_s **)(v345 + 80);
      MEMORY[0x270FA5388](v140);
      v317[-2] = sub_25B2E441C;
      v317[-1] = v143;
      swift_retain();
      os_unfair_lock_lock(v142 + 4);
      sub_25B319EEC(v144);
      uint64_t v336 = 0;
      os_unfair_lock_unlock(v142 + 4);
      swift_release();
      uint64_t v145 = v374;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v145 + 16)
        || (uint64_t v147 = *(void *)(v17 + 16),
            uint64_t v146 = *(void *)(v17 + 24),
            swift_bridgeObjectRetain(),
            sub_25B2D5EB0(v147, v146),
            char v149 = v148,
            swift_bridgeObjectRelease(),
            (v149 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v301 = v325;
        sub_25B3198C0(v17, v325, type metadata accessor for ReplicatorRecord);
        v302 = sub_25B37F760();
        os_log_type_t v303 = sub_25B37FCB0();
        if (os_log_type_enabled(v302, v303))
        {
          v304 = (uint8_t *)swift_slowAlloc();
          uint64_t v305 = swift_slowAlloc();
          *(void *)&long long v372 = v305;
          *(_DWORD *)v304 = 136446210;
          uint64_t v306 = ReplicatorRecord.ID.description.getter();
          v371 = (void *)sub_25B2CA048(v306, v307, (uint64_t *)&v372);
          sub_25B37FD70();
          swift_bridgeObjectRelease();
          sub_25B319990(v301, type metadata accessor for ReplicatorRecord);
          v308 = "Zone does not exist: %{public}s";
          goto LABEL_227;
        }
LABEL_228:
        sub_25B319990(v301, type metadata accessor for ReplicatorRecord);
LABEL_229:

        sub_25B2DCCD4();
        swift_allocError();
        *(unsigned char *)uint64_t v316 = 0;
        *(void *)(v316 + 8) = 0;
        swift_willThrow();
        goto LABEL_230;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v150 = sub_25B37FA20();
      swift_bridgeObjectRelease();
      uint64_t v151 = v331;
      sub_25B3198C0(v17, v331, type metadata accessor for ReplicatorRecord);
      if (v150 < 1025 || *(void *)(v151 + 32) == 0xD000000000000011 && *(void *)(v151 + 40) == v318)
      {
        sub_25B319990(v151, type metadata accessor for ReplicatorRecord);
        a1 = v348;
        uint64_t v50 = v347;
        v152 = v346;
        uint64_t v27 = (char *)v352;
      }
      else
      {
        char v153 = sub_25B3801A0();
        sub_25B319990(v151, type metadata accessor for ReplicatorRecord);
        a1 = v348;
        uint64_t v50 = v347;
        v152 = v346;
        uint64_t v27 = (char *)v352;
        if ((v153 & 1) == 0) {
          goto LABEL_225;
        }
      }
      v353 = (uint64_t *)((char *)v353 + 1);
      uint64_t v154 = *(void *)(v17 + *(int *)(v339 + 24));
      uint64_t v155 = *(void *)(v154 + 64);
      v355 = (char *)(v154 + 64);
      uint64_t v156 = 1 << *(unsigned char *)(v154 + 32);
      if (v156 < 64) {
        uint64_t v157 = ~(-1 << v156);
      }
      else {
        uint64_t v157 = -1;
      }
      unint64_t v59 = v157 & v155;
      unint64_t v158 = (unint64_t)(v156 + 63) >> 6;
      unint64_t v319 = v158 - 1;
      uint64_t v159 = swift_bridgeObjectRetain();
      unint64_t v17 = 0;
      int64_t v362 = v158;
      unint64_t v328 = v158 - 5;
      uint64_t v363 = v159;
      uint64_t v320 = v159 + 104;
      uint64_t v61 = v365;
      while (1)
      {
        if (v59)
        {
          unint64_t v160 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          unint64_t v161 = v160 | (v17 << 6);
          goto LABEL_72;
        }
        int64_t v165 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          goto LABEL_233;
        }
        if (v165 >= v362)
        {
          unint64_t v167 = v17;
        }
        else
        {
          unint64_t v166 = *(void *)&v355[8 * v165];
          if (v166) {
            goto LABEL_76;
          }
          unint64_t v167 = v17 + 1;
          if ((uint64_t)(v17 + 2) < v362)
          {
            unint64_t v166 = *(void *)&v355[8 * v17 + 16];
            if (v166)
            {
              int64_t v165 = v17 + 2;
              goto LABEL_76;
            }
            unint64_t v167 = v17 + 2;
            if ((uint64_t)(v17 + 3) < v362)
            {
              unint64_t v166 = *(void *)&v355[8 * v17 + 24];
              if (v166)
              {
                int64_t v165 = v17 + 3;
LABEL_76:
                unint64_t v59 = (v166 - 1) & v166;
                unint64_t v161 = __clz(__rbit64(v166)) + (v165 << 6);
                unint64_t v17 = v165;
LABEL_72:
                uint64_t v162 = *(void *)(v363 + 56);
                void *v152 = *(void *)(*(void *)(v363 + 48) + 8 * v161);
                uint64_t v163 = v162
                     + *(void *)(*(void *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72)
                     * v161;
                uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
                sub_25B3198C0(v163, (uint64_t)v152 + *(int *)(v164 + 48), type metadata accessor for ReplicatorRecord.Value);
                (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v152, 0, 1, v164);
                uint64_t v27 = (char *)v352;
                goto LABEL_79;
              }
              int64_t v165 = v17 + 4;
              unint64_t v167 = v17 + 3;
              if ((uint64_t)(v17 + 4) < v362)
              {
                unint64_t v166 = *(void *)&v355[8 * v165];
                if (v166) {
                  goto LABEL_76;
                }
                while (v328 != v17)
                {
                  unint64_t v166 = *(void *)(v320 + 8 * v17++);
                  if (v166)
                  {
                    int64_t v165 = v17 + 4;
                    goto LABEL_76;
                  }
                }
                unint64_t v167 = v319;
              }
            }
          }
        }
        uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56))(v152, 1, 1, v168);
        unint64_t v59 = 0;
        unint64_t v17 = v167;
LABEL_79:
        sub_25B2E31F0((uint64_t)v152, (uint64_t)v27, &qword_26B340DA0);
        uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v169 - 8) + 48))(v27, 1, v169) == 1) {
          break;
        }
        uint64_t v170 = (uint64_t)&v27[*(int *)(v169 + 48)];
        uint64_t v171 = type metadata accessor for ReplicatorRecord.Value(0);
        sub_25B2E2FE0(v170 + *(int *)(v171 + 20), (uint64_t)v50, &qword_26B340CE0);
        sub_25B319990(v170, type metadata accessor for ReplicatorRecord.Value);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v364)(v50, 1, a1) == 1)
        {
          sub_25B2E344C((uint64_t)v50, &qword_26B340CE0);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))v360)(v349, v50, a1);
          id v172 = objc_msgSend(self, sel_defaultManager);
          sub_25B37F4D0();
          uint64_t v173 = (void *)sub_25B37F970();
          swift_bridgeObjectRelease();
          *(void *)&long long v372 = 0;
          id v174 = objc_msgSend(v172, sel_attributesOfItemAtPath_error_, v173, &v372);

          long long v175 = (void *)v372;
          if (!v174)
          {
            id v208 = (id)v372;
            swift_bridgeObjectRelease();
            sub_25B37F470();

            swift_willThrow();
            (*(void (**)(char *, uint64_t))v361)(v349, v348);
            swift_release();
            uint64_t v209 = v335;
            return sub_25B319990(v209, type metadata accessor for ReplicatorRecord);
          }
          type metadata accessor for FileAttributeKey(0);
          sub_25B3193FC((unint64_t *)&qword_26B340BE8, type metadata accessor for FileAttributeKey);
          uint64_t v176 = sub_25B37F8F0();
          id v177 = v175;

          a1 = v348;
          if (*(void *)(v176 + 16))
          {
            v178 = v356;
            unint64_t v179 = sub_25B2D5FD8((uint64_t)v178);
            uint64_t v50 = v347;
            v152 = v346;
            if (v180)
            {
              sub_25B2CA52C(*(void *)(v176 + 56) + 32 * v179, (uint64_t)&v372);
            }
            else
            {
              long long v372 = 0u;
              long long v373 = 0u;
            }
          }
          else
          {
            long long v372 = 0u;
            long long v373 = 0u;
            uint64_t v50 = v347;
            v152 = v346;
          }
          swift_bridgeObjectRelease();
          uint64_t v27 = (char *)v352;
          if (*((void *)&v373 + 1))
          {
            type metadata accessor for FileProtectionType(0);
            if ((swift_dynamicCast() & 1) == 0) {
              goto LABEL_98;
            }
            v181 = v371;
            uint64_t v182 = sub_25B37F9A0();
            uint64_t v184 = v183;
            if (v182 == sub_25B37F9A0() && v184 == v185)
            {
              swift_bridgeObjectRelease_n();
LABEL_202:
              swift_bridgeObjectRelease();
              unint64_t v17 = v335;
              uint64_t v290 = v327;
              sub_25B3198C0(v335, v327, type metadata accessor for ReplicatorRecord);
              v291 = sub_25B37F760();
              os_log_type_t v292 = sub_25B37FCB0();
              if (os_log_type_enabled(v291, v292))
              {
                v293 = (uint8_t *)swift_slowAlloc();
                uint64_t v294 = swift_slowAlloc();
                *(void *)&long long v372 = v294;
                *(_DWORD *)v293 = 136446210;
                uint64_t v295 = ReplicatorRecord.ID.description.getter();
                v371 = (void *)sub_25B2CA048(v295, v296, (uint64_t *)&v372);
                unint64_t v17 = v335;
                sub_25B37FD70();
                swift_bridgeObjectRelease();
                sub_25B319990(v290, type metadata accessor for ReplicatorRecord);
                v297 = "Files with class A protection should not be replicated: %{public}s";
                goto LABEL_207;
              }
              goto LABEL_208;
            }
            char v186 = sub_25B3801A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v186) {
              goto LABEL_202;
            }
            uint64_t v187 = sub_25B37F9A0();
            uint64_t v189 = v188;
            if (v187 == sub_25B37F9A0() && v189 == v190)
            {
              swift_bridgeObjectRelease_n();
LABEL_205:
              swift_bridgeObjectRelease();
              unint64_t v17 = v335;
              uint64_t v290 = v326;
              sub_25B3198C0(v335, v326, type metadata accessor for ReplicatorRecord);
              v291 = sub_25B37F760();
              os_log_type_t v292 = sub_25B37FCB0();
              if (os_log_type_enabled(v291, v292))
              {
                v293 = (uint8_t *)swift_slowAlloc();
                uint64_t v294 = swift_slowAlloc();
                *(void *)&long long v372 = v294;
                *(_DWORD *)v293 = 136446210;
                uint64_t v298 = ReplicatorRecord.ID.description.getter();
                v371 = (void *)sub_25B2CA048(v298, v299, (uint64_t *)&v372);
                unint64_t v17 = v335;
                sub_25B37FD70();
                swift_bridgeObjectRelease();
                sub_25B319990(v290, type metadata accessor for ReplicatorRecord);
                v297 = "Files with class B protection should not be replicated: %{public}s";
LABEL_207:
                _os_log_impl(&dword_25B2C1000, v291, v292, v297, v293, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x2611621B0](v294, -1, -1);
                MEMORY[0x2611621B0](v293, -1, -1);
LABEL_209:

                sub_25B2DCCD4();
                swift_allocError();
                *(unsigned char *)uint64_t v300 = 0;
                *(void *)(v300 + 8) = 0;
                swift_willThrow();

                (*(void (**)(char *, uint64_t))v361)(v349, v348);
                swift_release();
LABEL_230:
                uint64_t v209 = v17;
                return sub_25B319990(v209, type metadata accessor for ReplicatorRecord);
              }
LABEL_208:
              sub_25B319990(v290, type metadata accessor for ReplicatorRecord);
              goto LABEL_209;
            }
            char v191 = sub_25B3801A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v191) {
              goto LABEL_205;
            }
            a1 = v348;
            (*(void (**)(char *, uint64_t))v361)(v349, v348);

            uint64_t v61 = v365;
            uint64_t v50 = v347;
            v152 = v346;
            uint64_t v27 = (char *)v352;
          }
          else
          {
            sub_25B2E344C((uint64_t)&v372, &qword_26B3413D8);
LABEL_98:
            (*(void (**)(char *, uint64_t))v361)(v349, a1);
          }
        }
      }
      swift_release();
      uint64_t v131 = v335;
      sub_25B319990(v335, type metadata accessor for ReplicatorRecord);
      uint64_t v127 = (uint64_t)v354;
      v130 = v353;
      uint64_t v109 = v342;
      uint64_t v128 = v337;
      uint64_t v129 = v329;
      if (v353 == v354)
      {
        swift_bridgeObjectRelease();
        unint64_t v17 = v366;
        break;
      }
    }
  }
  uint64_t v368 = 0;
  unint64_t v369 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  v192 = sub_25B37F760();
  os_log_type_t v193 = sub_25B37FCD0();
  if (os_log_type_enabled(v192, v193))
  {
    v194 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v194 = 134349056;
    *(void *)&long long v372 = v127;
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v192, v193, "Beginning batched add with %{public}ld records", v194, 0xCu);
    MEMORY[0x2611621B0](v194, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v210 = MEMORY[0x263F8EE60];
  if (!v127)
  {
    v360 = 0;
    goto LABEL_188;
  }
  v354 = (uint64_t *)v127;
  uint64_t v211 = v332;
  unint64_t v361 = (*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
  uint64_t v359 = v109 + v361;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v360 = 0;
  uint64_t v212 = 0;
  int64_t v362 = *(void *)(v211 + 72);
  v353 = (uint64_t *)&v371;
  *(void *)&long long v213 = 134349570;
  long long v352 = v213;
  uint64_t v351 = MEMORY[0x263F8EE58] + 8;
  v355 = (char *)(v210 + 8);
  uint64_t v214 = (uint64_t)v338;
  while (2)
  {
    int64_t v215 = v362;
    sub_25B3198C0(v359 + v362 * v212, v214, type metadata accessor for ReplicatorRecord);
    swift_bridgeObjectRetain();
    uint64_t v216 = sub_25B37FA20();
    swift_bridgeObjectRelease();
    if (__OFADD__(v368, v216))
    {
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
      goto LABEL_238;
    }
    v368 += v216;
    sub_25B3198C0(v214, v341, type metadata accessor for ReplicatorRecord);
    swift_beginAccess();
    unint64_t v217 = v369;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v217 = sub_25B3103B4(0, *(void *)(v217 + 16) + 1, 1, v217, &qword_26B340D90, type metadata accessor for ReplicatorRecord, type metadata accessor for ReplicatorRecord);
    }
    unint64_t v219 = *(void *)(v217 + 16);
    unint64_t v218 = *(void *)(v217 + 24);
    if (v219 >= v218 >> 1) {
      unint64_t v217 = sub_25B3103B4(v218 > 1, v219 + 1, 1, v217, &qword_26B340D90, type metadata accessor for ReplicatorRecord, type metadata accessor for ReplicatorRecord);
    }
    uint64_t v363 = v212 + 1;
    *(void *)(v217 + 16) = v219 + 1;
    sub_25B319928(v341, v217 + v361 + v219 * v215, type metadata accessor for ReplicatorRecord);
    unint64_t v369 = v217;
    swift_endAccess();
    uint64_t v220 = *(void *)(v214 + *(int *)(v339 + 24));
    uint64_t v221 = *(void *)(v220 + 64);
    uint64_t v364 = v220 + 64;
    uint64_t v222 = 1 << *(unsigned char *)(v220 + 32);
    if (v222 < 64) {
      uint64_t v223 = ~(-1 << v222);
    }
    else {
      uint64_t v223 = -1;
    }
    unint64_t v224 = v223 & v221;
    int64_t v225 = (unint64_t)(v222 + 63) >> 6;
    v356 = (void (**)(char *, uint64_t))(v225 - 1);
    swift_bridgeObjectRetain();
    int64_t v226 = 0;
    if (v224)
    {
LABEL_137:
      unint64_t v227 = __clz(__rbit64(v224));
      v224 &= v224 - 1;
      unint64_t v228 = v227 | (v226 << 6);
LABEL_138:
      uint64_t v229 = *(void *)(v220 + 56);
      *uint64_t v61 = *(void *)(*(void *)(v220 + 48) + 8 * v228);
      uint64_t v230 = v229 + *(void *)(*(void *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72) * v228;
      uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
      sub_25B3198C0(v230, (uint64_t)v61 + *(int *)(v231 + 48), type metadata accessor for ReplicatorRecord.Value);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56))(v61, 0, 1, v231);
      goto LABEL_148;
    }
    while (2)
    {
      int64_t v232 = v226 + 1;
      if (__OFADD__(v226, 1)) {
        goto LABEL_220;
      }
      if (v232 < v225)
      {
        unint64_t v233 = *(void *)(v364 + 8 * v232);
        if (v233) {
          goto LABEL_142;
        }
        v226 += 2;
        if (v232 + 1 >= v225)
        {
          int64_t v226 = v232;
        }
        else
        {
          unint64_t v233 = *(void *)(v364 + 8 * v226);
          if (v233)
          {
            ++v232;
LABEL_142:
            unint64_t v224 = (v233 - 1) & v233;
            unint64_t v228 = __clz(__rbit64(v233)) + (v232 << 6);
            int64_t v226 = v232;
            goto LABEL_138;
          }
          if (v232 + 2 < v225)
          {
            unint64_t v233 = *(void *)(v364 + 8 * (v232 + 2));
            if (v233)
            {
              v232 += 2;
              goto LABEL_142;
            }
            int64_t v243 = v232 + 3;
            if (v232 + 3 >= v225)
            {
              int64_t v226 = v232 + 2;
            }
            else
            {
              unint64_t v233 = *(void *)(v364 + 8 * v243);
              if (v233)
              {
                v232 += 3;
                goto LABEL_142;
              }
              while (1)
              {
                int64_t v232 = v243 + 1;
                if (__OFADD__(v243, 1)) {
                  goto LABEL_237;
                }
                if (v232 >= v225) {
                  break;
                }
                unint64_t v233 = *(void *)(v364 + 8 * v232);
                ++v243;
                if (v233) {
                  goto LABEL_142;
                }
              }
              int64_t v226 = (int64_t)v356;
            }
          }
        }
      }
      uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v234 - 8) + 56))(v61, 1, 1, v234);
      unint64_t v224 = 0;
LABEL_148:
      sub_25B2E31F0((uint64_t)v61, v17, &qword_26B340DA0);
      uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v235 - 8) + 48))(v17, 1, v235) != 1)
      {
        v236 = (uint64_t *)(v17 + *(int *)(v235 + 48));
        uint64_t v238 = *v236;
        unint64_t v237 = v236[1];
        sub_25B2E2B14(*v236, v237);
        sub_25B319990((uint64_t)v236, type metadata accessor for ReplicatorRecord.Value);
        unint64_t v17 = v366;
        switch(v237 >> 62)
        {
          case 1uLL:
            sub_25B2CA2D8(v238, v237);
            LODWORD(v239) = HIDWORD(v238) - v238;
            if (__OFSUB__(HIDWORD(v238), v238))
            {
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              swift_bridgeObjectRelease();
              uint64_t v301 = v323;
              sub_25B3198C0(v17, v323, type metadata accessor for ReplicatorRecord);
              v302 = sub_25B37F760();
              os_log_type_t v303 = sub_25B37FCB0();
              if (!os_log_type_enabled(v302, v303)) {
                goto LABEL_228;
              }
              v304 = (uint8_t *)swift_slowAlloc();
              uint64_t v305 = swift_slowAlloc();
              *(void *)&long long v372 = v305;
              *(_DWORD *)v304 = 136446210;
              uint64_t v314 = ReplicatorRecord.ID.description.getter();
              v371 = (void *)sub_25B2CA048(v314, v315, (uint64_t *)&v372);
              sub_25B37FD70();
              swift_bridgeObjectRelease();
              sub_25B319990(v301, type metadata accessor for ReplicatorRecord);
              v308 = "Record ID is too long: %{public}s";
            }
            else
            {
              uint64_t v239 = (int)v239;
LABEL_156:
              BOOL v241 = __OFADD__(v368, v239);
              uint64_t v242 = v368 + v239;
              uint64_t v61 = v365;
              if (!v241)
              {
                uint64_t v368 = v242;
                if (v224) {
                  goto LABEL_137;
                }
                continue;
              }
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              swift_bridgeObjectRelease();
              uint64_t v301 = v324;
              sub_25B3198C0(v17, v324, type metadata accessor for ReplicatorRecord);
              v302 = sub_25B37F760();
              os_log_type_t v303 = sub_25B37FCB0();
              if (!os_log_type_enabled(v302, v303)) {
                goto LABEL_228;
              }
              v304 = (uint8_t *)swift_slowAlloc();
              uint64_t v305 = swift_slowAlloc();
              *(void *)&long long v372 = v305;
              *(_DWORD *)v304 = 136446210;
              uint64_t v312 = ReplicatorRecord.ID.description.getter();
              v371 = (void *)sub_25B2CA048(v312, v313, (uint64_t *)&v372);
              sub_25B37FD70();
              swift_bridgeObjectRelease();
              sub_25B319990(v301, type metadata accessor for ReplicatorRecord);
              v308 = "Client ID mismatch: %{public}s";
            }
LABEL_227:
            _os_log_impl(&dword_25B2C1000, v302, v303, v308, v304, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2611621B0](v305, -1, -1);
            MEMORY[0x2611621B0](v304, -1, -1);
            goto LABEL_229;
          case 2uLL:
            unint64_t v17 = *(void *)(v238 + 16);
            uint64_t v240 = *(void *)(v238 + 24);
            sub_25B2CA2D8(v238, v237);
            uint64_t v239 = v240 - v17;
            if (__OFSUB__(v240, v17)) {
              goto LABEL_224;
            }
            unint64_t v17 = v366;
            goto LABEL_156;
          case 3uLL:
            sub_25B2CA2D8(v238, v237);
            uint64_t v239 = 0;
            goto LABEL_156;
          default:
            sub_25B2CA2D8(v238, v237);
            uint64_t v239 = BYTE6(v237);
            goto LABEL_156;
        }
      }
      break;
    }
    swift_release();
    if (v368 <= 512000)
    {
      uint64_t v214 = (uint64_t)v338;
      uint64_t v212 = v363;
      goto LABEL_127;
    }
    unint64_t v244 = v369;
    int64_t v245 = *(void *)(v369 + 16);
    if (v245)
    {
      v371 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_25B310964(0, v245, 0);
      uint64_t v246 = v244 + v361;
      uint64_t v247 = (uint64_t)v371;
      uint64_t v248 = (uint64_t)v350;
      int64_t v249 = v362;
      do
      {
        uint64_t v250 = v357;
        sub_25B3198C0(v246, v357, type metadata accessor for ReplicatorRecord);
        sub_25B3198C0(v250, v248, type metadata accessor for ReplicatorRecord.ID);
        sub_25B319990(v250, type metadata accessor for ReplicatorRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_25B310964(0, *(void *)(v247 + 16) + 1, 1);
          uint64_t v248 = (uint64_t)v350;
          uint64_t v247 = (uint64_t)v371;
        }
        unint64_t v252 = *(void *)(v247 + 16);
        unint64_t v251 = *(void *)(v247 + 24);
        if (v252 >= v251 >> 1)
        {
          sub_25B310964(v251 > 1, v252 + 1, 1);
          uint64_t v248 = (uint64_t)v350;
          uint64_t v247 = (uint64_t)v371;
        }
        *(void *)(v247 + 16) = v252 + 1;
        sub_25B319928(v248, v247+ ((*(unsigned __int8 *)(v358 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v358 + 80))+ *(void *)(v358 + 72) * v252, type metadata accessor for ReplicatorRecord.ID);
        v246 += v249;
        --v245;
        unint64_t v17 = v366;
      }
      while (v245);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v253 = sub_25B37F760();
    os_log_type_t v254 = sub_25B37FCD0();
    if (os_log_type_enabled(v253, v254))
    {
      uint64_t v255 = swift_slowAlloc();
      uint64_t v256 = swift_slowAlloc();
      uint64_t v364 = v256;
      *(_DWORD *)uint64_t v255 = v352;
      v370 = (void (**)(void, void, void))v368;
      v371 = (void *)v256;
      sub_25B37FD70();
      *(_WORD *)(v255 + 12) = 2050;
      v370 = *(void (***)(void, void, void))(v369 + 16);
      sub_25B37FD70();
      *(_WORD *)(v255 + 22) = 2082;
      uint64_t v257 = swift_bridgeObjectRetain();
      uint64_t v258 = MEMORY[0x261161220](v257, v330);
      unint64_t v260 = v259;
      swift_bridgeObjectRelease();
      v370 = (void (**)(void, void, void))sub_25B2CA048(v258, v260, (uint64_t *)&v371);
      unint64_t v17 = v366;
      sub_25B37FD70();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B2C1000, v253, v254, "Adding record batch of size %{public}ld with %{public}ld records: %{public}s", (uint8_t *)v255, 0x20u);
      uint64_t v261 = v364;
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v261, -1, -1);
      MEMORY[0x2611621B0](v255, -1, -1);
    }
    else
    {

      uint64_t v262 = swift_bridgeObjectRelease_n();
    }
    uint64_t v61 = v365;
    uint64_t v214 = (uint64_t)v338;
    uint64_t v212 = v363;
    unint64_t v263 = v369;
    MEMORY[0x270FA5388](v262);
    v317[-4] = v264;
    v317[-3] = v263;
    v317[-2] = v340;
    LOBYTE(v317[-1]) = v333;
    swift_bridgeObjectRetain();
    uint64_t v265 = v336;
    sub_25B37FD10();
    uint64_t v336 = v265;
    if (v265)
    {
      swift_bridgeObjectRelease();
      sub_25B319990(v214, type metadata accessor for ReplicatorRecord);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (__OFADD__(v360, 1)) {
      goto LABEL_236;
    }
    ++v360;
    uint64_t v368 = 0;
    unint64_t v369 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
LABEL_127:
    sub_25B319990(v214, type metadata accessor for ReplicatorRecord);
    if ((uint64_t *)v212 != v354) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_188:
  swift_beginAccess();
  unint64_t v266 = v369;
  int64_t v267 = *(void *)(v369 + 16);
  if (v267)
  {
    v370 = (void (**)(void, void, void))MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25B310964(0, v267, 0);
    uint64_t v268 = v266 + ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80));
    uint64_t v269 = *(void *)(v332 + 72);
    uint64_t v270 = (uint64_t)v370;
    uint64_t v271 = (uint64_t)v334;
    do
    {
      uint64_t v272 = v357;
      sub_25B3198C0(v268, v357, type metadata accessor for ReplicatorRecord);
      sub_25B3198C0(v272, v271, type metadata accessor for ReplicatorRecord.ID);
      sub_25B319990(v272, type metadata accessor for ReplicatorRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B310964(0, *(void *)(v270 + 16) + 1, 1);
        uint64_t v271 = (uint64_t)v334;
        uint64_t v270 = (uint64_t)v370;
      }
      unint64_t v274 = *(void *)(v270 + 16);
      unint64_t v273 = *(void *)(v270 + 24);
      if (v274 >= v273 >> 1)
      {
        sub_25B310964(v273 > 1, v274 + 1, 1);
        uint64_t v271 = (uint64_t)v334;
        uint64_t v270 = (uint64_t)v370;
      }
      *(void *)(v270 + 16) = v274 + 1;
      sub_25B319928(v271, v270+ ((*(unsigned __int8 *)(v358 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v358 + 80))+ *(void *)(v358 + 72) * v274, type metadata accessor for ReplicatorRecord.ID);
      v268 += v269;
      --v267;
    }
    while (v267);
    swift_bridgeObjectRelease();
    uint64_t v276 = v368;
    unint64_t v275 = v369;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v277 = sub_25B37F760();
    uint64_t v278 = sub_25B37FCD0();
    if (os_log_type_enabled(v277, (os_log_type_t)v278))
    {
      uint64_t v279 = swift_slowAlloc();
      v280 = (void (**)(void, void, void))swift_slowAlloc();
      v370 = v280;
      *(_DWORD *)uint64_t v279 = 134349570;
      uint64_t v367 = v276;
      sub_25B37FD70();
      *(_WORD *)(v279 + 12) = 2050;
      uint64_t v281 = *(void *)(v275 + 16);
      swift_bridgeObjectRelease();
      uint64_t v367 = v281;
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      *(_WORD *)(v279 + 22) = 2082;
      uint64_t v282 = swift_bridgeObjectRetain();
      uint64_t v283 = MEMORY[0x261161220](v282, v330);
      unint64_t v285 = v284;
      swift_release();
      uint64_t v367 = sub_25B2CA048(v283, v285, (uint64_t *)&v370);
      sub_25B37FD70();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B2C1000, v277, (os_log_type_t)v278, "Adding record batch of size %{public}ld with %{public}ld records: %{public}s", (uint8_t *)v279, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v280, -1, -1);
      MEMORY[0x2611621B0](v279, -1, -1);
    }
    else
    {

      swift_release_n();
      uint64_t v286 = swift_bridgeObjectRelease_n();
    }
    unint64_t v287 = v369;
    MEMORY[0x270FA5388](v286);
    v317[-4] = v288;
    v317[-3] = v287;
    v317[-2] = v340;
    LOBYTE(v317[-1]) = v333;
    swift_bridgeObjectRetain();
    uint64_t v289 = v336;
    sub_25B37FD10();
    swift_bridgeObjectRelease();
    if (v289) {
      return swift_bridgeObjectRelease();
    }
    BOOL v241 = __OFADD__(v360++, 1);
    if (v241) {
LABEL_238:
    }
      __break(1u);
  }
  v309 = sub_25B37F760();
  os_log_type_t v310 = sub_25B37FCD0();
  if (os_log_type_enabled(v309, v310))
  {
    v311 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v311 = 134349056;
    v370 = (void (**)(void, void, void))v360;
    sub_25B37FD70();
    _os_log_impl(&dword_25B2C1000, v309, v310, "Ended batched add with %{public}ld batches", v311, 0xCu);
    MEMORY[0x2611621B0](v311, -1, -1);
  }

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.delete(recordIDs:schedule:)(Swift::OpaquePointer recordIDs, ReplicatorServices::ReplicatorSchedule schedule)
{
  uint64_t v3 = v2;
  uint64_t v4 = (unsigned __int8 *)schedule;
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v69 = (uint64_t)&v67 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v67 - v13);
  int v70 = *v4;
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_25B37F780();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain_n();
  uint64_t v71 = v16;
  unint64_t v17 = sub_25B37F760();
  os_log_type_t v18 = sub_25B37FCD0();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v68 = v10;
  rawValue = recordIDs._rawValue;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v76 = v7;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v74 = v14;
    uint64_t v75 = v2;
    uint64_t v23 = v22;
    v78[0] = v22;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = MEMORY[0x261161220](v24, v6);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v79 = sub_25B2CA048(v25, v27, v78);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v17, v18, "Deleting record IDs: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v28 = v23;
    uint64_t v14 = v74;
    uint64_t v3 = v75;
    MEMORY[0x2611621B0](v28, -1, -1);
    uint64_t v29 = v21;
    uint64_t v7 = v76;
    MEMORY[0x2611621B0](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = *(void *)(v77 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 20));
  sub_25B2E7F24((unsigned char *)(v30 + 16), v78);
  if (v3)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 20));
    __break(1u);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 20));
  char v31 = v78[0];
  swift_release();
  if ((v31 & 1) == 0)
  {
    uint64_t v52 = sub_25B37F760();
    os_log_type_t v53 = sub_25B37FCB0();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_25B2C1000, v52, v53, "Client is not registered", v54, 2u);
      MEMORY[0x2611621B0](v54, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v55 = 2;
    *(void *)(v55 + 8) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v32 = rawValue[2];
  if (!v32)
  {
LABEL_18:
    LOBYTE(v78[0]) = v70;
    sub_25B2F0150();
    return;
  }
  uint64_t v33 = (uint64_t)rawValue + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v73 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  uint64_t v74 = v14;
  while (1)
  {
    uint64_t v75 = v33;
    uint64_t v76 = v32;
    uint64_t v34 = sub_25B3198C0(v33, (uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v35 = v14[4];
    uint64_t v36 = v14[5];
    uint64_t v37 = *(os_unfair_lock_s **)(v77 + 80);
    MEMORY[0x270FA5388](v34);
    *(&v67 - 2) = (uint64_t)sub_25B2E441C;
    *(&v67 - 1) = v38;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v37 + 4);
    sub_25B319EEC(v39);
    os_unfair_lock_unlock(v37 + 4);
    swift_release();
    uint64_t v41 = v78[0];
    uint64_t v40 = v78[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35 != v41 || v36 != v40) {
      break;
    }
    uint64_t v42 = swift_bridgeObjectRelease_n();
LABEL_14:
    uint64_t v44 = *(os_unfair_lock_s **)(v77 + 80);
    MEMORY[0x270FA5388](v42);
    *(&v67 - 2) = (uint64_t)sub_25B2E441C;
    *(&v67 - 1) = v45;
    swift_retain();
    os_unfair_lock_lock(v44 + 4);
    sub_25B319EEC(v46);
    uint64_t v14 = v74;
    os_unfair_lock_unlock(v44 + 4);
    swift_release();
    uint64_t v47 = v78[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v47 + 16)
      || (uint64_t v49 = v14[2],
          uint64_t v48 = v14[3],
          swift_bridgeObjectRetain(),
          sub_25B2D5EB0(v49, v48),
          char v51 = v50,
          swift_bridgeObjectRelease(),
          (v51 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v56 = v69;
      sub_25B3198C0((uint64_t)v14, v69, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v57 = sub_25B37F760();
      os_log_type_t v58 = sub_25B37FCB0();
      if (os_log_type_enabled(v57, v58))
      {
        unint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = swift_slowAlloc();
        v78[0] = v60;
        *(_DWORD *)unint64_t v59 = 136446210;
        uint64_t v61 = ReplicatorRecord.ID.description.getter();
        uint64_t v79 = sub_25B2CA048(v61, v62, v78);
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        sub_25B319990(v56, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v63 = "Zone does not exist: %{public}s";
LABEL_26:
        _os_log_impl(&dword_25B2C1000, v57, v58, v63, v59, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v60, -1, -1);
        MEMORY[0x2611621B0](v59, -1, -1);
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    sub_25B319990((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v33 = v75 + v73;
    uint64_t v32 = v76 - 1;
    if (v76 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  char v43 = sub_25B3801A0();
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v74;
  uint64_t v56 = (uint64_t)v68;
  sub_25B3198C0((uint64_t)v74, (uint64_t)v68, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v57 = sub_25B37F760();
  os_log_type_t v58 = sub_25B37FCB0();
  if (os_log_type_enabled(v57, v58))
  {
    unint64_t v59 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    v78[0] = v60;
    *(_DWORD *)unint64_t v59 = 136446210;
    uint64_t v64 = ReplicatorRecord.ID.description.getter();
    uint64_t v79 = sub_25B2CA048(v64, v65, v78);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    sub_25B319990(v56, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v63 = "Client ID mismatch: %{public}s";
    goto LABEL_26;
  }
LABEL_27:
  sub_25B319990(v56, type metadata accessor for ReplicatorRecord.ID);
LABEL_28:

  sub_25B2DCCD4();
  swift_allocError();
  *(unsigned char *)uint64_t v66 = 0;
  *(void *)(v66 + 8) = 0;
  swift_willThrow();
  sub_25B319990((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_25B2F0150()
{
  return sub_25B37FD10();
}

void ReplicatorClient.records(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  int v69 = a4;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v68 = (uint64_t)&v66 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v66 - v14);
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_25B37F780();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain_n();
  uint64_t v72 = v17;
  os_log_type_t v18 = sub_25B37F760();
  os_log_type_t v19 = sub_25B37FCD0();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v67 = v11;
  uint64_t v73 = a1;
  if (v20)
  {
    uint64_t v76 = v5;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v77 = v8;
    uint64_t v23 = v22;
    v79[0] = v22;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v74 = v21 + 4;
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = MEMORY[0x261161220](v24, v7);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v80 = sub_25B2CA048(v25, v27, v79);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v76;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v18, v19, "Fetching full records for IDs: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v28 = v23;
    uint64_t v8 = v77;
    MEMORY[0x2611621B0](v28, -1, -1);
    MEMORY[0x2611621B0](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v29 = *(void *)(v5 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 20));
  uint64_t v30 = v78;
  sub_25B2E7F24((unsigned char *)(v29 + 16), v79);
  if (v30)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 20));
    __break(1u);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 20));
  char v31 = v79[0];
  swift_release();
  if ((v31 & 1) == 0)
  {
    char v51 = sub_25B37F760();
    os_log_type_t v52 = sub_25B37FCB0();
    if (os_log_type_enabled(v51, v52))
    {
      os_log_type_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v53 = 0;
      _os_log_impl(&dword_25B2C1000, v51, v52, "Client is not registered", v53, 2u);
      MEMORY[0x2611621B0](v53, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v54 = 2;
    *(void *)(v54 + 8) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v32 = v73;
  uint64_t v33 = *(void *)(v73 + 16);
  if (!v33)
  {
LABEL_18:
    sub_25B2F1174(v32, v70, v71, v69 & 1, &qword_26A4EB850);
    return;
  }
  uint64_t v34 = v73 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v74 = *(uint8_t **)(v8 + 72);
  swift_bridgeObjectRetain();
  uint64_t v75 = v15;
  uint64_t v76 = v5;
  while (1)
  {
    uint64_t v77 = v34;
    uint64_t v78 = v33;
    uint64_t v35 = sub_25B3198C0(v34, (uint64_t)v15, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v36 = v15[4];
    uint64_t v37 = v15[5];
    uint64_t v38 = *(os_unfair_lock_s **)(v5 + 80);
    MEMORY[0x270FA5388](v35);
    *(&v66 - 2) = (uint64_t)sub_25B2E441C;
    *(&v66 - 1) = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v38 + 4);
    sub_25B319EEC(v39);
    os_unfair_lock_unlock(v38 + 4);
    swift_release();
    uint64_t v41 = v79[0];
    uint64_t v40 = v79[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36 != v41 || v37 != v40) {
      break;
    }
    uint64_t v42 = swift_bridgeObjectRelease_n();
    uint64_t v15 = v75;
    uint64_t v5 = v76;
LABEL_14:
    uint64_t v44 = *(os_unfair_lock_s **)(v5 + 80);
    MEMORY[0x270FA5388](v42);
    *(&v66 - 2) = (uint64_t)sub_25B2E441C;
    *(&v66 - 1) = v5;
    swift_retain();
    os_unfair_lock_lock(v44 + 4);
    sub_25B319EEC(v45);
    os_unfair_lock_unlock(v44 + 4);
    swift_release();
    uint64_t v46 = v79[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v46 + 16)
      || (uint64_t v48 = v15[2],
          uint64_t v47 = v15[3],
          swift_bridgeObjectRetain(),
          sub_25B2D5EB0(v48, v47),
          char v50 = v49,
          swift_bridgeObjectRelease(),
          (v50 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v55 = v68;
      sub_25B3198C0((uint64_t)v15, v68, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v56 = sub_25B37F760();
      os_log_type_t v57 = sub_25B37FCB0();
      if (os_log_type_enabled(v56, v57))
      {
        os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        v79[0] = v59;
        *(_DWORD *)os_log_type_t v58 = 136446210;
        uint64_t v60 = ReplicatorRecord.ID.description.getter();
        uint64_t v80 = sub_25B2CA048(v60, v61, v79);
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        sub_25B319990(v55, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v62 = "Zone does not exist: %{public}s";
LABEL_26:
        _os_log_impl(&dword_25B2C1000, v56, v57, v62, v58, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v59, -1, -1);
        MEMORY[0x2611621B0](v58, -1, -1);
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    sub_25B319990((uint64_t)v15, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v34 = (uint64_t)&v74[v77];
    uint64_t v33 = v78 - 1;
    if (v78 == 1)
    {
      uint64_t v32 = v73;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  char v43 = sub_25B3801A0();
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_bridgeObjectRelease();
  uint64_t v15 = v75;
  uint64_t v5 = v76;
  if (v43) {
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = (uint64_t)v67;
  sub_25B3198C0((uint64_t)v15, (uint64_t)v67, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v56 = sub_25B37F760();
  os_log_type_t v57 = sub_25B37FCB0();
  if (os_log_type_enabled(v56, v57))
  {
    os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    v79[0] = v59;
    *(_DWORD *)os_log_type_t v58 = 136446210;
    uint64_t v63 = ReplicatorRecord.ID.description.getter();
    uint64_t v80 = sub_25B2CA048(v63, v64, v79);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    sub_25B319990(v55, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v62 = "Client ID mismatch: %{public}s";
    goto LABEL_26;
  }
LABEL_27:
  sub_25B319990(v55, type metadata accessor for ReplicatorRecord.ID);
LABEL_28:

  sub_25B2DCCD4();
  swift_allocError();
  *(unsigned char *)uint64_t v65 = 0;
  *(void *)(v65 + 8) = 0;
  swift_willThrow();
  sub_25B319990((uint64_t)v15, type metadata accessor for ReplicatorRecord.ID);
}

void ReplicatorClient.recordVersions()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_25B2E7F24((unsigned char *)(v3 + 16), &v14);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
    char v4 = v14;
    uint64_t v5 = swift_release();
    if (v4)
    {
      uint64_t v6 = *(os_unfair_lock_s **)(v2 + 80);
      MEMORY[0x270FA5388](v5);
      swift_retain();
      os_unfair_lock_lock(v6 + 4);
      sub_25B319EEC(v7);
      os_unfair_lock_unlock(v6 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340EB0);
      sub_25B37FD10();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_25B37F780();
      __swift_project_value_buffer(v9, (uint64_t)qword_26B3417A8);
      uint64_t v10 = sub_25B37F760();
      os_log_type_t v11 = sub_25B37FCB0();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_25B2C1000, v10, v11, "Client is not registered", v12, 2u);
        MEMORY[0x2611621B0](v12, -1, -1);
      }

      sub_25B2DCCD4();
      swift_allocError();
      *(unsigned char *)uint64_t v13 = 2;
      *(void *)(v13 + 8) = 0;
      swift_willThrow();
    }
  }
}

void ReplicatorClient.urls(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = *(void *)(v4 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 20));
  sub_25B2E7F24((unsigned char *)(v9 + 16), &v32);
  if (v5)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    char v10 = v32;
    swift_release();
    if (v10)
    {
      uint64_t v11 = a4 & 1;
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_25B37F780();
      __swift_project_value_buffer(v12, (uint64_t)qword_26B3417A8);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = sub_25B37F760();
      os_log_type_t v14 = sub_25B37FCD0();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v30 = a3;
        unsigned int v29 = a4 & 1;
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v32 = v28;
        *(_DWORD *)uint64_t v15 = 136446210;
        uint64_t v16 = type metadata accessor for ReplicatorRecord.ID(0);
        uint64_t v17 = swift_bridgeObjectRetain();
        uint64_t v18 = MEMORY[0x261161220](v17, v16);
        unint64_t v20 = v19;
        swift_bridgeObjectRelease();
        uint64_t v21 = v18;
        a3 = v30;
        sub_25B2CA048(v21, v20, &v32);
        sub_25B37FD70();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25B2C1000, v13, v14, "Fetching files for IDs: %{public}s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v28, -1, -1);
        uint64_t v22 = v15;
        uint64_t v11 = v29;
        MEMORY[0x2611621B0](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_25B2F1174(a1, a2, a3, v11, &qword_26A4EBCB0);
    }
    else
    {
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_25B37F780();
      __swift_project_value_buffer(v23, (uint64_t)qword_26B3417A8);
      uint64_t v24 = sub_25B37F760();
      os_log_type_t v25 = sub_25B37FCB0();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v26 = 0;
        _os_log_impl(&dword_25B2C1000, v24, v25, "Client is not registered", v26, 2u);
        MEMORY[0x2611621B0](v26, -1, -1);
      }

      sub_25B2DCCD4();
      swift_allocError();
      *(unsigned char *)uint64_t v27 = 2;
      *(void *)(v27 + 8) = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_25B2F1174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = sub_25B37FD10();
  if (!v5) {
    return v8;
  }
  return result;
}

uint64_t sub_25B2F122C(uint64_t a1, uint64_t a2)
{
  return sub_25B2F5E58(a1, a2, &qword_26B341210, &qword_26B3411B0);
}

uint64_t sub_25B2F1254(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341210);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *v2;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411B0);
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F580], v5);
  return sub_25B37FC20();
}

uint64_t sub_25B2F1384(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  return ReplicatorClient.add(records:destination:schedule:)(a1, a2, a3);
}

void sub_25B2F13A8(Swift::OpaquePointer a1, ReplicatorServices::ReplicatorSchedule a2)
{
}

void sub_25B2F13CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_25B2F13F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_25B2F141C()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.sync()()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_25B37F780();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
  sub_25B2E7F24((unsigned char *)(v7 + 16), v35);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
    __break(1u);
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)v4);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
    char v8 = v35[0];
    swift_release();
    if (v8)
    {
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v9 = __swift_project_value_buffer(v3, (uint64_t)qword_26B3417A8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
      swift_retain_n();
      char v10 = sub_25B37F760();
      int v11 = sub_25B37FCD0();
      if (os_log_type_enabled(v10, (os_log_type_t)v11))
      {
        int v32 = v11;
        os_log_t v33 = v10;
        uint64_t v34 = v4;
        uint64_t v12 = (_DWORD *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v31 = v13;
        uint64_t v36 = v13;
        *uint64_t v12 = 136315138;
        os_log_type_t v14 = *(os_unfair_lock_s **)(v2 + 80);
        MEMORY[0x270FA5388](v13);
        *(&v27 - 2) = (uint64_t)sub_25B2E441C;
        *(&v27 - 1) = v2;
        swift_retain();
        os_unfair_lock_lock(v14 + 4);
        sub_25B319EEC(v15);
        uint64_t v30 = v12 + 1;
        os_unfair_lock_unlock(v14 + 4);
        swift_release();
        unint64_t v16 = v35[1];
        uint64_t v28 = (uint8_t *)v12;
        uint64_t v29 = v35[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v17 = sub_25B2CA048(v29, v16, &v36);
        uint64_t v18 = v28;
        v35[0] = v17;
        sub_25B37FD70();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_t v19 = v33;
        _os_log_impl(&dword_25B2C1000, v33, (os_log_type_t)v32, "Client %s requesting sync", v18, 0xCu);
        uint64_t v20 = v31;
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v20, -1, -1);
        MEMORY[0x2611621B0](v18, -1, -1);

        uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v6, v3);
      }
      else
      {

        swift_release_n();
        uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      MEMORY[0x270FA5388](v21);
      *(&v27 - 2) = v26;
      sub_25B37FD10();
    }
    else
    {
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v3, (uint64_t)qword_26B3417A8);
      uint64_t v22 = sub_25B37F760();
      os_log_type_t v23 = sub_25B37FCB0();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl(&dword_25B2C1000, v22, v23, "Client is not registered", v24, 2u);
        MEMORY[0x2611621B0](v24, -1, -1);
      }

      sub_25B2DCCD4();
      swift_allocError();
      *(unsigned char *)uint64_t v25 = 2;
      *(void *)(v25 + 8) = 0;
      swift_willThrow();
    }
  }
}

void sub_25B2F1938()
{
}

uint64_t sub_25B2F195C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 96);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB308();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *uint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F1A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v85 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v88 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v92 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v81 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  int64_t v91 = (char *)&v81 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  int64_t v90 = (int64_t)&v81 - v21;
  MEMORY[0x270FA5388](v20);
  os_log_type_t v23 = (char *)&v81 - v22;
  uint64_t v24 = a2;
  uint64_t v26 = v25;
  uint64_t v96 = sub_25B3149EC(v24, a3);
  uint64_t v27 = *(void *)(a4 + 64);
  uint64_t v82 = a4 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  int v32 = (void *)(v9 + 48);
  int64_t v83 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v84 = a4;
  int64_t v81 = v83 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v89 = 0;
  uint64_t v87 = v26;
  uint64_t v93 = (void *)(v9 + 48);
  uint64_t v94 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (!v30) {
    goto LABEL_8;
  }
LABEL_6:
  *(void *)&long long v95 = (v30 - 1) & v30;
  unint64_t v35 = __clz(__rbit64(v30)) | (v89 << 6);
LABEL_7:
  uint64_t v36 = v84;
  uint64_t v37 = *(void *)(v84 + 48);
  uint64_t v38 = sub_25B37F640();
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v16, v37 + *(void *)(*(void *)(v38 - 8) + 72) * v35, v38);
  uint64_t v39 = *(int *)(v8 + 48);
  long long v97 = *(_OWORD *)(*(void *)(v36 + 56) + 16 * v35);
  *(_OWORD *)&v16[v39] = v97;
  uint64_t v40 = *v31;
  (*v31)(v16, 0, 1, v8);
  swift_retain();
  while (1)
  {
    uint64_t v44 = (uint64_t)v23;
    uint64_t v45 = 1;
    *(void *)&long long v97 = *v32;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v97)(v16, 1, v8) != 1)
    {
      uint64_t v46 = *(int *)(v8 + 48);
      uint64_t v47 = sub_25B37F640();
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v86 = v40;
      char v49 = *(void (**)(void))(v48 + 32);
      ((void (*)(char *, char *, uint64_t))v49)(v88, v16, v47);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = *(_OWORD *)&v16[v46];
      char v51 = (uint64_t (**)(uint64_t))(v90 + *(int *)(v8 + 48));
      v49();
      uint64_t v45 = 0;
      *char v51 = sub_25B319E84;
      v51[1] = (uint64_t (*)(uint64_t))v50;
      int v32 = v93;
      uint64_t v31 = v94;
      uint64_t v40 = v86;
      uint64_t v26 = v87;
    }
    uint64_t v52 = v90;
    v40((char *)v90, v45, 1, v8);
    uint64_t v53 = v52;
    os_log_type_t v23 = (char *)v44;
    sub_25B2E31F0(v53, v44, (uint64_t *)&unk_26B340F90);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v97)(v44, 1, v8) == 1) {
      break;
    }
    (*(void (**)(uint64_t))(v44 + *(int *)(v8 + 48)))(v96);
    swift_release();
    uint64_t v34 = sub_25B37F640();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v44, v34);
    unint64_t v30 = v95;
    if ((void)v95) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v41 = v89 + 1;
    if (__OFADD__(v89, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v41 < v83)
    {
      unint64_t v42 = *(void *)(v82 + 8 * v41);
      if (v42) {
        goto LABEL_11;
      }
      int64_t v43 = v89 + 2;
      ++v89;
      if (v41 + 1 < v83)
      {
        unint64_t v42 = *(void *)(v82 + 8 * v43);
        if (v42) {
          goto LABEL_14;
        }
        int64_t v89 = v41 + 1;
        if (v41 + 2 < v83)
        {
          unint64_t v42 = *(void *)(v82 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2;
            goto LABEL_11;
          }
          int64_t v43 = v41 + 3;
          int64_t v89 = v41 + 2;
          if (v41 + 3 < v83)
          {
            unint64_t v42 = *(void *)(v82 + 8 * v43);
            if (v42)
            {
LABEL_14:
              int64_t v41 = v43;
LABEL_11:
              *(void *)&long long v95 = (v42 - 1) & v42;
              unint64_t v35 = __clz(__rbit64(v42)) + (v41 << 6);
              int64_t v89 = v41;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v41 = v43 + 1;
              if (__OFADD__(v43, 1)) {
                goto LABEL_61;
              }
              if (v41 >= v83) {
                break;
              }
              unint64_t v42 = *(void *)(v82 + 8 * v41);
              ++v43;
              if (v42) {
                goto LABEL_11;
              }
            }
            int64_t v89 = v81;
          }
        }
      }
    }
    uint64_t v40 = *v31;
    (*v31)(v16, 1, 1, v8);
    *(void *)&long long v95 = 0;
  }
  uint64_t v54 = v40;
  swift_release();
  uint64_t v55 = *(void *)(v85 + 64);
  int64_t v89 = v85 + 64;
  uint64_t v56 = 1 << *(unsigned char *)(v85 + 32);
  uint64_t v57 = -1;
  if (v56 < 64) {
    uint64_t v57 = ~(-1 << v56);
  }
  unint64_t v58 = v57 & v55;
  int64_t v59 = (unint64_t)(v56 + 63) >> 6;
  uint64_t v86 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v59 - 1);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v90 = 0;
  uint64_t v61 = (uint64_t)v91;
  uint64_t v60 = v92;
  if (!v58) {
    goto LABEL_36;
  }
LABEL_34:
  unint64_t v63 = __clz(__rbit64(v58));
  v58 &= v58 - 1;
  unint64_t v64 = v63 | (v90 << 6);
  while (2)
  {
    uint64_t v65 = v85;
    uint64_t v66 = *(void *)(v85 + 48);
    uint64_t v67 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v60, v66 + *(void *)(*(void *)(v67 - 8) + 72) * v64, v67);
    uint64_t v68 = *(int *)(v8 + 48);
    long long v95 = *(_OWORD *)(*(void *)(v65 + 56) + 16 * v64);
    *(_OWORD *)&v60[v68] = v95;
    v54(v60, 0, 1, v8);
    swift_retain();
    while (1)
    {
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v97)(v60, 1, v8) == 1)
      {
        uint64_t v72 = v61;
        uint64_t v73 = 1;
      }
      else
      {
        uint64_t v74 = *(int *)(v8 + 48);
        uint64_t v75 = sub_25B37F640();
        uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32);
        uint64_t v77 = v88;
        v76(v88, v92, v75);
        uint64_t v78 = swift_allocObject();
        uint64_t v79 = v91;
        *(_OWORD *)(v78 + 16) = *(_OWORD *)&v92[v74];
        uint64_t v80 = (uint64_t (**)(uint64_t))&v79[*(int *)(v8 + 48)];
        v76(v91, v77, v75);
        uint64_t v60 = v92;
        uint64_t v61 = (uint64_t)v91;
        os_unfair_lock_s *v80 = sub_25B3193C4;
        v80[1] = (uint64_t (*)(uint64_t))v78;
        uint64_t v26 = v87;
        uint64_t v72 = v61;
        uint64_t v73 = 0;
      }
      v54((char *)v72, v73, 1, v8);
      sub_25B2E31F0(v61, v26, (uint64_t *)&unk_26B340F90);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v97)(v26, 1, v8) == 1)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      (*(void (**)(uint64_t))(v26 + *(int *)(v8 + 48)))(v96);
      swift_release();
      uint64_t v62 = sub_25B37F640();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v26, v62);
      if (v58) {
        goto LABEL_34;
      }
LABEL_36:
      int64_t v69 = v90 + 1;
      if (__OFADD__(v90, 1)) {
        goto LABEL_60;
      }
      if (v69 < v59)
      {
        unint64_t v70 = *(void *)(v89 + 8 * v69);
        if (v70) {
          goto LABEL_39;
        }
        int64_t v71 = v90 + 2;
        ++v90;
        if (v69 + 1 < v59)
        {
          unint64_t v70 = *(void *)(v89 + 8 * v71);
          if (v70) {
            goto LABEL_42;
          }
          int64_t v90 = v69 + 1;
          if (v69 + 2 < v59)
          {
            unint64_t v70 = *(void *)(v89 + 8 * (v69 + 2));
            if (v70)
            {
              v69 += 2;
              goto LABEL_39;
            }
            int64_t v71 = v69 + 3;
            int64_t v90 = v69 + 2;
            if (v69 + 3 < v59) {
              break;
            }
          }
        }
      }
LABEL_53:
      v54(v60, 1, 1, v8);
      unint64_t v58 = 0;
    }
    unint64_t v70 = *(void *)(v89 + 8 * v71);
    if (v70)
    {
LABEL_42:
      int64_t v69 = v71;
LABEL_39:
      unint64_t v58 = (v70 - 1) & v70;
      unint64_t v64 = __clz(__rbit64(v70)) + (v69 << 6);
      int64_t v90 = v69;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v69 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      break;
    }
    if (v69 >= v59)
    {
      int64_t v90 = (int64_t)v86;
      goto LABEL_53;
    }
    unint64_t v70 = *(void *)(v89 + 8 * v69);
    ++v71;
    if (v70) {
      goto LABEL_39;
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_25B2F23CC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_25B3103B4(isUniquelyReferenced_nonNull_native, v23, 1, v3, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for ReplicatorRecordChange() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B2F25AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t), uint64_t a5)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v8 = type metadata accessor for ReplicatorRecordVersion();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ReplicatorRecordChange();
  uint64_t v14 = MEMORY[0x270FA5388](v42);
  uint64_t v41 = (uint64_t)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v40 = (uint64_t)v37 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)v37 - v19;
  MEMORY[0x270FA5388](v18);
  int64_t v23 = (char *)v37 - v22;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    v37[2] = a5;
    uint64_t v38 = a4;
    unint64_t v39 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v25 = a1 + v39;
    uint64_t v26 = *(void *)(v21 + 72);
    v37[1] = a1;
    swift_bridgeObjectRetain();
    unint64_t v27 = MEMORY[0x263F8EE78];
    do
    {
      sub_25B3198C0(v25, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
      sub_25B3198C0((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_25B319928((uint64_t)v20, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        BOOL v30 = *((void *)v13 + 2) == v43 && *((void *)v13 + 3) == v44;
        if (v30 || (sub_25B3801A0() & 1) != 0)
        {
          sub_25B3198C0((uint64_t)v23, v40, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v27 = sub_25B3103B4(0, *(void *)(v27 + 16) + 1, 1, v27, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          }
          unint64_t v32 = *(void *)(v27 + 16);
          unint64_t v31 = *(void *)(v27 + 24);
          if (v32 >= v31 >> 1) {
            unint64_t v27 = sub_25B3103B4(v31 > 1, v32 + 1, 1, v27, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          }
          *(void *)(v27 + 16) = v32 + 1;
          sub_25B319928(v40, v27 + v39 + v32 * v26, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
        }
        sub_25B319990((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
        uint64_t v28 = type metadata accessor for ReplicatorRecord.ID;
        uint64_t v29 = (uint64_t)v13;
      }
      else
      {
        sub_25B319928((uint64_t)v20, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
        BOOL v33 = *((void *)v10 + 2) == v43 && *((void *)v10 + 3) == v44;
        if (v33 || (sub_25B3801A0() & 1) != 0)
        {
          sub_25B3198C0((uint64_t)v23, v41, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v27 = sub_25B3103B4(0, *(void *)(v27 + 16) + 1, 1, v27, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          }
          unint64_t v35 = *(void *)(v27 + 16);
          unint64_t v34 = *(void *)(v27 + 24);
          if (v35 >= v34 >> 1) {
            unint64_t v27 = sub_25B3103B4(v34 > 1, v35 + 1, 1, v27, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
          }
          *(void *)(v27 + 16) = v35 + 1;
          sub_25B319928(v41, v27 + v39 + v35 * v26, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
        }
        sub_25B319990((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
        uint64_t v28 = (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion;
        uint64_t v29 = (uint64_t)v10;
      }
      sub_25B319990(v29, v28);
      v25 += v26;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v38(v27);
  }
  else
  {
    a4(MEMORY[0x263F8EE78]);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2F2B34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 104);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB308();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *unint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F2C6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 112);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB2FC();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *unint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F2DA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 120);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB2FC();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *unint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F2EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v41 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  int64_t v44 = (unint64_t)(v18 + 63) >> 6;
  int64_t v42 = v44 - 1;
  uint64_t v50 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v51 = 0;
  uint64_t v45 = v16;
  uint64_t v46 = a2;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v54 = (v20 - 1) & v20;
  unint64_t v23 = __clz(__rbit64(v20)) | (v51 << 6);
  while (2)
  {
    uint64_t v24 = v50;
    uint64_t v25 = *(void *)(v50 + 48);
    uint64_t v26 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v12, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v26);
    uint64_t v27 = *(int *)(v6 + 48);
    long long v53 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v12[v27] = v53;
    uint64_t v28 = *v56;
    (*v56)(v12, 0, 1, v6);
    swift_retain();
    while (1)
    {
      unint64_t v32 = *v55;
      uint64_t v33 = 1;
      if ((*v55)(v12, 1, v6) != 1)
      {
        unint64_t v34 = v12;
        uint64_t v35 = *(int *)(v6 + 48);
        uint64_t v36 = sub_25B37F640();
        uint64_t v37 = *(void (**)(void))(*(void *)(v36 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v37)(v47, v34, v36);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = *(_OWORD *)&v34[v35];
        unint64_t v39 = &v52[*(int *)(v6 + 48)];
        v37();
        uint64_t v33 = 0;
        *(void *)unint64_t v39 = v49;
        *((void *)v39 + 1) = v38;
        uint64_t v12 = v34;
        uint64_t v16 = v45;
        a2 = v46;
      }
      uint64_t v40 = (uint64_t)v52;
      v28(v52, v33, 1, v6);
      sub_25B2E31F0(v40, (uint64_t)v16, (uint64_t *)&unk_26B340F90);
      if (v32(v16, 1, v6) == 1) {
        return swift_release();
      }
      (*(void (**)(uint64_t))&v16[*(int *)(v6 + 48)])(a2);
      swift_release();
      uint64_t v22 = sub_25B37F640();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v16, v22);
      unint64_t v20 = v54;
      if (v54) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v29 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v44)
      {
        unint64_t v30 = *(void *)(v43 + 8 * v29);
        if (v30) {
          goto LABEL_11;
        }
        int64_t v31 = v51 + 2;
        ++v51;
        if (v29 + 1 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * v31);
          if (v30) {
            goto LABEL_14;
          }
          int64_t v51 = v29 + 1;
          if (v29 + 2 < v44)
          {
            unint64_t v30 = *(void *)(v43 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            int64_t v31 = v29 + 3;
            int64_t v51 = v29 + 2;
            if (v29 + 3 < v44) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v28 = *v56;
      (*v56)(v12, 1, 1, v6);
      uint64_t v54 = 0;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v31);
    if (v30)
    {
LABEL_14:
      int64_t v29 = v31;
LABEL_11:
      uint64_t v54 = (v30 - 1) & v30;
      unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
      int64_t v51 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v44)
    {
      int64_t v51 = v42;
      goto LABEL_25;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_11;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_25B2F33F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 128);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB2F0();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *unint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F352C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 88);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B2D606C(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B2DB314();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v7 = *(void *)(*(void *)(v13 + 56) + 16 * v4);
    sub_25B350C40(v4, v13);
    *unint64_t v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_25B319830(v7);
}

uint64_t sub_25B2F3664(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v41 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  unint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  int64_t v42 = v44 - 1;
  uint64_t v48 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int64_t v51 = 0;
  unsigned int v49 = a2 & 1;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v46 = v14;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v54 = (v18 - 1) & v18;
  unint64_t v23 = __clz(__rbit64(v18)) | (v51 << 6);
  while (2)
  {
    uint64_t v24 = v48;
    uint64_t v25 = *(void *)(v48 + 48);
    uint64_t v26 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v10, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v26);
    uint64_t v27 = *(int *)(v4 + 48);
    long long v53 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v10[v27] = v53;
    uint64_t v28 = *v19;
    (*v19)(v10, 0, 1, v4);
    swift_retain();
    while (1)
    {
      unint64_t v32 = *v20;
      uint64_t v33 = 1;
      if ((*v20)(v10, 1, v4) != 1)
      {
        uint64_t v34 = *(int *)(v4 + 48);
        uint64_t v35 = sub_25B37F640();
        uint64_t v36 = *(void (**)(void))(*(void *)(v35 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v36)(v47, v10, v35);
        uint64_t v37 = v10;
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = *(_OWORD *)&v37[v34];
        unint64_t v39 = (uint64_t (**)(char))&v52[*(int *)(v4 + 48)];
        uint64_t v14 = v46;
        v36();
        uint64_t v19 = v45;
        uint64_t v33 = 0;
        *unint64_t v39 = sub_25B3191A8;
        v39[1] = (uint64_t (*)(char))v38;
        uint64_t v10 = v37;
      }
      uint64_t v40 = (uint64_t)v52;
      v28(v52, v33, 1, v4);
      sub_25B2E31F0(v40, (uint64_t)v14, (uint64_t *)&unk_26B340F90);
      unint64_t v20 = v50;
      if (v32(v14, 1, v4) == 1) {
        return swift_release();
      }
      (*(void (**)(void))&v14[*(int *)(v4 + 48)])(v49);
      swift_release();
      uint64_t v22 = sub_25B37F640();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v14, v22);
      unint64_t v18 = v54;
      if (v54) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v29 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v44)
      {
        unint64_t v30 = *(void *)(v43 + 8 * v29);
        if (v30) {
          goto LABEL_11;
        }
        int64_t v31 = v51 + 2;
        ++v51;
        if (v29 + 1 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * v31);
          if (v30) {
            goto LABEL_14;
          }
          int64_t v51 = v29 + 1;
          if (v29 + 2 < v44)
          {
            unint64_t v30 = *(void *)(v43 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            int64_t v31 = v29 + 3;
            int64_t v51 = v29 + 2;
            if (v29 + 3 < v44) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v28 = *v19;
      (*v19)(v10, 1, 1, v4);
      uint64_t v54 = 0;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v31);
    if (v30)
    {
LABEL_14:
      int64_t v29 = v31;
LABEL_11:
      uint64_t v54 = (v30 - 1) & v30;
      unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
      int64_t v51 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v44)
    {
      int64_t v51 = v42;
      goto LABEL_25;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_11;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_25B2F3B80()
{
  return sub_25B37FD10();
}

__n128 sub_25B2F3BFC@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = (*v1)[2];
  *a1 = result;
  return result;
}

uint64_t sub_25B2F3C0C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  return v1;
}

uint64_t sub_25B2F3C88(uint64_t a1, uint64_t a2)
{
  return sub_25B2F5E58(a1, a2, &qword_26B340B30, (uint64_t *)&unk_26B3416E0);
}

uint64_t sub_25B2F3CB0(uint64_t a1, uint64_t a2)
{
  return sub_25B2F5E58(a1, a2, &qword_26B340B30, (uint64_t *)&unk_26B3416E0);
}

void ReplicatorClient.send(message:)(uint64_t a1)
{
  unint64_t v3 = v1;
  uint64_t v72 = type metadata accessor for ReplicatorMessage();
  uint64_t v5 = MEMORY[0x270FA5388](v72);
  uint64_t v73 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  int64_t v71 = (char *)&v62 - v8;
  MEMORY[0x270FA5388](v7);
  unint64_t v70 = (char *)&v62 - v9;
  uint64_t v10 = sub_25B37F780();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = (os_unfair_lock_s *)v1[8].isa;
  swift_retain();
  os_unfair_lock_lock(isa + 5);
  sub_25B2E7F24(&isa[4], &v75);
  if (v2)
  {
    os_unfair_lock_unlock(isa + 5);
    __break(1u);
    goto LABEL_26;
  }
  os_unfair_lock_unlock(isa + 5);
  char v14 = v75;
  uint64_t v15 = swift_release();
  if ((v14 & 1) == 0)
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v10, (uint64_t)qword_26B3417A8);
    unint64_t v30 = sub_25B37F760();
    os_log_type_t v31 = sub_25B37FCB0();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl(&dword_25B2C1000, v30, v31, "Client is not registered", v32, 2u);
      MEMORY[0x2611621B0](v32, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v33 = 2;
    goto LABEL_11;
  }
  uint64_t v67 = v11;
  uint64_t v68 = v10;
  uint64_t v16 = *(int *)(v72 + 20);
  uint64_t v66 = a1;
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  unint64_t v20 = (os_unfair_lock_s *)v3[10].isa;
  MEMORY[0x270FA5388](v15);
  *(&v62 - 2) = (os_log_t)sub_25B2E441C;
  *(&v62 - 1) = v3;
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  sub_25B319EEC(v21);
  uint64_t v69 = 0;
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  uint64_t v23 = v75;
  unint64_t v22 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 != v23 || v18 != v22)
  {
    char v34 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    uint64_t v25 = v67;
    uint64_t v24 = v68;
    uint64_t v27 = (uint64_t)v73;
    uint64_t v26 = v74;
    uint64_t v29 = (uint64_t)v70;
    uint64_t v28 = (uint64_t)v71;
    if (v34) {
      goto LABEL_13;
    }
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v24, (uint64_t)qword_26B3417A8);
    int64_t v59 = sub_25B37F760();
    os_log_type_t v60 = sub_25B37FCB0();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_25B2C1000, v59, v60, "Wrong client ID", v61, 2u);
      MEMORY[0x2611621B0](v61, -1, -1);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v33 = 0;
LABEL_11:
    *(void *)(v33 + 8) = 0;
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = v67;
  uint64_t v24 = v68;
  uint64_t v27 = (uint64_t)v73;
  uint64_t v26 = v74;
  uint64_t v29 = (uint64_t)v70;
  uint64_t v28 = (uint64_t)v71;
LABEL_13:
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v35 = __swift_project_value_buffer(v24, (uint64_t)qword_26B3417A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, v35, v24);
  uint64_t v36 = v66;
  sub_25B3198C0(v66, v29, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  sub_25B3198C0(v36, v28, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  sub_25B3198C0(v36, v27, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  swift_retain_n();
  uint64_t v37 = v3;
  uint64_t v38 = sub_25B37F760();
  int v64 = sub_25B37FCD0();
  BOOL v39 = os_log_type_enabled(v38, (os_log_type_t)v64);
  uint64_t v65 = v37;
  if (!v39)
  {
    swift_release_n();
    sub_25B319990(v29, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    sub_25B319990(v28, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    sub_25B319990(v27, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
    goto LABEL_19;
  }
  os_log_t v62 = v38;
  uint64_t v40 = swift_slowAlloc();
  uint64_t v41 = swift_slowAlloc();
  uint64_t v63 = v41;
  uint64_t v77 = v41;
  *(_DWORD *)uint64_t v40 = 136446978;
  int64_t v42 = (os_unfair_lock_s *)v37[10].isa;
  MEMORY[0x270FA5388](v41);
  *(&v62 - 2) = (os_log_t)sub_25B2E441C;
  *(&v62 - 1) = v37;
  isa = v42 + 4;
  swift_retain();
  os_unfair_lock_lock(v42 + 4);
  uint64_t v43 = v69;
  sub_25B319EEC(v44);
  uint64_t v69 = v43;
  if (!v43)
  {
    os_unfair_lock_unlock(v42 + 4);
    swift_release();
    uint64_t v45 = v75;
    unint64_t v46 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = sub_25B2CA048(v45, v46, &v77);
    sub_25B37FD70();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2082;
    sub_25B37F640();
    sub_25B3193FC((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
    uint64_t v47 = (uint64_t)v70;
    uint64_t v48 = sub_25B380190();
    uint64_t v75 = sub_25B2CA048(v48, v49, &v77);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    sub_25B319990(v47, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    *(_WORD *)(v40 + 22) = 2082;
    uint64_t v50 = (uint64_t)v71;
    int64_t v51 = (uint64_t *)&v71[*(int *)(v72 + 28)];
    uint64_t v52 = *v51;
    unint64_t v53 = v51[1];
    swift_bridgeObjectRetain();
    uint64_t v75 = sub_25B2CA048(v52, v53, &v77);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    sub_25B319990(v50, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    *(_WORD *)(v40 + 32) = 2082;
    uint64_t v54 = (uint64_t)v73;
    uint64_t v55 = sub_25B380190();
    uint64_t v75 = sub_25B2CA048(v55, v56, &v77);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    sub_25B319990(v54, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    os_log_t v57 = v62;
    _os_log_impl(&dword_25B2C1000, v62, (os_log_type_t)v64, "Client %{public}s sending fire-and-forget message %{public}s of type %{public}s to %{public}s", (uint8_t *)v40, 0x2Au);
    uint64_t v58 = v63;
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v58, -1, -1);
    MEMORY[0x2611621B0](v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v74, v68);
    uint64_t v36 = v66;
LABEL_19:
    sub_25B2F4624(v36);
    return;
  }
LABEL_26:
  swift_release();
  os_unfair_lock_unlock(isa);
  __break(1u);
}

uint64_t sub_25B2F4624(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReplicatorMessage();
  unint64_t v3 = (uint64_t *)(a1 + *(int *)(v2 + 36));
  uint64_t v4 = *v3;
  switch((unint64_t)v3[1] >> 62)
  {
    case 1uLL:
      BOOL v5 = __OFSUB__(HIDWORD(v4), v4);
      LODWORD(v4) = HIDWORD(v4) - v4;
      if (v5)
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x25B2F4760);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 <= 102400)
      {
LABEL_7:
        MEMORY[0x270FA5388](v2);
        return sub_25B37FD10();
      }
      else
      {
        sub_25B2DCCD4();
        swift_allocError();
        *(unsigned char *)uint64_t v9 = 1;
        *(void *)(v9 + 8) = 0;
        return swift_willThrow();
      }
    case 2uLL:
      uint64_t v8 = v4 + 16;
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      BOOL v5 = __OFSUB__(v7, v6);
      uint64_t v4 = v7 - v6;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      goto LABEL_7;
  }
}

void ReplicatorClient.sendExpectingResponse(message:timeout:retries:completion:)(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, double a5)
{
  uint64_t v98 = a1;
  uint64_t v11 = sub_25B37F830();
  os_log_t v91 = *(os_log_t *)(v11 - 8);
  uint64_t v92 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v88 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25B37F860();
  uint64_t v89 = *(void *)(v13 - 8);
  uint64_t v90 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v87 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ReplicatorMessage();
  uint64_t v15 = MEMORY[0x270FA5388](v95);
  uint64_t v85 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v94 = (char *)&v81 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v93 = (char *)&v81 - v19;
  uint64_t v86 = sub_25B37F780();
  uint64_t v97 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v96 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v5;
  uint64_t v22 = v5[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 20));
  sub_25B2E7F24((unsigned char *)(v22 + 16), &aBlock);
  if (v6)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 20));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 20));
    char v23 = aBlock;
    uint64_t v24 = swift_release();
    if ((v23 & 1) == 0)
    {
      uint64_t v36 = (void *)v5[9];
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = a3;
      *(void *)(v37 + 24) = a4;
      uint64_t v103 = sub_25B316054;
      uint64_t v104 = v37;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v100 = 1107296256;
      uint64_t v101 = sub_25B2E423C;
      os_log_type_t v102 = &block_descriptor_0;
      uint64_t v38 = _Block_copy(&aBlock);
      swift_retain();
      id v39 = v36;
      uint64_t v40 = v87;
      sub_25B37F840();
      v105[0] = MEMORY[0x263F8EE78];
      sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
      sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
      uint64_t v41 = v88;
      uint64_t v42 = v92;
      sub_25B37FDC0();
      MEMORY[0x261161440](0, v40, v41, v38);
      _Block_release(v38);

      ((void (*)(char *, uint64_t))v91[1].isa)(v41, v42);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v90);
LABEL_15:
      swift_release();
      return;
    }
    uint64_t v81 = a2;
    uint64_t v82 = a3;
    uint64_t v83 = a4;
    uint64_t v25 = (uint64_t *)(v98 + *(int *)(v95 + 20));
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = (os_unfair_lock_s *)v5[10];
    MEMORY[0x270FA5388](v24);
    *(&v81 - 2) = (uint64_t)sub_25B2E441C;
    *(&v81 - 1) = (uint64_t)v5;
    swift_retain();
    os_unfair_lock_lock(v28 + 4);
    sub_25B319EEC(v29);
    uint64_t v84 = 0;
    os_unfair_lock_unlock(v28 + 4);
    swift_release();
    uint64_t v31 = aBlock;
    uint64_t v30 = v100;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v26 == v31 && v27 == v30)
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = v96;
      uint64_t v32 = v97;
      uint64_t v34 = (uint64_t)v93;
      uint64_t v35 = (uint64_t)v94;
    }
    else
    {
      char v43 = sub_25B3801A0();
      swift_bridgeObjectRelease();
      uint64_t v44 = v83;
      uint64_t v33 = v96;
      uint64_t v32 = v97;
      uint64_t v34 = (uint64_t)v93;
      uint64_t v35 = (uint64_t)v94;
      if ((v43 & 1) == 0)
      {
        uint64_t v74 = (void *)v21[9];
        uint64_t v75 = swift_allocObject();
        *(void *)(v75 + 16) = v82;
        *(void *)(v75 + 24) = v44;
        uint64_t v103 = sub_25B316074;
        uint64_t v104 = v75;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v100 = 1107296256;
        uint64_t v101 = sub_25B2E423C;
        os_log_type_t v102 = &block_descriptor_49;
        unint64_t v76 = _Block_copy(&aBlock);
        swift_retain();
        id v77 = v74;
        uint64_t v78 = v87;
        sub_25B37F840();
        v105[0] = MEMORY[0x263F8EE78];
        sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
        sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
        uint64_t v79 = v88;
        uint64_t v80 = v92;
        sub_25B37FDC0();
        MEMORY[0x261161440](0, v78, v79, v76);
        _Block_release(v76);

        ((void (*)(char *, uint64_t))v91[1].isa)(v79, v80);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v90);
        swift_release();
        return;
      }
    }
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v45 = v86;
    uint64_t v46 = __swift_project_value_buffer(v86, (uint64_t)qword_26B3417A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v46, v45);
    uint64_t v47 = v98;
    sub_25B3198C0(v98, v34, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    sub_25B3198C0(v47, v35, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    uint64_t v48 = v85;
    sub_25B3198C0(v47, v85, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    swift_retain_n();
    unint64_t v49 = sub_25B37F760();
    int v50 = sub_25B37FCD0();
    if (!os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      swift_release_n();
      sub_25B319990(v34, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      sub_25B319990(v35, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      sub_25B319990(v48, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v45);
      uint64_t v72 = v81;
      uint64_t v70 = v83;
      int64_t v71 = v82;
      goto LABEL_14;
    }
    LODWORD(v90) = v50;
    os_log_t v91 = v49;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v89 = v52;
    v105[0] = v52;
    *(_DWORD *)uint64_t v51 = 136446978;
    unint64_t v53 = (os_unfair_lock_s *)v21[10];
    MEMORY[0x270FA5388](v52);
    *(&v81 - 2) = (uint64_t)sub_25B2E441C;
    *(&v81 - 1) = (uint64_t)v21;
    a3 = v53 + 4;
    swift_retain();
    os_unfair_lock_lock(v53 + 4);
    uint64_t v54 = v84;
    sub_25B319EEC(v55);
    uint64_t v84 = v54;
    uint64_t v92 = (uint64_t)v21;
    if (!v54)
    {
      os_unfair_lock_unlock(v53 + 4);
      swift_release();
      uint64_t v56 = aBlock;
      unint64_t v57 = v100;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t aBlock = sub_25B2CA048(v56, v57, v105);
      sub_25B37FD70();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 12) = 2082;
      sub_25B37F640();
      sub_25B3193FC((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
      uint64_t v58 = (uint64_t)v93;
      uint64_t v59 = sub_25B380190();
      uint64_t aBlock = sub_25B2CA048(v59, v60, v105);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      sub_25B319990(v58, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      *(_WORD *)(v51 + 22) = 2082;
      uint64_t v61 = (uint64_t)v94;
      os_log_t v62 = (uint64_t *)&v94[*(int *)(v95 + 28)];
      uint64_t v64 = *v62;
      unint64_t v63 = v62[1];
      swift_bridgeObjectRetain();
      uint64_t aBlock = sub_25B2CA048(v64, v63, v105);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      sub_25B319990(v61, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      *(_WORD *)(v51 + 32) = 2082;
      uint64_t v65 = v85;
      uint64_t v66 = sub_25B380190();
      uint64_t aBlock = sub_25B2CA048(v66, v67, v105);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      sub_25B319990(v65, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      os_log_t v68 = v91;
      _os_log_impl(&dword_25B2C1000, v91, (os_log_type_t)v90, "Client %{public}s sending message %{public}s of type %{public}s to %{public}s", (uint8_t *)v51, 0x2Au);
      uint64_t v69 = v89;
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v69, -1, -1);
      MEMORY[0x2611621B0](v51, -1, -1);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v86);
      uint64_t v70 = v83;
      int64_t v71 = v82;
      uint64_t v72 = v81;
      uint64_t v21 = (void *)v92;
LABEL_14:
      uint64_t v73 = (void *)swift_allocObject();
      v73[2] = v21;
      v73[3] = v71;
      v73[4] = v70;
      swift_retain();
      swift_retain();
      sub_25B2F5AEC(v98, v72, (uint64_t)sub_25B3160BC, (uint64_t)v73, a5);
      goto LABEL_15;
    }
  }
  swift_release();
  os_unfair_lock_unlock(a3);
  __break(1u);
}

uint64_t sub_25B2F5430(void (*a1)(uint64_t *))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25B37F780();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B3417A8);
  uint64_t v6 = sub_25B37F760();
  os_log_type_t v7 = sub_25B37FCB0();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_25B2C1000, v6, v7, "Client is not registered", v8, 2u);
    MEMORY[0x2611621B0](v8, -1, -1);
  }

  sub_25B2DCCD4();
  uint64_t v9 = swift_allocError();
  *(unsigned char *)uint64_t v10 = 2;
  *(void *)(v10 + 8) = 0;
  *uint64_t v4 = v9;
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_25B2E344C((uint64_t)v4, &qword_26A4EBC38);
}

uint64_t sub_25B2F55D0(void (*a1)(uint64_t *))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25B37F780();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B3417A8);
  uint64_t v6 = sub_25B37F760();
  os_log_type_t v7 = sub_25B37FCB0();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_25B2C1000, v6, v7, "Wrong client ID", v8, 2u);
    MEMORY[0x2611621B0](v8, -1, -1);
  }

  sub_25B2DCCD4();
  uint64_t v9 = swift_allocError();
  *(unsigned char *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  *uint64_t v4 = v9;
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_25B2E344C((uint64_t)v4, &qword_26A4EBC38);
}

uint64_t sub_25B2F576C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v7 = sub_25B37F830();
  uint64_t v27 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25B37F860();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void **)(a2 + 72);
  sub_25B2E2FE0(a1, (uint64_t)v16, &qword_26A4EBC38);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v24;
  *(void *)(v19 + 24) = a4;
  sub_25B2E31F0((uint64_t)v16, v19 + v18, &qword_26A4EBC38);
  aBlock[4] = sub_25B318A2C;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_178;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v17;
  swift_retain();
  sub_25B37F840();
  uint64_t v28 = MEMORY[0x263F8EE78];
  sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v12, v9, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v26);
  return swift_release();
}

uint64_t sub_25B2F5AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7 = v5;
  uint64_t v40 = a4;
  uint64_t v12 = type metadata accessor for ReplicatorMessage();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t *)(a1 + *(int *)(MEMORY[0x270FA5388](v12 - 8) + 44));
  uint64_t v17 = *v16;
  switch((unint64_t)v16[1] >> 62)
  {
    case 1uLL:
      BOOL v18 = __OFSUB__(HIDWORD(v17), v17);
      LODWORD(v17) = HIDWORD(v17) - v17;
      if (v18) {
        goto LABEL_9;
      }
      uint64_t v17 = (int)v17;
LABEL_5:
      if (v17 <= 102400)
      {
LABEL_7:
        dispatch_queue_t v38 = *(dispatch_queue_t *)&v5[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
        sub_25B3198C0(a1, (uint64_t)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
        unint64_t v24 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        unint64_t v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v36 = a3;
        uint64_t v37 = a2;
        unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v39 = v6;
        unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v28 = v40;
        uint64_t v29 = swift_allocObject();
        sub_25B319928((uint64_t)v15, v29 + v24, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
        *(double *)(v29 + v25) = a5;
        uint64_t v30 = v36;
        *(void *)(v29 + v26) = v37;
        *(void *)(v29 + v27) = v7;
        uint64_t v31 = (void *)(v29 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v31 = v30;
        v31[1] = v28;
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = sub_25B31841C;
        *(void *)(v32 + 24) = v29;
        aBlock[4] = sub_25B3184E0;
        aBlock[5] = v32;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_25B37B5C4;
        aBlock[3] = &block_descriptor_142;
        uint64_t v33 = _Block_copy(aBlock);
        id v34 = v7;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v38, v33);
        _Block_release(v33);
        LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if (v33)
        {
          __break(1u);
LABEL_9:
          __break(1u);
LABEL_10:
          __break(1u);
          JUMPOUT(0x25B2F5E20);
        }
      }
      else
      {
        sub_25B2DCCD4();
        swift_allocError();
        *(unsigned char *)uint64_t v22 = 1;
        *(void *)(v22 + 8) = 0;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v21 = v17 + 16;
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t v20 = *(void *)(v21 + 8);
      BOOL v18 = __OFSUB__(v20, v19);
      uint64_t v17 = v20 - v19;
      if (!v18) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_25B2F5E30(uint64_t a1, uint64_t a2)
{
  return sub_25B2F5E58(a1, a2, &qword_26A4EB318, (uint64_t *)&unk_26B3416F0);
}

uint64_t sub_25B2F5E58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F580], v5);
  return sub_25B37FC20();
}

void sub_25B2F5F64(uint64_t a1)
{
}

void sub_25B2F5F88(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, double a5)
{
}

void ReplicatorClient.encode<A>(_:messageType:relationshipID:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v83 = a7;
  uint64_t v85 = a5;
  unint64_t v90 = a3;
  uint64_t v93 = a2;
  uint64_t v84 = a1;
  uint64_t v10 = sub_25B37F640();
  uint64_t v95 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v94 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v86 = (uint64_t)v82 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB5F0);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v87 = (uint64_t)v82 - v22;
  uint64_t v91 = v7;
  uint64_t v97 = *(void *)(v7 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v96 = v8;
  uint64_t v23 = *(void *)(v98[0] + 16);
  if (v23)
  {
    uint64_t v92 = v10;
    uint64_t v24 = v98[0] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v25 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25B3198C0(v24, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
      if (sub_25B37F610()) {
        break;
      }
      sub_25B319990((uint64_t)v16, type metadata accessor for ReplicatorDevice);
      v24 += v25;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    sub_25B319928((uint64_t)v16, v87, type metadata accessor for ReplicatorDevice);
    uint64_t v26 = 0;
LABEL_8:
    uint64_t v10 = v92;
  }
  else
  {
    uint64_t v26 = 1;
  }
  uint64_t v27 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v87, v26, 1, v12);
  swift_bridgeObjectRelease();
  sub_25B2E2FE0(v27, (uint64_t)v21, &qword_26A4EB5F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    sub_25B2E344C((uint64_t)v21, &qword_26A4EB5F0);
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_25B37F780();
    __swift_project_value_buffer(v28, (uint64_t)qword_26B3417A8);
    uint64_t v29 = v94;
    uint64_t v30 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, a4, v10);
    uint64_t v31 = sub_25B37F760();
    os_log_type_t v32 = sub_25B37FCB0();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v98[0] = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      uint64_t v96 = v33 + 4;
      sub_25B3193FC((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
      uint64_t v35 = sub_25B380190();
      uint64_t v99 = sub_25B2CA048(v35, v36, v98);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v10);
      _os_log_impl(&dword_25B2C1000, v31, v32, "Relationship does not exist: %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v34, -1, -1);
      MEMORY[0x2611621B0](v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v10);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v69 = 0;
    *(void *)(v69 + 8) = 0;
    swift_willThrow();
    goto LABEL_50;
  }
  uint64_t v37 = v86;
  sub_25B319928((uint64_t)v21, v86, type metadata accessor for ReplicatorDevice);
  uint64_t v38 = *(void *)(v37 + *(int *)(v12 + 44));
  uint64_t v39 = *(char **)(v38 + 16);
  if (!v39)
  {
LABEL_34:
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_25B37F780();
    __swift_project_value_buffer(v70, (uint64_t)qword_26B3417A8);
    unint64_t v71 = v90;
    swift_bridgeObjectRetain_n();
    uint64_t v72 = sub_25B37F760();
    os_log_type_t v73 = sub_25B37FCB0();
    if (!os_log_type_enabled(v72, v73)) {
      goto LABEL_48;
    }
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v98[0] = v75;
    *(_DWORD *)uint64_t v74 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v99 = sub_25B2CA048(v93, v71, v98);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    unint64_t v76 = "Message type does not exist remotely: %{public}s";
LABEL_43:
    _os_log_impl(&dword_25B2C1000, v72, v73, v76, v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v75, -1, -1);
    MEMORY[0x2611621B0](v74, -1, -1);

    goto LABEL_49;
  }
  swift_bridgeObjectRetain_n();
  v82[1] = v38;
  uint64_t v40 = (unint64_t *)(v38 + 72);
  while (1)
  {
    uint64_t v94 = v39;
    uint64_t v41 = *(v40 - 4);
    uint64_t v92 = *(v40 - 5);
    uint64_t v43 = *(v40 - 3);
    uint64_t v42 = *(v40 - 2);
    unint64_t v89 = *(v40 - 1);
    unint64_t v88 = *v40;
    uint64_t v44 = *(os_unfair_lock_s **)(v91 + 80);
    uint64_t v45 = MEMORY[0x270FA5388](v41);
    v82[-2] = sub_25B2E441C;
    v82[-1] = v46;
    uint64_t v95 = v45;
    swift_bridgeObjectRetain();
    uint64_t v47 = v42;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v44 + 4);
    uint64_t v48 = v96;
    sub_25B319EEC(v49);
    uint64_t v96 = v48;
    int v50 = v44 + 4;
    if (v48)
    {
      os_unfair_lock_unlock(v50);
      __break(1u);
      goto LABEL_52;
    }
    os_unfair_lock_unlock(v50);
    swift_release();
    uint64_t v52 = v98[0];
    uint64_t v51 = v98[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43 == v52 && v47 == v51) {
      break;
    }
    char v54 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    uint64_t v53 = v95;
    if (v54) {
      goto LABEL_23;
    }
LABEL_17:
    v40 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v94 - 1;
    if (v94 == (char *)1)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v53 = v95;
LABEL_23:
  if ((v92 != v93 || v53 != v90) && (sub_25B3801A0() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v55 = swift_bridgeObjectRelease_n();
  uint64_t v56 = *(os_unfair_lock_s **)(v91 + 80);
  MEMORY[0x270FA5388](v55);
  v82[-2] = sub_25B2E441C;
  v82[-1] = v57;
  uint64_t v44 = v56 + 4;
  swift_retain();
  os_unfair_lock_lock(v56 + 4);
  uint64_t v58 = v96;
  sub_25B319EEC(v59);
  if (v58)
  {
LABEL_52:
    os_unfair_lock_unlock(v44);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v56 + 4);
  swift_release();
  uint64_t v60 = v98[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v60 + 16)) {
    goto LABEL_39;
  }
  uint64_t v61 = v90;
  swift_bridgeObjectRetain();
  unint64_t v62 = sub_25B2D5EB0(v93, v61);
  if ((v63 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v77 = sub_25B37F780();
    __swift_project_value_buffer(v77, (uint64_t)qword_26B3417A8);
    unint64_t v78 = v90;
    swift_bridgeObjectRetain_n();
    uint64_t v72 = sub_25B37F760();
    os_log_type_t v73 = sub_25B37FCB0();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v98[0] = v75;
      *(_DWORD *)uint64_t v74 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v99 = sub_25B2CA048(v93, v78, v98);
      sub_25B37FD70();
      swift_bridgeObjectRelease_n();
      unint64_t v76 = "Message type does not exist locally: %{public}s";
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  uint64_t v64 = *(void *)(v60 + 56) + 32 * v62;
  unint64_t v65 = *(void *)(v64 + 16);
  unint64_t v66 = *(void *)(v64 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v89 >= v66 && v65 >= v88)
  {
    sub_25B37F6B0();
    uint64_t v67 = v85;
    v98[3] = v85;
    v98[4] = v83;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v98);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(boxed_opaque_existential_2, v84, v67);
    sub_25B37F6A0();
    sub_25B319990(v86, type metadata accessor for ReplicatorDevice);
    sub_25B2E344C(v87, &qword_26A4EB5F0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    return;
  }
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v79 = sub_25B37F780();
  __swift_project_value_buffer(v79, (uint64_t)qword_26B3417A8);
  unint64_t v80 = v90;
  swift_bridgeObjectRetain_n();
  uint64_t v72 = sub_25B37F760();
  os_log_type_t v73 = sub_25B37FCB0();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v98[0] = v75;
    *(_DWORD *)uint64_t v74 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v99 = sub_25B2CA048(v93, v80, v98);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    unint64_t v76 = "Protocol version is incompatible: %{public}s";
    goto LABEL_43;
  }
LABEL_48:

  swift_bridgeObjectRelease_n();
LABEL_49:
  sub_25B2DCCD4();
  swift_allocError();
  *(unsigned char *)uint64_t v81 = 0;
  *(void *)(v81 + 8) = 0;
  swift_willThrow();
  sub_25B319990(v86, type metadata accessor for ReplicatorDevice);
LABEL_50:
  sub_25B2E344C(v87, &qword_26A4EB5F0);
}

uint64_t sub_25B2F6D90@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v30 = a3;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
  uint64_t v29 = *(void *)(v35 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v35);
  uint64_t v33 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v31 = a2 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v32 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v36 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v15 = v36;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = *(void *)(v15 + 48);
    unint64_t v22 = *(void *)(*(void *)(type metadata accessor for ReplicatorRecord.ID(0) - 8) + 72) * i;
    sub_25B3198C0(v21 + v22, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(*(void *)(v15 + 56) + v22, (uint64_t)&v8[*(int *)(v35 + 48)], type metadata accessor for ReplicatorRecord.ID);
    uint64_t v23 = v33;
    sub_25B2E31F0((uint64_t)v8, v33, (uint64_t *)&unk_26B3413A0);
    char v24 = v34(v23);
    if (v3)
    {
      sub_25B2E344C(v23, (uint64_t *)&unk_26B3413A0);
      return swift_release();
    }
    if (v24)
    {
      swift_release();
      uint64_t v25 = v30;
      sub_25B2E31F0(v23, v30, (uint64_t *)&unk_26B3413A0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v35);
    }
    uint64_t result = sub_25B2E344C(v23, (uint64_t *)&unk_26B3413A0);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v32) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v14);
    if (!v19) {
      break;
    }
LABEL_17:
    unint64_t v12 = (v19 - 1) & v19;
  }
  int64_t v20 = v14 + 1;
  if (v14 + 1 >= v32) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v14 + 2;
  if (v14 + 2 >= v32) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v14 + 3;
  if (v14 + 3 >= v32) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v14 + 4;
  if (v14 + 4 >= v32)
  {
LABEL_28:
    uint64_t v27 = v29;
    uint64_t v26 = v30;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v35);
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
LABEL_16:
    int64_t v14 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v32) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25B2F7110@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  uint64_t v6 = &a2[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  int64_t v8 = 0;
  int64_t v26 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_21:
    int64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 80 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[3];
    uint64_t v18 = v14[5];
    uint64_t v28 = v14[4];
    uint64_t v29 = v14[2];
    uint64_t v19 = v14[7];
    uint64_t v27 = v14[6];
    uint64_t v21 = v14[8];
    uint64_t v20 = v14[9];
    if (*v14 != *((void *)v6 + 4) || v16 != *((void *)v6 + 5))
    {
      uint64_t result = sub_25B3801A0();
      if ((result & 1) == 0) {
        continue;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    uint64_t result = swift_release();
    *a3 = v15;
    a3[1] = v16;
    a3[2] = v29;
    a3[3] = v17;
    a3[4] = v28;
    a3[5] = v18;
    a3[6] = v27;
    a3[7] = v19;
    a3[8] = v21;
    a3[9] = v20;
    return result;
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v26) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_20;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v26) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v8);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v8);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v26) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v8);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v26)
  {
LABEL_27:

    uint64_t result = swift_release();
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v13);
  int64_t v8 = v13;
  if (v12)
  {
LABEL_20:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v26) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ReplicatorClient.decode<A>(_:from:version:)()
{
  return sub_25B37F690();
}

uint64_t sub_25B2F7428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_25B2F8298(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))ReplicatorClient.encode<A>(_:messageType:relationshipID:));
}

uint64_t sub_25B2F7460()
{
  return ReplicatorClient.decode<A>(_:from:version:)();
}

void ReplicatorClient.encode<A>(_:zone:relationshipID:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v83 = a7;
  uint64_t v85 = a5;
  unint64_t v90 = a3;
  uint64_t v93 = a2;
  uint64_t v84 = a1;
  uint64_t v10 = sub_25B37F640();
  uint64_t v95 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v94 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v86 = (uint64_t)v82 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB5F0);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v87 = (uint64_t)v82 - v22;
  uint64_t v91 = v7;
  uint64_t v97 = *(void *)(v7 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v96 = v8;
  uint64_t v23 = *(void *)(v98[0] + 16);
  if (v23)
  {
    uint64_t v92 = v10;
    uint64_t v24 = v98[0] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v25 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_25B3198C0(v24, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
      if (sub_25B37F610()) {
        break;
      }
      sub_25B319990((uint64_t)v16, type metadata accessor for ReplicatorDevice);
      v24 += v25;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    sub_25B319928((uint64_t)v16, v87, type metadata accessor for ReplicatorDevice);
    uint64_t v26 = 0;
LABEL_8:
    uint64_t v10 = v92;
  }
  else
  {
    uint64_t v26 = 1;
  }
  uint64_t v27 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v87, v26, 1, v12);
  swift_bridgeObjectRelease();
  sub_25B2E2FE0(v27, (uint64_t)v21, &qword_26A4EB5F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    sub_25B2E344C((uint64_t)v21, &qword_26A4EB5F0);
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_25B37F780();
    __swift_project_value_buffer(v28, (uint64_t)qword_26B3417A8);
    uint64_t v29 = v94;
    uint64_t v30 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, a4, v10);
    uint64_t v31 = sub_25B37F760();
    os_log_type_t v32 = sub_25B37FCB0();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v98[0] = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      uint64_t v96 = v33 + 4;
      sub_25B3193FC((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
      uint64_t v35 = sub_25B380190();
      uint64_t v99 = sub_25B2CA048(v35, v36, v98);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v10);
      _os_log_impl(&dword_25B2C1000, v31, v32, "Relationship does not exist: %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v34, -1, -1);
      MEMORY[0x2611621B0](v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v10);
    }

    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v69 = 0;
    *(void *)(v69 + 8) = 0;
    swift_willThrow();
    goto LABEL_50;
  }
  uint64_t v37 = v86;
  sub_25B319928((uint64_t)v21, v86, type metadata accessor for ReplicatorDevice);
  uint64_t v38 = *(void *)(v37 + *(int *)(v12 + 40));
  uint64_t v39 = *(char **)(v38 + 16);
  if (!v39)
  {
LABEL_34:
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_25B37F780();
    __swift_project_value_buffer(v70, (uint64_t)qword_26B3417A8);
    unint64_t v71 = v90;
    swift_bridgeObjectRetain_n();
    uint64_t v72 = sub_25B37F760();
    os_log_type_t v73 = sub_25B37FCB0();
    if (!os_log_type_enabled(v72, v73)) {
      goto LABEL_48;
    }
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v98[0] = v75;
    *(_DWORD *)uint64_t v74 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v99 = sub_25B2CA048(v93, v71, v98);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    unint64_t v76 = "Zone does not exist remotely: %{public}s";
LABEL_43:
    _os_log_impl(&dword_25B2C1000, v72, v73, v76, v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v75, -1, -1);
    MEMORY[0x2611621B0](v74, -1, -1);

    goto LABEL_49;
  }
  swift_bridgeObjectRetain_n();
  v82[1] = v38;
  uint64_t v40 = (unint64_t *)(v38 + 72);
  while (1)
  {
    uint64_t v94 = v39;
    uint64_t v41 = *(v40 - 4);
    uint64_t v92 = *(v40 - 5);
    uint64_t v43 = *(v40 - 3);
    uint64_t v42 = *(v40 - 2);
    unint64_t v89 = *(v40 - 1);
    unint64_t v88 = *v40;
    uint64_t v44 = *(os_unfair_lock_s **)(v91 + 80);
    uint64_t v45 = MEMORY[0x270FA5388](v41);
    v82[-2] = sub_25B2E441C;
    v82[-1] = v46;
    uint64_t v95 = v45;
    swift_bridgeObjectRetain();
    uint64_t v47 = v42;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v44 + 4);
    uint64_t v48 = v96;
    sub_25B319EEC(v49);
    uint64_t v96 = v48;
    int v50 = v44 + 4;
    if (v48)
    {
      os_unfair_lock_unlock(v50);
      __break(1u);
      goto LABEL_52;
    }
    os_unfair_lock_unlock(v50);
    swift_release();
    uint64_t v52 = v98[0];
    uint64_t v51 = v98[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43 == v52 && v47 == v51) {
      break;
    }
    char v54 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    uint64_t v53 = v95;
    if (v54) {
      goto LABEL_23;
    }
LABEL_17:
    v40 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v94 - 1;
    if (v94 == (char *)1)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v53 = v95;
LABEL_23:
  if ((v92 != v93 || v53 != v90) && (sub_25B3801A0() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v55 = swift_bridgeObjectRelease_n();
  uint64_t v56 = *(os_unfair_lock_s **)(v91 + 80);
  MEMORY[0x270FA5388](v55);
  v82[-2] = sub_25B2E441C;
  v82[-1] = v57;
  uint64_t v44 = v56 + 4;
  swift_retain();
  os_unfair_lock_lock(v56 + 4);
  uint64_t v58 = v96;
  sub_25B319EEC(v59);
  if (v58)
  {
LABEL_52:
    os_unfair_lock_unlock(v44);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v56 + 4);
  swift_release();
  uint64_t v60 = v98[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v60 + 16)) {
    goto LABEL_39;
  }
  uint64_t v61 = v90;
  swift_bridgeObjectRetain();
  unint64_t v62 = sub_25B2D5EB0(v93, v61);
  if ((v63 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v77 = sub_25B37F780();
    __swift_project_value_buffer(v77, (uint64_t)qword_26B3417A8);
    unint64_t v78 = v90;
    swift_bridgeObjectRetain_n();
    uint64_t v72 = sub_25B37F760();
    os_log_type_t v73 = sub_25B37FCB0();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v98[0] = v75;
      *(_DWORD *)uint64_t v74 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v99 = sub_25B2CA048(v93, v78, v98);
      sub_25B37FD70();
      swift_bridgeObjectRelease_n();
      unint64_t v76 = "Zone does not exist locally: %{public}s";
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  uint64_t v64 = *(void *)(v60 + 56) + 48 * v62;
  unint64_t v65 = *(void *)(v64 + 24);
  unint64_t v66 = *(void *)(v64 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v89 >= v66 && v65 >= v88)
  {
    sub_25B37F6B0();
    uint64_t v67 = v85;
    v98[3] = v85;
    v98[4] = v83;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v98);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(boxed_opaque_existential_2, v84, v67);
    sub_25B37F6A0();
    sub_25B319990(v86, type metadata accessor for ReplicatorDevice);
    sub_25B2E344C(v87, &qword_26A4EB5F0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    return;
  }
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v79 = sub_25B37F780();
  __swift_project_value_buffer(v79, (uint64_t)qword_26B3417A8);
  unint64_t v80 = v90;
  swift_bridgeObjectRetain_n();
  uint64_t v72 = sub_25B37F760();
  os_log_type_t v73 = sub_25B37FCB0();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v98[0] = v75;
    *(_DWORD *)uint64_t v74 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v99 = sub_25B2CA048(v93, v80, v98);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    unint64_t v76 = "Protocol version is incompatible: %{public}s";
    goto LABEL_43;
  }
LABEL_48:

  swift_bridgeObjectRelease_n();
LABEL_49:
  sub_25B2DCCD4();
  swift_allocError();
  *(unsigned char *)uint64_t v81 = 0;
  *(void *)(v81 + 8) = 0;
  swift_willThrow();
  sub_25B319990(v86, type metadata accessor for ReplicatorDevice);
LABEL_50:
  sub_25B2E344C(v87, &qword_26A4EB5F0);
}

uint64_t sub_25B2F8260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_25B2F8298(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))ReplicatorClient.encode<A>(_:zone:relationshipID:));
}

uint64_t sub_25B2F8298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t result = a10();
  if (v10) {
    return v12;
  }
  return result;
}

uint64_t ReplicatorClient.encode<A>(_:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25B316938(a1, a2, a3, a4, a5);
}

uint64_t sub_25B2F82EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25B316938(a1, a2, a3, a4, a5);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.clientDescriptor(id:)(ReplicatorServices::ClientDescriptor_optional *__return_ptr retstr, Swift::String id)
{
  sub_25B37FD10();
  if (!v2)
  {
    retstr->value.id = v4;
    retstr->value.entitlement = v5;
    retstr->value.messageNotificationName = v6;
    retstr->value.recordNotificationName._countAndFlagsBits = v7;
    *(_OWORD *)&retstr->value.recordNotificationName._object = v8;
    retstr->value.messageDescriptors._rawValue = v9;
  }
}

id sub_25B2F8398()
{
  id result = objc_msgSend(objc_allocWithZone((Class)_s18ReplicatorServices9SingletonCMa_0()), sel_init);
  qword_26B341138 = (uint64_t)result;
  return result;
}

uint64_t sub_25B2F83CC()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___recordVersionPublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__recordVersionPublisher, &qword_26B341190, &qword_26B340EA8);
}

uint64_t sub_25B2F83F0()
{
  uint64_t v1 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B341188);
    sub_25B319318(&qword_26B341180, &qword_26B341188);
    uint64_t v2 = sub_25B37F800();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_25B2F84B4()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___devicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__devicePublisher, &qword_26B3411A0, &qword_26B341198);
}

uint64_t sub_25B2F84D8(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v4 + *a1);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v10 = v4;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    sub_25B319318(a4, a3);
    uint64_t v7 = sub_25B37F800();
    *(void *)(v10 + v5) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_25B2F8598()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___pairedDevicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__pairedDevicePublisher, &qword_26B3411A0, &qword_26B341198);
}

uint64_t sub_25B2F85BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices) & 1) == 0)
  {
    sub_25B2F861C();
    sub_25B2F8914();
  }
  *a2 = *(void *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices);
  return swift_bridgeObjectRetain();
}

void sub_25B2F861C()
{
  uint64_t v1 = v0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  uint64_t v7 = v6;
  uint64_t v8 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken;
  if (*(_DWORD *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken) != -1)
    return;
  int out_token = -1;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_25B319444;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B344CCC;
  aBlock[3] = &block_descriptor_255;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  uint64_t v11 = sub_25B37F9F0();
  uint32_t v12 = notify_register_dispatch((const char *)(v11 + 32), &out_token, v7, v10);
  swift_release();
  _Block_release(v10);
  if (v12)
  {
    if (qword_26B3417C0 == -1)
    {
LABEL_5:
      uint64_t v13 = sub_25B37F780();
      __swift_project_value_buffer(v13, (uint64_t)qword_26B3417A8);
      uint64_t v14 = sub_25B37F760();
      os_log_type_t v15 = sub_25B37FCB0();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_25B2C1000, v14, v15, "Could not register for device change notifications", v16, 2u);
        MEMORY[0x2611621B0](v16, -1, -1);
      }

      goto LABEL_8;
    }
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
LABEL_8:
  *(_DWORD *)(v1 + v8) = out_token;
}

void sub_25B2F8914()
{
  v102[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v93 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v89 - v4;
  uint64_t v98 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v100 = *(void *)(v98 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v98);
  uint64_t v95 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v97 = (uint64_t)&v89 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v96 = (char *)&v89 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v99 = (char *)&v89 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v89 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v89 - v17;
  uint64_t v19 = sub_25B37F8A0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (uint64_t *)((char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x263F8F0E0], v19);
  id v24 = v23;
  unint64_t v25 = sub_25B37F8B0();
  uint64_t v27 = *(void (**)(void *, uint64_t))(v20 + 8);
  uint64_t v26 = v20 + 8;
  v27(v22, v19);
  if ((v25 & 1) == 0) {
    goto LABEL_57;
  }
  id v92 = (id)sub_25B2FB590();
  if (!v92)
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_25B37F780();
    __swift_project_value_buffer(v41, (uint64_t)qword_26B3417A8);
    uint64_t v42 = sub_25B37F760();
    os_log_type_t v43 = sub_25B37FCB0();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_25B2C1000, v42, v43, "Could not fetch devices because target could not be created", v44, 2u);
      MEMORY[0x2611621B0](v44, -1, -1);
    }

    return;
  }
  uint64_t v89 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices) = 0;
  uint64_t v90 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices;
  uint64_t v91 = v0;
  uint64_t v28 = *(void *)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices);
  id v29 = (id)MEMORY[0x263F8EE78];
  v102[0] = (id)MEMORY[0x263F8EE78];
  unint64_t v25 = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  if (!v25)
  {
    id v40 = v29;
    uint64_t v31 = v98;
LABEL_25:
    swift_bridgeObjectRelease();
    unint64_t v25 = sub_25B342F64((uint64_t)v40);
    swift_release();
    v102[0] = 0;
    id v45 = objc_msgSend(v92, sel_devicesAndReturnError_, v102);
    id v46 = v102[0];
    if (!v45)
    {
      id v75 = v102[0];
      swift_bridgeObjectRelease();
      unint64_t v76 = (void *)sub_25B37F470();

      swift_willThrow();
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v77 = sub_25B37F780();
      __swift_project_value_buffer(v77, (uint64_t)qword_26B3417A8);
      id v78 = v76;
      id v79 = v76;
      unint64_t v80 = sub_25B37F760();
      os_log_type_t v81 = sub_25B37FCB0();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc();
        uint64_t v83 = (void *)swift_slowAlloc();
        v102[0] = v83;
        *(_DWORD *)uint64_t v82 = 136315138;
        uint64_t v101 = (uint64_t)v76;
        id v84 = v76;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
        uint64_t v85 = sub_25B37F9E0();
        uint64_t v101 = sub_25B2CA048(v85, v86, (uint64_t *)v102);
        sub_25B37FD70();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_25B2C1000, v80, v81, "Could not fetch devices: %s", v82, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v83, -1, -1);
        MEMORY[0x2611621B0](v82, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      return;
    }
    uint64_t v47 = v45;
    sub_25B37F400();
    swift_allocObject();
    sub_25B37F3F0();
    uint64_t v48 = sub_25B37F570();
    unint64_t v50 = v49;
    sub_25B3187A8();
    sub_25B37F3E0();
    sub_25B2CA2D8(v48, v50);
    swift_release();
    uint64_t v51 = (char *)v102[0];
    uint64_t v52 = (uint64_t)v93;
    if (!v102[0])
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      return;
    }
    id v53 = v46;

    uint64_t v55 = v90;
    uint64_t v54 = v91;
    *(void *)(v91 + v90) = v51;
    uint64_t v99 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v54 + v89) = 1;
    uint64_t v26 = *(void *)(v54 + v55);
    v102[0] = v29;
    uint64_t v56 = *(void *)(v26 + 16);
    swift_bridgeObjectRetain();
    uint64_t v5 = v96;
    if (!v56)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_25B342F64((uint64_t)v29);
      swift_release();
      uint64_t v5 = v99;
      if (qword_26B3417C0 != -1) {
        goto LABEL_58;
      }
      goto LABEL_44;
    }
    unint64_t v94 = v25;
    unint64_t v25 = 0;
    while (1)
    {
      if (v25 >= *(void *)(v26 + 16)) {
        goto LABEL_56;
      }
      unint64_t v58 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      uint64_t v59 = *(void *)(v100 + 72);
      sub_25B3198C0(v26 + v58 + v59 * v25, (uint64_t)v5, type metadata accessor for ReplicatorDevice);
      sub_25B3198C0((uint64_t)&v5[*(int *)(v31 + 48)], v52, type metadata accessor for ReplicatorDevice.RelationshipState);
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v52, 4, v60);
      if ((v61 - 2) >= 2)
      {
        if (v61)
        {
          sub_25B319990(v52, type metadata accessor for ReplicatorDevice.RelationshipState);
          uint64_t v57 = v97;
          sub_25B3198C0((uint64_t)v5, v97, type metadata accessor for ReplicatorDevice);
          sub_25B319990(v57, type metadata accessor for ReplicatorDevice);
          goto LABEL_30;
        }
        uint64_t v62 = sub_25B37F640();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v52, v62);
      }
      uint64_t v63 = (uint64_t)v5;
      uint64_t v64 = v97;
      sub_25B3198C0(v63, v97, type metadata accessor for ReplicatorDevice);
      char v65 = *(unsigned char *)(v64 + *(int *)(v31 + 56));
      uint64_t v66 = v64;
      uint64_t v5 = v96;
      sub_25B319990(v66, type metadata accessor for ReplicatorDevice);
      if ((v65 & 1) == 0)
      {
        sub_25B319928((uint64_t)v5, v95, type metadata accessor for ReplicatorDevice);
        uint64_t v67 = v102[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_25B3109DC(0, v67[2] + 1, 1);
          uint64_t v67 = v102[0];
        }
        unint64_t v69 = v67[2];
        unint64_t v68 = v67[3];
        if (v69 >= v68 >> 1)
        {
          sub_25B3109DC(v68 > 1, v69 + 1, 1);
          uint64_t v67 = v102[0];
        }
        v67[2] = v69 + 1;
        sub_25B319928(v95, (uint64_t)v67 + v58 + v69 * v59, type metadata accessor for ReplicatorDevice);
        uint64_t v52 = (uint64_t)v93;
        uint64_t v31 = v98;
        goto LABEL_31;
      }
LABEL_30:
      sub_25B319990((uint64_t)v5, type metadata accessor for ReplicatorDevice);
LABEL_31:
      if (v56 == ++v25)
      {
        id v29 = v102[0];
        unint64_t v25 = v94;
        goto LABEL_43;
      }
    }
  }
  unint64_t v30 = 0;
  uint64_t v31 = v98;
  unint64_t v94 = v25;
  while (v30 < *(void *)(v28 + 16))
  {
    unint64_t v32 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    uint64_t v26 = *(void *)(v100 + 72);
    sub_25B3198C0(v28 + v32 + v26 * v30, (uint64_t)v18, type metadata accessor for ReplicatorDevice);
    sub_25B3198C0((uint64_t)&v18[*(int *)(v31 + 48)], (uint64_t)v5, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v5, 4, v33);
    if ((v34 - 2) >= 2)
    {
      if (v34)
      {
        sub_25B319990((uint64_t)v5, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B3198C0((uint64_t)v18, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
        sub_25B319990((uint64_t)v16, type metadata accessor for ReplicatorDevice);
        goto LABEL_6;
      }
      uint64_t v35 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v5, v35);
    }
    sub_25B3198C0((uint64_t)v18, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
    char v36 = v16[*(int *)(v31 + 56)];
    sub_25B319990((uint64_t)v16, type metadata accessor for ReplicatorDevice);
    if ((v36 & 1) == 0)
    {
      sub_25B319928((uint64_t)v18, (uint64_t)v99, type metadata accessor for ReplicatorDevice);
      uint64_t v37 = v102[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B3109DC(0, v37[2] + 1, 1);
        uint64_t v37 = v102[0];
      }
      unint64_t v39 = v37[2];
      unint64_t v38 = v37[3];
      if (v39 >= v38 >> 1)
      {
        sub_25B3109DC(v38 > 1, v39 + 1, 1);
        uint64_t v37 = v102[0];
      }
      v37[2] = v39 + 1;
      sub_25B319928((uint64_t)v99, (uint64_t)v37 + v32 + v39 * v26, type metadata accessor for ReplicatorDevice);
      uint64_t v31 = v98;
      unint64_t v25 = v94;
      goto LABEL_7;
    }
LABEL_6:
    sub_25B319990((uint64_t)v18, type metadata accessor for ReplicatorDevice);
LABEL_7:
    if (v25 == ++v30)
    {
      id v40 = v102[0];
      id v29 = (id)MEMORY[0x263F8EE78];
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  swift_once();
LABEL_44:
  uint64_t v70 = sub_25B37F780();
  __swift_project_value_buffer(v70, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain();
  unint64_t v71 = sub_25B37F760();
  os_log_type_t v72 = sub_25B37FCD0();
  if (os_log_type_enabled(v71, v72))
  {
    os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v73 = 134217984;
    uint64_t v74 = (void *)*((void *)v5 + 2);
    swift_bridgeObjectRelease();
    v102[0] = v74;
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v71, v72, "Fetched %ld devices", v73, 0xCu);
    MEMORY[0x2611621B0](v73, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v102[0] = *(id *)(v91 + v90);
  swift_bridgeObjectRetain();
  sub_25B37F7E0();
  swift_bridgeObjectRelease();
  char v87 = sub_25B33CFC0(v25, v26);
  swift_bridgeObjectRelease();
  if (v87)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v88 = (void *)sub_25B3117A4(v26);
    swift_bridgeObjectRelease();
    v102[0] = v88;
    sub_25B37F7E0();
    swift_release();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_25B2F9700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v15[-v9];
  uint64_t v11 = a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_localDeviceID;
  swift_beginAccess();
  sub_25B2E2FE0(v11, (uint64_t)v10, &qword_26B3414D0);
  uint64_t v12 = sub_25B37F640();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    sub_25B2E344C((uint64_t)v10, &qword_26B3414D0);
    sub_25B2F9920((uint64_t)v8);
    if (v2)
    {

      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
    }
    swift_beginAccess();
    sub_25B31964C((uint64_t)v8, v11, &qword_26B3414D0);
    swift_endAccess();
    return sub_25B2E2FE0(v11, a2, &qword_26B3414D0);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a2, v10, v12);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
}

uint64_t sub_25B2F9920@<X0>(uint64_t a1@<X8>)
{
  v20[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t LocalDeviceID = type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(0);
  MEMORY[0x270FA5388](LocalDeviceID - 8);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B37F8A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (id *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v11 = v10;
  LOBYTE(v10) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0) {
    __break(1u);
  }
  uint64_t v12 = (void *)sub_25B2FB590();
  if (v12)
  {
    v20[0] = 0;
    id v13 = objc_msgSend(v12, sel_localDeviceIDAndReturnError_, v20);
    id v14 = v20[0];
    if (v13)
    {
      uint64_t v15 = v13;
      sub_25B36C100((uint64_t)v13, (uint64_t)v5);
      id v16 = v14;
      swift_unknownObjectRelease();

      return sub_25B2E31F0((uint64_t)v5, a1, &qword_26B3414D0);
    }
    else
    {
      id v19 = v20[0];
      sub_25B37F470();

      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 3;
    *(void *)(v18 + 8) = 0;
    return swift_willThrow();
  }
}

id sub_25B2F9B7C()
{
  uint64_t v1 = sub_25B37FD00();
  uint64_t v22 = *(void *)(v1 - 8);
  uint64_t v23 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v21 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = sub_25B37F860();
  MEMORY[0x270FA5388](v4 - 8);
  *(void *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___recordVersionPublisher] = 0;
  uint64_t v5 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__recordVersionPublisher;
  uint64_t v6 = v0;
  unint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v25 = sub_25B36A9C4(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341190);
  swift_allocObject();
  *(void *)&v0[v5] = sub_25B37F7F0();
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher] = 0;
  uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__messagePublisher;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341188);
  swift_allocObject();
  *(void *)&v6[v8] = sub_25B37F7D0();
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___devicePublisher] = 0;
  uint64_t v9 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__devicePublisher;
  unint64_t v25 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411A0);
  swift_allocObject();
  *(void *)&v6[v9] = sub_25B37F7F0();
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___pairedDevicePublisher] = 0;
  uint64_t v10 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__pairedDevicePublisher;
  unint64_t v25 = v7;
  unint64_t v11 = v7;
  swift_allocObject();
  *(void *)&v6[v10] = sub_25B37F7F0();
  uint64_t v12 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection;
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection] = 0;
  *(_DWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_serverStartupToken] = -1;
  uint64_t v13 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue;
  sub_25B2E3070();
  sub_25B37F850();
  unint64_t v25 = v11;
  sub_25B3193FC((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B319318((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v21, *MEMORY[0x263F8F138], v23);
  *(void *)&v6[v13] = sub_25B37FD30();
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors] = MEMORY[0x263F8EE88];
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens] = MEMORY[0x263F8EE78];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens] = v14;
  *(_DWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken] = -1;
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices] = v14;
  uint64_t v15 = &v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_localDeviceID];
  uint64_t v16 = sub_25B37F640();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = MEMORY[0x263F8EE80];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions] = MEMORY[0x263F8EE80];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDefinedIDToInternalRecordID] = v17;
  v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices] = 0;
  v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions] = 0;
  v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending] = 0;
  v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending] = 0;
  v6[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending] = 0;
  uint64_t v18 = *(void **)&v6[v12];
  *(void *)&v6[v12] = 0;

  id v19 = (objc_class *)_s18ReplicatorServices9SingletonCMa_0();
  v24.receiver = v6;
  v24.super_class = v19;
  return objc_msgSendSuper2(&v24, sel_init);
}

id sub_25B2FA04C()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s18ReplicatorServices9SingletonCMa_0();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_25B2FA1C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  int v138 = a4;
  v170[12] = *(id *)MEMORY[0x263EF8340];
  uint64_t v158 = sub_25B37F5D0();
  uint64_t v150 = *(void **)(v158 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v158);
  uint64_t v162 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v163 = (char *)&v127 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v137 = (uint64_t)&v127 - v15;
  uint64_t v134 = sub_25B37F640();
  *(void *)&long long v147 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  uint64_t v136 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v135 = (uint64_t)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_25B37F500();
  int64_t v144 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v145 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
  uint64_t v24 = MEMORY[0x270FA5388](v164);
  uint64_t v154 = (void (***)(char *, uint64_t))((char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v156 = (void (***)(char *, uint64_t))((char *)&v127 - v27);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v157 = (void (***)(char *, uint64_t))((char *)&v127 - v29);
  MEMORY[0x270FA5388](v28);
  uint64_t v155 = (char *)&v127 - v30;
  uint64_t v146 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v31 = *(void *)(v146 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v146);
  uint64_t v139 = (uint64_t)&v127 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (objc_class *)((char *)&v127 - v34);
  uint64_t v140 = sub_25B2FB590();
  if (!v140)
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v50 = 3;
    *(void *)(v50 + 8) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v36 = *(void *)(a2 + 16);
  if (!v36)
  {
    uint64_t v51 = (void *)v140;
    uint64_t v52 = MEMORY[0x263F8EE78];
    char v53 = v138;
LABEL_12:
    char v54 = v53 & 1;
    uint64_t v55 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersAddRecords();
    uint64_t v56 = (char *)objc_allocWithZone(v55);
    uint64_t v57 = &v56[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
    *(void *)uint64_t v57 = a3;
    v57[8] = v54;
    *(void *)&v56[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = v52;
    v165.receiver = v56;
    v165.super_class = v55;
    swift_bridgeObjectRetain();
    id v58 = objc_msgSendSuper2(&v165, sel_init);
    v170[0] = 0;
    if (objc_msgSend(v51, sel_addRecordsWithParameters_error_, v58, v170))
    {
      id v59 = v170[0];
    }
    else
    {
      id v123 = v170[0];
      sub_25B37F470();

      swift_willThrow();
    }
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v151 = v21;
  uint64_t v152 = v22;
  uint64_t v131 = a3;
  uint64_t v149 = v5;
  uint64_t v37 = a2 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v153 = *(void *)(v31 + 72);
  unint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 6);
  unint64_t v160 = (void (**)(char *, char *, uint64_t))(v150 + 4);
  unint64_t v161 = (void (**)(char *, uint64_t))(v150 + 1);
  char v148 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))a2;
  swift_bridgeObjectRetain();
  uint64_t v132 = v37;
  uint64_t v39 = v37;
  uint64_t v133 = v36;
  uint64_t v40 = v36;
  uint64_t v41 = (int *)v146;
  Class v159 = v35;
  uint64_t v42 = v158;
  do
  {
    sub_25B3198C0(v39, (uint64_t)v35, type metadata accessor for ReplicatorRecord);
    if (ReplicatorRecord.size.getter() > 102400)
    {
      swift_bridgeObjectRelease();
      sub_25B2DCCD4();
      swift_allocError();
      *(unsigned char *)uint64_t v60 = 1;
      *(void *)(v60 + 8) = 0;
      swift_willThrow();
      swift_unknownObjectRelease();
      Class v61 = v35;
LABEL_54:
      sub_25B319990((uint64_t)v61, type metadata accessor for ReplicatorRecord);
      return;
    }
    sub_25B2E2FE0((uint64_t)v35 + v41[7], (uint64_t)v14, &qword_26B340F80);
    if ((*v38)(v14, 1, v42) == 1)
    {
      sub_25B319990((uint64_t)v35, type metadata accessor for ReplicatorRecord);
      sub_25B2E344C((uint64_t)v14, &qword_26B340F80);
    }
    else
    {
      os_log_type_t v43 = v38;
      uint64_t v44 = v163;
      id v45 = v14;
      (*v160)(v163, v14, v42);
      id v46 = v162;
      sub_25B37F5C0();
      char v47 = sub_25B37F590();
      uint64_t v48 = *v161;
      (*v161)(v46, v42);
      if (v47)
      {
        swift_bridgeObjectRelease();
        sub_25B2DCCD4();
        swift_allocError();
        *(unsigned char *)uint64_t v124 = 0;
        *(void *)(v124 + 8) = 0;
        swift_willThrow();
        swift_unknownObjectRelease();
        v48(v44, v42);
        Class v61 = v159;
        goto LABEL_54;
      }
      v48(v44, v42);
      Class v49 = v159;
      sub_25B319990((uint64_t)v159, type metadata accessor for ReplicatorRecord);
      uint64_t v41 = (int *)v146;
      uint64_t v14 = v45;
      unint64_t v38 = v43;
      uint64_t v35 = v49;
    }
    v39 += v153;
    --v40;
  }
  while (v40);
  swift_bridgeObjectRelease();
  uint64_t v62 = (void *)MEMORY[0x263F8EE78];
  uint64_t v169 = MEMORY[0x263F8EE78];
  sub_25B37FF10();
  uint64_t v63 = 0;
  char v148 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
  char v141 = (void (**)(char *, uint64_t, uint64_t))(v144 + 32);
  v142 = (void (**)(char *, uint64_t))(v144 + 8);
  uint64_t v129 = (void (**)(char *, uint64_t, uint64_t))(v147 + 16);
  uint64_t v128 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 7);
  uint64_t v127 = (void (**)(char *, uint64_t))(v147 + 8);
  long long v147 = xmmword_25B381FA0;
  uint64_t v64 = v139;
LABEL_16:
  uint64_t v130 = v63 + 1;
  sub_25B3198C0(v132 + v63 * v153, v64, type metadata accessor for ReplicatorRecord);
  uint64_t v65 = *(void *)(v64 + v41[6]);
  v170[0] = v62;
  uint64_t v66 = *(void *)(v65 + 64);
  uint64_t v143 = v65 + 64;
  uint64_t v67 = 1 << *(unsigned char *)(v65 + 32);
  if (v67 < 64) {
    uint64_t v68 = ~(-1 << v67);
  }
  else {
    uint64_t v68 = -1;
  }
  unint64_t v69 = v68 & v66;
  int64_t v144 = (unint64_t)(v67 + 63) >> 6;
  uint64_t v150 = (void *)v65;
  swift_bridgeObjectRetain_n();
  uint64_t v70 = 0;
  uint64_t v71 = v152;
  uint64_t v72 = (uint64_t)v151;
  os_log_type_t v73 = v157;
  if (v69)
  {
LABEL_20:
    uint64_t v162 = (char *)((v69 - 1) & v69);
    uint64_t v163 = v70;
    unint64_t v74 = __clz(__rbit64(v69)) | ((void)v70 << 6);
    goto LABEL_36;
  }
  while (1)
  {
    BOOL v75 = __OFADD__(v70, 1);
    int64_t v76 = (int64_t)(v70 + 1);
    if (v75)
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v76 >= v144) {
      goto LABEL_49;
    }
    unint64_t v77 = *(void *)(v143 + 8 * v76);
    if (!v77)
    {
      int64_t v78 = v76 + 1;
      if (v76 + 1 >= v144) {
        goto LABEL_49;
      }
      unint64_t v77 = *(void *)(v143 + 8 * v78);
      if (v77) {
        goto LABEL_34;
      }
      int64_t v78 = v76 + 2;
      if (v76 + 2 >= v144) {
        goto LABEL_49;
      }
      unint64_t v77 = *(void *)(v143 + 8 * v78);
      if (v77) {
        goto LABEL_34;
      }
      int64_t v78 = v76 + 3;
      if (v76 + 3 >= v144) {
        goto LABEL_49;
      }
      unint64_t v77 = *(void *)(v143 + 8 * v78);
      if (v77) {
        goto LABEL_34;
      }
      int64_t v78 = v76 + 4;
      if (v76 + 4 >= v144) {
        goto LABEL_49;
      }
      unint64_t v77 = *(void *)(v143 + 8 * v78);
      if (v77) {
        goto LABEL_34;
      }
      int64_t v78 = v76 + 5;
      if (v76 + 5 < v144)
      {
        unint64_t v77 = *(void *)(v143 + 8 * v78);
        if (v77)
        {
LABEL_34:
          int64_t v76 = v78;
          goto LABEL_35;
        }
        while (1)
        {
          int64_t v76 = v78 + 1;
          if (__OFADD__(v78, 1)) {
            break;
          }
          if (v76 >= v144) {
            goto LABEL_49;
          }
          unint64_t v77 = *(void *)(v143 + 8 * v76);
          ++v78;
          if (v77) {
            goto LABEL_35;
          }
        }
LABEL_59:
        __break(1u);
      }
LABEL_49:
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v163 = (char *)v170[0];
      uint64_t v64 = v139;
      uint64_t v115 = v135;
      sub_25B3198C0(v139, v135, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v41 = (int *)v146;
      int64_t v116 = *v129;
      uint64_t v117 = v134;
      (*v129)(v136, v64 + *(int *)(v146 + 20), v134);
      sub_25B2E2FE0(v64 + v41[7], v137, &qword_26B340F80);
      uint64_t v162 = *(char **)(v64 + v41[8]);
      unint64_t v161 = (void (**)(char *, uint64_t))type metadata accessor for ReplicationXPCServerParametersRecord(0);
      uint64_t v118 = (char *)objc_allocWithZone((Class)v161);
      uint64_t v119 = (uint64_t)&v118[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
      (*v128)((uint64_t)&v118[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration], 1, 1, v158);
      sub_25B3198C0(v115, (uint64_t)&v118[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
      uint64_t v120 = v136;
      v116(&v118[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], (uint64_t)v136, v117);
      *(void *)&v118[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v163;
      swift_beginAccess();
      uint64_t v121 = v118;
      uint64_t v122 = v137;
      sub_25B318EDC(v137, v119);
      swift_endAccess();
      *(void *)&v121[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options] = v162;

      v166.receiver = v121;
      v166.super_class = (Class)v161;
      objc_msgSendSuper2(&v166, sel_init);
      sub_25B2E344C(v122, &qword_26B340F80);
      (*v127)(v120, v117);
      sub_25B319990(v135, type metadata accessor for ReplicatorRecord.ID);
      sub_25B319990(v64, type metadata accessor for ReplicatorRecord);
      sub_25B37FEE0();
      sub_25B37FF20();
      sub_25B37FF30();
      sub_25B37FEF0();
      uint64_t v63 = v130;
      uint64_t v62 = (void *)MEMORY[0x263F8EE78];
      if (v130 == v133)
      {
        uint64_t v52 = v169;
        a3 = v131;
        char v53 = v138;
        uint64_t v51 = (void *)v140;
        goto LABEL_12;
      }
      goto LABEL_16;
    }
LABEL_35:
    uint64_t v162 = (char *)((v77 - 1) & v77);
    uint64_t v163 = (char *)v76;
    unint64_t v74 = __clz(__rbit64(v77)) + (v76 << 6);
LABEL_36:
    uint64_t v79 = v150[7];
    uint64_t v80 = *(void *)(v150[6] + 8 * v74);
    os_log_type_t v81 = (int *)(type metadata accessor for ReplicatorRecord.Value(0) - 8);
    uint64_t v82 = v79 + *(void *)(*(void *)v81 + 72) * v74;
    uint64_t v83 = v164;
    id v84 = v155;
    sub_25B3198C0(v82, (uint64_t)&v155[*(int *)(v164 + 48)], type metadata accessor for ReplicatorRecord.Value);
    void *v84 = v80;
    sub_25B2E31F0((uint64_t)v84, (uint64_t)v73, &qword_26B340D98);
    uint64_t v85 = *(int *)(v83 + 48);
    uint64_t v86 = (uint64_t)v156 + v85;
    uint64_t v87 = (uint64_t)v73 + v85;
    *uint64_t v156 = *v73;
    sub_25B3198C0((uint64_t)v73 + v85, v86, type metadata accessor for ReplicatorRecord.Value);
    sub_25B2E2FE0(v86 + v81[7], v72, &qword_26B340CE0);
    sub_25B319990(v86, type metadata accessor for ReplicatorRecord.Value);
    if ((*v148)(v72, 1, v71) != 1) {
      break;
    }
    sub_25B2E344C(v72, &qword_26B340CE0);
    unint64_t v161 = 0;
    unint64_t v160 = 0;
LABEL_41:
    uint64_t v96 = *v73;
    uint64_t v97 = *(int *)(v164 + 48);
    uint64_t v98 = v154;
    uint64_t v99 = (void *)((char *)v154 + v97);
    void *v154 = *v73;
    sub_25B3198C0(v87, (uint64_t)v98 + v97, type metadata accessor for ReplicatorRecord.Value);
    uint64_t v100 = *v99;
    unint64_t v101 = v99[1];
    sub_25B2E2B14(*v99, v101);
    sub_25B319990((uint64_t)v99, type metadata accessor for ReplicatorRecord.Value);
    Class v159 = (Class)type metadata accessor for ReplicationXPCServerParametersRecordValue();
    os_log_type_t v102 = (char *)objc_allocWithZone(v159);
    uint64_t v103 = (uint64_t *)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
    *(_OWORD *)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = v147;
    uint64_t v104 = (void **)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
    *(void *)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
    uint64_t v105 = &v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
    *(void *)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes] = 0;
    *(void *)&v102[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = v96;
    swift_beginAccess();
    uint64_t v107 = *v103;
    unint64_t v106 = v103[1];
    *uint64_t v103 = v100;
    v103[1] = v101;
    sub_25B2E2B14(v100, v101);
    unint64_t v108 = v160;
    uint64_t v109 = v160;
    uint64_t v110 = v102;
    sub_25B2CA2C4(v107, v106);
    swift_beginAccess();
    uint64_t v111 = *v104;
    *uint64_t v104 = v108;
    unint64_t v112 = v109;

    swift_beginAccess();
    *(void *)uint64_t v105 = v161;

    swift_bridgeObjectRelease();
    v168.receiver = v110;
    v168.super_class = v159;
    id v113 = objc_msgSendSuper2(&v168, sel_init);

    sub_25B2CA2D8(v100, v101);
    id v114 = v113;
    MEMORY[0x2611611F0]();
    if (*(void *)(((unint64_t)v170[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v170[0] & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
      sub_25B37FB20();
    sub_25B37FB50();
    sub_25B37FB10();

    os_log_type_t v73 = v157;
    sub_25B2E344C((uint64_t)v157, &qword_26B340D98);
    uint64_t v71 = v152;
    uint64_t v72 = (uint64_t)v151;
    uint64_t v70 = v163;
    unint64_t v69 = (unint64_t)v162;
    if (v162) {
      goto LABEL_20;
    }
  }
  unint64_t v88 = v145;
  (*v141)(v145, v72, v71);
  uint64_t v89 = (void *)sub_25B37F4A0();
  uint64_t v90 = self;
  id v167 = 0;
  uint64_t v91 = (void (**)(char *, char *, uint64_t))objc_msgSend(v90, sel_fileHandleForReadingFromURL_error_, v89, &v167);

  if (!v91)
  {
    uint64_t v125 = v88;
    id v126 = v167;
    sub_25B37F470();

    swift_willThrow();
    (*v142)(v125, v71);
    goto LABEL_57;
  }
  id v92 = v167;
  uint64_t v93 = v149;
  uint64_t v94 = URL.extendedAttributes()();
  if (!v93)
  {
    uint64_t v95 = v94;
    (*v142)(v88, v71);
    unint64_t v161 = (void (**)(char *, uint64_t))sub_25B2E39F4(v95);
    uint64_t v149 = 0;
    swift_bridgeObjectRelease();
    unint64_t v160 = v91;
    goto LABEL_41;
  }
  (*v142)(v88, v71);

LABEL_57:
  swift_bridgeObjectRelease();
  sub_25B2E344C((uint64_t)v73, &qword_26B340D98);
  swift_release();
  swift_bridgeObjectRelease();
  sub_25B319990(v139, type metadata accessor for ReplicatorRecord);
  swift_unknownObjectRelease();
  swift_release();
}

uint64_t sub_25B2FB590()
{
  uint64_t v1 = sub_25B37F8A0();
  Class isa = v1[-1].isa;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (void *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v4 = v5;
  (*((void (**)(void *, void, NSObject *))isa + 13))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*((void (**)(void *, NSObject *))isa + 1))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_15;
  }
  sub_25B308014();
  unint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection);
  if (!v7)
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B37F780();
    __swift_project_value_buffer(v8, (uint64_t)qword_26B3417A8);
    uint64_t v1 = sub_25B37F760();
    os_log_type_t v9 = sub_25B37FCC0();
    if (os_log_type_enabled(v1, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_25B2C1000, v1, v9, "ReplicatorClient: Failed to establish a connection", v10, 2u);
      MEMORY[0x2611621B0](v10, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v1 = v7;
  if ([v1 remoteTarget])
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_25B2E31F0((uint64_t)v17, (uint64_t)v18, &qword_26B3413D8);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B3410D8);
    if (swift_dynamicCast())
    {

      return v16[1];
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v18, &qword_26B3413D8);
  }
  if (qword_26B3417C0 != -1) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v12 = sub_25B37F780();
  __swift_project_value_buffer(v12, (uint64_t)qword_26B3417A8);
  uint64_t v13 = sub_25B37F760();
  os_log_type_t v14 = sub_25B37FCC0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_25B2C1000, v13, v14, "ReplicatorClient: Failed to cast connection to server interface protocol", v15, 2u);
    MEMORY[0x2611621B0](v15, -1, -1);
  }

LABEL_18:
  return 0;
}

uint64_t sub_25B2FB8D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_25B2FB590();
  if (v6)
  {
    unint64_t v7 = (void *)v6;
    sub_25B316C1C(a2);
    if (!v3)
    {
      char v18 = a3 & 1;
      sub_25B37F440();
      swift_allocObject();
      sub_25B37F430();
      sub_25B318E88();
      uint64_t v8 = sub_25B37F420();
      unint64_t v10 = v9;
      uint64_t v11 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v8, v10);
      swift_bridgeObjectRelease();
      swift_release();
      id v17 = 0;
      unsigned __int8 v12 = objc_msgSend(v7, sel_removeRecordsWithParameters_error_, v11, &v17);

      if (v12)
      {
        id v13 = v17;
      }
      else
      {
        id v16 = v17;
        sub_25B37F470();

        swift_willThrow();
      }
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 3;
    *(void *)(v14 + 8) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_25B2FBAA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  LODWORD(v168) = a5;
  uint64_t v137 = a4;
  uint64_t v136 = a3;
  uint64_t v10 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v165 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v167 = (uint64_t)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v166 = (uint64_t)&v125 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB820);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  unint64_t v17 = (unint64_t)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (uint64_t)&v125 - v18;
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v154);
  uint64_t v162 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_25B37F640();
  int64_t v21 = *(void *)(v160 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v160);
  uint64_t v146 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v131 = (char *)&v125 - v24;
  uint64_t v25 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v28 = (uint64_t)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v142 = (uint64_t)&v125 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v141 = (uint64_t)&v125 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v143 = *(void *)(v161 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v161);
  uint64_t v169 = (uint64_t *)((char *)&v125 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  Class v159 = (char *)&v125 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v148 = (uint64_t)&v125 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v125 - v38;
  id v139 = a1;
  uint64_t v140 = (void *)sub_25B2FB590();
  if (v140)
  {
    unint64_t v40 = sub_25B316C1C(a2);
    uint64_t v145 = v6;
    if (v6) {
      return swift_unknownObjectRelease();
    }
    unint64_t v43 = v40;
    id v126 = a6;
    unint64_t v175 = MEMORY[0x263F8EE80];
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = sub_25B3430F0(v44);
    unint64_t v138 = v43;
    swift_bridgeObjectRelease();
    unint64_t v173 = MEMORY[0x263F8EE78];
    unint64_t v174 = v45;
    id v172 = 0;
    if (qword_26B3417C0 != -1) {
      goto LABEL_110;
    }
LABEL_6:
    uint64_t v46 = sub_25B37F780();
    uint64_t v130 = __swift_project_value_buffer(v46, (uint64_t)qword_26B3417A8);
    char v47 = sub_25B37F760();
    os_log_type_t v48 = sub_25B37FCD0();
    BOOL v49 = os_log_type_enabled(v47, v48);
    unint64_t v164 = v17;
    uint64_t v163 = v19;
    if (v49)
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_25B2C1000, v47, v48, "Begin fetching records in batches", v50, 2u);
      MEMORY[0x2611621B0](v50, -1, -1);
    }

    unint64_t v51 = v138;
    uint64_t v135 = *(void *)(v138 + 16);
    if (v135)
    {
      int v129 = v168 & 1;
      uint64_t v52 = v143;
      unint64_t v134 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      unint64_t v133 = v138 + v134;
      swift_beginAccess();
      unint64_t v53 = 0;
      uint64_t v19 = v21 + 48;
      long long v147 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
      uint64_t v150 = (void (**)(unint64_t, uint64_t))(v21 + 8);
      uint64_t v132 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
      uint64_t v128 = &v171;
      *(void *)&long long v54 = 134349568;
      long long v127 = v54;
      uint64_t v153 = v28;
      uint64_t v158 = v21 + 48;
      uint64_t v152 = v39;
      while (1)
      {
        if (v53 >= *(void *)(v51 + 16))
        {
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          swift_once();
          goto LABEL_6;
        }
        uint64_t v55 = *(void *)(v143 + 72);
        unint64_t v144 = v53;
        uint64_t v168 = v55;
        sub_25B3198C0(v133 + v55 * v53, (uint64_t)v39, type metadata accessor for ReplicatorRecord.ID);
        sub_25B3198C0((uint64_t)v39, v148, type metadata accessor for ReplicatorRecord.ID);
        swift_beginAccess();
        unint64_t v56 = v173;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v56 = sub_25B3103B4(0, *(void *)(v56 + 16) + 1, 1, v56, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
        }
        unint64_t v17 = *(void *)(v56 + 16);
        unint64_t v57 = *(void *)(v56 + 24);
        if (v17 >= v57 >> 1) {
          unint64_t v56 = sub_25B3103B4(v57 > 1, v17 + 1, 1, v56, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
        }
        *(void *)(v56 + 16) = v17 + 1;
        sub_25B319928(v148, v56 + v134 + v17 * v168, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v173 = v56;
        swift_endAccess();
        swift_beginAccess();
        unint64_t v58 = v174;
        sub_25B380250();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v157 = &v39[*(int *)(v161 + 28)];
        uint64_t v59 = v142;
        sub_25B3198C0((uint64_t)v157, v142, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v156 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v19;
        uint64_t v60 = v160;
        if (v156(v59, 1, v160) == 1)
        {
          sub_25B380260();
        }
        else
        {
          unint64_t v17 = (unint64_t)v131;
          (*v147)(v131, v59, v60);
          sub_25B380260();
          sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          (*v150)(v17, v60);
        }
        uint64_t v28 = (uint64_t)v39;
        uint64_t v149 = &v39[*(int *)(v161 + 32)];
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v61 = sub_25B380290();
        uint64_t v62 = -1 << *(unsigned char *)(v58 + 32);
        unint64_t v63 = v61 & ~v62;
        int64_t v21 = v58 + 56;
        if (((*(void *)(v58 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0)
        {
LABEL_50:
          swift_bridgeObjectRelease();
          uint64_t v78 = v141;
          (*v132)(v141, 1, 1, v161);
          goto LABEL_51;
        }
        uint64_t v64 = ~v62;
        uint64_t v65 = v162;
        uint64_t v66 = v159;
        int64_t v151 = v58 + 56;
        unint64_t v155 = v58;
        while (1)
        {
          unint64_t v67 = v63 * v168;
          sub_25B3198C0(*(void *)(v58 + 48) + v63 * v168, (uint64_t)v66, type metadata accessor for ReplicatorRecord.ID);
          BOOL v68 = *v66 == *(void *)v28 && v66[1] == *(void *)(v28 + 8);
          if (!v68 && (sub_25B3801A0() & 1) == 0) {
            goto LABEL_24;
          }
          BOOL v69 = v66[2] == *(void *)(v28 + 16) && v66[3] == *(void *)(v28 + 24);
          if (!v69 && (sub_25B3801A0() & 1) == 0
            || (v66[4] != *(void *)(v28 + 32) || v66[5] != *(void *)(v28 + 40)) && (sub_25B3801A0() & 1) == 0)
          {
            goto LABEL_24;
          }
          uint64_t v70 = (uint64_t)v66 + *(int *)(v161 + 28);
          uint64_t v71 = v65 + *(int *)(v154 + 48);
          sub_25B3198C0(v70, v162, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v65 = v162;
          sub_25B3198C0((uint64_t)v157, v71, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v72 = v160;
          unint64_t v17 = (unint64_t)v156;
          if (v156(v65, 1, v160) == 1)
          {
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(v71, 1, v72) == 1) {
              goto LABEL_46;
            }
            goto LABEL_43;
          }
          uint64_t v73 = v153;
          sub_25B3198C0(v65, v153, type metadata accessor for ReplicatorRecord.ID.Ownership);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(v71, 1, v72) != 1) {
            break;
          }
          (*v150)(v73, v72);
          int64_t v21 = v151;
LABEL_43:
          sub_25B2E344C(v65, &qword_26B341530);
LABEL_44:
          unint64_t v58 = v155;
          uint64_t v28 = (uint64_t)v152;
          uint64_t v66 = v159;
LABEL_24:
          sub_25B319990((uint64_t)v66, type metadata accessor for ReplicatorRecord.ID);
          unint64_t v63 = (v63 + 1) & v64;
          if (((*(void *)(v21 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0) {
            goto LABEL_50;
          }
        }
        unint64_t v74 = v146;
        (*v147)(v146, v71, v72);
        char v75 = sub_25B37F610();
        unint64_t v17 = (unint64_t)v150;
        int64_t v76 = *v150;
        (*v150)((unint64_t)v74, v72);
        v76(v153, v72);
        uint64_t v65 = v162;
        int64_t v21 = v151;
        if ((v75 & 1) == 0)
        {
          sub_25B319990(v162, type metadata accessor for ReplicatorRecord.ID.Ownership);
          goto LABEL_44;
        }
LABEL_46:
        sub_25B319990(v65, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v66 = v159;
        unint64_t v77 = &v159[*(int *)(v161 + 32)];
        unint64_t v58 = v155;
        uint64_t v28 = (uint64_t)v152;
        if ((*(void *)v77 != *(void *)v149 || *((void *)v77 + 1) != *((void *)v149 + 1))
          && (sub_25B3801A0() & 1) == 0)
        {
          goto LABEL_24;
        }
        sub_25B319990((uint64_t)v66, type metadata accessor for ReplicatorRecord.ID);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v116 = v174;
        uint64_t v170 = (void *)v174;
        unint64_t v174 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_25B3595A8();
          unint64_t v116 = (unint64_t)v170;
        }
        uint64_t v78 = v141;
        sub_25B319928(*(void *)(v116 + 48) + v67, v141, type metadata accessor for ReplicatorRecord.ID);
        sub_25B35B590(v63);
        unint64_t v174 = (unint64_t)v170;
        swift_bridgeObjectRelease();
        (*v132)(v78, 0, 1, v161);
LABEL_51:
        swift_endAccess();
        sub_25B2E344C(v78, (uint64_t *)&unk_26B341370);
        uint64_t v19 = v164;
        uint64_t v39 = (char *)v28;
        if (*(void *)(v173 + 16) <= 0x32uLL && *(void *)(v174 + 16))
        {
          sub_25B319990(v28, type metadata accessor for ReplicatorRecord.ID);
          goto LABEL_12;
        }
        uint64_t v79 = sub_25B37F760();
        os_log_type_t v80 = sub_25B37FCD0();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = v127;
          uint64_t v170 = v172;
          sub_25B37FD70();
          *(_WORD *)(v81 + 12) = 2050;
          uint64_t v170 = *(void **)(v173 + 16);
          sub_25B37FD70();
          *(_WORD *)(v81 + 22) = 2048;
          uint64_t v170 = *(void **)(v174 + 16);
          sub_25B37FD70();
          _os_log_impl(&dword_25B2C1000, v79, v80, "Fetching batch %{public}ld with count %{public}ld IDs; %ld IDs remaining",
            (uint8_t *)v81,
            0x20u);
          MEMORY[0x2611621B0](v81, -1, -1);
        }

        uint64_t v82 = swift_bridgeObjectRetain();
        uint64_t v83 = v145;
        uint64_t v84 = sub_25B2FD210(v82, v136, v137, v129, v140);
        uint64_t v145 = v83;
        if (v83)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          sub_25B319990(v28, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v85 = v84;
        swift_bridgeObjectRelease();
        uint64_t v28 = 0;
        uint64_t v86 = *(void *)(v85 + 64);
        uint64_t v157 = (char *)(v85 + 64);
        uint64_t v87 = 1 << *(unsigned char *)(v85 + 32);
        if (v87 < 64) {
          uint64_t v88 = ~(-1 << v87);
        }
        else {
          uint64_t v88 = -1;
        }
        unint64_t v17 = v88 & v86;
        int64_t v21 = (unint64_t)(v87 + 63) >> 6;
        uint64_t v156 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v21 - 1);
        while (2)
        {
          if (v17)
          {
            unint64_t v89 = __clz(__rbit64(v17));
            v17 &= v17 - 1;
            unint64_t v90 = v89 | (v28 << 6);
            goto LABEL_63;
          }
          int64_t v93 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_106;
          }
          if (v93 >= v21) {
            goto LABEL_81;
          }
          unint64_t v94 = *(void *)&v157[8 * v93];
          if (!v94)
          {
            uint64_t v95 = v28 + 2;
            ++v28;
            if (v93 + 1 < v21)
            {
              unint64_t v94 = *(void *)&v157[8 * v95];
              if (v94)
              {
LABEL_70:
                int64_t v93 = v95;
                goto LABEL_67;
              }
              uint64_t v28 = v93 + 1;
              if (v93 + 2 < v21)
              {
                unint64_t v94 = *(void *)&v157[8 * v93 + 16];
                if (v94)
                {
                  v93 += 2;
                  goto LABEL_67;
                }
                uint64_t v95 = v93 + 3;
                uint64_t v28 = v93 + 2;
                if (v93 + 3 < v21)
                {
                  unint64_t v94 = *(void *)&v157[8 * v95];
                  if (!v94)
                  {
                    while (1)
                    {
                      int64_t v93 = v95 + 1;
                      if (__OFADD__(v95, 1)) {
                        goto LABEL_109;
                      }
                      if (v93 >= v21)
                      {
                        uint64_t v28 = (uint64_t)v156;
                        goto LABEL_81;
                      }
                      unint64_t v94 = *(void *)&v157[8 * v93];
                      ++v95;
                      if (v94) {
                        goto LABEL_67;
                      }
                    }
                  }
                  goto LABEL_70;
                }
              }
            }
LABEL_81:
            uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v19, 1, 1, v96);
            unint64_t v17 = 0;
            goto LABEL_82;
          }
LABEL_67:
          unint64_t v17 = (v94 - 1) & v94;
          unint64_t v90 = __clz(__rbit64(v94)) + (v93 << 6);
          uint64_t v28 = v93;
LABEL_63:
          sub_25B3198C0(*(void *)(v85 + 48) + v90 * v168, v19, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v91 = *(void *)(v85 + 56) + *(void *)(v165 + 72) * v90;
          uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
          sub_25B3198C0(v91, v19 + *(int *)(v92 + 48), type metadata accessor for ReplicatorRecord);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v19, 0, 1, v92);
LABEL_82:
          uint64_t v97 = v163;
          sub_25B2E31F0(v19, v163, &qword_26A4EB820);
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 48))(v97, 1, v98) != 1)
          {
            uint64_t v99 = v97 + *(int *)(v98 + 48);
            uint64_t v100 = v166;
            sub_25B319928(v99, v166, type metadata accessor for ReplicatorRecord);
            unint64_t v101 = v169;
            sub_25B319928(v97, (uint64_t)v169, type metadata accessor for ReplicatorRecord.ID);
            sub_25B3198C0(v100, v167, type metadata accessor for ReplicatorRecord);
            unint64_t v102 = v175;
            uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v170 = (void *)v102;
            unint64_t v175 = 0x8000000000000000;
            unint64_t v104 = sub_25B2D5F6C(v101);
            uint64_t v105 = *(void *)(v102 + 16);
            BOOL v106 = (v103 & 1) == 0;
            uint64_t v107 = v105 + v106;
            if (__OFADD__(v105, v106))
            {
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
            char v108 = v103;
            if (*(void *)(v102 + 24) >= v107)
            {
              if ((v19 & 1) == 0) {
                sub_25B2DB78C();
              }
            }
            else
            {
              sub_25B2D7250(v107, v19);
              unint64_t v109 = sub_25B2D5F6C(v169);
              if ((v108 & 1) != (v110 & 1))
              {
                uint64_t result = sub_25B3801C0();
                __break(1u);
                return result;
              }
              unint64_t v104 = v109;
            }
            uint64_t v19 = v164;
            uint64_t v111 = v170;
            if (v108)
            {
              sub_25B318C40(v167, v170[7] + *(void *)(v165 + 72) * v104, type metadata accessor for ReplicatorRecord);
            }
            else
            {
              v170[(v104 >> 6) + 8] |= 1 << v104;
              sub_25B3198C0((uint64_t)v169, v111[6] + v104 * v168, type metadata accessor for ReplicatorRecord.ID);
              sub_25B319928(v167, v111[7] + *(void *)(v165 + 72) * v104, type metadata accessor for ReplicatorRecord);
              uint64_t v112 = v111[2];
              BOOL v113 = __OFADD__(v112, 1);
              uint64_t v114 = v112 + 1;
              if (v113) {
                goto LABEL_105;
              }
              v111[2] = v114;
            }
            unint64_t v175 = (unint64_t)v111;
            swift_bridgeObjectRelease();
            sub_25B319990((uint64_t)v169, type metadata accessor for ReplicatorRecord.ID);
            sub_25B319990(v166, type metadata accessor for ReplicatorRecord);
            continue;
          }
          break;
        }
        swift_release();
        unint64_t v173 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
        sub_25B319990((uint64_t)v39, type metadata accessor for ReplicatorRecord.ID);
        if (__OFADD__(v172, 1)) {
          goto LABEL_108;
        }
        id v172 = (void *)((char *)v172 + 1);
LABEL_12:
        unint64_t v53 = v144 + 1;
        unint64_t v51 = v138;
        uint64_t v19 = v158;
        if (v144 + 1 == v135)
        {
          swift_bridgeObjectRelease();
          unint64_t v118 = v175;
          uint64_t v117 = v172;
          goto LABEL_99;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v117 = 0;
    unint64_t v118 = MEMORY[0x263F8EE80];
LABEL_99:
    swift_bridgeObjectRetain();
    uint64_t v119 = sub_25B37F760();
    os_log_type_t v120 = sub_25B37FCD0();
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = swift_slowAlloc();
      *(_DWORD *)uint64_t v121 = 134349312;
      uint64_t v170 = *(void **)(v118 + 16);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      *(_WORD *)(v121 + 12) = 2050;
      uint64_t v170 = v117;
      sub_25B37FD70();
      _os_log_impl(&dword_25B2C1000, v119, v120, "End fetching records in batches; fetched %{public}ld in %{public}ld batches",
        (uint8_t *)v121,
        0x16u);
      MEMORY[0x2611621B0](v121, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    uint64_t v122 = v175;
    id v123 = v139;
    swift_bridgeObjectRetain();
    uint64_t v124 = sub_25B312B50(MEMORY[0x263F8EE80], v122, (uint64_t)v123);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v126 = v124;
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v42 = 3;
    *(void *)(v42 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B2FD210(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = v5;
  id v191 = a5;
  LOBYTE(v7) = a4;
  uint64_t v190 = a3;
  uint64_t v195 = a2;
  uint64_t v246 = *MEMORY[0x263EF8340];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v215 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v216 = (uint64_t)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB820);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v184 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)((char *)&v184 - v15);
  uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  uint64_t v17 = MEMORY[0x270FA5388](v234);
  uint64_t v237 = (uint64_t)&v184 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v232 = (uint64_t)&v184 - v19;
  uint64_t v236 = sub_25B37F640();
  uint64_t v20 = *(void *)(v236 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v236);
  uint64_t v210 = (char *)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v206 = (char *)&v184 - v24;
  MEMORY[0x270FA5388](v23);
  unint64_t v202 = (char *)&v184 - v25;
  uint64_t v26 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v231 = (uint64_t)&v184 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v204 = (char *)&v184 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v218 = (uint64_t)&v184 - v32;
  MEMORY[0x270FA5388](v31);
  v197 = (char *)&v184 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v203 = (uint64_t)&v184 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v196 = (uint64_t)&v184 - v37;
  uint64_t v239 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v221 = *(void *)(v239 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v239);
  uint64_t v230 = (char *)&v184 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  os_log_type_t v205 = (void *)((char *)&v184 - v41);
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  unint64_t v233 = (char *)&v184 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  int64_t v225 = (char *)&v184 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v208 = (uint64_t)&v184 - v47;
  MEMORY[0x270FA5388](v46);
  int64_t v226 = (char *)&v184 - v48;
  uint64_t v49 = sub_25B37F8A0();
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v52 = (void *)((char *)&v184 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v189 = v6;
  unint64_t v53 = *(void **)(v6 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v52 = v53;
  (*(void (**)(void *, void, uint64_t))(v50 + 104))(v52, *MEMORY[0x263F8F0E0], v49);
  id v54 = v53;
  LOBYTE(v53) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v50 + 8))(v52, v49);
  if ((v53 & 1) == 0) {
    goto LABEL_149;
  }
  uint64_t v55 = swift_bridgeObjectRetain();
  uint64_t v56 = sub_25B3430F0(v55);
  swift_bridgeObjectRelease();
  uint64_t v240 = 0;
  BOOL v241 = (void *)v56;
  if (qword_26B3417C0 != -1) {
LABEL_150:
  }
    swift_once();
  uint64_t v57 = sub_25B37F780();
  uint64_t v58 = __swift_project_value_buffer(v57, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain();
  uint64_t v187 = v58;
  uint64_t v59 = sub_25B37F760();
  os_log_type_t v60 = sub_25B37FCD0();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 134349056;
    id v242 = *(id *)(a1 + 16);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v59, v60, "Begin fetch for %{public}ld records", v61, 0xCu);
    MEMORY[0x2611621B0](v61, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (v241[2])
  {
    uint64_t v235 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    uint64_t v222 = (void (**)(char *, uint64_t, uint64_t))(v20 + 32);
    unint64_t v227 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v211 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v221 + 56);
    uint64_t v185 = v243;
    unint64_t v209 = MEMORY[0x263F8EE78];
    int v186 = v7 & 1;
    *(void *)&long long v62 = 134350080;
    long long v184 = v62;
    unint64_t v217 = (void *)MEMORY[0x263F8EE80];
    uint64_t v214 = a1;
    long long v213 = v14;
    uint64_t v212 = v16;
    while (1)
    {
      uint64_t v63 = swift_bridgeObjectRetain();
      uint64_t v64 = (void *)sub_25B311934(v63);
      swift_bridgeObjectRelease();
      uint64_t v65 = sub_25B37F500();
      int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v195, 1, v65);
      id v242 = v64;
      v243[0] = 1;
      v243[1] = v66 != 1;
      uint64_t v244 = v190;
      char v245 = v186;
      sub_25B37F440();
      swift_allocObject();
      sub_25B37F430();
      sub_25B318AE0();
      unint64_t v67 = v199;
      uint64_t v68 = sub_25B37F420();
      unint64_t v193 = v67;
      if (v67)
      {
LABEL_152:
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      uint64_t v70 = v68;
      uint64_t v20 = v69;
      uint64_t v71 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v70, v20);
      swift_release();
      swift_release();
      id v242 = 0;
      uint64_t v72 = (char *)objc_msgSend(v191, sel_recordsWithParameters_error_, v71, &v242);

      if (!v72)
      {
        id v182 = v242;
        v181 = v217;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_25B37F470();

        swift_willThrow();
        swift_bridgeObjectRelease();
        return (uint64_t)v181;
      }
      uint64_t v192 = OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs;
      uint64_t v73 = *(char **)&v72[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs];
      int64_t v201 = *((void *)v73 + 2);
      v194 = v72;
      if (v201)
      {
        unint64_t v199 = (*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80);
        os_log_type_t v198 = &v73[v199];
        id v74 = v242;
        swift_bridgeObjectRetain();
        unint64_t v75 = 0;
        uint64_t v76 = v232;
        unint64_t v77 = v226;
        uint64_t v200 = v73;
        while (1)
        {
          if (v75 >= *((void *)v73 + 2))
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }
          uint64_t v79 = *(void *)(v221 + 72);
          uint64_t v207 = (void *)v75;
          uint64_t v238 = v79;
          sub_25B3198C0((uint64_t)v198 + v79 * v75, (uint64_t)v77, type metadata accessor for ReplicatorRecord.ID);
          sub_25B3198C0((uint64_t)v77, v208, type metadata accessor for ReplicatorRecord.ID);
          unint64_t v80 = v209;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v80 = sub_25B3103B4(0, *(void *)(v80 + 16) + 1, 1, v80, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          uint64_t v81 = (uint64_t)v197;
          uint64_t v82 = v225;
          uint64_t v83 = v235;
          unint64_t v85 = *(void *)(v80 + 16);
          unint64_t v84 = *(void *)(v80 + 24);
          if (v85 >= v84 >> 1) {
            unint64_t v80 = sub_25B3103B4(v84 > 1, v85 + 1, 1, v80, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          *(void *)(v80 + 16) = v85 + 1;
          sub_25B319928(v208, v80 + v199 + v85 * v238, type metadata accessor for ReplicatorRecord.ID);
          swift_beginAccess();
          uint64_t v86 = v241;
          sub_25B380250();
          uint64_t v87 = v226;
          uint64_t v220 = (uint64_t)v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v228 = (uint64_t)&v87[*(int *)(v239 + 28)];
          sub_25B3198C0(v228, v81, type metadata accessor for ReplicatorRecord.ID.Ownership);
          unint64_t v224 = *v83;
          uint64_t v88 = v236;
          int v89 = v224(v81, 1, v236);
          unint64_t v209 = v80;
          if (v89 == 1)
          {
            sub_25B380260();
          }
          else
          {
            unint64_t v90 = v202;
            (*v222)(v202, v81, v88);
            sub_25B380260();
            sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
            sub_25B37F950();
            (*v227)((uint64_t)v90, v88);
          }
          uint64_t v20 = (uint64_t)v233;
          uint64_t v91 = v226;
          int64_t v219 = (int64_t)&v226[*(int *)(v239 + 32)];
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v92 = sub_25B380290();
          unint64_t v77 = v91;
          uint64_t v93 = v220;
          uint64_t v94 = -1 << *(unsigned char *)(v220 + 32);
          unint64_t v95 = v92 & ~v94;
          uint64_t v7 = v220 + 56;
          if (((*(void *)(v220 + 56 + ((v95 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v95) & 1) == 0)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            uint64_t v78 = v196;
            (*v211)(v196, 1, 1, v239);
            a1 = v214;
            uint64_t v14 = v213;
            goto LABEL_14;
          }
          uint64_t v96 = ~v94;
          uint64_t v223 = ~v94;
          while (1)
          {
            uint64_t v97 = v95 * v238;
            sub_25B3198C0(*(void *)(v93 + 48) + v95 * v238, (uint64_t)v82, type metadata accessor for ReplicatorRecord.ID);
            BOOL v98 = *v82 == *v77 && v82[1] == v77[1];
            if (!v98 && (sub_25B3801A0() & 1) == 0) {
              goto LABEL_26;
            }
            BOOL v99 = v82[2] == v77[2] && v82[3] == v77[3];
            if (!v99 && (sub_25B3801A0() & 1) == 0
              || (v82[4] != v77[4] || v82[5] != v77[5]) && (sub_25B3801A0() & 1) == 0)
            {
              goto LABEL_26;
            }
            uint64_t v229 = v97;
            uint64_t v100 = v93;
            uint64_t v101 = v7;
            uint64_t v102 = v76 + *(int *)(v234 + 48);
            sub_25B3198C0((uint64_t)v82 + *(int *)(v239 + 28), v232, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v76 = v232;
            sub_25B3198C0(v228, v102, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v103 = v236;
            unint64_t v104 = v224;
            if (v224(v76, 1, v236) == 1)
            {
              int v105 = v104(v102, 1, v103);
              uint64_t v93 = v100;
              if (v105 == 1) {
                goto LABEL_48;
              }
              goto LABEL_45;
            }
            uint64_t v106 = v218;
            sub_25B3198C0(v76, v218, type metadata accessor for ReplicatorRecord.ID.Ownership);
            if (v104(v102, 1, v103) != 1) {
              break;
            }
            (*v227)(v106, v103);
            uint64_t v20 = (uint64_t)v233;
            uint64_t v93 = v100;
LABEL_45:
            sub_25B2E344C(v76, &qword_26B341530);
LABEL_46:
            uint64_t v82 = v225;
            unint64_t v77 = v226;
            uint64_t v96 = v223;
LABEL_26:
            sub_25B319990((uint64_t)v82, type metadata accessor for ReplicatorRecord.ID);
            unint64_t v95 = (v95 + 1) & v96;
            if (((*(void *)(v7 + ((v95 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v95) & 1) == 0) {
              goto LABEL_13;
            }
          }
          uint64_t v107 = v206;
          (*v222)(v206, v102, v103);
          char v108 = sub_25B37F610();
          unint64_t v109 = *v227;
          (*v227)((uint64_t)v107, v103);
          v109(v106, v103);
          uint64_t v93 = v220;
          uint64_t v76 = v232;
          uint64_t v20 = (uint64_t)v233;
          uint64_t v7 = v101;
          if ((v108 & 1) == 0)
          {
            sub_25B319990(v232, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_46;
          }
LABEL_48:
          sub_25B319990(v76, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v82 = v225;
          char v110 = &v225[*(int *)(v239 + 32)];
          unint64_t v77 = v226;
          uint64_t v96 = v223;
          uint64_t v111 = v229;
          if ((*(void *)v110 != *(void *)v219 || *((void *)v110 + 1) != *(void *)(v219 + 8))
            && (sub_25B3801A0() & 1) == 0)
          {
            goto LABEL_26;
          }
          sub_25B319990((uint64_t)v82, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          BOOL v113 = v241;
          id v242 = v241;
          BOOL v241 = (void *)0x8000000000000000;
          a1 = v214;
          uint64_t v14 = v213;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_25B3595A8();
            BOOL v113 = v242;
          }
          uint64_t v78 = v196;
          sub_25B319928(v113[6] + v111, v196, type metadata accessor for ReplicatorRecord.ID);
          sub_25B35B590(v95);
          BOOL v241 = v242;
          swift_bridgeObjectRelease();
          (*v211)(v78, 0, 1, v239);
          unint64_t v77 = v226;
LABEL_14:
          unint64_t v75 = (unint64_t)v207 + 1;
          swift_endAccess();
          sub_25B2E344C(v78, (uint64_t *)&unk_26B341370);
          sub_25B319990((uint64_t)v77, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v16 = v212;
          uint64_t v73 = v200;
          if (v75 == v201)
          {
            swift_bridgeObjectRelease();
            uint64_t v72 = v194;
            goto LABEL_57;
          }
        }
      }
      id v114 = v242;
      uint64_t v20 = (uint64_t)v233;
LABEL_57:
      swift_beginAccess();
      if (__OFADD__(v240, 1))
      {
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      ++v240;
      uint64_t v115 = v72;
      swift_bridgeObjectRetain_n();
      unint64_t v116 = v115;
      uint64_t v117 = sub_25B37F760();
      LODWORD(v238) = sub_25B37FCD0();
      if (os_log_type_enabled(v117, (os_log_type_t)v238))
      {
        uint64_t v118 = swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = v184;
        uint64_t v119 = *(void **)(a1 + 16);
        swift_bridgeObjectRelease();
        id v242 = v119;
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        *(_WORD *)(v118 + 12) = 2050;
        unint64_t v120 = *(unint64_t *)((char *)&v116->isa
                                   + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
        if (v120 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v121 = (void *)sub_25B37FF90();

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v121 = *(void **)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        id v242 = v121;
        LOBYTE(v7) = (_BYTE)v185;
        sub_25B37FD70();

        *(_WORD *)(v118 + 22) = 2050;
        uint64_t v122 = *(void **)(*(void *)&v194[v192] + 16);

        id v242 = v122;
        sub_25B37FD70();

        *(_WORD *)(v118 + 32) = 2050;
        id v242 = (id)v241[2];
        sub_25B37FD70();
        *(_WORD *)(v118 + 42) = 2050;
        id v242 = v240;
        sub_25B37FD70();
        _os_log_impl(&dword_25B2C1000, v117, (os_log_type_t)v238, "Requested %{public}ld records; fetched %{public}ld; failed %{public}ld; remaining %{public}ld; fetch count %{public}ld",
          (uint8_t *)v118,
          0x34u);
        MEMORY[0x2611621B0](v118, -1, -1);
        uint64_t v20 = (uint64_t)v233;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v117 = v116;
      }

      os_log_type_t v198 = v116;
      unint64_t v123 = *(unint64_t *)((char *)&v116->isa
                                 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
      MEMORY[0x270FA5388](v124);
      uint64_t v125 = v195;
      *((void *)&v184 - 4) = v189;
      *((void *)&v184 - 3) = v125;
      *((void *)&v184 - 2) = ObjectType;
      swift_bridgeObjectRetain();
      unint64_t v126 = v193;
      long long v127 = sub_25B2E4100(MEMORY[0x263F8EE80], (void (*)(void **, id *))sub_25B318CA8, (uint64_t)(&v184 - 3), v123);
      unint64_t v199 = v126;
      if (v126)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v181 = v217;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v181;
      }
      uint64_t v128 = v127;
      swift_bridgeObjectRelease();
      int64_t v219 = 0;
      uint64_t v129 = v128[8];
      uint64_t v200 = (char *)(v128 + 8);
      uint64_t v130 = 1 << *((unsigned char *)v128 + 32);
      uint64_t v131 = v130 < 64 ? ~(-1 << v130) : -1;
      unint64_t v132 = v131 & v129;
      int64_t v201 = (unint64_t)(v130 + 63) >> 6;
      v194 = (char *)(v201 - 1);
      uint64_t v207 = v128;
LABEL_70:
      if (v132) {
        break;
      }
      int64_t v137 = v219 + 1;
      if (__OFADD__(v219, 1)) {
        goto LABEL_146;
      }
      if (v137 < v201)
      {
        unint64_t v138 = *(void *)&v200[8 * v137];
        if (v138) {
          goto LABEL_76;
        }
        int64_t v139 = v219 + 2;
        ++v219;
        if (v137 + 1 < v201)
        {
          unint64_t v138 = *(void *)&v200[8 * v139];
          if (v138) {
            goto LABEL_79;
          }
          int64_t v219 = v137 + 1;
          if (v137 + 2 < v201)
          {
            unint64_t v138 = *(void *)&v200[8 * v137 + 16];
            if (v138)
            {
              v137 += 2;
              goto LABEL_76;
            }
            int64_t v139 = v137 + 3;
            int64_t v219 = v137 + 2;
            if (v137 + 3 < v201)
            {
              unint64_t v138 = *(void *)&v200[8 * v139];
              if (!v138)
              {
                while (1)
                {
                  int64_t v137 = v139 + 1;
                  if (__OFADD__(v139, 1)) {
                    goto LABEL_148;
                  }
                  if (v137 >= v201)
                  {
                    int64_t v219 = (int64_t)v194;
                    goto LABEL_90;
                  }
                  unint64_t v138 = *(void *)&v200[8 * v137];
                  ++v139;
                  if (v138) {
                    goto LABEL_76;
                  }
                }
              }
LABEL_79:
              int64_t v137 = v139;
LABEL_76:
              uint64_t v220 = (v138 - 1) & v138;
              unint64_t v134 = __clz(__rbit64(v138)) + (v137 << 6);
              int64_t v219 = v137;
LABEL_72:
              sub_25B3198C0(v128[6] + *(void *)(v221 + 72) * v134, (uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
              uint64_t v135 = v128[7] + *(void *)(v215 + 72) * v134;
              uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
              sub_25B3198C0(v135, (uint64_t)&v14[*(int *)(v136 + 48)], type metadata accessor for ReplicatorRecord);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56))(v14, 0, 1, v136);
              goto LABEL_91;
            }
          }
        }
      }
LABEL_90:
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 56))(v14, 1, 1, v140);
      uint64_t v220 = 0;
LABEL_91:
      sub_25B2E31F0((uint64_t)v14, (uint64_t)v16, &qword_26A4EB820);
      uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v141 - 8) + 48))(v16, 1, v141) != 1)
      {
        uint64_t v142 = (uint64_t)v16 + *(int *)(v141 + 48);
        sub_25B319928((uint64_t)v16, v20, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v16 = v205;
        sub_25B3198C0(v20, (uint64_t)v205, type metadata accessor for ReplicatorRecord.ID);
        sub_25B319928(v142, v216, type metadata accessor for ReplicatorRecord);
        uint64_t v143 = v217;
        uint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
        id v242 = v143;
        unint64_t v145 = sub_25B2D5F6C(v16);
        uint64_t v146 = v143[2];
        BOOL v147 = (v144 & 1) == 0;
        uint64_t v148 = v146 + v147;
        if (__OFADD__(v146, v147))
        {
          __break(1u);
          goto LABEL_144;
        }
        char v149 = v144;
        if (v143[3] >= v148)
        {
          a1 = v237;
          uint64_t v152 = (uint64_t)v204;
          if ((v20 & 1) == 0) {
            sub_25B2DB78C();
          }
        }
        else
        {
          sub_25B2D7250(v148, v20);
          unint64_t v150 = sub_25B2D5F6C(v16);
          a1 = v237;
          uint64_t v152 = (uint64_t)v204;
          if ((v149 & 1) != (v151 & 1))
          {
            sub_25B3801C0();
            __break(1u);
            goto LABEL_152;
          }
          unint64_t v145 = v150;
        }
        uint64_t v20 = (uint64_t)v233;
        uint64_t v153 = v242;
        if (v149)
        {
          sub_25B318C40(v216, *((void *)v242 + 7) + *(void *)(v215 + 72) * v145, type metadata accessor for ReplicatorRecord);
        }
        else
        {
          *((void *)v242 + (v145 >> 6) + 8) |= 1 << v145;
          sub_25B3198C0((uint64_t)v16, v153[6] + *(void *)(v221 + 72) * v145, type metadata accessor for ReplicatorRecord.ID);
          sub_25B319928(v216, v153[7] + *(void *)(v215 + 72) * v145, type metadata accessor for ReplicatorRecord);
          uint64_t v154 = v153[2];
          BOOL v155 = __OFADD__(v154, 1);
          uint64_t v156 = v154 + 1;
          if (v155) {
            goto LABEL_145;
          }
          v153[2] = v156;
        }
        swift_bridgeObjectRelease();
        sub_25B319990((uint64_t)v16, type metadata accessor for ReplicatorRecord.ID);
        swift_beginAccess();
        uint64_t v157 = v241;
        sub_25B380250();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v229 = v20 + *(int *)(v239 + 28);
        sub_25B3198C0(v229, v152, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v158 = v236;
        unint64_t v224 = *v235;
        int v159 = v224(v152, 1, v236);
        unint64_t v217 = v153;
        if (v159 == 1)
        {
          sub_25B380260();
        }
        else
        {
          uint64_t v160 = v202;
          (*v222)(v202, v152, v158);
          sub_25B380260();
          sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          (*v227)((uint64_t)v160, v158);
        }
        uint64_t v223 = v20 + *(int *)(v239 + 32);
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v161 = sub_25B380290();
        uint64_t v162 = -1 << *((unsigned char *)v157 + 32);
        unint64_t v163 = v161 & ~v162;
        uint64_t v7 = (uint64_t)(v157 + 7);
        unint64_t v164 = v230;
        uint64_t v165 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v224;
        if (((*(void *)((char *)v157 + ((v163 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v163) & 1) == 0)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          uint64_t v133 = v203;
          (*v211)(v203, 1, 1, v239);
          a1 = v214;
          uint64_t v14 = v213;
          uint64_t v16 = v212;
          uint64_t v128 = v207;
          goto LABEL_69;
        }
        uint64_t v166 = ~v162;
        uint64_t v238 = *(void *)(v221 + 72);
        uint64_t v228 = ~v162;
        while (2)
        {
          unint64_t v167 = v238 * v163;
          sub_25B3198C0(v157[6] + v238 * v163, (uint64_t)v164, type metadata accessor for ReplicatorRecord.ID);
          BOOL v168 = *v164 == *(void *)v20 && v164[1] == *(void *)(v20 + 8);
          if (v168 || (sub_25B3801A0() & 1) != 0)
          {
            BOOL v169 = v164[2] == *(void *)(v20 + 16) && v164[3] == *(void *)(v20 + 24);
            if (v169 || (sub_25B3801A0())
              && (v164[4] == *(void *)(v20 + 32) && v164[5] == *(void *)(v20 + 40) || (sub_25B3801A0() & 1) != 0))
            {
              uint64_t v170 = v7;
              uint64_t v171 = (uint64_t)v164 + *(int *)(v239 + 28);
              uint64_t v172 = a1 + *(int *)(v234 + 48);
              sub_25B3198C0(v171, v237, type metadata accessor for ReplicatorRecord.ID.Ownership);
              a1 = v237;
              sub_25B3198C0(v229, v172, type metadata accessor for ReplicatorRecord.ID.Ownership);
              uint64_t v173 = v236;
              if (v165(a1, 1, v236) == 1)
              {
                if (v165(v172, 1, v173) == 1) {
                  goto LABEL_130;
                }
LABEL_127:
                sub_25B2E344C(a1, &qword_26B341530);
LABEL_128:
                unint64_t v164 = v230;
                uint64_t v20 = (uint64_t)v233;
                uint64_t v166 = v228;
              }
              else
              {
                sub_25B3198C0(a1, v231, type metadata accessor for ReplicatorRecord.ID.Ownership);
                if (v165(v172, 1, v173) == 1)
                {
                  (*v227)(v231, v173);
                  goto LABEL_127;
                }
                unint64_t v174 = v210;
                (*v222)(v210, v172, v173);
                char v175 = sub_25B37F610();
                uint64_t v176 = *v227;
                (*v227)((uint64_t)v174, v173);
                v176(v231, v173);
                uint64_t v165 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v224;
                a1 = v237;
                uint64_t v7 = v170;
                if ((v175 & 1) == 0)
                {
                  sub_25B319990(v237, type metadata accessor for ReplicatorRecord.ID.Ownership);
                  goto LABEL_128;
                }
LABEL_130:
                sub_25B319990(a1, type metadata accessor for ReplicatorRecord.ID.Ownership);
                unint64_t v164 = v230;
                id v177 = &v230[*(int *)(v239 + 32)];
                uint64_t v20 = (uint64_t)v233;
                uint64_t v166 = v228;
                if (*(void *)v177 == *(void *)v223 && *((void *)v177 + 1) == *(void *)(v223 + 8)
                  || (sub_25B3801A0() & 1) != 0)
                {
                  sub_25B319990((uint64_t)v164, type metadata accessor for ReplicatorRecord.ID);
                  swift_bridgeObjectRelease();
                  char v178 = swift_isUniquelyReferenced_nonNull_native();
                  unint64_t v179 = v241;
                  id v242 = v241;
                  BOOL v241 = (void *)0x8000000000000000;
                  a1 = v214;
                  uint64_t v14 = v213;
                  uint64_t v16 = v212;
                  uint64_t v128 = v207;
                  if ((v178 & 1) == 0)
                  {
                    sub_25B3595A8();
                    unint64_t v179 = v242;
                  }
                  uint64_t v180 = v179[6] + v167;
                  uint64_t v133 = v203;
                  sub_25B319928(v180, v203, type metadata accessor for ReplicatorRecord.ID);
                  sub_25B35B590(v163);
                  BOOL v241 = v242;
                  swift_bridgeObjectRelease();
                  (*v211)(v133, 0, 1, v239);
LABEL_69:
                  swift_endAccess();
                  sub_25B2E344C(v133, (uint64_t *)&unk_26B341370);
                  sub_25B319990(v20, type metadata accessor for ReplicatorRecord.ID);
                  unint64_t v132 = v220;
                  goto LABEL_70;
                }
              }
            }
          }
          sub_25B319990((uint64_t)v164, type metadata accessor for ReplicatorRecord.ID);
          unint64_t v163 = (v163 + 1) & v166;
          if (((*(void *)(v7 + ((v163 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v163) & 1) == 0) {
            goto LABEL_68;
          }
          continue;
        }
      }

      swift_release();
      swift_beginAccess();
      if (!v241[2]) {
        goto LABEL_139;
      }
    }
    uint64_t v220 = (v132 - 1) & v132;
    unint64_t v134 = __clz(__rbit64(v132)) | (v219 << 6);
    goto LABEL_72;
  }
  unint64_t v209 = MEMORY[0x263F8EE78];
  unint64_t v217 = (void *)MEMORY[0x263F8EE80];
LABEL_139:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v217;
}

void sub_25B2FF5A8(uint8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = (void *)a3;
  uint64_t v55 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB830);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v54 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v53 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v56 = (uint64_t)&v50 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (uint64_t)&v50 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (uint64_t *)((char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v50 - v23;
  uint64_t v25 = a2;
  sub_25B2FFC50(a2, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    uint64_t v57 = v22;
    uint64_t v26 = (uint64_t)v11;
    sub_25B2E344C((uint64_t)v17, (uint64_t *)&unk_26B341370);
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_25B37F780();
    __swift_project_value_buffer(v27, (uint64_t)qword_26B3417A8);
    uint64_t v28 = v8;
    uint64_t v29 = *(int *)(v8 + 48);
    uint64_t v30 = v50;
    uint64_t v31 = v50 + v29;
    uint64_t v32 = a2 + v29;
    sub_25B3198C0(a2, v50, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v32, v31, type metadata accessor for ReplicatorRecord);
    uint64_t v33 = v56;
    sub_25B2E31F0(v30, v56, &qword_26A4EB818);
    uint64_t v34 = sub_25B37F760();
    os_log_type_t v35 = sub_25B37FCD0();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      uint64_t v59 = v37;
      uint64_t v55 = v36 + 4;
      uint64_t v38 = *(int *)(v28 + 48);
      uint64_t v39 = v26 + v38;
      uint64_t v40 = v33 + v38;
      sub_25B3198C0(v33, v26, type metadata accessor for ReplicatorRecord.ID);
      sub_25B3198C0(v40, v39, type metadata accessor for ReplicatorRecord);
      uint64_t v41 = (uint64_t)v57;
      sub_25B319928(v26, (uint64_t)v57, type metadata accessor for ReplicatorRecord.ID);
      sub_25B319990(v39, type metadata accessor for ReplicatorRecord);
      uint64_t v42 = ReplicatorRecord.ID.description.getter();
      unint64_t v44 = v43;
      sub_25B319990(v41, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v58 = sub_25B2CA048(v42, v44, &v59);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      sub_25B2E344C(v33, &qword_26A4EB818);
      _os_log_impl(&dword_25B2C1000, v34, v35, "Records from server included unknown ID: %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v37, -1, -1);
      MEMORY[0x2611621B0](v36, -1, -1);
    }
    else
    {
      sub_25B2E344C(v33, &qword_26A4EB818);
    }
  }
  else
  {
    sub_25B319928((uint64_t)v17, (uint64_t)v24, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v45 = *(int *)(v8 + 48);
    uint64_t v46 = (uint64_t)&v11[v45];
    uint64_t v47 = v25 + v45;
    sub_25B3198C0(v25, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v47, v46, type metadata accessor for ReplicatorRecord);
    uint64_t v48 = v53;
    sub_25B319928(v46, v53, type metadata accessor for ReplicatorRecord);
    sub_25B319990((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
    sub_25B318DE0((uint64_t)v24, v48);
    sub_25B3198C0((uint64_t)v24, (uint64_t)v22, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v49 = v54;
    sub_25B3198C0(v48, v54, type metadata accessor for ReplicatorRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v52);
    sub_25B2CB680(v49, v22);
    sub_25B319990((uint64_t)v24, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v48, type metadata accessor for ReplicatorRecord);
  }
}

uint64_t sub_25B2FFC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v4 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v44 = (void *)v4;
  uint64_t v45 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341390);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = sub_25B37F8A0();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  void *v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x263F8F0E0], v16);
  id v21 = v20;
  uint64_t v22 = sub_25B37F8B0();
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v24 = *(void *)(v2
                  + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDefinedIDToInternalRecordID);
  MEMORY[0x270FA5388](v23);
  *(&v41 - 2) = a1;
  swift_bridgeObjectRetain();
  sub_25B2F6D90(sub_25B318E44, v24, (uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v9, 1, v25) == 1)
  {
    sub_25B2E344C((uint64_t)v9, &qword_26B341390);
    uint64_t v20 = v44;
    uint64_t v26 = v45;
    uint64_t v22 = *(void *)(v45 + 56);
    ((void (*)(char *, uint64_t, uint64_t, void *))v22)(v15, 1, 1, v44);
  }
  else
  {
    uint64_t v27 = (uint64_t)&v9[*(int *)(v25 + 48)];
    sub_25B319928((uint64_t)v9, (uint64_t)v15, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v20 = v44;
    uint64_t v26 = v45;
    uint64_t v22 = *(void *)(v45 + 56);
    ((void (*)(char *, void, uint64_t, void *))v22)(v15, 0, 1, v44);
    sub_25B319990(v27, type metadata accessor for ReplicatorRecord.ID);
  }
  sub_25B2E2FE0((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_26B341370);
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v26 + 48))(v13, 1, v20) != 1)
  {
    sub_25B2E344C((uint64_t)v15, (uint64_t *)&unk_26B341370);
    uint64_t v39 = v43;
    sub_25B319928((uint64_t)v13, v43, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v37 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))v22)(v39, v37, 1, v20);
  }
  sub_25B2E344C((uint64_t)v13, (uint64_t *)&unk_26B341370);
  if (qword_26B3417C0 != -1) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v28 = sub_25B37F780();
  __swift_project_value_buffer(v28, (uint64_t)qword_26B3417A8);
  uint64_t v29 = v42;
  sub_25B3198C0(a1, v42, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v30 = sub_25B37F760();
  os_log_type_t v31 = sub_25B37FCD0();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = v22;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v47 = v34;
    *(_DWORD *)uint64_t v32 = 136446210;
    uint64_t v35 = ReplicatorRecord.ID.description.getter();
    uint64_t v46 = sub_25B2CA048(v35, v36, &v47);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    uint64_t v20 = v44;
    sub_25B319990(v29, type metadata accessor for ReplicatorRecord.ID);
    _os_log_impl(&dword_25B2C1000, v30, v31, "Cannot find client-defined ID for internal ID: %{public}s", v32, 0xCu);
    uint64_t v37 = 1;
    swift_arrayDestroy();
    uint64_t v38 = v34;
    uint64_t v22 = v33;
    MEMORY[0x2611621B0](v38, -1, -1);
    MEMORY[0x2611621B0](v32, -1, -1);

    sub_25B2E344C((uint64_t)v15, (uint64_t *)&unk_26B341370);
  }
  else
  {

    sub_25B319990(v29, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E344C((uint64_t)v15, (uint64_t *)&unk_26B341370);
    uint64_t v37 = 1;
  }
  uint64_t v39 = v43;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))v22)(v39, v37, 1, v20);
}

uint64_t sub_25B300288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  LOBYTE(v7) = a5;
  uint64_t v138 = a4;
  uint64_t v137 = a3;
  uint64_t v128 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCB8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  unint64_t v163 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v162 = (uint64_t)&v126 - v13;
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v153);
  uint64_t v157 = (uint64_t)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_25B37F640();
  uint64_t v15 = *(void *)(v158 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v158);
  uint64_t v146 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v131 = (char *)&v126 - v18;
  uint64_t v19 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  unint64_t v22 = (unint64_t)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v142 = (uint64_t)&v126 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v141 = (uint64_t)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v144 = *(void *)(v161 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v161);
  uint64_t v165 = (void *)((char *)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (void *)((char *)&v126 - v29);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v148 = (uint64_t)&v126 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v160 = (void *)((char *)&v126 - v33);
  uint64_t v136 = a1;
  uint64_t v140 = (void *)sub_25B2FB590();
  if (v140)
  {
    unint64_t v34 = sub_25B316C1C(a2);
    if (v6) {
      return swift_unknownObjectRelease();
    }
    uint64_t v143 = 0;
    unint64_t v171 = MEMORY[0x263F8EE80];
    unint64_t v37 = v34;
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v39 = sub_25B3430F0(v38);
    unint64_t v139 = v37;
    swift_bridgeObjectRelease();
    unint64_t v169 = MEMORY[0x263F8EE78];
    unint64_t v170 = v39;
    BOOL v168 = 0;
    if (qword_26B3417C0 != -1) {
      goto LABEL_112;
    }
LABEL_6:
    uint64_t v40 = sub_25B37F780();
    uint64_t v130 = __swift_project_value_buffer(v40, (uint64_t)qword_26B3417A8);
    uint64_t v41 = sub_25B37F760();
    os_log_type_t v42 = sub_25B37FCD0();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_25B2C1000, v41, v42, "Begin fetching URLs in batches", v43, 2u);
      MEMORY[0x2611621B0](v43, -1, -1);
    }

    uint64_t v135 = *(void *)(v139 + 16);
    if (v135)
    {
      int v129 = v7 & 1;
      uint64_t v44 = v144;
      unint64_t v134 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      unint64_t v133 = v139 + v134;
      swift_beginAccess();
      unint64_t v45 = v139;
      unint64_t v46 = 0;
      uint64_t v156 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      BOOL v147 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
      unint64_t v150 = (void (**)(uint64_t, uint64_t))(v15 + 8);
      unint64_t v132 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
      long long v127 = &v167;
      *(void *)&long long v47 = 134349568;
      long long v126 = v47;
      uint64_t v7 = &qword_26A4EBCC0;
      unint64_t v152 = v22;
      uint64_t v48 = v160;
      char v151 = v30;
      while (1)
      {
        if (v46 >= *(void *)(v45 + 16))
        {
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          swift_once();
          goto LABEL_6;
        }
        uint64_t v49 = *(void *)(v144 + 72);
        unint64_t v145 = v46;
        uint64_t v164 = v49;
        sub_25B3198C0(v133 + v49 * v46, (uint64_t)v48, type metadata accessor for ReplicatorRecord.ID);
        sub_25B3198C0((uint64_t)v48, v148, type metadata accessor for ReplicatorRecord.ID);
        swift_beginAccess();
        unint64_t v50 = v169;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v50 = sub_25B3103B4(0, *(void *)(v50 + 16) + 1, 1, v50, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
        }
        uint64_t v51 = v156;
        unint64_t v53 = *(void *)(v50 + 16);
        unint64_t v52 = *(void *)(v50 + 24);
        if (v53 >= v52 >> 1) {
          unint64_t v50 = sub_25B3103B4(v52 > 1, v53 + 1, 1, v50, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
        }
        *(void *)(v50 + 16) = v53 + 1;
        sub_25B319928(v148, v50 + v134 + v53 * v164, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v169 = v50;
        swift_endAccess();
        swift_beginAccess();
        unint64_t v22 = v170;
        sub_25B380250();
        uint64_t v54 = (uint64_t)v160;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v159 = v54 + *(int *)(v161 + 28);
        uint64_t v55 = v142;
        sub_25B3198C0(v159, v142, type metadata accessor for ReplicatorRecord.ID.Ownership);
        BOOL v155 = *v51;
        uint64_t v56 = v158;
        if (v155(v55, 1, v158) == 1)
        {
          sub_25B380260();
        }
        else
        {
          uint64_t v57 = v131;
          (*v147)(v131, v55, v56);
          sub_25B380260();
          sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          (*v150)((uint64_t)v57, v56);
        }
        char v149 = (void *)((char *)v160 + *(int *)(v161 + 32));
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v58 = sub_25B380290();
        uint64_t v59 = -1 << *(unsigned char *)(v22 + 32);
        unint64_t v60 = v58 & ~v59;
        unint64_t v61 = v22 + 56;
        if ((*(void *)(v22 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60))
        {
          uint64_t v62 = ~v59;
          uint64_t v63 = v157;
          uint64_t v48 = v160;
          uint64_t v154 = ~v59;
          while (1)
          {
            unint64_t v64 = v60 * v164;
            sub_25B3198C0(*(void *)(v22 + 48) + v60 * v164, (uint64_t)v30, type metadata accessor for ReplicatorRecord.ID);
            BOOL v65 = *v30 == *v48 && v30[1] == v48[1];
            if (!v65 && (sub_25B3801A0() & 1) == 0) {
              goto LABEL_24;
            }
            BOOL v66 = v30[2] == v48[2] && v30[3] == v48[3];
            if (!v66 && (sub_25B3801A0() & 1) == 0
              || (v30[4] != v48[4] || v30[5] != v48[5]) && (sub_25B3801A0() & 1) == 0)
            {
              goto LABEL_24;
            }
            unint64_t v67 = v30;
            unint64_t v68 = v61;
            unint64_t v69 = v22;
            uint64_t v70 = v63 + *(int *)(v153 + 48);
            sub_25B3198C0((uint64_t)v67 + *(int *)(v161 + 28), v63, type metadata accessor for ReplicatorRecord.ID.Ownership);
            sub_25B3198C0(v159, v70, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v71 = v158;
            uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v155;
            if (v155(v63, 1, v158) == 1)
            {
              int v73 = v72(v70, 1, v71);
              unint64_t v61 = v68;
              if (v73 != 1) {
                goto LABEL_43;
              }
            }
            else
            {
              uint64_t v74 = v63;
              uint64_t v75 = v152;
              sub_25B3198C0(v74, v152, type metadata accessor for ReplicatorRecord.ID.Ownership);
              if (v72(v70, 1, v71) == 1)
              {
                (*v150)(v75, v71);
                unint64_t v61 = v68;
LABEL_43:
                uint64_t v63 = v157;
                sub_25B2E344C(v157, &qword_26B341530);
LABEL_44:
                uint64_t v48 = v160;
                uint64_t v7 = &qword_26A4EBCC0;
                uint64_t v30 = v151;
                uint64_t v62 = v154;
                goto LABEL_24;
              }
              uint64_t v76 = v146;
              (*v147)(v146, v70, v71);
              char v77 = sub_25B37F610();
              uint64_t v78 = *v150;
              (*v150)((uint64_t)v76, v71);
              v78(v152, v71);
              unint64_t v22 = v69;
              unint64_t v61 = v68;
              if ((v77 & 1) == 0)
              {
                uint64_t v63 = v157;
                sub_25B319990(v157, type metadata accessor for ReplicatorRecord.ID.Ownership);
                goto LABEL_44;
              }
            }
            uint64_t v63 = v157;
            sub_25B319990(v157, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v30 = v151;
            uint64_t v79 = (void *)((char *)v151 + *(int *)(v161 + 32));
            uint64_t v48 = v160;
            uint64_t v7 = &qword_26A4EBCC0;
            uint64_t v62 = v154;
            if (*v79 == *v149 && v79[1] == v149[1] || (sub_25B3801A0() & 1) != 0)
            {
              sub_25B319990((uint64_t)v30, type metadata accessor for ReplicatorRecord.ID);
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v120 = v170;
              uint64_t v166 = (void *)v170;
              unint64_t v170 = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_25B3595A8();
                unint64_t v120 = (unint64_t)v166;
              }
              uint64_t v80 = v141;
              sub_25B319928(*(void *)(v120 + 48) + v64, v141, type metadata accessor for ReplicatorRecord.ID);
              sub_25B35B590(v60);
              unint64_t v170 = (unint64_t)v166;
              swift_bridgeObjectRelease();
              (*v132)(v80, 0, 1, v161);
              uint64_t v48 = v160;
              goto LABEL_52;
            }
LABEL_24:
            sub_25B319990((uint64_t)v30, type metadata accessor for ReplicatorRecord.ID);
            unint64_t v60 = (v60 + 1) & v62;
            if (((*(void *)(v61 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60) & 1) == 0) {
              goto LABEL_51;
            }
          }
        }
        uint64_t v48 = v160;
LABEL_51:
        swift_bridgeObjectRelease();
        uint64_t v80 = v141;
        (*v132)(v141, 1, 1, v161);
LABEL_52:
        swift_endAccess();
        sub_25B2E344C(v80, (uint64_t *)&unk_26B341370);
        uint64_t v15 = (uint64_t)v163;
        if (*(void *)(v169 + 16) <= 0x32uLL && *(void *)(v170 + 16))
        {
          sub_25B319990((uint64_t)v48, type metadata accessor for ReplicatorRecord.ID);
          goto LABEL_12;
        }
        uint64_t v81 = sub_25B37F760();
        os_log_type_t v82 = sub_25B37FCD0();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = v126;
          uint64_t v166 = v168;
          sub_25B37FD70();
          *(_WORD *)(v83 + 12) = 2050;
          uint64_t v166 = *(void **)(v169 + 16);
          sub_25B37FD70();
          *(_WORD *)(v83 + 22) = 2048;
          uint64_t v166 = *(void **)(v170 + 16);
          sub_25B37FD70();
          _os_log_impl(&dword_25B2C1000, v81, v82, "Fetching batch %{public}ld with count %{public}ld IDs; %ld IDs remaining",
            (uint8_t *)v83,
            0x20u);
          uint64_t v84 = v83;
          uint64_t v15 = (uint64_t)v163;
          MEMORY[0x2611621B0](v84, -1, -1);
        }

        unint64_t v85 = (void *)swift_bridgeObjectRetain();
        uint64_t v86 = v143;
        uint64_t v87 = sub_25B3018C4(v85, v137, v138, v129, v140);
        if (v86)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          sub_25B319990((uint64_t)v160, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
        uint64_t v88 = v87;
        uint64_t v143 = 0;
        swift_bridgeObjectRelease();
        uint64_t v89 = 0;
        uint64_t v90 = *(void *)(v88 + 64);
        BOOL v155 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v88 + 64);
        uint64_t v91 = 1 << *(unsigned char *)(v88 + 32);
        if (v91 < 64) {
          uint64_t v92 = ~(-1 << v91);
        }
        else {
          uint64_t v92 = -1;
        }
        unint64_t v22 = v92 & v90;
        uint64_t v159 = (unint64_t)(v91 + 63) >> 6;
        uint64_t v154 = v159 - 1;
        while (1)
        {
          if (v22)
          {
            unint64_t v94 = __clz(__rbit64(v22));
            v22 &= v22 - 1;
            unint64_t v95 = v94 | (v89 << 6);
            goto LABEL_64;
          }
          uint64_t v98 = v89 + 1;
          if (__OFADD__(v89, 1)) {
            goto LABEL_108;
          }
          if (v98 < v159)
          {
            unint64_t v99 = *((void *)v155 + v98);
            if (v99) {
              goto LABEL_68;
            }
            uint64_t v100 = v89 + 2;
            ++v89;
            if (v98 + 1 < v159)
            {
              unint64_t v99 = *((void *)v155 + v100);
              if (v99) {
                goto LABEL_71;
              }
              uint64_t v89 = v98 + 1;
              if (v98 + 2 < v159)
              {
                unint64_t v99 = *((void *)v155 + v98 + 2);
                if (v99)
                {
                  v98 += 2;
                  goto LABEL_68;
                }
                uint64_t v100 = v98 + 3;
                uint64_t v89 = v98 + 2;
                if (v98 + 3 < v159)
                {
                  unint64_t v99 = *((void *)v155 + v100);
                  if (!v99)
                  {
                    while (1)
                    {
                      uint64_t v98 = v100 + 1;
                      if (__OFADD__(v100, 1)) {
                        goto LABEL_111;
                      }
                      if (v98 >= v159)
                      {
                        uint64_t v89 = v154;
                        goto LABEL_82;
                      }
                      unint64_t v99 = *((void *)v155 + v98);
                      ++v100;
                      if (v99) {
                        goto LABEL_68;
                      }
                    }
                  }
LABEL_71:
                  uint64_t v98 = v100;
LABEL_68:
                  unint64_t v22 = (v99 - 1) & v99;
                  unint64_t v95 = __clz(__rbit64(v99)) + (v98 << 6);
                  uint64_t v89 = v98;
LABEL_64:
                  sub_25B3198C0(*(void *)(v88 + 48) + v95 * v164, v15, type metadata accessor for ReplicatorRecord.ID);
                  uint64_t v96 = *(void *)(v88 + 56);
                  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
                  *(void *)(v15 + *(int *)(v97 + 48)) = *(void *)(v96 + 8 * v95);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v15, 0, 1, v97);
                  swift_bridgeObjectRetain();
                  goto LABEL_83;
                }
              }
            }
          }
LABEL_82:
          uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v15, 1, 1, v101);
          unint64_t v22 = 0;
LABEL_83:
          uint64_t v102 = v162;
          sub_25B2E31F0(v15, v162, &qword_26A4EBCB8);
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 48))(v102, 1, v103) == 1)break; {
          uint64_t v104 = *(void *)(v102 + *(int *)(v103 + 48));
          }
          uint64_t v105 = v102;
          uint64_t v106 = v165;
          sub_25B319928(v105, (uint64_t)v165, type metadata accessor for ReplicatorRecord.ID);
          unint64_t v107 = v171;
          LODWORD(v7) = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v166 = (void *)v107;
          unint64_t v171 = 0x8000000000000000;
          unint64_t v109 = sub_25B2D5F6C(v106);
          uint64_t v110 = *(void *)(v107 + 16);
          BOOL v111 = (v108 & 1) == 0;
          uint64_t v112 = v110 + v111;
          if (__OFADD__(v110, v111))
          {
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          uint64_t v15 = v108;
          if (*(void *)(v107 + 24) >= v112)
          {
            if ((v7 & 1) == 0) {
              sub_25B2DBABC();
            }
          }
          else
          {
            sub_25B2D79A8(v112, (int)v7);
            unint64_t v113 = sub_25B2D5F6C(v165);
            if ((v15 & 1) != (v114 & 1))
            {
              uint64_t result = sub_25B3801C0();
              __break(1u);
              return result;
            }
            unint64_t v109 = v113;
          }
          uint64_t v7 = &qword_26A4EBCC0;
          uint64_t v115 = v166;
          if (v15)
          {
            uint64_t v93 = v166[7];
            swift_bridgeObjectRelease();
            *(void *)(v93 + 8 * v109) = v104;
          }
          else
          {
            v166[(v109 >> 6) + 8] |= 1 << v109;
            sub_25B3198C0((uint64_t)v165, v115[6] + v109 * v164, type metadata accessor for ReplicatorRecord.ID);
            *(void *)(v115[7] + 8 * v109) = v104;
            uint64_t v116 = v115[2];
            BOOL v117 = __OFADD__(v116, 1);
            uint64_t v118 = v116 + 1;
            if (v117) {
              goto LABEL_107;
            }
            v115[2] = v118;
          }
          unint64_t v171 = (unint64_t)v115;
          swift_bridgeObjectRelease();
          sub_25B319990((uint64_t)v165, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v15 = (uint64_t)v163;
        }
        swift_release();
        unint64_t v169 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
        uint64_t v48 = v160;
        sub_25B319990((uint64_t)v160, type metadata accessor for ReplicatorRecord.ID);
        if (__OFADD__(v168, 1)) {
          goto LABEL_110;
        }
        BOOL v168 = (void *)((char *)v168 + 1);
LABEL_12:
        unint64_t v46 = v145 + 1;
        unint64_t v45 = v139;
        if (v145 + 1 == v135)
        {
          swift_bridgeObjectRelease();
          unint64_t v122 = v171;
          uint64_t v121 = v168;
          goto LABEL_100;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v121 = 0;
    unint64_t v122 = MEMORY[0x263F8EE80];
LABEL_100:
    swift_bridgeObjectRetain();
    unint64_t v123 = sub_25B37F760();
    os_log_type_t v124 = sub_25B37FCD0();
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = swift_slowAlloc();
      *(_DWORD *)uint64_t v125 = 134349312;
      uint64_t v166 = *(void **)(v122 + 16);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      *(_WORD *)(v125 + 12) = 2050;
      uint64_t v166 = v121;
      sub_25B37FD70();
      _os_log_impl(&dword_25B2C1000, v123, v124, "End fetching URLs in batches; fetched %{public}ld in %{public}ld batches",
        (uint8_t *)v125,
        0x16u);
      MEMORY[0x2611621B0](v125, -1, -1);

      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    *uint64_t v128 = v171;
LABEL_105:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v36 = 3;
    *(void *)(v36 + 8) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_25B3018C4(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  unint64_t v7 = v6;
  uint64_t v8 = v5;
  id v197 = a5;
  LODWORD(v241) = a4;
  uint64_t v196 = a3;
  uint64_t v194 = a2;
  uint64_t v250 = *MEMORY[0x263EF8340];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCB8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (void *)((char *)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v220 = (char *)&v189 - v14;
  uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  uint64_t v15 = MEMORY[0x270FA5388](v238);
  uint64_t v242 = (uint64_t)&v189 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v236 = (uint64_t)&v189 - v17;
  uint64_t v240 = sub_25B37F640();
  unint64_t v18 = *(void *)(v240 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v240);
  unint64_t v217 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v213 = (char *)&v189 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v208 = (char *)&v189 - v23;
  uint64_t v24 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v235 = (uint64_t)&v189 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v210 = (uint64_t)&v189 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v222 = (uint64_t)&v189 - v30;
  MEMORY[0x270FA5388](v29);
  v204 = (char *)&v189 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v209 = (uint64_t)&v189 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v203 = (uint64_t)&v189 - v35;
  uint64_t v243 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v224 = *(void *)(v243 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v243);
  uint64_t v234 = (char *)&v189 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v211 = (void *)((char *)&v189 - v39);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v237 = (char *)&v189 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  unint64_t v227 = (char *)&v189 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v215 = (uint64_t)&v189 - v45;
  MEMORY[0x270FA5388](v44);
  uint64_t v230 = (void *)((char *)&v189 - v46);
  uint64_t v47 = sub_25B37F8A0();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  unint64_t v50 = (void *)((char *)&v189 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v195 = v8;
  uint64_t v51 = *(void **)(v8 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *unint64_t v50 = v51;
  (*(void (**)(void *, void, uint64_t))(v48 + 104))(v50, *MEMORY[0x263F8F0E0], v47);
  id v52 = v51;
  char v53 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v48 + 8))(v50, v47);
  if ((v53 & 1) == 0) {
    goto LABEL_153;
  }
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v55 = sub_25B3430F0(v54);
  swift_bridgeObjectRelease();
  uint64_t v244 = 0;
  char v245 = (void *)v55;
  if (qword_26B3417C0 != -1) {
LABEL_154:
  }
    swift_once();
  uint64_t v56 = sub_25B37F780();
  uint64_t v57 = __swift_project_value_buffer(v56, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain();
  uint64_t v198 = v57;
  uint64_t v58 = sub_25B37F760();
  os_log_type_t v59 = sub_25B37FCD0();
  BOOL v60 = os_log_type_enabled(v58, v59);
  int64_t v201 = a1;
  unint64_t v61 = v227;
  if (v60)
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 134349056;
    id v246 = (id)a1[2];
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v58, v59, "Begin fetch for %{public}ld URLs", v62, 0xCu);
    MEMORY[0x2611621B0](v62, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  a1 = v220;
  if (v245[2])
  {
    uint64_t v192 = sub_25B37F440();
    uint64_t v239 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    int64_t v226 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    uint64_t v229 = (void (**)(uint64_t, uint64_t))(v18 + 8);
    uint64_t v218 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v224 + 56);
    uint64_t v190 = &v247;
    unint64_t v216 = MEMORY[0x263F8EE78];
    int v191 = v241 & 1;
    *(void *)&long long v63 = 134350080;
    long long v189 = v63;
    uint64_t v221 = (void *)MEMORY[0x263F8EE80];
    int64_t v219 = v13;
    while (1)
    {
      id v246 = v201;
      __int16 v247 = 256;
      uint64_t v248 = v196;
      char v249 = v191;
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_25B37F430();
      sub_25B318AE0();
      uint64_t v64 = sub_25B37F420();
      int64_t v200 = v7;
      if (v7)
      {
LABEL_156:
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      unint64_t v18 = v64;
      unint64_t v66 = v65;
      unint64_t v67 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v18, v66);
      swift_bridgeObjectRelease();
      swift_release();
      id v246 = 0;
      unint64_t v68 = objc_msgSend(v197, sel_recordsWithParameters_error_, v67, &v246);

      if (!v68)
      {
        id v186 = v246;
        uint64_t v185 = v221;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v187 = sub_25B37F470();

        uint64_t v205 = v187;
        swift_willThrow();
        goto LABEL_146;
      }
      unint64_t v202 = v68;
      uint64_t v199 = OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs;
      int64_t v69 = *(int64_t *)((char *)&v68->isa
                              + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs);
      uint64_t v212 = *(void **)(v69 + 16);
      if (v212)
      {
        unint64_t v206 = (*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80);
        uint64_t v205 = v69 + v206;
        id v70 = v246;
        swift_bridgeObjectRetain();
        unint64_t v7 = 0;
        uint64_t v71 = v236;
        int64_t v207 = v69;
        while (1)
        {
          if (v7 >= *(void *)(v69 + 16))
          {
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
            goto LABEL_151;
          }
          uint64_t v241 = *(void *)(v224 + 72);
          uint64_t v73 = (uint64_t)v230;
          sub_25B3198C0(v205 + v241 * v7, (uint64_t)v230, type metadata accessor for ReplicatorRecord.ID);
          sub_25B3198C0(v73, v215, type metadata accessor for ReplicatorRecord.ID);
          unint64_t v74 = v216;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v74 = sub_25B3103B4(0, *(void *)(v74 + 16) + 1, 1, v74, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          uint64_t v75 = (uint64_t)v204;
          unint64_t v77 = *(void *)(v74 + 16);
          unint64_t v76 = *(void *)(v74 + 24);
          if (v77 >= v76 >> 1) {
            unint64_t v74 = sub_25B3103B4(v76 > 1, v77 + 1, 1, v74, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          *(void *)(v74 + 16) = v77 + 1;
          sub_25B319928(v215, v74 + v206 + v77 * v241, type metadata accessor for ReplicatorRecord.ID);
          swift_beginAccess();
          uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v245;
          sub_25B380250();
          uint64_t v79 = (uint64_t)v230;
          uint64_t v232 = v78;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v231 = v79 + *(int *)(v243 + 28);
          sub_25B3198C0(v231, v75, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v228 = *v239;
          uint64_t v80 = v240;
          int v81 = v228(v75, 1, v240);
          unint64_t v216 = v74;
          int64_t v214 = v7;
          if (v81 == 1)
          {
            sub_25B380260();
          }
          else
          {
            os_log_type_t v82 = v208;
            (*v226)(v208, v75, v80);
            sub_25B380260();
            sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
            sub_25B37F950();
            (*v229)((uint64_t)v82, v80);
          }
          unint64_t v18 = (unint64_t)v237;
          uint64_t v83 = (uint64_t)v230;
          uint64_t v223 = (void *)((char *)v230 + *(int *)(v243 + 32));
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v84 = sub_25B380290();
          unint64_t v85 = (void *)v83;
          uint64_t v86 = v232;
          uint64_t v87 = -1 << *((unsigned char *)v232 + 32);
          unint64_t v88 = v84 & ~v87;
          uint64_t v89 = (void *)((char *)v232 + 56);
          if (((*(void *)((char *)v232 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v88) & 1) == 0)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            uint64_t v72 = v203;
            (*v218)(v203, 1, 1, v243);
            a1 = v220;
            goto LABEL_14;
          }
          uint64_t v90 = ~v87;
          int64_t v225 = (void *)((char *)v232 + 56);
          while (1)
          {
            uint64_t v91 = v88 * v241;
            sub_25B3198C0(*((void *)v86 + 6) + v88 * v241, (uint64_t)v61, type metadata accessor for ReplicatorRecord.ID);
            BOOL v92 = *v61 == *v85 && v61[1] == v85[1];
            if (!v92 && (sub_25B3801A0() & 1) == 0) {
              goto LABEL_26;
            }
            BOOL v93 = v61[2] == v85[2] && v61[3] == v85[3];
            if (!v93 && (sub_25B3801A0() & 1) == 0
              || (v61[4] != v85[4] || v61[5] != v85[5]) && (sub_25B3801A0() & 1) == 0)
            {
              goto LABEL_26;
            }
            unint64_t v233 = v91;
            uint64_t v94 = v90;
            uint64_t v95 = v71 + *(int *)(v238 + 48);
            sub_25B3198C0((uint64_t)v61 + *(int *)(v243 + 28), v236, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v71 = v236;
            sub_25B3198C0(v231, v95, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v96 = v240;
            uint64_t v97 = v228;
            if (v228(v71, 1, v240) == 1)
            {
              int v98 = v97(v95, 1, v96);
              uint64_t v86 = v232;
              uint64_t v90 = v94;
              if (v98 == 1) {
                goto LABEL_48;
              }
              goto LABEL_45;
            }
            uint64_t v99 = v222;
            sub_25B3198C0(v71, v222, type metadata accessor for ReplicatorRecord.ID.Ownership);
            if (v97(v95, 1, v96) != 1) {
              break;
            }
            (*v229)(v99, v96);
            unint64_t v18 = (unint64_t)v237;
            uint64_t v86 = v232;
            uint64_t v89 = v225;
            uint64_t v90 = v94;
LABEL_45:
            sub_25B2E344C(v71, &qword_26B341530);
LABEL_46:
            unint64_t v61 = v227;
            unint64_t v85 = v230;
LABEL_26:
            sub_25B319990((uint64_t)v61, type metadata accessor for ReplicatorRecord.ID);
            unint64_t v88 = (v88 + 1) & v90;
            if (((*(void *)((char *)v89 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
              goto LABEL_13;
            }
          }
          uint64_t v100 = v213;
          (*v226)(v213, v95, v96);
          char v101 = sub_25B37F610();
          uint64_t v102 = *v229;
          (*v229)((uint64_t)v100, v96);
          v102(v99, v96);
          uint64_t v71 = v236;
          unint64_t v18 = (unint64_t)v237;
          uint64_t v86 = v232;
          uint64_t v89 = v225;
          uint64_t v90 = v94;
          if ((v101 & 1) == 0)
          {
            sub_25B319990(v236, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_46;
          }
LABEL_48:
          sub_25B319990(v71, type metadata accessor for ReplicatorRecord.ID.Ownership);
          unint64_t v61 = v227;
          uint64_t v103 = &v227[*(int *)(v243 + 32)];
          unint64_t v85 = v230;
          uint64_t v104 = v233;
          if ((*(void *)v103 != *v223 || *((void *)v103 + 1) != v223[1]) && (sub_25B3801A0() & 1) == 0) {
            goto LABEL_26;
          }
          sub_25B319990((uint64_t)v61, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v106 = v245;
          id v246 = v245;
          char v245 = (void *)0x8000000000000000;
          a1 = v220;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_25B3595A8();
            uint64_t v106 = v246;
          }
          uint64_t v72 = v203;
          sub_25B319928(v106[6] + v104, v203, type metadata accessor for ReplicatorRecord.ID);
          sub_25B35B590(v88);
          char v245 = v246;
          swift_bridgeObjectRelease();
          (*v218)(v72, 0, 1, v243);
          unint64_t v85 = v230;
LABEL_14:
          unint64_t v7 = v214 + 1;
          swift_endAccess();
          sub_25B2E344C(v72, (uint64_t *)&unk_26B341370);
          sub_25B319990((uint64_t)v85, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v13 = v219;
          int64_t v69 = v207;
          if ((void *)v7 == v212)
          {
            swift_bridgeObjectRelease();
            goto LABEL_57;
          }
        }
      }
      id v107 = v246;
      unint64_t v18 = (unint64_t)v237;
LABEL_57:
      swift_beginAccess();
      unint64_t v7 = (unint64_t)&qword_26A4EBCC0;
      if (__OFADD__(v244, 1))
      {
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
      ++v244;
      uint64_t v108 = v202;
      unint64_t v109 = v201;
      swift_bridgeObjectRetain_n();
      uint64_t v110 = v108;
      BOOL v111 = sub_25B37F760();
      int v112 = sub_25B37FCD0();
      if (os_log_type_enabled(v111, (os_log_type_t)v112))
      {
        LODWORD(v241) = v112;
        uint64_t v113 = swift_slowAlloc();
        *(_DWORD *)uint64_t v113 = v189;
        char v114 = (void *)v109[2];
        swift_bridgeObjectRelease();
        id v246 = v114;
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        *(_WORD *)(v113 + 12) = 2050;
        unint64_t v115 = *(unint64_t *)((char *)&v110->isa
                                   + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
        if (v115 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v116 = (void *)sub_25B37FF90();

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v116 = *(void **)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v117 = v242;
        id v246 = v116;
        sub_25B37FD70();

        *(_WORD *)(v113 + 22) = 2050;
        uint64_t v118 = (void *)(*(void **)((char *)&v202->isa + v199))[2];

        id v246 = v118;
        sub_25B37FD70();

        *(_WORD *)(v113 + 32) = 2050;
        id v246 = (id)v245[2];
        sub_25B37FD70();
        *(_WORD *)(v113 + 42) = 2050;
        id v246 = v244;
        sub_25B37FD70();
        _os_log_impl(&dword_25B2C1000, v111, (os_log_type_t)v241, "Requested %{public}ld URLs; fetched %{public}ld; failed %{public}ld; remaining %{public}ld; fetch count %{public}ld",
          (uint8_t *)v113,
          0x34u);
        MEMORY[0x2611621B0](v113, -1, -1);
        unint64_t v18 = (unint64_t)v237;
        unint64_t v7 = (unint64_t)&qword_26A4EBCC0;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        BOOL v111 = v110;
        uint64_t v117 = v242;
      }

      unint64_t v202 = v110;
      unint64_t v119 = *(unint64_t *)((char *)&v110->isa
                                 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
      MEMORY[0x270FA5388](v120);
      uint64_t v121 = v194;
      *((void *)&v189 - 4) = v195;
      *((void *)&v189 - 3) = v121;
      *((void *)&v189 - 2) = ObjectType;
      swift_bridgeObjectRetain();
      int64_t v122 = v200;
      unint64_t v123 = sub_25B2E4100(MEMORY[0x263F8EE80], (void (*)(void **, id *))sub_25B318B34, (uint64_t)(&v189 - 3), v119);
      uint64_t v205 = v122;
      if (v122)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v185 = v221;
        swift_bridgeObjectRelease();
        goto LABEL_146;
      }
      os_log_type_t v124 = v123;
      swift_bridgeObjectRelease();
      int64_t v214 = 0;
      uint64_t v125 = v124[8];
      unint64_t v206 = (unint64_t)(v124 + 8);
      uint64_t v126 = 1 << *((unsigned char *)v124 + 32);
      uint64_t v127 = v126 < 64 ? ~(-1 << v126) : -1;
      unint64_t v128 = v127 & v125;
      int64_t v207 = (unint64_t)(v126 + 63) >> 6;
      int64_t v200 = v207 - 1;
      uint64_t v212 = v124;
LABEL_70:
      if (v128) {
        break;
      }
      int64_t v135 = v214 + 1;
      if (__OFADD__(v214, 1)) {
        goto LABEL_150;
      }
      if (v135 < v207)
      {
        unint64_t v136 = *(void *)(v206 + 8 * v135);
        if (v136) {
          goto LABEL_76;
        }
        int64_t v137 = v214 + 2;
        ++v214;
        if (v135 + 1 < v207)
        {
          unint64_t v136 = *(void *)(v206 + 8 * v137);
          if (v136) {
            goto LABEL_79;
          }
          int64_t v214 = v135 + 1;
          if (v135 + 2 < v207)
          {
            unint64_t v136 = *(void *)(v206 + 8 * (v135 + 2));
            if (v136)
            {
              v135 += 2;
              goto LABEL_76;
            }
            int64_t v137 = v135 + 3;
            int64_t v214 = v135 + 2;
            if (v135 + 3 < v207)
            {
              unint64_t v136 = *(void *)(v206 + 8 * v137);
              if (!v136)
              {
                while (1)
                {
                  int64_t v135 = v137 + 1;
                  if (__OFADD__(v137, 1)) {
                    goto LABEL_152;
                  }
                  if (v135 >= v207)
                  {
                    int64_t v214 = v200;
                    goto LABEL_90;
                  }
                  unint64_t v136 = *(void *)(v206 + 8 * v135);
                  ++v137;
                  if (v136) {
                    goto LABEL_76;
                  }
                }
              }
LABEL_79:
              int64_t v135 = v137;
LABEL_76:
              uint64_t v131 = (v136 - 1) & v136;
              unint64_t v132 = __clz(__rbit64(v136)) + (v135 << 6);
              int64_t v214 = v135;
LABEL_72:
              sub_25B3198C0(v124[6] + *(void *)(v224 + 72) * v132, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
              uint64_t v133 = v124[7];
              uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
              *(void *)((char *)v13 + *(int *)(v134 + 48)) = *(void *)(v133 + 8 * v132);
              (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v13, 0, 1, v134);
              swift_bridgeObjectRetain();
              goto LABEL_91;
            }
          }
        }
      }
LABEL_90:
      uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v13, 1, 1, v138);
      uint64_t v131 = 0;
LABEL_91:
      sub_25B2E31F0((uint64_t)v13, (uint64_t)a1, &qword_26A4EBCB8);
      uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCC0);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v139 - 8) + 48))(a1, 1, v139) != 1)
      {
        uint64_t v223 = (void *)v131;
        uint64_t v140 = *(void *)((char *)a1 + *(int *)(v139 + 48));
        sub_25B319928((uint64_t)a1, v18, type metadata accessor for ReplicatorRecord.ID);
        a1 = v211;
        sub_25B3198C0(v18, (uint64_t)v211, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v141 = v221;
        int v142 = swift_isUniquelyReferenced_nonNull_native();
        id v246 = v141;
        unint64_t v18 = sub_25B2D5F6C(a1);
        uint64_t v144 = v141[2];
        BOOL v145 = (v143 & 1) == 0;
        uint64_t v146 = v144 + v145;
        if (__OFADD__(v144, v145))
        {
          __break(1u);
          goto LABEL_148;
        }
        char v147 = v143;
        if (v141[3] >= v146)
        {
          if (v142)
          {
            uint64_t v13 = v246;
            if ((v143 & 1) == 0) {
              goto LABEL_96;
            }
          }
          else
          {
            sub_25B2DBABC();
            uint64_t v13 = v246;
            if ((v147 & 1) == 0) {
              goto LABEL_96;
            }
          }
        }
        else
        {
          sub_25B2D79A8(v146, v142);
          unint64_t v148 = sub_25B2D5F6C(a1);
          if ((v147 & 1) != (v149 & 1))
          {
            sub_25B3801C0();
            __break(1u);
            goto LABEL_156;
          }
          unint64_t v18 = v148;
          uint64_t v13 = v246;
          if ((v147 & 1) == 0)
          {
LABEL_96:
            v13[(v18 >> 6) + 8] |= 1 << v18;
            sub_25B3198C0((uint64_t)a1, v13[6] + *(void *)(v224 + 72) * v18, type metadata accessor for ReplicatorRecord.ID);
            *(void *)(v13[7] + 8 * v18) = v140;
            uint64_t v150 = v13[2];
            BOOL v151 = __OFADD__(v150, 1);
            uint64_t v152 = v150 + 1;
            if (v151) {
              goto LABEL_149;
            }
            v13[2] = v152;
LABEL_101:
            swift_bridgeObjectRelease();
            sub_25B319990((uint64_t)a1, type metadata accessor for ReplicatorRecord.ID);
            swift_beginAccess();
            uint64_t v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v245;
            sub_25B380250();
            unint64_t v18 = (unint64_t)v237;
            uint64_t v228 = v154;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_25B37FA10();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_25B37FA10();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_25B37FA10();
            swift_bridgeObjectRelease();
            unint64_t v233 = v18 + *(int *)(v243 + 28);
            uint64_t v155 = v210;
            sub_25B3198C0(v233, v210, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v232 = *v239;
            uint64_t v156 = v240;
            int v157 = v232(v155, 1, v240);
            uint64_t v221 = v13;
            if (v157 == 1)
            {
              sub_25B380260();
            }
            else
            {
              uint64_t v158 = v208;
              (*v226)(v208, v155, v156);
              sub_25B380260();
              sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
              sub_25B37F950();
              (*v229)((uint64_t)v158, v156);
            }
            int64_t v225 = (void *)(v18 + *(int *)(v243 + 32));
            swift_bridgeObjectRetain();
            sub_25B37FA10();
            swift_bridgeObjectRelease();
            uint64_t v159 = sub_25B380290();
            uint64_t v160 = v228;
            uint64_t v161 = -1 << *((unsigned char *)v228 + 32);
            unint64_t v162 = v159 & ~v161;
            uint64_t v241 = (uint64_t)v228 + 56;
            unint64_t v163 = v234;
            if (((*(void *)((char *)v228 + ((v162 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v162) & 1) == 0)
            {
LABEL_68:
              swift_bridgeObjectRelease();
              uint64_t v129 = v209;
              (*v218)(v209, 1, 1, v243);
              uint64_t v13 = v219;
              a1 = v220;
              goto LABEL_69;
            }
            uint64_t v164 = ~v161;
            uint64_t v165 = *(void *)(v224 + 72);
            uint64_t v231 = v165;
            while (2)
            {
              unint64_t v166 = v165 * v162;
              sub_25B3198C0(*((void *)v160 + 6) + v165 * v162, (uint64_t)v163, type metadata accessor for ReplicatorRecord.ID);
              BOOL v167 = *v163 == *(void *)v18 && v163[1] == *(void *)(v18 + 8);
              if (v167 || (sub_25B3801A0() & 1) != 0)
              {
                BOOL v168 = v163[2] == *(void *)(v18 + 16) && v163[3] == *(void *)(v18 + 24);
                if (v168 || (sub_25B3801A0())
                  && (v163[4] == *(void *)(v18 + 32) && v163[5] == *(void *)(v18 + 40) || (sub_25B3801A0() & 1) != 0))
                {
                  unint64_t v169 = v160;
                  uint64_t v170 = (uint64_t)v163 + *(int *)(v243 + 28);
                  uint64_t v171 = v117 + *(int *)(v238 + 48);
                  sub_25B3198C0(v170, v242, type metadata accessor for ReplicatorRecord.ID.Ownership);
                  uint64_t v117 = v242;
                  sub_25B3198C0(v233, v171, type metadata accessor for ReplicatorRecord.ID.Ownership);
                  uint64_t v172 = v240;
                  uint64_t v173 = v232;
                  if (v232(v117, 1, v240) == 1)
                  {
                    int v174 = v173(v171, 1, v172);
                    uint64_t v160 = v169;
                    if (v174 == 1) {
                      goto LABEL_129;
                    }
LABEL_126:
                    sub_25B2E344C(v117, &qword_26B341530);
LABEL_127:
                    unint64_t v163 = v234;
                    unint64_t v18 = (unint64_t)v237;
                    uint64_t v165 = v231;
                  }
                  else
                  {
                    sub_25B3198C0(v117, v235, type metadata accessor for ReplicatorRecord.ID.Ownership);
                    if (v173(v171, 1, v172) == 1)
                    {
                      (*v229)(v235, v172);
                      uint64_t v117 = v242;
                      uint64_t v160 = v169;
                      goto LABEL_126;
                    }
                    char v175 = v217;
                    (*v226)(v217, v171, v172);
                    char v176 = sub_25B37F610();
                    id v177 = *v229;
                    (*v229)((uint64_t)v175, v172);
                    v177(v235, v172);
                    uint64_t v160 = v228;
                    uint64_t v117 = v242;
                    if ((v176 & 1) == 0)
                    {
                      sub_25B319990(v242, type metadata accessor for ReplicatorRecord.ID.Ownership);
                      goto LABEL_127;
                    }
LABEL_129:
                    sub_25B319990(v117, type metadata accessor for ReplicatorRecord.ID.Ownership);
                    unint64_t v163 = v234;
                    char v178 = &v234[*(int *)(v243 + 32)];
                    unint64_t v18 = (unint64_t)v237;
                    uint64_t v165 = v231;
                    if (*(void *)v178 == *v225 && *((void *)v178 + 1) == v225[1] || (sub_25B3801A0() & 1) != 0)
                    {
                      sub_25B319990((uint64_t)v163, type metadata accessor for ReplicatorRecord.ID);
                      swift_bridgeObjectRelease();
                      char v179 = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v180 = v245;
                      id v246 = v245;
                      char v245 = (void *)0x8000000000000000;
                      uint64_t v13 = v219;
                      a1 = v220;
                      if ((v179 & 1) == 0)
                      {
                        sub_25B3595A8();
                        uint64_t v180 = v246;
                      }
                      uint64_t v129 = v209;
                      sub_25B319928(v180[6] + v166, v209, type metadata accessor for ReplicatorRecord.ID);
                      sub_25B35B590(v162);
                      char v245 = v246;
                      swift_bridgeObjectRelease();
                      (*v218)(v129, 0, 1, v243);
LABEL_69:
                      swift_endAccess();
                      sub_25B2E344C(v129, (uint64_t *)&unk_26B341370);
                      sub_25B319990(v18, type metadata accessor for ReplicatorRecord.ID);
                      unint64_t v7 = (unint64_t)&qword_26A4EBCC0;
                      os_log_type_t v124 = v212;
                      unint64_t v128 = (unint64_t)v223;
                      goto LABEL_70;
                    }
                  }
                }
              }
              sub_25B319990((uint64_t)v163, type metadata accessor for ReplicatorRecord.ID);
              unint64_t v162 = (v162 + 1) & v164;
              if (((*(void *)(v241 + ((v162 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v162) & 1) == 0) {
                goto LABEL_68;
              }
              continue;
            }
          }
        }
        uint64_t v153 = v13[7];
        swift_bridgeObjectRelease();
        *(void *)(v153 + 8 * v18) = v140;
        goto LABEL_101;
      }

      swift_release();
      swift_beginAccess();
      unint64_t v61 = v227;
      unint64_t v7 = v205;
      if (!v245[2]) {
        goto LABEL_140;
      }
    }
    unint64_t v130 = __clz(__rbit64(v128));
    uint64_t v131 = (v128 - 1) & v128;
    unint64_t v132 = v130 | (v214 << 6);
    goto LABEL_72;
  }
  unint64_t v216 = MEMORY[0x263F8EE78];
  uint64_t v221 = (void *)MEMORY[0x263F8EE80];
LABEL_140:
  uint64_t v205 = v7;
  swift_bridgeObjectRelease();
  v181 = v201;
  swift_bridgeObjectRetain();
  id v182 = sub_25B37F760();
  os_log_type_t v183 = sub_25B37FCD0();
  if (os_log_type_enabled(v182, v183))
  {
    long long v184 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v184 = 134349056;
    id v246 = (id)v181[2];
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v182, v183, "End fetch for %{public}ld URLs", v184, 0xCu);
    MEMORY[0x2611621B0](v184, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v185 = v221;
LABEL_146:
  swift_bridgeObjectRelease();
  return (uint64_t)v185;
}

void sub_25B303BDC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_25B31777C(v8, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v10 = a1;
  uint64_t v11 = sub_25B312E50(MEMORY[0x263F8EE80], v9, (uint64_t)v10);
  swift_release();

  *a4 = v11;
}

void sub_25B303C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v60 = (void *)a3;
  uint64_t v58 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v57 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v61 = (uint64_t)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v59 = (uint64_t)v53 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v53 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (void *)((char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v53 - v21;
  uint64_t v23 = a2;
  sub_25B2FFC50(a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    BOOL v60 = v20;
    uint64_t v24 = v61;
    sub_25B2E344C((uint64_t)v15, (uint64_t *)&unk_26B341370);
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_25B37F780();
    __swift_project_value_buffer(v25, (uint64_t)qword_26B3417A8);
    uint64_t v58 = v6;
    uint64_t v26 = *(int *)(v6 + 48);
    uint64_t v27 = &v12[v26];
    uint64_t v28 = a2 + v26;
    sub_25B3198C0(a2, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v29 = sub_25B37F640();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v57 = *(char **)(v30 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v57)(v27, v28, v29);
    uint64_t v31 = v59;
    sub_25B2E31F0((uint64_t)v12, v59, &qword_26B341050);
    uint64_t v32 = sub_25B37F760();
    os_log_type_t v33 = sub_25B37FCD0();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      int v56 = v34;
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v55 = v36;
      uint64_t v54 = v35;
      *(_DWORD *)uint64_t v35 = 136446210;
      uint64_t v63 = v36;
      v53[1] = v35 + 4;
      uint64_t v37 = *(int *)(v58 + 48);
      uint64_t v38 = v24 + v37;
      uint64_t v39 = v31 + v37;
      sub_25B3198C0(v31, v24, type metadata accessor for ReplicatorRecord.ID);
      ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v38, v39, v29);
      uint64_t v40 = (uint64_t)v60;
      sub_25B319928(v24, (uint64_t)v60, type metadata accessor for ReplicatorRecord.ID);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v38, v29);
      uint64_t v41 = ReplicatorRecord.ID.description.getter();
      unint64_t v43 = v42;
      sub_25B319990(v40, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v62 = sub_25B2CA048(v41, v43, &v63);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      sub_25B2E344C(v31, &qword_26B341050);
      uint64_t v44 = v54;
      _os_log_impl(&dword_25B2C1000, v32, (os_log_type_t)v56, "Record versions dictionary includes record without a client-defined ID: %{public}s", v54, 0xCu);
      uint64_t v45 = v55;
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v45, -1, -1);
      MEMORY[0x2611621B0](v44, -1, -1);
    }
    else
    {
      sub_25B2E344C(v31, &qword_26B341050);
    }
  }
  else
  {
    sub_25B319928((uint64_t)v15, (uint64_t)v22, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0((uint64_t)v22, (uint64_t)v20, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v46 = *(int *)(v6 + 48);
    uint64_t v47 = v61;
    uint64_t v48 = v61 + v46;
    uint64_t v49 = v23 + v46;
    sub_25B3198C0(v23, v61, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v50 = sub_25B37F640();
    uint64_t v51 = *(void *)(v50 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v48, v49, v50);
    uint64_t v52 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v57, v48, v50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    sub_25B2CB868(v52, v20);
    sub_25B319990((uint64_t)v22, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v47, type metadata accessor for ReplicatorRecord.ID);
  }
}

uint64_t sub_25B304308(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0) + 48));
  BOOL v4 = *v3 == *a2 && v3[1] == a2[1];
  if (v4 || (v5 = sub_25B3801A0(), uint64_t result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = v3[2] == a2[2] && v3[3] == a2[3];
    if (v7 || (v8 = sub_25B3801A0(), uint64_t result = 0, (v8 & 1) != 0))
    {
      BOOL v9 = v3[4] == a2[4] && v3[5] == a2[5];
      if (v9 || (v10 = sub_25B3801A0(), uint64_t result = 0, (v10 & 1) != 0))
      {
        uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
        if (_s18ReplicatorServices0A6RecordV2IDV9OwnershipO2eeoiySbAG_AGtFZ_0((uint64_t)v3 + *(int *)(v11 + 28), (uint64_t)a2 + *(int *)(v11 + 28)))
        {
          uint64_t v12 = *(int *)(v11 + 32);
          uint64_t v13 = *(void *)((char *)v3 + v12);
          uint64_t v14 = *(void *)((char *)v3 + v12 + 8);
          uint64_t v15 = (void *)((char *)a2 + v12);
          if (v13 == *v15 && v14 == v15[1]) {
            return 1;
          }
          else {
            return sub_25B3801A0() & 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B304424()
{
  v5[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = (void *)sub_25B2FB590();
  if (v0)
  {
    v5[0] = 0;
    if (objc_msgSend(v0, sel_syncAndReturnError_, v5))
    {
      id v1 = v5[0];
    }
    else
    {
      id v4 = v5[0];
      sub_25B37F470();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v2 = 3;
    *(void *)(v2 + 8) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_25B304518(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v4 = *(void **)a2;
  uint64_t v23 = *(void **)(a2 + 16);
  uint64_t v24 = *(void **)(a2 + 8);
  uint64_t v21 = *(void **)(a2 + 32);
  uint64_t v22 = *(void **)(a2 + 24);
  uint64_t v19 = *(void **)(a2 + 48);
  uint64_t v20 = *(void **)(a2 + 40);
  long long v25 = *(_OWORD *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 72);
  swift_beginAccess();
  sub_25B310A18(a2);
  sub_25B35673C(v27, (void *)a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B3047F4();
  sub_25B304E6C();
  sub_25B2F861C();
  sub_25B310A18(a2);
  uint64_t v5 = sub_25B2FB590();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    v27[0] = v4;
    v27[1] = v24;
    v27[2] = v23;
    v27[3] = v22;
    v27[4] = v21;
    v27[5] = v20;
    v27[6] = v19;
    long long v28 = v25;
    uint64_t v29 = v18;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B3187FC();
    uint64_t v7 = sub_25B37F420();
    if (v26)
    {
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      uint64_t v11 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v9, v10);
      swift_release();
      sub_25B315CD0(a2);
      v27[0] = 0;
      unsigned __int8 v12 = objc_msgSend(v6, sel_registerClientWithParameters_error_, v11, v27);

      if (v12)
      {
        char v13 = *(unsigned char *)(a1
                       + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices);
        id v14 = v27[0];
        if ((v13 & 1) == 0) {
          sub_25B2F8914();
        }
        sub_25B3053B0();
      }
      else
      {
        id v17 = v27[0];
        sub_25B37F470();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_25B315CD0(a2);
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 3;
    *(void *)(v15 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B3047F4()
{
  aBlock[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = (uint64_t *)((char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  dispatch_queue_t v51 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    sub_25B30A080(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens);
    uint64_t v52 = v0;
    uint64_t v6 = (uint64_t *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    uint64_t v7 = *v6;
    int64_t v8 = *(void *)(*v6 + 16);
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (!v8)
    {
LABEL_12:
      uint64_t v53 = v9;
      if (qword_26B3417C0 == -1) {
        goto LABEL_13;
      }
      goto LABEL_34;
    }
    aBlock[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25B310B84(0, v8, 0);
    uint64_t v9 = aBlock[0];
    int64_t v10 = sub_25B312828(v7);
    int v12 = v11;
    int v14 = v13 & 1;
    uint64_t v50 = v7 + 56;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(v7 + 32))
    {
      if (((*(void *)(v50 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v7 + 36) != v12) {
        goto LABEL_32;
      }
      LODWORD(v53) = v14;
      uint64_t v15 = *(void *)(v7 + 48) + 80 * v10;
      uint64_t v16 = *(void *)(v15 + 48);
      uint64_t v17 = *(void *)(v15 + 56);
      aBlock[0] = v9;
      unint64_t v18 = *(void *)(v9 + 16);
      unint64_t v19 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v18 >= v19 >> 1)
      {
        sub_25B310B84(v19 > 1, v18 + 1, 1);
        uint64_t v9 = aBlock[0];
      }
      *(void *)(v9 + 16) = v18 + 1;
      uint64_t v20 = v9 + 16 * v18;
      *(void *)(v20 + 32) = v16;
      *(void *)(v20 + 40) = v17;
      int64_t v21 = sub_25B3128C8(v10, v12, v53 & 1, v7);
      int64_t v10 = v21;
      int v12 = v22;
      int v14 = v23 & 1;
      if (!--v8)
      {
        sub_25B318F98(v21, v22, v14);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_13:
  uint64_t v24 = sub_25B37F780();
  __swift_project_value_buffer(v24, (uint64_t)qword_26B3417A8);
  uint64_t v25 = v53;
  swift_bridgeObjectRetain_n();
  uint64_t v26 = sub_25B37F760();
  os_log_type_t v27 = sub_25B37FCD0();
  if (os_log_type_enabled(v26, v27))
  {
    long long v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)long long v28 = 136446210;
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = MEMORY[0x261161220](v30, MEMORY[0x263F8D310]);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *(void *)int out_token = sub_25B2CA048(v31, v33, aBlock);
    sub_25B37FD70();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v26, v27, "Registering for zone change notifications: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v29, -1, -1);
    MEMORY[0x2611621B0](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v34 = v52;
  uint64_t v35 = *(void *)(v25 + 16);
  if (v35)
  {
    uint64_t v36 = (char *)MEMORY[0x263F8EE78];
    uint64_t v37 = v25 + 40;
    do
    {
      out_token[0] = -1;
      uint64_t v38 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = (uint64_t)sub_25B319084;
      aBlock[5] = v38;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_25B344CCC;
      aBlock[3] = (uint64_t)&block_descriptor_192;
      uint64_t v39 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v40 = sub_25B37F9F0();
      swift_bridgeObjectRelease();
      uint32_t v41 = notify_register_dispatch((const char *)(v40 + 32), out_token, v51, v39);
      swift_release();
      _Block_release(v39);
      if (v41)
      {
        unint64_t v42 = sub_25B37F760();
        os_log_type_t v43 = sub_25B37FCB0();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl(&dword_25B2C1000, v42, v43, "Could not register for zone change notifications", v44, 2u);
          MEMORY[0x2611621B0](v44, -1, -1);
        }
      }
      else
      {
        int v45 = out_token[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = sub_25B310744(0, *((void *)v36 + 2) + 1, 1, v36);
        }
        unint64_t v47 = *((void *)v36 + 2);
        unint64_t v46 = *((void *)v36 + 3);
        if (v47 >= v46 >> 1) {
          uint64_t v36 = sub_25B310744((char *)(v46 > 1), v47 + 1, 1, v36);
        }
        *((void *)v36 + 2) = v47 + 1;
        *(_DWORD *)&v36[4 * v47 + 32] = v45;
      }
      uint64_t v34 = v52;
      v37 += 16;
      --v35;
    }
    while (v35);
  }
  else
  {
    uint64_t v36 = (char *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  *(void *)(v34
            + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens) = v36;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B304E6C()
{
  uint64_t v1 = v0;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  dispatch_queue_t v44 = v6;
  LOBYTE(v6) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0) {
    goto LABEL_31;
  }
  sub_25B30A080(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens);
  uint64_t v7 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  uint64_t v8 = *v7;
  int64_t v9 = *(void *)(*v7 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v42 = v1;
  aBlock[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  sub_25B310B84(0, v9, 0);
  uint64_t v10 = aBlock[0];
  int64_t v11 = sub_25B312828(v8);
  int v13 = v12;
  int v15 = v14 & 1;
  uint64_t v43 = v8 + 56;
  do
  {
    if (v11 < 0 || v11 >= 1 << *(unsigned char *)(v8 + 32))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    if (((*(void *)(v43 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v8 + 36) != v13) {
      goto LABEL_30;
    }
    LODWORD(v45) = v15;
    uint64_t v16 = *(void *)(v8 + 48) + 80 * v11;
    uint64_t v17 = *(void *)(v16 + 32);
    uint64_t v18 = *(void *)(v16 + 40);
    aBlock[0] = v10;
    unint64_t v19 = *(void *)(v10 + 16);
    unint64_t v20 = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
    if (v19 >= v20 >> 1)
    {
      sub_25B310B84(v20 > 1, v19 + 1, 1);
      uint64_t v10 = aBlock[0];
    }
    *(void *)(v10 + 16) = v19 + 1;
    uint64_t v21 = v10 + 16 * v19;
    *(void *)(v21 + 32) = v17;
    *(void *)(v21 + 40) = v18;
    int64_t v22 = sub_25B3128C8(v11, v13, v45 & 1, v8);
    int64_t v11 = v22;
    int v13 = v23;
    int v15 = v24 & 1;
    --v9;
  }
  while (v9);
  sub_25B318F98(v22, v23, v15);
  swift_bridgeObjectRelease();
  uint64_t v1 = v42;
LABEL_12:
  uint64_t v25 = *(void *)(v10 + 16);
  uint64_t v45 = v10;
  if (v25)
  {
    uint64_t v26 = v10 + 40;
    os_log_type_t v27 = (char *)MEMORY[0x263F8EE78];
    do
    {
      int out_token = -1;
      uint64_t v28 = swift_allocObject();
      uint64_t v29 = v1;
      swift_unknownObjectWeakInit();
      aBlock[4] = sub_25B318FA4;
      aBlock[5] = v28;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B344CCC;
      aBlock[3] = &block_descriptor_182;
      uint64_t v30 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v31 = sub_25B37F9F0();
      swift_bridgeObjectRelease();
      uint32_t v32 = notify_register_dispatch((const char *)(v31 + 32), &out_token, v44, v30);
      swift_release();
      _Block_release(v30);
      if (v32)
      {
        if (qword_26B3417C0 != -1) {
          swift_once();
        }
        uint64_t v33 = sub_25B37F780();
        __swift_project_value_buffer(v33, (uint64_t)qword_26B3417A8);
        uint64_t v34 = sub_25B37F760();
        os_log_type_t v35 = sub_25B37FCB0();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v36 = 0;
          _os_log_impl(&dword_25B2C1000, v34, v35, "Could not register for message notifications", v36, 2u);
          MEMORY[0x2611621B0](v36, -1, -1);
        }

        uint64_t v1 = v29;
      }
      else
      {
        int v37 = out_token;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          os_log_type_t v27 = sub_25B310744(0, *((void *)v27 + 2) + 1, 1, v27);
        }
        unint64_t v39 = *((void *)v27 + 2);
        unint64_t v38 = *((void *)v27 + 3);
        if (v39 >= v38 >> 1) {
          os_log_type_t v27 = sub_25B310744((char *)(v38 > 1), v39 + 1, 1, v27);
        }
        *((void *)v27 + 2) = v39 + 1;
        *(_DWORD *)&v27[4 * v39 + 32] = v37;
      }
      v26 += 16;
      --v25;
    }
    while (v25);
  }
  else
  {
    os_log_type_t v27 = (char *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens) = v27;
  return swift_bridgeObjectRelease();
}

void sub_25B3053B0()
{
  v103[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v100 = sub_25B37F640();
  uint64_t v93 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  int v98 = (char *)v87 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v87 - v6;
  uint64_t v8 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v91 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v101 = (void *)((char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v99 = type metadata accessor for ReplicatorRecordVersion();
  uint64_t v10 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  BOOL v92 = (char *)v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_25B37F8A0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (void *)((char *)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *int v15 = v16;
  (*(void (**)(void *, void, unint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v12);
  id v17 = v16;
  LOBYTE(v16) = sub_25B37F8B0();
  uint64_t v18 = (*(uint64_t (**)(void *, unint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v19 = sub_25B2FB590(v18);
  if (!v19)
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v60 = sub_25B37F780();
    __swift_project_value_buffer(v60, (uint64_t)qword_26B3417A8);
    uint64_t v61 = sub_25B37F760();
    os_log_type_t v62 = sub_25B37FCB0();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_25B2C1000, v61, v62, "Could not fetch record versions because target could not be created", v63, 2u);
      MEMORY[0x2611621B0](v63, -1, -1);
    }

    return;
  }
  unint64_t v20 = (void *)v19;
  uint64_t v94 = v10;
  v87[2] = v8;
  uint64_t v88 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions) = 0;
  unint64_t v89 = v0;
  swift_beginAccess();
  uint64_t v21 = swift_bridgeObjectRetain();
  int64_t v22 = sub_25B311AC4(v21);
  swift_bridgeObjectRelease();
  v103[0] = v22;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3185C0();
  uint64_t v23 = sub_25B37F420();
  unint64_t v25 = v24;
  uint64_t v26 = (void *)sub_25B37F560();
  sub_25B2CA2D8(v23, v25);
  swift_release();
  swift_release();
  v103[0] = 0;
  id v27 = objc_msgSend(v20, sel_recordVersionsWithParameters_error_, v26, v103);

  id v28 = v103[0];
  uint64_t v29 = (uint64_t)v92;
  if (!v27)
  {
    id v64 = v103[0];
    unint64_t v65 = (void *)sub_25B37F470();

    swift_willThrow();
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v66 = sub_25B37F780();
    __swift_project_value_buffer(v66, (uint64_t)qword_26B3417A8);
    id v67 = v65;
    id v68 = v65;
    int64_t v69 = sub_25B37F760();
    os_log_type_t v70 = sub_25B37FCB0();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v103[0] = v72;
      *(_DWORD *)uint64_t v71 = 136315138;
      uint64_t v102 = (uint64_t)v65;
      id v73 = v65;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
      uint64_t v74 = sub_25B37F9E0();
      uint64_t v102 = sub_25B2CA048(v74, v75, (uint64_t *)v103);
      sub_25B37FD70();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B2C1000, v69, v70, "Could not fetch record versions: %s", v71, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v72, -1, -1);
      MEMORY[0x2611621B0](v71, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return;
  }
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v30 = sub_25B37F570();
  unint64_t v32 = v31;
  sub_25B318614();
  sub_25B37F3E0();
  sub_25B2CA2D8(v30, v32);
  swift_release();
  uint64_t v33 = v103[0];
  uint64_t v34 = v100;
  if (!v103[0])
  {
    __break(1u);
LABEL_50:
    sub_25B3801C0();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  v87[3] = 0;
  v87[4] = v20;
  id v35 = v28;

  uint64_t v36 = v33[2];
  if (!v36)
  {
    unint64_t v39 = (void *)MEMORY[0x263F8EE80];
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions;
    unint64_t v12 = v89;
    *(void *)(v89
              + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions) = v39;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v12 + v88) = 1;
    if (qword_26B3417C0 != -1) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  uint64_t v37 = (uint64_t)v33 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
  unint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
  uint64_t v96 = (unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
  uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v90 = v93 + 40;
  uint64_t v94 = *(void *)(v94 + 72);
  uint64_t v95 = (void (**)(char *, char *, uint64_t))(v93 + 32);
  v87[1] = v33;
  swift_bridgeObjectRetain();
  unint64_t v39 = (void *)MEMORY[0x263F8EE80];
  uint64_t v40 = v101;
  while (1)
  {
    sub_25B3198C0(v37, v29, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
    sub_25B3198C0(v29, (uint64_t)v40, type metadata accessor for ReplicatorRecord.ID);
    (*v97)(v7, v29 + *(int *)(v99 + 20), v34);
    uint64_t v42 = *v38;
    (*v38)(v7, 0, 1, v34);
    if ((*v96)(v7, 1, v34) == 1)
    {
      sub_25B2E344C((uint64_t)v7, &qword_26B3414D0);
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_25B2D5F6C(v40);
      char v45 = v44;
      swift_bridgeObjectRelease();
      if (v45)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v103[0] = v39;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_25B2DBD44();
          unint64_t v39 = v103[0];
        }
        sub_25B319990(v39[6] + *(void *)(v91 + 72) * v43, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v34 = v100;
        (*(void (**)(char *, unint64_t, uint64_t))(v93 + 32))(v5, v39[7] + *(void *)(v93 + 72) * v43, v100);
        sub_25B3514A8(v43, (uint64_t)v39);
        swift_bridgeObjectRelease();
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = 1;
        uint64_t v34 = v100;
      }
      v42(v5, v41, 1, v34);
      uint64_t v40 = v101;
      sub_25B319990((uint64_t)v101, type metadata accessor for ReplicatorRecord.ID);
      sub_25B2E344C((uint64_t)v5, &qword_26B3414D0);
      goto LABEL_9;
    }
    uint64_t v8 = (uint64_t)v5;
    unint64_t v47 = *v95;
    (*v95)(v98, v7, v34);
    int v48 = swift_isUniquelyReferenced_nonNull_native();
    v103[0] = v39;
    unint64_t v12 = sub_25B2D5F6C(v40);
    uint64_t v50 = v39[2];
    BOOL v51 = (v49 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      break;
    }
    char v53 = v49;
    if (v39[3] >= v52)
    {
      if ((v48 & 1) == 0) {
        sub_25B2DBD44();
      }
    }
    else
    {
      sub_25B2D8018(v52, v48);
      unint64_t v54 = sub_25B2D5F6C(v101);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_50;
      }
      unint64_t v12 = v54;
    }
    uint64_t v34 = v100;
    int v56 = v103[0];
    if (v53)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v93 + 40))(*((void *)v103[0] + 7) + *(void *)(v93 + 72) * v12, v98, v100);
    }
    else
    {
      *((void *)v103[0] + (v12 >> 6) + 8) |= 1 << v12;
      sub_25B3198C0((uint64_t)v101, v56[6] + *(void *)(v91 + 72) * v12, type metadata accessor for ReplicatorRecord.ID);
      v47((char *)(v56[7] + *(void *)(v93 + 72) * v12), v98, v34);
      uint64_t v57 = v56[2];
      BOOL v58 = __OFADD__(v57, 1);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_46;
      }
      v56[2] = v59;
    }
    unint64_t v39 = v103[0];
    swift_bridgeObjectRelease();
    uint64_t v40 = v101;
    sub_25B319990((uint64_t)v101, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v5 = (char *)v8;
    uint64_t v29 = (uint64_t)v92;
LABEL_9:
    sub_25B319990(v29, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordVersion);
    v37 += v94;
    if (!--v36)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  swift_once();
LABEL_38:
  uint64_t v76 = sub_25B37F780();
  __swift_project_value_buffer(v76, (uint64_t)qword_26B3417A8);
  unint64_t v77 = (id)v12;
  uint64_t v78 = sub_25B37F760();
  os_log_type_t v79 = sub_25B37FCD0();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v80 = 134217984;
    v103[0] = *(id *)(*(void *)(v12 + v8) + 16);
    sub_25B37FD70();

    _os_log_impl(&dword_25B2C1000, v78, v79, "Fetched %ld records", v80, 0xCu);
    MEMORY[0x2611621B0](v80, -1, -1);
  }
  else
  {

    uint64_t v78 = v77;
  }

  uint64_t v81 = swift_bridgeObjectRetain();
  uint64_t v82 = sub_25B2E3D58(v81);
  swift_bridgeObjectRelease();
  uint64_t v83 = sub_25B30CA60(v82);
  swift_bridgeObjectRelease();
  if (v83)
  {
    *(Class *)((char *)&v77->isa
             + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDefinedIDToInternalRecordID) = (Class)v83;
    swift_bridgeObjectRelease();
  }
  uint64_t v84 = *(uint64_t *)((char *)&v77->isa
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDefinedIDToInternalRecordID);
  unint64_t v85 = v77;
  swift_bridgeObjectRetain();
  uint64_t v86 = (void *)sub_25B313154(MEMORY[0x263F8EE80], v84, (uint64_t)v85);
  swift_bridgeObjectRelease();

  v103[0] = v86;
  sub_25B37F7E0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_25B30616C(uint64_t a1, uint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  swift_beginAccess();
  sub_25B35AE28(a2, (uint64_t)&v29);
  uint64_t v3 = v30;
  uint64_t v26 = (uint64_t)v29;
  uint64_t v4 = v31;
  uint64_t v5 = v32;
  swift_endAccess();
  uint64_t v24 = v4;
  sub_25B310A8C(v26, v3);
  sub_25B3047F4();
  sub_25B304E6C();
  sub_25B306430();
  uint64_t v6 = (void *)*a2;
  uint64_t v7 = a2[1];
  uint64_t v27 = (uint64_t)a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25B2FB590();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v29 = v6;
    uint64_t v30 = v7;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B318F44();
    uint64_t v10 = sub_25B37F420();
    if (v25)
    {
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v12 = v10;
      unint64_t v13 = v11;
      uint64_t v14 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v12, v13);
      swift_bridgeObjectRelease();
      swift_release();
      id v29 = 0;
      unsigned __int8 v15 = objc_msgSend(v9, sel_unregisterClientWithParameters_error_, v14, &v29, v24, v5);

      id v16 = v29;
      if (v15)
      {
        uint64_t v17 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions;
        sub_25B310A18(v27);
        id v18 = v16;
        uint64_t v19 = swift_bridgeObjectRetain();
        uint64_t v20 = sub_25B317F6C(v19, v27, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_25B317A30);
        sub_25B315CD0(v27);
        swift_bridgeObjectRelease();
        *(void *)(a1 + v17) = v20;
        swift_unknownObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        id v23 = v29;
        sub_25B37F470();

        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v22 = 3;
    *(void *)(v22 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B306430()
{
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken;
    int v9 = *(_DWORD *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken);
    if (v9 != -1)
    {
      uint64_t v10 = v0
          + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors;
      uint64_t result = swift_beginAccess();
      if (!*(void *)(*(void *)v10 + 16))
      {
        uint64_t result = notify_cancel(v9);
        *(_DWORD *)(v0 + v8) = -1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_25B306594(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_25B2FB590();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v27 = 3;
    *(void *)(v27 + 8) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v10 = (void *)v9;
  id v33 = a1;
  uint64_t v34 = a2;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3190BC();
  uint64_t v11 = sub_25B37F420();
  if (!v3)
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    unsigned __int8 v15 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v13, v14);
    swift_bridgeObjectRelease();
    swift_release();
    id v33 = 0;
    id v16 = objc_msgSend(v10, sel_clientDescriptorWithParameters_error_, v15, &v33);

    id v17 = v33;
    if (!v16)
    {
      id v28 = v33;
      sub_25B37F470();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_25B37F400();
    swift_allocObject();
    sub_25B37F3F0();
    uint64_t v5 = sub_25B37F570();
    unint64_t v4 = v18;
    sub_25B319110();
    sub_25B37F3E0();
    uint64_t v31 = v17;
    uint64_t v32 = v16;
    sub_25B2CA2D8(v5, v4);
    swift_release();
    uint64_t v19 = v34;
    if (v34)
    {
      id v20 = v33;
      uint64_t v21 = v35;
      uint64_t v22 = v36;
      uint64_t v24 = v37;
      uint64_t v23 = v38;
      uint64_t v25 = v39;
      long long v30 = v40;
      uint64_t v29 = v41;
      id v26 = v31;
      swift_unknownObjectRelease();

      *(void *)a3 = v20;
      *(void *)(a3 + 8) = v19;
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v24;
      *(void *)(a3 + 40) = v23;
      *(void *)(a3 + 48) = v25;
      *(_OWORD *)(a3 + 56) = v30;
      *(void *)(a3 + 72) = v29;
      return;
    }
    __break(1u);
  }
  swift_unexpectedError();
  __break(1u);
  sub_25B2CA2D8(v5, v4);
  swift_unexpectedError();
  __break(1u);
}

void sub_25B306874(void *a1@<X0>, void *a2@<X1>, void (*a3)(void)@<X3>, SEL *a4@<X5>, unsigned char *a5@<X8>)
{
  v29[2] = *(id *)MEMORY[0x263EF8340];
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25B2FB590();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v25 = 3;
    *(void *)(v25 + 8) = 0;
    swift_willThrow();
    return;
  }
  unint64_t v12 = (void *)v11;
  v29[0] = a1;
  v29[1] = a2;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v13 = sub_25B37F420();
  if (!v5)
  {
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    id v17 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v15, v16);
    swift_bridgeObjectRelease();
    swift_release();
    v29[0] = 0;
    id v18 = objc_msgSend(v12, *a4, v17, v29);

    id v19 = v29[0];
    if (!v18)
    {
      id v26 = v29[0];
      sub_25B37F470();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_25B37F400();
    swift_allocObject();
    sub_25B37F3F0();
    uint64_t v20 = sub_25B37F570();
    unint64_t v22 = v21;
    sub_25B319550();
    sub_25B37F3E0();
    sub_25B2CA2D8(v20, v22);
    swift_release();
    if (LOBYTE(v29[0]) != 2)
    {
      char v23 = (uint64_t)v29[0] & 1;
      id v24 = v19;
      swift_unknownObjectRelease();

      *a5 = v23;
      return;
    }
    __break(1u);
  }
  uint64_t v27 = swift_unexpectedError();
  __break(1u);
  sub_25B2CA2D8(v27, v28);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_25B306B10(uint64_t a1)
{
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B3198C0(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  id v6 = &v5[*(int *)(v3 + 20)];
  *(void *)id v6 = 0;
  v6[8] = 1;
  uint64_t v7 = &v5[*(int *)(v3 + 24)];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = sub_25B2FB590();
  if (!v8)
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v16 = 3;
    *(void *)(v16 + 8) = 0;
    swift_willThrow();
    return sub_25B319990((uint64_t)v5, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  }
  uint64_t v9 = (void *)v8;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3193FC(&qword_26A4EC280, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  uint64_t v10 = sub_25B37F420();
  if (!v1)
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    unint64_t v14 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v12, v13);
    swift_release();
    v19[0] = 0;
    LOBYTE(v13) = objc_msgSend(v9, sel_sendMessageWithParameters_error_, v14, v19);

    if (v13)
    {
      id v15 = v19[0];
    }
    else
    {
      id v17 = v19[0];
      sub_25B37F470();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
    return sub_25B319990((uint64_t)v5, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B306D8C(uint64_t a1, uint64_t a2, double a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (void *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&aBlock[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B3198C0(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  id v17 = &v16[*(int *)(v14 + 20)];
  *(double *)id v17 = a3;
  v17[8] = 0;
  id v18 = &v16[*(int *)(v14 + 24)];
  *(void *)id v18 = a2;
  v18[8] = 0;
  uint64_t v19 = sub_25B2FB590();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B3193FC(&qword_26A4EC280, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
    uint64_t v21 = sub_25B37F420();
    unint64_t v23 = v22;
    id v24 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v21, v23);
    swift_release();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = a5;
    *(void *)(v25 + 24) = a6;
    aBlock[4] = sub_25B318520;
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B30737C;
    aBlock[3] = &block_descriptor_148;
    id v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_sendMessageExpectingResponseWithParameters_completion_, v24, v26);
    _Block_release(v26);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    uint64_t v27 = swift_allocError();
    *(unsigned char *)uint64_t v28 = 3;
    *(void *)(v28 + 8) = 0;
    *unint64_t v13 = v27;
    swift_storeEnumTagMultiPayload();
    a5(v13);
    sub_25B2E344C((uint64_t)v13, &qword_26A4EBC38);
  }
  return sub_25B319990((uint64_t)v16, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_25B3070C4(uint64_t a1, void *a2, void (*a3)(uint64_t *))
{
  uint64_t v21 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC40);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B2E2FE0(a1, (uint64_t)v10, &qword_26A4EBC40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    uint64_t v15 = v21;
    sub_25B2E344C((uint64_t)v10, &qword_26A4EBC40);
    if (a2)
    {
      *uint64_t v7 = (uint64_t)a2;
      swift_storeEnumTagMultiPayload();
      id v16 = a2;
    }
    else
    {
      sub_25B2DCCD4();
      uint64_t v18 = swift_allocError();
      *(unsigned char *)uint64_t v19 = 4;
      *(void *)(v19 + 8) = 0;
      *uint64_t v7 = v18;
      swift_storeEnumTagMultiPayload();
    }
    v15(v7);
    return sub_25B2E344C((uint64_t)v7, &qword_26A4EBC38);
  }
  else
  {
    sub_25B319928((uint64_t)v10, (uint64_t)v14, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
    sub_25B3198C0((uint64_t)v14, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    swift_storeEnumTagMultiPayload();
    v21(v7);
    sub_25B2E344C((uint64_t)v7, &qword_26A4EBC38);
    return sub_25B319990((uint64_t)v14, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  }
}

uint64_t sub_25B30737C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC40);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_25B36ED20(a2, (uint64_t)&v15 - v8);
    uint64_t v11 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    uint64_t v12 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  swift_retain();
  id v13 = a3;
  v10(v9, a3);

  swift_release();
  return sub_25B2E344C((uint64_t)v9, &qword_26A4EBC40);
}

void sub_25B3074C4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v26[1] = *(id *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412D8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25B3819A0;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25B2FB590();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v22 = 3;
    *(void *)(v22 + 8) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v9 = (void *)v8;
  v26[0] = (id)v7;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B318FDC();
  uint64_t v10 = sub_25B37F420();
  if (!v3)
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    uint64_t v14 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v12, v13);
    swift_bridgeObjectRelease();
    swift_release();
    v26[0] = 0;
    id v15 = objc_msgSend(v9, sel_messagesWithParameters_error_, v14, v26);

    id v16 = v26[0];
    if (!v15)
    {
      id v23 = v26[0];
      sub_25B37F470();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_25B37F400();
    swift_allocObject();
    sub_25B37F3F0();
    uint64_t v17 = sub_25B37F570();
    unint64_t v19 = v18;
    sub_25B319030();
    sub_25B37F3E0();
    sub_25B2CA2D8(v17, v19);
    swift_release();
    id v20 = v26[0];
    if (v26[0])
    {
      id v21 = v16;
      swift_unknownObjectRelease();

      *a3 = v20;
      return;
    }
    __break(1u);
  }
  uint64_t v24 = swift_unexpectedError();
  __break(1u);
  sub_25B2CA2D8(v24, v25);
  swift_unexpectedError();
  __break(1u);
}

void sub_25B30777C()
{
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (void *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v7 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection;
  if (!*(void *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection])
  {
    id v8 = sub_25B37B3B8();
    if (v8)
    {
      uint64_t v9 = *(void **)&v0[v7];
      *(void *)&v0[v7] = v8;
      id v10 = v8;

      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v0;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = sub_25B318560;
      *(void *)(v12 + 24) = v11;
      aBlock[4] = sub_25B318578;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B353A10;
      aBlock[3] = &block_descriptor_157;
      unint64_t v13 = _Block_copy(aBlock);
      uint64_t v14 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_configureConnection_, v13);
      _Block_release(v13);
      LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v13 & 1) == 0)
      {
        sub_25B307DF8();
        swift_release();

        return;
      }
LABEL_8:
      __break(1u);
    }
  }
}

void sub_25B3079EC(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_25B37F970();
  id v5 = objc_msgSend(self, sel_interfaceWithIdentifier_, v4);

  id v6 = self;
  id v7 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_2708EE3F8);
  objc_msgSend(v5, sel_setClient_, v7);

  id v8 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_2708EFD18);
  objc_msgSend(v5, sel_setServer_, v8);

  id v9 = objc_msgSend(self, sel_utility);
  objc_msgSend(a1, sel_setServiceQuality_, v9);

  objc_msgSend(a1, sel_setInterface_, v5);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(void *)(a2 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue));
  uint64_t v17 = sub_25B307CE4;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  id v15 = sub_25B37B5EC;
  id v16 = &block_descriptor_166;
  id v10 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setActivationHandler_, v10);
  _Block_release(v10);
  uint64_t v17 = sub_25B307CF0;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  id v15 = sub_25B37B5EC;
  id v16 = &block_descriptor_169;
  uint64_t v11 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setInterruptionHandler_, v11);
  _Block_release(v11);
  uint64_t v17 = sub_25B307CFC;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  id v15 = sub_25B37B5EC;
  id v16 = &block_descriptor_172;
  uint64_t v12 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setInvalidationHandler_, v12);
  _Block_release(v12);
}

void sub_25B307CE4(uint64_t a1)
{
}

void sub_25B307CF0(uint64_t a1)
{
}

void sub_25B307CFC(uint64_t a1)
{
}

void sub_25B307D08(uint64_t a1, const char *a2)
{
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_25B37F780();
  __swift_project_value_buffer(v3, (uint64_t)qword_26B3417A8);
  oslog = sub_25B37F760();
  os_log_type_t v4 = sub_25B37FCA0();
  if (os_log_type_enabled(oslog, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_25B2C1000, oslog, v4, a2, v5, 2u);
    MEMORY[0x2611621B0](v5, -1, -1);
  }
}

void sub_25B307DF8()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_serverStartupToken);
  swift_beginAccess();
  if (*v1 == -1)
  {
    uint64_t v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_25B3185B8;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B344CCC;
    aBlock[3] = &block_descriptor_163;
    os_log_type_t v4 = _Block_copy(aBlock);
    swift_release();
    id v5 = (const char *)(sub_25B37F9F0() + 32);
    swift_beginAccess();
    uint32_t v6 = notify_register_dispatch(v5, v1, v2, v4);
    swift_endAccess();
    _Block_release(v4);
    swift_release();
    if (v6)
    {
      if (qword_26B3417C0 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_25B37F780();
      __swift_project_value_buffer(v7, (uint64_t)qword_26B3417A8);
      id v8 = sub_25B37F760();
      os_log_type_t v9 = sub_25B37FCB0();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        _os_log_impl(&dword_25B2C1000, v8, v9, "Could not register for daemon startup notifications", v10, 2u);
        MEMORY[0x2611621B0](v10, -1, -1);
      }
    }
  }
}

void sub_25B308014()
{
  uint64_t v1 = (void *)sub_25B37F8A0();
  uint64_t v2 = *(v1 - 1);
  MEMORY[0x270FA5388](v1);
  os_log_type_t v4 = (void *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *os_log_type_t v4 = v5;
  (*(void (**)(void *, void, void *))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  sub_25B30777C();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection);
  if (!v7) {
    return;
  }
  uint64_t v1 = v7;
  if (objc_msgSend(v1, sel_remoteTarget))
  {
    sub_25B37FDA0();

    swift_unknownObjectRelease();
    sub_25B2E344C((uint64_t)v12, &qword_26B3413D8);
    return;
  }
  memset(v12, 0, sizeof(v12));
  sub_25B2E344C((uint64_t)v12, &qword_26B3413D8);
  objc_msgSend(v1, sel_activate);
  if (qword_26B3417C0 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v8 = sub_25B37F780();
  __swift_project_value_buffer(v8, (uint64_t)qword_26B3417A8);
  os_log_type_t v9 = sub_25B37F760();
  os_log_type_t v10 = sub_25B37FCD0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_25B2C1000, v9, v10, "Activated ReplicatorClient connection", v11, 2u);
    MEMORY[0x2611621B0](v11, -1, -1);
  }
}

void sub_25B308268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x261162290](v2);
  if (v3)
  {
    os_log_type_t v4 = (unsigned char *)v3;
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_25B37F780();
    __swift_project_value_buffer(v5, (uint64_t)qword_26B3417A8);
    id v6 = sub_25B37F760();
    os_log_type_t v7 = sub_25B37FCD0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25B2C1000, v6, v7, "Server has restarted", v8, 2u);
      MEMORY[0x2611621B0](v8, -1, -1);
    }

    os_log_type_t v9 = &v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors];
    uint64_t v10 = swift_beginAccess();
    if (*(void *)(*(void *)v9 + 16))
    {
      sub_25B308014(v10);
      uint64_t v11 = sub_25B3083DC();
      if ((v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices] & 1) == 0) {
        sub_25B2F8914(v11);
      }
      if ((v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions] & 1) == 0) {
        sub_25B3053B0();
      }
    }
  }
}

uint64_t sub_25B3083DC()
{
  v75[13] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  os_log_type_t v4 = (void *)((char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *os_log_type_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0) {
    goto LABEL_42;
  }
  os_log_type_t v7 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 + 56);
  uint64_t v62 = *v7 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v63 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v65 = v8;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v71 = 0;
  *(void *)&long long v14 = 136446210;
  long long v61 = v14;
  v60[1] = MEMORY[0x263F8EE58] + 8;
  uint64_t v64 = v0;
  while (1)
  {
    if (v12)
    {
      uint64_t v72 = (v12 - 1) & v12;
      int64_t v73 = v13;
      unint64_t v16 = __clz(__rbit64(v12)) | (v13 << 6);
    }
    else
    {
      BOOL v17 = __OFADD__(v13, 1);
      int64_t v18 = v13 + 1;
      if (v17)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v18 >= v63) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v62 + 8 * v18);
      if (!v19)
      {
        int64_t v20 = v18 + 1;
        if (v18 + 1 >= v63) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v62 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = v18 + 2;
          if (v18 + 2 >= v63) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v62 + 8 * v20);
          if (!v19)
          {
            int64_t v20 = v18 + 3;
            if (v18 + 3 >= v63) {
              return swift_release();
            }
            unint64_t v19 = *(void *)(v62 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                int64_t v18 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  break;
                }
                if (v18 >= v63) {
                  return swift_release();
                }
                unint64_t v19 = *(void *)(v62 + 8 * v18);
                ++v20;
                if (v19) {
                  goto LABEL_20;
                }
              }
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
            }
          }
        }
        int64_t v18 = v20;
      }
LABEL_20:
      uint64_t v72 = (v19 - 1) & v19;
      int64_t v73 = v18;
      unint64_t v16 = __clz(__rbit64(v19)) + (v18 << 6);
    }
    uint64_t v21 = *(void *)(v65 + 48) + 80 * v16;
    uint64_t v22 = *(void **)v21;
    id v23 = *(void **)(v21 + 16);
    uint64_t v24 = *(void **)(v21 + 24);
    unint64_t v25 = *(void **)(v21 + 32);
    id v26 = *(void **)(v21 + 40);
    uint64_t v27 = *(void **)(v21 + 48);
    uint64_t v28 = *(void **)(v21 + 56);
    uint64_t v29 = *(void **)(v21 + 64);
    long long v30 = *(void **)(v21 + 72);
    uint64_t v74 = *(void **)(v21 + 8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v31 = swift_bridgeObjectRetain_n();
    uint64_t v32 = (void *)sub_25B2FB590(v31);
    uint64_t v69 = (uint64_t)v22;
    id v70 = v32;
    if (!v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v49 = (unint64_t)v74;
      swift_bridgeObjectRelease();
      sub_25B2DCCD4();
      uint64_t v50 = swift_allocError();
      *(unsigned char *)uint64_t v51 = 3;
      *(void *)(v51 + 8) = 0;
      swift_willThrow();
      uint64_t v71 = 0;
      goto LABEL_30;
    }
    v75[0] = v22;
    v75[1] = v74;
    v75[2] = v23;
    v75[3] = v24;
    v75[4] = v25;
    v75[5] = v26;
    v75[6] = v27;
    v75[7] = v28;
    v75[8] = v29;
    v75[9] = v30;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B3187FC();
    uint64_t v33 = v71;
    uint64_t v34 = sub_25B37F420();
    uint64_t v71 = v33;
    if (v33) {
      break;
    }
    uint64_t v36 = v34;
    unint64_t v37 = v35;
    uint64_t v38 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v36, v37);
    uint64_t v66 = v30;
    swift_bridgeObjectRelease();
    id v67 = v29;
    swift_bridgeObjectRelease();
    id v68 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v39 = (unint64_t)v74;
    swift_bridgeObjectRelease();
    swift_release();
    v75[0] = 0;
    unsigned __int8 v40 = objc_msgSend(v70, sel_registerClientWithParameters_error_, v38, v75);

    if (v40)
    {
      uint64_t v41 = qword_26B3417C0;
      id v42 = v75[0];
      uint64_t v43 = v69;
      if (v41 != -1) {
        swift_once();
      }
      uint64_t v44 = sub_25B37F780();
      __swift_project_value_buffer(v44, (uint64_t)qword_26B3417A8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v45 = sub_25B37F760();
      os_log_type_t v46 = sub_25B37FCB0();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        v60[0] = swift_slowAlloc();
        v75[0] = (id)v60[0];
        *(_DWORD *)uint64_t v47 = v61;
        swift_bridgeObjectRetain();
        *(void *)(v47 + 4) = sub_25B2CA048(v43, v39, (uint64_t *)v75);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25B2C1000, v45, v46, "Reregistered client descriptor %{public}s", (uint8_t *)v47, 0xCu);
        uint64_t v48 = v60[0];
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v48, -1, -1);
        MEMORY[0x2611621B0](v47, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_7;
    }
    id v52 = v75[0];
    uint64_t v50 = sub_25B37F470();

    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v71 = 0;
    unint64_t v49 = v39;
LABEL_30:
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v53 = sub_25B37F780();
    __swift_project_value_buffer(v53, (uint64_t)qword_26B3417A8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v54 = sub_25B37F760();
    os_log_type_t v55 = sub_25B37FCB0();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc();
      uint64_t v57 = (void *)swift_slowAlloc();
      uint64_t v74 = (void *)v50;
      BOOL v58 = v57;
      v75[0] = v57;
      *(_DWORD *)uint64_t v56 = v61;
      swift_bridgeObjectRetain();
      *(void *)(v56 + 4) = sub_25B2CA048(v69, v49, (uint64_t *)v75);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25B2C1000, v54, v55, "Could not reregister client descriptor %{public}s", (uint8_t *)v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v58, -1, -1);
      MEMORY[0x2611621B0](v56, -1, -1);
      id v15 = v74;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      id v15 = (void *)v50;
    }

LABEL_7:
    unint64_t v12 = v72;
    int64_t v13 = v73;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_25B308D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v37 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_25B37F860();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  os_log_type_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_25B37F820();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_25B37F890();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)&v31 - v14;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261162290](a2 + 16);
  if (v15)
  {
    unint64_t v16 = (char *)v15;
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_25B37F780();
    __swift_project_value_buffer(v17, (uint64_t)qword_26B3417A8);
    int64_t v18 = sub_25B37F760();
    os_log_type_t v19 = sub_25B37FCD0();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v31 = v10;
    if (v20)
    {
      uint64_t v21 = v3;
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_25B2C1000, v18, v19, "Server says it has new messages", v22, 2u);
      id v23 = v22;
      uint64_t v3 = v21;
      uint64_t v10 = v31;
      MEMORY[0x2611621B0](v23, -1, -1);
    }

    if (v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending])
    {
    }
    else
    {
      v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending] = 1;
      sub_25B37F870();
      *uint64_t v9 = 100;
      uint64_t v24 = v32;
      uint64_t v25 = v34;
      (*(void (**)(void *, void, uint64_t))(v32 + 104))(v9, *MEMORY[0x263F8F000], v34);
      sub_25B37F880();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v9, v25);
      uint64_t v26 = v33;
      uint64_t v35 = *(void *)(v35 + 8);
      ((void (*)(char *, uint64_t))v35)(v13, v10);
      uint64_t v34 = *(void *)&v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v16;
      aBlock[4] = sub_25B318FAC;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B2E423C;
      aBlock[3] = &block_descriptor_188;
      uint64_t v28 = _Block_copy(aBlock);
      uint64_t v29 = v16;
      sub_25B37F840();
      uint64_t v39 = MEMORY[0x263F8EE78];
      sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
      sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
      sub_25B37FDC0();
      long long v30 = v38;
      MEMORY[0x261161410](v38, v7, v5, v28);
      _Block_release(v28);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v36);
      ((void (*)(char *, uint64_t))v35)(v30, v31);

      swift_release();
    }
  }
}

void sub_25B3092F8()
{
  uint64_t v1 = v0;
  v63[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v7 = v6;
  uint64_t v8 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_once();
LABEL_21:
    uint64_t v42 = sub_25B37F780();
    __swift_project_value_buffer(v42, (uint64_t)qword_26B3417A8);
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_25B37F760();
    os_log_type_t v44 = sub_25B37FCD0();
    if (os_log_type_enabled(v43, v44))
    {
      char v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v45 = 134217984;
      v63[0] = *(id *)(v8 + 16);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B2C1000, v43, v44, "Fetched %ld new messages", v45, 0xCu);
      MEMORY[0x2611621B0](v45, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v63[0] = (id)v8;
    sub_25B37F7C0();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v9 = sub_25B2FB590();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = (uint64_t *)(v1
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    uint64_t v8 = *v11;
    int64_t v12 = *(void *)(*v11 + 16);
    int64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (v12)
    {
      v58[1] = v1;
      uint64_t v59 = v10;
      v63[0] = (id)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_25B310B84(0, v12, 0);
      int64_t v13 = v63[0];
      int64_t v14 = sub_25B312828(v8);
      int v16 = v15;
      int v18 = v17 & 1;
      uint64_t v60 = v8 + 56;
      while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(unsigned char *)(v8 + 32))
      {
        if (((*(void *)(v60 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          goto LABEL_31;
        }
        if (*(_DWORD *)(v8 + 36) != v16) {
          goto LABEL_32;
        }
        int v61 = v18;
        os_log_type_t v19 = (uint64_t *)(*(void *)(v8 + 48) + 80 * v14);
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        v63[0] = v13;
        unint64_t v23 = v13[2];
        unint64_t v22 = v13[3];
        swift_bridgeObjectRetain();
        if (v23 >= v22 >> 1)
        {
          sub_25B310B84(v22 > 1, v23 + 1, 1);
          int64_t v13 = v63[0];
        }
        v13[2] = v23 + 1;
        uint64_t v24 = &v13[2 * v23];
        v24[4] = v20;
        v24[5] = v21;
        int64_t v25 = sub_25B3128C8(v14, v16, v61 & 1, v8);
        int64_t v14 = v25;
        int v16 = v26;
        int v18 = v27 & 1;
        if (!--v12)
        {
          sub_25B318F98(v25, v26, v18);
          swift_bridgeObjectRelease();
          uint64_t v10 = v59;
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_18:
    v63[0] = v13;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B318FDC();
    uint64_t v32 = sub_25B37F420();
    unint64_t v34 = v33;
    uint64_t v35 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v32, v34);
    swift_bridgeObjectRelease();
    swift_release();
    v63[0] = 0;
    id v36 = objc_msgSend(v10, sel_messagesWithParameters_error_, v35, v63);

    id v37 = v63[0];
    if (v36)
    {
      sub_25B37F400();
      swift_allocObject();
      sub_25B37F3F0();
      uint64_t v38 = sub_25B37F570();
      unint64_t v40 = v39;
      sub_25B319030();
      sub_25B37F3E0();
      sub_25B2CA2D8(v38, v40);
      swift_release();
      uint64_t v8 = (uint64_t)v63[0];
      if (!v63[0])
      {
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        return;
      }
      id v41 = v37;

      if (qword_26B3417C0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_34;
    }
    id v46 = v63[0];
    uint64_t v47 = (void *)sub_25B37F470();

    swift_willThrow();
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_25B37F780();
    __swift_project_value_buffer(v48, (uint64_t)qword_26B3417A8);
    id v49 = v47;
    id v50 = v47;
    uint64_t v51 = sub_25B37F760();
    os_log_type_t v52 = sub_25B37FCB0();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      unint64_t v54 = (void *)swift_slowAlloc();
      v63[0] = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v62 = (uint64_t)v47;
      id v55 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
      uint64_t v56 = sub_25B37F9E0();
      uint64_t v62 = sub_25B2CA048(v56, v57, (uint64_t *)v63);
      sub_25B37FD70();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B2C1000, v51, v52, "Could not fetch messages: %s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v54, -1, -1);
      MEMORY[0x2611621B0](v53, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_25B37F780();
    __swift_project_value_buffer(v28, (uint64_t)qword_26B3417A8);
    uint64_t v29 = sub_25B37F760();
    os_log_type_t v30 = sub_25B37FCB0();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_25B2C1000, v29, v30, "Could not fetch messages because target could not be created", v31, 2u);
      MEMORY[0x2611621B0](v31, -1, -1);
    }
  }
}

void sub_25B309AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v37 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_25B37F860();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_25B37F820();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_25B37F890();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)&v31 - v14;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261162290](a2 + 16);
  if (v15)
  {
    int v16 = (char *)v15;
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_25B37F780();
    __swift_project_value_buffer(v17, (uint64_t)qword_26B3417A8);
    int v18 = sub_25B37F760();
    os_log_type_t v19 = sub_25B37FCD0();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v31 = v10;
    if (v20)
    {
      uint64_t v21 = v3;
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl(&dword_25B2C1000, v18, v19, "Server says it has new devices", v22, 2u);
      unint64_t v23 = v22;
      uint64_t v3 = v21;
      uint64_t v10 = v31;
      MEMORY[0x2611621B0](v23, -1, -1);
    }

    if (v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending])
    {
    }
    else
    {
      v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending] = 1;
      sub_25B37F870();
      *uint64_t v9 = 100;
      uint64_t v24 = v32;
      uint64_t v25 = v34;
      (*(void (**)(void *, void, uint64_t))(v32 + 104))(v9, *MEMORY[0x263F8F000], v34);
      sub_25B37F880();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v9, v25);
      uint64_t v26 = v33;
      uint64_t v35 = *(void *)(v35 + 8);
      ((void (*)(char *, uint64_t))v35)(v13, v10);
      uint64_t v34 = *(void *)&v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v16;
      aBlock[4] = sub_25B31944C;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B2E423C;
      aBlock[3] = &block_descriptor_261;
      uint64_t v28 = _Block_copy(aBlock);
      uint64_t v29 = v16;
      sub_25B37F840();
      uint64_t v39 = MEMORY[0x263F8EE78];
      sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
      sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
      sub_25B37FDC0();
      os_log_type_t v30 = v38;
      MEMORY[0x261161410](v38, v7, v5, v28);
      _Block_release(v28);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v36);
      ((void (*)(char *, uint64_t))v35)(v30, v31);

      swift_release();
    }
  }
}

uint64_t sub_25B30A080(uint64_t *a1)
{
  uint64_t v3 = sub_25B37F8A0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0E0], v3);
  id v8 = v7;
  LOBYTE(v7) = sub_25B37F8B0();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = *(void *)(v1 + *a1);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v12; ++i)
      {
        int v14 = *(_DWORD *)(v11 + 4 * i + 32);
        notify_cancel(v14);
      }
      swift_bridgeObjectRelease();
    }
    *(void *)(v1 + v10) = MEMORY[0x263F8EE78];
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_25B30A1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v37 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_25B37F860();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_25B37F820();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_25B37F890();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)&v31 - v14;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261162290](a2 + 16);
  if (v15)
  {
    int v16 = (char *)v15;
    if (qword_26B3417C0 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_25B37F780();
    __swift_project_value_buffer(v17, (uint64_t)qword_26B3417A8);
    int v18 = sub_25B37F760();
    os_log_type_t v19 = sub_25B37FCD0();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v31 = v10;
    if (v20)
    {
      uint64_t v21 = v3;
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl(&dword_25B2C1000, v18, v19, "Server says it has new records", v22, 2u);
      unint64_t v23 = v22;
      uint64_t v3 = v21;
      uint64_t v10 = v31;
      MEMORY[0x2611621B0](v23, -1, -1);
    }

    if (v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending])
    {
    }
    else
    {
      v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending] = 1;
      sub_25B37F870();
      *uint64_t v9 = 100;
      uint64_t v24 = v32;
      uint64_t v25 = v34;
      (*(void (**)(void *, void, uint64_t))(v32 + 104))(v9, *MEMORY[0x263F8F000], v34);
      sub_25B37F880();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v9, v25);
      uint64_t v26 = v33;
      uint64_t v35 = *(void *)(v35 + 8);
      ((void (*)(char *, uint64_t))v35)(v13, v10);
      uint64_t v34 = *(void *)&v16[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v16;
      aBlock[4] = sub_25B31908C;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B2E423C;
      aBlock[3] = &block_descriptor_198;
      uint64_t v28 = _Block_copy(aBlock);
      uint64_t v29 = v16;
      sub_25B37F840();
      uint64_t v39 = MEMORY[0x263F8EE78];
      sub_25B3193FC(&qword_26B3411A8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
      sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
      sub_25B37FDC0();
      os_log_type_t v30 = v38;
      MEMORY[0x261161410](v38, v7, v5, v28);
      _Block_release(v28);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v36);
      ((void (*)(char *, uint64_t))v35)(v30, v31);

      swift_release();
    }
  }
}

uint64_t sub_25B30A784(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v52 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB830);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v46 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_25B37F640();
  uint64_t v11 = *(void *)(v50 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v50);
  unint64_t v54 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v53 = (uint64_t)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  BOOL v20 = (char *)&v43 - v19;
  uint64_t v47 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v49 = *(void *)(v47 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v47);
  unint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v48 = (uint64_t)&v43 - v24;
  uint64_t v25 = *a2;
  uint64_t v26 = (unint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  unint64_t v27 = *v26;
  uint64_t v58 = a3;
  uint64_t v59 = v25;
  uint64_t v60 = v55;
  uint64_t v61 = v56;
  swift_bridgeObjectRetain();
  uint64_t v28 = v62;
  uint64_t v62 = sub_25B2E4100(MEMORY[0x263F8EE80], (void (*)(void **, id *))sub_25B318CC8, (uint64_t)v57, v27);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
    uint64_t v30 = v25 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    uint64_t v55 = v25 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    swift_beginAccess();
    os_log_type_t v44 = v20;
    char v45 = type metadata accessor for ReplicatorRecord.ID;
    sub_25B3198C0(v30, (uint64_t)v20, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v31 = v25 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
    swift_beginAccess();
    uint64_t v56 = 0;
    uint64_t v32 = v11;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v43 = v15;
    uint64_t v34 = v50;
    v33(v15, v31, v50);
    sub_25B3198C0((uint64_t)v20, v53, type metadata accessor for ReplicatorRecord.ID);
    v33(v54, (uint64_t)v15, v34);
    uint64_t v35 = sub_25B37F5D0();
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
    uint64_t v37 = (uint64_t)v51;
    v36(v51, 1, 1, v35);
    uint64_t v38 = (int *)v47;
    uint64_t v39 = (uint64_t)&v23[*(int *)(v47 + 28)];
    v36((char *)v39, 1, 1, v35);
    sub_25B319928(v53, (uint64_t)v23, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v23[v38[5]], v54, v34);
    *(void *)&v23[v38[6]] = v62;
    sub_25B31964C(v37, v39, &qword_26B340F80);
    *(void *)&v23[v38[8]] = 0;
    uint64_t v40 = v48;
    sub_25B319928((uint64_t)v23, v48, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v34);
    id v41 = v44;
    sub_25B319990((uint64_t)v44, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v55, (uint64_t)v41, v45);
    uint64_t v42 = v46;
    sub_25B3198C0(v40, v46, type metadata accessor for ReplicatorRecord);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v49 + 56))(v42, 0, 1, v38);
    sub_25B2CB680(v42, v41);
    return sub_25B319990(v40, type metadata accessor for ReplicatorRecord);
  }
  return result;
}

uint64_t sub_25B30AD74(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v129 = a6;
  unint64_t v138 = a5;
  uint64_t v136 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB828);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v135 = (uint64_t)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorRecord.Value(0);
  uint64_t v133 = *(void *)(v12 - 8);
  uint64_t v134 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v131 = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v132 = (uint64_t)v113 - v15;
  uint64_t v16 = sub_25B37F500();
  uint64_t v139 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v137 = (uint64_t)v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v130 = (uint64_t)v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)v113 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)v113 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v141 = (uint64_t)v113 - v27;
  uint64_t v140 = *a2;
  uint64_t v28 = (uint64_t *)(v140 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
  uint64_t result = swift_beginAccess();
  unint64_t v30 = v28[1];
  if (v30 >> 60 != 15)
  {
    unint64_t v128 = v23;
    uint64_t v31 = *v28;
    uint64_t v32 = (uint64_t *)(a3
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    uint64_t v33 = *v32;
    uint64_t v34 = a4;
    swift_bridgeObjectRetain();
    sub_25B318B74(v31, v30);
    sub_25B2F7110(v33, v34, &v148);
    swift_bridgeObjectRelease();
    unint64_t v35 = v30;
    uint64_t v36 = *((void *)&v148 + 1);
    if (!*((void *)&v148 + 1)) {
      return sub_25B2CA2C4(v31, v35);
    }
    unint64_t v119 = (unint64_t)v26;
    uint64_t v120 = v31;
    uint64_t v126 = v6;
    uint64_t v127 = (char *)v16;
    unint64_t v121 = v35;
    int64_t v122 = (id *)v148;
    uint64_t v123 = v149;
    os_log_type_t v124 = v150;
    unint64_t v37 = v152;
    uint64_t v125 = v151;
    unint64_t v39 = v153;
    uint64_t v38 = v154;
    uint64_t v40 = v155;
    unint64_t v41 = v156;
    uint64_t v42 = &v34[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
    swift_beginAccess();
    if (*(void *)(v40 + 16))
    {
      unint64_t v115 = v41;
      unint64_t v116 = v37;
      unint64_t v117 = v39;
      uint64_t v118 = v38;
      uint64_t v43 = *((void *)v42 + 2);
      uint64_t v44 = *((void *)v42 + 3);
      swift_bridgeObjectRetain();
      unint64_t v45 = sub_25B2D5EB0(v43, v44);
      if (v46)
      {
        uint64_t v47 = *(void *)(v40 + 56) + 48 * v45;
        uint64_t v48 = *(void **)(v47 + 8);
        int v114 = *(unsigned __int8 *)(v47 + 40);
        swift_bridgeObjectRetain();
        sub_25B310A8C((uint64_t)v122, v36);
        swift_bridgeObjectRelease();
        uint64_t v49 = v119;
        sub_25B2E2FE0(v138, v119, &qword_26B340CE0);
        uint64_t v50 = v139;
        uint64_t v51 = v127;
        int v52 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v139 + 48))(v49, 1, v127);
        uint64_t v53 = v126;
        if (v52 == 1)
        {
          swift_bridgeObjectRelease();
          sub_25B2E344C(v49, &qword_26B340CE0);
LABEL_37:
          uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v50 + 56);
          uint64_t v98 = v141;
          v97(v141, 1, 1, v51);
LABEL_38:
          uint64_t v99 = v130;
          sub_25B2E2FE0(v98, v130, &qword_26B340CE0);
          uint64_t v100 = v134;
          char v101 = v131;
          uint64_t v102 = (uint64_t)&v131[*(int *)(v134 + 20)];
          v97(v102, 1, 1, v51);
          uint64_t v103 = v120;
          unint64_t v104 = v121;
          *char v101 = v120;
          v101[1] = v104;
          sub_25B318B74(v103, v104);
          sub_25B31964C(v99, v102, &qword_26B340CE0);
          uint64_t v105 = v132;
          sub_25B319928((uint64_t)v101, v132, type metadata accessor for ReplicatorRecord.Value);
          uint64_t v106 = (uint64_t *)(v140
                           + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
          swift_beginAccess();
          uint64_t v107 = *v106;
          uint64_t v108 = v135;
          sub_25B3198C0(v105, v135, type metadata accessor for ReplicatorRecord.Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v133 + 56))(v108, 0, 1, v100);
          sub_25B2CB420(v108, v107);
          sub_25B2CA2C4(v103, v104);
          sub_25B319990(v105, type metadata accessor for ReplicatorRecord.Value);
          return sub_25B2E344C(v141, &qword_26B340CE0);
        }
        v113[1] = v48;
        uint64_t v54 = v137;
        (*(void (**)(uint64_t, uint64_t, char *))(v50 + 32))(v137, v49, v51);
        uint64_t v55 = v140;
        uint64_t v56 = (id *)(v140 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
        swift_beginAccess();
        id v57 = *v56;
        if (!*v56)
        {
          (*(void (**)(uint64_t, char *))(v50 + 8))(v54, v51);
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        uint64_t v58 = (unint64_t *)(v55
                                 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
        swift_beginAccess();
        unint64_t v59 = *v58;
        if (*v58)
        {
          v113[0] = v57;
          uint64_t v60 = (uint64_t)v128;
          unint64_t v61 = v59;
          if (v59 >> 62)
          {
LABEL_45:
            swift_bridgeObjectRetain_n();
            id v111 = v113[0];
            uint64_t v62 = sub_25B37FF90();
            swift_bridgeObjectRelease();
            if (v62) {
              goto LABEL_15;
            }
          }
          else
          {
            uint64_t v62 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            id v63 = v113[0];
            swift_bridgeObjectRetain();
            if (v62)
            {
LABEL_15:
              unint64_t v138 = v61 & 0xC000000000000001;
              uint64_t v123 = MEMORY[0x263F8EE80];
              uint64_t v50 = 4;
              unint64_t v115 = v61;
              uint64_t v125 = v62;
              while (1)
              {
                if (v138) {
                  uint64_t v65 = (char *)MEMORY[0x2611615C0](v50 - 4, v61);
                }
                else {
                  uint64_t v65 = (char *)*(id *)(v61 + 8 * v50);
                }
                uint64_t v51 = v65;
                uint64_t v60 = v50 - 3;
                if (__OFADD__(v50 - 4, 1))
                {
                  __break(1u);
LABEL_43:
                  __break(1u);
LABEL_44:
                  __break(1u);
                  goto LABEL_45;
                }
                uint64_t v66 = (uint64_t *)&v65[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
                swift_beginAccess();
                uint64_t v67 = v66[1];
                if (!v67
                  || (uint64_t v68 = *v66,
                      uint64_t v69 = (uint64_t *)&v51[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data],
                      swift_beginAccess(),
                      unint64_t v70 = v69[1],
                      v70 >> 60 == 15))
                {
                }
                else
                {
                  os_log_type_t v124 = v51;
                  int64_t v122 = (id *)(v50 - 3);
                  uint64_t v71 = *v69;
                  uint64_t v150 = (char *)MEMORY[0x263F06F78];
                  unint64_t v72 = v70;
                  unint64_t v117 = sub_25B318CE8();
                  unint64_t v151 = v117;
                  unint64_t v116 = sub_25B318D3C();
                  unint64_t v152 = v116;
                  *(void *)&long long v148 = v71;
                  *((void *)&v148 + 1) = v72;
                  sub_25B2DCE7C(&v148, &v146);
                  sub_25B318B74(v71, v72);
                  uint64_t v118 = v71;
                  unint64_t v119 = v72;
                  sub_25B318B74(v71, v72);
                  uint64_t v73 = v67;
                  swift_bridgeObjectRetain();
                  uint64_t v74 = (void *)v123;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  int v157 = v74;
                  uint64_t v60 = v68;
                  uint64_t v76 = v68;
                  uint64_t v77 = v73;
                  unint64_t v61 = sub_25B2D5EB0(v76, v73);
                  uint64_t v79 = v74[2];
                  BOOL v80 = (v78 & 1) == 0;
                  uint64_t v81 = v79 + v80;
                  if (__OFADD__(v79, v80)) {
                    goto LABEL_43;
                  }
                  char v82 = v78;
                  uint64_t v83 = v124;
                  if (v74[3] >= v81)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                      sub_25B2DC340();
                    }
                    uint64_t v84 = (char *)v60;
                  }
                  else
                  {
                    sub_25B2D8DB8(v81, isUniquelyReferenced_nonNull_native);
                    uint64_t v84 = (char *)v60;
                    unint64_t v85 = sub_25B2D5EB0(v60, v77);
                    if ((v82 & 1) != (v86 & 1))
                    {
                      uint64_t result = sub_25B3801C0();
                      __break(1u);
                      return result;
                    }
                    unint64_t v61 = v85;
                  }
                  uint64_t v60 = (uint64_t)v122;
                  uint64_t v87 = v157;
                  uint64_t v123 = (uint64_t)v157;
                  if (v82)
                  {
                    uint64_t v88 = (_OWORD *)(v157[7] + 48 * v61);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
                    sub_25B2DCE7C(&v146, v88);
                    unint64_t v61 = v115;
                  }
                  else
                  {
                    uint64_t v53 = v147;
                    uint64_t v89 = __swift_mutable_project_boxed_opaque_existential_2((uint64_t)&v146, v147);
                    int64_t v122 = v113;
                    MEMORY[0x270FA5388](v89);
                    uint64_t v51 = v84;
                    uint64_t v91 = (long long *)((char *)v113 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0));
                    (*(void (**)(long long *))(v92 + 16))(v91);
                    uint64_t v143 = MEMORY[0x263F06F78];
                    unint64_t v144 = v117;
                    unint64_t v145 = v116;
                    long long v142 = *v91;
                    v87[(v61 >> 6) + 8] |= 1 << v61;
                    uint64_t v93 = (char **)(v87[6] + 16 * v61);
                    *uint64_t v93 = v51;
                    v93[1] = (char *)v77;
                    sub_25B2DCE7C(&v142, (_OWORD *)(v87[7] + 48 * v61));
                    uint64_t v94 = v87[2];
                    BOOL v95 = __OFADD__(v94, 1);
                    uint64_t v96 = v94 + 1;
                    if (v95) {
                      goto LABEL_44;
                    }
                    v87[2] = v96;
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
                    swift_bridgeObjectRetain();
                    unint64_t v61 = v115;
                    uint64_t v83 = v124;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_25B2CA2C4(v118, v119);

                  uint64_t v53 = v126;
                }
                ++v50;
                BOOL v64 = v60 == v125;
                uint64_t v51 = v127;
                uint64_t v60 = (uint64_t)v128;
                if (v64)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v50 = v139;
                  id v57 = v113[0];
                  uint64_t v109 = v123;
                  goto LABEL_47;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v109 = MEMORY[0x263F8EE80];
          id v57 = v113[0];
        }
        else
        {
          id v110 = v57;
          uint64_t v109 = MEMORY[0x263F8EE80];
          uint64_t v60 = (uint64_t)v128;
        }
LABEL_47:
        uint64_t v112 = v137;
        sub_25B30B958(v57, v137, v109, v114, v60);
        if (v53)
        {
          sub_25B2CA2C4(v120, v121);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, char *))(v50 + 8))(v112, v51);
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *))(v50 + 8))(v112, v51);
        uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v50 + 56);
        v97(v60, 0, 1, v51);
        uint64_t v98 = v141;
        sub_25B2E31F0(v60, v141, &qword_26B340CE0);
        goto LABEL_38;
      }
      sub_25B310A8C((uint64_t)v122, v36);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_25B310A8C((uint64_t)v122, v36);
    }
    return sub_25B2CA2C4(v120, v121);
  }
  return result;
}

uint64_t sub_25B30B958@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v38 = a4;
  uint64_t v35 = a3;
  uint64_t v37 = a2;
  v40[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v36 = sub_25B37F490();
  uint64_t v7 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25B37F640();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B3417C0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_25B37F780();
  __swift_project_value_buffer(v14, (uint64_t)qword_26B3417A8);
  uint64_t v15 = sub_25B37F760();
  os_log_type_t v16 = sub_25B37FCD0();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = a1;
    uint64_t v18 = v13;
    uint64_t v19 = v11;
    uint64_t v20 = a5;
    uint64_t v21 = v10;
    uint64_t v22 = v17;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_25B2C1000, v15, v16, "Ingesting file handle", v17, 2u);
    unint64_t v23 = v22;
    uint64_t v10 = v21;
    a5 = v20;
    uint64_t v11 = v19;
    uint64_t v13 = v18;
    a1 = v34;
    MEMORY[0x2611621B0](v23, -1, -1);
  }

  sub_25B37F630();
  v40[0] = (id)sub_25B37F5F0();
  v40[1] = v24;
  uint64_t v25 = v36;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F06E50], v36);
  sub_25B318B88();
  sub_25B37F4F0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v26 = v39;
    sub_25B36BCD8();
    if (v26) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v27 = v39;
    NSFileHandle.copyFile(to:extendedAttributes:)(a5, v35);
    if (v27) {
      goto LABEL_12;
    }
  }
  v40[0] = 0;
  if (objc_msgSend(a1, sel_closeAndReturnError_, v40))
  {
    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    id v29 = v40[0];
    return v28(v13, v10);
  }
  id v31 = v40[0];
  sub_25B37F470();

  swift_willThrow();
LABEL_12:
  uint64_t v32 = sub_25B37F500();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a5, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_25B30BD2C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *a2;
  uint64_t v15 = (unint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  unint64_t v16 = *v15;
  uint64_t v22 = a3;
  uint64_t v23 = v14;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_25B2E4100(MEMORY[0x263F8EE80], (void (*)(void **, id *))sub_25B318B54, (uint64_t)v21, v16);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5)
  {
    uint64_t v19 = v14 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    swift_beginAccess();
    sub_25B3198C0(v19, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *a1;
    *a1 = 0x8000000000000000;
    sub_25B2D9978((uint64_t)v17, v13, isUniquelyReferenced_nonNull_native);
    *a1 = v26;
    swift_bridgeObjectRelease();
    return sub_25B319990((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
  }
  return result;
}

void sub_25B30BEE0(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a6;
  uint64_t v92 = a5;
  uint64_t v91 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v78[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_25B37F500();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v94 = &v78[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = *a2;
  uint64_t v17 = (void **)(*a2 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  uint64_t v18 = *v17;
  if (!*v17) {
    return;
  }
  uint64_t v96 = v16;
  uint64_t v19 = (unint64_t *)(v16
                           + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  unint64_t v20 = *v19;
  if (!v20) {
    return;
  }
  char v86 = v12;
  uint64_t v21 = (uint64_t *)(a3
                  + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  uint64_t v22 = *v21;
  uint64_t v23 = a4;
  swift_bridgeObjectRetain();
  id v24 = v18;
  swift_bridgeObjectRetain();
  sub_25B2F7110(v22, v23, &v100);
  swift_bridgeObjectRelease();
  uint64_t v25 = v101;
  if (!v101)
  {

    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v110 = v20;
  uint64_t v87 = v24;
  uint64_t v81 = v14;
  uint64_t v82 = v13;
  uint64_t v90 = v6;
  uint64_t v95 = v100;
  uint64_t v97 = v102;
  uint64_t v26 = v104;
  unint64_t v98 = v103;
  uint64_t v27 = v105;
  uint64_t v28 = v106;
  unint64_t v30 = v107;
  uint64_t v29 = v108;
  uint64_t v31 = v109;
  uint64_t v32 = &v23[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
  swift_beginAccess();
  if (!*(void *)(v29 + 16))
  {
    sub_25B310A8C(v95, v25);

LABEL_32:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v83 = v31;
  uint64_t v84 = v26;
  uint64_t v85 = v27;
  uint64_t v88 = v28;
  unint64_t v89 = v30;
  uint64_t v33 = *((void *)v32 + 2);
  uint64_t v34 = *((void *)v32 + 3);
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_25B2D5EB0(v33, v34);
  if ((v36 & 1) == 0)
  {
    sub_25B310A8C(v95, v25);

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v37 = *(void *)(v29 + 56) + 48 * v35;
  uint64_t v38 = *(void *)(v37 + 8);
  int v79 = *(unsigned __int8 *)(v37 + 40);
  uint64_t v80 = v38;
  swift_bridgeObjectRetain();
  sub_25B310A8C(v95, v25);
  swift_bridgeObjectRelease();
  uint64_t v39 = v110;
  uint64_t isUniquelyReferenced_nonNull_native = v90;
  if (v110 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    uint64_t v41 = sub_25B37FF90();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v42 = v96;
  if (v41)
  {
    unint64_t v98 = v39 & 0xC000000000000001;
    uint64_t v43 = (void *)MEMORY[0x263F8EE80];
    uint64_t v44 = 4;
    uint64_t v97 = v41;
    while (1)
    {
      if (v98) {
        unint64_t v45 = (char *)MEMORY[0x2611615C0](v44 - 4, v39);
      }
      else {
        unint64_t v45 = (char *)*(id *)(v39 + 8 * v44);
      }
      char v46 = v45;
      uint64_t v47 = v44 - 3;
      if (__OFADD__(v44 - 4, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v48 = (uint64_t *)&v45[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
      swift_beginAccess();
      uint64_t v49 = v48[1];
      if (!v49
        || (uint64_t v39 = *v48,
            uint64_t v50 = (uint64_t *)&v46[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data],
            swift_beginAccess(),
            unint64_t v51 = v50[1],
            v51 >> 60 == 15))
      {
      }
      else
      {
        uint64_t v52 = *v50;
        swift_bridgeObjectRetain();
        uint64_t v88 = v52;
        unint64_t v89 = v51;
        sub_25B318B74(v52, v51);
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v99 = v43;
        uint64_t v95 = v39;
        unint64_t v54 = sub_25B2D5EB0(v39, v49);
        uint64_t v55 = v43[2];
        BOOL v56 = (v53 & 1) == 0;
        uint64_t v57 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_39;
        }
        char v58 = v53;
        if (v43[3] >= v57)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_25B2DB5C4();
          }
        }
        else
        {
          sub_25B2D6F40(v57, isUniquelyReferenced_nonNull_native);
          unint64_t v59 = sub_25B2D5EB0(v95, v49);
          if ((v58 & 1) != (v60 & 1))
          {
            sub_25B3801C0();
            __break(1u);
            return;
          }
          unint64_t v54 = v59;
        }
        uint64_t isUniquelyReferenced_nonNull_native = v90;
        uint64_t v61 = v95;
        uint64_t v43 = v99;
        if (v58)
        {
          uint64_t v62 = v99[7] + 16 * v54;
          sub_25B2CA2D8(*(void *)v62, *(void *)(v62 + 8));
          unint64_t v63 = v89;
          *(void *)uint64_t v62 = v88;
          *(void *)(v62 + 8) = v63;
        }
        else
        {
          v99[(v54 >> 6) + 8] |= 1 << v54;
          BOOL v64 = (uint64_t *)(v43[6] + 16 * v54);
          uint64_t *v64 = v61;
          v64[1] = v49;
          uint64_t v65 = (uint64_t *)(v43[7] + 16 * v54);
          unint64_t v66 = v89;
          *uint64_t v65 = v88;
          v65[1] = v66;
          uint64_t v67 = v43[2];
          BOOL v68 = __OFADD__(v67, 1);
          uint64_t v69 = v67 + 1;
          if (v68) {
            goto LABEL_40;
          }
          v43[2] = v69;
          swift_bridgeObjectRetain();
        }
        uint64_t v42 = v96;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v44;
      uint64_t v39 = v110;
      if (v47 == v97) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v43 = (void *)MEMORY[0x263F8EE80];
LABEL_34:
  swift_bridgeObjectRelease_n();
  unint64_t v70 = sub_25B30C71C((uint64_t)v43);
  swift_bridgeObjectRelease();
  uint64_t v71 = v94;
  unint64_t v72 = v87;
  sub_25B30B958(v87, v92, v70, v79, (uint64_t)v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (isUniquelyReferenced_nonNull_native)
  {
  }
  else
  {
    uint64_t v73 = (uint64_t *)(v42 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
    swift_beginAccess();
    uint64_t v74 = *v73;
    uint64_t v75 = v81;
    uint64_t v76 = (uint64_t)v86;
    uint64_t v77 = v82;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 16))(v86, v71, v82);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v77);
    sub_25B2CBA5C(v76, v74);

    (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v71, v77);
  }
}

unint64_t sub_25B30C71C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB58);
    uint64_t v2 = (void *)sub_25B37FFC0();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v7 = MEMORY[0x263F06F78];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v13 >= v28) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v29 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v14 = *(void *)(v29 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_36;
              }
              if (v15 >= v28) {
                break;
              }
              unint64_t v14 = *(void *)(v29 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_25B318BDC();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v14 - 1) & v14;
  unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unint64_t v12 = v11 | (i << 6))
  {
    uint64_t v17 = 16 * v12;
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 56) + v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    uint64_t v31 = *v18;
    uint64_t v32 = v18[1];
    swift_bridgeObjectRetain();
    sub_25B2E2B14(v20, v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCD0);
    swift_dynamicCast();
    sub_25B2DCE7C(v33, v35);
    sub_25B2DCE7C(v35, v36);
    sub_25B2DCE7C(v36, &v34);
    unint64_t result = sub_25B2D5EB0(v31, v32);
    unint64_t v22 = result;
    if (v23)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v9 = v31;
      v9[1] = v32;
      uint64_t v7 = v8;
      uint64_t v10 = (_OWORD *)(v2[7] + 48 * v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      unint64_t result = (unint64_t)sub_25B2DCE7C(&v34, v10);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v24 = (uint64_t *)(v2[6] + 16 * result);
    *id v24 = v31;
    v24[1] = v32;
    unint64_t result = (unint64_t)sub_25B2DCE7C(&v34, (_OWORD *)(v2[7] + 48 * result));
    uint64_t v25 = v2[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v2[2] = v27;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_25B30CA60(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v148 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341390);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  id v182 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v181 = (char *)&v147 - v6;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v173);
  uint64_t v177 = (uint64_t)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_25B37F640();
  uint64_t v8 = *(void *)(v180 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v180);
  unint64_t v163 = (char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v152 = (char *)&v147 - v11;
  uint64_t v12 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v167 = (uint64_t)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v160 = (uint64_t)&v147 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v159 = (uint64_t)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for ReplicatorRecord.ID(0);
  unint64_t v18 = *(void *)(v168 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v168);
  unint64_t v21 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v185 = (uint64_t *)((char *)&v147 - v23);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v183 = (uint64_t)&v147 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  int64_t v28 = (uint64_t *)((char *)&v147 - v27);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  uint64_t v165 = (uint64_t)&v147 - v30;
  MEMORY[0x270FA5388](v29);
  int v174 = (uint64_t *)((char *)&v147 - v31);
  uint64_t v32 = sub_25B37F8A0();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  unint64_t v35 = (uint64_t *)((char *)&v147 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v36 = *(void **)(v2 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *unint64_t v35 = v36;
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v35, *MEMORY[0x263F8F0E0], v32);
  id v37 = v36;
  char v38 = sub_25B37F8B0();
  uint64_t v39 = (*(uint64_t (**)(void *, uint64_t))(v33 + 8))(v35, v32);
  if ((v38 & 1) == 0)
  {
LABEL_112:
    __break(1u);
LABEL_113:
    swift_once();
    goto LABEL_4;
  }
  unint64_t v153 = (void *)sub_25B2FB590(v39);
  if (!v153)
  {
    if (qword_26B3417C0 == -1)
    {
LABEL_99:
      uint64_t v136 = sub_25B37F780();
      __swift_project_value_buffer(v136, (uint64_t)qword_26B3417A8);
      uint64_t v137 = sub_25B37F760();
      os_log_type_t v138 = sub_25B37FCB0();
      if (os_log_type_enabled(v137, v138))
      {
        uint64_t v139 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v139 = 0;
        _os_log_impl(&dword_25B2C1000, v137, v138, "Could not fetch record versions because target could not be created", v139, 2u);
        MEMORY[0x2611621B0](v139, -1, -1);
      }

      return 0;
    }
LABEL_115:
    swift_once();
    goto LABEL_99;
  }
  unint64_t v192 = MEMORY[0x263F8EE80];
  uint64_t v40 = swift_bridgeObjectRetain();
  uint64_t v41 = sub_25B3430F0(v40);
  swift_bridgeObjectRelease();
  unint64_t v191 = v41;
  long long v189 = 0;
  unint64_t v190 = MEMORY[0x263F8EE78];
  if (qword_26B3417C0 != -1) {
    goto LABEL_113;
  }
LABEL_4:
  uint64_t v42 = sub_25B37F780();
  uint64_t v161 = __swift_project_value_buffer(v42, (uint64_t)qword_26B3417A8);
  uint64_t v43 = sub_25B37F760();
  os_log_type_t v44 = sub_25B37FCD0();
  BOOL v45 = os_log_type_enabled(v43, v44);
  char v46 = v174;
  if (v45)
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl(&dword_25B2C1000, v43, v44, "Begin fetching client-defined record IDs in batches", v47, 2u);
    MEMORY[0x2611621B0](v47, -1, -1);
  }

  uint64_t v158 = *(void *)(v148 + 16);
  if (!v158)
  {
LABEL_103:
    unint64_t v141 = v192;
    long long v142 = v189;
    swift_bridgeObjectRetain();
    uint64_t v143 = sub_25B37F760();
    os_log_type_t v144 = sub_25B37FCD0();
    if (os_log_type_enabled(v143, v144))
    {
      uint64_t v145 = swift_slowAlloc();
      *(_DWORD *)uint64_t v145 = 134349312;
      uint64_t v187 = *(void **)(v141 + 16);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      *(_WORD *)(v145 + 12) = 2050;
      uint64_t v187 = v142;
      sub_25B37FD70();
      _os_log_impl(&dword_25B2C1000, v143, v144, "End fetching record IDs in batches; fetched %{public}ld in %{public}ld batches",
        (uint8_t *)v145,
        0x16u);
      MEMORY[0x2611621B0](v145, -1, -1);

      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    unint64_t v140 = v192;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v140;
  }
  unint64_t v157 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v156 = v148 + v157;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v48 = 0;
  unint64_t v162 = 0;
  uint64_t v186 = *(void *)(v18 + 72);
  char v179 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  unint64_t v166 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v171 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v154 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  unint64_t v151 = &v188;
  *(void *)&long long v49 = 134349568;
  long long v150 = v49;
  *(void *)&long long v49 = 138543362;
  long long v149 = v49;
  uint64_t v50 = (uint64_t)v182;
  uint64_t v172 = v21;
  int64_t v155 = v2;
  while (1)
  {
    uint64_t v164 = v48;
    sub_25B3198C0(v156 + v186 * v48, (uint64_t)v46, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0((uint64_t)v46, v165, type metadata accessor for ReplicatorRecord.ID);
    swift_beginAccess();
    unint64_t v51 = v190;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v51 = sub_25B3103B4(0, *(void *)(v51 + 16) + 1, 1, v51, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
    }
    unint64_t v53 = *(void *)(v51 + 16);
    unint64_t v52 = *(void *)(v51 + 24);
    if (v53 >= v52 >> 1) {
      unint64_t v51 = sub_25B3103B4(v52 > 1, v53 + 1, 1, v51, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
    }
    *(void *)(v51 + 16) = v53 + 1;
    sub_25B319928(v165, v51 + v157 + v53 * v186, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v190 = v51;
    swift_endAccess();
    swift_beginAccess();
    unint64_t v54 = v191;
    sub_25B380250();
    unint64_t v170 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v55 = v168;
    uint64_t v178 = (uint64_t)v46 + *(int *)(v168 + 28);
    uint64_t v56 = v160;
    sub_25B3198C0(v178, v160, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v57 = *v179;
    uint64_t v58 = v180;
    if ((*v179)(v56, 1, v180) == 1)
    {
      sub_25B380260();
    }
    else
    {
      unint64_t v59 = v152;
      (*v166)(v152, v56, v58);
      sub_25B380260();
      sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      char v60 = v59;
      uint64_t v55 = v168;
      (*v171)((uint64_t)v60, v58);
    }
    unint64_t v169 = (void *)((char *)v46 + *(int *)(v55 + 32));
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v61 = sub_25B380290();
    unint64_t v62 = v170;
    uint64_t v63 = -1 << *(unsigned char *)(v170 + 32);
    unint64_t v64 = v61 & ~v63;
    unint64_t v65 = v170 + 56;
    if (((*(void *)(v170 + 56 + ((v64 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      uint64_t v83 = v159;
      (*v154)(v159, 1, 1, v55);
      goto LABEL_48;
    }
    char v176 = v57;
    uint64_t v184 = ~v63;
    uint64_t v66 = v177;
    unint64_t v175 = v170 + 56;
    while (1)
    {
      unint64_t v67 = v64 * v186;
      sub_25B3198C0(*(void *)(v62 + 48) + v64 * v186, (uint64_t)v28, type metadata accessor for ReplicatorRecord.ID);
      BOOL v68 = *v28 == *v46 && v28[1] == v46[1];
      if (!v68 && (sub_25B3801A0() & 1) == 0) {
        goto LABEL_21;
      }
      BOOL v69 = v28[2] == v46[2] && v28[3] == v46[3];
      if (!v69 && (sub_25B3801A0() & 1) == 0 || (v28[4] != v46[4] || v28[5] != v46[5]) && (sub_25B3801A0() & 1) == 0) {
        goto LABEL_21;
      }
      uint64_t v70 = v55;
      uint64_t v71 = v66 + *(int *)(v173 + 48);
      sub_25B3198C0((uint64_t)v28 + *(int *)(v55 + 28), v66, type metadata accessor for ReplicatorRecord.ID.Ownership);
      sub_25B3198C0(v178, v71, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v72 = v180;
      uint64_t v73 = v176;
      if (v176(v66, 1, v180) == 1)
      {
        unsigned int v74 = v73(v71, 1, v72);
        uint64_t v50 = (uint64_t)v182;
        char v46 = v174;
        uint64_t v55 = v70;
        if (v74 == 1) {
          goto LABEL_43;
        }
        goto LABEL_40;
      }
      uint64_t v75 = v66;
      uint64_t v76 = v167;
      sub_25B3198C0(v75, v167, type metadata accessor for ReplicatorRecord.ID.Ownership);
      if (v73(v71, 1, v72) != 1) {
        break;
      }
      (*v171)(v76, v72);
      uint64_t v50 = (uint64_t)v182;
      char v46 = v174;
      uint64_t v55 = v70;
LABEL_40:
      uint64_t v66 = v177;
      sub_25B2E344C(v177, &qword_26B341530);
LABEL_41:
      unint64_t v21 = v172;
      unint64_t v65 = v175;
LABEL_21:
      sub_25B319990((uint64_t)v28, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v64 = (v64 + 1) & v184;
      if (((*(void *)(v65 + ((v64 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v64) & 1) == 0) {
        goto LABEL_47;
      }
    }
    uint64_t v77 = v163;
    (*v166)(v163, v71, v72);
    char v78 = sub_25B37F610();
    uint64_t v79 = v72;
    uint64_t v80 = *v171;
    uint64_t v81 = v77;
    uint64_t v55 = v168;
    (*v171)((uint64_t)v81, v79);
    v80(v76, v79);
    unint64_t v62 = v170;
    uint64_t v50 = (uint64_t)v182;
    char v46 = v174;
    if ((v78 & 1) == 0)
    {
      uint64_t v66 = v177;
      sub_25B319990(v177, type metadata accessor for ReplicatorRecord.ID.Ownership);
      goto LABEL_41;
    }
LABEL_43:
    uint64_t v66 = v177;
    sub_25B319990(v177, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v82 = (void *)((char *)v28 + *(int *)(v55 + 32));
    unint64_t v21 = v172;
    unint64_t v65 = v175;
    if ((*v82 != *v169 || v82[1] != v169[1]) && (sub_25B3801A0() & 1) == 0) {
      goto LABEL_21;
    }
    sub_25B319990((uint64_t)v28, type metadata accessor for ReplicatorRecord.ID);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v134 = v191;
    uint64_t v187 = (void *)v191;
    unint64_t v191 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_25B3595A8();
      unint64_t v134 = (unint64_t)v187;
    }
    uint64_t v135 = v159;
    sub_25B319928(*(void *)(v134 + 48) + v67, v159, type metadata accessor for ReplicatorRecord.ID);
    sub_25B35B590(v64);
    uint64_t v83 = v135;
    unint64_t v191 = (unint64_t)v187;
    swift_bridgeObjectRelease();
    (*v154)(v135, 0, 1, v168);
LABEL_48:
    swift_endAccess();
    sub_25B2E344C(v83, (uint64_t *)&unk_26B341370);
    if (*(void *)(v190 + 16) <= 0x32uLL && *(void *)(v191 + 16))
    {
      sub_25B319990((uint64_t)v46, type metadata accessor for ReplicatorRecord.ID);
      goto LABEL_10;
    }
    uint64_t v84 = sub_25B37F760();
    os_log_type_t v85 = sub_25B37FCD0();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = v150;
      uint64_t v187 = v189;
      sub_25B37FD70();
      *(_WORD *)(v86 + 12) = 2050;
      uint64_t v187 = *(void **)(v190 + 16);
      sub_25B37FD70();
      *(_WORD *)(v86 + 22) = 2048;
      uint64_t v187 = *(void **)(v191 + 16);
      sub_25B37FD70();
      _os_log_impl(&dword_25B2C1000, v84, v85, "Fetching batch %{public}ld with count %{public}ld IDs; %ld IDs remaining",
        (uint8_t *)v86,
        0x20u);
      MEMORY[0x2611621B0](v86, -1, -1);
    }

    uint64_t v87 = (id *)swift_bridgeObjectRetain();
    uint64_t v88 = v162;
    uint64_t v89 = sub_25B30E350(v87, v153);
    if (!v88) {
      break;
    }
    swift_bridgeObjectRelease();
    id v90 = v88;
    id v91 = v88;
    uint64_t v92 = sub_25B37F760();
    os_log_type_t v93 = sub_25B37FCB0();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = v88;
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v95 = v149;
      uint64_t v184 = (uint64_t)(v95 + 4);
      id v97 = v94;
      uint64_t v98 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v187 = (void *)v98;
      sub_25B37FD70();
      *uint64_t v96 = v98;
      uint64_t v50 = (uint64_t)v182;

      _os_log_impl(&dword_25B2C1000, v92, v93, "Failed to fetch record ID batch: %{public}@", v95, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F8);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v96, -1, -1);
      uint64_t v99 = v95;
      uint64_t v88 = v94;
      MEMORY[0x2611621B0](v99, -1, -1);
    }
    else
    {
    }
    sub_25B319990((uint64_t)v46, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v162 = 0;
LABEL_10:
    uint64_t v48 = v164 + 1;
    if (v164 + 1 == v158)
    {
      swift_bridgeObjectRelease();
      goto LABEL_103;
    }
  }
  uint64_t v100 = v89;
  unint64_t v162 = 0;
  swift_bridgeObjectRelease();
  uint64_t v101 = 0;
  uint64_t v102 = *(void *)(v100 + 64);
  uint64_t v184 = v100 + 64;
  uint64_t v103 = 1 << *(unsigned char *)(v100 + 32);
  if (v103 < 64) {
    uint64_t v104 = ~(-1 << v103);
  }
  else {
    uint64_t v104 = -1;
  }
  unint64_t v105 = v104 & v102;
  int64_t v2 = (unint64_t)(v103 + 63) >> 6;
  uint64_t v178 = v2 - 1;
  while (1)
  {
    uint64_t v8 = (uint64_t)v181;
    unint64_t v18 = (unint64_t)&unk_26B3413A0;
    if (v105)
    {
      unint64_t v106 = __clz(__rbit64(v105));
      v105 &= v105 - 1;
      unint64_t v107 = v106 | (v101 << 6);
LABEL_64:
      unint64_t v108 = v107 * v186;
      sub_25B3198C0(*(void *)(v100 + 48) + v107 * v186, v50, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v109 = *(void *)(v100 + 56) + v108;
      uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
      sub_25B3198C0(v109, v50 + *(int *)(v110 + 48), type metadata accessor for ReplicatorRecord.ID);
      id v111 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
      uint64_t v112 = v110;
      unint64_t v18 = (unint64_t)&unk_26B3413A0;
      v111(v50, 0, 1, v112);
      uint64_t v8 = (uint64_t)v181;
      goto LABEL_83;
    }
    int64_t v113 = v101 + 1;
    if (__OFADD__(v101, 1)) {
      goto LABEL_110;
    }
    if (v113 < v2)
    {
      unint64_t v114 = *(void *)(v184 + 8 * v113);
      if (v114) {
        goto LABEL_68;
      }
      uint64_t v115 = v101 + 2;
      ++v101;
      if (v113 + 1 < v2)
      {
        unint64_t v114 = *(void *)(v184 + 8 * v115);
        if (v114) {
          goto LABEL_71;
        }
        uint64_t v101 = v113 + 1;
        if (v113 + 2 < v2)
        {
          unint64_t v114 = *(void *)(v184 + 8 * (v113 + 2));
          if (v114)
          {
            v113 += 2;
            goto LABEL_68;
          }
          uint64_t v115 = v113 + 3;
          uint64_t v101 = v113 + 2;
          if (v113 + 3 < v2)
          {
            unint64_t v114 = *(void *)(v184 + 8 * v115);
            if (v114)
            {
LABEL_71:
              int64_t v113 = v115;
LABEL_68:
              unint64_t v105 = (v114 - 1) & v114;
              unint64_t v107 = __clz(__rbit64(v114)) + (v113 << 6);
              uint64_t v101 = v113;
              goto LABEL_64;
            }
            while (1)
            {
              int64_t v113 = v115 + 1;
              if (__OFADD__(v115, 1)) {
                break;
              }
              if (v113 >= v2)
              {
                uint64_t v101 = v178;
                goto LABEL_82;
              }
              unint64_t v114 = *(void *)(v184 + 8 * v113);
              ++v115;
              if (v114) {
                goto LABEL_68;
              }
            }
            __break(1u);
            goto LABEL_115;
          }
        }
      }
    }
LABEL_82:
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v50, 1, 1, v116);
    unint64_t v105 = 0;
LABEL_83:
    sub_25B2E31F0(v50, v8, &qword_26B341390);
    uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 48))(v8, 1, v117) == 1)
    {
      swift_release();
      unint64_t v190 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      char v46 = v174;
      sub_25B319990((uint64_t)v174, type metadata accessor for ReplicatorRecord.ID);
      if (!__OFADD__(v189, 1))
      {
        long long v189 = (void *)((char *)v189 + 1);
        goto LABEL_10;
      }
      goto LABEL_111;
    }
    uint64_t v118 = v183;
    sub_25B319928(v8 + *(int *)(v117 + 48), v183, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v119 = v8;
    uint64_t v8 = (uint64_t)v185;
    sub_25B319928(v119, (uint64_t)v185, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v118, (uint64_t)v21, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v120 = v192;
    int v121 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v187 = (void *)v120;
    unint64_t v192 = 0x8000000000000000;
    unint64_t v18 = sub_25B2D5F6C((void *)v8);
    uint64_t v123 = *(void *)(v120 + 16);
    BOOL v124 = (v122 & 1) == 0;
    uint64_t v125 = v123 + v124;
    if (__OFADD__(v123, v124))
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
    char v126 = v122;
    if (*(void *)(v120 + 24) < v125) {
      break;
    }
    if ((v121 & 1) == 0) {
      sub_25B2DC084();
    }
LABEL_90:
    uint64_t v50 = (uint64_t)v182;
    uint64_t v129 = v187;
    if (v126)
    {
      sub_25B318C40((uint64_t)v21, v187[7] + v18 * v186, type metadata accessor for ReplicatorRecord.ID);
    }
    else
    {
      v187[(v18 >> 6) + 8] |= 1 << v18;
      uint64_t v8 = v18 * v186;
      sub_25B3198C0((uint64_t)v185, v129[6] + v18 * v186, type metadata accessor for ReplicatorRecord.ID);
      sub_25B319928((uint64_t)v21, v129[7] + v8, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v130 = v129[2];
      BOOL v131 = __OFADD__(v130, 1);
      uint64_t v132 = v130 + 1;
      if (v131) {
        goto LABEL_109;
      }
      v129[2] = v132;
    }
    unint64_t v192 = (unint64_t)v129;
    swift_bridgeObjectRelease();
    sub_25B319990((uint64_t)v185, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v183, type metadata accessor for ReplicatorRecord.ID);
  }
  sub_25B2D870C(v125, v121);
  unint64_t v127 = sub_25B2D5F6C(v185);
  if ((v126 & 1) == (v128 & 1))
  {
    unint64_t v18 = v127;
    goto LABEL_90;
  }
  uint64_t result = sub_25B3801C0();
  __break(1u);
  return result;
}

uint64_t sub_25B30E350(id *a1, void *a2)
{
  id v177 = a2;
  v224[15] = *(id *)MEMORY[0x263EF8340];
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  uint64_t v4 = MEMORY[0x270FA5388](v215);
  uint64_t v208 = (uint64_t)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v213 = (uint64_t)&v175 - v6;
  uint64_t v220 = sub_25B37F640();
  uint64_t v7 = *(void *)(v220 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v220);
  unint64_t v192 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v193 = (char *)&v175 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v183 = (char *)&v175 - v12;
  uint64_t v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v202 = (uint64_t)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v181 = (uint64_t)&v175 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v203 = (uint64_t)&v175 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v185 = (uint64_t)&v175 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341370);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v180 = (uint64_t)&v175 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v184 = (uint64_t)&v175 - v24;
  uint64_t v25 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v199 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v209 = (char *)&v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  id v182 = (id *)((char *)&v175 - v29);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  int64_t v201 = (void *)((char *)&v175 - v31);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v194 = (uint64_t)&v175 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  int64_t v219 = (void *)((char *)&v175 - v35);
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  char v38 = (void *)((char *)&v175 - v37);
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v198 = (uint64_t)&v175 - v40;
  MEMORY[0x270FA5388](v39);
  int64_t v207 = (char *)&v175 - v41;
  uint64_t v42 = sub_25B37F8A0();
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  BOOL v45 = (void *)((char *)&v175 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v46 = *(void **)(v2 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  void *v45 = v46;
  (*(void (**)(void *, void, uint64_t))(v43 + 104))(v45, *MEMORY[0x263F8F0E0], v42);
  id v47 = v46;
  LOBYTE(v46) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v43 + 8))(v45, v42);
  if ((v46 & 1) == 0) {
    goto LABEL_125;
  }
  uint64_t v48 = swift_bridgeObjectRetain();
  uint64_t v49 = sub_25B3430F0(v48);
  swift_bridgeObjectRelease();
  unint64_t v222 = MEMORY[0x263F8EE80];
  uint64_t v223 = (void *)v49;
  uint64_t v221 = 0;
  if (qword_26B3417C0 != -1) {
LABEL_126:
  }
    swift_once();
  uint64_t v50 = sub_25B37F780();
  uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)qword_26B3417A8);
  swift_bridgeObjectRetain();
  uint64_t v178 = v51;
  unint64_t v52 = sub_25B37F760();
  os_log_type_t v53 = sub_25B37FCD0();
  if (os_log_type_enabled(v52, v53))
  {
    unint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v54 = 134349056;
    v224[0] = a1[2];
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B2C1000, v52, v53, "Begin fetch for %{public}ld URLs", v54, 0xCu);
    MEMORY[0x2611621B0](v54, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (v223[2])
  {
    uint64_t v176 = sub_25B37F440();
    unint64_t v216 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v205 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v210 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    unint64_t v200 = MEMORY[0x263F8EE78];
    uint64_t v195 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56);
    *(void *)&long long v55 = 134350080;
    long long v175 = v55;
    uint64_t v196 = a1;
    uint64_t v206 = v25;
    int64_t v214 = v38;
    while (1)
    {
      v224[0] = a1;
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_25B37F430();
      sub_25B318668();
      uint64_t v56 = v179;
      uint64_t v57 = sub_25B37F420();
      if (v56) {
        break;
      }
      uint64_t v59 = v57;
      unint64_t v60 = v58;
      uint64_t v61 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v59, v60);
      swift_bridgeObjectRelease();
      swift_release();
      v224[0] = 0;
      id v62 = objc_msgSend(v177, sel_clientDefinedRecordIDsWithParameters_error_, v61, v224);

      id v63 = v224[0];
      if (!v62)
      {
        id v171 = v224[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_25B37F470();

        swift_willThrow();
        swift_bridgeObjectRelease();
        return (uint64_t)v171;
      }
      sub_25B37F400();
      swift_allocObject();
      sub_25B37F3F0();
      uint64_t v64 = sub_25B37F570();
      unint64_t v66 = v65;
      sub_25B3186BC();
      sub_25B37F3E0();
      uint64_t v179 = 0;
      sub_25B2CA2D8(v64, v66);
      swift_release();
      unint64_t v191 = v224[0];
      if (!v224[0]) {
        __break(1u);
      }
      unint64_t v67 = v224[2];
      id v190 = v224[1];
      id v68 = v63;

      uint64_t v69 = v67[2];
      unint64_t v70 = v200;
      long long v189 = v67;
      uint64_t v188 = v69;
      if (v69)
      {
        unint64_t v187 = (*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80);
        uint64_t v186 = (char *)v67 + v187;
        swift_bridgeObjectRetain();
        unint64_t v71 = 0;
        uint64_t v7 = (uint64_t)v207;
        while (1)
        {
          if (v71 >= v67[2])
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          uint64_t v217 = *(void *)(v199 + 72);
          sub_25B3198C0((uint64_t)&v186[v217 * v71], v7, type metadata accessor for ReplicatorRecord.ID);
          sub_25B3198C0(v7, v198, type metadata accessor for ReplicatorRecord.ID);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v197 = v71;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v70 = sub_25B3103B4(0, *(void *)(v70 + 16) + 1, 1, v70, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          uint64_t v76 = v216;
          unint64_t v78 = *(void *)(v70 + 16);
          unint64_t v77 = *(void *)(v70 + 24);
          if (v78 >= v77 >> 1) {
            unint64_t v70 = sub_25B3103B4(v77 > 1, v78 + 1, 1, v70, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
          }
          *(void *)(v70 + 16) = v78 + 1;
          sub_25B319928(v198, v70 + v187 + v78 * v217, type metadata accessor for ReplicatorRecord.ID);
          swift_beginAccess();
          uint64_t v79 = v223;
          sub_25B380250();
          uint64_t v218 = v79;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v212 = v7 + *(int *)(v25 + 28);
          uint64_t v80 = v185;
          sub_25B3198C0(v212, v185, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v211 = *v76;
          unsigned int v81 = v211(v80, 1, v220);
          unint64_t v200 = v70;
          if (v81 == 1)
          {
            sub_25B380260();
          }
          else
          {
            uint64_t v82 = v183;
            uint64_t v83 = v220;
            (*v205)(v183, v80, v220);
            sub_25B380260();
            sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
            sub_25B37F950();
            uint64_t v84 = v82;
            uint64_t v25 = v206;
            (*v210)((uint64_t)v84, v83);
          }
          v204 = (void *)(v7 + *(int *)(v25 + 32));
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v85 = sub_25B380290();
          uint64_t v86 = -1 << *((unsigned char *)v218 + 32);
          unint64_t v87 = v85 & ~v86;
          uint64_t v88 = v218 + 7;
          uint64_t v89 = v213;
          if (((*(void *)((char *)v218 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v87) & 1) == 0)
          {
LABEL_14:
            swift_bridgeObjectRelease();
            uint64_t v72 = v25;
            uint64_t v73 = v184;
            (*v195)(v184, 1, 1, v72);
            unint64_t v70 = v200;
            unint64_t v74 = v197;
            goto LABEL_15;
          }
          uint64_t v90 = ~v86;
          while (1)
          {
            unint64_t v91 = v87 * v217;
            sub_25B3198C0(v218[6] + v87 * v217, (uint64_t)v38, type metadata accessor for ReplicatorRecord.ID);
            BOOL v92 = *v38 == *(void *)v7 && v38[1] == *(void *)(v7 + 8);
            if (!v92 && (sub_25B3801A0() & 1) == 0) {
              goto LABEL_27;
            }
            BOOL v93 = v38[2] == *(void *)(v7 + 16) && v38[3] == *(void *)(v7 + 24);
            if (!v93 && (sub_25B3801A0() & 1) == 0
              || (v38[4] != *(void *)(v7 + 32) || v38[5] != *(void *)(v7 + 40)) && (sub_25B3801A0() & 1) == 0)
            {
              goto LABEL_27;
            }
            uint64_t v94 = v89 + *(int *)(v215 + 48);
            sub_25B3198C0((uint64_t)v38 + *(int *)(v25 + 28), v89, type metadata accessor for ReplicatorRecord.ID.Ownership);
            sub_25B3198C0(v212, v94, type metadata accessor for ReplicatorRecord.ID.Ownership);
            uint64_t v95 = v211;
            if (v211(v89, 1, v220) == 1)
            {
              if (v95(v94, 1, v220) == 1) {
                goto LABEL_49;
              }
              goto LABEL_46;
            }
            uint64_t v96 = v89;
            uint64_t v97 = v203;
            sub_25B3198C0(v96, v203, type metadata accessor for ReplicatorRecord.ID.Ownership);
            if (v95(v94, 1, v220) != 1) {
              break;
            }
            (*v210)(v97, v220);
LABEL_46:
            uint64_t v89 = v213;
            sub_25B2E344C(v213, &qword_26B341530);
LABEL_47:
            uint64_t v7 = (uint64_t)v207;
            char v38 = v214;
LABEL_27:
            sub_25B319990((uint64_t)v38, type metadata accessor for ReplicatorRecord.ID);
            unint64_t v87 = (v87 + 1) & v90;
            if (((*(void *)((char *)v88 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) == 0) {
              goto LABEL_14;
            }
          }
          uint64_t v98 = v193;
          (*v205)(v193, v94, v220);
          uint64_t v99 = v97;
          char v100 = sub_25B37F610();
          uint64_t v101 = *v210;
          uint64_t v102 = v98;
          uint64_t v25 = v206;
          (*v210)((uint64_t)v102, v220);
          v101(v99, v220);
          if ((v100 & 1) == 0)
          {
            uint64_t v89 = v213;
            sub_25B319990(v213, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_47;
          }
LABEL_49:
          uint64_t v89 = v213;
          sub_25B319990(v213, type metadata accessor for ReplicatorRecord.ID.Ownership);
          char v38 = v214;
          uint64_t v103 = (void *)((char *)v214 + *(int *)(v25 + 32));
          uint64_t v7 = (uint64_t)v207;
          if ((*v103 != *v204 || v103[1] != v204[1]) && (sub_25B3801A0() & 1) == 0) {
            goto LABEL_27;
          }
          sub_25B319990((uint64_t)v38, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          char v104 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v105 = v223;
          v224[0] = v223;
          uint64_t v223 = (void *)0x8000000000000000;
          unint64_t v74 = v197;
          if ((v104 & 1) == 0)
          {
            sub_25B3595A8();
            unint64_t v105 = v224[0];
          }
          uint64_t v73 = v184;
          sub_25B319928(v105[6] + v91, v184, type metadata accessor for ReplicatorRecord.ID);
          sub_25B35B590(v87);
          uint64_t v223 = v224[0];
          swift_bridgeObjectRelease();
          (*v195)(v73, 0, 1, v206);
          unint64_t v70 = v200;
LABEL_15:
          unint64_t v71 = v74 + 1;
          swift_endAccess();
          sub_25B2E344C(v73, (uint64_t *)&unk_26B341370);
          sub_25B319990(v7, type metadata accessor for ReplicatorRecord.ID);
          a1 = v196;
          uint64_t v25 = v206;
          unint64_t v67 = v189;
          if (v71 == v188)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      swift_beginAccess();
      unint64_t v106 = v191;
      uint64_t v7 = (uint64_t)v190;
      if (__OFADD__(v221, 1)) {
        goto LABEL_124;
      }
      unint64_t v200 = v70;
      ++v221;
      sub_25B318710((uint64_t)v191);
      sub_25B318710((uint64_t)v106);
      swift_bridgeObjectRetain();
      sub_25B318710((uint64_t)v106);
      swift_bridgeObjectRetain();
      sub_25B318710((uint64_t)v106);
      unint64_t v107 = v67;
      unint64_t v108 = sub_25B37F760();
      os_log_type_t v109 = sub_25B37FCD0();
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v110 = swift_slowAlloc();
        *(_DWORD *)uint64_t v110 = v175;
        id v111 = a1[2];
        swift_bridgeObjectRelease();
        *(void *)(v110 + 4) = v111;
        swift_bridgeObjectRelease();
        *(_WORD *)(v110 + 12) = 2050;
        uint64_t v112 = v191[2];
        sub_25B31875C((uint64_t)v191);
        *(void *)(v110 + 14) = v112;
        sub_25B31875C((uint64_t)v191);
        *(_WORD *)(v110 + 22) = 2050;
        uint64_t v113 = v107[2];
        sub_25B31875C((uint64_t)v191);
        *(void *)(v110 + 24) = v113;
        sub_25B31875C((uint64_t)v191);
        *(_WORD *)(v110 + 32) = 2050;
        *(void *)(v110 + 34) = v223[2];
        *(_WORD *)(v110 + 42) = 2050;
        uint64_t v7 = (uint64_t)v190;
        unint64_t v106 = v191;
        *(void *)(v110 + 44) = v221;
        _os_log_impl(&dword_25B2C1000, v108, v109, "Requested %{public}ld URLs; fetched %{public}ld; failed %{public}ld; remaining %{public}ld; fetch count %{public}ld",
          (uint8_t *)v110,
          0x34u);
        MEMORY[0x2611621B0](v110, -1, -1);
      }
      else
      {
        sub_25B31875C((uint64_t)v106);
        sub_25B31875C((uint64_t)v106);
        swift_bridgeObjectRelease_n();
        sub_25B31875C((uint64_t)v106);
        sub_25B31875C((uint64_t)v106);
      }
      uint64_t v114 = (uint64_t)v219;

      uint64_t v188 = v106[2];
      if (v188)
      {
        unint64_t v115 = 0;
        unint64_t v116 = (*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80);
        unint64_t v187 = (unint64_t)v106 + v116;
        uint64_t v186 = (char *)(v7 + v116);
        do
        {
          if (v115 >= v106[2]) {
            goto LABEL_120;
          }
          uint64_t v217 = *(void *)(v199 + 72);
          uint64_t v119 = v217 * v115;
          sub_25B3198C0(v187 + v217 * v115, v114, type metadata accessor for ReplicatorRecord.ID);
          if (v115 >= *(void *)(v7 + 16)) {
            goto LABEL_121;
          }
          unint64_t v197 = v115;
          uint64_t v120 = v194;
          sub_25B3198C0((uint64_t)&v186[v119], v194, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v121 = v120;
          char v122 = v201;
          sub_25B3198C0(v121, (uint64_t)v201, type metadata accessor for ReplicatorRecord.ID);
          a1 = v182;
          sub_25B3198C0(v114, (uint64_t)v182, type metadata accessor for ReplicatorRecord.ID);
          uint64_t v123 = (void *)v222;
          uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
          v224[0] = v123;
          unint64_t v222 = 0x8000000000000000;
          unint64_t v125 = sub_25B2D5F6C(v122);
          uint64_t v126 = v123[2];
          BOOL v127 = (v124 & 1) == 0;
          uint64_t v128 = v126 + v127;
          if (__OFADD__(v126, v127)) {
            goto LABEL_122;
          }
          char v129 = v124;
          if (v123[3] >= v128)
          {
            if ((v7 & 1) == 0) {
              sub_25B2DC084();
            }
          }
          else
          {
            sub_25B2D870C(v128, v7);
            unint64_t v130 = sub_25B2D5F6C(v201);
            if ((v129 & 1) != (v131 & 1))
            {
              sub_25B3801C0();
              __break(1u);
              goto LABEL_129;
            }
            unint64_t v125 = v130;
          }
          uint64_t v7 = (uint64_t)v209;
          uint64_t v132 = v224[0];
          if (v129)
          {
            sub_25B318C40((uint64_t)a1, *((void *)v224[0] + 7) + v125 * v217, type metadata accessor for ReplicatorRecord.ID);
          }
          else
          {
            *((void *)v224[0] + (v125 >> 6) + 8) |= 1 << v125;
            unint64_t v133 = v125 * v217;
            sub_25B3198C0((uint64_t)v201, v132[6] + v125 * v217, type metadata accessor for ReplicatorRecord.ID);
            sub_25B319928((uint64_t)a1, v132[7] + v133, type metadata accessor for ReplicatorRecord.ID);
            uint64_t v134 = v132[2];
            BOOL v135 = __OFADD__(v134, 1);
            uint64_t v136 = v134 + 1;
            if (v135) {
              goto LABEL_123;
            }
            v132[2] = v136;
          }
          unint64_t v222 = (unint64_t)v132;
          swift_bridgeObjectRelease();
          sub_25B319990((uint64_t)v201, type metadata accessor for ReplicatorRecord.ID);
          swift_beginAccess();
          uint64_t v137 = v223;
          sub_25B380250();
          os_log_type_t v138 = v219;
          uint64_t v218 = v137;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v212 = (uint64_t)v138 + *(int *)(v25 + 28);
          uint64_t v139 = v181;
          sub_25B3198C0(v212, v181, type metadata accessor for ReplicatorRecord.ID.Ownership);
          unint64_t v140 = *v216;
          if ((*v216)(v139, 1, v220) == 1)
          {
            sub_25B380260();
          }
          else
          {
            unint64_t v141 = v183;
            uint64_t v142 = v220;
            (*v205)(v183, v139, v220);
            sub_25B380260();
            sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
            sub_25B37F950();
            uint64_t v143 = v141;
            uint64_t v25 = v206;
            (*v210)((uint64_t)v143, v142);
          }
          v204 = (void *)((char *)v138 + *(int *)(v25 + 32));
          swift_bridgeObjectRetain();
          sub_25B37FA10();
          swift_bridgeObjectRelease();
          uint64_t v144 = sub_25B380290();
          uint64_t v145 = -1 << *((unsigned char *)v218 + 32);
          unint64_t v146 = v144 & ~v145;
          uint64_t v147 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v218 + 7);
          uint64_t v148 = v208;
          if (((*(void *)((char *)v218 + ((v146 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v146) & 1) == 0)
          {
LABEL_63:
            swift_bridgeObjectRelease();
            uint64_t v117 = v25;
            uint64_t v118 = v180;
            (*v195)(v180, 1, 1, v117);
            goto LABEL_64;
          }
          uint64_t v149 = ~v145;
          uint64_t v211 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v218 + 7);
          while (1)
          {
            unint64_t v150 = v146 * v217;
            sub_25B3198C0(v218[6] + v146 * v217, v7, type metadata accessor for ReplicatorRecord.ID);
            BOOL v151 = *(void *)v7 == *v219 && *(void *)(v7 + 8) == v219[1];
            if (!v151 && (sub_25B3801A0() & 1) == 0) {
              goto LABEL_83;
            }
            BOOL v152 = *(void *)(v7 + 16) == v219[2] && *(void *)(v7 + 24) == v219[3];
            if (!v152 && (sub_25B3801A0() & 1) == 0
              || (*(void *)(v7 + 32) != v219[4] || *(void *)(v7 + 40) != v219[5]) && (sub_25B3801A0() & 1) == 0)
            {
              goto LABEL_83;
            }
            uint64_t v153 = v149;
            uint64_t v154 = v7 + *(int *)(v25 + 28);
            uint64_t v155 = v148 + *(int *)(v215 + 48);
            uint64_t v156 = v140;
            sub_25B3198C0(v154, v148, type metadata accessor for ReplicatorRecord.ID.Ownership);
            sub_25B3198C0(v212, v155, type metadata accessor for ReplicatorRecord.ID.Ownership);
            if (v140(v148, 1, v220) == 1)
            {
              uint64_t v149 = v153;
              if (v140(v155, 1, v220) == 1) {
                goto LABEL_105;
              }
              goto LABEL_102;
            }
            uint64_t v157 = v148;
            uint64_t v158 = v202;
            sub_25B3198C0(v157, v202, type metadata accessor for ReplicatorRecord.ID.Ownership);
            if (v140(v155, 1, v220) != 1) {
              break;
            }
            (*v210)(v158, v220);
            uint64_t v149 = v153;
LABEL_102:
            uint64_t v148 = v208;
            sub_25B2E344C(v208, &qword_26B341530);
LABEL_103:
            uint64_t v7 = (uint64_t)v209;
            char v38 = v214;
            uint64_t v147 = v211;
LABEL_83:
            sub_25B319990(v7, type metadata accessor for ReplicatorRecord.ID);
            unint64_t v146 = (v146 + 1) & v149;
            if (((*(void *)((char *)v147 + ((v146 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v146) & 1) == 0) {
              goto LABEL_63;
            }
          }
          uint64_t v159 = v192;
          (*v205)(v192, v155, v220);
          uint64_t v160 = v158;
          char v161 = sub_25B37F610();
          unint64_t v162 = *v210;
          unint64_t v163 = v159;
          uint64_t v25 = v206;
          (*v210)((uint64_t)v163, v220);
          v162(v160, v220);
          unint64_t v140 = v156;
          uint64_t v149 = v153;
          if ((v161 & 1) == 0)
          {
            uint64_t v148 = v208;
            sub_25B319990(v208, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_103;
          }
LABEL_105:
          uint64_t v148 = v208;
          sub_25B319990(v208, type metadata accessor for ReplicatorRecord.ID.Ownership);
          uint64_t v7 = (uint64_t)v209;
          uint64_t v164 = &v209[*(int *)(v25 + 32)];
          char v38 = v214;
          uint64_t v147 = v211;
          if ((*(void *)v164 != *v204 || *((void *)v164 + 1) != v204[1]) && (sub_25B3801A0() & 1) == 0) {
            goto LABEL_83;
          }
          sub_25B319990(v7, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          char v165 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v166 = v223;
          v224[0] = v223;
          uint64_t v223 = (void *)0x8000000000000000;
          if ((v165 & 1) == 0)
          {
            sub_25B3595A8();
            unint64_t v166 = v224[0];
          }
          uint64_t v118 = v180;
          sub_25B319928(v166[6] + v150, v180, type metadata accessor for ReplicatorRecord.ID);
          sub_25B35B590(v146);
          uint64_t v223 = v224[0];
          swift_bridgeObjectRelease();
          (*v195)(v118, 0, 1, v206);
LABEL_64:
          uint64_t v114 = (uint64_t)v219;
          unint64_t v106 = v191;
          uint64_t v7 = (uint64_t)v190;
          unint64_t v115 = v197 + 1;
          swift_endAccess();
          sub_25B2E344C(v118, (uint64_t *)&unk_26B341370);
          sub_25B319990(v194, type metadata accessor for ReplicatorRecord.ID);
          sub_25B319990(v114, type metadata accessor for ReplicatorRecord.ID);
          a1 = v196;
          uint64_t v25 = v206;
        }
        while (v115 != v188);
      }
      sub_25B31875C((uint64_t)v106);
      swift_beginAccess();
      if (!v223[2]) {
        goto LABEL_113;
      }
    }
LABEL_129:
    uint64_t v173 = swift_unexpectedError();
    __break(1u);
    sub_25B2CA2D8(v173, v174);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    unint64_t v200 = MEMORY[0x263F8EE78];
LABEL_113:
    swift_bridgeObjectRelease();
    unint64_t v167 = v222;
    swift_bridgeObjectRetain();
    uint64_t v168 = sub_25B37F760();
    os_log_type_t v169 = sub_25B37FCD0();
    if (os_log_type_enabled(v168, v169))
    {
      unint64_t v170 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v170 = 134349056;
      v224[0] = *(id *)(v167 + 16);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B2C1000, v168, v169, "End fetch for %{public}ld client defined record IDs", v170, 0xCu);
      MEMORY[0x2611621B0](v170, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    id v171 = (id)v222;
    swift_bridgeObjectRelease();
    return (uint64_t)v171;
  }
  return result;
}

uint64_t sub_25B3102F8(uint64_t a1)
{
  return sub_25B2D5CB4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_25B310314(uint64_t a1)
{
  return sub_25B2E4490(a1, v1);
}

uint64_t sub_25B31031C(uint64_t a1)
{
  return sub_25B2E4990(a1, v1);
}

uint64_t sub_25B310324(uint64_t a1)
{
  return sub_25B2E5170(a1, v1);
}

uint64_t sub_25B31032C(uint64_t a1)
{
  return sub_25B2E5E34(a1, v1);
}

uint64_t sub_25B310334(uint64_t a1)
{
  return sub_25B2E6704(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25B310340(uint64_t a1)
{
  return sub_25B2E70F4(a1, v1);
}

uint64_t sub_25B310348@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2F9700(*(void *)(v1 + 16), a1);
}

uint64_t sub_25B310364@<X0>(void *a1@<X8>)
{
  return sub_25B2F85BC(*(void *)(v1 + 16), a1);
}

uint64_t sub_25B310380(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_25B3103B4(a1, a2, a3, a4, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_25B3103B4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_25B37FF80();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_25B314890(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_25B310634(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412D8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25B312A5C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_25B310744(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3412E0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_25B317944(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_25B310854(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC18);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25B318144(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_25B310964(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310C04(a1, a2, a3, (void *)*v3, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B3109A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310C04(a1, a2, a3, (void *)*v3, &qword_26A4EBCE8, MEMORY[0x263F07508]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B3109DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310C04(a1, a2, a3, (void *)*v3, &qword_26A4EBCA8, type metadata accessor for ReplicatorDevice);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B310A18(uint64_t a1)
{
  return a1;
}

uint64_t sub_25B310A8C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25B310B0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310C04(a1, a2, a3, (void *)*v3, &qword_26B340D80, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B310B48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310C04(a1, a2, a3, (void *)*v3, &qword_26A4EBCF0, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B310B84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310E4C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25B310BA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B310FB8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25B310BC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B311144(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25B310BE4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25B3112A4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_25B310C04(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B310E4C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B310FB8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC18);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC20);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B311144(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC30);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B3112A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC28);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B311410@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_25B2D5F6C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25B2DB78C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_25B319990(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ReplicatorRecord(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_25B319928(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for ReplicatorRecord);
    sub_25B350F3C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ReplicatorRecord(0);
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t sub_25B3115D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_25B2D5F6C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25B2DBD44();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_25B319990(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_25B37F640();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_25B3514A8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_25B37F640();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

size_t sub_25B3117A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBCA8);
  uint64_t v3 = *(void *)(type metadata accessor for ReplicatorDevice(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = sub_25B312268(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for ReplicatorDevice, type metadata accessor for ReplicatorDevice, type metadata accessor for ReplicatorDevice);
      swift_bridgeObjectRetain();
      sub_25B318BDC();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t sub_25B311934(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D88);
  uint64_t v3 = *(void *)(type metadata accessor for ReplicatorRecord.ID(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = sub_25B312268(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRetain();
      sub_25B318BDC();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_25B311AC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412D0);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 80);
  unint64_t v5 = sub_25B312570(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_25B318BDC();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_25B311BB8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v47 = a1;
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25B37F640();
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  char v46 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  id v63 = (char *)&v44 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v57 = (char *)&v44 - v15;
  uint64_t v62 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v56 = *(void *)(v62 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v62);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v55 = (uint64_t)&v44 - v19;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  unint64_t v54 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D48);
  uint64_t result = sub_25B37FFC0();
  uint64_t v21 = (void *)result;
  uint64_t v44 = a2;
  if (a2 < 1) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v47;
  }
  uint64_t v23 = 0;
  uint64_t v52 = v58 + 16;
  uint64_t v51 = v58 + 32;
  uint64_t v50 = v58 + 48;
  BOOL v45 = (void (**)(char *, uint64_t))(v58 + 8);
  uint64_t v49 = result + 64;
  uint64_t v53 = v10;
  uint64_t v48 = a4;
  while (1)
  {
    if (v22)
    {
      uint64_t v59 = (v22 - 1) & v22;
      uint64_t v60 = v23;
      unint64_t v24 = __clz(__rbit64(v22)) | (v23 << 6);
    }
    else
    {
      uint64_t v25 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_33;
      }
      if (v25 >= v44) {
        return (uint64_t)v21;
      }
      unint64_t v26 = v47[v25];
      uint64_t v27 = v23 + 1;
      if (!v26)
      {
        uint64_t v27 = v23 + 2;
        if (v23 + 2 >= v44) {
          return (uint64_t)v21;
        }
        unint64_t v26 = v47[v27];
        if (!v26)
        {
          uint64_t v27 = v23 + 3;
          if (v23 + 3 >= v44) {
            return (uint64_t)v21;
          }
          unint64_t v26 = v47[v27];
          if (!v26)
          {
            uint64_t v28 = v23 + 4;
            if (v23 + 4 >= v44) {
              return (uint64_t)v21;
            }
            unint64_t v26 = v47[v28];
            if (!v26)
            {
              while (1)
              {
                uint64_t v27 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  goto LABEL_34;
                }
                if (v27 >= v44) {
                  return (uint64_t)v21;
                }
                unint64_t v26 = v47[v27];
                ++v28;
                if (v26) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v27 = v23 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v59 = (v26 - 1) & v26;
      uint64_t v60 = v27;
      unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
    }
    uint64_t v29 = a4[6];
    uint64_t v30 = v55;
    uint64_t v61 = *(void *)(v56 + 72);
    sub_25B3198C0(v29 + v61 * v24, v55, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v31 = v58;
    uint64_t v32 = *(void *)(v58 + 72);
    unint64_t v33 = a4[7] + v32 * v24;
    uint64_t v34 = v57;
    uint64_t v35 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v57, v33, v53);
    sub_25B319928(v30, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v36(v63, v34, v35);
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v54;
    sub_25B3198C0((uint64_t)&v18[*(int *)(v62 + 28)], (uint64_t)v54, type metadata accessor for ReplicatorRecord.ID.Ownership);
    char v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
    uint64_t v39 = v35;
    if (v38(v37, 1, v35) == 1)
    {
      sub_25B380260();
    }
    else
    {
      uint64_t v40 = v46;
      v36(v46, (char *)v37, v39);
      sub_25B380260();
      sub_25B3193FC(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      (*v45)(v40, v39);
    }
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    sub_25B380290();
    uint64_t v41 = v49;
    unint64_t v42 = sub_25B37FDE0();
    *(void *)(v41 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    sub_25B319928((uint64_t)v18, v21[6] + v42 * v61, type metadata accessor for ReplicatorRecord.ID);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v36)(v21[7] + v42 * v32, v63, v39);
    ++v21[2];
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v48;
    unint64_t v22 = v59;
    uint64_t v23 = v60;
    if (!a3) {
      return (uint64_t)v21;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_25B312268(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  char v38 = a6;
  uint64_t v12 = *(void *)(a5(0) - 8);
  uint64_t v13 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v39 = a4;
  uint64_t v20 = a4 + 56;
  uint64_t v19 = *(void *)(a4 + 56);
  uint64_t v35 = -1 << *(unsigned char *)(a4 + 32);
  if (-v35 < 64) {
    uint64_t v21 = ~(-1 << -(char)v35);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v19;
  if (!a2)
  {
    int64_t v23 = 0;
    a3 = 0;
LABEL_34:
    uint64_t v31 = ~v35;
    *a1 = v39;
    a1[1] = v20;
    a1[2] = v31;
    a1[3] = v23;
    a1[4] = v22;
    return a3;
  }
  if (!a3)
  {
    int64_t v23 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v34 = a1;
  int64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v36 = v20;
  int64_t v37 = (unint64_t)(63 - v35) >> 6;
  int64_t v33 = v37 - 1;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  unint64_t v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    uint64_t v30 = *(void *)(v12 + 72);
    sub_25B3198C0(*(void *)(v39 + 48) + v30 * v26, (uint64_t)v15, v38);
    sub_25B319928((uint64_t)v15, (uint64_t)v18, a7);
    uint64_t result = sub_25B319928((uint64_t)v18, a2, a7);
    if (v24 == a3) {
      goto LABEL_33;
    }
    a2 += v30;
    if (v22) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v27 >= v37)
    {
      unint64_t v22 = 0;
      a3 = v24;
LABEL_33:
      a1 = v34;
      uint64_t v20 = v36;
      goto LABEL_34;
    }
    uint64_t v20 = v36;
    unint64_t v28 = *(void *)(v36 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v37)
  {
    unint64_t v22 = 0;
    int64_t v23 = v27;
LABEL_39:
    a3 = v24;
    a1 = v34;
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v23);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v37) {
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v23 = v27 + 3;
  if (v27 + 3 >= v37)
  {
    unint64_t v22 = 0;
    int64_t v23 = v27 + 2;
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v23);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v23;
    goto LABEL_18;
  }
  int64_t v29 = v27 + 4;
  if (v27 + 4 >= v37)
  {
LABEL_36:
    unint64_t v22 = 0;
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v37)
    {
      unint64_t v22 = 0;
      int64_t v23 = v33;
      goto LABEL_39;
    }
    unint64_t v28 = *(void *)(v36 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void *sub_25B312570(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 56);
  uint64_t v4 = a4 + 56;
  uint64_t v5 = v6;
  uint64_t v32 = v4;
  uint64_t v7 = -1 << *(unsigned char *)(v4 - 24);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v5;
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v32;
    result[2] = ~v7;
    result[3] = v12;
    result[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  uint64_t v29 = -1 << *(unsigned char *)(v4 - 24);
  uint64_t v30 = result;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v31 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v19 = (void *)(*(void *)(a4 + 48) + 80 * v15);
    uint64_t v20 = v19[1];
    uint64_t v21 = v19[2];
    uint64_t v22 = v19[3];
    uint64_t v23 = v19[4];
    uint64_t v24 = v19[5];
    uint64_t v25 = v19[6];
    uint64_t v26 = v19[7];
    uint64_t v28 = v19[8];
    uint64_t v27 = v19[9];
    *uint64_t v11 = *v19;
    v11[1] = v20;
    void v11[2] = v21;
    v11[3] = v22;
    v11[4] = v23;
    v11[5] = v24;
    v11[6] = v25;
    v11[7] = v26;
    v11[8] = v28;
    v11[9] = v27;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    if (!v17)
    {
      v12 += 2;
      if (v16 + 1 >= v31)
      {
        unint64_t v9 = 0;
        int64_t v12 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v32 + 8 * v12);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v12 = v16 + 3;
        if (v16 + 3 < v31)
        {
          unint64_t v17 = *(void *)(v32 + 8 * v12);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v12;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v31)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v32 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v31)
              {
                unint64_t v9 = 0;
                int64_t v12 = v31 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v32 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v16 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v29;
      uint64_t result = v30;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v12 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_25B312828(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_25B3128C8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B3129AC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  unint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_25B312A5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B312B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB818);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v27 - v10;
  uint64_t v31 = a1;
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v28 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_25B3198C0(v23 + *(void *)(*(void *)(v24 - 8) + 72) * i, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v26 = type metadata accessor for ReplicatorRecord(0);
    sub_25B3198C0(v25 + *(void *)(*(void *)(v26 - 8) + 72) * i, (uint64_t)&v11[*(int *)(v6 + 48)], type metadata accessor for ReplicatorRecord);
    sub_25B2E31F0((uint64_t)v11, (uint64_t)v9, &qword_26A4EB818);
    sub_25B2FF5A8((uint8_t *)&v31, (uint64_t)v9, v30);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C((uint64_t)v9, &qword_26A4EB818);
      return swift_release();
    }
    uint64_t result = sub_25B2E344C((uint64_t)v9, &qword_26A4EB818);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v29)
  {
LABEL_26:
    swift_release();
    return v31;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_25B312E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v27 - v10;
  uint64_t v31 = a1;
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v28 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_25B3198C0(v23 + *(void *)(*(void *)(v24 - 8) + 72) * i, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v26 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(&v11[*(int *)(v6 + 48)], v25 + *(void *)(*(void *)(v26 - 8) + 72) * i, v26);
    sub_25B2E31F0((uint64_t)v11, (uint64_t)v9, &qword_26B341050);
    sub_25B303C94((uint64_t)&v31, (uint64_t)v9, v30);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C((uint64_t)v9, &qword_26B341050);
      return swift_release();
    }
    uint64_t result = sub_25B2E344C((uint64_t)v9, &qword_26B341050);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v29) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v29)
  {
LABEL_26:
    swift_release();
    return v31;
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v29) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_25B313154(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v82 = a3;
  uint64_t v90 = sub_25B37F640();
  uint64_t v5 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90 - 8);
  uint64_t v72 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v75 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v81 = (char *)v70 - v10;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3413A0);
  uint64_t v11 = MEMORY[0x270FA5388](v80);
  uint64_t v89 = (uint64_t)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v91 = (void *)((char *)v70 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v88 = (uint64_t)v70 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v79 = (uint64_t)v70 - v17;
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v71 = a2 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v78 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions;
  int64_t v74 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v84 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v70[3] = v5 + 16;
  uint64_t v73 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v76 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v77 = v5;
  v70[2] = v5 + 40;
  uint64_t v83 = a2;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v21)
    {
      uint64_t v86 = (v21 - 1) & v21;
      int64_t v87 = v22;
      unint64_t v27 = __clz(__rbit64(v21)) | (v22 << 6);
      goto LABEL_25;
    }
    int64_t v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v28 >= v74) {
      goto LABEL_47;
    }
    unint64_t v29 = *(void *)(v71 + 8 * v28);
    int64_t v30 = v22 + 1;
    if (!v29)
    {
      int64_t v30 = v22 + 2;
      if (v22 + 2 >= v74) {
        goto LABEL_47;
      }
      unint64_t v29 = *(void *)(v71 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v22 + 3;
        if (v22 + 3 >= v74) {
          goto LABEL_47;
        }
        unint64_t v29 = *(void *)(v71 + 8 * v30);
        if (!v29)
        {
          int64_t v30 = v22 + 4;
          if (v22 + 4 >= v74) {
            goto LABEL_47;
          }
          unint64_t v29 = *(void *)(v71 + 8 * v30);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v86 = (v29 - 1) & v29;
    int64_t v87 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_25:
    uint64_t v32 = v83;
    uint64_t v33 = *(void *)(v83 + 48);
    uint64_t v34 = *(void *)(*(void *)(type metadata accessor for ReplicatorRecord.ID(0) - 8) + 72);
    uint64_t v35 = v33 + v34 * v27;
    uint64_t v36 = v79;
    sub_25B3198C0(v35, v79, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v37 = v80;
    sub_25B3198C0(*(void *)(v32 + 56) + v34 * v27, v36 + *(int *)(v80 + 48), type metadata accessor for ReplicatorRecord.ID);
    uint64_t v38 = v88;
    sub_25B2E31F0(v36, v88, (uint64_t *)&unk_26B3413A0);
    uint64_t v39 = *(int *)(v37 + 48);
    uint64_t v40 = (char *)v91 + v39;
    uint64_t v41 = v38 + v39;
    sub_25B3198C0(v38, (uint64_t)v91, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v85 = v40;
    sub_25B3198C0(v41, (uint64_t)v40, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v42 = (void *)(v89 + *(int *)(v37 + 48));
    sub_25B3198C0(v38, v89, type metadata accessor for ReplicatorRecord.ID);
    sub_25B3198C0(v41, (uint64_t)v42, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v43 = *(void *)(v82 + v78);
    if (!*(void *)(v43 + 16))
    {
      uint64_t v49 = *v84;
      uint64_t v50 = (uint64_t)v81;
      (*v84)(v81, 1, 1, v90);
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    unint64_t v44 = sub_25B2D5F6C(v42);
    uint64_t v45 = v90;
    if (v46)
    {
      uint64_t v47 = v77;
      uint64_t v48 = v81;
      (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v81, *(void *)(v43 + 56) + *(void *)(v77 + 72) * v44, v90);
      uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
      v49(v48, 0, 1, v45);
    }
    else
    {
      uint64_t v49 = *v84;
      uint64_t v48 = v81;
      (*v84)(v81, 1, 1, v90);
    }
    swift_bridgeObjectRelease();
    uint64_t v50 = (uint64_t)v48;
    if ((*v73)(v48, 1, v45) != 1)
    {
      uint64_t v55 = *v76;
      (*v76)(v72, v50, v45);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      BOOL v92 = a1;
      unint64_t v58 = sub_25B2D5F6C(v91);
      uint64_t v59 = a1[2];
      BOOL v60 = (v57 & 1) == 0;
      uint64_t v61 = v59 + v60;
      if (__OFADD__(v59, v60)) {
        goto LABEL_49;
      }
      char v62 = v57;
      if (a1[3] >= v61)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v65 = v92;
          if ((v57 & 1) == 0) {
            goto LABEL_44;
          }
        }
        else
        {
          sub_25B2DBD44();
          unint64_t v65 = v92;
          if ((v62 & 1) == 0) {
            goto LABEL_44;
          }
        }
      }
      else
      {
        sub_25B2D8018(v61, isUniquelyReferenced_nonNull_native);
        unint64_t v63 = sub_25B2D5F6C(v91);
        if ((v62 & 1) != (v64 & 1)) {
          goto LABEL_52;
        }
        unint64_t v58 = v63;
        unint64_t v65 = v92;
        if ((v62 & 1) == 0)
        {
LABEL_44:
          v65[(v58 >> 6) + 8] |= 1 << v58;
          sub_25B3198C0((uint64_t)v91, v65[6] + v58 * v34, type metadata accessor for ReplicatorRecord.ID);
          v55((char *)(v65[7] + *(void *)(v77 + 72) * v58), (uint64_t)v72, v90);
          uint64_t v66 = v65[2];
          BOOL v67 = __OFADD__(v66, 1);
          uint64_t v68 = v66 + 1;
          if (v67) {
            goto LABEL_50;
          }
          v65[2] = v68;
          goto LABEL_46;
        }
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v77 + 40))(v65[7] + *(void *)(v77 + 72) * v58, v72, v90);
LABEL_46:
      a1 = v92;
      swift_bridgeObjectRelease();
      sub_25B319990((uint64_t)v91, type metadata accessor for ReplicatorRecord.ID);
      goto LABEL_6;
    }
LABEL_31:
    sub_25B2E344C(v50, &qword_26B3414D0);
    swift_bridgeObjectRetain();
    unint64_t v51 = sub_25B2D5F6C(v91);
    char v53 = v52;
    swift_bridgeObjectRelease();
    if (v53)
    {
      char v54 = swift_isUniquelyReferenced_nonNull_native();
      BOOL v92 = a1;
      uint64_t v25 = (uint64_t)v75;
      if ((v54 & 1) == 0)
      {
        sub_25B2DBD44();
        a1 = v92;
      }
      sub_25B319990(a1[6] + v51 * v34, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v24 = v90;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v77 + 32))(v25, a1[7] + *(void *)(v77 + 72) * v51, v90);
      sub_25B3514A8(v51, (uint64_t)a1);
      swift_bridgeObjectRelease();
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 1;
      uint64_t v24 = v90;
      uint64_t v25 = (uint64_t)v75;
    }
    v49((char *)v25, v23, 1, v24);
    sub_25B319990((uint64_t)v91, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E344C(v25, &qword_26B3414D0);
LABEL_6:
    unint64_t v21 = v86;
    int64_t v22 = v87;
    uint64_t v26 = (uint64_t)v85;
    sub_25B319990((uint64_t)v42, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v89, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990(v26, type metadata accessor for ReplicatorRecord.ID);
    sub_25B2E344C(v88, (uint64_t *)&unk_26B3413A0);
  }
  uint64_t v31 = v22 + 5;
  if (v22 + 5 >= v74)
  {
LABEL_47:
    swift_release();
    return (uint64_t)a1;
  }
  unint64_t v29 = *(void *)(v71 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v22 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v74) {
      goto LABEL_47;
    }
    unint64_t v29 = *(void *)(v71 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_24;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = sub_25B3801C0();
  __break(1u);
  return result;
}

uint64_t sub_25B3139F4(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v75 = a4;
  v51[0] = a2;
  char v52 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v66 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v7 = MEMORY[0x270FA5388](v65);
  int64_t v74 = (uint64_t *)((char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v73 = (uint64_t)v51 - v9;
  uint64_t v10 = sub_25B37F640();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v57 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v51 - v14;
  uint64_t v16 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v63 = *(void *)(v16 - 8);
  uint64_t result = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = 0;
  int64_t v20 = 0;
  BOOL v67 = a3;
  uint64_t v23 = a3[8];
  int64_t v22 = a3 + 8;
  uint64_t v21 = v23;
  uint64_t v24 = 1 << *((unsigned char *)v22 - 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v21;
  char v54 = v22;
  int64_t v55 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v70 = v11 + 16;
  unint64_t v58 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v64 = v11;
  uint64_t v59 = (void (**)(char *, uint64_t))(v11 + 8);
  BOOL v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v61 = v15;
  char v62 = v19;
  while (v26)
  {
    uint64_t v71 = (v26 - 1) & v26;
    int64_t v72 = v20;
    unint64_t v30 = __clz(__rbit64(v26)) | (v20 << 6);
LABEL_23:
    uint64_t v35 = v67;
    sub_25B3198C0(v67[6] + *(void *)(v63 + 72) * v30, (uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v36 = v35[7];
    uint64_t v37 = *(void *)(v64 + 72);
    unint64_t v68 = v30;
    uint64_t v69 = v37;
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v64 + 16);
    v38(v15, v36 + v37 * v30, v10);
    uint64_t v39 = v65;
    uint64_t v40 = v73;
    uint64_t v41 = (char *)(v73 + *(int *)(v65 + 48));
    sub_25B3198C0((uint64_t)v19, v73, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v42 = v15;
    unint64_t v43 = (unint64_t)v41;
    v38(v41, (unint64_t)v42, v10);
    unint64_t v44 = v74;
    uint64_t v45 = (char *)v74 + *(int *)(v39 + 48);
    sub_25B3198C0(v40, (uint64_t)v74, type metadata accessor for ReplicatorRecord.ID);
    v38(v45, v43, v10);
    if (*(void *)(v75 + 16) && (unint64_t v46 = sub_25B2D5F6C(v44), (v47 & 1) != 0))
    {
      uint64_t v27 = (uint64_t)v66;
      v38(v66, *(void *)(v75 + 56) + v46 * v69, v10);
      (*v60)(v27, 0, 1, v10);
      if ((*v58)(v27, 1, v10) == 1) {
        goto LABEL_5;
      }
      uint64_t v48 = v57;
      (*v56)(v57, v27, v10);
      uint64_t v49 = *v59;
      (*v59)(v45, v10);
      sub_25B319990((uint64_t)v74, type metadata accessor for ReplicatorRecord.ID);
      sub_25B3193FC((unint64_t *)&unk_26B340CF0, MEMORY[0x263F07508]);
      char v50 = sub_25B37F960();
      v49(v48, v10);
      sub_25B2E344C(v73, &qword_26B341050);
      uint64_t v15 = v61;
      v49(v61, v10);
      uint64_t v19 = v62;
      uint64_t result = sub_25B319990((uint64_t)v62, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v26 = v71;
      int64_t v20 = v72;
      if ((v50 & 1) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v27 = (uint64_t)v66;
      (*v60)((uint64_t)v66, 1, 1, v10);
LABEL_5:
      sub_25B2E344C(v73, &qword_26B341050);
      sub_25B2E344C(v27, &qword_26B3414D0);
      int64_t v28 = *v59;
      (*v59)(v45, v10);
      sub_25B319990((uint64_t)v74, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v15 = v61;
      v28(v61, v10);
      uint64_t v19 = v62;
      uint64_t result = sub_25B319990((uint64_t)v62, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v26 = v71;
      int64_t v20 = v72;
LABEL_6:
      *(unint64_t *)((char *)v52 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
      if (__OFADD__(v53++, 1)) {
        goto LABEL_30;
      }
    }
  }
  int64_t v31 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v31 >= v55) {
      return sub_25B311BB8(v52, v51[0], v53, v67);
    }
    unint64_t v32 = v54[v31];
    int64_t v33 = v20 + 1;
    if (!v32)
    {
      int64_t v33 = v20 + 2;
      if (v20 + 2 >= v55) {
        return sub_25B311BB8(v52, v51[0], v53, v67);
      }
      unint64_t v32 = v54[v33];
      if (!v32)
      {
        int64_t v33 = v20 + 3;
        if (v20 + 3 >= v55) {
          return sub_25B311BB8(v52, v51[0], v53, v67);
        }
        unint64_t v32 = v54[v33];
        if (!v32)
        {
          uint64_t v34 = v20 + 4;
          if (v20 + 4 >= v55) {
            return sub_25B311BB8(v52, v51[0], v53, v67);
          }
          unint64_t v32 = v54[v34];
          if (!v32)
          {
            while (1)
            {
              int64_t v33 = v34 + 1;
              if (__OFADD__(v34, 1)) {
                goto LABEL_31;
              }
              if (v33 >= v55) {
                return sub_25B311BB8(v52, v51[0], v53, v67);
              }
              unint64_t v32 = v54[v33];
              ++v34;
              if (v32) {
                goto LABEL_22;
              }
            }
          }
          int64_t v33 = v20 + 4;
        }
      }
    }
LABEL_22:
    uint64_t v71 = (v32 - 1) & v32;
    int64_t v72 = v33;
    unint64_t v30 = __clz(__rbit64(v32)) + (v33 << 6);
    goto LABEL_23;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_25B314110(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v53 = a4;
  v48[0] = a2;
  uint64_t v49 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v65 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v7 = MEMORY[0x270FA5388](v60);
  uint64_t v66 = (uint64_t *)((char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v70 = (uint64_t)v48 - v9;
  uint64_t v10 = sub_25B37F640();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t result = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v69 = (uint64_t)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = 0;
  char v62 = a3;
  uint64_t v18 = a3;
  uint64_t v19 = v10;
  uint64_t v20 = v18[8];
  uint64_t v50 = 0;
  unint64_t v51 = v18 + 8;
  uint64_t v21 = 1 << *((unsigned char *)v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v52 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v64 = v11 + 16;
  int64_t v55 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  unint64_t v58 = v13;
  uint64_t v59 = v11;
  char v54 = (void (**)(char *, uint64_t))(v11 + 8);
  while (v23)
  {
    int64_t v67 = v17;
    uint64_t v68 = (v23 - 1) & v23;
    unint64_t v28 = __clz(__rbit64(v23)) | (v17 << 6);
LABEL_19:
    int64_t v33 = v62;
    uint64_t v34 = v69;
    sub_25B3198C0(v62[6] + *(void *)(v57 + 72) * v28, v69, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v35 = v33[7];
    uint64_t v36 = *(void *)(v59 + 72);
    unint64_t v61 = v28;
    uint64_t v63 = v36;
    uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
    v37(v13, v35 + v36 * v28, v19);
    uint64_t v38 = v60;
    uint64_t v39 = v19;
    uint64_t v40 = v70;
    uint64_t v41 = (char *)(v70 + *(int *)(v60 + 48));
    sub_25B3198C0(v34, v70, type metadata accessor for ReplicatorRecord.ID);
    v37(v41, (unint64_t)v13, v39);
    unint64_t v42 = v66;
    unint64_t v43 = (char *)v66 + *(int *)(v38 + 48);
    uint64_t v44 = v40;
    uint64_t v19 = v39;
    sub_25B3198C0(v44, (uint64_t)v66, type metadata accessor for ReplicatorRecord.ID);
    v37(v43, (unint64_t)v41, v39);
    uint64_t v45 = v53;
    if (*(void *)(v53 + 16))
    {
      unint64_t v46 = sub_25B2D5F6C(v42);
      if (v47)
      {
        v37(v65, *(void *)(v45 + 56) + v46 * v63, v39);
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = 1;
      }
      unint64_t v42 = v66;
    }
    else
    {
      uint64_t v24 = 1;
    }
    int64_t v17 = v67;
    uint64_t v25 = (uint64_t)v65;
    (*v56)(v65, v24, 1, v39);
    sub_25B2E344C(v70, &qword_26B341050);
    int v26 = (*v55)(v25, 1, v39);
    sub_25B2E344C(v25, &qword_26B3414D0);
    uint64_t v27 = *v54;
    (*v54)(v43, v39);
    sub_25B319990((uint64_t)v42, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v13 = v58;
    v27(v58, v39);
    uint64_t result = sub_25B319990(v69, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v23 = v68;
    if (v26 == 1)
    {
      *(unint64_t *)((char *)v49 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
      BOOL v29 = __OFADD__(v50++, 1);
      if (v29)
      {
        __break(1u);
        return sub_25B311BB8(v49, v48[0], v50, v62);
      }
    }
  }
  BOOL v29 = __OFADD__(v17, 1);
  int64_t v30 = v17 + 1;
  if (v29)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v30 >= v52) {
    return sub_25B311BB8(v49, v48[0], v50, v62);
  }
  unint64_t v31 = v51[v30];
  if (v31)
  {
LABEL_18:
    int64_t v67 = v30;
    uint64_t v68 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v30 << 6);
    goto LABEL_19;
  }
  int64_t v32 = v30 + 1;
  if (v30 + 1 >= v52) {
    return sub_25B311BB8(v49, v48[0], v50, v62);
  }
  unint64_t v31 = v51[v32];
  if (v31) {
    goto LABEL_17;
  }
  int64_t v32 = v30 + 2;
  if (v30 + 2 >= v52) {
    return sub_25B311BB8(v49, v48[0], v50, v62);
  }
  unint64_t v31 = v51[v32];
  if (v31) {
    goto LABEL_17;
  }
  int64_t v32 = v30 + 3;
  if (v30 + 3 >= v52) {
    return sub_25B311BB8(v49, v48[0], v50, v62);
  }
  unint64_t v31 = v51[v32];
  if (v31)
  {
LABEL_17:
    int64_t v30 = v32;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v52) {
      return sub_25B311BB8(v49, v48[0], v50, v62);
    }
    unint64_t v31 = v51[v30];
    ++v32;
    if (v31) {
      goto LABEL_18;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_25B3146C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  v15[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = a3((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = a3((char *)v13, v9, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x2611621B0](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_25B314890(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B3149EC(uint64_t a1, uint64_t a2)
{
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v4 = MEMORY[0x270FA5388](v118);
  uint64_t v106 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v117 = (uint64_t)&v98 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v116 = (uint64_t)&v98 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v115 = (uint64_t)&v98 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v114 = (char *)&v98 - v12;
  uint64_t v13 = type metadata accessor for ReplicatorRecordChange();
  uint64_t v112 = *(void *)(v13 - 8);
  uint64_t v113 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v108 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)&v98 - v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_25B3146C8(v18, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_25B3139F4);
  uint64_t v98 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v20 = *(void *)(v19 + 16);
  uint64_t v100 = a1;
  uint64_t v99 = a2;
  if (!v20)
  {
    swift_release();
    uint64_t v48 = MEMORY[0x263F8EE78];
LABEL_31:
    unint64_t v105 = (char *)v48;
    uint64_t v60 = v99;
    swift_bridgeObjectRetain();
    uint64_t v61 = v100;
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_25B3146C8(v60, v61, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_25B314110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v63 = *(void *)(v62 + 16);
    if (!v63)
    {
      swift_release();
      uint64_t v89 = MEMORY[0x263F8EE78];
LABEL_57:
      uint64_t v121 = MEMORY[0x263F8EE78];
      sub_25B2F23CC((uint64_t)v105);
      sub_25B2F23CC(v89);
      return v121;
    }
    uint64_t v121 = MEMORY[0x263F8EE78];
    sub_25B310B0C(0, v63, 0);
    uint64_t result = sub_25B3661D4(v62);
    uint64_t v65 = result;
    unint64_t v66 = 0;
    uint64_t v67 = v62 + 64;
    char v68 = *(unsigned char *)(v62 + 32);
    uint64_t v104 = v62 + 88;
    uint64_t v109 = v62 + 64;
    uint64_t v110 = v62;
    uint64_t v106 = v63;
    uint64_t v107 = v64;
    while (1)
    {
      if (v65 < 0 || v65 >= 1 << v68) {
        goto LABEL_64;
      }
      if ((*(void *)(v67 + 8 * ((unint64_t)v65 >> 6)) & (1 << v65)) == 0) {
        goto LABEL_65;
      }
      if (*(_DWORD *)(v62 + 36) != v64) {
        goto LABEL_66;
      }
      uint64_t v119 = 1 << v65;
      unint64_t v120 = (unint64_t)v65 >> 6;
      unint64_t v111 = v66;
      uint64_t v71 = v118;
      uint64_t v72 = (uint64_t)v114;
      uint64_t v73 = &v114[*(int *)(v118 + 48)];
      uint64_t v74 = *(void *)(v62 + 48);
      uint64_t v75 = type metadata accessor for ReplicatorRecord.ID(0);
      sub_25B3198C0(v74 + *(void *)(*(void *)(v75 - 8) + 72) * v65, v72, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v76 = *(void *)(v62 + 56);
      uint64_t v77 = sub_25B37F640();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = v76 + *(void *)(v78 + 72) * v65;
      uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      unsigned int v81 = v73;
      v80(v73, v79, v77);
      uint64_t v82 = v115;
      sub_25B3198C0(v72, v115, type metadata accessor for ReplicatorRecord.ID);
      v80((char *)(v82 + *(int *)(v71 + 48)), (uint64_t)v81, v77);
      uint64_t v83 = v82;
      uint64_t v84 = v116;
      sub_25B2E31F0(v83, v116, &qword_26B341050);
      sub_25B2E344C(v72, &qword_26B341050);
      uint64_t v85 = *(int *)(v71 + 48);
      uint64_t v86 = v117;
      int64_t v87 = (char *)(v117 + v85);
      uint64_t v88 = v84 + v85;
      sub_25B3198C0(v84, v117, type metadata accessor for ReplicatorRecord.ID);
      v80(v87, v88, v77);
      sub_25B319928(v86, v108, type metadata accessor for ReplicatorRecord.ID);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v87, v77);
      sub_25B2E344C(v84, &qword_26B341050);
      uint64_t v89 = v121;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B310B0C(0, *(void *)(v89 + 16) + 1, 1);
        uint64_t v89 = v121;
      }
      unint64_t v91 = *(void *)(v89 + 16);
      unint64_t v90 = *(void *)(v89 + 24);
      uint64_t v62 = v110;
      if (v91 >= v90 >> 1)
      {
        sub_25B310B0C(v90 > 1, v91 + 1, 1);
        uint64_t v89 = v121;
      }
      *(void *)(v89 + 16) = v91 + 1;
      uint64_t result = sub_25B319928(v108, v89+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(void *)(v112 + 72) * v91, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
      char v68 = *(unsigned char *)(v62 + 32);
      unint64_t v69 = 1 << v68;
      if (v65 >= 1 << v68) {
        goto LABEL_67;
      }
      uint64_t v67 = v109;
      unint64_t v92 = v120;
      uint64_t v93 = *(void *)(v109 + 8 * v120);
      if ((v93 & v119) == 0) {
        goto LABEL_68;
      }
      LODWORD(v64) = v107;
      if (*(_DWORD *)(v62 + 36) != v107) {
        goto LABEL_69;
      }
      unint64_t v94 = v93 & (-2 << (v65 & 0x3F));
      if (v94)
      {
        unint64_t v69 = __clz(__rbit64(v94)) | v65 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v70 = v106;
      }
      else
      {
        unint64_t v95 = v120 + 1;
        unint64_t v96 = (v69 + 63) >> 6;
        uint64_t v70 = v106;
        if (v120 + 1 < v96)
        {
          unint64_t v97 = *(void *)(v109 + 8 * v95);
          if (!v97)
          {
            unint64_t v95 = v120 + 2;
            if (v120 + 2 >= v96) {
              goto LABEL_34;
            }
            unint64_t v97 = *(void *)(v109 + 8 * v95);
            if (!v97)
            {
              while (v96 - 3 != v92)
              {
                unint64_t v97 = *(void *)(v104 + 8 * v92++);
                if (v97)
                {
                  unint64_t v95 = v92 + 2;
                  goto LABEL_49;
                }
              }
              goto LABEL_34;
            }
          }
LABEL_49:
          unint64_t v69 = __clz(__rbit64(v97)) + (v95 << 6);
        }
      }
LABEL_34:
      unint64_t v66 = v111 + 1;
      uint64_t v65 = v69;
      if (v111 + 1 == v70)
      {
        swift_release();
        goto LABEL_57;
      }
    }
  }
  uint64_t v121 = MEMORY[0x263F8EE78];
  sub_25B310B0C(0, v20, 0);
  uint64_t result = sub_25B3661D4(v19);
  if (result < 0) {
    goto LABEL_63;
  }
  unint64_t v23 = result;
  if (result >= 1 << *(unsigned char *)(v19 + 32)) {
    goto LABEL_63;
  }
  uint64_t v24 = 0;
  uint64_t v25 = v19 + 64;
  uint64_t v107 = v19 + 80;
  uint64_t v104 = v19;
  unint64_t v105 = v17;
  int64_t v101 = v20;
  uint64_t v102 = v22;
  uint64_t v103 = v19 + 64;
  while ((*(void *)(v25 + 8 * (v23 >> 6)) & (1 << v23)) != 0)
  {
    if (*(_DWORD *)(v19 + 36) != v22) {
      goto LABEL_59;
    }
    uint64_t v110 = 1 << v23;
    unint64_t v111 = v23 >> 6;
    uint64_t v109 = v24;
    uint64_t v26 = v118;
    uint64_t v27 = (uint64_t)v114;
    unint64_t v28 = &v114[*(int *)(v118 + 48)];
    uint64_t v29 = *(void *)(v19 + 48);
    uint64_t v30 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_25B3198C0(v29 + *(void *)(*(void *)(v30 - 8) + 72) * v23, v27, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v31 = *(void *)(v19 + 56);
    uint64_t v32 = sub_25B37F640();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(void *)(v33 + 72);
    uint64_t v119 = v23;
    uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
    v35(v28, v31 + v34 * v23, v32);
    uint64_t v36 = v115;
    sub_25B3198C0(v27, v115, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v37 = v26;
    v35((char *)(v36 + *(int *)(v26 + 48)), (unint64_t)v28, v32);
    uint64_t v38 = v116;
    sub_25B2E31F0(v36, v116, &qword_26B341050);
    sub_25B2E344C(v27, &qword_26B341050);
    uint64_t v39 = *(int *)(v37 + 48);
    uint64_t v40 = v117;
    uint64_t v41 = (char *)(v117 + v39);
    unint64_t v120 = v117 + v39;
    unint64_t v42 = v38 + v39;
    sub_25B3198C0(v38, v117, type metadata accessor for ReplicatorRecord.ID);
    v35(v41, v42, v32);
    uint64_t v43 = *(int *)(v37 + 48);
    uint64_t v44 = v106;
    uint64_t v45 = (char *)(v106 + v43);
    sub_25B3198C0(v38, v106, type metadata accessor for ReplicatorRecord.ID);
    v35(v45, v42, v32);
    uint64_t v46 = (uint64_t)v105;
    sub_25B319928(v40, (uint64_t)v105, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v47 = type metadata accessor for ReplicatorRecordVersion();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v46 + *(int *)(v47 + 20), v45, v32);
    sub_25B319990(v44, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(unint64_t, uint64_t))(v33 + 8))(v120, v32);
    swift_storeEnumTagMultiPayload();
    sub_25B2E344C(v38, &qword_26B341050);
    uint64_t v48 = v121;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_25B310B0C(0, *(void *)(v48 + 16) + 1, 1);
      uint64_t v48 = v121;
    }
    uint64_t v19 = v104;
    uint64_t v49 = v119;
    unint64_t v51 = *(void *)(v48 + 16);
    unint64_t v50 = *(void *)(v48 + 24);
    if (v51 >= v50 >> 1)
    {
      sub_25B310B0C(v50 > 1, v51 + 1, 1);
      uint64_t v48 = v121;
    }
    *(void *)(v48 + 16) = v51 + 1;
    uint64_t result = sub_25B319928(v46, v48+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(void *)(v112 + 72) * v51, (uint64_t (*)(void))type metadata accessor for ReplicatorRecordChange);
    uint64_t v52 = 1 << *(unsigned char *)(v19 + 32);
    if (v49 >= v52) {
      goto LABEL_60;
    }
    uint64_t v25 = v103;
    unint64_t v53 = v111;
    uint64_t v54 = *(void *)(v103 + 8 * v111);
    if ((v54 & v110) == 0) {
      goto LABEL_61;
    }
    LODWORD(v22) = v102;
    if (*(_DWORD *)(v19 + 36) != v102) {
      goto LABEL_62;
    }
    unint64_t v55 = v54 & (-2 << (v49 & 0x3F));
    if (v55)
    {
      unint64_t v23 = __clz(__rbit64(v55)) | v49 & 0xFFFFFFFFFFFFFFC0;
LABEL_23:
      int64_t v59 = v101;
      goto LABEL_24;
    }
    unint64_t v56 = v111 + 1;
    unint64_t v57 = (unint64_t)(v52 + 63) >> 6;
    if (v111 + 1 >= v57)
    {
      unint64_t v23 = 1 << *(unsigned char *)(v19 + 32);
      goto LABEL_23;
    }
    unint64_t v58 = *(void *)(v103 + 8 * v56);
    int64_t v59 = v101;
    if (v58)
    {
LABEL_21:
      unint64_t v23 = __clz(__rbit64(v58)) + (v56 << 6);
    }
    else
    {
      while (v57 - 2 != v53)
      {
        unint64_t v58 = *(void *)(v107 + 8 * v53++);
        if (v58)
        {
          unint64_t v56 = v53 + 1;
          goto LABEL_21;
        }
      }
      unint64_t v23 = 1 << *(unsigned char *)(v19 + 32);
    }
LABEL_24:
    uint64_t v24 = v109 + 1;
    if (v109 + 1 == v59)
    {
      swift_release();
      goto LABEL_31;
    }
    if ((v23 & 0x8000000000000000) != 0 || (uint64_t)v23 >= v52) {
      goto LABEL_63;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_25B31551C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for ReplicatorMessage();
  uint64_t v5 = MEMORY[0x270FA5388](v22);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    v20[1] = v2;
    uint64_t v13 = *(void *)(v8 + 72);
    unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = a1 + v21;
    uint64_t v15 = MEMORY[0x263F8EE78];
    do
    {
      sub_25B3198C0(v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      uint64_t v16 = &v10[*(int *)(v22 + 20)];
      BOOL v17 = *(void *)v16 == *(void *)(a2 + 16) && *((void *)v16 + 1) == *(void *)(a2 + 24);
      if (v17 || (sub_25B3801A0() & 1) != 0)
      {
        sub_25B319928((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_25B310B48(0, *(void *)(v15 + 16) + 1, 1);
        }
        uint64_t v15 = v23;
        unint64_t v19 = *(void *)(v23 + 16);
        unint64_t v18 = *(void *)(v23 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_25B310B48(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v23;
        }
        *(void *)(v15 + 16) = v19 + 1;
        sub_25B319928((uint64_t)v7, v15 + v21 + v19 * v13, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      }
      else
      {
        sub_25B319990((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
      }
      v14 += v13;
      --v12;
    }
    while (v12);
    return v23;
  }
  return result;
}

uint64_t sub_25B315768(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v42 = a2;
  unint64_t v53 = a4;
  uint64_t v43 = a1;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v5 = MEMORY[0x270FA5388](v52);
  uint64_t v50 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v60 = (uint64_t)&v41 - v7;
  uint64_t v8 = sub_25B37F640();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int64_t v59 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v58 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  uint64_t v54 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v44 = 0;
  uint64_t v45 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v48 = v9 + 16;
  uint64_t v51 = v9;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v47 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v19 = v60;
  while (v18)
  {
    uint64_t v56 = (v18 - 1) & v18;
    int64_t v57 = v14;
    unint64_t v22 = __clz(__rbit64(v18)) | (v14 << 6);
LABEL_21:
    uint64_t v27 = v54;
    uint64_t v28 = v58;
    sub_25B3198C0(v54[6] + *(void *)(v49 + 72) * v22, v58, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v29 = v27[7];
    uint64_t v30 = *(void *)(v51 + 72);
    unint64_t v55 = v22;
    uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v51 + 16);
    uint64_t v32 = v59;
    v31(v59, v29 + v30 * v22, v8);
    uint64_t v33 = v52;
    uint64_t v34 = v19 + *(int *)(v52 + 48);
    sub_25B3198C0(v28, v19, type metadata accessor for ReplicatorRecord.ID);
    v31((char *)v34, (unint64_t)v32, v8);
    uint64_t v35 = v50;
    uint64_t v36 = (char *)(v50 + *(int *)(v33 + 48));
    sub_25B3198C0(v19, v50, type metadata accessor for ReplicatorRecord.ID);
    v31(v36, v34, v8);
    uint64_t v38 = *(void *)(v35 + 32);
    uint64_t v37 = *(void *)(v35 + 40);
    swift_bridgeObjectRetain();
    sub_25B319990(v35, type metadata accessor for ReplicatorRecord.ID);
    if (v38 == *v53 && v37 == v53[1])
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C(v60, &qword_26B341050);
      uint64_t v39 = *v47;
      (*v47)((uint64_t)v36, v8);
      v39((uint64_t)v59, v8);
      uint64_t result = sub_25B319990(v58, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v18 = v56;
      int64_t v14 = v57;
      goto LABEL_24;
    }
    char v20 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    sub_25B2E344C(v60, &qword_26B341050);
    unint64_t v21 = *v47;
    (*v47)((uint64_t)v36, v8);
    v21((uint64_t)v59, v8);
    uint64_t result = sub_25B319990(v58, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v18 = v56;
    int64_t v14 = v57;
    if (v20)
    {
LABEL_24:
      *(unint64_t *)((char *)v43 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
      if (__OFADD__(v44++, 1))
      {
        __break(1u);
        return sub_25B311BB8(v43, v42, v44, v54);
      }
    }
  }
  int64_t v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v23 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v54);
  }
  unint64_t v24 = *(void *)(v45 + 8 * v23);
  int64_t v25 = v14 + 1;
  if (v24) {
    goto LABEL_20;
  }
  int64_t v25 = v14 + 2;
  if (v14 + 2 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v54);
  }
  unint64_t v24 = *(void *)(v45 + 8 * v25);
  if (v24) {
    goto LABEL_20;
  }
  int64_t v25 = v14 + 3;
  if (v14 + 3 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v54);
  }
  unint64_t v24 = *(void *)(v45 + 8 * v25);
  if (v24)
  {
LABEL_20:
    uint64_t v56 = (v24 - 1) & v24;
    int64_t v57 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_21;
  }
  uint64_t v26 = v14 + 4;
  if (v14 + 4 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v54);
  }
  unint64_t v24 = *(void *)(v45 + 8 * v26);
  if (v24)
  {
    int64_t v25 = v14 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v46) {
      return sub_25B311BB8(v43, v42, v44, v54);
    }
    unint64_t v24 = *(void *)(v45 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_25B315CA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_25B315CD0(uint64_t a1)
{
  return a1;
}

void sub_25B315D44(unsigned char *a1@<X8>)
{
  sub_25B306874(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_25B3195F8, (SEL *)&selRef_disableClientWithParameters_error_, a1);
}

void sub_25B315D88()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 224) = *(unsigned char *)(v0 + 24);
}

void sub_25B315D98(unsigned char *a1@<X8>)
{
  sub_25B306874(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_25B3195A4, (SEL *)&selRef_enableClientWithParameters_error_, a1);
}

void sub_25B315DDC(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 224);
}

void *sub_25B315DE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void sub_25B315E2C(unsigned char *a1@<X8>)
{
  sub_25B306874(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_25B3194FC, (SEL *)&selRef_isClientEnabledWithParameters_error_, a1);
}

uint64_t sub_25B315E70@<X0>(uint64_t *a1@<X8>)
{
  return sub_25B2EA598(v1, a1);
}

uint64_t sub_25B315E8C()
{
  return sub_25B304518(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_25B315EA8(uint64_t *a1@<X8>)
{
  sub_25B303BDC(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_25B315EC8@<X0>(void *a1@<X8>)
{
  return sub_25B3192AC(a1);
}

void *sub_25B315EE0@<X0>(void *a1@<X8>)
{
  return sub_25B3192D4(a1);
}

uint64_t sub_25B315EF8()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25B315F30()
{
  return sub_25B2EA948();
}

void sub_25B315F38(void *a1@<X8>)
{
  sub_25B3074C4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_25B315F58()
{
  return sub_25B2EADA8();
}

uint64_t sub_25B315F60(uint64_t *a1)
{
  return sub_25B2EB154(a1, v1, (void (*)(uint64_t))sub_25B2EAE44);
}

uint64_t sub_25B315F90(uint64_t *a1)
{
  return sub_25B2EB154(a1, v1, (void (*)(uint64_t))sub_25B2EB1C8);
}

void sub_25B315FC0(uint64_t a1@<X8>)
{
  sub_25B306594(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_25B315FE0()
{
  return sub_25B30616C(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

void sub_25B315FFC()
{
}

void sub_25B316014()
{
  sub_25B2FA1C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_25B316038()
{
  return sub_25B304424();
}

uint64_t sub_25B316054()
{
  return sub_25B2F5430(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_25B316074()
{
  return sub_25B2F55D0(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t sub_25B31607C()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B3160BC(uint64_t a1)
{
  return sub_25B2F576C(a1, v1[2], v1[3], v1[4]);
}

void sub_25B3160C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = a4;
  uint64_t v51 = a2;
  uint64_t v52 = a1;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v7 = MEMORY[0x270FA5388](v65);
  uint64_t v64 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v59 = *(void *)(v15 - 8);
  uint64_t v16 = (os_unfair_lock_s *)MEMORY[0x270FA5388](v15 - 8);
  unint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = 0;
  int64_t v19 = 0;
  uint64_t v67 = (void *)a3;
  uint64_t v20 = *(void *)(a3 + 64);
  uint64_t v54 = a3 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v55 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v57 = v12 + 16;
  uint64_t v61 = v12;
  uint64_t v56 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v62 = v11;
  int64_t v63 = v10;
  uint64_t v60 = v14;
  uint64_t v58 = v18;
  while (1)
  {
    if (v23)
    {
      uint64_t v73 = v5;
      uint64_t v69 = (v23 - 1) & v23;
      int64_t v70 = v19;
      unint64_t v26 = __clz(__rbit64(v23)) | (v19 << 6);
      goto LABEL_18;
    }
    BOOL v27 = __OFADD__(v19, 1);
    int64_t v28 = v19 + 1;
    if (v27)
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v28 >= v55) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v54 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_17:
    uint64_t v73 = v5;
    uint64_t v69 = (v29 - 1) & v29;
    int64_t v70 = v28;
    unint64_t v26 = __clz(__rbit64(v29)) + (v28 << 6);
LABEL_18:
    uint64_t v31 = v67;
    sub_25B3198C0(v67[6] + *(void *)(v59 + 72) * v26, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v32 = v31[7];
    uint64_t v33 = *(void *)(v61 + 72);
    unint64_t v68 = v26;
    uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v61 + 16);
    v34(v14, v32 + v33 * v26, v11);
    uint64_t v35 = v65;
    uint64_t v36 = &v10[*(int *)(v65 + 48)];
    sub_25B3198C0((uint64_t)v18, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
    v34(v36, (unint64_t)v14, v11);
    uint64_t v37 = *(int *)(v35 + 48);
    uint64_t v38 = v64;
    uint64_t v39 = (char *)(v64 + v37);
    sub_25B3198C0((uint64_t)v10, v64, type metadata accessor for ReplicatorRecord.ID);
    v34(v39, (unint64_t)v36, v11);
    uint64_t v40 = *(void *)(v38 + 32);
    uint64_t v41 = *(void *)(v38 + 40);
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_25B319990(v38, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v43 = *(os_unfair_lock_s **)(v66 + 80);
    MEMORY[0x270FA5388](v42);
    *(&v50 - 2) = (uint64_t)sub_25B2E441C;
    *(&v50 - 1) = v44;
    swift_retain();
    os_unfair_lock_lock(v43 + 4);
    uint64_t v45 = v73;
    sub_25B319EEC(v46);
    uint64_t v73 = v45;
    uint64_t v16 = v43 + 4;
    if (v45) {
      goto LABEL_33;
    }
    os_unfair_lock_unlock(v16);
    swift_release();
    uint64_t v48 = v71;
    uint64_t v47 = v72;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40 == v48 && v41 == v47)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v10 = v63;
      sub_25B2E344C((uint64_t)v63, &qword_26B341050);
      uint64_t v49 = *v56;
      uint64_t v11 = v62;
      (*v56)((uint64_t)v39, v62);
      int64_t v14 = v60;
      v49((uint64_t)v60, v11);
      unint64_t v18 = v58;
      uint64_t v16 = (os_unfair_lock_s *)sub_25B319990((uint64_t)v58, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v5 = v73;
      unint64_t v23 = v69;
      int64_t v19 = v70;
      goto LABEL_22;
    }
    char v24 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v63;
    sub_25B2E344C((uint64_t)v63, &qword_26B341050);
    int64_t v25 = *v56;
    uint64_t v11 = v62;
    (*v56)((uint64_t)v39, v62);
    int64_t v14 = v60;
    v25((uint64_t)v60, v11);
    unint64_t v18 = v58;
    uint64_t v16 = (os_unfair_lock_s *)sub_25B319990((uint64_t)v58, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v5 = v73;
    unint64_t v23 = v69;
    int64_t v19 = v70;
    if (v24)
    {
LABEL_22:
      *(unint64_t *)((char *)v52 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
      BOOL v27 = __OFADD__(v53++, 1);
      if (v27) {
        goto LABEL_32;
      }
    }
  }
  int64_t v30 = v28 + 1;
  if (v28 + 1 >= v55) {
    goto LABEL_29;
  }
  unint64_t v29 = *(void *)(v54 + 8 * v30);
  if (v29) {
    goto LABEL_16;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v55) {
    goto LABEL_29;
  }
  unint64_t v29 = *(void *)(v54 + 8 * v30);
  if (v29) {
    goto LABEL_16;
  }
  int64_t v30 = v28 + 3;
  if (v28 + 3 >= v55)
  {
LABEL_29:
    sub_25B311BB8(v52, v51, v53, v67);
    return;
  }
  unint64_t v29 = *(void *)(v54 + 8 * v30);
  if (v29)
  {
LABEL_16:
    int64_t v28 = v30;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v55) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v54 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_17;
    }
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  os_unfair_lock_unlock(v16);
  __break(1u);
}

uint64_t sub_25B31677C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    sub_25B3160C8((void *)((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    uint64_t v12 = v11;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    sub_25B3160C8((unint64_t *)v13, v8, a1, a2);
    uint64_t v12 = v14;
    swift_release();
    MEMORY[0x2611621B0](v13, -1, -1);
    swift_release_n();
  }
  return v12;
}

uint64_t sub_25B316938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_25B37F6B0();
  v11[3] = a3;
  v11[4] = a5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_2, a1, a3);
  uint64_t v9 = sub_25B37F6A0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t type metadata accessor for ReplicatorClient()
{
  return self;
}

uint64_t method lookup function for ReplicatorClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicatorClient);
}

uint64_t dispatch thunk of ReplicatorClient.__allocating_init(descriptor:recordVersions:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of ReplicatorClient.__allocating_init(id:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t sub_25B316A78()
{
  return _s18ReplicatorServices9SingletonCMa_0();
}

uint64_t _s18ReplicatorServices9SingletonCMa_0()
{
  uint64_t result = qword_26B341140;
  if (!qword_26B341140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25B316ACC()
{
  sub_25B316BC4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_25B316BC4()
{
  if (!qword_26B3414D8)
  {
    sub_25B37F640();
    unint64_t v0 = sub_25B37FD60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B3414D8);
    }
  }
}

unint64_t sub_25B316C1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v74 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_25B37F640();
  uint64_t v6 = *(void *)(v65 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v65);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v56 - v10;
  uint64_t v71 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v12 = MEMORY[0x270FA5388](v71);
  int64_t v70 = (uint64_t *)((char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v56 - v15;
  MEMORY[0x270FA5388](v14);
  int64_t v19 = (uint64_t *)((char *)&v56 - v18);
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v22 = a1 + v21;
  uint64_t v61 = *(void *)(v17 + 72);
  unint64_t v62 = v21;
  uint64_t v64 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v56 = a1;
  swift_bridgeObjectRetain();
  unint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v57 = v9;
  uint64_t v58 = v19;
  uint64_t v59 = v16;
  uint64_t v60 = v11;
  while (1)
  {
    sub_25B3198C0(v22, (uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v24 = v19[1];
    uint64_t v72 = *v19;
    uint64_t v73 = v24;
    sub_25B37F6C0();
    if (v2) {
      break;
    }
    uint64_t v67 = v20;
    uint64_t v68 = v22;
    unint64_t v66 = v23;
    uint64_t v69 = 0;
    uint64_t v25 = sub_25B37F5F0();
    uint64_t v27 = v26;
    int64_t v63 = *v64;
    v63(v11, v65);
    uint64_t v28 = v19[2];
    uint64_t v29 = v19[3];
    uint64_t v30 = v19[4];
    uint64_t v31 = v19[5];
    uint64_t v32 = v71;
    uint64_t v33 = (uint64_t)v19 + *(int *)(v71 + 28);
    uint64_t v34 = v74;
    sub_25B3198C0(v33, v74, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v35 = v70;
    *int64_t v70 = v25;
    v35[1] = v27;
    v35[2] = v28;
    long long v35[3] = v29;
    v35[4] = v30;
    v35[5] = v31;
    sub_25B3198C0(v34, (uint64_t)v35 + *(int *)(v32 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_25B37FA20() < 51)
    {
      uint64_t v2 = v69;
    }
    else
    {
      uint64_t v72 = v25;
      uint64_t v73 = v27;
      uint64_t v36 = v57;
      uint64_t v37 = v69;
      sub_25B37F6C0();
      uint64_t v2 = v37;
      if (v37)
      {

        swift_bridgeObjectRetain();
        sub_25B37FA30();
        uint64_t v38 = sub_25B37FA60();
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v25 = MEMORY[0x261161120](v38, v40, v42, v44);
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = 0;
      }
      else
      {
        uint64_t v25 = sub_25B37F5F0();
        uint64_t v46 = v47;
        v63(v36, v65);
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = v46;
    }
    uint64_t v48 = (uint64_t)v59;
    uint64_t v11 = v60;
    int64_t v19 = v58;
    unint64_t v23 = v66;
    uint64_t v49 = v67;
    sub_25B319990(v74, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v50 = (uint64_t)v70;
    uint64_t v51 = (uint64_t *)((char *)v70 + *(int *)(v71 + 32));
    *uint64_t v51 = v25;
    v51[1] = v27;
    sub_25B319928(v50, v48, type metadata accessor for ReplicatorRecord.ID);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v23 = sub_25B3103B4(0, *(void *)(v23 + 16) + 1, 1, v23, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
    }
    unint64_t v53 = *(void *)(v23 + 16);
    unint64_t v52 = *(void *)(v23 + 24);
    if (v53 >= v52 >> 1) {
      unint64_t v23 = sub_25B3103B4(v52 > 1, v53 + 1, 1, v23, &qword_26B340D88, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
    }
    *(void *)(v23 + 16) = v53 + 1;
    uint64_t v54 = v61;
    sub_25B319928(v48, v23 + v62 + v53 * v61, type metadata accessor for ReplicatorRecord.ID);
    sub_25B319990((uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v22 = v68 + v54;
    uint64_t v20 = v49 - 1;
    if (!v20)
    {
      swift_bridgeObjectRelease();
      return v23;
    }
  }
  sub_25B319990((uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_25B317234(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a2;
  uint64_t v54 = a5;
  uint64_t v57 = a4;
  uint64_t v44 = a1;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v6 = MEMORY[0x270FA5388](v53);
  uint64_t v51 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (uint64_t)&v42 - v8;
  uint64_t v9 = sub_25B37F640();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v61 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v50 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v60 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = 0;
  int64_t v55 = (void *)a3;
  uint64_t v16 = *(void *)(a3 + 64);
  uint64_t v45 = 0;
  uint64_t v46 = a3 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v49 = v10 + 16;
  uint64_t v52 = v10;
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v20 = v60;
  uint64_t v21 = v62;
  while (v19)
  {
    uint64_t v58 = (v19 - 1) & v19;
    int64_t v59 = v15;
    unint64_t v24 = __clz(__rbit64(v19)) | (v15 << 6);
LABEL_21:
    uint64_t v29 = v55;
    sub_25B3198C0(v55[6] + *(void *)(v50 + 72) * v24, v20, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v30 = v29[7];
    uint64_t v31 = *(void *)(v52 + 72);
    unint64_t v56 = v24;
    uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    uint64_t v33 = v61;
    v32(v61, v30 + v31 * v24, v9);
    uint64_t v34 = v53;
    uint64_t v35 = v21 + *(int *)(v53 + 48);
    sub_25B3198C0(v20, v21, type metadata accessor for ReplicatorRecord.ID);
    v32((char *)v35, (unint64_t)v33, v9);
    uint64_t v36 = v51;
    uint64_t v37 = (char *)(v51 + *(int *)(v34 + 48));
    sub_25B3198C0(v21, v51, type metadata accessor for ReplicatorRecord.ID);
    v32(v37, v35, v9);
    uint64_t v39 = *(void *)(v36 + 32);
    uint64_t v38 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    sub_25B319990(v36, type metadata accessor for ReplicatorRecord.ID);
    if (v39 == v57 && v38 == v54)
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C(v62, &qword_26B341050);
      uint64_t v40 = *v48;
      (*v48)((uint64_t)v37, v9);
      v40((uint64_t)v61, v9);
      uint64_t result = sub_25B319990(v60, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v19 = v58;
      int64_t v15 = v59;
      goto LABEL_24;
    }
    char v22 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    sub_25B2E344C(v62, &qword_26B341050);
    unint64_t v23 = *v48;
    (*v48)((uint64_t)v37, v9);
    v23((uint64_t)v61, v9);
    uint64_t result = sub_25B319990(v60, type metadata accessor for ReplicatorRecord.ID);
    unint64_t v19 = v58;
    int64_t v15 = v59;
    if (v22)
    {
LABEL_24:
      *(unint64_t *)((char *)v44 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
      if (__OFADD__(v45++, 1))
      {
        __break(1u);
        return sub_25B311BB8(v44, v43, v45, v55);
      }
    }
  }
  int64_t v25 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v25 >= v47) {
    return sub_25B311BB8(v44, v43, v45, v55);
  }
  unint64_t v26 = *(void *)(v46 + 8 * v25);
  int64_t v27 = v15 + 1;
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v15 + 2;
  if (v15 + 2 >= v47) {
    return sub_25B311BB8(v44, v43, v45, v55);
  }
  unint64_t v26 = *(void *)(v46 + 8 * v27);
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v15 + 3;
  if (v15 + 3 >= v47) {
    return sub_25B311BB8(v44, v43, v45, v55);
  }
  unint64_t v26 = *(void *)(v46 + 8 * v27);
  if (v26)
  {
LABEL_20:
    uint64_t v58 = (v26 - 1) & v26;
    int64_t v59 = v27;
    unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_21;
  }
  uint64_t v28 = v15 + 4;
  if (v15 + 4 >= v47) {
    return sub_25B311BB8(v44, v43, v45, v55);
  }
  unint64_t v26 = *(void *)(v46 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v15 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v47) {
      return sub_25B311BB8(v44, v43, v45, v55);
    }
    unint64_t v26 = *(void *)(v46 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_25B31777C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25B317234((void *)((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25B317234((unint64_t *)v13, v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    MEMORY[0x2611621B0](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

char *sub_25B317944(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B317A30(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v42 = a2;
  uint64_t v54 = a4;
  uint64_t v43 = a1;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341050);
  uint64_t v5 = MEMORY[0x270FA5388](v53);
  uint64_t v52 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v60 = (uint64_t)&v41 - v7;
  uint64_t v8 = sub_25B37F640();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int64_t v59 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v58 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  int64_t v55 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v44 = 0;
  uint64_t v45 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v51 = v9;
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v49 = v9 + 16;
  uint64_t v19 = v58;
  uint64_t v20 = v60;
  while (1)
  {
    if (v18)
    {
      uint64_t v56 = (v18 - 1) & v18;
      int64_t v57 = v14;
      unint64_t v23 = __clz(__rbit64(v18)) | (v14 << 6);
      goto LABEL_18;
    }
    BOOL v24 = __OFADD__(v14, 1);
    int64_t v25 = v14 + 1;
    if (v24)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v46) {
      return sub_25B311BB8(v43, v42, v44, v55);
    }
    unint64_t v26 = *(void *)(v45 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_17:
    uint64_t v56 = (v26 - 1) & v26;
    int64_t v57 = v25;
    unint64_t v23 = __clz(__rbit64(v26)) + (v25 << 6);
LABEL_18:
    uint64_t v28 = v55;
    sub_25B3198C0(v55[6] + *(void *)(v50 + 72) * v23, v19, type metadata accessor for ReplicatorRecord.ID);
    uint64_t v29 = v28[7];
    uint64_t v30 = *(void *)(v51 + 72);
    unint64_t v47 = v23;
    uint64_t v31 = v29 + v30 * v23;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
    uint64_t v33 = v59;
    v32(v59, v31, v8);
    uint64_t v34 = v53;
    uint64_t v35 = v20 + *(int *)(v53 + 48);
    sub_25B3198C0(v19, v20, type metadata accessor for ReplicatorRecord.ID);
    v32((char *)v35, (uint64_t)v33, v8);
    uint64_t v36 = v52;
    uint64_t v37 = (char *)(v52 + *(int *)(v34 + 48));
    sub_25B3198C0(v20, v52, type metadata accessor for ReplicatorRecord.ID);
    v32(v37, v35, v8);
    uint64_t v39 = *(void *)(v36 + 32);
    uint64_t v38 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    sub_25B319990(v36, type metadata accessor for ReplicatorRecord.ID);
    if (v39 == *v54 && v38 == v54[1])
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C(v60, &qword_26B341050);
      uint64_t v40 = *v48;
      (*v48)((uint64_t)v37, v8);
      v40((uint64_t)v59, v8);
      uint64_t result = sub_25B319990(v58, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v18 = v56;
      int64_t v14 = v57;
    }
    else
    {
      char v21 = sub_25B3801A0();
      swift_bridgeObjectRelease();
      sub_25B2E344C(v60, &qword_26B341050);
      char v22 = *v48;
      (*v48)((uint64_t)v37, v8);
      v22((uint64_t)v59, v8);
      uint64_t result = sub_25B319990(v58, type metadata accessor for ReplicatorRecord.ID);
      unint64_t v18 = v56;
      int64_t v14 = v57;
      if ((v21 & 1) == 0)
      {
        *(unint64_t *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
        BOOL v24 = __OFADD__(v44++, 1);
        if (v24)
        {
          __break(1u);
          return sub_25B311BB8(v43, v42, v44, v55);
        }
      }
    }
  }
  int64_t v27 = v25 + 1;
  if (v25 + 1 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v55);
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v55);
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  int64_t v27 = v25 + 3;
  if (v25 + 3 >= v46) {
    return sub_25B311BB8(v43, v42, v44, v55);
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26)
  {
LABEL_16:
    int64_t v25 = v27;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v46) {
      return sub_25B311BB8(v43, v42, v44, v55);
    }
    unint64_t v26 = *(void *)(v45 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25B317F6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  v15[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  sub_25B310A18(a2);
  uint64_t isStackAllocationSafe = sub_25B310A18(a2);
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    sub_25B310A18(a2);
    uint64_t v12 = a3((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    sub_25B315CD0(a2);
    if (v3) {
      swift_willThrow();
    }
    sub_25B315CD0(a2);
    sub_25B315CD0(a2);
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    sub_25B310A18(a2);
    uint64_t v12 = a3((char *)v13, v9, a1, a2);
    sub_25B315CD0(a2);
    MEMORY[0x2611621B0](v13, -1, -1);
    sub_25B315CD0(a2);
    sub_25B315CD0(a2);
  }
  return v12;
}

uint64_t sub_25B318144(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC20);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25B37FFD0();
  __break(1u);
  return result;
}

uint64_t sub_25B318250()
{
  uint64_t v1 = (int *)(type metadata accessor for ReplicatorMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  char v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  v7(v0 + v3 + v1[8], v5);
  swift_bridgeObjectRelease();
  sub_25B2CA2D8(*(void *)(v0 + v3 + v1[11]), *(void *)(v0 + v3 + v1[11] + 8));
  uint64_t v8 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  return MEMORY[0x270FA0238](v0, v10 + 16, v2 | 7);
}

uint64_t sub_25B31841C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ReplicatorMessage() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  double v6 = *(double *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = v0 + v2;
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(uint64_t *))v10;
  uint64_t v12 = *(void *)(v10 + 8);
  return sub_25B306D8C(v8, v7, v6, v9, v11, v12);
}

uint64_t sub_25B3184D0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B3184E0()
{
  return sub_25B37B59C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_25B3184E8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B318520(uint64_t a1, void *a2)
{
  return sub_25B3070C4(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_25B318528()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25B318560(void *a1)
{
  sub_25B3079EC(a1, *(void *)(v1 + 16));
}

uint64_t sub_25B318568()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B318578(uint64_t a1)
{
  return sub_25B37B654(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_25B318580()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25B3185B8(uint64_t a1)
{
  sub_25B308268(a1, v1);
}

unint64_t sub_25B3185C0()
{
  unint64_t result = qword_26B3416A8;
  if (!qword_26B3416A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3416A8);
  }
  return result;
}

unint64_t sub_25B318614()
{
  unint64_t result = qword_26B341640;
  if (!qword_26B341640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341640);
  }
  return result;
}

unint64_t sub_25B318668()
{
  unint64_t result = qword_26B341380;
  if (!qword_26B341380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341380);
  }
  return result;
}

unint64_t sub_25B3186BC()
{
  unint64_t result = qword_26B341398;
  if (!qword_26B341398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341398);
  }
  return result;
}

uint64_t sub_25B318710(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25B31875C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_25B3187A8()
{
  unint64_t result = qword_26B3415E8;
  if (!qword_26B3415E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415E8);
  }
  return result;
}

unint64_t sub_25B3187FC()
{
  unint64_t result = qword_26B341688;
  if (!qword_26B341688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341688);
  }
  return result;
}

uint64_t sub_25B318850()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  unint64_t v5 = (id *)(v0 + v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    uint64_t v6 = sub_25B37F640();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v8(v0 + v3, v6);
    uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage();
    swift_bridgeObjectRelease();
    v8((uint64_t)v5 + v9[6], v6);
    swift_bridgeObjectRelease();
    sub_25B2CA2D8(*(uint64_t *)((char *)v5 + v9[9]), *(unint64_t *)((char *)v5 + v9[9] + 8));
    uint64_t v10 = (char *)v5 + v9[10];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
      v8((uint64_t)v10, v6);
    }
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_25B318A2C()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBC38) - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_25B318A98()
{
  return sub_25B306B10(*(void *)(v0 + 16));
}

uint64_t sub_25B318AB4()
{
  return sub_25B318C10((uint64_t (*)(void, void, void, void, void, void))sub_25B300288);
}

unint64_t sub_25B318AE0()
{
  unint64_t result = qword_26B340C60;
  if (!qword_26B340C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C60);
  }
  return result;
}

uint64_t sub_25B318B34(uint64_t *a1, uint64_t *a2)
{
  return sub_25B30BD2C(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_25B318B54(uint64_t a1, uint64_t *a2)
{
  sub_25B30BEE0(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_25B318B74(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25B2E2B14(a1, a2);
  }
  return a1;
}

unint64_t sub_25B318B88()
{
  unint64_t result = qword_26A4EBCC8;
  if (!qword_26A4EBCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBCC8);
  }
  return result;
}

uint64_t sub_25B318BDC()
{
  return swift_release();
}

uint64_t sub_25B318BE4()
{
  return sub_25B318C10((uint64_t (*)(void, void, void, void, void, void))sub_25B2FBAA0);
}

uint64_t sub_25B318C10(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_25B318C40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B318CA8(uint64_t a1, uint64_t *a2)
{
  return sub_25B30A784(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_25B318CC8(uint64_t a1, uint64_t *a2)
{
  return sub_25B30AD74(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

unint64_t sub_25B318CE8()
{
  unint64_t result = qword_26A4EBCD8;
  if (!qword_26A4EBCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBCD8);
  }
  return result;
}

unint64_t sub_25B318D3C()
{
  unint64_t result = qword_26A4EBCE0;
  if (!qword_26A4EBCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBCE0);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_2(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_25B318DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B318E44(uint64_t a1)
{
  return sub_25B304308(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_25B318E64()
{
  return sub_25B2FB8D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

unint64_t sub_25B318E88()
{
  unint64_t result = qword_26B340E28;
  if (!qword_26B340E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E28);
  }
  return result;
}

uint64_t sub_25B318EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_25B318F44()
{
  unint64_t result = qword_26A4EC220;
  if (!qword_26A4EC220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC220);
  }
  return result;
}

uint64_t sub_25B318F98(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_25B318FA4(uint64_t a1)
{
  sub_25B308D5C(a1, v1);
}

void sub_25B318FAC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25B3092F8();
  *(unsigned char *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending) = 0;
}

unint64_t sub_25B318FDC()
{
  unint64_t result = qword_26B341668;
  if (!qword_26B341668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341668);
  }
  return result;
}

unint64_t sub_25B319030()
{
  unint64_t result = qword_26B3413D0;
  if (!qword_26B3413D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3413D0);
  }
  return result;
}

void sub_25B319084(uint64_t a1)
{
  sub_25B30A1E8(a1, v1);
}

void sub_25B31908C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25B3053B0();
  *(unsigned char *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending) = 0;
}

unint64_t sub_25B3190BC()
{
  unint64_t result = qword_26B3417A0;
  if (!qword_26B3417A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417A0);
  }
  return result;
}

unint64_t sub_25B319110()
{
  unint64_t result = qword_26B341790;
  if (!qword_26B341790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341790);
  }
  return result;
}

uint64_t sub_25B319164()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_25B31919C()
{
  return sub_25B2F3664(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_25B3191A8(char a1)
{
  return sub_25B344C94(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_25B3191B4()
{
  return sub_25B2F2EDC(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_2708E89A0, (uint64_t)sub_25B3191EC);
}

uint64_t sub_25B3191EC(uint64_t a1)
{
  return sub_25B344C30(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_25B3191F8()
{
  return sub_25B2F2EDC(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_2708E8A18, (uint64_t)sub_25B319F9C);
}

uint64_t objectdestroy_209Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B319274()
{
  return sub_25B2F2EDC(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_2708E8A90, (uint64_t)sub_25B319E84);
}

uint64_t sub_25B3192AC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 136);
  *(void *)(v2 + 136) = *(void *)(v1 + 24);
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

void *sub_25B3192D4@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_25B319318(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B31935C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25B3193B4()
{
  return sub_25B2F1A94(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_25B3193C4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_25B3193FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25B319444(uint64_t a1)
{
  sub_25B309AE4(a1, v1);
}

void sub_25B31944C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25B2F8914();
  *(unsigned char *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending) = 0;
}

uint64_t sub_25B31947C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_25B3194FC()
{
  unint64_t result = qword_26A4EBCF8;
  if (!qword_26A4EBCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBCF8);
  }
  return result;
}

unint64_t sub_25B319550()
{
  unint64_t result = qword_26A4ECC30;
  if (!qword_26A4ECC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4ECC30);
  }
  return result;
}

unint64_t sub_25B3195A4()
{
  unint64_t result = qword_26A4EC250;
  if (!qword_26A4EC250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC250);
  }
  return result;
}

unint64_t sub_25B3195F8()
{
  unint64_t result = qword_26A4EBD00;
  if (!qword_26A4EBD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD00);
  }
  return result;
}

uint64_t sub_25B31964C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B3196B0()
{
  return objectdestroy_263Tm(&qword_26A4EB870);
}

uint64_t sub_25B3196BC(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  return sub_25B2E738C(a1);
}

uint64_t sub_25B319734(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E7918);
}

uint64_t sub_25B31974C()
{
  return sub_25B2F352C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B319768(unsigned __int8 *a1)
{
  return sub_25B344C68(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_25B319770()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t sub_25B3197A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_25B3197D8()
{
  return objectdestroy_263Tm(&qword_26B341218);
}

uint64_t sub_25B3197E4(uint64_t a1)
{
  return sub_25B3199FC(a1, &qword_26B341218, &qword_26B341208);
}

uint64_t sub_25B3197FC(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E6F80);
}

uint64_t sub_25B319814()
{
  return sub_25B2F2B34(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B319830(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25B319840()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25B319880(uint64_t a1)
{
  return sub_25B2F25AC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(unint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25B31988C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_25B3198C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B319928(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B319990(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B3199F0()
{
  return objectdestroy_263Tm(&qword_26B341218);
}

uint64_t sub_25B3199FC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  return sub_25B2E69A8(a1, v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a3, a2);
}

uint64_t sub_25B319A7C(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E655C);
}

uint64_t sub_25B319A94()
{
  return sub_25B2F195C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B319AB4()
{
  return objectdestroy_263Tm(&qword_26B340B38);
}

uint64_t sub_25B319AC0(uint64_t a1)
{
  return sub_25B3199FC(a1, &qword_26B340B38, &qword_26B340B28);
}

uint64_t sub_25B319AD8(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E5C8C);
}

uint64_t sub_25B319AF0()
{
  return sub_25B2F2DA4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B319B0C(void *a1)
{
  return sub_25B344C04(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_25B319B18()
{
  return objectdestroy_263Tm(&qword_26B340B38);
}

uint64_t sub_25B319B28(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E50CC);
}

uint64_t sub_25B319B40()
{
  return sub_25B2F2C6C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_292Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B319BA0()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_25B319BD0()
{
  return objectdestroy_263Tm(&qword_26A4EB320);
}

uint64_t objectdestroy_263Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t sub_25B319C68(uint64_t a1)
{
  return sub_25B3199FC(a1, &qword_26A4EB320, &qword_26A4EB310);
}

uint64_t objectdestroy_266Tm()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25B319D4C(uint64_t a1)
{
  return sub_25B319D64(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E48EC);
}

uint64_t sub_25B319D64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(sub_25B37F640() - 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5, v6);
}

uint64_t sub_25B319DEC()
{
  return sub_25B2F33F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B319E08@<X0>(void *a1@<X8>)
{
  return sub_25B310364(a1);
}

uint64_t sub_25B319E20@<X0>(uint64_t a1@<X8>)
{
  return sub_25B310348(a1);
}

uint64_t sub_25B319EEC(uint64_t a1)
{
  return sub_25B3102F8(a1);
}

void sub_25B319F6C(uint64_t *a1@<X8>)
{
}

void sub_25B319F84(uint64_t a1@<X8>)
{
}

uint64_t ReplicatorMessage.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t ReplicatorMessage.id.setter(uint64_t a1)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*ReplicatorMessage.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.clientID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for ReplicatorMessage()
{
  uint64_t result = qword_26B341550;
  if (!qword_26B341550) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ReplicatorMessage.clientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessage.clientID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.pairingRelationshipID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 24);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ReplicatorMessage.pairingRelationshipID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 24);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*ReplicatorMessage.pairingRelationshipID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.messageType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessage.messageType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessage.messageType.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.protocolVersion.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 32));
}

uint64_t ReplicatorMessage.protocolVersion.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ReplicatorMessage();
  *(void *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*ReplicatorMessage.protocolVersion.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.data.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 36);
  uint64_t v2 = *(void *)v1;
  sub_25B2E2B14(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ReplicatorMessage.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 36);
  uint64_t result = sub_25B2CA2D8(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*ReplicatorMessage.data.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.responseToID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 40);
  return sub_25B31A568(v3, a1);
}

uint64_t sub_25B31A568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ReplicatorMessage.responseToID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 40);
  return sub_25B31A614(a1, v3);
}

uint64_t sub_25B31A614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ReplicatorMessage.responseToID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.init(id:clientID:pairingRelationshipID:messageType:protocolVersion:data:responseToID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v16 = a9 + v15[10];
  uint64_t v17 = sub_25B37F640();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v19(a9, a1, v17);
  uint64_t v20 = (void *)(a9 + v15[5]);
  void *v20 = a2;
  v20[1] = a3;
  v19(a9 + v15[6], a4, v17);
  uint64_t result = sub_25B31A614(a11, v16);
  char v22 = (void *)(a9 + v15[7]);
  *char v22 = a5;
  v22[1] = a6;
  *(void *)(a9 + v15[8]) = a7;
  unint64_t v23 = (void *)(a9 + v15[9]);
  *unint64_t v23 = a8;
  v23[1] = a10;
  return result;
}

unint64_t sub_25B31A824(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4449746E65696C63;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0x546567617373656DLL;
      break;
    case 4:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 5:
      unint64_t result = 1635017060;
      break;
    case 6:
      unint64_t result = 0x65736E6F70736572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_25B31A918()
{
  return sub_25B31A824(*v0);
}

uint64_t sub_25B31A920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B31C670(a1, a2);
  *a3 = result;
  return result;
}

void sub_25B31A948(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_25B31A954(uint64_t a1)
{
  unint64_t v2 = sub_25B31AC88();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31A990(uint64_t a1)
{
  unint64_t v2 = sub_25B31AC88();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorMessage.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBD08);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31AC88();
  sub_25B3802C0();
  LOBYTE(v11) = 0;
  sub_25B37F640();
  sub_25B31B448(&qword_26A4EB370);
  sub_25B380160();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for ReplicatorMessage();
    LOBYTE(v11) = 1;
    sub_25B380140();
    LOBYTE(v11) = 2;
    sub_25B380160();
    LOBYTE(v11) = 3;
    sub_25B380140();
    LOBYTE(v11) = 4;
    sub_25B380170();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 36));
    char v12 = 5;
    sub_25B318D3C();
    sub_25B380160();
    LOBYTE(v11) = 6;
    sub_25B380120();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_25B31AC88()
{
  unint64_t result = qword_26A4EBD10;
  if (!qword_26A4EBD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD10);
  }
  return result;
}

uint64_t ReplicatorMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v35 - v11;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBD18);
  uint64_t v39 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  int64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ReplicatorMessage();
  uint64_t v40 = MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v40 + 40)];
  uint64_t v46 = v7;
  uint64_t v19 = *(void (**)(void))(v7 + 56);
  uint64_t v44 = v18;
  v19();
  uint64_t v20 = a1[3];
  uint64_t v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_25B31AC88();
  uint64_t v41 = v14;
  char v21 = v45;
  sub_25B3802B0();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return sub_25B31B2F4(v44);
  }
  else
  {
    uint64_t v45 = v5;
    uint64_t v22 = v39;
    LOBYTE(v47) = 0;
    uint64_t v23 = sub_25B31B448((unint64_t *)&unk_26B340D00);
    sub_25B3800B0();
    uint64_t v37 = v23;
    BOOL v24 = v12;
    int64_t v25 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
    v25(v17, v24, v6);
    LOBYTE(v47) = 1;
    uint64_t v26 = sub_25B380090();
    uint64_t v36 = v25;
    int64_t v27 = (int *)v40;
    uint64_t v28 = (uint64_t *)&v17[*(int *)(v40 + 20)];
    *uint64_t v28 = v26;
    v28[1] = v29;
    LOBYTE(v47) = 2;
    sub_25B3800B0();
    v36(&v17[v27[6]], v10, v6);
    LOBYTE(v47) = 3;
    uint64_t v30 = sub_25B380090();
    uint64_t v31 = (uint64_t *)&v17[v27[7]];
    *uint64_t v31 = v30;
    v31[1] = v32;
    LOBYTE(v47) = 4;
    *(void *)&v17[v27[8]] = sub_25B3800C0();
    char v48 = 5;
    sub_25B318CE8();
    sub_25B3800B0();
    *(_OWORD *)&v17[v27[9]] = v47;
    LOBYTE(v47) = 6;
    uint64_t v33 = (uint64_t)v45;
    sub_25B380070();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v41, v42);
    sub_25B31A614(v33, v44);
    sub_25B31B354((uint64_t)v17, v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return sub_25B31B3B8((uint64_t)v17);
  }
}

uint64_t sub_25B31B2F4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25B31B354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B31B3B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReplicatorMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25B31B414()
{
  return sub_25B31B448(&qword_26B340FA0);
}

uint64_t sub_25B31B448(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25B37F640();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s18ReplicatorServices0A26ControlXPCServerParametersO4PairV14relationshipID10Foundation4UUIDVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_25B31B4F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorMessage.init(from:)(a1, a2);
}

uint64_t sub_25B31B50C(void *a1)
{
  return ReplicatorMessage.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B37F640();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    char v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    *char v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (char *)a1 + v11;
    uint64_t v16 = (char *)a2 + v11;
    swift_bridgeObjectRetain();
    v9((uint64_t *)v15, (uint64_t *)v16, v7);
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (uint64_t *)((char *)a1 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    BOOL v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    swift_bridgeObjectRetain();
    sub_25B2E2B14(v25, v26);
    *uint64_t v23 = v25;
    v23[1] = v26;
    uint64_t v27 = a3[10];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v7))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v28, (uint64_t *)v29, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorMessage(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  swift_bridgeObjectRelease();
  v8(a1 + a2[6], v4);
  swift_bridgeObjectRelease();
  sub_25B2CA2D8(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v6 = a1 + a2[10];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

uint64_t initializeWithCopy for ReplicatorMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v9);
  char v12 = (void *)(a2 + v9);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a1 + v10;
  uint64_t v15 = a2 + v10;
  swift_bridgeObjectRetain();
  v8(v14, v15, v6);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  swift_bridgeObjectRetain();
  sub_25B2E2B14(v24, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v28, 1, v6))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v27, (uint64_t)v28, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v15 = a3[9];
  uint64_t v16 = (uint64_t *)&a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_25B2E2B14(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  uint64_t *v16 = v18;
  v16[1] = v19;
  sub_25B2CA2D8(v20, v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  unint64_t v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v18) = v25(&a1[v22], 1, v6);
  int v26 = v25(v24, 1, v6);
  if (!v18)
  {
    if (!v26)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

char *initializeWithTake for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v8(&a1[v9], &a2[v9], v6);
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v20 = *(void *)&a1[v19];
  unint64_t v21 = *(void *)&a1[v19 + 8];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  sub_25B2CA2D8(v20, v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  unint64_t v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v26 = v25(&a1[v22], 1, v6);
  int v27 = v25(v24, 1, v6);
  if (!v26)
  {
    if (!v27)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v24, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B31C06C);
}

uint64_t sub_25B31C06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 40);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B31C1B4);
}

uint64_t sub_25B31C1B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25B37F640();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_25B31C2E8()
{
  sub_25B37F640();
  if (v0 <= 0x3F)
  {
    sub_25B316BC4();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for ReplicatorMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B31C530);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.CodingKeys()
{
  return &type metadata for ReplicatorMessage.CodingKeys;
}

unint64_t sub_25B31C56C()
{
  unint64_t result = qword_26A4EBD20;
  if (!qword_26A4EBD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD20);
  }
  return result;
}

unint64_t sub_25B31C5C4()
{
  unint64_t result = qword_26A4EBD28;
  if (!qword_26A4EBD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD28);
  }
  return result;
}

unint64_t sub_25B31C61C()
{
  unint64_t result = qword_26A4EBD30;
  if (!qword_26A4EBD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD30);
  }
  return result;
}

uint64_t sub_25B31C670(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000025B38B180 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000044496F54)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void static ReplicatorControlServiceDefinition.domain.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000025B38A580;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000025B38A5A0;
}

unint64_t static ReplicatorControlServiceDefinition.serviceName.getter()
{
  return 0xD00000000000001CLL;
}

void sub_25B31C9D0(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000025B38A580;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000025B38A5A0;
}

unint64_t sub_25B31CA08()
{
  return 0xD00000000000001CLL;
}

ReplicatorServices::ReplicatorControlServiceError::Code_optional __swiftcall ReplicatorControlServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (ReplicatorServices::ReplicatorControlServiceError::Code_optional)rawValue;
}

uint64_t ReplicatorControlServiceError.Code.rawValue.getter()
{
  return *v0;
}

ReplicatorServices::ReplicatorControlServiceError::Code_optional sub_25B31CA40(Swift::Int *a1)
{
  return ReplicatorControlServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static ReplicatorControlServiceError.errorDomain.getter()
{
  return 0xD00000000000002DLL;
}

unsigned char *ReplicatorControlServiceError.init(code:underlyingError:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = a2;
  return result;
}

uint64_t ReplicatorControlServiceError.errorCode.getter()
{
  return *v0;
}

unint64_t ReplicatorControlServiceError.errorUserInfo.getter()
{
  if (*(void *)(v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4ECA20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B3819A0;
    *(void *)(inited + 32) = sub_25B37F9A0();
    *(void *)(inited + 40) = v2;
    swift_getErrorValue();
    *(void *)(inited + 72) = v6;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_2);
    return sub_25B36AD10(inited);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    return sub_25B36AD10(v5);
  }
}

unint64_t sub_25B31CB70()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_25B31CB8C()
{
  return *v0;
}

unint64_t sub_25B31CB94()
{
  if (*(void *)(v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4ECA20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B3819A0;
    *(void *)(inited + 32) = sub_25B37F9A0();
    *(void *)(inited + 40) = v2;
    swift_getErrorValue();
    *(void *)(inited + 72) = v6;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_2);
    return sub_25B36AD10(inited);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    return sub_25B36AD10(v5);
  }
}

uint64_t sub_25B31CC88(uint64_t a1)
{
  unint64_t v2 = sub_25B325478();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25B31CCC4(uint64_t a1)
{
  unint64_t v2 = sub_25B325478();
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t (*ReplicatorControlXPCServerParameters.Pair.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31CD30()
{
  return 1;
}

uint64_t sub_25B31CD40()
{
  return 0x6E6F6974616C6572;
}

void sub_25B31CD68(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_25B31CD74(uint64_t a1)
{
  unint64_t v2 = sub_25B31CE28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31CDB0(uint64_t a1)
{
  unint64_t v2 = sub_25B31CE28();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.Pair.encode(to:)(void *a1)
{
  return sub_25B31EA54(a1, &qword_26A4EBD38, (void (*)(void))sub_25B31CE28);
}

unint64_t sub_25B31CE28()
{
  unint64_t result = qword_26A4EBD40;
  if (!qword_26A4EBD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD40);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.Pair.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_25B37F640();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBD48);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorControlXPCServerParameters.Pair(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31CE28();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_25B31D628((uint64_t)v11, v15, type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.Pair(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF38);
}

uint64_t sub_25B31D130(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B31D178@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.Pair.init(from:)(a1, a2);
}

uint64_t sub_25B31D190(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B31EF30(a1, a2, a3, &qword_26A4EBD38, (void (*)(void))sub_25B31CE28);
}

uint64_t sub_25B31D1CC(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBE60, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
}

uint64_t sub_25B31D200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, &qword_26A4EC0D0, (unint64_t *)&unk_26A4ECCC0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
}

uint64_t (*ReplicatorControlXPCServerParameters.Unpair.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31D26C(uint64_t a1)
{
  unint64_t v2 = sub_25B31D320();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31D2A8(uint64_t a1)
{
  unint64_t v2 = sub_25B31D320();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.Unpair.encode(to:)(void *a1)
{
  return sub_25B31EA54(a1, &qword_26A4EBD50, (void (*)(void))sub_25B31D320);
}

unint64_t sub_25B31D320()
{
  unint64_t result = qword_26A4EBD58;
  if (!qword_26A4EBD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD58);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.Unpair.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_25B37F640();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBD60);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorControlXPCServerParameters.Unpair(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31D320();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_25B31D628((uint64_t)v11, v15, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.Unpair(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF48);
}

uint64_t sub_25B31D628(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B31D690@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.Unpair.init(from:)(a1, a2);
}

uint64_t sub_25B31D6A8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B31EF30(a1, a2, a3, &qword_26A4EBD50, (void (*)(void))sub_25B31D320);
}

uint64_t sub_25B31D6E4(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBE70, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
}

uint64_t sub_25B31D718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, &qword_26A4EC0C8, (unint64_t *)&unk_26A4ECCB0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
}

uint64_t (*ReplicatorControlXPCServerParameters.Unavailable.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31D784(uint64_t a1)
{
  unint64_t v2 = sub_25B31D838();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31D7C0(uint64_t a1)
{
  unint64_t v2 = sub_25B31D838();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.Unavailable.encode(to:)(void *a1)
{
  return sub_25B31EA54(a1, &qword_26A4EBD68, (void (*)(void))sub_25B31D838);
}

unint64_t sub_25B31D838()
{
  unint64_t result = qword_26A4EBD70;
  if (!qword_26A4EBD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD70);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.Unavailable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_25B37F640();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBD78);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31D838();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_25B31D628((uint64_t)v11, v15, type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF58);
}

uint64_t sub_25B31DB40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.Unavailable.init(from:)(a1, a2);
}

uint64_t sub_25B31DB58(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B31EF30(a1, a2, a3, &qword_26A4EBD68, (void (*)(void))sub_25B31D838);
}

uint64_t sub_25B31DB94(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBE80, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
}

uint64_t sub_25B31DBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, &qword_26A4EC0C0, (unint64_t *)&unk_26A4ECCA0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.enabled.getter()
{
  return *v0;
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.enabled.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*ReplicatorControlXPCServerParameters.SetEnabled.enabled.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31DC3C()
{
  return 0x64656C62616E65;
}

uint64_t sub_25B31DC58(uint64_t a1)
{
  unint64_t v2 = sub_25B31DD0C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31DC94(uint64_t a1)
{
  unint64_t v2 = sub_25B31DD0C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.encode(to:)(void *a1)
{
  return sub_25B3204E8(a1, &qword_26A4EB368, (void (*)(void))sub_25B31DD0C);
}

unint64_t sub_25B31DD0C()
{
  unint64_t result = qword_26B340B08;
  if (!qword_26B340B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340B08);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25B3206B8(a1, (uint64_t *)&unk_26A4EB4D8, (void (*)(void))sub_25B31DD0C, a2);
}

uint64_t sub_25B31DD9C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.SetEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B31DDB4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B320870(a1, a2, a3, &qword_26A4EB368, (void (*)(void))sub_25B31DD0C);
}

uint64_t sub_25B31DDF0(uint64_t a1, uint64_t a2)
{
  return sub_25B3209C8(a1, a2, (void (*)(void))sub_25B321A30);
}

uint64_t sub_25B31DE08(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320AA4(a1, a2, a3, a4, (void (*)(void))sub_25B3219DC);
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.allowListEnabled.getter()
{
  return *v0;
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowListEnabled.allowListEnabled.modify())()
{
  return nullsub_1;
}

unint64_t sub_25B31DE50()
{
  return 0xD000000000000010;
}

uint64_t sub_25B31DE6C(uint64_t a1)
{
  unint64_t v2 = sub_25B31DF20();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31DEA8(uint64_t a1)
{
  unint64_t v2 = sub_25B31DF20();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.encode(to:)(void *a1)
{
  return sub_25B3204E8(a1, &qword_26A4EBD80, (void (*)(void))sub_25B31DF20);
}

unint64_t sub_25B31DF20()
{
  unint64_t result = qword_26A4EBD88;
  if (!qword_26A4EBD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBD88);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25B3206B8(a1, &qword_26A4EBD90, (void (*)(void))sub_25B31DF20, a2);
}

uint64_t sub_25B31DFB0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowListEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B31DFC8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B320870(a1, a2, a3, &qword_26A4EBD80, (void (*)(void))sub_25B31DF20);
}

uint64_t sub_25B31E004(uint64_t a1, uint64_t a2)
{
  return sub_25B3209C8(a1, a2, (void (*)(void))sub_25B321B6C);
}

uint64_t sub_25B31E01C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320AA4(a1, a2, a3, a4, (void (*)(void))sub_25B321B18);
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowListID.allowListID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31E064()
{
  return 0x73694C776F6C6C61;
}

uint64_t sub_25B31E084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73694C776F6C6C61 && a2 == 0xEB00000000444974)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B31E134(uint64_t a1)
{
  unint64_t v2 = sub_25B31E1E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31E170(uint64_t a1)
{
  unint64_t v2 = sub_25B31E1E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.AllowListID.encode(to:)(void *a1)
{
  return sub_25B31EA54(a1, &qword_26A4EBD98, (void (*)(void))sub_25B31E1E8);
}

unint64_t sub_25B31E1E8()
{
  unint64_t result = qword_26A4EBDA0;
  if (!qword_26A4EBDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBDA0);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowListID.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_25B37F640();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBDA8);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31E1E8();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_25B31D628((uint64_t)v11, v15, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF68);
}

uint64_t sub_25B31E4F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowListID.init(from:)(a1, a2);
}

uint64_t sub_25B31E508(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B31EF30(a1, a2, a3, &qword_26A4EBD98, (void (*)(void))sub_25B31E1E8);
}

uint64_t sub_25B31E544(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBEA8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
}

uint64_t sub_25B31E578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, &qword_26A4EC0B8, (unint64_t *)&unk_26A4ECC90, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.allowList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowList.allowList.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31E608()
{
  return 0x73694C776F6C6C61;
}

uint64_t sub_25B31E628(uint64_t a1)
{
  unint64_t v2 = sub_25B31E6DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31E664(uint64_t a1)
{
  unint64_t v2 = sub_25B31E6DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.encode(to:)(void *a1)
{
  return sub_25B320CEC(a1, &qword_26A4EBDB0, (uint64_t)sub_25B31E6DC);
}

unint64_t sub_25B31E6DC()
{
  unint64_t result = qword_26A4EBDB8;
  if (!qword_26A4EBDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBDB8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25B320F10(a1, &qword_26A4EBDC8, (void (*)(void))sub_25B31E6DC, a2);
}

uint64_t sub_25B31E76C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4EBB30);
    sub_25B31D130(a2, MEMORY[0x263F07508]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B31E800@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowList.init(from:)(a1, a2);
}

uint64_t sub_25B31E818(void *a1)
{
  return ReplicatorControlXPCServerParameters.AllowList.encode(to:)(a1);
}

uint64_t sub_25B31E830(uint64_t a1, uint64_t a2)
{
  return sub_25B321114(a1, a2, (void (*)(void))sub_25B321D54);
}

uint64_t _s18ReplicatorServices0A26ControlXPCServerParametersO4PairV14relationshipID10Foundation4UUIDVvs_0(uint64_t a1)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*ReplicatorControlXPCServerParameters.GetPushToken.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B31E8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F6974616C6572 && a2 == 0xEE00444970696873)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B31E9A0(uint64_t a1)
{
  unint64_t v2 = sub_25B31EBD4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31E9DC(uint64_t a1)
{
  unint64_t v2 = sub_25B31EBD4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerParameters.GetPushToken.encode(to:)(void *a1)
{
  return sub_25B31EA54(a1, &qword_26A4EBDD8, (void (*)(void))sub_25B31EBD4);
}

uint64_t sub_25B31EA54(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802C0();
  sub_25B37F640();
  sub_25B31D130(&qword_26A4EB370, MEMORY[0x263F07508]);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_25B31EBD4()
{
  unint64_t result = qword_26A4EBDE0;
  if (!qword_26A4EBDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBDE0);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.GetPushToken.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = sub_25B37F640();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBDE8);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PushToken = type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken(0);
  MEMORY[0x270FA5388](PushToken - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31EBD4();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_25B31D628((uint64_t)v11, v15, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF78);
}

uint64_t sub_25B31EEDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.GetPushToken.init(from:)(a1, a2);
}

uint64_t sub_25B31EEF4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B31EF30(a1, a2, a3, &qword_26A4EBDD8, (void (*)(void))sub_25B31EBD4);
}

uint64_t sub_25B31EF30(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  sub_25B3802C0();
  sub_25B37F640();
  sub_25B31D130(&qword_26A4EB370, MEMORY[0x263F07508]);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_25B31F0B0(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBED0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
}

uint64_t sub_25B31F0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, (uint64_t *)&unk_26A4ECC70, &qword_26A4EBEC8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.enabled.getter()
{
  return *v0;
}

ReplicatorServices::ReplicatorControlXPCServerResponse::GetEnabled __swiftcall ReplicatorControlXPCServerResponse.GetEnabled.init(enabled:)(ReplicatorServices::ReplicatorControlXPCServerResponse::GetEnabled enabled)
{
  v1->enabled = enabled.enabled;
  return enabled;
}

uint64_t sub_25B31F138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B31F1D0(uint64_t a1)
{
  unint64_t v2 = sub_25B31F284();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31F20C(uint64_t a1)
{
  unint64_t v2 = sub_25B31F284();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.encode(to:)(void *a1)
{
  return sub_25B3204E8(a1, &qword_26A4EB520, (void (*)(void))sub_25B31F284);
}

unint64_t sub_25B31F284()
{
  unint64_t result = qword_26B340AE8;
  if (!qword_26B340AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AE8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25B3206B8(a1, &qword_26A4EB360, (void (*)(void))sub_25B31F284, a2);
}

uint64_t sub_25B31F314@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B31F32C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B320870(a1, a2, a3, &qword_26A4EB520, (void (*)(void))sub_25B31F284);
}

uint64_t sub_25B31F368(uint64_t a1, uint64_t a2)
{
  return sub_25B3209C8(a1, a2, (void (*)(void))sub_25B321F3C);
}

uint64_t sub_25B31F380(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320AA4(a1, a2, a3, a4, (void (*)(void))sub_25B321EE8);
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.devices.getter()
{
  return swift_bridgeObjectRetain();
}

ReplicatorServices::ReplicatorControlXPCServerResponse::GetDevices __swiftcall ReplicatorControlXPCServerResponse.GetDevices.init(devices:)(ReplicatorServices::ReplicatorControlXPCServerResponse::GetDevices devices)
{
  v1->devices._rawValue = devices.devices._rawValue;
  return devices;
}

uint64_t sub_25B31F3B0()
{
  return sub_25B380260();
}

uint64_t sub_25B31F3D8()
{
  return 0x73656369766564;
}

uint64_t sub_25B31F3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B31F488(uint64_t a1)
{
  unint64_t v2 = sub_25B31F68C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31F4C4(uint64_t a1)
{
  unint64_t v2 = sub_25B31F68C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB518);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31F68C();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B31F6E0((unint64_t *)&qword_26A4EB4A0, &qword_26A4EB3C0);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_25B31F68C()
{
  unint64_t result = qword_26B340AC0;
  if (!qword_26B340AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AC0);
  }
  return result;
}

uint64_t sub_25B31F6E0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3416E0);
    sub_25B31D130(a2, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB358);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31F68C();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
    sub_25B31F6E0((unint64_t *)&qword_26B3411C0, &qword_26B341030);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B31F920@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetDevices.init(from:)(a1, a2);
}

uint64_t sub_25B31F938(void *a1)
{
  return ReplicatorControlXPCServerResponse.GetDevices.encode(to:)(a1);
}

uint64_t sub_25B31F950(uint64_t a1, uint64_t a2)
{
  return sub_25B321114(a1, a2, (void (*)(void))sub_25B322078);
}

uint64_t ReplicatorControlXPCServerResponse.GetLocalDevice.localDevice.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2C9E68(v1, a1);
}

uint64_t ReplicatorControlXPCServerResponse.GetLocalDevice.init(localDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B31D628(a1, a2, type metadata accessor for ReplicatorDevice);
}

uint64_t sub_25B31F9B0()
{
  return 0x7665446C61636F6CLL;
}

uint64_t sub_25B31F9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7665446C61636F6CLL && a2 == 0xEB00000000656369)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B31FA80(uint64_t a1)
{
  unint64_t v2 = sub_25B31FC6C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B31FABC(uint64_t a1)
{
  unint64_t v2 = sub_25B31FC6C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetLocalDevice.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBDF0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31FC6C();
  sub_25B3802C0();
  type metadata accessor for ReplicatorDevice(0);
  sub_25B31D130(&qword_26A4EB3C0, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_25B31FC6C()
{
  unint64_t result = qword_26A4EBDF8;
  if (!qword_26A4EBDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBDF8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetLocalDevice.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBE00);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t LocalDevice = type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice(0);
  MEMORY[0x270FA5388](LocalDevice - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31FC6C();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B31D130(&qword_26B341030, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_25B31D628(v15, (uint64_t)v11, type metadata accessor for ReplicatorDevice);
    sub_25B31D628((uint64_t)v11, v13, type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26A4EBF88);
}

uint64_t sub_25B31FF48(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25B31FF80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetLocalDevice.init(from:)(a1, a2);
}

uint64_t sub_25B31FF98(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBDF0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B31FC6C();
  sub_25B3802C0();
  type metadata accessor for ReplicatorDevice(0);
  sub_25B31D130(&qword_26A4EB3C0, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B32010C(uint64_t a1, uint64_t a2)
{
  return sub_25B320140(a1, a2, &qword_26A4EBEE8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
}

uint64_t sub_25B320140(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B31D130(a3, a4);
  uint64_t v6 = sub_25B37F420();
  unint64_t v8 = v7;
  uint64_t v9 = sub_25B37F560();
  sub_25B2CA2D8(v6, v8);
  swift_release();
  return v9;
}

uint64_t sub_25B320218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320254(a1, a2, a3, a4, (uint64_t *)&unk_26A4ECC60, &qword_26A4EBEE0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
}

uint64_t sub_25B320254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t v19 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v14 = sub_25B37F570();
  unint64_t v16 = v15;
  sub_25B31D130(a6, a7);
  sub_25B37F3E0();
  uint64_t v17 = v19;
  sub_25B2E344C(v19, a5);
  sub_25B2CA2D8(v14, v16);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v13, 0, 1, a3);
  return sub_25B2E31F0((uint64_t)v13, v17, a5);
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.allowListEnabled.getter()
{
  return *v0;
}

uint64_t sub_25B320408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B3253F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25B320434(uint64_t a1)
{
  unint64_t v2 = sub_25B320628();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B320470(uint64_t a1)
{
  unint64_t v2 = sub_25B320628();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.encode(to:)(void *a1)
{
  return sub_25B3204E8(a1, &qword_26A4EBE08, (void (*)(void))sub_25B320628);
}

uint64_t sub_25B3204E8(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v10 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  sub_25B3802C0();
  sub_25B380150();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_25B320628()
{
  unint64_t result = qword_26A4EBE10;
  if (!qword_26A4EBE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE10);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25B3206B8(a1, &qword_26A4EBE18, (void (*)(void))sub_25B320628, a2);
}

uint64_t sub_25B3206B8@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v13 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802B0();
  if (!v4)
  {
    char v10 = sub_25B3800A0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *uint64_t v13 = v10 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32081C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetAllowListEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B320834(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B320870(a1, a2, a3, &qword_26A4EBE08, (void (*)(void))sub_25B320628);
}

uint64_t sub_25B320870(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v12 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  sub_25B3802C0();
  sub_25B380150();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_25B3209B0(uint64_t a1, uint64_t a2)
{
  return sub_25B3209C8(a1, a2, (void (*)(void))sub_25B322260);
}

uint64_t sub_25B3209C8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  uint64_t v7 = sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  return v7;
}

uint64_t sub_25B320A8C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B320AA4(a1, a2, a3, a4, (void (*)(void))sub_25B32220C);
}

uint64_t sub_25B320AA4(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v7 = sub_25B37F570();
  unint64_t v9 = v8;
  a5();
  sub_25B37F3E0();
  sub_25B2CA2D8(v7, v9);
  uint64_t result = swift_release();
  *a2 = v11;
  return result;
}

uint64_t sub_25B320B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73694C776F6C6C61 && a2 == 0xE900000000000074)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B320C38(uint64_t a1)
{
  unint64_t v2 = sub_25B320E80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B320C74(uint64_t a1)
{
  unint64_t v2 = sub_25B320E80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowList.encode(to:)(void *a1)
{
  return sub_25B320CEC(a1, &qword_26A4EBE20, (uint64_t)sub_25B320E80);
}

uint64_t sub_25B320CEC(void *a1, uint64_t *a2, uint64_t a3)
{
  v11[0] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ((void (*)(void))v11[0])();
  sub_25B3802C0();
  v11[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
  sub_25B31E76C(&qword_26A4EBDC0, &qword_26A4EB370);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_25B320E80()
{
  unint64_t result = qword_26A4EBE28;
  if (!qword_26A4EBE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE28);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowList.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25B320F10(a1, &qword_26A4EBE30, (void (*)(void))sub_25B320E80, a2);
}

uint64_t sub_25B320F10@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t v12 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802B0();
  if (!v4)
  {
    char v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
    sub_25B31E76C(&qword_26A4EBDD0, (unint64_t *)&unk_26B340D00);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v7);
    *char v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B3210CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetAllowList.init(from:)(a1, a2);
}

uint64_t sub_25B3210E4(void *a1)
{
  return ReplicatorControlXPCServerResponse.GetAllowList.encode(to:)(a1);
}

uint64_t sub_25B3210FC(uint64_t a1, uint64_t a2)
{
  return sub_25B321114(a1, a2, (void (*)(void))sub_25B32239C);
}

uint64_t sub_25B321114(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  uint64_t v7 = sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.pushToken.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_25B2E2B14(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.init(pushToken:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_25B321220()
{
  return sub_25B380290();
}

uint64_t sub_25B321264()
{
  return sub_25B380290();
}

uint64_t sub_25B3212A4()
{
  return 0x656B6F5468737570;
}

uint64_t sub_25B3212C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656B6F5468737570 && a2 == 0xE90000000000006ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B321364(uint64_t a1)
{
  unint64_t v2 = sub_25B321528();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B3213A0(uint64_t a1)
{
  unint64_t v2 = sub_25B321528();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBE38);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B321528();
  sub_25B3802C0();
  v10[0] = v8;
  v10[1] = v7;
  sub_25B318D3C();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_25B321528()
{
  unint64_t result = qword_26A4EBE40;
  if (!qword_26A4EBE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE40);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBE48);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B321528();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B318CE8();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_25B3216EC()
{
  unint64_t result = qword_26A4EBE50;
  if (!qword_26A4EBE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE50);
  }
  return result;
}

unint64_t sub_25B321744()
{
  unint64_t result = qword_26A4EBE58;
  if (!qword_26A4EBE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE58);
  }
  return result;
}

uint64_t sub_25B321798(void *a1)
{
  a1[1] = sub_25B31D130((unint64_t *)&unk_26A4ECCC0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
  a1[2] = sub_25B31D130(&qword_26A4EBE60, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
  uint64_t result = sub_25B31D130(&qword_26A4EBE68, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
  a1[3] = result;
  return result;
}

uint64_t sub_25B321844(void *a1)
{
  a1[1] = sub_25B31D130((unint64_t *)&unk_26A4ECCB0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  a1[2] = sub_25B31D130(&qword_26A4EBE70, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  uint64_t result = sub_25B31D130(&qword_26A4EBE78, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  a1[3] = result;
  return result;
}

uint64_t sub_25B3218F0(void *a1)
{
  a1[1] = sub_25B31D130((unint64_t *)&unk_26A4ECCA0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  a1[2] = sub_25B31D130(&qword_26A4EBE80, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  uint64_t result = sub_25B31D130(&qword_26A4EBE88, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  a1[3] = result;
  return result;
}

uint64_t sub_25B32199C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B3219DC, (uint64_t (*)(void))sub_25B321A30, (uint64_t (*)(void))sub_25B321A84);
}

unint64_t sub_25B3219DC()
{
  unint64_t result = qword_26A4EB3B0;
  if (!qword_26A4EB3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3B0);
  }
  return result;
}

unint64_t sub_25B321A30()
{
  unint64_t result = qword_26B340B20;
  if (!qword_26B340B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340B20);
  }
  return result;
}

unint64_t sub_25B321A84()
{
  unint64_t result = qword_26A4EB3B8;
  if (!qword_26A4EB3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3B8);
  }
  return result;
}

uint64_t sub_25B321AD8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B321B18, (uint64_t (*)(void))sub_25B321B6C, (uint64_t (*)(void))sub_25B321BC0);
}

unint64_t sub_25B321B18()
{
  unint64_t result = qword_26A4EBE90;
  if (!qword_26A4EBE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE90);
  }
  return result;
}

unint64_t sub_25B321B6C()
{
  unint64_t result = qword_26A4EBE98;
  if (!qword_26A4EBE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBE98);
  }
  return result;
}

unint64_t sub_25B321BC0()
{
  unint64_t result = qword_26A4EBEA0;
  if (!qword_26A4EBEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBEA0);
  }
  return result;
}

uint64_t sub_25B321C14(void *a1)
{
  a1[1] = sub_25B31D130((unint64_t *)&unk_26A4ECC90, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
  a1[2] = sub_25B31D130(&qword_26A4EBEA8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
  uint64_t result = sub_25B31D130(&qword_26A4EBEB0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
  a1[3] = result;
  return result;
}

uint64_t sub_25B321CC0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B321D00, (uint64_t (*)(void))sub_25B321D54, (uint64_t (*)(void))sub_25B321DA8);
}

unint64_t sub_25B321D00()
{
  unint64_t result = qword_26A4ECC80;
  if (!qword_26A4ECC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4ECC80);
  }
  return result;
}

unint64_t sub_25B321D54()
{
  unint64_t result = qword_26A4EBEB8;
  if (!qword_26A4EBEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBEB8);
  }
  return result;
}

unint64_t sub_25B321DA8()
{
  unint64_t result = qword_26A4EBEC0;
  if (!qword_26A4EBEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBEC0);
  }
  return result;
}

uint64_t sub_25B321DFC(void *a1)
{
  a1[1] = sub_25B31D130(&qword_26A4EBEC8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  a1[2] = sub_25B31D130(&qword_26A4EBED0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  uint64_t result = sub_25B31D130(&qword_26A4EBED8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  a1[3] = result;
  return result;
}

uint64_t sub_25B321EA8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B321EE8, (uint64_t (*)(void))sub_25B321F3C, (uint64_t (*)(void))sub_25B321F90);
}

unint64_t sub_25B321EE8()
{
  unint64_t result = qword_26B340B00;
  if (!qword_26B340B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340B00);
  }
  return result;
}

unint64_t sub_25B321F3C()
{
  unint64_t result = qword_26A4EB398;
  if (!qword_26A4EB398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB398);
  }
  return result;
}

unint64_t sub_25B321F90()
{
  unint64_t result = qword_26A4EB3A0;
  if (!qword_26A4EB3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3A0);
  }
  return result;
}

uint64_t sub_25B321FE4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B322024, (uint64_t (*)(void))sub_25B322078, (uint64_t (*)(void))sub_25B3220CC);
}

unint64_t sub_25B322024()
{
  unint64_t result = qword_26B340AE0;
  if (!qword_26B340AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AE0);
  }
  return result;
}

unint64_t sub_25B322078()
{
  unint64_t result = qword_26A4EB388;
  if (!qword_26A4EB388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB388);
  }
  return result;
}

unint64_t sub_25B3220CC()
{
  unint64_t result = qword_26A4EB390;
  if (!qword_26A4EB390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB390);
  }
  return result;
}

uint64_t sub_25B322120(void *a1)
{
  a1[1] = sub_25B31D130(&qword_26A4EBEE0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
  a1[2] = sub_25B31D130(&qword_26A4EBEE8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
  uint64_t result = sub_25B31D130(&qword_26A4EBEF0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice);
  a1[3] = result;
  return result;
}

uint64_t sub_25B3221CC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B32220C, (uint64_t (*)(void))sub_25B322260, (uint64_t (*)(void))sub_25B3222B4);
}

unint64_t sub_25B32220C()
{
  unint64_t result = qword_26A4EBEF8;
  if (!qword_26A4EBEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBEF8);
  }
  return result;
}

unint64_t sub_25B322260()
{
  unint64_t result = qword_26A4EBF00;
  if (!qword_26A4EBF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF00);
  }
  return result;
}

unint64_t sub_25B3222B4()
{
  unint64_t result = qword_26A4EBF08;
  if (!qword_26A4EBF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF08);
  }
  return result;
}

uint64_t sub_25B322308(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B322348, (uint64_t (*)(void))sub_25B32239C, (uint64_t (*)(void))sub_25B3223F0);
}

unint64_t sub_25B322348()
{
  unint64_t result = qword_26A4ECC50;
  if (!qword_26A4ECC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4ECC50);
  }
  return result;
}

unint64_t sub_25B32239C()
{
  unint64_t result = qword_26A4EBF10;
  if (!qword_26A4EBF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF10);
  }
  return result;
}

unint64_t sub_25B3223F0()
{
  unint64_t result = qword_26A4EBF18;
  if (!qword_26A4EBF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF18);
  }
  return result;
}

uint64_t sub_25B322444@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetPushToken.init(from:)(a1, a2);
}

uint64_t sub_25B32245C(void *a1)
{
  return ReplicatorControlXPCServerResponse.GetPushToken.encode(to:)(a1);
}

uint64_t sub_25B322474(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B3224B4(a1, a2, a3, (uint64_t (*)(void))sub_25B322508, (uint64_t (*)(void))sub_25B32255C, (uint64_t (*)(void))sub_25B3225B0);
}

uint64_t sub_25B3224B4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_25B322508()
{
  unint64_t result = qword_26A4EBF20;
  if (!qword_26A4EBF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF20);
  }
  return result;
}

unint64_t sub_25B32255C()
{
  unint64_t result = qword_26A4EBF28;
  if (!qword_26A4EBF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF28);
  }
  return result;
}

unint64_t sub_25B3225B0()
{
  unint64_t result = qword_26A4EBF30;
  if (!qword_26A4EBF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF30);
  }
  return result;
}

uint64_t sub_25B322604()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B32255C();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceDefinition()
{
  return &type metadata for ReplicatorControlServiceDefinition;
}

uint64_t initializeBufferWithCopyOfBuffer for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  id v4 = v3;
  *(void *)(a1 + 8) = v3;
  return a1;
}

void destroy for ReplicatorControlServiceError(uint64_t a1)
{
}

uint64_t assignWithCopy for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  id v5 = v4;
  *(void *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlServiceError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlServiceError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceError()
{
  return &type metadata for ReplicatorControlServiceError;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorControlServiceError.Code(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B322934);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceError.Code()
{
  return &type metadata for ReplicatorControlServiceError.Code;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters()
{
  return &type metadata for ReplicatorControlXPCServerParameters;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Pair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B3229A8);
}

uint64_t sub_25B3229A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Pair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B3229D4);
}

uint64_t sub_25B3229D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

uint64_t sub_25B3229EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B323FB4(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unpair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B322A18);
}

uint64_t sub_25B322A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unpair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B322A44);
}

uint64_t sub_25B322A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unavailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B322A70);
}

uint64_t sub_25B322A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unavailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B322A9C);
}

uint64_t sub_25B322A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.SetEnabled()
{
  return &type metadata for ReplicatorControlXPCServerParameters.SetEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListEnabled()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.AllowListID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B322AF0);
}

uint64_t sub_25B322AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.AllowListID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B322B1C);
}

uint64_t sub_25B322B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowList()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowList;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwxx_0(uint64_t a1)
{
  uint64_t v2 = sub_25B37F640();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.GetPushToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B322DB8);
}

uint64_t sub_25B322DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.GetPushToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B322DE4);
}

uint64_t sub_25B322DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse()
{
  return &type metadata for ReplicatorControlXPCServerResponse;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetEnabled()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetDevices()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetDevices;
}

char *initializeBufferWithCopyOfBuffer for ReplicatorControlXPCServerResponse.GetLocalDevice(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unsigned int v6 = (int *)v4;
    uint64_t v7 = sub_25B37F640();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[v6[5]], &a2[v6[5]], v7);
    uint64_t v9 = v6[6];
    long long v10 = &a1[v9];
    char v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)long long v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
    a1[v6[8]] = a2[v6[8]];
    uint64_t v13 = v6[9];
    uint64_t v14 = &a1[v13];
    unint64_t v15 = &a2[v13];
    long long v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v16;
    *((_WORD *)v14 + 16) = *((_WORD *)v15 + 16);
    *(void *)&a1[v6[10]] = *(void *)&a2[v6[10]];
    *(void *)&a1[v6[11]] = *(void *)&a2[v6[11]];
    uint64_t v17 = v6[12];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 4, v20))
    {
      uint64_t v22 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v8(v18, v19, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 4, v20);
    }
    uint64_t v24 = v6[13];
    unint64_t v25 = &a1[v24];
    int v26 = &a2[v24];
    uint64_t v27 = sub_25B37F5D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    a1[v6[14]] = a2[v6[14]];
    uint64_t v28 = v6[15];
    uint64_t v29 = &a1[v28];
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v6[16];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = v6[17];
    uint64_t v37 = &a1[v36];
    uint64_t v38 = &a2[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *(void *)uint64_t v37 = *(void *)v38;
    *((void *)v37 + 1) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ReplicatorControlXPCServerResponse.GetLocalDevice(uint64_t a1)
{
  uint64_t v2 = sub_25B37F640();
  int v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = (int *)type metadata accessor for ReplicatorDevice(0);
  v3(a1 + v4[5], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + v4[12];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 4, v6)) {
    v3(v5, v2);
  }
  uint64_t v7 = a1 + v4[13];
  uint64_t v8 = sub_25B37F5D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ReplicatorControlXPCServerResponse.GetLocalDevice(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for ReplicatorDevice(0);
  v5(&a1[v6[5]], &a2[v6[5]], v4);
  uint64_t v7 = v6[6];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = *((void *)v9 + 1);
  *(void *)uint64_t v8 = *(void *)v9;
  *((void *)v8 + 1) = v10;
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  a1[v6[8]] = a2[v6[8]];
  uint64_t v11 = v6[9];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_WORD *)v12 + 16) = *((_WORD *)v13 + 16);
  *(void *)&a1[v6[10]] = *(void *)&a2[v6[10]];
  *(void *)&a1[v6[11]] = *(void *)&a2[v6[11]];
  uint64_t v15 = v6[12];
  long long v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 4, v18))
  {
    uint64_t v20 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v5(v16, v17, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 4, v18);
  }
  uint64_t v21 = v6[13];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  a1[v6[14]] = a2[v6[14]];
  uint64_t v25 = v6[15];
  int v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)int v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  uint64_t v29 = v6[16];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = v6[17];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ReplicatorControlXPCServerResponse.GetLocalDevice(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v41 + 24);
  v5(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v42 = v5;
  uint64_t v43 = v4;
  v5(&a1[v6[5]], &a2[v6[5]], v4);
  uint64_t v7 = v6[6];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  *(void *)uint64_t v8 = *(void *)v9;
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = v6[7];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  a1[v6[8]] = a2[v6[8]];
  uint64_t v13 = v6[9];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v16 = *(_OWORD *)v15;
  long long v17 = *((_OWORD *)v15 + 1);
  *((_WORD *)v14 + 16) = *((_WORD *)v15 + 16);
  *(_OWORD *)long long v14 = v16;
  *((_OWORD *)v14 + 1) = v17;
  *(void *)&a1[v6[10]] = *(void *)&a2[v6[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v6[11]] = *(void *)&a2[v6[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v6[12];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 4, v21);
  int v25 = v23(v20, 4, v21);
  if (!v24)
  {
    if (!v25)
    {
      v42(v19, v20, v43);
      goto LABEL_7;
    }
    sub_25B2E344C((uint64_t)v19, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v19, v20, v43);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 4, v21);
LABEL_7:
  uint64_t v27 = v6[13];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(v28, v29, v30);
  a1[v6[14]] = a2[v6[14]];
  uint64_t v31 = v6[15];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v6[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v6[17];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ReplicatorControlXPCServerResponse.GetLocalDevice(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for ReplicatorDevice(0);
  v5(&a1[v6[5]], &a2[v6[5]], v4);
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  a1[v6[8]] = a2[v6[8]];
  uint64_t v7 = v6[9];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  long long v10 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + 1) = v10;
  *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
  *(void *)&a1[v6[10]] = *(void *)&a2[v6[10]];
  *(void *)&a1[v6[11]] = *(void *)&a2[v6[11]];
  uint64_t v11 = v6[12];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 4, v14))
  {
    uint64_t v16 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v5(v12, v13, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 4, v14);
  }
  uint64_t v17 = v6[13];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  a1[v6[14]] = a2[v6[14]];
  *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  *(_OWORD *)&a1[v6[17]] = *(_OWORD *)&a2[v6[17]];
  return a1;
}

char *assignWithTake for ReplicatorControlXPCServerResponse.GetLocalDevice(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v45 + 40);
  v5(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v46 = v4;
  long long v47 = v5;
  v5(&a1[v6[5]], &a2[v6[5]], v4);
  uint64_t v7 = v6[6];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (uint64_t *)&a2[v7];
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *(void *)uint64_t v8 = v11;
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  a1[v6[8]] = a2[v6[8]];
  uint64_t v12 = v6[9];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *((_WORD *)v13 + 16) = *((_WORD *)v14 + 16);
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *(void *)&a1[v6[10]] = *(void *)&a2[v6[10]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v6[11]] = *(void *)&a2[v6[11]];
  swift_bridgeObjectRelease();
  uint64_t v16 = v6[12];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 4, v19);
  int v23 = v21(v18, 4, v19);
  if (!v22)
  {
    if (!v23)
    {
      v47(v17, v18, v46);
      goto LABEL_7;
    }
    sub_25B2E344C((uint64_t)v17, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    uint64_t v24 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v17, v18, v46);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 4, v19);
LABEL_7:
  uint64_t v25 = v6[13];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  a1[v6[14]] = a2[v6[14]];
  uint64_t v29 = v6[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v6[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (uint64_t *)&a2[v34];
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = v6[17];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = (uint64_t *)&a2[v39];
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetLocalDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B323E74);
}

uint64_t sub_25B323E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for ReplicatorDevice);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetLocalDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B323F10);
}

uint64_t sub_25B323F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for ReplicatorDevice);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(a1, a2, a2, v7);
}

uint64_t sub_25B323F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B323FB4(a1, a2, a3, type metadata accessor for ReplicatorDevice);
}

uint64_t sub_25B323FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientEnabled(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s18ReplicatorServices36ReplicatorControlXPCServerParametersO10SetEnabledVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B3241B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowListEnabled()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowList()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowList;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_25B2E2B14(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t a1)
{
  return sub_25B2CA2D8(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_25B2E2B14(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_25B2CA2D8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_25B2CA2D8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetPushToken()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetPushToken;
}

uint64_t sub_25B324384()
{
  return 0;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetLocalDevice.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowList.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.Unavailable.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.Unpair.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.RelationshipState.MigratingCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s18ReplicatorServices34ReplicatorControlXPCServerResponseO12GetPushTokenV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25B324548);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.Pair.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys;
}

unint64_t sub_25B324584()
{
  unint64_t result = qword_26A4EBF98;
  if (!qword_26A4EBF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBF98);
  }
  return result;
}

unint64_t sub_25B3245DC()
{
  unint64_t result = qword_26A4EBFA0;
  if (!qword_26A4EBFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFA0);
  }
  return result;
}

unint64_t sub_25B324634()
{
  unint64_t result = qword_26A4EBFA8;
  if (!qword_26A4EBFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFA8);
  }
  return result;
}

unint64_t sub_25B32468C()
{
  unint64_t result = qword_26A4EBFB0;
  if (!qword_26A4EBFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFB0);
  }
  return result;
}

unint64_t sub_25B3246E4()
{
  unint64_t result = qword_26A4EBFB8;
  if (!qword_26A4EBFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFB8);
  }
  return result;
}

unint64_t sub_25B32473C()
{
  unint64_t result = qword_26A4EBFC0;
  if (!qword_26A4EBFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFC0);
  }
  return result;
}

unint64_t sub_25B324794()
{
  unint64_t result = qword_26A4EBFC8;
  if (!qword_26A4EBFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFC8);
  }
  return result;
}

unint64_t sub_25B3247EC()
{
  unint64_t result = qword_26A4EBFD0;
  if (!qword_26A4EBFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFD0);
  }
  return result;
}

unint64_t sub_25B324844()
{
  unint64_t result = qword_26A4EBFD8;
  if (!qword_26A4EBFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFD8);
  }
  return result;
}

unint64_t sub_25B32489C()
{
  unint64_t result = qword_26A4EBFE0;
  if (!qword_26A4EBFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFE0);
  }
  return result;
}

unint64_t sub_25B3248F4()
{
  unint64_t result = qword_26A4EBFE8;
  if (!qword_26A4EBFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFE8);
  }
  return result;
}

unint64_t sub_25B32494C()
{
  unint64_t result = qword_26A4EBFF0;
  if (!qword_26A4EBFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFF0);
  }
  return result;
}

unint64_t sub_25B3249A4()
{
  unint64_t result = qword_26A4EBFF8;
  if (!qword_26A4EBFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EBFF8);
  }
  return result;
}

unint64_t sub_25B3249FC()
{
  unint64_t result = qword_26A4EC000;
  if (!qword_26A4EC000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC000);
  }
  return result;
}

unint64_t sub_25B324A54()
{
  unint64_t result = qword_26A4EC008;
  if (!qword_26A4EC008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC008);
  }
  return result;
}

unint64_t sub_25B324AAC()
{
  unint64_t result = qword_26A4EC010;
  if (!qword_26A4EC010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC010);
  }
  return result;
}

unint64_t sub_25B324B04()
{
  unint64_t result = qword_26A4EC018;
  if (!qword_26A4EC018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC018);
  }
  return result;
}

unint64_t sub_25B324B5C()
{
  unint64_t result = qword_26A4EC020;
  if (!qword_26A4EC020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC020);
  }
  return result;
}

unint64_t sub_25B324BB4()
{
  unint64_t result = qword_26A4EC028;
  if (!qword_26A4EC028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC028);
  }
  return result;
}

unint64_t sub_25B324C0C()
{
  unint64_t result = qword_26A4EC030;
  if (!qword_26A4EC030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC030);
  }
  return result;
}

unint64_t sub_25B324C64()
{
  unint64_t result = qword_26A4EC038;
  if (!qword_26A4EC038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC038);
  }
  return result;
}

unint64_t sub_25B324CBC()
{
  unint64_t result = qword_26A4EC040;
  if (!qword_26A4EC040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC040);
  }
  return result;
}

unint64_t sub_25B324D14()
{
  unint64_t result = qword_26B340AD0;
  if (!qword_26B340AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AD0);
  }
  return result;
}

unint64_t sub_25B324D6C()
{
  unint64_t result = qword_26B340AC8;
  if (!qword_26B340AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AC8);
  }
  return result;
}

unint64_t sub_25B324DC4()
{
  unint64_t result = qword_26B340AF8;
  if (!qword_26B340AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AF8);
  }
  return result;
}

unint64_t sub_25B324E1C()
{
  unint64_t result = qword_26B340AF0;
  if (!qword_26B340AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340AF0);
  }
  return result;
}

unint64_t sub_25B324E74()
{
  unint64_t result = qword_26A4EC048;
  if (!qword_26A4EC048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC048);
  }
  return result;
}

unint64_t sub_25B324ECC()
{
  unint64_t result = qword_26A4EC050;
  if (!qword_26A4EC050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC050);
  }
  return result;
}

unint64_t sub_25B324F24()
{
  unint64_t result = qword_26A4EC058;
  if (!qword_26A4EC058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC058);
  }
  return result;
}

unint64_t sub_25B324F7C()
{
  unint64_t result = qword_26A4EC060;
  if (!qword_26A4EC060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC060);
  }
  return result;
}

unint64_t sub_25B324FD4()
{
  unint64_t result = qword_26A4EC068;
  if (!qword_26A4EC068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC068);
  }
  return result;
}

unint64_t sub_25B32502C()
{
  unint64_t result = qword_26A4EC070;
  if (!qword_26A4EC070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC070);
  }
  return result;
}

unint64_t sub_25B325084()
{
  unint64_t result = qword_26A4EC078;
  if (!qword_26A4EC078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC078);
  }
  return result;
}

unint64_t sub_25B3250DC()
{
  unint64_t result = qword_26A4EC080;
  if (!qword_26A4EC080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC080);
  }
  return result;
}

unint64_t sub_25B325134()
{
  unint64_t result = qword_26B340B18;
  if (!qword_26B340B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340B18);
  }
  return result;
}

unint64_t sub_25B32518C()
{
  unint64_t result = qword_26B340B10;
  if (!qword_26B340B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340B10);
  }
  return result;
}

unint64_t sub_25B3251E4()
{
  unint64_t result = qword_26A4EC088;
  if (!qword_26A4EC088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC088);
  }
  return result;
}

unint64_t sub_25B32523C()
{
  unint64_t result = qword_26A4EC090;
  if (!qword_26A4EC090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC090);
  }
  return result;
}

unint64_t sub_25B325294()
{
  unint64_t result = qword_26A4EC098;
  if (!qword_26A4EC098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC098);
  }
  return result;
}

unint64_t sub_25B3252EC()
{
  unint64_t result = qword_26A4EC0A0;
  if (!qword_26A4EC0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC0A0);
  }
  return result;
}

unint64_t sub_25B325344()
{
  unint64_t result = qword_26A4EC0A8;
  if (!qword_26A4EC0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC0A8);
  }
  return result;
}

unint64_t sub_25B32539C()
{
  unint64_t result = qword_26A4EC0B0;
  if (!qword_26A4EC0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC0B0);
  }
  return result;
}

uint64_t sub_25B3253F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000025B38B1F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_25B325478()
{
  unint64_t result = qword_26A4EC0D8;
  if (!qword_26A4EC0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC0D8);
  }
  return result;
}

unint64_t static Notifications.daemonStartup.getter()
{
  return 0xD000000000000023;
}

unint64_t static Notifications.devicesChanged.getter()
{
  return 0xD000000000000024;
}

unint64_t static Notifications.enabledStateChanged.getter()
{
  return 0xD000000000000029;
}

ValueMetadata *type metadata accessor for Notifications()
{
  return &type metadata for Notifications;
}

uint64_t dispatch thunk of ReplicatorClientEnabling.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorClientEnabling.setEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unsigned char *ReplicationServiceError.init(code:underlyingError:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = a2;
  return result;
}

id ReplicationXPCServerParametersExtendedAttribute.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)objc_allocWithZone(v5);
  uint64_t v11 = &v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = (uint64_t *)&v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)&v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_25B381FA0;
  swift_beginAccess();
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  uint64_t v13 = v10;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v14 = *v12;
  unint64_t v15 = v12[1];
  *uint64_t v12 = a3;
  v12[1] = a4;
  sub_25B2E2B14(a3, a4);
  sub_25B2CA2C4(v14, v15);

  v18.receiver = v13;
  v18.super_class = v5;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  sub_25B2CA2D8(a3, a4);
  return v16;
}

id ReplicationXPCServerParametersRecordValue.__allocating_init(version:data:fileHandle:extendedAttributes:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_25B330CAC(a1, a2, a3, a4, a5);

  sub_25B2CA2C4(a2, a3);
  return v12;
}

id ReplicationXPCServerParametersRecord.__allocating_init(id:version:values:expiration:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  id v11 = (char *)objc_allocWithZone(v6);
  uint64_t v12 = (uint64_t)&v11[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
  uint64_t v13 = sub_25B37F5D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  sub_25B330DF8(a1, (uint64_t)&v11[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  uint64_t v14 = &v11[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version];
  uint64_t v15 = sub_25B37F640();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, a2, v15);
  *(void *)&v11[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = a3;
  swift_beginAccess();
  uint64_t v17 = v11;
  sub_25B318EDC(a4, v12);
  swift_endAccess();
  *(void *)&v17[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options] = a5;

  v22.receiver = v17;
  v22.super_class = v6;
  id v18 = objc_msgSendSuper2(&v22, sel_init);
  sub_25B2E344C(a4, &qword_26B340F80);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, v15);
  sub_25B330E84(a1, type metadata accessor for ReplicatorRecord.ID);
  return v18;
}

id ReplicationXPCServerParametersAddRecords.__allocating_init(parameters:records:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  char v6 = *(unsigned char *)(a1 + 8);
  BOOL v7 = &v5[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
  *(void *)BOOL v7 = *(void *)a1;
  v7[8] = v6;
  *(void *)&v5[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

void static ReplicationServiceDefinition.domain.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000025B38A580;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000025B38A5A0;
}

unint64_t static ReplicationServiceDefinition.serviceName.getter()
{
  return 0xD000000000000020;
}

unint64_t sub_25B3259E4()
{
  return 0xD000000000000020;
}

ReplicatorServices::ReplicationServiceError::Code_optional __swiftcall ReplicationServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (ReplicatorServices::ReplicationServiceError::Code_optional)rawValue;
}

uint64_t ReplicationServiceError.Code.rawValue.getter()
{
  return *v0;
}

ReplicatorServices::ReplicationServiceError::Code_optional sub_25B325A1C(Swift::Int *a1)
{
  return ReplicationServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static ReplicationServiceError.errorDomain.getter()
{
  return 0xD000000000000027;
}

uint64_t ReplicationServiceError.errorCode.getter()
{
  return *v0;
}

unint64_t ReplicationServiceError.errorUserInfo.getter()
{
  if (*(void *)(v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4ECA20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B3819A0;
    *(void *)(inited + 32) = sub_25B37F9A0();
    *(void *)(inited + 40) = v2;
    swift_getErrorValue();
    *(void *)(inited + 72) = v6;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_2);
    return sub_25B36AD10(inited);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    return sub_25B36AD10(v5);
  }
}

unint64_t sub_25B325B3C()
{
  return 0xD000000000000027;
}

uint64_t sub_25B325B58(uint64_t a1)
{
  unint64_t v2 = sub_25B339368();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25B325B94(uint64_t a1)
{
  unint64_t v2 = sub_25B339368();
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t static ReplicationXPCServerParametersRecord.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersRecord.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersRecord.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B325C24(&OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id, (uint64_t)type metadata accessor for ReplicatorRecord.ID, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B330DF8, a1);
}

uint64_t sub_25B325C24@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = v4 + *a1;
  swift_beginAccess();
  return a3(v8, a4, a2);
}

uint64_t ReplicationXPCServerParametersRecord.id.setter(uint64_t a1)
{
  return sub_25B325FD4(a1, &OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id, (uint64_t)type metadata accessor for ReplicatorRecord.ID, (void (*)(uint64_t, uint64_t, uint64_t))sub_25B331D90);
}

uint64_t (*ReplicationXPCServerParametersRecord.id.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  uint64_t v4 = sub_25B37F640();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicationXPCServerParametersRecord.version.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ReplicationXPCServerParametersRecord.version.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersRecord.values.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersRecord.values.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.expiration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B325C24(&OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration, (uint64_t)&qword_26B340F80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B2E2FE0, a1);
}

uint64_t ReplicationXPCServerParametersRecord.expiration.setter(uint64_t a1)
{
  return sub_25B325FD4(a1, &OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration, (uint64_t)&qword_26B340F80, (void (*)(uint64_t, uint64_t, uint64_t))sub_25B31964C);
}

uint64_t sub_25B325FD4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = v4 + *a2;
  swift_beginAccess();
  a4(a1, v8, a3);
  return swift_endAccess();
}

uint64_t (*ReplicationXPCServerParametersRecord.expiration.modify())()
{
  return j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.options.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ReplicationXPCServerParametersRecord.options.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParametersRecord.options.modify())()
{
  return j_j__swift_endAccess;
}

id ReplicationXPCServerParametersRecord.init(id:version:values:expiration:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = (uint64_t)&v6[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
  uint64_t v12 = sub_25B37F5D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_25B330DF8(a1, (uint64_t)&v6[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  uint64_t v13 = &v6[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version];
  uint64_t v14 = sub_25B37F640();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a2, v14);
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = a3;
  swift_beginAccess();
  uint64_t v16 = v6;
  sub_25B318EDC(a4, v11);
  swift_endAccess();
  *(void *)&v16[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options] = a5;

  v21.receiver = v16;
  v21.super_class = ObjectType;
  id v17 = objc_msgSendSuper2(&v21, sel_init);
  sub_25B2E344C(a4, &qword_26B340F80);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  sub_25B330E84(a1, type metadata accessor for ReplicatorRecord.ID);
  return v17;
}

uint64_t ReplicationXPCServerParametersRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[11] = 0;
  v17[12] = 0xE000000000000000;
  sub_25B37FE70();
  swift_bridgeObjectRelease();
  uint64_t v18 = 540697705;
  unint64_t v19 = 0xE400000000000000;
  uint64_t v12 = v0 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  sub_25B330DF8(v12, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  ReplicatorRecord.ID.description.getter();
  sub_25B37FA40();
  swift_bridgeObjectRelease();
  sub_25B330E84((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  sub_25B37FA40();
  uint64_t v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  sub_25B331B8C((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
  sub_25B380190();
  sub_25B37FA40();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_25B37FA40();
  uint64_t v14 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  swift_beginAccess();
  sub_25B2E2FE0(v14, (uint64_t)v4, &qword_26B340F80);
  sub_25B37F9E0();
  sub_25B37FA40();
  swift_bridgeObjectRelease();
  sub_25B37FA40();
  uint64_t v15 = (void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options);
  swift_beginAccess();
  v17[1] = *v15;
  sub_25B380190();
  sub_25B37FA40();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t ReplicationXPCServerParametersRecord.size.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (v2 >> 62) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v3; uint64_t v3 = sub_25B37FF90())
  {
    if (v3 < 1)
    {
      __break(1u);
      JUMPOUT(0x25B326984);
    }
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (v2 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x2611615C0](v4, v2)
         : (char *)*(id *)(v2 + 8 * v4 + 32);
      uint64_t v7 = v6;
      uint64_t v8 = (uint64_t *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
      swift_beginAccess();
      unint64_t v9 = v8[1];
      if (v9 >> 60 != 15) {
        break;
      }

LABEL_6:
      if (v3 == ++v4) {
        goto LABEL_29;
      }
    }
    uint64_t v10 = *v8;
    switch(v9 >> 62)
    {
      case 1uLL:

        if (__OFSUB__(HIDWORD(v10), v10)) {
          goto LABEL_25;
        }
        BOOL v11 = __OFADD__(v5, HIDWORD(v10) - (int)v10);
        v5 += HIDWORD(v10) - (int)v10;
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_24;
      case 2uLL:
        uint64_t v14 = v10 + 16;
        uint64_t v13 = *(void *)(v10 + 16);
        uint64_t v12 = *(void *)(v14 + 8);

        uint64_t v15 = v12 - v13;
        if (__OFSUB__(v12, v13)) {
          goto LABEL_26;
        }
        BOOL v11 = __OFADD__(v5, v15);
        v5 += v15;
        if (!v11) {
          goto LABEL_6;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        break;
      case 3uLL:
        sub_25B2CA2C4(v10, v9);

        goto LABEL_6;
      default:
        sub_25B2CA2C4(v10, v9);

        BOOL v11 = __OFADD__(v5, BYTE6(v9));
        v5 += BYTE6(v9);
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_24;
    }
LABEL_27:
    swift_bridgeObjectRetain_n();
  }
  uint64_t v5 = 0;
LABEL_29:
  swift_bridgeObjectRelease_n();
  return v5;
}

void ReplicationXPCServerParametersRecord.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v45 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B37F5D0();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v1;
  uint64_t v14 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  uint64_t v15 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B330DF8(v14 + *(int *)(v15 + 28), (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
  uint64_t v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    sub_25B37F5F0();
    uint64_t v16 = v17;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  unint64_t v19 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeObject_forKey_, v18, v19);

  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  objc_super v21 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeObject_forKey_, v20, v21);

  swift_bridgeObjectRetain();
  objc_super v22 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  int v23 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);

  if (v16)
  {
    uint64_t v24 = (void *)sub_25B37F970();
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)sub_25B37F970();
    objc_msgSend(a1, (SEL)&off_2654939C0 + 5, v24, v25);
  }
  uint64_t v26 = v44;
  uint64_t v27 = v44 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v27, v7);
  sub_25B37F5F0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v28 = (void *)sub_25B37F970();
  swift_bridgeObjectRelease();
  uint64_t v29 = (void *)sub_25B37F970();
  objc_msgSend(a1, (SEL)&off_2654939C0 + 5, v28, v29);

  swift_beginAccess();
  type metadata accessor for ReplicationXPCServerParametersRecordValue();
  swift_bridgeObjectRetain();
  uint64_t v30 = (void *)sub_25B37FAE0();
  swift_bridgeObjectRelease();
  uint64_t v31 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v30, v31);

  uint64_t v32 = v26 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  swift_beginAccess();
  uint64_t v33 = v32;
  uint64_t v34 = v45;
  sub_25B2E2FE0(v33, v45, &qword_26B340F80);
  uint64_t v36 = v46;
  uint64_t v35 = v47;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v34, 1, v47) == 1)
  {
    sub_25B2E344C(v34, &qword_26B340F80);
  }
  else
  {
    uint64_t v37 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v43, v34, v35);
    uint64_t v38 = (void *)sub_25B37F580();
    uint64_t v39 = (void *)sub_25B37F970();
    objc_msgSend(a1, (SEL)&off_2654939C0 + 5, v38, v39);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  }
  swift_beginAccess();
  uint64_t v40 = (void *)sub_25B3802A0();
  uint64_t v41 = (void *)sub_25B37F970();
  objc_msgSend(a1, (SEL)&off_2654939C0 + 5, v40, v41);
}

id ReplicationXPCServerParametersRecord.__allocating_init(bsxpcCoder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerParametersRecord.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerParametersRecord.init(bsxpcCoder:)(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v110 = (char *)v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v112);
  uint64_t v114 = (void *)((char *)v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v113 = (uint64_t)v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v115 = (uint64_t)v93 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v93 - v14;
  uint64_t v16 = sub_25B37F640();
  uint64_t v117 = *(void *)(v16 - 8);
  uint64_t v118 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v108 = (char *)v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  objc_super v21 = (char *)v93 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v116 = (char *)v93 - v22;
  uint64_t v23 = (uint64_t)v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  uint64_t v24 = sub_25B37F5D0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v111 = v25 + 56;
  v109(v23, 1, 1, v24);
  sub_25B3393BC(0, &qword_26B3409B8);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecordValue();
  uint64_t v27 = swift_getObjCClassFromMetadata();
  uint64_t v28 = v1;
  uint64_t v29 = (void *)sub_25B37F970();
  id v30 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v27, v29);

  if (!v30) {
    goto LABEL_10;
  }
  v124[0] = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B70);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B68);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_10;
  }
  id v105 = v13;
  uint64_t v31 = v122;
  uint64_t v32 = (void *)sub_25B37F970();
  id v33 = objc_msgSend(a1, sel_decodeStringForKey_, v32);

  if (!v33)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  uint64_t v106 = v31;
  uint64_t v107 = v23;
  uint64_t v103 = sub_25B37F9A0();
  uint64_t v35 = v34;

  uint64_t v36 = (void *)sub_25B37F970();
  id v37 = objc_msgSend(a1, sel_decodeStringForKey_, v36);

  if (!v37) {
    goto LABEL_16;
  }
  uint64_t v104 = v35;
  uint64_t v102 = sub_25B37F9A0();
  uint64_t v39 = v38;

  uint64_t v40 = (void *)sub_25B37F970();
  id v41 = objc_msgSend(a1, sel_decodeStringForKey_, v40);

  if (!v41)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v23 = v107;
    goto LABEL_11;
  }
  uint64_t v98 = sub_25B37F9A0();
  uint64_t v43 = v42;

  uint64_t v44 = (void *)sub_25B37F970();
  id v45 = objc_msgSend(a1, sel_decodeStringForKey_, v44);

  if (!v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  id v100 = a1;
  uint64_t v101 = v43;
  uint64_t v99 = v39;
  sub_25B37F9A0();

  sub_25B37F5E0();
  swift_bridgeObjectRelease();
  uint64_t v47 = v117;
  uint64_t v46 = v118;
  uint64_t v49 = (void *)(v117 + 48);
  char v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
  unsigned int v50 = v48(v15, 1, v118);
  uint64_t v23 = v107;
  if (v50 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_25B2E344C((uint64_t)v15, &qword_26B3414D0);
LABEL_11:
    sub_25B2E344C(v23, &qword_26B340F80);

    swift_deallocPartialClassInstance();
    return 0;
  }
  unint64_t v96 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v48;
  id v97 = v49;
  uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 32);
  uint64_t v95 = v47 + 32;
  unint64_t v94 = v53;
  v53((uint64_t)v116, v15, v46);
  sub_25B3393BC(0, (unint64_t *)&unk_26B340C90);
  uint64_t v54 = swift_getObjCClassFromMetadata();
  int64_t v55 = (void *)sub_25B37F970();
  id v56 = v100;
  id v57 = objc_msgSend(v100, sel_decodeObjectOfClass_forKey_, v54, v55);

  if (v57)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v122 = 0u;
    long long v123 = 0u;
  }
  uint64_t v58 = (uint64_t)v105;
  sub_25B2E31F0((uint64_t)&v122, (uint64_t)v124, &qword_26B3413D8);
  if (!v125)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25B2E344C((uint64_t)v124, &qword_26B3413D8);
LABEL_29:
    (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v118);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  id v105 = v121;
  id v59 = objc_msgSend(v121, sel_unsignedLongLongValue);
  uint64_t v60 = (void *)sub_25B37F970();
  id v61 = objc_msgSend(v56, sel_decodeStringForKey_, v60);

  if (v61 && (v93[1] = sub_25B37F9A0(), uint64_t v63 = v62, v61, v63))
  {
    sub_25B37F5E0();
    swift_bridgeObjectRelease();
    uint64_t v64 = v118;
    if (v96(v58, 1, v118) == 1)
    {
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v64);
      sub_25B2E344C(v58, &qword_26B3414D0);
      goto LABEL_11;
    }
    id v97 = v59;
    uint64_t v66 = v58;
    uint64_t v67 = v94;
    v94((uint64_t)v21, (char *)v66, v64);
    v67(v115, v21, v64);
    uint64_t v65 = 0;
  }
  else
  {
    id v97 = v59;
    uint64_t v65 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v115, v65, 1, v118);
  sub_25B3393BC(0, &qword_26B340BA0);
  uint64_t v68 = swift_getObjCClassFromMetadata();
  uint64_t v69 = (void *)sub_25B37F970();
  id v70 = objc_msgSend(v56, sel_decodeObjectOfClass_forKey_, v68, v69);

  if (v70)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v122 = 0u;
    long long v123 = 0u;
  }
  uint64_t v71 = v112;
  sub_25B2E31F0((uint64_t)&v122, (uint64_t)v124, &qword_26B3413D8);
  if (!v125)
  {
    sub_25B2E344C((uint64_t)v124, &qword_26B3413D8);
    goto LABEL_39;
  }
  if (!swift_dynamicCast())
  {
LABEL_39:
    unint64_t v96 = 0;
    goto LABEL_40;
  }
  unint64_t v96 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v121;
LABEL_40:
  uint64_t v73 = v117;
  uint64_t v72 = v118;
  uint64_t v74 = v113;
  sub_25B330DF8(v115, v113, type metadata accessor for ReplicatorRecord.ID.Ownership);
  uint64_t v75 = v114;
  uint64_t v76 = v103;
  uint64_t v77 = v104;
  *uint64_t v114 = v103;
  v75[1] = v77;
  uint64_t v78 = v99;
  v75[2] = v102;
  v75[3] = v78;
  uint64_t v79 = v101;
  v75[4] = v98;
  v75[5] = v79;
  uint64_t v80 = v76;
  sub_25B330DF8(v74, (uint64_t)v75 + *(int *)(v71 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
  swift_bridgeObjectRetain();
  if (sub_25B37FA20() >= 51)
  {
    v124[0] = v80;
    v124[1] = v77;
    unsigned int v81 = v108;
    sub_25B37F6C0();
    uint64_t v82 = sub_25B37F5F0();
    uint64_t v84 = v83;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v81, v72);
    swift_bridgeObjectRelease();
    uint64_t v77 = v84;
    uint64_t v80 = v82;
    uint64_t v71 = v112;
  }
  uint64_t v85 = (uint64_t)v110;
  sub_25B330E84(v113, type metadata accessor for ReplicatorRecord.ID.Ownership);
  uint64_t v86 = (uint64_t)v114;
  int64_t v87 = (uint64_t *)((char *)v114 + *(int *)(v71 + 32));
  *int64_t v87 = v80;
  v87[1] = v77;
  sub_25B331E6C(v86, (uint64_t)&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  *(void *)&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v106;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], v116, v72);
  uint64_t v88 = v96;
  if (v96)
  {
    sub_25B37F5B0();

    uint64_t v89 = 0;
    unint64_t v90 = v88;
    unint64_t v91 = (objc_class *)ObjectType;
    unint64_t v92 = v109;
  }
  else
  {
    uint64_t v89 = 1;
    unint64_t v91 = (objc_class *)ObjectType;
    unint64_t v92 = v109;
    unint64_t v90 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v105;
  }

  sub_25B330E84(v115, type metadata accessor for ReplicatorRecord.ID.Ownership);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v116, v72);
  v92(v85, v89, 1, v24);
  swift_beginAccess();
  sub_25B31964C(v85, v23, &qword_26B340F80);
  swift_endAccess();
  *(void *)&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options] = v97;

  v120.receiver = v28;
  v120.super_class = v91;
  id v51 = objc_msgSendSuper2(&v120, sel_init);
  swift_unknownObjectRelease();
  return v51;
}

id ReplicationXPCServerParametersRecord.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ReplicationXPCServerParametersRecord.init()()
{
}

uint64_t sub_25B328024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  return sub_25B330DF8(v3, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t static ReplicationXPCServerParametersExtendedAttribute.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersExtendedAttribute.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.name.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersExtendedAttribute.name.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.data.getter()
{
  return sub_25B3286E4(&OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.data.setter(uint64_t a1, uint64_t a2)
{
  return sub_25B328748(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
}

uint64_t (*ReplicationXPCServerParametersExtendedAttribute.data.modify())()
{
  return j_j__swift_endAccess;
}

id ReplicationXPCServerParametersExtendedAttribute.init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = &v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = (uint64_t *)&v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_25B381FA0;
  swift_beginAccess();
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  uint64_t v13 = v5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v14 = *v12;
  unint64_t v15 = v12[1];
  *uint64_t v12 = a3;
  v12[1] = a4;
  sub_25B2E2B14(a3, a4);
  sub_25B2CA2C4(v14, v15);

  v18.receiver = v13;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  sub_25B2CA2D8(a3, a4);
  return v16;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name;
  swift_beginAccess();
  if (*(void *)(v3 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)sub_25B37F970();
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)sub_25B37F970();
    objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);
  }
  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
  uint64_t result = swift_beginAccess();
  unint64_t v8 = v6[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v6;
    sub_25B2E2B14(v9, v8);
    uint64_t v10 = (void *)sub_25B37F560();
    uint64_t v11 = (void *)sub_25B37F970();
    objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

    return sub_25B2CA2C4(v9, v8);
  }
  return result;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.__allocating_init(bsxpcCoder:)(uint64_t a1)
{
  return sub_25B328CA4(a1, (uint64_t (*)(uint64_t))sub_25B330EE4);
}

id ReplicationXPCServerParametersExtendedAttribute.init(bsxpcCoder:)(void *a1)
{
  id v1 = sub_25B330EE4(a1);
  swift_unknownObjectRelease();
  return v1;
}

void ReplicationXPCServerParametersExtendedAttribute.init()()
{
}

uint64_t static ReplicationXPCServerParametersRecordValue.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersRecordValue.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersRecordValue.version.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ReplicationXPCServerParametersRecordValue.version.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParametersRecordValue.version.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecordValue.data.getter()
{
  return sub_25B3286E4(&OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
}

uint64_t sub_25B3286E4(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  sub_25B318B74(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t ReplicationXPCServerParametersRecordValue.data.setter(uint64_t a1, uint64_t a2)
{
  return sub_25B328748(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
}

uint64_t sub_25B328748(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  *uint64_t v6 = a1;
  v6[1] = a2;
  return sub_25B2CA2C4(v7, v8);
}

uint64_t (*ReplicationXPCServerParametersRecordValue.data.modify())()
{
  return j_j__swift_endAccess;
}

void *ReplicationXPCServerParametersRecordValue.fileHandle.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ReplicationXPCServerParametersRecordValue.fileHandle.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ReplicationXPCServerParametersRecordValue.fileHandle.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecordValue.extendedAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersRecordValue.extendedAttributes.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  *id v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersRecordValue.extendedAttributes.modify())()
{
  return j_j__swift_endAccess;
}

id ReplicationXPCServerParametersRecordValue.init(version:data:fileHandle:extendedAttributes:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  id v8 = sub_25B330CAC(a1, a2, a3, a4, a5);

  sub_25B2CA2C4(a2, a3);
  return v8;
}

void ReplicationXPCServerParametersRecordValue.encode(withBSXPCCoder:)(void *a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeUInt64_forKey_, v4, v5);

  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
  swift_beginAccess();
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    sub_25B2E2B14(v8, v7);
    uint64_t v9 = (void *)sub_25B37F560();
    uint64_t v10 = (void *)sub_25B37F970();
    objc_msgSend(a1, sel_encodeObject_forKey_, v9, v10);

    sub_25B2CA2C4(v8, v7);
  }
  uint64_t v11 = (id *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  if (*v11)
  {
    id v12 = *v11;
    uint64_t v13 = (void *)sub_25B37F970();
    objc_msgSend(a1, sel_encodeObject_forKey_, v12, v13);
  }
  uint64_t v14 = (void *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  if (*v14)
  {
    type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
    swift_bridgeObjectRetain();
    unint64_t v15 = (void *)sub_25B37FAE0();
    swift_bridgeObjectRelease();
    id v16 = (void *)sub_25B37F970();
    objc_msgSend(a1, sel_encodeCollection_forKey_, v15, v16);
  }
}

uint64_t ReplicationXPCServerParametersRecordValue.__allocating_init(bsxpcCoder:)(uint64_t a1)
{
  return sub_25B328CA4(a1, (uint64_t (*)(uint64_t))sub_25B3311DC);
}

uint64_t sub_25B328CA4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = a2(a1);
  swift_unknownObjectRelease();
  return v6;
}

id ReplicationXPCServerParametersRecordValue.init(bsxpcCoder:)(void *a1)
{
  id v1 = sub_25B3311DC(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_25B328D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  uint64_t v6 = a4(a3);
  swift_unknownObjectRelease();
  return v6;
}

void ReplicationXPCServerParametersRecordValue.init()()
{
}

uint64_t static ReplicationXPCServerParametersAddRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersAddRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersAddRecords.records.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersAddRecords.parameters.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters + 8);
  *(void *)a1 = *(void *)(v1
                            + OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

id ReplicationXPCServerParametersAddRecords.init(parameters:records:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v6 = *(unsigned char *)(a1 + 8);
  unint64_t v7 = &v2[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
  *(void *)unint64_t v7 = *(void *)a1;
  v7[8] = v6;
  *(void *)&v2[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

void ReplicationXPCServerParametersAddRecords.encode(withBSXPCCoder:)(void *a1)
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3315DC();
  uint64_t v2 = sub_25B37F420();
  unint64_t v4 = v3;
  id v5 = (void *)sub_25B37F560();
  sub_25B2CA2D8(v2, v4);
  swift_release();
  char v6 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  unint64_t v7 = (void *)sub_25B37FAE0();
  uint64_t v8 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v7, v8);
}

id ReplicationXPCServerParametersAddRecords.__allocating_init(bsxpcCoder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerParametersAddRecords.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerParametersAddRecords.init(bsxpcCoder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_25B3393BC(0, &qword_26B3409B8);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  uint64_t v5 = swift_getObjCClassFromMetadata();
  char v6 = v1;
  unint64_t v7 = (void *)sub_25B37F970();
  id v8 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v5, v7);

  if (v8
    && (v21[0] = v8,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B70),
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B58),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v9 = *(void *)&v20[0];
    sub_25B3393BC(0, (unint64_t *)&unk_26B340B90);
    uint64_t v10 = swift_getObjCClassFromMetadata();
    uint64_t v11 = (void *)sub_25B37F970();
    id v12 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v10, v11);

    if (v12)
    {
      sub_25B37FDA0();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_25B2E31F0((uint64_t)v20, (uint64_t)v21, &qword_26B3413D8);
    if (v21[3])
    {
      if (swift_dynamicCast())
      {
        char v15 = v19;
        id v16 = &v6[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
        *(void *)id v16 = v18;
        v16[8] = v15;
        *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = v9;

        v17.receiver = v6;
        v17.super_class = ObjectType;
        id v13 = objc_msgSendSuper2(&v17, sel_init);
        swift_unknownObjectRelease();
        return v13;
      }
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      sub_25B2E344C((uint64_t)v21, &qword_26B3413D8);
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  swift_deallocPartialClassInstance();
  return 0;
}

void ReplicationXPCServerParametersAddRecords.init()()
{
}

uint64_t (*ReplicationXPCServerParameters.RegisterClient.clientDescriptor.modify())()
{
  return nullsub_1;
}

unint64_t sub_25B329488()
{
  return 0xD000000000000010;
}

uint64_t sub_25B3294A4(uint64_t a1)
{
  unint64_t v2 = sub_25B331650();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B3294E0(uint64_t a1)
{
  unint64_t v2 = sub_25B331650();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.RegisterClient.encode(to:)(void *a1)
{
  return sub_25B32D90C(a1, (uint64_t *)&unk_26B3412B8, (void (*)(void))sub_25B331650);
}

uint64_t ReplicationXPCServerParameters.RegisterClient.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B32DAE0(a1, &qword_26A4EB500, (void (*)(void))sub_25B331650, a2);
}

uint64_t sub_25B329594@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.RegisterClient.init(from:)(a1, a2);
}

uint64_t sub_25B3295AC(void *a1)
{
  return ReplicationXPCServerParameters.RegisterClient.encode(to:)(a1);
}

uint64_t sub_25B3295C4(uint64_t a1, uint64_t a2)
{
  return sub_25B32DCC0(a1, a2, (void (*)(void))sub_25B3187FC);
}

uint64_t (*ReplicationXPCServerParameters.UnregisterClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B329608()
{
  return 0x4449746E65696C63;
}

uint64_t sub_25B329624(uint64_t a1)
{
  unint64_t v2 = sub_25B33174C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B329660(uint64_t a1)
{
  unint64_t v2 = sub_25B33174C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.UnregisterClient.encode(to:)(void *a1)
{
  return sub_25B329DF8(a1, &qword_26A4EC140, (void (*)(void))sub_25B33174C);
}

uint64_t ReplicationXPCServerParameters.UnregisterClient.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25B329F7C(a1, &qword_26A4EC150, (void (*)(void))sub_25B33174C, a2);
}

uint64_t sub_25B329714@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.UnregisterClient.init(from:)(a1, a2);
}

uint64_t sub_25B32972C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B32A150(a1, a2, a3, &qword_26A4EC140, (void (*)(void))sub_25B33174C);
}

uint64_t sub_25B329768(uint64_t a1, uint64_t a2)
{
  return sub_25B32A2B0(a1, a2, (void (*)(void))sub_25B318F44);
}

uint64_t (*ReplicationXPCServerParameters.GetClientEnabled.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B3297AC(uint64_t a1)
{
  unint64_t v2 = sub_25B3317A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B3297E8(uint64_t a1)
{
  unint64_t v2 = sub_25B3317A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetClientEnabled.encode(to:)(void *a1)
{
  return sub_25B329DF8(a1, &qword_26A4EC158, (void (*)(void))sub_25B3317A0);
}

uint64_t ReplicationXPCServerParameters.GetClientEnabled.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25B329F7C(a1, &qword_26A4EC168, (void (*)(void))sub_25B3317A0, a2);
}

uint64_t sub_25B32989C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetClientEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B3298B4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B32A150(a1, a2, a3, &qword_26A4EC158, (void (*)(void))sub_25B3317A0);
}

uint64_t sub_25B3298F0(uint64_t a1, uint64_t a2)
{
  return sub_25B32A2B0(a1, a2, (void (*)(void))sub_25B3194FC);
}

uint64_t ReplicationXPCServerParameters.EnableClient.clientID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicationXPCServerParameters.EnableClient.clientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.EnableClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32999C(uint64_t a1)
{
  unint64_t v2 = sub_25B3317F4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B3299D8(uint64_t a1)
{
  unint64_t v2 = sub_25B3317F4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.EnableClient.encode(to:)(void *a1)
{
  return sub_25B329DF8(a1, &qword_26A4EC170, (void (*)(void))sub_25B3317F4);
}

uint64_t ReplicationXPCServerParameters.EnableClient.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25B329F7C(a1, &qword_26A4EC180, (void (*)(void))sub_25B3317F4, a2);
}

uint64_t sub_25B329A8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.EnableClient.init(from:)(a1, a2);
}

uint64_t sub_25B329AA4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B32A150(a1, a2, a3, &qword_26A4EC170, (void (*)(void))sub_25B3317F4);
}

uint64_t sub_25B329AE0(uint64_t a1, uint64_t a2)
{
  return sub_25B32A2B0(a1, a2, (void (*)(void))sub_25B3195A4);
}

uint64_t (*ReplicationXPCServerParameters.DisableClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B329B24(uint64_t a1)
{
  unint64_t v2 = sub_25B331848();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B329B60(uint64_t a1)
{
  unint64_t v2 = sub_25B331848();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.DisableClient.encode(to:)(void *a1)
{
  return sub_25B329DF8(a1, &qword_26A4EC188, (void (*)(void))sub_25B331848);
}

uint64_t ReplicationXPCServerParameters.DisableClient.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25B329F7C(a1, (uint64_t *)&unk_26A4EC198, (void (*)(void))sub_25B331848, a2);
}

uint64_t sub_25B329C14@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.DisableClient.init(from:)(a1, a2);
}

uint64_t sub_25B329C2C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B32A150(a1, a2, a3, &qword_26A4EC188, (void (*)(void))sub_25B331848);
}

uint64_t sub_25B329C68(uint64_t a1, uint64_t a2)
{
  return sub_25B32A2B0(a1, a2, (void (*)(void))sub_25B3195F8);
}

uint64_t (*ReplicationXPCServerParameters.GetClientDescriptor.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B329CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B329D44(uint64_t a1)
{
  unint64_t v2 = sub_25B33189C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B329D80(uint64_t a1)
{
  unint64_t v2 = sub_25B33189C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetClientDescriptor.encode(to:)(void *a1)
{
  return sub_25B329DF8(a1, (uint64_t *)&unk_26B341350, (void (*)(void))sub_25B33189C);
}

uint64_t sub_25B329DF8(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v11 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11();
  sub_25B3802C0();
  sub_25B380140();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ReplicationXPCServerParameters.GetClientDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25B329F7C(a1, &qword_26A4EB560, (void (*)(void))sub_25B33189C, a2);
}

uint64_t sub_25B329F7C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802B0();
  if (!v4)
  {
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    uint64_t v12 = sub_25B380090();
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
    *uint64_t v11 = v12;
    v11[1] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32A0FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetClientDescriptor.init(from:)(a1, a2);
}

uint64_t sub_25B32A114(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B32A150(a1, a2, a3, (uint64_t *)&unk_26B341350, (void (*)(void))sub_25B33189C);
}

uint64_t sub_25B32A150(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v13 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13();
  sub_25B3802C0();
  sub_25B380140();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_25B32A298(uint64_t a1, uint64_t a2)
{
  return sub_25B32A2B0(a1, a2, (void (*)(void))sub_25B3190BC);
}

uint64_t sub_25B32A2B0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  uint64_t v7 = sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicationXPCServerParameters.AddRecords.destination.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.AddRecords.destination.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.AddRecords.destination.modify())()
{
  return nullsub_1;
}

void ReplicationXPCServerParameters.AddRecords.schedule.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *ReplicationXPCServerParameters.AddRecords.schedule.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.AddRecords.schedule.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32A418()
{
  if (*v0) {
    return 0x656C756465686373;
  }
  else {
    return 0x74616E6974736564;
  }
}

uint64_t sub_25B32A45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B338B60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B32A484(uint64_t a1)
{
  unint64_t v2 = sub_25B3318F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32A4C0(uint64_t a1)
{
  unint64_t v2 = sub_25B3318F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.AddRecords.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D78);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  int v11 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3318F0();
  sub_25B3802C0();
  uint64_t v15 = v8;
  char v14 = 0;
  sub_25B331944();
  sub_25B380160();
  if (!v2)
  {
    char v13 = v11;
    char v12 = 1;
    sub_25B331998();
    sub_25B380160();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.AddRecords.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB4E8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3318F0();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v12[15] = 0;
  sub_25B3319EC();
  sub_25B3800B0();
  uint64_t v9 = v13;
  v12[13] = 1;
  sub_25B331A40();
  swift_bridgeObjectRetain();
  sub_25B3800B0();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  char v10 = v12[14];
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B32A894@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.AddRecords.init(from:)(a1, a2);
}

uint64_t sub_25B32A8AC(void *a1)
{
  return ReplicationXPCServerParameters.AddRecords.encode(to:)(a1);
}

uint64_t sub_25B32A8C4()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3315DC();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.recordIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.recordIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.RemoveRecords.recordIDs.modify())()
{
  return nullsub_1;
}

uint64_t (*ReplicationXPCServerParameters.RemoveRecords.schedule.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32AA08()
{
  if (*v0) {
    return 0x656C756465686373;
  }
  else {
    return 0x444964726F636572;
  }
}

uint64_t sub_25B32AA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B338C6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B32AA70(uint64_t a1)
{
  unint64_t v2 = sub_25B331A94();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32AAAC(uint64_t a1)
{
  unint64_t v2 = sub_25B331A94();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340C10);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  int v11 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331A94();
  sub_25B3802C0();
  uint64_t v15 = v8;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  sub_25B331AE8();
  sub_25B380160();
  if (!v2)
  {
    char v13 = v11;
    char v12 = 1;
    sub_25B331998();
    sub_25B380160();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB6F8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331A94();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  v12[15] = 0;
  sub_25B331BD4();
  sub_25B3800B0();
  uint64_t v9 = v13;
  v12[13] = 1;
  sub_25B331A40();
  swift_bridgeObjectRetain();
  sub_25B3800B0();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  char v10 = v12[14];
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B32AE98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.RemoveRecords.init(from:)(a1, a2);
}

uint64_t sub_25B32AEB0(void *a1)
{
  return ReplicationXPCServerParameters.RemoveRecords.encode(to:)(a1);
}

uint64_t sub_25B32AEC8()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B318E88();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

uint64_t ReplicationXPCServerParameters.GetRecords.recordIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.GetRecords.recordIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.recordIDs.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchData.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchData.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.fetchData.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchFiles.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchFiles.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.fetchFiles.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.protocolVersion.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ReplicationXPCServerParameters.GetRecords.protocolVersion.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.protocolVersion.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32B088()
{
  uint64_t result = 0x444964726F636572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7461446863746566;
      break;
    case 2:
      uint64_t result = 0x6C69466863746566;
      break;
    case 3:
      uint64_t result = 0x6C6F636F746F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B32B138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B338D6C(a1, a2);
  *a3 = result;
  return result;
}

void sub_25B32B160(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_25B32B16C(uint64_t a1)
{
  unint64_t v2 = sub_25B331C78();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32B1A8(uint64_t a1)
{
  unint64_t v2 = sub_25B331C78();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetRecords.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8B0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  int v9 = *((unsigned __int8 *)v1 + 8);
  int v13 = *((unsigned __int8 *)v1 + 9);
  int v14 = v9;
  uint64_t v12 = v1[2];
  v11[1] = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331C78();
  sub_25B3802C0();
  uint64_t v19 = v8;
  char v18 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  sub_25B331AE8();
  sub_25B380160();
  if (!v2)
  {
    char v17 = 1;
    sub_25B380150();
    char v16 = 2;
    sub_25B380150();
    char v15 = 3;
    sub_25B380130();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.GetRecords.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB6F0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331C78();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  char v22 = 0;
  sub_25B331BD4();
  sub_25B3800B0();
  uint64_t v9 = v23;
  char v21 = 1;
  swift_bridgeObjectRetain();
  char v10 = sub_25B3800A0();
  char v20 = 2;
  int v18 = sub_25B3800A0();
  char v19 = 3;
  uint64_t v12 = sub_25B380080();
  HIDWORD(v17) = v10 & 1;
  char v13 = v18 & 1;
  int v14 = v8;
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = BYTE4(v17);
  *(unsigned char *)(a2 + 9) = v13;
  *(void *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 24) = v16 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B32B660@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.GetRecords.init(from:)(a1, a2);
}

uint64_t sub_25B32B678(void *a1)
{
  return ReplicationXPCServerParameters.GetRecords.encode(to:)(a1);
}

uint64_t sub_25B32B690()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B318AE0();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

uint64_t (*ReplicationXPCServerParameters.GetRecordVersions.clientDescriptors.modify())()
{
  return nullsub_1;
}

unint64_t sub_25B32B798()
{
  return 0xD000000000000011;
}

uint64_t sub_25B32B7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B338F74(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25B32B7E0(uint64_t a1)
{
  unint64_t v2 = sub_25B331CCC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32B81C(uint64_t a1)
{
  unint64_t v2 = sub_25B331CCC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetRecordVersions.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412C8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331CCC();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341700);
  sub_25B331D20(&qword_26B3411D0, (void (*)(void))sub_25B3316A4);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.GetRecordVersions.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB508);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331CCC();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341700);
    sub_25B331D20(&qword_26A4EB4B0, (void (*)(void))sub_25B3316F8);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32BB80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetRecordVersions.init(from:)(a1, a2);
}

uint64_t sub_25B32BB98(void *a1)
{
  return ReplicationXPCServerParameters.GetRecordVersions.encode(to:)(a1);
}

uint64_t sub_25B32BBB0(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B3185C0);
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.message.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.SendMessage.timeout.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ReplicationXPCServerParameters.SendMessage(0) + 20));
}

uint64_t ReplicationXPCServerParameters.SendMessage.timeout.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.timeout.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.SendMessage.retries.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ReplicationXPCServerParameters.SendMessage(0) + 24));
}

uint64_t ReplicationXPCServerParameters.SendMessage.retries.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.retries.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32BD6C()
{
  return *(void *)&aMessage_0[8 * *v0];
}

uint64_t sub_25B32BD84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B338FFC(a1, a2);
  *a3 = result;
  return result;
}

void sub_25B32BDAC(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_25B32BDB8(uint64_t a1)
{
  unint64_t v2 = sub_25B331E18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32BDF4(uint64_t a1)
{
  unint64_t v2 = sub_25B331E18();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.SendMessage.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1A8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331E18();
  sub_25B3802C0();
  v8[15] = 0;
  type metadata accessor for ReplicatorMessage();
  sub_25B331B8C((unint64_t *)&unk_26A4EB3C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
  sub_25B380160();
  if (!v1)
  {
    type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
    v8[14] = 1;
    sub_25B380100();
    v8[13] = 2;
    sub_25B380110();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.SendMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for ReplicatorMessage();
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1C0);
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = &v10[*(int *)(v8 + 28)];
  *(void *)int v11 = 0;
  v11[8] = 1;
  uint64_t v12 = &v10[*(int *)(v8 + 32)];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331E18();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v23;
  uint64_t v14 = (uint64_t)a1;
  char v29 = 0;
  sub_25B331B8C(&qword_26B3410C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
  uint64_t v15 = v25;
  sub_25B3800B0();
  sub_25B331E6C(v26, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
  char v28 = 1;
  *(void *)int v11 = sub_25B380050();
  v11[8] = v16 & 1;
  char v27 = 2;
  uint64_t v18 = sub_25B380060();
  char v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v15);
  *(void *)uint64_t v12 = v18;
  v12[8] = v20 & 1;
  sub_25B330DF8((uint64_t)v10, v22, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  __swift_destroy_boxed_opaque_existential_1(v14);
  return sub_25B330E84((uint64_t)v10, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_25B32C398@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.SendMessage.init(from:)(a1, a2);
}

uint64_t sub_25B32C3B0(void *a1)
{
  return ReplicationXPCServerParameters.SendMessage.encode(to:)(a1);
}

uint64_t sub_25B32C3C8(uint64_t a1, uint64_t a2)
{
  return sub_25B32F9C8(a1, a2, &qword_26A4EC280, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_25B32C3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B32FADC(a1, a2, a3, a4, (uint64_t *)&unk_26A4EC420, (unint64_t *)&unk_26A4ECC40, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t (*ReplicationXPCServerParameters.GetMessages.clientIDs.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32C460()
{
  return 0x4449746E65696C63;
}

uint64_t sub_25B32C47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4449746E65696C63 && a2 == 0xE900000000000073)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32C520(uint64_t a1)
{
  unint64_t v2 = sub_25B331ED4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32C55C(uint64_t a1)
{
  unint64_t v2 = sub_25B331ED4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetMessages.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340EC0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331ED4();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341710);
  sub_25B331F28(&qword_26B3411E8);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.GetMessages.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4EB4F0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331ED4();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B341710);
    sub_25B331F28(&qword_26A4EB4B8);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32C8A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetMessages.init(from:)(a1, a2);
}

uint64_t sub_25B32C8C0(void *a1)
{
  return ReplicationXPCServerParameters.GetMessages.encode(to:)(a1);
}

uint64_t sub_25B32C8D8(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B318FDC);
}

uint64_t (*ReplicationXPCServerParameters.GetClientDefinedRecordIDs.recordIDs.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32C91C()
{
  return 0x444964726F636572;
}

uint64_t sub_25B32C938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x444964726F636572 && a2 == 0xE900000000000073)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32C9DC(uint64_t a1)
{
  unint64_t v2 = sub_25B331F8C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32CA18(uint64_t a1)
{
  unint64_t v2 = sub_25B331F8C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerParameters.GetClientDefinedRecordIDs.encode(to:)(void *a1)
{
  return sub_25B32CA90(a1, &qword_26B340E80, (uint64_t)sub_25B331F8C);
}

uint64_t sub_25B32CA90(void *a1, uint64_t *a2, uint64_t a3)
{
  v11[0] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ((void (*)(void))v11[0])();
  sub_25B3802C0();
  v11[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  sub_25B331AE8();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ReplicationXPCServerParameters.GetClientDefinedRecordIDs.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25B32CC28(a1, (uint64_t *)&unk_26A4EB8E0, (void (*)(void))sub_25B331F8C, a2);
}

uint64_t sub_25B32CC28@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t v12 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802B0();
  if (!v4)
  {
    char v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
    sub_25B331BD4();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v7);
    *char v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32CDAC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetClientDefinedRecordIDs.init(from:)(a1, a2);
}

uint64_t sub_25B32CDC4(void *a1)
{
  return ReplicationXPCServerParameters.GetClientDefinedRecordIDs.encode(to:)(a1);
}

uint64_t sub_25B32CDDC(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B318668);
}

uint64_t (*ReplicationXPCServerResponse.GetRecordsVersions.recordVersions.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32CE20()
{
  return 0x655664726F636572;
}

uint64_t sub_25B32CE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x655664726F636572 && a2 == 0xEE00736E6F697372)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32CF00(uint64_t a1)
{
  unint64_t v2 = sub_25B331FE0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32CF3C(uint64_t a1)
{
  unint64_t v2 = sub_25B331FE0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetRecordsVersions.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB538);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331FE0();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3416D8);
  sub_25B332034();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetRecordsVersions.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3412B0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B331FE0();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B3416D8);
    sub_25B3320D8();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32D240@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetRecordsVersions.init(from:)(a1, a2);
}

uint64_t sub_25B32D258(void *a1)
{
  return ReplicationXPCServerResponse.GetRecordsVersions.encode(to:)(a1);
}

uint64_t sub_25B32D270(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B3333B0);
}

uint64_t ReplicationXPCServerResponse.GetDevices.devices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponse.GetDevices.devices.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetDevices.devices.modify())()
{
  return nullsub_1;
}

ReplicatorServices::ReplicationXPCServerResponse::GetDevices __swiftcall ReplicationXPCServerResponse.GetDevices.init(devices:)(ReplicatorServices::ReplicationXPCServerResponse::GetDevices devices)
{
  v1->devices._rawValue = devices.devices._rawValue;
  return devices;
}

uint64_t sub_25B32D2F0(uint64_t a1)
{
  unint64_t v2 = sub_25B33217C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32D32C(uint64_t a1)
{
  unint64_t v2 = sub_25B33217C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetDevices.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB528);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33217C();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B3321D0();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetDevices.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341290);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33217C();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
    sub_25B332274();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32D630@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetDevices.init(from:)(a1, a2);
}

uint64_t sub_25B32D648(void *a1)
{
  return ReplicationXPCServerResponse.GetDevices.encode(to:)(a1);
}

uint64_t sub_25B32D660(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B333498);
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO14RegisterClientV16clientDescriptorAA0gI0Vvg_0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v11 = v1[8];
  uint64_t v10 = v1[9];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v11;
  a1[9] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 _s18ReplicatorServices30ReplicationXPCServerParametersO14RegisterClientV16clientDescriptorAA0gI0Vvs_0(long long *a1)
{
  long long v7 = a1[1];
  long long v8 = *a1;
  long long v6 = a1[2];
  uint64_t v3 = *((void *)a1 + 6);
  uint64_t v4 = *((void *)a1 + 9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  *(_OWORD *)(v1 + 32) = v6;
  *(void *)(v1 + 48) = v3;
  __n128 result = *(__n128 *)((char *)a1 + 56);
  *(__n128 *)(v1 + 56) = result;
  *(void *)(v1 + 72) = v4;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientDescriptor.clientDescriptor.modify())()
{
  return nullsub_1;
}

void __swiftcall ReplicationXPCServerResponse.GetClientDescriptor.init(clientDescriptor:)(ReplicatorServices::ReplicationXPCServerResponse::GetClientDescriptor *__return_ptr retstr, ReplicatorServices::ClientDescriptor *clientDescriptor)
{
  Swift::String entitlement = clientDescriptor->entitlement;
  Swift::String messageNotificationName = clientDescriptor->messageNotificationName;
  uint64_t countAndFlagsBits = clientDescriptor->recordNotificationName._countAndFlagsBits;
  rawValue = clientDescriptor->messageDescriptors._rawValue;
  retstr->clientDescriptor.id = clientDescriptor->id;
  retstr->clientDescriptor.Swift::String entitlement = entitlement;
  retstr->clientDescriptor.Swift::String messageNotificationName = messageNotificationName;
  retstr->clientDescriptor.recordNotificationName._uint64_t countAndFlagsBits = countAndFlagsBits;
  *(_OWORD *)&retstr->clientDescriptor.recordNotificationName._object = *(_OWORD *)&clientDescriptor->recordNotificationName._object;
  retstr->clientDescriptor.messageDescriptors._rawValue = rawValue;
}

uint64_t sub_25B32D82C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B339154(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25B32D858(uint64_t a1)
{
  unint64_t v2 = sub_25B332318();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32D894(uint64_t a1)
{
  unint64_t v2 = sub_25B332318();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetClientDescriptor.encode(to:)(void *a1)
{
  return sub_25B32D90C(a1, qword_26A4EB568, (void (*)(void))sub_25B332318);
}

uint64_t sub_25B32D90C(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v17 = a3;
  uint64_t v4 = v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *v4;
  long long v14 = v4[1];
  long long v15 = v10;
  long long v13 = v4[2];
  uint64_t v11 = *((void *)v4 + 6);
  uint64_t v16 = *((void *)v4 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17();
  sub_25B3802C0();
  long long v18 = v15;
  long long v19 = v14;
  long long v20 = v13;
  uint64_t v21 = v11;
  long long v22 = *(long long *)((char *)v4 + 56);
  uint64_t v23 = v16;
  sub_25B3316A4();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ReplicationXPCServerResponse.GetClientDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B32DAE0(a1, &qword_26B341348, (void (*)(void))sub_25B332318, a2);
}

uint64_t sub_25B32DAE0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_25B3802B0();
  if (!v4)
  {
    uint64_t v10 = v18;
    sub_25B3316F8();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
    long long v11 = v20;
    long long v12 = v21;
    uint64_t v13 = v22;
    uint64_t v14 = v24;
    long long v15 = v23;
    *(_OWORD *)uint64_t v10 = v19;
    *(_OWORD *)(v10 + 16) = v11;
    *(_OWORD *)(v10 + 32) = v12;
    *(void *)(v10 + 48) = v13;
    *(_OWORD *)(v10 + 56) = v15;
    *(void *)(v10 + 72) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32DC78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.GetClientDescriptor.init(from:)(a1, a2);
}

uint64_t sub_25B32DC90(void *a1)
{
  return ReplicationXPCServerResponse.GetClientDescriptor.encode(to:)(a1);
}

uint64_t sub_25B32DCA8(uint64_t a1, uint64_t a2)
{
  return sub_25B32DCC0(a1, a2, (void (*)(void))sub_25B333580);
}

uint64_t sub_25B32DCC0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  uint64_t v7 = sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.internalIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.internalIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientDefinedRecordIDs.internalIDs.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.clientDefinedIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.clientDefinedIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientDefinedRecordIDs.clientDefinedIDs.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.failedRecordIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.failedRecordIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientDefinedRecordIDs.failedRecordIDs.modify())()
{
  return nullsub_1;
}

ReplicatorServices::ReplicationXPCServerResponse::GetClientDefinedRecordIDs __swiftcall ReplicationXPCServerResponse.GetClientDefinedRecordIDs.init(internalIDs:clientDefinedIDs:failedRecordIDs:)(Swift::OpaquePointer internalIDs, Swift::OpaquePointer clientDefinedIDs, Swift::OpaquePointer failedRecordIDs)
{
  v3->_rawValue = internalIDs._rawValue;
  v3[1]._rawValue = clientDefinedIDs._rawValue;
  v3[2]._rawValue = failedRecordIDs._rawValue;
  result.failedRecordIDs = failedRecordIDs;
  result.clientDefinedIDs = clientDefinedIDs;
  result.internalIDs = internalIDs;
  return result;
}

uint64_t sub_25B32DEB8()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x655264656C696166;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C616E7265746E69;
  }
}

uint64_t sub_25B32DF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B3391DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B32DF54(uint64_t a1)
{
  unint64_t v2 = sub_25B33236C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32DF90(uint64_t a1)
{
  unint64_t v2 = sub_25B33236C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v13 = v1[2];
  uint64_t v14 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33236C();
  sub_25B3802C0();
  uint64_t v16 = v9;
  char v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  sub_25B331AE8();
  sub_25B380160();
  if (!v2)
  {
    uint64_t v10 = v13;
    uint64_t v16 = v14;
    char v15 = 1;
    sub_25B380160();
    uint64_t v16 = v10;
    char v15 = 2;
    sub_25B380160();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerResponse.GetClientDefinedRecordIDs.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33236C();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341830);
  char v17 = 0;
  sub_25B331BD4();
  sub_25B3800B0();
  uint64_t v16 = a2;
  uint64_t v9 = v18;
  char v17 = 1;
  swift_bridgeObjectRetain();
  sub_25B3800B0();
  char v17 = 2;
  uint64_t v15 = v18;
  swift_bridgeObjectRetain();
  sub_25B3800B0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = v15;
  long long v11 = v16;
  void *v16 = v9;
  v11[1] = v12;
  _DWORD v11[2] = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B32E468@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetClientDefinedRecordIDs.init(from:)(a1, a2);
}

uint64_t sub_25B32E480(void *a1)
{
  return ReplicationXPCServerResponse.GetClientDefinedRecordIDs.encode(to:)(a1);
}

uint64_t sub_25B32E498()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B333668();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B330DF8(v1, a1, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.message.setter(uint64_t a1)
{
  return sub_25B331D90(a1, v1, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
}

uint64_t (*ReplicationXPCServerResponse.ReceiveMessage.message.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.init(message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B331E6C(a1, a2, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
}

uint64_t sub_25B32E61C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_25B32E634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32E6CC(uint64_t a1)
{
  unint64_t v2 = sub_25B3323C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32E708(uint64_t a1)
{
  unint64_t v2 = sub_25B3323C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1C8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3323C0();
  sub_25B3802C0();
  type metadata accessor for ReplicatorMessage();
  sub_25B331B8C((unint64_t *)&unk_26A4EB3C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for ReplicatorMessage();
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1D8);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3323C0();
  sub_25B3802B0();
  if (!v2)
  {
    sub_25B331B8C(&qword_26B3410C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_25B331E6C(v15, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ReplicatorMessage);
    sub_25B331E6C((uint64_t)v11, v13, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32EB20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.ReceiveMessage.init(from:)(a1, a2);
}

uint64_t sub_25B32EB38(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1C8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3323C0();
  sub_25B3802C0();
  type metadata accessor for ReplicatorMessage();
  sub_25B331B8C((unint64_t *)&unk_26A4EB3C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B32ECAC(uint64_t a1, uint64_t a2)
{
  return sub_25B32F9C8(a1, a2, &qword_26A4EC298, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
}

uint64_t sub_25B32ECE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B32FADC(a1, a2, a3, a4, &qword_26A4EBC40, &qword_26A4EC290, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
}

uint64_t (*ReplicationXPCServerResponse.GetMessages.messages.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32ED44()
{
  return 0x736567617373656DLL;
}

uint64_t sub_25B32ED5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32EDF4(uint64_t a1)
{
  unint64_t v2 = sub_25B332434();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32EE30(uint64_t a1)
{
  unint64_t v2 = sub_25B332434();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetMessages.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB530);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B332434();
  sub_25B3802C0();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416F0);
  sub_25B332488();
  sub_25B380160();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetMessages.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3412A0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B332434();
  sub_25B3802B0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416F0);
    sub_25B33252C();
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B32F134@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetMessages.init(from:)(a1, a2);
}

uint64_t sub_25B32F14C(void *a1)
{
  return ReplicationXPCServerResponse.GetMessages.encode(to:)(a1);
}

uint64_t sub_25B32F164(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B3337FC);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B2E2FE0(v1, a1, &qword_26B3414D0);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.setter(uint64_t a1)
{
  return sub_25B31964C(a1, v1, &qword_26B3414D0);
}

uint64_t (*ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.init(localDeviceID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  return sub_25B31964C(a1, a2, &qword_26B3414D0);
}

uint64_t sub_25B32F26C()
{
  return 0x7665446C61636F6CLL;
}

uint64_t sub_25B32F290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7665446C61636F6CLL && a2 == 0xED00004449656369)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32F34C(uint64_t a1)
{
  unint64_t v2 = sub_25B3325D0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32F388(uint64_t a1)
{
  unint64_t v2 = sub_25B3325D0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB700);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3325D0();
  sub_25B3802C0();
  sub_25B37F640();
  sub_25B331B8C(&qword_26A4EB370, MEMORY[0x263F07508]);
  sub_25B380120();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v17 = (uint64_t)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4EB5F8);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t LocalDeviceID = type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(0);
  MEMORY[0x270FA5388](LocalDeviceID - 8);
  long long v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25B37F640();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3325D0();
  sub_25B3802B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v13 = (uint64_t)v11;
  }
  else
  {
    sub_25B331B8C((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
    sub_25B380070();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    sub_25B31964C(v17, (uint64_t)v11, &qword_26B3414D0);
    sub_25B330DF8((uint64_t)v11, v15, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v13 = (uint64_t)v11;
  }
  return sub_25B330E84(v13, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_25B32F808@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.GetLocalDeviceID.init(from:)(a1, a2);
}

uint64_t sub_25B32F820(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB700);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B3325D0();
  sub_25B3802C0();
  sub_25B37F640();
  sub_25B331B8C(&qword_26A4EB370, MEMORY[0x263F07508]);
  sub_25B380120();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B32F994(uint64_t a1, uint64_t a2)
{
  return sub_25B32F9C8(a1, a2, &qword_26A4EB658, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_25B32F9C8(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B331B8C(a3, a4);
  uint64_t v6 = sub_25B37F420();
  unint64_t v8 = v7;
  uint64_t v9 = sub_25B37F560();
  sub_25B2CA2D8(v6, v8);
  swift_release();
  return v9;
}

uint64_t sub_25B32FAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B32FADC(a1, a2, a3, a4, &qword_26A4EB540, &qword_26B340BD0, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_25B32FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t v19 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v14 = sub_25B37F570();
  unint64_t v16 = v15;
  sub_25B331B8C(a6, a7);
  sub_25B37F3E0();
  uint64_t v17 = v19;
  sub_25B2E344C(v19, a5);
  sub_25B2CA2D8(v14, v16);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v13, 0, 1, a3);
  return sub_25B2E31F0((uint64_t)v13, v17, a5);
}

uint64_t (*ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.failedRecordIDs.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B32FCA8()
{
  return 0x655264656C696166;
}

uint64_t sub_25B32FCCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x655264656C696166 && a2 == 0xEF73444964726F63)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B32FD88(uint64_t a1)
{
  unint64_t v2 = sub_25B332644();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B32FDC4(uint64_t a1)
{
  unint64_t v2 = sub_25B332644();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.encode(to:)(void *a1)
{
  return sub_25B32CA90(a1, &qword_26A4EB708, (uint64_t)sub_25B332644);
}

uint64_t ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25B32CC28(a1, &qword_26A4EB8A8, (void (*)(void))sub_25B332644, a2);
}

uint64_t sub_25B32FE78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.init(from:)(a1, a2);
}

uint64_t sub_25B32FE90(void *a1)
{
  return ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.encode(to:)(a1);
}

uint64_t sub_25B32FEA8(uint64_t a1, uint64_t a2)
{
  return sub_25B32FEC0(a1, a2, (void (*)(void))sub_25B3326EC);
}

uint64_t sub_25B32FEC0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  a3();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  uint64_t v7 = sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.enabled.getter()
{
  return *v0;
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.enabled.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientEnabled.enabled.modify())()
{
  return nullsub_1;
}

ReplicatorServices::ReplicationXPCServerResponse::GetClientEnabled __swiftcall ReplicationXPCServerResponse.GetClientEnabled.init(enabled:)(ReplicatorServices::ReplicationXPCServerResponse::GetClientEnabled enabled)
{
  v1->enabled = enabled.enabled;
  return enabled;
}

uint64_t sub_25B32FFC8(uint64_t a1)
{
  unint64_t v2 = sub_25B332698();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B330004(uint64_t a1)
{
  unint64_t v2 = sub_25B332698();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1E0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B332698();
  sub_25B3802C0();
  sub_25B380150();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1F0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B332698();
  sub_25B3802B0();
  if (!v2)
  {
    char v9 = sub_25B3800A0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B3302C8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetClientEnabled.init(from:)(a1, a2);
}

uint64_t sub_25B3302E0(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC1E0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B332698();
  sub_25B3802C0();
  sub_25B380150();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B330414()
{
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B333ACC();
  uint64_t v0 = sub_25B37F420();
  unint64_t v2 = v1;
  uint64_t v3 = sub_25B37F560();
  sub_25B2CA2D8(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_25B3304D0(uint64_t a1, unsigned char *a2)
{
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v3 = sub_25B37F570();
  unint64_t v5 = v4;
  sub_25B319550();
  sub_25B37F3E0();
  sub_25B2CA2D8(v3, v5);
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t static ReplicationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerResponseGetRecords.records.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponseGetRecords.failedRecordIDs.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs);
  return swift_bridgeObjectRetain();
}

id ReplicationXPCServerResponseGetRecords.__allocating_init(records:failedRecordIDs:)(uint64_t a1, uint64_t *a2)
{
  unint64_t v5 = (char *)objc_allocWithZone(v2);
  uint64_t v6 = *a2;
  *(void *)&v5[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = a1;
  *(void *)&v5[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v6;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id ReplicationXPCServerResponseGetRecords.init(records:failedRecordIDs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = *a2;
  *(void *)&v2[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = a1;
  *(void *)&v2[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v6;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

void ReplicationXPCServerResponseGetRecords.encode(withBSXPCCoder:)(void *a1)
{
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  unint64_t v2 = (void *)sub_25B37FAE0();
  uint64_t v3 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v2, v3);

  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3326EC();
  uint64_t v4 = sub_25B37F420();
  unint64_t v6 = v5;
  char v7 = (void *)sub_25B37F560();
  sub_25B2CA2D8(v4, v6);
  swift_release();
  objc_super v8 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
}

void sub_25B330858(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

id ReplicationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerResponseGetRecords.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerResponseGetRecords.init(bsxpcCoder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_25B3393BC(0, &qword_26B3409B8);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  uint64_t v5 = swift_getObjCClassFromMetadata();
  unint64_t v6 = v1;
  id v7 = (void *)sub_25B37F970();
  id v8 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v5, v7);

  if (v8
    && (v19[0] = v8,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B70),
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B58),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v9 = *(void *)&v18[0];
    sub_25B3393BC(0, (unint64_t *)&unk_26B340B90);
    uint64_t v10 = swift_getObjCClassFromMetadata();
    uint64_t v11 = (void *)sub_25B37F970();
    id v12 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v10, v11);

    if (v12)
    {
      sub_25B37FDA0();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v18, 0, sizeof(v18));
    }
    sub_25B2E31F0((uint64_t)v18, (uint64_t)v19, &qword_26B3413D8);
    if (v19[3])
    {
      if (swift_dynamicCast())
      {
        uint64_t v15 = v17;
        *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = v9;
        *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v15;

        v16.receiver = v6;
        v16.super_class = ObjectType;
        id v13 = objc_msgSendSuper2(&v16, sel_init);
        swift_unknownObjectRelease();
        return v13;
      }
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      sub_25B2E344C((uint64_t)v19, &qword_26B3413D8);
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  swift_deallocPartialClassInstance();
  return 0;
}

void ReplicationXPCServerResponseGetRecords.init()()
{
}

id _s18ReplicatorServices36ReplicationXPCServerParametersRecordCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_25B330CAC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v12 = (uint64_t *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
  *(_OWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = xmmword_25B381FA0;
  id v13 = (void **)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
  uint64_t v14 = &v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes] = 0;
  *(void *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = a1;
  swift_beginAccess();
  uint64_t v16 = *v12;
  unint64_t v15 = v12[1];
  *id v12 = a2;
  v12[1] = a3;
  uint64_t v17 = v6;
  sub_25B318B74(a2, a3);
  sub_25B2CA2C4(v16, v15);
  swift_beginAccess();
  uint64_t v18 = *v13;
  *id v13 = a4;
  id v19 = a4;

  swift_beginAccess();
  *(void *)uint64_t v14 = a5;

  swift_bridgeObjectRelease();
  v22.receiver = v17;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t sub_25B330DF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ReplicationXPCServerParametersRecordValue()
{
  return self;
}

uint64_t sub_25B330E84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_25B330EE4(void *a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = (uint64_t *)&v1[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = &v1[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)uint64_t v5 = xmmword_25B381FA0;
  sub_25B3393BC(0, (unint64_t *)&unk_26A4EC430);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v7 = v2;
  id v8 = (void *)sub_25B37F970();
  id v9 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, ObjCClassFromMetadata, v8);

  if (v9)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_25B2E31F0((uint64_t)&v26, (uint64_t)v28, &qword_26B3413D8);
  if (v29)
  {
    int v10 = swift_dynamicCast();
    if (v10) {
      uint64_t v11 = v23;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10) {
      unint64_t v12 = v24;
    }
    else {
      unint64_t v12 = 0;
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v28, &qword_26B3413D8);
    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  sub_25B3393BC(0, (unint64_t *)&unk_26B340B90);
  uint64_t v13 = swift_getObjCClassFromMetadata();
  uint64_t v14 = (void *)sub_25B37F970();
  id v15 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v13, v14);

  if (v15)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_25B2E31F0((uint64_t)&v26, (uint64_t)v28, &qword_26B3413D8);
  if (v29)
  {
    int v16 = swift_dynamicCast();
    if (v16) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v16) {
      unint64_t v18 = v24;
    }
    else {
      unint64_t v18 = 0xF000000000000000;
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v28, &qword_26B3413D8);
    uint64_t v17 = 0;
    unint64_t v18 = 0xF000000000000000;
  }
  swift_beginAccess();
  *uint64_t v4 = v11;
  v4[1] = v12;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v19 = *(void *)v5;
  unint64_t v20 = *((void *)v5 + 1);
  *(void *)uint64_t v5 = v17;
  *((void *)v5 + 1) = v18;
  sub_25B318B74(v17, v18);
  sub_25B2CA2C4(v19, v20);

  sub_25B2CA2C4(v17, v18);
  v25.receiver = v7;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, sel_init);
}

uint64_t type metadata accessor for ReplicationXPCServerParametersExtendedAttribute()
{
  return self;
}

id sub_25B3311DC(void *a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = (uint64_t *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
  *(_OWORD *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = xmmword_25B381FA0;
  uint64_t v5 = (void **)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
  *(void *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
  unint64_t v6 = &v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
  *(void *)unint64_t v6 = 0;
  sub_25B3393BC(0, (unint64_t *)&unk_26B340B90);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v8 = v2;
  id v9 = (void *)sub_25B37F970();
  id v10 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, ObjCClassFromMetadata, v9);

  if (v10)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  sub_25B2E31F0((uint64_t)&v34, (uint64_t)v36, &qword_26B3413D8);
  if (v37)
  {
    int v11 = swift_dynamicCast();
    uint64_t v12 = (uint64_t)v32;
    if (!v11) {
      uint64_t v12 = 0;
    }
    uint64_t v29 = v12;
    unint64_t v13 = 0xF000000000000000;
    if (v11) {
      unint64_t v13 = v33;
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v36, &qword_26B3413D8);
    uint64_t v29 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  unint64_t v28 = v13;
  sub_25B3393BC(0, (unint64_t *)&qword_26B340B80);
  uint64_t v14 = swift_getObjCClassFromMetadata();
  id v15 = (void *)sub_25B37F970();
  id v16 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v14, v15);

  if (v16)
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  sub_25B2E31F0((uint64_t)&v34, (uint64_t)v36, &qword_26B3413D8);
  if (v37)
  {
    if (swift_dynamicCast()) {
      uint64_t v17 = v32;
    }
    else {
      uint64_t v17 = 0;
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v36, &qword_26B3413D8);
    uint64_t v17 = 0;
  }
  unint64_t v18 = (void *)sub_25B37F970();
  id v19 = objc_msgSend(a1, sel_decodeUInt64ForKey_, v18);

  sub_25B3393BC(0, &qword_26B3409B8);
  uint64_t v20 = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
  uint64_t v21 = swift_getObjCClassFromMetadata();
  objc_super v22 = (void *)sub_25B37F970();
  id v23 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, v20, v21, v22);

  if (v23)
  {
    v36[0] = v23;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340B70);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB558);
    if (swift_dynamicCast()) {
      id v23 = (id)v34;
    }
    else {
      id v23 = 0;
    }
  }
  *(void *)&v8[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = v19;
  swift_beginAccess();
  uint64_t v24 = *v4;
  unint64_t v25 = v4[1];
  *uint64_t v4 = v29;
  v4[1] = v28;
  sub_25B2CA2C4(v24, v25);
  swift_beginAccess();
  long long v26 = *v5;
  *uint64_t v5 = v17;

  swift_beginAccess();
  *(void *)unint64_t v6 = v23;

  swift_bridgeObjectRelease();
  v31.receiver = v8;
  v31.super_class = ObjectType;
  return objc_msgSendSuper2(&v31, sel_init);
}

unint64_t sub_25B3315DC()
{
  unint64_t result = qword_26B340D40;
  if (!qword_26B340D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340D40);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerParametersRecord(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B3410F8);
}

unint64_t sub_25B331650()
{
  unint64_t result = qword_26B341670;
  if (!qword_26B341670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341670);
  }
  return result;
}

unint64_t sub_25B3316A4()
{
  unint64_t result = qword_26B341590;
  if (!qword_26B341590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341590);
  }
  return result;
}

unint64_t sub_25B3316F8()
{
  unint64_t result = qword_26B341748;
  if (!qword_26B341748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341748);
  }
  return result;
}

unint64_t sub_25B33174C()
{
  unint64_t result = qword_26A4EC148;
  if (!qword_26A4EC148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC148);
  }
  return result;
}

unint64_t sub_25B3317A0()
{
  unint64_t result = qword_26A4EC160;
  if (!qword_26A4EC160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC160);
  }
  return result;
}

unint64_t sub_25B3317F4()
{
  unint64_t result = qword_26A4EC178;
  if (!qword_26A4EC178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC178);
  }
  return result;
}

unint64_t sub_25B331848()
{
  unint64_t result = qword_26A4EC190;
  if (!qword_26A4EC190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC190);
  }
  return result;
}

unint64_t sub_25B33189C()
{
  unint64_t result = qword_26B341808;
  if (!qword_26B341808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341808);
  }
  return result;
}

unint64_t sub_25B3318F0()
{
  unint64_t result = qword_26B3410E0;
  if (!qword_26B3410E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3410E0);
  }
  return result;
}

unint64_t sub_25B331944()
{
  unint64_t result = qword_26B340D10;
  if (!qword_26B340D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340D10);
  }
  return result;
}

unint64_t sub_25B331998()
{
  unint64_t result = qword_26B3410D0;
  if (!qword_26B3410D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3410D0);
  }
  return result;
}

unint64_t sub_25B3319EC()
{
  unint64_t result = qword_26A4EB380;
  if (!qword_26A4EB380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB380);
  }
  return result;
}

unint64_t sub_25B331A40()
{
  unint64_t result = qword_26A4EB3D8;
  if (!qword_26A4EB3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3D8);
  }
  return result;
}

unint64_t sub_25B331A94()
{
  unint64_t result = qword_26B340E08;
  if (!qword_26B340E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E08);
  }
  return result;
}

unint64_t sub_25B331AE8()
{
  unint64_t result = qword_26B341838;
  if (!qword_26B341838)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B341830);
    sub_25B331B8C(&qword_26B341730, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341838);
  }
  return result;
}

uint64_t sub_25B331B8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B331BD4()
{
  unint64_t result = qword_26B341360;
  if (!qword_26B341360)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B341830);
    sub_25B331B8C(&qword_26B3410A0, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341360);
  }
  return result;
}

unint64_t sub_25B331C78()
{
  unint64_t result = qword_26B340C38;
  if (!qword_26B340C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C38);
  }
  return result;
}

unint64_t sub_25B331CCC()
{
  unint64_t result = qword_26B341690;
  if (!qword_26B341690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341690);
  }
  return result;
}

uint64_t sub_25B331D20(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B341700);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B331D90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ReplicationXPCServerParameters.SendMessage(uint64_t a1)
{
  return sub_25B31FF48(a1, qword_26A4EC2D0);
}

unint64_t sub_25B331E18()
{
  unint64_t result = qword_26A4EC1B0;
  if (!qword_26A4EC1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC1B0);
  }
  return result;
}

uint64_t sub_25B331E6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_25B331ED4()
{
  unint64_t result = qword_26B341648;
  if (!qword_26B341648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341648);
  }
  return result;
}

uint64_t sub_25B331F28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B341710);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B331F8C()
{
  unint64_t result = qword_26B340E58;
  if (!qword_26B340E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E58);
  }
  return result;
}

unint64_t sub_25B331FE0()
{
  unint64_t result = qword_26B341620;
  if (!qword_26B341620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341620);
  }
  return result;
}

unint64_t sub_25B332034()
{
  unint64_t result = qword_26A4EB490;
  if (!qword_26A4EB490)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B3416D8);
    sub_25B331B8C(&qword_26A4EB378, (void (*)(uint64_t))type metadata accessor for ReplicatorRecordVersion);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB490);
  }
  return result;
}

unint64_t sub_25B3320D8()
{
  unint64_t result = qword_26B3411B8;
  if (!qword_26B3411B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B3416D8);
    sub_25B331B8C(&qword_26B340FD0, (void (*)(uint64_t))type metadata accessor for ReplicatorRecordVersion);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3411B8);
  }
  return result;
}

unint64_t sub_25B33217C()
{
  unint64_t result = qword_26B3415D0;
  if (!qword_26B3415D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415D0);
  }
  return result;
}

unint64_t sub_25B3321D0()
{
  unint64_t result = qword_26A4EB4A0;
  if (!qword_26A4EB4A0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3416E0);
    sub_25B331B8C(&qword_26A4EB3C0, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB4A0);
  }
  return result;
}

unint64_t sub_25B332274()
{
  unint64_t result = qword_26B3411C0;
  if (!qword_26B3411C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3416E0);
    sub_25B331B8C(&qword_26B341030, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3411C0);
  }
  return result;
}

unint64_t sub_25B332318()
{
  unint64_t result = qword_26B3417F0;
  if (!qword_26B3417F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417F0);
  }
  return result;
}

unint64_t sub_25B33236C()
{
  unint64_t result = qword_26B340E38;
  if (!qword_26B340E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E38);
  }
  return result;
}

unint64_t sub_25B3323C0()
{
  unint64_t result = qword_26A4EC1D0;
  if (!qword_26A4EC1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC1D0);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1)
{
  return sub_25B31FF48(a1, qword_26A4EC2E8);
}

unint64_t sub_25B332434()
{
  unint64_t result = qword_26B3415F8;
  if (!qword_26B3415F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415F8);
  }
  return result;
}

unint64_t sub_25B332488()
{
  unint64_t result = qword_26A4EB4A8;
  if (!qword_26A4EB4A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3416F0);
    sub_25B331B8C((unint64_t *)&unk_26A4EB3C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB4A8);
  }
  return result;
}

unint64_t sub_25B33252C()
{
  unint64_t result = qword_26B340EB8;
  if (!qword_26B340EB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3416F0);
    sub_25B331B8C(&qword_26B3410C8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340EB8);
  }
  return result;
}

unint64_t sub_25B3325D0()
{
  unint64_t result = qword_26B340BA8;
  if (!qword_26B340BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340BA8);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B340BD8);
}

unint64_t sub_25B332644()
{
  unint64_t result = qword_26B340C20;
  if (!qword_26B340C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C20);
  }
  return result;
}

unint64_t sub_25B332698()
{
  unint64_t result = qword_26A4EC1E8;
  if (!qword_26A4EC1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC1E8);
  }
  return result;
}

unint64_t sub_25B3326EC()
{
  unint64_t result = qword_26A4EB678;
  if (!qword_26A4EB678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB678);
  }
  return result;
}

unint64_t sub_25B332744()
{
  unint64_t result = qword_26A4EC208;
  if (!qword_26A4EC208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC208);
  }
  return result;
}

uint64_t sub_25B33279C()
{
  return sub_25B331B8C(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_25B3327E4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332824, (uint64_t (*)(void))sub_25B3187FC, (uint64_t (*)(void))sub_25B332878);
}

unint64_t sub_25B332824()
{
  unint64_t result = qword_26A4EB450;
  if (!qword_26A4EB450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB450);
  }
  return result;
}

unint64_t sub_25B332878()
{
  unint64_t result = qword_26A4EB460;
  if (!qword_26A4EB460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB460);
  }
  return result;
}

uint64_t sub_25B3328CC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B33290C, (uint64_t (*)(void))sub_25B318F44, (uint64_t (*)(void))sub_25B332960);
}

unint64_t sub_25B33290C()
{
  unint64_t result = qword_26A4EC218;
  if (!qword_26A4EC218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC218);
  }
  return result;
}

unint64_t sub_25B332960()
{
  unint64_t result = qword_26A4EC228;
  if (!qword_26A4EC228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC228);
  }
  return result;
}

uint64_t sub_25B3329B4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B3329F4, (uint64_t (*)(void))sub_25B3194FC, (uint64_t (*)(void))sub_25B332A48);
}

unint64_t sub_25B3329F4()
{
  unint64_t result = qword_26A4EC230;
  if (!qword_26A4EC230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC230);
  }
  return result;
}

unint64_t sub_25B332A48()
{
  unint64_t result = qword_26A4EC240;
  if (!qword_26A4EC240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC240);
  }
  return result;
}

uint64_t sub_25B332A9C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332ADC, (uint64_t (*)(void))sub_25B3195A4, (uint64_t (*)(void))sub_25B332B30);
}

unint64_t sub_25B332ADC()
{
  unint64_t result = qword_26A4EC248;
  if (!qword_26A4EC248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC248);
  }
  return result;
}

unint64_t sub_25B332B30()
{
  unint64_t result = qword_26A4EC258;
  if (!qword_26A4EC258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC258);
  }
  return result;
}

uint64_t sub_25B332B84(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332BC4, (uint64_t (*)(void))sub_25B3195F8, (uint64_t (*)(void))sub_25B332C18);
}

unint64_t sub_25B332BC4()
{
  unint64_t result = qword_26A4EC260;
  if (!qword_26A4EC260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC260);
  }
  return result;
}

unint64_t sub_25B332C18()
{
  unint64_t result = qword_26A4EC270;
  if (!qword_26A4EC270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC270);
  }
  return result;
}

uint64_t sub_25B332C6C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332CAC, (uint64_t (*)(void))sub_25B3190BC, (uint64_t (*)(void))sub_25B332D00);
}

unint64_t sub_25B332CAC()
{
  unint64_t result = qword_26A4EB6A8;
  if (!qword_26A4EB6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB6A8);
  }
  return result;
}

unint64_t sub_25B332D00()
{
  unint64_t result = qword_26A4EB6B8;
  if (!qword_26A4EB6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB6B8);
  }
  return result;
}

uint64_t sub_25B332D54(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332D94, (uint64_t (*)(void))sub_25B3315DC, (uint64_t (*)(void))sub_25B332DE8);
}

unint64_t sub_25B332D94()
{
  unint64_t result = qword_26A4EB420;
  if (!qword_26A4EB420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB420);
  }
  return result;
}

unint64_t sub_25B332DE8()
{
  unint64_t result = qword_26A4EC278;
  if (!qword_26A4EC278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC278);
  }
  return result;
}

uint64_t sub_25B332E3C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332E7C, (uint64_t (*)(void))sub_25B318E88, (uint64_t (*)(void))sub_25B332ED0);
}

unint64_t sub_25B332E7C()
{
  unint64_t result = qword_26A4EB690;
  if (!qword_26A4EB690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB690);
  }
  return result;
}

unint64_t sub_25B332ED0()
{
  unint64_t result = qword_26A4EB6A0;
  if (!qword_26A4EB6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB6A0);
  }
  return result;
}

uint64_t sub_25B332F24(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B332F64, (uint64_t (*)(void))sub_25B318AE0, (uint64_t (*)(void))sub_25B332FB8);
}

unint64_t sub_25B332F64()
{
  unint64_t result = qword_26A4EB680;
  if (!qword_26A4EB680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB680);
  }
  return result;
}

unint64_t sub_25B332FB8()
{
  unint64_t result = qword_26A4EB688;
  if (!qword_26A4EB688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB688);
  }
  return result;
}

uint64_t sub_25B33300C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B33304C, (uint64_t (*)(void))sub_25B3185C0, (uint64_t (*)(void))sub_25B3330A0);
}

unint64_t sub_25B33304C()
{
  unint64_t result = qword_26A4EB470;
  if (!qword_26A4EB470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB470);
  }
  return result;
}

unint64_t sub_25B3330A0()
{
  unint64_t result = qword_26A4EB480;
  if (!qword_26A4EB480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB480);
  }
  return result;
}

uint64_t sub_25B3330F4(void *a1)
{
  a1[1] = sub_25B331B8C((unint64_t *)&unk_26A4ECC40, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  a1[2] = sub_25B331B8C(&qword_26A4EC280, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  uint64_t result = sub_25B331B8C(&qword_26A4EC288, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  a1[3] = result;
  return result;
}

uint64_t sub_25B3331A0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B3331E0, (uint64_t (*)(void))sub_25B318FDC, (uint64_t (*)(void))sub_25B333234);
}

unint64_t sub_25B3331E0()
{
  unint64_t result = qword_26A4EB430;
  if (!qword_26A4EB430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB430);
  }
  return result;
}

unint64_t sub_25B333234()
{
  unint64_t result = qword_26A4EB440;
  if (!qword_26A4EB440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB440);
  }
  return result;
}

uint64_t sub_25B333288(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B3332C8, (uint64_t (*)(void))sub_25B318668, (uint64_t (*)(void))sub_25B33331C);
}

unint64_t sub_25B3332C8()
{
  unint64_t result = qword_26A4EB8B8;
  if (!qword_26A4EB8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB8B8);
  }
  return result;
}

unint64_t sub_25B33331C()
{
  unint64_t result = qword_26A4EB8D8;
  if (!qword_26A4EB8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB8D8);
  }
  return result;
}

uint64_t sub_25B333370(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B318614, (uint64_t (*)(void))sub_25B3333B0, (uint64_t (*)(void))sub_25B333404);
}

unint64_t sub_25B3333B0()
{
  unint64_t result = qword_26A4EB408;
  if (!qword_26A4EB408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB408);
  }
  return result;
}

unint64_t sub_25B333404()
{
  unint64_t result = qword_26A4EB410;
  if (!qword_26A4EB410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB410);
  }
  return result;
}

uint64_t sub_25B333458(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B3187A8, (uint64_t (*)(void))sub_25B333498, (uint64_t (*)(void))sub_25B3334EC);
}

unint64_t sub_25B333498()
{
  unint64_t result = qword_26A4EB3E0;
  if (!qword_26A4EB3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3E0);
  }
  return result;
}

unint64_t sub_25B3334EC()
{
  unint64_t result = qword_26A4EB3E8;
  if (!qword_26A4EB3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3E8);
  }
  return result;
}

uint64_t sub_25B333540(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B319110, (uint64_t (*)(void))sub_25B333580, (uint64_t (*)(void))sub_25B3335D4);
}

unint64_t sub_25B333580()
{
  unint64_t result = qword_26A4EB668;
  if (!qword_26A4EB668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB668);
  }
  return result;
}

unint64_t sub_25B3335D4()
{
  unint64_t result = qword_26A4EB670;
  if (!qword_26A4EB670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB670);
  }
  return result;
}

uint64_t sub_25B333628(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B3186BC, (uint64_t (*)(void))sub_25B333668, (uint64_t (*)(void))sub_25B3336BC);
}

unint64_t sub_25B333668()
{
  unint64_t result = qword_26A4EB8C0;
  if (!qword_26A4EB8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB8C0);
  }
  return result;
}

unint64_t sub_25B3336BC()
{
  unint64_t result = qword_26A4EB8C8;
  if (!qword_26A4EB8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB8C8);
  }
  return result;
}

uint64_t sub_25B333710(void *a1)
{
  a1[1] = sub_25B331B8C(&qword_26A4EC290, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  a1[2] = sub_25B331B8C(&qword_26A4EC298, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  uint64_t result = sub_25B331B8C((unint64_t *)&unk_26A4EC2A0, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  a1[3] = result;
  return result;
}

uint64_t sub_25B3337BC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B319030, (uint64_t (*)(void))sub_25B3337FC, (uint64_t (*)(void))sub_25B333850);
}

unint64_t sub_25B3337FC()
{
  unint64_t result = qword_26A4EB3F0;
  if (!qword_26A4EB3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3F0);
  }
  return result;
}

unint64_t sub_25B333850()
{
  unint64_t result = qword_26A4EB3F8;
  if (!qword_26A4EB3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB3F8);
  }
  return result;
}

uint64_t sub_25B3338A4(void *a1)
{
  a1[1] = sub_25B331B8C(&qword_26B340BD0, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
  a1[2] = sub_25B331B8C(&qword_26A4EB658, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
  uint64_t result = sub_25B331B8C(&qword_26A4EB660, (void (*)(uint64_t))type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
  a1[3] = result;
  return result;
}

uint64_t sub_25B333950(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B333990, (uint64_t (*)(void))sub_25B3326EC, (uint64_t (*)(void))sub_25B3339E4);
}

unint64_t sub_25B333990()
{
  unint64_t result = qword_26A4EB848;
  if (!qword_26A4EB848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB848);
  }
  return result;
}

unint64_t sub_25B3339E4()
{
  unint64_t result = qword_26A4EC2B0;
  if (!qword_26A4EC2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC2B0);
  }
  return result;
}

uint64_t sub_25B333A38(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25B333A78(a1, a2, a3, (uint64_t (*)(void))sub_25B319550, (uint64_t (*)(void))sub_25B333ACC, (uint64_t (*)(void))sub_25B333B20);
}

uint64_t sub_25B333A78(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_25B333ACC()
{
  unint64_t result = qword_26A4EC2C0;
  if (!qword_26A4EC2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC2C0);
  }
  return result;
}

unint64_t sub_25B333B20()
{
  unint64_t result = qword_26A4EC2C8;
  if (!qword_26A4EC2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC2C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationServiceDefinition()
{
  return &type metadata for ReplicationServiceDefinition;
}

ValueMetadata *type metadata accessor for ReplicationServiceError()
{
  return &type metadata for ReplicationServiceError;
}

unsigned char *storeEnumTagSinglePayload for ReplicationServiceError.Code(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B333C60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationServiceError.Code()
{
  return &type metadata for ReplicationServiceError.Code;
}

uint64_t sub_25B333C98()
{
  return type metadata accessor for ReplicationXPCServerParametersRecord(0);
}

void sub_25B333CA0()
{
  type metadata accessor for ReplicatorRecord.ID(319);
  if (v0 <= 0x3F)
  {
    sub_25B37F640();
    if (v1 <= 0x3F)
    {
      sub_25B336D40(319, &qword_26B340F88, MEMORY[0x263F07490]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for ReplicationXPCServerParametersRecord(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicationXPCServerParametersRecord);
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecord.__allocating_init(id:version:values:expiration:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecord.__allocating_init(bsxpcCoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for ReplicationXPCServerParametersExtendedAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicationXPCServerParametersExtendedAttribute);
}

uint64_t dispatch thunk of ReplicationXPCServerParametersExtendedAttribute.__allocating_init(name:data:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersExtendedAttribute.__allocating_init(bsxpcCoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for ReplicationXPCServerParametersRecordValue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicationXPCServerParametersRecordValue);
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecordValue.__allocating_init(version:data:fileHandle:extendedAttributes:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecordValue.__allocating_init(bsxpcCoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for ReplicationXPCServerParametersAddRecords()
{
  return self;
}

uint64_t method lookup function for ReplicationXPCServerParametersAddRecords(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicationXPCServerParametersAddRecords);
}

uint64_t dispatch thunk of ReplicationXPCServerParametersAddRecords.__allocating_init(parameters:records:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersAddRecords.__allocating_init(bsxpcCoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters()
{
  return &type metadata for ReplicationXPCServerParameters;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RegisterClient()
{
  return &type metadata for ReplicationXPCServerParameters.RegisterClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.UnregisterClient()
{
  return &type metadata for ReplicationXPCServerParameters.UnregisterClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientEnabled()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientEnabled;
}

void *initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.EnableClient(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for ReplicationXPCServerParameters.EnableClient(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.EnableClient()
{
  return &type metadata for ReplicationXPCServerParameters.EnableClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.DisableClient()
{
  return &type metadata for ReplicationXPCServerParameters.DisableClient;
}

void *_s18ReplicatorServices30ReplicationXPCServerParametersO16UnregisterClientVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO16UnregisterClientVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25B33408C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDescriptor()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ReplicatorRecordDestination()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.AddRecords(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.AddRecords(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.AddRecords()
{
  return &type metadata for ReplicationXPCServerParameters.AddRecords;
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.RemoveRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.RemoveRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.RemoveRecords(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.RemoveRecords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RemoveRecords()
{
  return &type metadata for ReplicationXPCServerParameters.RemoveRecords;
}

uint64_t initializeWithCopy for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecords()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecords;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecordVersions()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecordVersions;
}

char *initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B37F640();
    uint64_t v38 = *(void *)(v7 - 8);
    id v8 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v8(a1, a2, v7);
    id v9 = (int *)type metadata accessor for ReplicatorMessage();
    uint64_t v10 = v9[5];
    int v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)int v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    uint64_t v14 = v9[6];
    id v15 = &a1[v14];
    id v16 = &a2[v14];
    swift_bridgeObjectRetain();
    v8(v15, v16, v7);
    uint64_t v17 = v9[7];
    unint64_t v18 = &a1[v17];
    id v19 = &a2[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)unint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
    uint64_t v21 = v9[9];
    objc_super v22 = (uint64_t *)&a1[v21];
    id v23 = (uint64_t *)&a2[v21];
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    swift_bridgeObjectRetain();
    sub_25B2E2B14(v24, v25);
    *objc_super v22 = v24;
    v22[1] = v25;
    uint64_t v26 = v9[10];
    long long v27 = &a1[v26];
    unint64_t v28 = &a2[v26];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(&a2[v26], 1, v7))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      v8(v27, v28, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v27, 0, 1, v7);
    }
    uint64_t v31 = *(int *)(a3 + 20);
    uint64_t v32 = *(int *)(a3 + 24);
    unint64_t v33 = &a1[v31];
    long long v34 = &a2[v31];
    *(void *)unint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    long long v35 = &a1[v32];
    uint64_t v36 = &a2[v32];
    *(void *)long long v35 = *(void *)v36;
    v35[8] = v36[8];
  }
  return a1;
}

uint64_t initializeWithCopy for ReplicationXPCServerParameters.SendMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  id v8 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v9 = v8[5];
  uint64_t v10 = (void *)(a1 + v9);
  int v11 = (void *)(a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = v8[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  swift_bridgeObjectRetain();
  v7(v14, v15, v5);
  uint64_t v16 = v8[7];
  uint64_t v17 = (void *)(a1 + v16);
  unint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  uint64_t v20 = v8[9];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  objc_super v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  swift_bridgeObjectRetain();
  sub_25B2E2B14(v23, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = v8[10];
  uint64_t v26 = (void *)(a1 + v25);
  long long v27 = (const void *)(a2 + v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a2 + v25, 1, v5))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v26, (uint64_t)v27, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
  }
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = *(int *)(a3 + 24);
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  return a1;
}

char *assignWithCopy for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  id v8 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  int v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v7;
  v7(&a1[v8[6]], &a2[v8[6]], v5);
  uint64_t v12 = v8[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
  uint64_t v15 = v8[9];
  uint64_t v16 = (uint64_t *)&a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_25B2E2B14(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  uint64_t *v16 = v18;
  v16[1] = v19;
  sub_25B2CA2D8(v20, v21);
  uint64_t v22 = v8[10];
  uint64_t v23 = &a1[v22];
  unint64_t v24 = &a2[v22];
  uint64_t v25 = v6;
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v19) = v26(&a1[v22], 1, v5);
  int v27 = v26(v24, 1, v5);
  if (!v19)
  {
    if (!v27)
    {
      v38(v23, v24, v5);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v5);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v23, v24, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v5);
LABEL_7:
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)uint64_t v30 = v32;
  uint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = &a1[v33];
  long long v35 = &a2[v33];
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  return a1;
}

char *initializeWithTake for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  v8(&a1[v9[6]], &a2[v9[6]], v6);
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  uint64_t v10 = v9[10];
  int v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  unint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  id v8 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  int v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v7(&a1[v8[6]], &a2[v8[6]], v5);
  uint64_t v14 = v8[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
  uint64_t v19 = v8[9];
  uint64_t v20 = *(void *)&a1[v19];
  unint64_t v21 = *(void *)&a1[v19 + 8];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  sub_25B2CA2D8(v20, v21);
  uint64_t v22 = v8[10];
  uint64_t v23 = &a1[v22];
  unint64_t v24 = &a2[v22];
  uint64_t v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  int v26 = v25(&a1[v22], 1, v5);
  int v27 = v25(v24, 1, v5);
  if (!v26)
  {
    if (!v27)
    {
      v7(v23, v24, v5);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v23, v5);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v23, v24, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
LABEL_7:
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = *(int *)(a3 + 24);
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = &a1[v30];
  uint64_t v34 = &a2[v30];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.SendMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.SendMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t sub_25B335134()
{
  uint64_t result = type metadata accessor for ReplicatorMessage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetMessages()
{
  return &type metadata for ReplicationXPCServerParameters.GetMessages;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDefinedRecordIDs()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDefinedRecordIDs;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse()
{
  return &type metadata for ReplicationXPCServerResponse;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsVersions()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsVersions;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetDevices()
{
  return &type metadata for ReplicationXPCServerResponse.GetDevices;
}

uint64_t destroy for ClientDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClientDescriptor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ClientDescriptor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClientDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDescriptor()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDescriptor;
}

uint64_t destroy for ReplicationXPCServerResponse.GetClientDefinedRecordIDs()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s18ReplicatorServices28ReplicationXPCServerResponseO25GetClientDefinedRecordIDsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ReplicationXPCServerResponse.GetClientDefinedRecordIDs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ReplicationXPCServerResponse.GetClientDefinedRecordIDs(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientDefinedRecordIDs(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientDefinedRecordIDs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDefinedRecordIDs()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDefinedRecordIDs;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicationXPCServerResponse.ReceiveMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorMessage();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = sub_25B37F640();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = v6[5];
    int v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *int v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = v6[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    swift_bridgeObjectRetain();
    v9((uint64_t *)v15, (uint64_t *)v16, v7);
    uint64_t v17 = v6[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v6[8]) = *(uint64_t *)((char *)a2 + v6[8]);
    uint64_t v21 = v6[9];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    swift_bridgeObjectRetain();
    sub_25B2E2B14(v24, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
    uint64_t v26 = v6[10];
    int v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v28, 1, v7))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v27, (uint64_t *)v28, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v27, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO11SendMessageVwxx_0(uint64_t a1)
{
  uint64_t v2 = sub_25B37F640();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(a1, v2);
  uint64_t v4 = (int *)type metadata accessor for ReplicatorMessage();
  swift_bridgeObjectRelease();
  v7(a1 + v4[6], v2);
  swift_bridgeObjectRelease();
  sub_25B2CA2D8(*(void *)(a1 + v4[9]), *(void *)(a1 + v4[9] + 8));
  uint64_t v5 = a1 + v4[10];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v2);
  }
  return result;
}

uint64_t initializeWithCopy for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  swift_bridgeObjectRetain();
  v6(v13, v14, v4);
  uint64_t v15 = v7[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  uint64_t v19 = v7[9];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  swift_bridgeObjectRetain();
  sub_25B2E2B14(v22, v23);
  uint64_t *v20 = v22;
  v20[1] = v23;
  uint64_t v24 = v7[10];
  unint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v26, 1, v4))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v25, (uint64_t)v26, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v25, 0, 1, v4);
  }
  return a1;
}

char *assignWithCopy for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  uint64_t v11 = v7[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
  uint64_t v14 = v7[9];
  uint64_t v15 = (uint64_t *)&a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_25B2E2B14(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_25B2CA2D8(v19, v20);
  uint64_t v21 = v7[10];
  uint64_t v22 = &a1[v21];
  unint64_t v23 = &a2[v21];
  uint64_t v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v17) = v24(&a1[v21], 1, v4);
  int v25 = v24(v23, 1, v4);
  if (!v17)
  {
    if (!v25)
    {
      v6(v22, v23, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v22, v23, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
  return a1;
}

char *initializeWithTake for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for ReplicatorMessage();
  *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
  *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
  *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
  uint64_t v8 = v7[10];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for ReplicatorMessage();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (uint64_t *)&a2[v8];
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  uint64_t v13 = v7[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
  uint64_t v18 = v7[9];
  uint64_t v19 = *(void *)&a1[v18];
  unint64_t v20 = *(void *)&a1[v18 + 8];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  sub_25B2CA2D8(v19, v20);
  uint64_t v21 = v7[10];
  uint64_t v22 = &a1[v21];
  unint64_t v23 = &a2[v21];
  uint64_t v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  int v25 = v24(&a1[v21], 1, v4);
  int v26 = v24(v23, 1, v4);
  if (!v25)
  {
    if (!v26)
    {
      v6(v22, v23, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v22, v23, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B3362B8);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorMessage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B33633C);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorMessage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_25B3363B0()
{
  uint64_t result = type metadata accessor for ReplicatorMessage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetMessages()
{
  return &type metadata for ReplicationXPCServerResponse.GetMessages;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_25B37F640();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorRecord.ID.Ownership(uint64_t a1)
{
  uint64_t v2 = sub_25B37F640();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, const void *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, void *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, const void *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, void *a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B336BA0);
}

uint64_t sub_25B336BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B336C24);
}

uint64_t sub_25B336C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_25B336C98()
{
  sub_25B336D40(319, (unint64_t *)&qword_26B3414D8, MEMORY[0x263F07508]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_25B336D40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_25B37FD60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs;
}

unsigned char *storeEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientEnabled(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B336E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientEnabled()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientEnabled;
}

uint64_t type metadata accessor for ReplicationXPCServerResponseGetRecords()
{
  return self;
}

uint64_t method lookup function for ReplicationXPCServerResponseGetRecords(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicationXPCServerResponseGetRecords);
}

uint64_t dispatch thunk of ReplicationXPCServerResponseGetRecords.__allocating_init(records:failedRecordIDs:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ReplicationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetMessages.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDefinedRecordIDs.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDefinedRecordIDs.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetDevices.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDefinedRecordIDs.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDefinedRecordIDs.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetMessages.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys;
}

unsigned char *_s18ReplicatorServices28ReplicationXPCServerResponseO25GetClientDefinedRecordIDsV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B337094);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.SendMessage.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B337238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RemoveRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys;
}

unsigned char *_s18ReplicatorServices30ReplicationXPCServerParametersO13RemoveRecordsV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B337354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.AddRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.DisableClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.EnableClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.UnregisterClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys;
}

unsigned char *_s18ReplicatorServices28ReplicationXPCServerResponseO16GetClientEnabledV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25B337478);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RegisterClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys;
}

unint64_t sub_25B3374B4()
{
  unint64_t result = qword_26A4EC300;
  if (!qword_26A4EC300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC300);
  }
  return result;
}

unint64_t sub_25B33750C()
{
  unint64_t result = qword_26A4EC308;
  if (!qword_26A4EC308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC308);
  }
  return result;
}

unint64_t sub_25B337564()
{
  unint64_t result = qword_26A4EC310;
  if (!qword_26A4EC310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC310);
  }
  return result;
}

unint64_t sub_25B3375BC()
{
  unint64_t result = qword_26A4EC318;
  if (!qword_26A4EC318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC318);
  }
  return result;
}

unint64_t sub_25B337614()
{
  unint64_t result = qword_26A4EC320;
  if (!qword_26A4EC320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC320);
  }
  return result;
}

unint64_t sub_25B33766C()
{
  unint64_t result = qword_26A4EC328;
  if (!qword_26A4EC328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC328);
  }
  return result;
}

unint64_t sub_25B3376C4()
{
  unint64_t result = qword_26A4EC330;
  if (!qword_26A4EC330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC330);
  }
  return result;
}

unint64_t sub_25B33771C()
{
  unint64_t result = qword_26A4EC338;
  if (!qword_26A4EC338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC338);
  }
  return result;
}

unint64_t sub_25B337774()
{
  unint64_t result = qword_26A4EC340;
  if (!qword_26A4EC340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC340);
  }
  return result;
}

unint64_t sub_25B3377CC()
{
  unint64_t result = qword_26A4EC348;
  if (!qword_26A4EC348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC348);
  }
  return result;
}

unint64_t sub_25B337824()
{
  unint64_t result = qword_26A4EC350;
  if (!qword_26A4EC350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC350);
  }
  return result;
}

unint64_t sub_25B33787C()
{
  unint64_t result = qword_26A4EC358;
  if (!qword_26A4EC358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC358);
  }
  return result;
}

unint64_t sub_25B3378D4()
{
  unint64_t result = qword_26A4EC360;
  if (!qword_26A4EC360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC360);
  }
  return result;
}

unint64_t sub_25B33792C()
{
  unint64_t result = qword_26A4EC368;
  if (!qword_26A4EC368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC368);
  }
  return result;
}

unint64_t sub_25B337984()
{
  unint64_t result = qword_26A4EC370;
  if (!qword_26A4EC370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC370);
  }
  return result;
}

unint64_t sub_25B3379DC()
{
  unint64_t result = qword_26A4EC378;
  if (!qword_26A4EC378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC378);
  }
  return result;
}

unint64_t sub_25B337A34()
{
  unint64_t result = qword_26A4EC380;
  if (!qword_26A4EC380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC380);
  }
  return result;
}

unint64_t sub_25B337A8C()
{
  unint64_t result = qword_26A4EC388;
  if (!qword_26A4EC388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC388);
  }
  return result;
}

unint64_t sub_25B337AE4()
{
  unint64_t result = qword_26A4EC390;
  if (!qword_26A4EC390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC390);
  }
  return result;
}

unint64_t sub_25B337B3C()
{
  unint64_t result = qword_26A4EC398;
  if (!qword_26A4EC398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC398);
  }
  return result;
}

unint64_t sub_25B337B94()
{
  unint64_t result = qword_26A4EC3A0;
  if (!qword_26A4EC3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3A0);
  }
  return result;
}

unint64_t sub_25B337BEC()
{
  unint64_t result = qword_26A4EC3A8;
  if (!qword_26A4EC3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3A8);
  }
  return result;
}

unint64_t sub_25B337C44()
{
  unint64_t result = qword_26A4EC3B0;
  if (!qword_26A4EC3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3B0);
  }
  return result;
}

unint64_t sub_25B337C9C()
{
  unint64_t result = qword_26A4EC3B8;
  if (!qword_26A4EC3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3B8);
  }
  return result;
}

unint64_t sub_25B337CF4()
{
  unint64_t result = qword_26B340C30;
  if (!qword_26B340C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C30);
  }
  return result;
}

unint64_t sub_25B337D4C()
{
  unint64_t result = qword_26B340C28;
  if (!qword_26B340C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C28);
  }
  return result;
}

unint64_t sub_25B337DA4()
{
  unint64_t result = qword_26B340BC0;
  if (!qword_26B340BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340BC0);
  }
  return result;
}

unint64_t sub_25B337DFC()
{
  unint64_t result = qword_26B340BB8;
  if (!qword_26B340BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340BB8);
  }
  return result;
}

unint64_t sub_25B337E54()
{
  unint64_t result = qword_26B341610;
  if (!qword_26B341610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341610);
  }
  return result;
}

unint64_t sub_25B337EAC()
{
  unint64_t result = qword_26B341608;
  if (!qword_26B341608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341608);
  }
  return result;
}

unint64_t sub_25B337F04()
{
  unint64_t result = qword_26A4EC3C0;
  if (!qword_26A4EC3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3C0);
  }
  return result;
}

unint64_t sub_25B337F5C()
{
  unint64_t result = qword_26A4EC3C8;
  if (!qword_26A4EC3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3C8);
  }
  return result;
}

unint64_t sub_25B337FB4()
{
  unint64_t result = qword_26B340E50;
  if (!qword_26B340E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E50);
  }
  return result;
}

unint64_t sub_25B33800C()
{
  unint64_t result = qword_26B340E48;
  if (!qword_26B340E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E48);
  }
  return result;
}

unint64_t sub_25B338064()
{
  unint64_t result = qword_26B341800;
  if (!qword_26B341800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341800);
  }
  return result;
}

unint64_t sub_25B3380BC()
{
  unint64_t result = qword_26B3417F8;
  if (!qword_26B3417F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3417F8);
  }
  return result;
}

unint64_t sub_25B338114()
{
  unint64_t result = qword_26B3415E0;
  if (!qword_26B3415E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415E0);
  }
  return result;
}

unint64_t sub_25B33816C()
{
  unint64_t result = qword_26B3415D8;
  if (!qword_26B3415D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415D8);
  }
  return result;
}

unint64_t sub_25B3381C4()
{
  unint64_t result = qword_26B341630;
  if (!qword_26B341630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341630);
  }
  return result;
}

unint64_t sub_25B33821C()
{
  unint64_t result = qword_26B341628;
  if (!qword_26B341628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341628);
  }
  return result;
}

unint64_t sub_25B338274()
{
  unint64_t result = qword_26B3413B0;
  if (!qword_26B3413B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3413B0);
  }
  return result;
}

unint64_t sub_25B3382CC()
{
  unint64_t result = qword_26B340E68;
  if (!qword_26B340E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E68);
  }
  return result;
}

unint64_t sub_25B338324()
{
  unint64_t result = qword_26B341660;
  if (!qword_26B341660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341660);
  }
  return result;
}

unint64_t sub_25B33837C()
{
  unint64_t result = qword_26B341658;
  if (!qword_26B341658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341658);
  }
  return result;
}

unint64_t sub_25B3383D4()
{
  unint64_t result = qword_26A4EC3D0;
  if (!qword_26A4EC3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3D0);
  }
  return result;
}

unint64_t sub_25B33842C()
{
  unint64_t result = qword_26A4EC3D8;
  if (!qword_26A4EC3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3D8);
  }
  return result;
}

unint64_t sub_25B338484()
{
  unint64_t result = qword_26B3416A0;
  if (!qword_26B3416A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3416A0);
  }
  return result;
}

unint64_t sub_25B3384DC()
{
  unint64_t result = qword_26B341698;
  if (!qword_26B341698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341698);
  }
  return result;
}

unint64_t sub_25B338534()
{
  unint64_t result = qword_26B340C50;
  if (!qword_26B340C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C50);
  }
  return result;
}

unint64_t sub_25B33858C()
{
  unint64_t result = qword_26B340C48;
  if (!qword_26B340C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340C48);
  }
  return result;
}

unint64_t sub_25B3385E4()
{
  unint64_t result = qword_26B340E20;
  if (!qword_26B340E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E20);
  }
  return result;
}

unint64_t sub_25B33863C()
{
  unint64_t result = qword_26B340E18;
  if (!qword_26B340E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340E18);
  }
  return result;
}

unint64_t sub_25B338694()
{
  unint64_t result = qword_26B3410F0;
  if (!qword_26B3410F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3410F0);
  }
  return result;
}

unint64_t sub_25B3386EC()
{
  unint64_t result = qword_26B3410E8;
  if (!qword_26B3410E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3410E8);
  }
  return result;
}

unint64_t sub_25B338744()
{
  unint64_t result = qword_26B341820;
  if (!qword_26B341820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341820);
  }
  return result;
}

unint64_t sub_25B33879C()
{
  unint64_t result = qword_26B341818;
  if (!qword_26B341818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341818);
  }
  return result;
}

unint64_t sub_25B3387F4()
{
  unint64_t result = qword_26A4EC3E0;
  if (!qword_26A4EC3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3E0);
  }
  return result;
}

unint64_t sub_25B33884C()
{
  unint64_t result = qword_26A4EC3E8;
  if (!qword_26A4EC3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3E8);
  }
  return result;
}

unint64_t sub_25B3388A4()
{
  unint64_t result = qword_26A4EC3F0;
  if (!qword_26A4EC3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3F0);
  }
  return result;
}

unint64_t sub_25B3388FC()
{
  unint64_t result = qword_26A4EC3F8;
  if (!qword_26A4EC3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC3F8);
  }
  return result;
}

unint64_t sub_25B338954()
{
  unint64_t result = qword_26A4EC400;
  if (!qword_26A4EC400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC400);
  }
  return result;
}

unint64_t sub_25B3389AC()
{
  unint64_t result = qword_26A4EC408;
  if (!qword_26A4EC408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC408);
  }
  return result;
}

unint64_t sub_25B338A04()
{
  unint64_t result = qword_26A4EC410;
  if (!qword_26A4EC410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC410);
  }
  return result;
}

unint64_t sub_25B338A5C()
{
  unint64_t result = qword_26A4EC418;
  if (!qword_26A4EC418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC418);
  }
  return result;
}

unint64_t sub_25B338AB4()
{
  unint64_t result = qword_26B341680;
  if (!qword_26B341680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341680);
  }
  return result;
}

unint64_t sub_25B338B0C()
{
  unint64_t result = qword_26B341678;
  if (!qword_26B341678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341678);
  }
  return result;
}

uint64_t sub_25B338B60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B338C6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE900000000000073;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B338D6C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x444964726F636572 && a2 == 0xE900000000000073 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461446863746566 && a2 == 0xE900000000000061 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C69466863746566 && a2 == 0xEA00000000007365 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_25B338F74(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000025B38B600)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_25B338FFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6567617373656DLL && a2 == 0xE700000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656972746572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_25B339154(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000025B38B5E0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_25B3391DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616E7265746E69 && a2 == 0xEB00000000734449;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025B38B620 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x655264656C696166 && a2 == 0xEF73444964726F63)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_25B339368()
{
  unint64_t result = qword_26A4EB608;
  if (!qword_26A4EB608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EB608);
  }
  return result;
}

uint64_t sub_25B3393BC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t ReplicatorDevice.isPaired.getter()
{
  uint64_t v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v1 - 8);
  char v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  sub_25B3400EC(v0 + *(int *)(v4 + 48), (uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 4, v5);
  if ((v6 - 2) < 2) {
    return 1;
  }
  if (v6)
  {
    sub_25B340154((uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
    return 0;
  }
  else
  {
    uint64_t v8 = sub_25B37F640();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v3, v8);
    return 1;
  }
}

uint64_t type metadata accessor for ReplicatorDevice.RelationshipState(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B341500);
}

uint64_t type metadata accessor for ReplicatorDevice(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B341510);
}

ReplicatorServices::ReplicatorDevice::DeviceType_optional __swiftcall ReplicatorDevice.DeviceType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 6;
  if ((unint64_t)rawValue < 6) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (ReplicatorServices::ReplicatorDevice::DeviceType_optional)rawValue;
}

uint64_t ReplicatorDevice.DeviceType.rawValue.getter()
{
  return *v0;
}

ReplicatorServices::ReplicatorDevice::DeviceType_optional sub_25B339650(Swift::Int *a1)
{
  return ReplicatorDevice.DeviceType.init(rawValue:)(*a1);
}

uint64_t sub_25B339658()
{
  return sub_25B37FAB0();
}

uint64_t sub_25B3396B8()
{
  return sub_25B37FA90();
}

double ReplicatorDevice.Screen.size.getter()
{
  return *(double *)v0;
}

void ReplicatorDevice.Screen.size.setter(double a1, double a2)
{
  *char v2 = a1;
  v2[1] = a2;
}

uint64_t (*ReplicatorDevice.Screen.size.modify())()
{
  return nullsub_1;
}

double ReplicatorDevice.Screen.scale.getter()
{
  return *(double *)(v0 + 16);
}

void ReplicatorDevice.Screen.scale.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*ReplicatorDevice.Screen.scale.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.Screen.cornerRadius.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ReplicatorDevice.Screen.cornerRadius.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*ReplicatorDevice.Screen.cornerRadius.modify())()
{
  return nullsub_1;
}

void ReplicatorDevice.Screen.init(size:scale:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

uint64_t ReplicatorDevice.Screen.init(size:scale:cornerRadius:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(void *)(a3 + 24) = result;
  *(unsigned char *)(a3 + 32) = a2 & 1;
  return result;
}

uint64_t ReplicatorDevice.Screen.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  sub_25B380280();
  sub_25B380280();
  sub_25B380270();
  if (v1 != 1) {
    sub_25B380280();
  }
  return sub_25B380280();
}

uint64_t sub_25B339864()
{
  uint64_t v1 = 0x656C616373;
  if (*v0 != 1) {
    uint64_t v1 = 0x615272656E726F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1702521203;
  }
}

uint64_t sub_25B3398BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B3439DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B3398E4(uint64_t a1)
{
  unint64_t v2 = sub_25B33F51C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B339920(uint64_t a1)
{
  unint64_t v2 = sub_25B33F51C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorDevice.Screen.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC440);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v14 = v1[3];
  char v11 = *((unsigned char *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33F51C();
  sub_25B3802C0();
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  char v15 = 0;
  type metadata accessor for CGSize(0);
  sub_25B33F5C4(&qword_26A4EC450, type metadata accessor for CGSize);
  sub_25B380160();
  if (!v2)
  {
    uint64_t v12 = v14;
    uint64_t v16 = v10;
    char v15 = 1;
    sub_25B33F570();
    sub_25B380160();
    uint64_t v16 = v12;
    LOBYTE(v17) = v11;
    char v15 = 2;
    sub_25B380120();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicatorDevice.Screen.hashValue.getter()
{
  return sub_25B380290();
}

uint64_t ReplicatorDevice.Screen.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC460);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33F51C();
  sub_25B3802B0();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    char v16 = 0;
    sub_25B33F5C4(&qword_26A4EC468, type metadata accessor for CGSize);
    sub_25B3800B0();
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    char v16 = 1;
    sub_25B33F60C();
    sub_25B3800B0();
    uint64_t v12 = v17;
    char v16 = 2;
    sub_25B380070();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v17;
    char v14 = v18;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    *(unsigned char *)(a2 + 32) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B339E58()
{
  return sub_25B380290();
}

uint64_t sub_25B339EC0()
{
  return sub_25B380290();
}

uint64_t sub_25B339F20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.Screen.init(from:)(a1, a2);
}

uint64_t sub_25B339F38(void *a1)
{
  return ReplicatorDevice.Screen.encode(to:)(a1);
}

uint64_t ReplicatorDevice.RelationshipState.hash(into:)()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B3400EC(v0, (uint64_t)v7, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 4, v8))
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      uint64_t result = sub_25B380260();
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      sub_25B380260();
      sub_25B33F5C4(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
  return result;
}

uint64_t sub_25B33A18C()
{
  uint64_t result = 0x6375646F72746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E6972696170;
      break;
    case 2:
      uint64_t result = 0x646572696170;
      break;
    case 3:
      uint64_t result = 0x6E6974617267696DLL;
      break;
    case 4:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B33A23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B343B34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B33A264(uint64_t a1)
{
  unint64_t v2 = sub_25B33F660();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A2A0(uint64_t a1)
{
  unint64_t v2 = sub_25B33F660();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B33A2DC()
{
  return 0;
}

uint64_t sub_25B33A2E8(uint64_t a1)
{
  unint64_t v2 = sub_25B33F804();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A324(uint64_t a1)
{
  unint64_t v2 = sub_25B33F804();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B33A360()
{
  return 1836020326;
}

uint64_t sub_25B33A370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1836020326 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B33A3F8(uint64_t a1)
{
  unint64_t v2 = sub_25B33F708();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A434(uint64_t a1)
{
  unint64_t v2 = sub_25B33F708();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B33A470@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_25B33A4A0(uint64_t a1)
{
  unint64_t v2 = sub_25B33F75C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A4DC(uint64_t a1)
{
  unint64_t v2 = sub_25B33F75C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B33A518(uint64_t a1)
{
  unint64_t v2 = sub_25B33F7B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A554(uint64_t a1)
{
  unint64_t v2 = sub_25B33F7B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B33A590(uint64_t a1)
{
  unint64_t v2 = sub_25B33F6B4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33A5CC(uint64_t a1)
{
  unint64_t v2 = sub_25B33F6B4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorDevice.RelationshipState.encode(to:)(void *a1)
{
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC478);
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v36 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC480);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v39 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B37F640();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v37 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC488);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC490);
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC498);
  uint64_t v30 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4A0);
  uint64_t v45 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33F660();
  sub_25B3802C0();
  sub_25B3400EC(v46, (uint64_t)v17, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v17, 4, v21))
  {
    case 1u:
      char v47 = 0;
      sub_25B33F804();
      sub_25B3800E0();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
      goto LABEL_7;
    case 2u:
      char v48 = 1;
      sub_25B33F7B0();
      sub_25B3800E0();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
      goto LABEL_7;
    case 3u:
      char v49 = 2;
      sub_25B33F75C();
      uint64_t v28 = v33;
      sub_25B3800E0();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v35);
      goto LABEL_7;
    case 4u:
      char v51 = 4;
      sub_25B33F6B4();
      uint64_t v29 = v36;
      sub_25B3800E0();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v40);
LABEL_7:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v20, v18);
      break;
    default:
      uint64_t v23 = v41;
      uint64_t v22 = v42;
      uint64_t v24 = v37;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v37, v17, v42);
      char v50 = 3;
      sub_25B33F708();
      int v25 = v39;
      sub_25B3800E0();
      sub_25B33F5C4(&qword_26A4EB370, MEMORY[0x263F07508]);
      uint64_t v26 = v44;
      sub_25B380160();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v26);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v22);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v20, v18);
      break;
  }
  return result;
}

uint64_t ReplicatorDevice.RelationshipState.hashValue.getter()
{
  return sub_25B33E048((void (*)(unsigned char *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t ReplicatorDevice.RelationshipState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4D8);
  uint64_t v64 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v62 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4E0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v59 = v5;
  MEMORY[0x270FA5388](v4);
  id v61 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4E8);
  uint64_t v57 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v60 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4F0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  uint64_t v56 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v66 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC4F8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  uint64_t v54 = v12;
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC500);
  uint64_t v65 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = a1[3];
  uint64_t v69 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_25B33F660();
  uint64_t v25 = v70;
  sub_25B3802B0();
  if (v25) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  }
  uint64_t v70 = v18;
  char v51 = v21;
  uint64_t v52 = v23;
  uint64_t v26 = v66;
  uint64_t v27 = v67;
  uint64_t v28 = v68;
  uint64_t v29 = sub_25B3800D0();
  if (*(void *)(v29 + 16) != 1)
  {
    uint64_t v35 = sub_25B37FEC0();
    swift_allocError();
    uint64_t v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC508);
    *uint64_t v37 = v70;
    sub_25B380020();
    sub_25B37FEB0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCB0], v35);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  }
  uint64_t v30 = v15;
  uint64_t v31 = v28;
  uint64_t v32 = v64;
  switch(*(unsigned char *)(v29 + 32))
  {
    case 1:
      char v72 = 1;
      sub_25B33F7B0();
      sub_25B380010();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v55);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v30);
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      uint64_t v34 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v52, 2, 4, v38);
      break;
    case 2:
      char v73 = 2;
      sub_25B33F75C();
      uint64_t v39 = v60;
      sub_25B380010();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v30);
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      uint64_t v34 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v52, 3, 4, v43);
      break;
    case 3:
      char v74 = 3;
      sub_25B33F708();
      uint64_t v40 = v61;
      sub_25B380010();
      sub_25B37F640();
      sub_25B33F5C4((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
      uint64_t v44 = (uint64_t)v51;
      uint64_t v45 = v58;
      sub_25B3800B0();
      uint64_t v46 = v65;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v30);
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v44, 0, 4, v49);
      uint64_t v34 = (uint64_t)v52;
      sub_25B3444AC(v44, (uint64_t)v52, type metadata accessor for ReplicatorDevice.RelationshipState);
      break;
    case 4:
      char v75 = 4;
      sub_25B33F6B4();
      uint64_t v41 = v62;
      sub_25B380010();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v30);
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      uint64_t v34 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v52, 4, 4, v47);
      break;
    default:
      char v71 = 0;
      sub_25B33F804();
      sub_25B380010();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v30);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
      uint64_t v34 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v52, 1, 4, v33);
      break;
  }
  uint64_t v48 = (uint64_t)v69;
  sub_25B3444AC(v34, v63, type metadata accessor for ReplicatorDevice.RelationshipState);
  return __swift_destroy_boxed_opaque_existential_1(v48);
}

uint64_t sub_25B33B7A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.RelationshipState.init(from:)(a1, a2);
}

uint64_t sub_25B33B7BC(void *a1)
{
  return ReplicatorDevice.RelationshipState.encode(to:)(a1);
}

uint64_t sub_25B33B7D8(uint64_t a1, uint64_t a2)
{
  return sub_25B33EC64(a1, a2, (void (*)(unsigned char *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t sub_25B33B7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B33ECC8(a1, a2, a3, (void (*)(unsigned char *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t ReplicatorDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t ReplicatorDevice.id.setter(uint64_t a1)
{
  uint64_t v3 = sub_25B37F640();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*ReplicatorDevice.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.relationshipID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 20);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ReplicatorDevice.relationshipID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 20);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*ReplicatorDevice.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.name.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.name.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorDevice.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 28));
  *a1 = result;
  return result;
}

uint64_t ReplicatorDevice.protocolVersion.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = type metadata accessor for ReplicatorDevice(0);
  uint64_t v5 = (void *)(v1 + *(int *)(result + 28));
  *uint64_t v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*ReplicatorDevice.protocolVersion.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.deviceType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ReplicatorDevice(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ReplicatorDevice.deviceType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ReplicatorDevice(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ReplicatorDevice.deviceType.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorDevice.screen.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 36);
  char v4 = *(unsigned char *)(v3 + 32);
  char v5 = *(unsigned char *)(v3 + 33);
  __n128 result = *(__n128 *)v3;
  long long v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 33) = v5;
  return result;
}

__n128 ReplicatorDevice.screen.setter(__n128 *a1)
{
  __n128 v8 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unsigned __int8 v5 = a1[2].n128_u8[1];
  uint64_t v6 = (__n128 *)(v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 36));
  __n128 result = v8;
  *uint64_t v6 = v8;
  v6[1].n128_u64[0] = v2;
  v6[1].n128_u64[1] = v3;
  v6[2].n128_u8[0] = v4;
  v6[2].n128_u8[1] = v5;
  return result;
}

uint64_t (*ReplicatorDevice.screen.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.zones.getter()
{
  type metadata accessor for ReplicatorDevice(0);
  return swift_bridgeObjectRetain();
}

uint64_t ReplicatorDevice.zones.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ReplicatorDevice(0) + 40);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.zones.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.messageTypes.getter()
{
  type metadata accessor for ReplicatorDevice(0);
  return swift_bridgeObjectRetain();
}

uint64_t ReplicatorDevice.messageTypes.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ReplicatorDevice(0) + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.messageTypes.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.relationshipState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ReplicatorDevice(0);
  return sub_25B3400EC(v1 + *(int *)(v3 + 48), a1, type metadata accessor for ReplicatorDevice.RelationshipState);
}

uint64_t ReplicatorDevice.relationshipState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 48);
  return sub_25B33F858(a1, v3);
}

uint64_t (*ReplicatorDevice.relationshipState.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.initialPairingDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 52);
  uint64_t v4 = sub_25B37F5D0();
  unsigned __int8 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ReplicatorDevice.initialPairingDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 52);
  uint64_t v4 = sub_25B37F5D0();
  unsigned __int8 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*ReplicatorDevice.initialPairingDate.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.isBlocked.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 56));
}

uint64_t ReplicatorDevice.isBlocked.setter(char a1)
{
  uint64_t result = type metadata accessor for ReplicatorDevice(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.isBlocked.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.marketingName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.marketingName.setter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned __int8 v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.marketingName.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.productType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.productType.setter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned __int8 v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.productType.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.personaID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.personaID.setter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v5 = (void *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 68));
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned __int8 v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.personaID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.init(id:relationshipID:name:protocolVersion:deviceType:screen:zones:messageTypes:relationshipState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 *a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v58 = a8;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a10;
  uint64_t v52 = a6;
  uint64_t v53 = a11;
  uint64_t v59 = sub_25B37F5D0();
  uint64_t v57 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v60 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v19;
  uint64_t v20 = sub_25B37F640();
  uint64_t v21 = *(void **)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v44 - v25;
  uint64_t v27 = *a5;
  uint64_t v45 = a5[1];
  uint64_t v46 = v27;
  LODWORD(v52) = *v52;
  long long v51 = *a7;
  uint64_t v28 = *((void *)a7 + 2);
  uint64_t v49 = *((void *)a7 + 3);
  uint64_t v50 = v28;
  LODWORD(v28) = *((unsigned __int8 *)a7 + 32);
  int v47 = *((unsigned __int8 *)a7 + 33);
  int v48 = v28;
  uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  v29((char *)&v44 - v25, a1, v20);
  v29(v24, a2, v20);
  uint64_t v30 = v53;
  sub_25B3400EC((uint64_t)v53, (uint64_t)v19, type metadata accessor for ReplicatorDevice.RelationshipState);
  sub_25B37F5C0();
  sub_25B340154((uint64_t)v30, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v31 = (void (*)(uint64_t, uint64_t))v21[1];
  v31(a2, v20);
  v31(a1, v20);
  uint64_t v32 = (int *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v33 = a9 + v32[9];
  uint64_t v34 = (void *)(a9 + v32[15]);
  uint64_t v53 = (void *)(a9 + v32[16]);
  uint64_t v35 = (void *)(a9 + v32[17]);
  uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v21[4];
  v36(a9, v26, v20);
  v36(a9 + v32[5], v24, v20);
  uint64_t v37 = (void *)(a9 + v32[6]);
  uint64_t v38 = v55;
  *uint64_t v37 = v54;
  v37[1] = v38;
  uint64_t v39 = (void *)(a9 + v32[7]);
  uint64_t v40 = v45;
  *uint64_t v39 = v46;
  v39[1] = v40;
  *(unsigned char *)(a9 + v32[8]) = (_BYTE)v52;
  *(_OWORD *)uint64_t v33 = v51;
  uint64_t v41 = v49;
  *(void *)(v33 + 16) = v50;
  *(void *)(v33 + 24) = v41;
  *(unsigned char *)(v33 + 32) = v48;
  *(unsigned char *)(v33 + 33) = v47;
  *(void *)(a9 + v32[10]) = v58;
  *(void *)(a9 + v32[11]) = v56;
  sub_25B3444AC((uint64_t)v44, a9 + v32[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))(a9 + v32[13], v60, v59);
  *(unsigned char *)(a9 + v32[14]) = 0;
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v43 = v53;
  *uint64_t v53 = 0;
  v43[1] = 0;
  *uint64_t v35 = 0;
  v35[1] = 0;
  return result;
}

uint64_t ReplicatorDevice.init(id:relationshipID:name:protocolVersion:deviceType:screen:zones:messageTypes:relationshipState:initialPairingDate:isBlocked:marketingName:productType:personaID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char *a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v33 = a5[1];
  uint64_t v34 = *a5;
  char v40 = *a6;
  long long v39 = *a7;
  uint64_t v37 = *((void *)a7 + 3);
  uint64_t v38 = *((void *)a7 + 2);
  char v35 = *((unsigned char *)a7 + 33);
  char v36 = *((unsigned char *)a7 + 32);
  uint64_t v21 = (int *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v22 = a9 + v21[9];
  uint64_t v23 = (void *)(a9 + v21[15]);
  uint64_t v24 = (void *)(a9 + v21[16]);
  uint64_t v25 = (void *)(a9 + v21[17]);
  uint64_t v26 = sub_25B37F640();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32);
  v27(a9, a1, v26);
  v27(a9 + v21[5], a2, v26);
  uint64_t v28 = (void *)(a9 + v21[6]);
  *uint64_t v28 = a3;
  v28[1] = a4;
  uint64_t v29 = (void *)(a9 + v21[7]);
  *uint64_t v29 = v34;
  v29[1] = v33;
  *(unsigned char *)(a9 + v21[8]) = v40;
  *(_OWORD *)uint64_t v22 = v39;
  *(void *)(v22 + 16) = v38;
  *(void *)(v22 + 24) = v37;
  *(unsigned char *)(v22 + 32) = v36;
  *(unsigned char *)(v22 + 33) = v35;
  *(void *)(a9 + v21[10]) = a8;
  *(void *)(a9 + v21[11]) = a10;
  sub_25B3444AC(a11, a9 + v21[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v30 = a9 + v21[13];
  uint64_t v31 = sub_25B37F5D0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v30, a12, v31);
  *(unsigned char *)(a9 + v21[14]) = a13;
  *uint64_t v23 = a14;
  v23[1] = a15;
  *uint64_t v24 = a16;
  v24[1] = a17;
  *uint64_t v25 = a18;
  v25[1] = a19;
  return result;
}

uint64_t ReplicatorDevice.init(id:relationshipID:name:protocolVersion:deviceType:screen:zones:messageTypes:relationshipState:initialPairingDate:isBlocked:marketingName:productType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char *a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v31 = a5[1];
  uint64_t v32 = *a5;
  char v38 = *a6;
  long long v37 = *a7;
  uint64_t v35 = *((void *)a7 + 3);
  uint64_t v36 = *((void *)a7 + 2);
  char v33 = *((unsigned char *)a7 + 33);
  char v34 = *((unsigned char *)a7 + 32);
  uint64_t v19 = (int *)type metadata accessor for ReplicatorDevice(0);
  uint64_t v20 = a9 + v19[9];
  uint64_t v21 = (void *)(a9 + v19[15]);
  uint64_t v22 = (void *)(a9 + v19[16]);
  uint64_t v23 = (void *)(a9 + v19[17]);
  uint64_t v24 = sub_25B37F640();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32);
  v25(a9, a1, v24);
  v25(a9 + v19[5], a2, v24);
  uint64_t v26 = (void *)(a9 + v19[6]);
  void *v26 = a3;
  v26[1] = a4;
  uint64_t v27 = (void *)(a9 + v19[7]);
  *uint64_t v27 = v32;
  v27[1] = v31;
  *(unsigned char *)(a9 + v19[8]) = v38;
  *(_OWORD *)uint64_t v20 = v37;
  *(void *)(v20 + 16) = v36;
  *(void *)(v20 + 24) = v35;
  *(unsigned char *)(v20 + 32) = v34;
  *(unsigned char *)(v20 + 33) = v33;
  *(void *)(a9 + v19[10]) = a8;
  *(void *)(a9 + v19[11]) = a10;
  sub_25B3444AC(a11, a9 + v19[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v28 = a9 + v19[13];
  uint64_t v29 = sub_25B37F5D0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v28, a12, v29);
  *(unsigned char *)(a9 + v19[14]) = a13;
  *uint64_t v21 = a14;
  v21[1] = a15;
  *uint64_t v22 = a16;
  v22[1] = a17;
  *uint64_t v23 = 0;
  v23[1] = 0;
  return result;
}

uint64_t sub_25B33CC74(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v32 = result;
  uint64_t v33 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v41 = a2 + 56;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v35 = (v6 - 1) & v6;
  int64_t v36 = v3;
  for (unint64_t i = __clz(__rbit64(v6)) | (v3 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(result + 48) + 48 * i);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    uint64_t v17 = v12[4];
    uint64_t v18 = v12[5];
    sub_25B380250();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v40 = v15;
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v39 = v17;
    sub_25B380280();
    uint64_t v38 = v18;
    sub_25B380280();
    uint64_t v19 = sub_25B380290();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v22 = ~v20;
    uint64_t v23 = *(void *)(a2 + 48);
    while (1)
    {
      uint64_t v25 = (void *)(v23 + 48 * v21);
      uint64_t v26 = v25[2];
      uint64_t v27 = v25[3];
      uint64_t v28 = v25[4];
      uint64_t v29 = v25[5];
      BOOL v30 = *v25 == v14 && v25[1] == v13;
      if (v30 || (sub_25B3801A0() & 1) != 0)
      {
        BOOL v31 = v26 == v40 && v27 == v16;
        if (v31 || (sub_25B3801A0()) && v28 == v39 && v29 == v38) {
          break;
        }
      }
      unint64_t v21 = (v21 + 1) & v22;
      if (((*(void *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v3 = v36;
    uint64_t v2 = a2;
    uint64_t result = v32;
    unint64_t v6 = v35;
    if (v35) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v8 >= v34) {
      return 1;
    }
    unint64_t v9 = *(void *)(v33 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v8 + 1;
      if (v8 + 1 >= v34) {
        return 1;
      }
      unint64_t v9 = *(void *)(v33 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v8 + 2;
        if (v8 + 2 >= v34) {
          return 1;
        }
        unint64_t v9 = *(void *)(v33 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v8 + 3;
          if (v8 + 3 >= v34) {
            return 1;
          }
          unint64_t v9 = *(void *)(v33 + 8 * v10);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v35 = (v9 - 1) & v9;
    int64_t v36 = v10;
  }
  int64_t v11 = v8 + 4;
  if (v11 >= v34) {
    return 1;
  }
  unint64_t v9 = *(void *)(v33 + 8 * v11);
  if (v9)
  {
    int64_t v10 = v11;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v34) {
      return 1;
    }
    unint64_t v9 = *(void *)(v33 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_24;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_25B33CFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  int64_t v10 = (char *)&v33 - v9;
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v14 = (char *)&v33 - v13;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v15 = 0;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v35 = a1;
  uint64_t v36 = a1 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  int64_t v37 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v20 = a2 + 56;
  uint64_t v34 = v12;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v38 = (v19 - 1) & v19;
  int64_t v39 = v15;
  for (unint64_t i = __clz(__rbit64(v19)) | (v15 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void *)(v12 + 72);
    sub_25B3400EC(*(void *)(a1 + 48) + v26 * i, (uint64_t)v14, type metadata accessor for ReplicatorDevice);
    uint64_t v27 = v14;
    sub_25B3444AC((uint64_t)v14, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
    sub_25B380250();
    ReplicatorDevice.hash(into:)((uint64_t)v40);
    uint64_t v28 = sub_25B380290();
    uint64_t v29 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v30 = v28 & ~v29;
    if (((*(void *)(v20 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    {
LABEL_29:
      sub_25B340154((uint64_t)v10, type metadata accessor for ReplicatorDevice);
      return 0;
    }
    uint64_t v31 = ~v29;
    while (1)
    {
      sub_25B3400EC(*(void *)(a2 + 48) + v30 * v26, (uint64_t)v7, type metadata accessor for ReplicatorDevice);
      char v32 = _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v10);
      sub_25B340154((uint64_t)v7, type metadata accessor for ReplicatorDevice);
      if (v32) {
        break;
      }
      unint64_t v30 = (v30 + 1) & v31;
      if (((*(void *)(v20 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
        goto LABEL_29;
      }
    }
    uint64_t result = sub_25B340154((uint64_t)v10, type metadata accessor for ReplicatorDevice);
    uint64_t v12 = v34;
    a1 = v35;
    uint64_t v14 = v27;
    unint64_t v19 = v38;
    int64_t v15 = v39;
    if (v38) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v37) {
      return 1;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    int64_t v24 = v15 + 1;
    if (!v23)
    {
      int64_t v24 = v22 + 1;
      if (v22 + 1 >= v37) {
        return 1;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v22 + 2;
        if (v22 + 2 >= v37) {
          return 1;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v22 + 3;
          if (v22 + 3 >= v37) {
            return 1;
          }
          unint64_t v23 = *(void *)(v36 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v38 = (v23 - 1) & v23;
    int64_t v39 = v24;
  }
  int64_t v25 = v22 + 4;
  if (v25 >= v37) {
    return 1;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v25;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v37) {
      return 1;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_24;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t ReplicatorDevice.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v8 - 8);
  int64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_25B33F5C4(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F950();
  int64_t v11 = (int *)type metadata accessor for ReplicatorDevice(0);
  sub_25B37F950();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  swift_bridgeObjectRelease();
  sub_25B380280();
  sub_25B380280();
  sub_25B380260();
  sub_25B33FD24(v1 + v11[9], (uint64_t)v17);
  sub_25B33ED0C();
  uint64_t v12 = *(void *)(v1 + v11[10]);
  swift_bridgeObjectRetain();
  sub_25B33EDDC(a1, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v2 + v11[11]);
  swift_bridgeObjectRetain();
  sub_25B33EDDC(a1, v13);
  swift_bridgeObjectRelease();
  sub_25B3400EC(v2 + v11[12], (uint64_t)v10, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v10, 4, v14))
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      sub_25B380260();
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      sub_25B380260();
      sub_25B37F950();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
  }
  sub_25B37F5D0();
  sub_25B33F5C4(&qword_26A4EC518, MEMORY[0x263F07490]);
  sub_25B37F950();
  sub_25B380270();
  if (*(void *)(v2 + v11[15] + 8))
  {
    sub_25B380270();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_25B380270();
  }
  if (*(void *)(v2 + v11[16] + 8))
  {
    sub_25B380270();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_25B380270();
  }
  if (!*(void *)(v2 + v11[17] + 8)) {
    return sub_25B380270();
  }
  sub_25B380270();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  return swift_bridgeObjectRelease();
}

unint64_t sub_25B33D804(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6974616C6572;
      break;
    case 2:
      unint64_t result = 1701667182;
      break;
    case 3:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 4:
      unint64_t result = 0x7954656369766564;
      break;
    case 5:
      unint64_t result = 0x6E6565726373;
      break;
    case 6:
      unint64_t result = 0x73656E6F7ALL;
      break;
    case 7:
      unint64_t result = 0x546567617373656DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0x656B636F6C427369;
      break;
    case 11:
      unint64_t result = 0x6E6974656B72616DLL;
      break;
    case 12:
      unint64_t result = 0x54746375646F7270;
      break;
    case 13:
      unint64_t result = 0x49616E6F73726570;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_25B33D9E4()
{
  return sub_25B33D804(*v0);
}

uint64_t sub_25B33D9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B343D64(a1, a2);
  *a3 = result;
  return result;
}

void sub_25B33DA14(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_25B33DA20(uint64_t a1)
{
  unint64_t v2 = sub_25B33FD8C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B33DA5C(uint64_t a1)
{
  unint64_t v2 = sub_25B33FD8C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorDevice.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC520);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33FD8C();
  sub_25B3802C0();
  LOBYTE(v15[0]) = 0;
  sub_25B37F640();
  sub_25B33F5C4(&qword_26A4EB370, MEMORY[0x263F07508]);
  sub_25B380160();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplicatorDevice(0);
    LOBYTE(v15[0]) = 1;
    sub_25B380160();
    LOBYTE(v15[0]) = 2;
    sub_25B380140();
    v15[0] = *(_OWORD *)(v3 + v9[7]);
    char v18 = 3;
    sub_25B2C8780();
    sub_25B380160();
    LOBYTE(v15[0]) = *(unsigned char *)(v3 + v9[8]);
    char v18 = 4;
    sub_25B33FDE0();
    sub_25B380160();
    uint64_t v10 = v3 + v9[9];
    char v11 = *(unsigned char *)(v10 + 32);
    char v12 = *(unsigned char *)(v10 + 33);
    long long v13 = *(_OWORD *)(v10 + 16);
    v15[0] = *(_OWORD *)v10;
    v15[1] = v13;
    char v16 = v11;
    char v17 = v12;
    char v18 = 5;
    sub_25B33FE34();
    sub_25B380120();
    *(void *)&v15[0] = *(void *)(v3 + v9[10]);
    char v18 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC540);
    sub_25B34002C(&qword_26A4EC548, &qword_26A4EC540, (void (*)(void))sub_25B33FE88);
    sub_25B380160();
    *(void *)&v15[0] = *(void *)(v3 + v9[11]);
    char v18 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC558);
    sub_25B34002C(&qword_26A4EC560, &qword_26A4EC558, (void (*)(void))sub_25B33FEDC);
    sub_25B380160();
    LOBYTE(v15[0]) = 8;
    type metadata accessor for ReplicatorDevice.RelationshipState(0);
    sub_25B33F5C4(&qword_26A4EC570, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice.RelationshipState);
    sub_25B380160();
    LOBYTE(v15[0]) = 9;
    sub_25B37F5D0();
    sub_25B33F5C4(&qword_26A4EC578, MEMORY[0x263F07490]);
    sub_25B380160();
    LOBYTE(v15[0]) = 10;
    sub_25B380150();
    LOBYTE(v15[0]) = 11;
    sub_25B3800F0();
    LOBYTE(v15[0]) = 12;
    sub_25B3800F0();
    LOBYTE(v15[0]) = 13;
    sub_25B3800F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ReplicatorDevice.hashValue.getter()
{
  return sub_25B33E048((void (*)(unsigned char *))ReplicatorDevice.hash(into:));
}

uint64_t sub_25B33E048(void (*a1)(unsigned char *))
{
  sub_25B380250();
  a1(v3);
  return sub_25B380290();
}

uint64_t ReplicatorDevice.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = sub_25B37F5D0();
  uint64_t v63 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v61);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v58 - v11;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC580);
  uint64_t v62 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ReplicatorDevice(0);
  char v16 = (int *)MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = &v18[v16[9]];
  *(_OWORD *)unint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_WORD *)v19 + 16) = 256;
  uint64_t v20 = &v18[v16[15]];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  char v72 = (uint64_t *)v20;
  char v73 = v18;
  unint64_t v21 = &v18[v16[16]];
  *(void *)unint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  char v71 = (uint64_t *)v21;
  char v75 = v16;
  int64_t v22 = &v18[v16[17]];
  *(void *)int64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v68 = a1;
  uint64_t v69 = v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B33FD8C();
  uint64_t v67 = v14;
  unint64_t v23 = v70;
  sub_25B3802B0();
  uint64_t v66 = v7;
  if (v23)
  {
    uint64_t v24 = (uint64_t)v73;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    int v33 = 0;
    int v34 = 0;
    int v40 = 0;
    int64_t v39 = v75;
    goto LABEL_5;
  }
  uint64_t v70 = v6;
  LOBYTE(v76) = 0;
  sub_25B33F5C4((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
  sub_25B3800B0();
  uint64_t v25 = (uint64_t)v73;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v58(v73, v12, v7);
  LOBYTE(v76) = 1;
  sub_25B3800B0();
  uint64_t v26 = v75;
  v58((char *)(v25 + v75[5]), v10, v7);
  LOBYTE(v76) = 2;
  uint64_t v27 = sub_25B380090();
  uint64_t v28 = (uint64_t *)(v25 + v26[6]);
  *uint64_t v28 = v27;
  v28[1] = v29;
  char v80 = 3;
  sub_25B2C8684();
  sub_25B3800B0();
  *(_OWORD *)(v25 + v26[7]) = v76;
  char v80 = 4;
  sub_25B33FF30();
  sub_25B3800B0();
  *(unsigned char *)(v25 + v26[8]) = v76;
  char v80 = 5;
  sub_25B33FF84();
  sub_25B380070();
  char v30 = v78;
  char v31 = v79;
  long long v32 = v77;
  *(_OWORD *)unint64_t v19 = v76;
  *((_OWORD *)v19 + 1) = v32;
  v19[32] = v30;
  v19[33] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC540);
  char v80 = 6;
  sub_25B34002C(&qword_26A4EC598, &qword_26A4EC540, (void (*)(void))sub_25B33FFD8);
  sub_25B3800B0();
  uint64_t v41 = v75;
  *(void *)(v25 + v75[10]) = v76;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC558);
  char v80 = 7;
  sub_25B34002C(&qword_26A4EC5A8, &qword_26A4EC558, (void (*)(void))sub_25B340098);
  sub_25B3800B0();
  *(void *)(v25 + v41[11]) = v76;
  LOBYTE(v76) = 8;
  sub_25B33F5C4(&qword_26A4EC5B8, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v42 = (uint64_t)v70;
  sub_25B3800B0();
  sub_25B3444AC(v42, v25 + v75[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  LOBYTE(v76) = 9;
  sub_25B33F5C4(&qword_26A4EC5C0, MEMORY[0x263F07490]);
  sub_25B3800B0();
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v73[v75[13]], v60, v64);
  LOBYTE(v76) = 10;
  char v43 = sub_25B3800A0();
  uint64_t v70 = 0;
  v73[v75[14]] = v43 & 1;
  LOBYTE(v76) = 11;
  uint64_t v44 = v70;
  uint64_t v45 = sub_25B380030();
  uint64_t v70 = v44;
  if (v44
    || (int v47 = v72, *v72 = v45, v47[1] = v46, LOBYTE(v76) = 12, v48 = v70, v49 = sub_25B380030(), (v70 = v48) != 0))
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    LODWORD(v68) = 1;
    int v40 = 1;
    uint64_t v24 = (uint64_t)v73;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v74 + 8);
    uint64_t v36 = v66;
    v35(v73, v66);
    v35((char *)(v24 + v75[5]), v36);
    int v34 = 1;
    int v33 = 1;
    char v37 = (char)v68;
    int64_t v39 = v75;
    swift_bridgeObjectRelease();
    if (v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
LABEL_5:
    if (!v33)
    {
      if (!v34)
      {
LABEL_7:
        if (!v40)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
LABEL_8:
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v24 + v39[13], v64);
        goto LABEL_9;
      }
LABEL_12:
      sub_25B340154(v24 + v39[12], type metadata accessor for ReplicatorDevice.RelationshipState);
      if ((v40 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  long long v51 = v71;
  *char v71 = v49;
  v51[1] = v50;
  LOBYTE(v76) = 13;
  uint64_t v52 = sub_25B380030();
  uint64_t v70 = 0;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v65);
  uint64_t v56 = v69;
  swift_bridgeObjectRelease();
  *uint64_t v56 = v53;
  v56[1] = v55;
  uint64_t v57 = (uint64_t)v73;
  sub_25B3400EC((uint64_t)v73, v59, type metadata accessor for ReplicatorDevice);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  return sub_25B340154(v57, type metadata accessor for ReplicatorDevice);
}

uint64_t sub_25B33EC18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.init(from:)(a1, a2);
}

uint64_t sub_25B33EC30(void *a1)
{
  return ReplicatorDevice.encode(to:)(a1);
}

uint64_t sub_25B33EC4C(uint64_t a1, uint64_t a2)
{
  return sub_25B33EC64(a1, a2, (void (*)(unsigned char *))ReplicatorDevice.hash(into:));
}

uint64_t sub_25B33EC64(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  sub_25B380250();
  a3(v5);
  return sub_25B380290();
}

uint64_t sub_25B33ECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B33ECC8(a1, a2, a3, (void (*)(unsigned char *))ReplicatorDevice.hash(into:));
}

uint64_t sub_25B33ECC8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_25B380250();
  a4(v6);
  return sub_25B380290();
}

uint64_t sub_25B33ED0C()
{
  sub_25B33FD24(v0, (uint64_t)&v3);
  char v1 = v4;
  sub_25B33FD24(v0, (uint64_t)v5);
  if (v5[33] == 1) {
    return sub_25B380270();
  }
  sub_25B380270();
  sub_25B380280();
  sub_25B380280();
  sub_25B380270();
  if ((v1 & 1) == 0) {
    sub_25B380280();
  }
  return sub_25B380280();
}

uint64_t sub_25B33EDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_25B380260();
  if (v3)
  {
    uint64_t v5 = a2 + 72;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      sub_25B380280();
      sub_25B380280();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_25B33EEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v27 = a1;
  sub_25B380260();
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    unint64_t v15 = v12 + 40;
    uint64_t v16 = v12;
    uint64_t v17 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v25 = v13;
    char v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v26 = v16;
    uint64_t v19 = *(void *)(v16 + 56);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v19;
    while (1)
    {
      v25(v10, v14, v4);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v10, 0, 1, v4);
      uint64_t result = (*v17)(v10, 1, v4);
      if (result == 1) {
        break;
      }
      (*v24)(v7, v10, v4);
      sub_25B33F5C4(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      (*v18)(v7, v4);
      v14 += v23;
      if (!--v11) {
        return v20(v10, 1, 1, v4);
      }
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v20(v10, 1, 1, v4);
  }
  return result;
}

uint64_t _s18ReplicatorServices0A6DeviceV17RelationshipStateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341018);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_25B3400EC(a1, (uint64_t)v14, type metadata accessor for ReplicatorDevice.RelationshipState);
  sub_25B3400EC(a2, v15, type metadata accessor for ReplicatorDevice.RelationshipState);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  switch(v17((uint64_t)v14, 4, v16))
  {
    case 1u:
      if (v17(v15, 4, v16) != 1) {
        goto LABEL_11;
      }
      goto LABEL_5;
    case 2u:
      if (v17(v15, 4, v16) != 2) {
        goto LABEL_11;
      }
      goto LABEL_5;
    case 3u:
      if (v17(v15, 4, v16) != 3) {
        goto LABEL_11;
      }
      goto LABEL_5;
    case 4u:
      if (v17(v15, 4, v16) != 4) {
        goto LABEL_11;
      }
LABEL_5:
      sub_25B340154((uint64_t)v14, type metadata accessor for ReplicatorDevice.RelationshipState);
      char v18 = 1;
      break;
    default:
      sub_25B3400EC((uint64_t)v14, (uint64_t)v10, type metadata accessor for ReplicatorDevice.RelationshipState);
      if (v17(v15, 4, v16))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_11:
        sub_25B2E344C((uint64_t)v14, &qword_26B341018);
        char v18 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
        char v18 = sub_25B37F610();
        uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
        v20(v7, v4);
        v20(v10, v4);
        sub_25B340154((uint64_t)v14, type metadata accessor for ReplicatorDevice.RelationshipState);
      }
      break;
  }
  return v18 & 1;
}

uint64_t _s18ReplicatorServices0A6DeviceV6ScreenV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  char v4 = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  return 1;
}

unint64_t sub_25B33F51C()
{
  unint64_t result = qword_26A4EC448;
  if (!qword_26A4EC448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC448);
  }
  return result;
}

unint64_t sub_25B33F570()
{
  unint64_t result = qword_26A4EC458;
  if (!qword_26A4EC458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC458);
  }
  return result;
}

uint64_t sub_25B33F5C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B33F60C()
{
  unint64_t result = qword_26A4EC470;
  if (!qword_26A4EC470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC470);
  }
  return result;
}

unint64_t sub_25B33F660()
{
  unint64_t result = qword_26A4EC4A8;
  if (!qword_26A4EC4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4A8);
  }
  return result;
}

unint64_t sub_25B33F6B4()
{
  unint64_t result = qword_26A4EC4B0;
  if (!qword_26A4EC4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4B0);
  }
  return result;
}

unint64_t sub_25B33F708()
{
  unint64_t result = qword_26A4EC4B8;
  if (!qword_26A4EC4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4B8);
  }
  return result;
}

unint64_t sub_25B33F75C()
{
  unint64_t result = qword_26A4EC4C0;
  if (!qword_26A4EC4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4C0);
  }
  return result;
}

unint64_t sub_25B33F7B0()
{
  unint64_t result = qword_26A4EC4C8;
  if (!qword_26A4EC4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4C8);
  }
  return result;
}

unint64_t sub_25B33F804()
{
  unint64_t result = qword_26A4EC4D0;
  if (!qword_26A4EC4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC4D0);
  }
  return result;
}

uint64_t sub_25B33F858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B33F8BC(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(unsigned char *, _OWORD *))
{
  uint64_t v6 = *(void *)(a1 + 16);
  a2();
  uint64_t result = sub_25B37FC30();
  uint64_t v11 = result;
  if (v6)
  {
    uint64_t v8 = (_OWORD *)(a1 + 32);
    do
    {
      long long v9 = v8[1];
      v12[0] = *v8;
      v12[1] = v9;
      _OWORD v12[2] = v8[2];
      sub_25B344474((uint64_t)v12);
      a4(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 += 3;
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((sub_25B37F610() & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v4 = (int *)type metadata accessor for ReplicatorDevice(0);
  if ((sub_25B37F610() & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
  {
    char v10 = sub_25B3801A0();
    char v11 = 0;
    if ((v10 & 1) == 0) {
      return v11 & 1;
    }
  }
  uint64_t v12 = v4[7];
  uint64_t v14 = *(void *)(a1 + v12);
  uint64_t v13 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (uint64_t *)(a2 + v12);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (v14 != v17 || v13 != v16) {
    goto LABEL_39;
  }
  uint64_t v19 = v4[9];
  uint64_t v20 = a1 + v19;
  char v21 = *(unsigned char *)(a1 + v19 + 33);
  uint64_t v22 = a2 + v19;
  char v23 = *(unsigned char *)(a2 + v19 + 33);
  if (v21)
  {
    if ((v23 & 1) == 0) {
      goto LABEL_39;
    }
  }
  else
  {
    if (v23) {
      goto LABEL_39;
    }
    BOOL v30 = *(double *)v20 == *(double *)v22 && *(double *)(v20 + 8) == *(double *)(v22 + 8);
    if (!v30 || *(double *)(v20 + 16) != *(double *)(v22 + 16)) {
      goto LABEL_39;
    }
    if (*(unsigned char *)(v20 + 32))
    {
      if ((*(unsigned char *)(v22 + 32) & 1) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      char v11 = 0;
      if ((*(unsigned char *)(v22 + 32) & 1) != 0 || *(double *)(v20 + 24) != *(double *)(v22 + 24)) {
        return v11 & 1;
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + v4[8]) != *(unsigned __int8 *)(a2 + v4[8])
    || (_s18ReplicatorServices0A6DeviceV17RelationshipStateO2eeoiySbAE_AEtFZ_0(a1 + v4[12], a2 + v4[12]) & 1) == 0
    || (sub_25B37F5A0() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[14]) != *(unsigned __int8 *)(a2 + v4[14]))
  {
    goto LABEL_39;
  }
  uint64_t v24 = v4[15];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  if (v26)
  {
    if (!v28) {
      goto LABEL_39;
    }
    if (*v25 != *v27 || v26 != v28)
    {
      char v29 = sub_25B3801A0();
      char v11 = 0;
      if ((v29 & 1) == 0) {
        return v11 & 1;
      }
    }
  }
  else if (v28)
  {
    goto LABEL_39;
  }
  uint64_t v33 = v4[16];
  int v34 = (void *)(a1 + v33);
  uint64_t v35 = *(void *)(a1 + v33 + 8);
  uint64_t v36 = (void *)(a2 + v33);
  uint64_t v37 = v36[1];
  if (v35)
  {
    if (!v37) {
      goto LABEL_39;
    }
    if (*v34 != *v36 || v35 != v37)
    {
      char v38 = sub_25B3801A0();
      char v11 = 0;
      if ((v38 & 1) == 0) {
        return v11 & 1;
      }
    }
  }
  else if (v37)
  {
    goto LABEL_39;
  }
  uint64_t v39 = v4[17];
  int v40 = (void *)(a1 + v39);
  uint64_t v41 = *(void *)(a1 + v39 + 8);
  uint64_t v42 = (void *)(a2 + v39);
  uint64_t v43 = v42[1];
  if (!v41)
  {
    if (!v43) {
      goto LABEL_56;
    }
LABEL_39:
    char v11 = 0;
    return v11 & 1;
  }
  if (!v43) {
    goto LABEL_39;
  }
  if (*v40 == *v42 && v41 == v43 || (v44 = sub_25B3801A0(), char v11 = 0, (v44 & 1) != 0))
  {
LABEL_56:
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v46 = sub_25B33F8BC(v45, (void (*)(void))sub_25B344420, (uint64_t)&type metadata for ReplicatorZone, (void (*)(unsigned char *, _OWORD *))sub_25B35622C);
    swift_bridgeObjectRelease();
    uint64_t v47 = swift_bridgeObjectRetain();
    uint64_t v48 = sub_25B33F8BC(v47, (void (*)(void))sub_25B344420, (uint64_t)&type metadata for ReplicatorZone, (void (*)(unsigned char *, _OWORD *))sub_25B35622C);
    swift_bridgeObjectRelease();
    char v49 = sub_25B33CC74(v46, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v49)
    {
      uint64_t v50 = swift_bridgeObjectRetain();
      uint64_t v51 = sub_25B33F8BC(v50, (void (*)(void))sub_25B3443CC, (uint64_t)&type metadata for ReplicatorMessageType, (void (*)(unsigned char *, _OWORD *))sub_25B356218);
      swift_bridgeObjectRelease();
      uint64_t v52 = swift_bridgeObjectRetain();
      uint64_t v53 = sub_25B33F8BC(v52, (void (*)(void))sub_25B3443CC, (uint64_t)&type metadata for ReplicatorMessageType, (void (*)(unsigned char *, _OWORD *))sub_25B356218);
      swift_bridgeObjectRelease();
      char v54 = sub_25B33CC74(v51, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v11 = v54;
      return v11 & 1;
    }
    goto LABEL_39;
  }
  return v11 & 1;
}

uint64_t sub_25B33FD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_25B33FD8C()
{
  unint64_t result = qword_26A4EC528;
  if (!qword_26A4EC528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC528);
  }
  return result;
}

unint64_t sub_25B33FDE0()
{
  unint64_t result = qword_26A4EC530;
  if (!qword_26A4EC530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC530);
  }
  return result;
}

unint64_t sub_25B33FE34()
{
  unint64_t result = qword_26A4EC538;
  if (!qword_26A4EC538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC538);
  }
  return result;
}

unint64_t sub_25B33FE88()
{
  unint64_t result = qword_26A4EC550;
  if (!qword_26A4EC550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC550);
  }
  return result;
}

unint64_t sub_25B33FEDC()
{
  unint64_t result = qword_26A4EC568;
  if (!qword_26A4EC568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC568);
  }
  return result;
}

unint64_t sub_25B33FF30()
{
  unint64_t result = qword_26A4EC588;
  if (!qword_26A4EC588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC588);
  }
  return result;
}

unint64_t sub_25B33FF84()
{
  unint64_t result = qword_26A4EC590;
  if (!qword_26A4EC590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC590);
  }
  return result;
}

unint64_t sub_25B33FFD8()
{
  unint64_t result = qword_26A4EC5A0;
  if (!qword_26A4EC5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5A0);
  }
  return result;
}

uint64_t sub_25B34002C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B340098()
{
  unint64_t result = qword_26A4EC5B0;
  if (!qword_26A4EC5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5B0);
  }
  return result;
}

uint64_t sub_25B3400EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B340154(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_25B3401B8()
{
  unint64_t result = qword_26A4EC5C8;
  if (!qword_26A4EC5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5C8);
  }
  return result;
}

unint64_t sub_25B340210()
{
  unint64_t result = qword_26A4EC5D0;
  if (!qword_26A4EC5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5D0);
  }
  return result;
}

uint64_t sub_25B340264()
{
  return sub_25B33F5C4(&qword_26A4EC5D8, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice.RelationshipState);
}

uint64_t sub_25B3402AC()
{
  return sub_25B33F5C4(&qword_26B340FA0, MEMORY[0x263F07508]);
}

uint64_t sub_25B3402F4()
{
  return sub_25B33F5C4(&qword_26B341028, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
}

char *initializeBufferWithCopyOfBuffer for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B37F640();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    char v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)char v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
    uint64_t v14 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    long long v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v17;
    *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
    uint64_t v18 = a3[11];
    *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
    *(void *)&a1[v18] = *(void *)&a2[v18];
    uint64_t v19 = a3[12];
    uint64_t v20 = &a1[v19];
    char v21 = &a2[v19];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 4, v22))
    {
      uint64_t v24 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v8(v20, v21, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
    }
    uint64_t v26 = a3[13];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    uint64_t v29 = sub_25B37F5D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    uint64_t v30 = a3[15];
    a1[a3[14]] = a2[a3[14]];
    char v31 = &a1[v30];
    long long v32 = &a2[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)char v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    uint64_t v34 = a3[16];
    uint64_t v35 = a3[17];
    uint64_t v36 = &a1[v34];
    uint64_t v37 = &a2[v34];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = &a1[v35];
    int v40 = &a2[v35];
    uint64_t v41 = *((void *)v40 + 1);
    *(void *)uint64_t v39 = *(void *)v40;
    *((void *)v39 + 1) = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ReplicatorDevice(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_25B37F640();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 4, v7)) {
    v5(v6, v4);
  }
  uint64_t v8 = a1 + a2[13];
  uint64_t v9 = sub_25B37F5D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v8];
  char v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_WORD *)v14 + 16) = *((_WORD *)v15 + 16);
  uint64_t v17 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[12];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 4, v21))
  {
    uint64_t v23 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v7(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 4, v21);
  }
  uint64_t v24 = a3[13];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = a3[16];
  uint64_t v33 = a3[17];
  uint64_t v34 = &a1[v32];
  uint64_t v35 = &a2[v32];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  uint64_t v37 = &a1[v33];
  uint64_t v38 = &a2[v33];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v42 + 24);
  v7(a1, a2, v6);
  uint64_t v43 = v7;
  uint64_t v44 = v6;
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  a1[a3[8]] = a2[a3[8]];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v14];
  long long v16 = &a2[v14];
  long long v17 = *(_OWORD *)v16;
  long long v18 = *((_OWORD *)v16 + 1);
  *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
  *(_OWORD *)uint64_t v15 = v17;
  *((_OWORD *)v15 + 1) = v18;
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[12];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 4, v22);
  int v26 = v24(v21, 4, v22);
  if (!v25)
  {
    if (!v26)
    {
      v43(v20, v21, v44);
      goto LABEL_7;
    }
    sub_25B2E344C((uint64_t)v20, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v20, v21, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
LABEL_7:
  uint64_t v28 = a3[13];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  a1[a3[14]] = a2[a3[14]];
  uint64_t v32 = a3[15];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[16];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[17];
  uint64_t v39 = &a1[v38];
  int v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_WORD *)v10 + 16) = *((_WORD *)v11 + 16);
  uint64_t v13 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[12];
  uint64_t v15 = &a1[v14];
  long long v16 = &a2[v14];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 4, v17))
  {
    uint64_t v19 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v7(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 4, v17);
  }
  uint64_t v20 = a3[13];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  uint64_t v25 = a3[17];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  return a1;
}

char *assignWithTake for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v48 + 40);
  v7(a1, a2, v6);
  uint64_t v49 = v6;
  uint64_t v50 = v7;
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (uint64_t *)&a2[v8];
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  long long v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *((_WORD *)v16 + 16) = *((_WORD *)v17 + 16);
  long long v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)long long v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *(void *)&a1[v15] = *(void *)&a2[v15];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[12];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 4, v22);
  int v26 = v24(v21, 4, v22);
  if (!v25)
  {
    if (!v26)
    {
      v50(v20, v21, v49);
      goto LABEL_7;
    }
    sub_25B2E344C((uint64_t)v20, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v20, v21, v49);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
LABEL_7:
  uint64_t v28 = a3[13];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = sub_25B37F5D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (uint64_t *)&a2[v32];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[16];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = (uint64_t *)&a2[v37];
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[17];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = (uint64_t *)&a2[v42];
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *(void *)uint64_t v43 = v46;
  *((void *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B34130C);
}

uint64_t sub_25B34130C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[6] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[12];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = sub_25B37F5D0();
    long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[13];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B3414A4);
}

uint64_t sub_25B3414A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_25B37F640();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[12];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_25B37F5D0();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[13];
  return v16(v18, a2, a2, v17);
}

uint64_t sub_25B341628()
{
  uint64_t result = sub_25B37F640();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ReplicatorDevice.RelationshipState(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_25B37F5D0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.DeviceType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorDevice.DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B3418D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.DeviceType()
{
  return &type metadata for ReplicatorDevice.DeviceType;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.Screen(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.Screen(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.Screen()
{
  return &type metadata for ReplicatorDevice.Screen;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorDevice.RelationshipState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 4, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = sub_25B37F640();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorDevice.RelationshipState(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 4, v2);
  if (!result)
  {
    uint64_t v4 = sub_25B37F640();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *initializeWithCopy for ReplicatorDevice.RelationshipState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_25B37F640();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithCopy for ReplicatorDevice.RelationshipState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 4, v6);
  int v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = sub_25B37F640();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_25B2E344C((uint64_t)a1, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = sub_25B37F640();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

void *initializeWithTake for ReplicatorDevice.RelationshipState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_25B37F640();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithTake for ReplicatorDevice.RelationshipState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 4, v6);
  int v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = sub_25B37F640();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_25B2E344C((uint64_t)a1, &qword_26A4EBB98);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = sub_25B37F640();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.RelationshipState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B342170);
}

uint64_t sub_25B342170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 5) {
    return v5 - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B3421F4);
}

uint64_t sub_25B3421F4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t sub_25B34227C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 4, v2);
}

uint64_t sub_25B3422E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 4, v4);
}

uint64_t sub_25B34235C()
{
  uint64_t result = sub_25B37F640();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorDevice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B342530);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.CodingKeys()
{
  return &type metadata for ReplicatorDevice.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B342634);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.CodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.IntroducedCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.IntroducedCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.PairingCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.PairingCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.PairedCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.PairedCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState.MigratingCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25B342738);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.MigratingCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.UnknownCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.UnknownCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorDevice.Screen.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B34284CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.Screen.CodingKeys()
{
  return &type metadata for ReplicatorDevice.Screen.CodingKeys;
}

unint64_t sub_25B342888()
{
  unint64_t result = qword_26A4EC5E0;
  if (!qword_26A4EC5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5E0);
  }
  return result;
}

unint64_t sub_25B3428E0()
{
  unint64_t result = qword_26A4EC5E8;
  if (!qword_26A4EC5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5E8);
  }
  return result;
}

unint64_t sub_25B342938()
{
  unint64_t result = qword_26A4EC5F0;
  if (!qword_26A4EC5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5F0);
  }
  return result;
}

unint64_t sub_25B342990()
{
  unint64_t result = qword_26A4EC5F8;
  if (!qword_26A4EC5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC5F8);
  }
  return result;
}

unint64_t sub_25B3429E8()
{
  unint64_t result = qword_26A4EC600;
  if (!qword_26A4EC600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC600);
  }
  return result;
}

unint64_t sub_25B342A40()
{
  unint64_t result = qword_26A4EC608;
  if (!qword_26A4EC608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC608);
  }
  return result;
}

unint64_t sub_25B342A98()
{
  unint64_t result = qword_26A4EC610;
  if (!qword_26A4EC610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC610);
  }
  return result;
}

unint64_t sub_25B342AF0()
{
  unint64_t result = qword_26A4EC618;
  if (!qword_26A4EC618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC618);
  }
  return result;
}

unint64_t sub_25B342B48()
{
  unint64_t result = qword_26A4EC620;
  if (!qword_26A4EC620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC620);
  }
  return result;
}

unint64_t sub_25B342BA0()
{
  unint64_t result = qword_26A4EC628;
  if (!qword_26A4EC628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC628);
  }
  return result;
}

unint64_t sub_25B342BF8()
{
  unint64_t result = qword_26A4EC630;
  if (!qword_26A4EC630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC630);
  }
  return result;
}

unint64_t sub_25B342C50()
{
  unint64_t result = qword_26A4EC638;
  if (!qword_26A4EC638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC638);
  }
  return result;
}

unint64_t sub_25B342CA8()
{
  unint64_t result = qword_26A4EC640;
  if (!qword_26A4EC640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC640);
  }
  return result;
}

unint64_t sub_25B342D00()
{
  unint64_t result = qword_26A4EC648;
  if (!qword_26A4EC648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC648);
  }
  return result;
}

unint64_t sub_25B342D58()
{
  unint64_t result = qword_26A4EC650;
  if (!qword_26A4EC650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC650);
  }
  return result;
}

unint64_t sub_25B342DB0()
{
  unint64_t result = qword_26A4EC658;
  if (!qword_26A4EC658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC658);
  }
  return result;
}

unint64_t sub_25B342E08()
{
  unint64_t result = qword_26A4EC660;
  if (!qword_26A4EC660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC660);
  }
  return result;
}

unint64_t sub_25B342E60()
{
  unint64_t result = qword_26A4EC668;
  if (!qword_26A4EC668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC668);
  }
  return result;
}

unint64_t sub_25B342EB8()
{
  unint64_t result = qword_26A4EC670;
  if (!qword_26A4EC670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC670);
  }
  return result;
}

unint64_t sub_25B342F10()
{
  unint64_t result = qword_26A4EC678;
  if (!qword_26A4EC678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC678);
  }
  return result;
}

uint64_t sub_25B342F64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unsigned int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_25B33F5C4(&qword_26B341020, (void (*)(uint64_t))type metadata accessor for ReplicatorDevice);
  uint64_t result = sub_25B37FC30();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_25B3400EC(v11, (uint64_t)v6, type metadata accessor for ReplicatorDevice);
      sub_25B3564B8((uint64_t)v8, (uint64_t)v6);
      sub_25B340154((uint64_t)v8, type metadata accessor for ReplicatorDevice);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_25B3430F0(uint64_t a1)
{
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v63);
  uint64_t v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v55 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v49 - v8;
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v62 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char **)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char **)((char *)&v49 - v20);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char **)((char *)&v49 - v21);
  uint64_t v23 = *(void *)(a1 + 16);
  sub_25B33F5C4(&qword_26B341368, (void (*)(uint64_t))type metadata accessor for ReplicatorRecord.ID);
  uint64_t v67 = v14;
  uint64_t v24 = sub_25B37FC30();
  uint64_t v53 = v23;
  if (v23)
  {
    uint64_t v25 = 0;
    uint64_t v52 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v26 = *(void *)(v15 + 72);
    uint64_t v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v57 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v60 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v51 = v13;
    uint64_t v27 = v24;
    char v54 = v3;
    uint64_t v61 = v26;
    while (1)
    {
      uint64_t v56 = v25;
      sub_25B3400EC(v52 + v26 * v25, (uint64_t)v22, type metadata accessor for ReplicatorRecord.ID);
      sub_25B380250();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      uint64_t v66 = (uint64_t)v22 + *(int *)(v67 + 28);
      sub_25B3400EC(v66, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v65 = *v68;
      if (v65(v13, 1, v4) == 1)
      {
        sub_25B380260();
      }
      else
      {
        uint64_t v31 = v49;
        (*v57)(v49, v13, v4);
        sub_25B380260();
        sub_25B33F5C4(&qword_26B340FA0, MEMORY[0x263F07508]);
        sub_25B37F950();
        (*v60)(v31, v4);
      }
      uint64_t v59 = (void *)((char *)v22 + *(int *)(v67 + 32));
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_25B380290();
      uint64_t v33 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v34 = v32 & ~v33;
      uint64_t v35 = v27 + 56;
      if (((*(void *)(v27 + 56 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        uint64_t v28 = v27;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v30 = v50;
        sub_25B3400EC((uint64_t)v22, (uint64_t)v50, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v69 = v28;
        sub_25B358824(v30, v34, isUniquelyReferenced_nonNull_native);
        uint64_t v27 = v69;
        goto LABEL_4;
      }
      uint64_t v36 = ~v33;
      uint64_t v64 = v27 + 56;
      while (1)
      {
        sub_25B3400EC(*(void *)(v27 + 48) + v34 * v26, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
        BOOL v37 = *v18 == *v22 && v18[1] == v22[1];
        if (!v37 && (sub_25B3801A0() & 1) == 0) {
          goto LABEL_11;
        }
        BOOL v38 = v18[2] == v22[2] && v18[3] == v22[3];
        if (!v38 && (sub_25B3801A0() & 1) == 0 || (v18[4] != v22[4] || v18[5] != v22[5]) && (sub_25B3801A0() & 1) == 0) {
          goto LABEL_11;
        }
        uint64_t v39 = v27;
        uint64_t v40 = (uint64_t)&v3[*(int *)(v63 + 48)];
        uint64_t v41 = v4;
        sub_25B3400EC((uint64_t)v18 + *(int *)(v67 + 28), (uint64_t)v3, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_25B3400EC(v66, v40, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65;
        if (v65(v3, 1, v4) == 1)
        {
          uint64_t v27 = v39;
          if (v42(v40, 1, v4) == 1) {
            goto LABEL_33;
          }
          goto LABEL_30;
        }
        sub_25B3400EC((uint64_t)v3, (uint64_t)v62, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v42(v40, 1, v4) != 1) {
          break;
        }
        (*v60)(v62, v4);
        uint64_t v27 = v39;
LABEL_30:
        sub_25B2E344C((uint64_t)v3, &qword_26B341530);
LABEL_31:
        uint64_t v26 = v61;
        uint64_t v35 = v64;
LABEL_11:
        sub_25B340154((uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v34 = (v34 + 1) & v36;
        if (((*(void *)(v35 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
          goto LABEL_3;
        }
      }
      uint64_t v43 = (uint64_t)v62;
      uint64_t v44 = v55;
      (*v57)(v55, (char *)v40, v4);
      int v58 = sub_25B37F610();
      uint64_t v45 = *v60;
      uint64_t v46 = v44;
      uint64_t v3 = v54;
      (*v60)(v46, v41);
      v45((char *)v43, v41);
      uint64_t v4 = v41;
      uint64_t v27 = v39;
      if ((v58 & 1) == 0)
      {
        sub_25B340154((uint64_t)v3, type metadata accessor for ReplicatorRecord.ID.Ownership);
        goto LABEL_31;
      }
LABEL_33:
      sub_25B340154((uint64_t)v3, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v47 = (void *)((char *)v18 + *(int *)(v67 + 32));
      uint64_t v26 = v61;
      uint64_t v35 = v64;
      if ((*v47 != *v59 || v47[1] != v59[1]) && (sub_25B3801A0() & 1) == 0) {
        goto LABEL_11;
      }
      sub_25B340154((uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v13 = v51;
      uint64_t v25 = v56 + 1;
      sub_25B340154((uint64_t)v22, type metadata accessor for ReplicatorRecord.ID);
      if (v25 == v53) {
        return v27;
      }
    }
  }
  return v24;
}

uint64_t sub_25B3439DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702521203 && a2 == 0xE400000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x615272656E726F63 && a2 == 0xEC00000073756964)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_25B343B34(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6375646F72746E69 && a2 == 0xEA00000000006465;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6972696170 && a2 == 0xE700000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646572696170 && a2 == 0xE600000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6974617267696DLL && a2 == 0xE900000000000067 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_25B343D64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974616C6572 && a2 == 0xEE00444970696873 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7954656369766564 && a2 == 0xEA00000000006570 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6565726373 && a2 == 0xE600000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73656E6F7ALL && a2 == 0xE500000000000000 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x546567617373656DLL && a2 == 0xEC00000073657079 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025B38B670 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025B38B690 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656B636F6C427369 && a2 == 0xE900000000000064 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6E6974656B72616DLL && a2 == 0xED0000656D614E67 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x54746375646F7270 && a2 == 0xEB00000000657079 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x49616E6F73726570 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

unint64_t sub_25B344378()
{
  unint64_t result = qword_26A4EC680;
  if (!qword_26A4EC680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC680);
  }
  return result;
}

unint64_t sub_25B3443CC()
{
  unint64_t result = qword_26A4EC688;
  if (!qword_26A4EC688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC688);
  }
  return result;
}

unint64_t sub_25B344420()
{
  unint64_t result = qword_26A4EC690;
  if (!qword_26A4EC690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC690);
  }
  return result;
}

uint64_t sub_25B344474(uint64_t a1)
{
  return a1;
}

uint64_t sub_25B3444AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t ReplicatorControlClient.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ReplicatorControlClient.init()();
  return v0;
}

uint64_t ReplicatorControlClient.devices.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  return v1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.isEnabled()()
{
  return sub_25B3447C0() & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.setEnabled(_:)(Swift::Bool a1)
{
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_25B37F780();
  __swift_project_value_buffer(v1, (uint64_t)qword_26A4EB630);
  BOOL v2 = sub_25B37F760();
  os_log_type_t v3 = sub_25B37FCD0();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67240192;
    sub_25B37FD70();
    _os_log_impl(&dword_25B2C1000, v2, v3, "Setting replicator enabled to %{BOOL,public}d", v4, 8u);
    MEMORY[0x2611621B0](v4, -1, -1);
  }

  MEMORY[0x270FA5388](v5);
  sub_25B37FD10();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.isAllowListEnabled()()
{
  return sub_25B3447C0() & 1;
}

uint64_t sub_25B3447C0()
{
  sub_25B37FD10();
  return v1;
}

uint64_t ReplicatorControlClient.getAllowList()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
  sub_25B37FD10();
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.enableAllowList(enabled:)(Swift::Bool enabled)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.setAllowList(idsIDs:)(Swift::OpaquePointer idsIDs)
{
  uint64_t v1 = sub_25B37FD10();
  if (v8 == 1)
  {
    MEMORY[0x270FA5388](v1);
    sub_25B37FD10();
  }
  else
  {
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_25B37F780();
    __swift_project_value_buffer(v2, (uint64_t)qword_26A4EB630);
    os_log_type_t v3 = sub_25B37F760();
    os_log_type_t v4 = sub_25B37FCB0();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_25B2C1000, v3, v4, "Allow List is disabled. Cannot update allow list.", v5, 2u);
      MEMORY[0x2611621B0](v5, -1, -1);
    }

    uint64_t v6 = sub_25B37F660();
    sub_25B3524F4(&qword_26A4EC6A0, MEMORY[0x263F63A40]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, *MEMORY[0x263F63A28], v6);
    swift_willThrow();
  }
}

uint64_t ReplicatorControlClient.pushToken(for:)()
{
  uint64_t result = sub_25B37FD10();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B344BAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_25B344C04(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_25B344C30(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  return a2(&v3);
}

uint64_t sub_25B344C68(unsigned __int8 *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_25B344C94(char a1, uint64_t (*a2)(char *))
{
  char v3 = a1;
  return a2(&v3);
}

uint64_t sub_25B344CCC(uint64_t a1, uint64_t a2)
{
  char v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t ReplicatorControlClient.deviceUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B30);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB330);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates;
  swift_beginAccess();
  sub_25B2E2FE0(v13, (uint64_t)v12, &qword_26A4EB330);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB328);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(a1, v12, v14);
  }
  sub_25B2E344C((uint64_t)v12, &qword_26A4EB330);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F580], v3);
  sub_25B37FC20();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  swift_beginAccess();
  sub_25B31964C((uint64_t)v10, v13, &qword_26A4EB330);
  return swift_endAccess();
}

uint64_t ReplicatorControlClient.deviceUpdates.setter(uint64_t a1)
{
  return sub_25B346850(a1, &qword_26A4EB330, &qword_26A4EB328, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates);
}

uint64_t sub_25B345000(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B38);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B345298((uint64_t)sub_25B3521BC, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B345298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v29 = a1;
  uint64_t v32 = sub_25B37F830();
  uint64_t v35 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B37F860();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25B37F640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v15 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  unint64_t v17 = (uint64_t *)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *v17;
  *unint64_t v17 = 0x8000000000000000;
  sub_25B2D95E8((uint64_t)sub_25B319E3C, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *unint64_t v17 = v38;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  uint64_t v36 = *(void *)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  uint64_t v19 = aBlock[0];
  uint64_t v20 = *(void **)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v29;
  v21[3] = a2;
  void v21[4] = v19;
  aBlock[4] = sub_25B3523F4;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_153;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = v20;
  uint64_t v24 = v30;
  sub_25B37F840();
  uint64_t v38 = MEMORY[0x263F8EE78];
  sub_25B3524F4(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  uint64_t v25 = v31;
  uint64_t v26 = v32;
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v24, v25, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
  return swift_release();
}

uint64_t sub_25B34576C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

void (*ReplicatorControlClient.deviceUpdates.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB330);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB328);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  ReplicatorControlClient.deviceUpdates.getter((uint64_t)v8);
  return sub_25B3458E4;
}

void sub_25B3458E4(uint64_t a1, char a2)
{
}

uint64_t ReplicatorControlClient.pairedDeviceUpdates.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B30);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F580], v0);
  return sub_25B37FC20();
}

uint64_t sub_25B345A08(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B38);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  uint64_t v16 = v21;
  sub_25B345D98((void (*)(uint64_t))sub_25B3521BC, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_25B37FBC0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_25B345CA0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B28);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B38);
  sub_25B37FBE0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B345D98@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v6 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v44 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v50 = (uint64_t)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v41 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v41 - v14;
  uint64_t v16 = sub_25B37F640();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B37F630();
  uint64_t v42 = v3;
  uint64_t v20 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  os_unfair_lock_t v51 = v20 + 4;
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, v16);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v43;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = (uint64_t *)(v3 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers);
  swift_beginAccess();
  v41[1] = a2;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *v22;
  *uint64_t v22 = 0x8000000000000000;
  sub_25B2D95E8((uint64_t)sub_25B31988C, v21, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
  *uint64_t v22 = v53;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v46 = v17 + 8;
  uint64_t v47 = v16;
  uint64_t v45 = v24;
  v24((uint64_t)v19, v16);
  swift_endAccess();
  os_unfair_lock_unlock(v51);
  swift_release();
  uint64_t v52 = *(void *)(v42 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  uint64_t result = sub_25B37FD10();
  uint64_t v26 = v54;
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v54 = MEMORY[0x263F8EE78];
  os_unfair_lock_t v51 = *(os_unfair_lock_t *)(v26 + 16);
  if (!v51)
  {
LABEL_17:
    uint64_t v40 = v43;
    swift_bridgeObjectRelease();
    v40(v27);
    return swift_release();
  }
  unint64_t v28 = 0;
  uint64_t v29 = (uint64_t)v44;
  uint64_t v31 = v48;
  uint64_t v30 = v49;
  while (v28 < *(void *)(v26 + 16))
  {
    unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v33 = *(void *)(v31 + 72);
    sub_25B35242C(v26 + v32 + v33 * v28, (uint64_t)v15, type metadata accessor for ReplicatorDevice);
    sub_25B35242C((uint64_t)&v15[*(int *)(v30 + 48)], v29, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v29, 4, v34);
    if ((v35 - 2) >= 2)
    {
      if (v35)
      {
        sub_25B352494(v29, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B35242C((uint64_t)v15, (uint64_t)v13, type metadata accessor for ReplicatorDevice);
        sub_25B352494((uint64_t)v13, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      v45(v29, v47);
    }
    sub_25B35242C((uint64_t)v15, (uint64_t)v13, type metadata accessor for ReplicatorDevice);
    char v36 = v13[*(int *)(v30 + 56)];
    sub_25B352494((uint64_t)v13, type metadata accessor for ReplicatorDevice);
    if ((v36 & 1) == 0)
    {
      sub_25B3505C4((uint64_t)v15, v50);
      uint64_t v37 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B3109DC(0, *(void *)(v37 + 16) + 1, 1);
        uint64_t v29 = (uint64_t)v44;
        uint64_t v37 = v54;
      }
      unint64_t v39 = *(void *)(v37 + 16);
      unint64_t v38 = *(void *)(v37 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_25B3109DC(v38 > 1, v39 + 1, 1);
        uint64_t v29 = (uint64_t)v44;
        uint64_t v37 = v54;
      }
      *(void *)(v37 + 16) = v39 + 1;
      uint64_t result = sub_25B3505C4(v50, v37 + v32 + v39 * v33);
      uint64_t v31 = v48;
      uint64_t v30 = v49;
      goto LABEL_5;
    }
LABEL_4:
    uint64_t result = sub_25B352494((uint64_t)v15, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v51 == (os_unfair_lock_t)++v28)
    {
      uint64_t v27 = v54;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25B346354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B319EEC(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t ReplicatorControlClient.enabledStateUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB868);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC6A8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates;
  swift_beginAccess();
  sub_25B2E2FE0(v13, (uint64_t)v12, &qword_26A4EC6A8);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B40);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(a1, v12, v14);
  }
  sub_25B2E344C((uint64_t)v12, &qword_26A4EC6A8);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F580], v3);
  sub_25B37FC20();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  swift_beginAccess();
  sub_25B31964C((uint64_t)v10, v13, &qword_26A4EC6A8);
  return swift_endAccess();
}

uint64_t sub_25B346690(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  uint64_t v19 = *a2;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v18, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  uint64_t v20 = v19 + *a7;
  swift_beginAccess();
  sub_25B31964C((uint64_t)v14, v20, a5);
  return swift_endAccess();
}

uint64_t ReplicatorControlClient.enabledStateUpdates.setter(uint64_t a1)
{
  return sub_25B346850(a1, &qword_26A4EC6A8, &qword_26B340B40, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates);
}

uint64_t sub_25B346850(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v11, a1, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  uint64_t v14 = v4 + *a4;
  swift_beginAccess();
  sub_25B31964C((uint64_t)v11, v14, a2);
  return swift_endAccess();
}

uint64_t sub_25B34698C(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB860);
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  MEMORY[0x270FA5388](v3);
  os_unfair_lock_t v51 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  uint64_t v5 = *(void *)(v55 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v55);
  uint64_t v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v41 = sub_25B37F640();
  uint64_t v10 = *(void *)(v41 - 8);
  uint64_t v49 = *(void *)(v10 + 64);
  uint64_t v11 = MEMORY[0x270FA5388](v41);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v40 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (char *)&v40 - v17;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v19 = a1;
  uint64_t v20 = v55;
  v18(v9, v19, v55);
  uint64_t v21 = v20;
  v18((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v9, v20);
  uint64_t v22 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v47 = v5;
  uint64_t v23 = (v22 + 16) & ~v22;
  uint64_t v24 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24 + v23, v9, v21);
  uint64_t v44 = v16;
  sub_25B37F630();
  uint64_t v25 = v54;
  uint64_t v26 = *(os_unfair_lock_s **)(v54 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  os_unfair_lock_t v40 = v26 + 4;
  swift_retain();
  os_unfair_lock_lock(v26 + 4);
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v27 = v41;
  v45(v13, v16, v41);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_25B3520A8;
  *(void *)(v28 + 24) = v24;
  uint64_t v42 = v24;
  uint64_t v29 = (uint64_t *)(v25 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v57 = *v29;
  *uint64_t v29 = 0x8000000000000000;
  sub_25B2D9600((uint64_t)sub_25B35211C, v28, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v29 = v57;
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v10 + 8);
  v43(v13, v27);
  swift_endAccess();
  os_unfair_lock_unlock(v40);
  swift_release();
  uint64_t v56 = *(void *)(v25 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  sub_25B37FD10();
  uint64_t v31 = v51;
  uint64_t v32 = v55;
  uint64_t v33 = v46;
  sub_25B37FBE0();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v53);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  int v35 = v48;
  char v36 = v44;
  v34(v48, v44, v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v32);
  v45(v36, v35, v27);
  unint64_t v37 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v54;
  v34((char *)(v38 + v37), v36, v27);
  swift_retain();
  sub_25B37FBC0();
  return ((uint64_t (*)(char *, uint64_t))v43)(v35, v27);
}

uint64_t sub_25B346F20(char a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB860);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7[15] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  sub_25B37FBE0();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B347010(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_25B3102F8(v3);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

void (*ReplicatorControlClient.enabledStateUpdates.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC6A8);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B40);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  ReplicatorControlClient.enabledStateUpdates.getter((uint64_t)v8);
  return sub_25B347188;
}

void sub_25B347188(uint64_t a1, char a2)
{
}

void sub_25B34719C(uint64_t a1, char a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v8 = *(void **)(*(void *)a1 + 80);
  size_t v7 = *(void **)(*(void *)a1 + 88);
  if (a2)
  {
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v12 = v6[6];
    uint64_t v11 = (void *)v6[7];
    (*(void (**)(void, void, uint64_t))(v10 + 16))(v6[10], v6[11], v9);
    (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v11, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v11, 0, 1, v9);
    uint64_t v13 = v12 + *a3;
    swift_beginAccess();
    sub_25B31964C((uint64_t)v11, v13, a4);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    uint64_t v14 = v6[8];
    uint64_t v15 = v6[9];
    uint64_t v16 = v6[6];
    uint64_t v11 = (void *)v6[7];
    (*(void (**)(void *, void, uint64_t))(v15 + 32))(v11, v6[11], v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    uint64_t v17 = v16 + *a3;
    swift_beginAccess();
    sub_25B31964C((uint64_t)v11, v17, a4);
    swift_endAccess();
  }
  free(v7);
  free(v8);
  free(v11);
  free(v6);
}

uint64_t ReplicatorControlClient.pairedDevices.getter()
{
  uint64_t v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v28 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v30 = *(void *)(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  uint64_t result = sub_25B37FD10();
  uint64_t v14 = v31;
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v29 = *(void *)(v14 + 16);
  if (!v29)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v15;
  }
  unint64_t v16 = 0;
  uint64_t v26 = v5;
  uint64_t v27 = v4;
  while (v16 < *(void *)(v14 + 16))
  {
    unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v18 = *(void *)(v5 + 72);
    sub_25B35242C(v14 + v17 + v18 * v16, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
    sub_25B35242C((uint64_t)&v12[*(int *)(v4 + 48)], (uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v3, 4, v19);
    if ((v20 - 2) >= 2)
    {
      if (v20)
      {
        sub_25B352494((uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B35242C((uint64_t)v12, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
        sub_25B352494((uint64_t)v10, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      uint64_t v21 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v3, v21);
    }
    sub_25B35242C((uint64_t)v12, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
    char v22 = v10[*(int *)(v4 + 56)];
    sub_25B352494((uint64_t)v10, type metadata accessor for ReplicatorDevice);
    if ((v22 & 1) == 0)
    {
      sub_25B3505C4((uint64_t)v12, v28);
      uint64_t v23 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_25B3109DC(0, *(void *)(v23 + 16) + 1, 1);
        uint64_t v23 = v31;
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_25B3109DC(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v31;
      }
      *(void *)(v23 + 16) = v25 + 1;
      uint64_t result = sub_25B3505C4(v28, v23 + v17 + v25 * v18);
      uint64_t v5 = v26;
      uint64_t v4 = v27;
      goto LABEL_5;
    }
LABEL_4:
    uint64_t result = sub_25B352494((uint64_t)v12, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v29 == ++v16)
    {
      uint64_t v15 = v31;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.localDevice.getter()
{
  return sub_25B37FD10();
}

uint64_t ReplicatorControlClient.init()()
{
  uint64_t v1 = v0;
  uint64_t v19 = sub_25B37FD00();
  uint64_t v2 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25B37F860();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_subscriptions) = MEMORY[0x263F8EE88];
  uint64_t v18 = OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue;
  sub_25B2E3070();
  sub_25B37F840();
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_25B3524F4((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B319318((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F130], v19);
  *(void *)(v0 + v18) = sub_25B37FD30();
  uint64_t v11 = OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
  uint64_t v12 = swift_allocObject();
  *(void *)(v1 + v11) = v12;
  uint64_t v13 = MEMORY[0x263F8EE80];
  *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers) = MEMORY[0x263F8EE80];
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers) = v13;
  *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers) = v13;
  if (qword_26A4EB2E8 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)qword_26A4EB2D8;
  *(void *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton) = qword_26A4EB2D8;
  id v15 = v14;
  uint64_t v20 = sub_25B34A4DC();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341168);
  sub_25B319318(&qword_26B341160, &qword_26B341168);
  sub_25B37F810();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_25B37F7B0();
  swift_endAccess();
  swift_release();
  uint64_t v20 = sub_25B34A500();
  swift_allocObject();
  swift_weakInit();
  sub_25B37F810();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_25B37F7B0();
  swift_endAccess();
  swift_release();
  uint64_t v20 = sub_25B34A524();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB2F8);
  sub_25B319318(&qword_26A4EB2F0, &qword_26A4EB2F8);
  sub_25B37F810();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_25B37F7B0();
  swift_endAccess();
  swift_release();
  return v1;
}

uint64_t sub_25B347DD4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_25B347E68(v10, a3, a4, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_25B347E68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v8 = sub_25B37F830();
  uint64_t v25 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_25B37F860();
  uint64_t v11 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  id v15 = (uint64_t *)(v5 + *a2);
  swift_beginAccess();
  uint64_t v16 = *v15;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  uint64_t v17 = *(void **)(v5 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = a1;
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = v23;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  swift_bridgeObjectRetain();
  sub_25B37F840();
  uint64_t v26 = MEMORY[0x263F8EE78];
  sub_25B3524F4(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v13, v10, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v24);
  return swift_release();
}

uint64_t sub_25B34818C(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_25B3481EC(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_25B3481EC(char a1)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_25B37F860();
  uint64_t v7 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers);
  swift_beginAccess();
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(unsigned char *)(v14 + 24) = a1;
  aBlock[4] = sub_25B351FA8;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_92;
  id v15 = _Block_copy(aBlock);
  id v16 = v13;
  sub_25B37F840();
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_25B3524F4(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v9, v6, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  return swift_release();
}

uint64_t ReplicatorControlClient.deinit()
{
  sub_25B2E344C(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates, &qword_26A4EB330);
  sub_25B2E344C(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates, &qword_26A4EC6A8);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReplicatorControlClient.__deallocating_deinit()
{
  ReplicatorControlClient.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_25B348624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v41 - v14;
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)&v41 - v15;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  int64_t v44 = (unint64_t)(v18 + 63) >> 6;
  int64_t v42 = v44 - 1;
  uint64_t v50 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v51 = 0;
  uint64_t v45 = v16;
  uint64_t v46 = a2;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v54 = (v20 - 1) & v20;
  unint64_t v23 = __clz(__rbit64(v20)) | (v51 << 6);
  while (2)
  {
    uint64_t v24 = v50;
    uint64_t v25 = *(void *)(v50 + 48);
    uint64_t v26 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v12, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v26);
    uint64_t v27 = *(int *)(v6 + 48);
    long long v53 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v12[v27] = v53;
    uint64_t v28 = *v56;
    (*v56)(v12, 0, 1, v6);
    swift_retain();
    while (1)
    {
      uint64_t v32 = *v55;
      uint64_t v33 = 1;
      if ((*v55)(v12, 1, v6) != 1)
      {
        uint64_t v34 = v12;
        uint64_t v35 = *(int *)(v6 + 48);
        uint64_t v36 = sub_25B37F640();
        unint64_t v37 = *(void (**)(void))(*(void *)(v36 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v37)(v47, v34, v36);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = *(_OWORD *)&v34[v35];
        unint64_t v39 = &v52[*(int *)(v6 + 48)];
        v37();
        uint64_t v33 = 0;
        *(void *)unint64_t v39 = v49;
        *((void *)v39 + 1) = v38;
        uint64_t v12 = v34;
        id v16 = v45;
        a2 = v46;
      }
      uint64_t v40 = (uint64_t)v52;
      v28(v52, v33, 1, v6);
      sub_25B2E31F0(v40, (uint64_t)v16, (uint64_t *)&unk_26B340F90);
      if (v32(v16, 1, v6) == 1) {
        return swift_release();
      }
      (*(void (**)(uint64_t))&v16[*(int *)(v6 + 48)])(a2);
      swift_release();
      uint64_t v22 = sub_25B37F640();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v16, v22);
      unint64_t v20 = v54;
      if (v54) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v29 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v44)
      {
        unint64_t v30 = *(void *)(v43 + 8 * v29);
        if (v30) {
          goto LABEL_11;
        }
        int64_t v31 = v51 + 2;
        ++v51;
        if (v29 + 1 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * v31);
          if (v30) {
            goto LABEL_14;
          }
          int64_t v51 = v29 + 1;
          if (v29 + 2 < v44)
          {
            unint64_t v30 = *(void *)(v43 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            int64_t v31 = v29 + 3;
            int64_t v51 = v29 + 2;
            if (v29 + 3 < v44) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v28 = *v56;
      (*v56)(v12, 1, 1, v6);
      uint64_t v54 = 0;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v31);
    if (v30)
    {
LABEL_14:
      int64_t v29 = v31;
LABEL_11:
      uint64_t v54 = (v30 - 1) & v30;
      unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
      int64_t v51 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v44)
    {
      int64_t v51 = v42;
      goto LABEL_25;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_11;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_25B348B3C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_25B2D606C(a2);
  char v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v11)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v8;
    uint64_t v20 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      a4();
      uint64_t v15 = v20;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = sub_25B37F640();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, v17);
    uint64_t v18 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v9);
    uint64_t v12 = *v18;
    uint64_t v13 = v18[1];
    sub_25B350C44(v9, v20);
    *uint64_t v8 = v20;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return a5(v12, v13);
}

uint64_t sub_25B348C8C(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340E90);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B340F90);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  char v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v41 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  int64_t v42 = v44 - 1;
  uint64_t v48 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int64_t v51 = 0;
  unsigned int v49 = a2 & 1;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v46 = v14;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v54 = (v18 - 1) & v18;
  unint64_t v23 = __clz(__rbit64(v18)) | (v51 << 6);
  while (2)
  {
    uint64_t v24 = v48;
    uint64_t v25 = *(void *)(v48 + 48);
    uint64_t v26 = sub_25B37F640();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v10, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v26);
    uint64_t v27 = *(int *)(v4 + 48);
    long long v53 = *(_OWORD *)(*(void *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v10[v27] = v53;
    uint64_t v28 = *v19;
    (*v19)(v10, 0, 1, v4);
    swift_retain();
    while (1)
    {
      uint64_t v32 = *v20;
      uint64_t v33 = 1;
      if ((*v20)(v10, 1, v4) != 1)
      {
        uint64_t v34 = *(int *)(v4 + 48);
        uint64_t v35 = sub_25B37F640();
        uint64_t v36 = *(void (**)(void))(*(void *)(v35 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v36)(v47, v10, v35);
        unint64_t v37 = v10;
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = *(_OWORD *)&v37[v34];
        unint64_t v39 = (uint64_t (**)(char))&v52[*(int *)(v4 + 48)];
        uint64_t v14 = v46;
        v36();
        uint64_t v19 = v45;
        uint64_t v33 = 0;
        *unint64_t v39 = sub_25B351FB4;
        v39[1] = (uint64_t (*)(char))v38;
        char v10 = v37;
      }
      uint64_t v40 = (uint64_t)v52;
      v28(v52, v33, 1, v4);
      sub_25B2E31F0(v40, (uint64_t)v14, (uint64_t *)&unk_26B340F90);
      uint64_t v20 = v50;
      if (v32(v14, 1, v4) == 1) {
        return swift_release();
      }
      (*(void (**)(void))&v14[*(int *)(v4 + 48)])(v49);
      swift_release();
      uint64_t v22 = sub_25B37F640();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v14, v22);
      unint64_t v18 = v54;
      if (v54) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v29 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v44)
      {
        unint64_t v30 = *(void *)(v43 + 8 * v29);
        if (v30) {
          goto LABEL_11;
        }
        int64_t v31 = v51 + 2;
        ++v51;
        if (v29 + 1 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * v31);
          if (v30) {
            goto LABEL_14;
          }
          int64_t v51 = v29 + 1;
          if (v29 + 2 < v44)
          {
            unint64_t v30 = *(void *)(v43 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            int64_t v31 = v29 + 3;
            int64_t v51 = v29 + 2;
            if (v29 + 3 < v44) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v28 = *v19;
      (*v19)(v10, 1, 1, v4);
      uint64_t v54 = 0;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v31);
    if (v30)
    {
LABEL_14:
      int64_t v29 = v31;
LABEL_11:
      uint64_t v54 = (v30 - 1) & v30;
      unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
      int64_t v51 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v44)
    {
      int64_t v51 = v42;
      goto LABEL_25;
    }
    unint64_t v30 = *(void *)(v43 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_11;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.addIDToAllowList(idsID:)()
{
  return sub_25B349228();
}

uint64_t ReplicatorControlClient.removeFromAllowList(idsID:)()
{
  return sub_25B349228();
}

uint64_t sub_25B349228()
{
  uint64_t v0 = sub_25B37FD10();
  if (v8 == 1)
  {
    MEMORY[0x270FA5388](v0);
    return sub_25B37FD10();
  }
  else
  {
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_25B37F780();
    __swift_project_value_buffer(v2, (uint64_t)qword_26A4EB630);
    uint64_t v3 = sub_25B37F760();
    os_log_type_t v4 = sub_25B37FCB0();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_25B2C1000, v3, v4, "Allow List is disabled. Cannot update allow list.", v5, 2u);
      MEMORY[0x2611621B0](v5, -1, -1);
    }

    uint64_t v6 = sub_25B37F660();
    sub_25B3524F4(&qword_26A4EC6A0, MEMORY[0x263F63A40]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, *MEMORY[0x263F63A28], v6);
    return swift_willThrow();
  }
}

uint64_t ReplicatorControlClient.pair(relationshipID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a2;
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_25B37F780();
  __swift_project_value_buffer(v11, (uint64_t)qword_26A4EB630);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v12 = sub_25B37F760();
  os_log_type_t v13 = sub_25B37FCD0();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = a3;
    uint64_t v16 = v15;
    uint64_t v28 = v15;
    uint64_t v23 = v3;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v25 = a1;
    sub_25B3524F4((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
    uint64_t v17 = sub_25B380190();
    uint64_t v27 = sub_25B2CA048(v17, v18, &v28);
    a1 = v25;
    uint64_t v4 = v23;
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_25B2C1000, v12, v13, "Requesting pair with %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v16;
    a3 = v24;
    MEMORY[0x2611621B0](v19, -1, -1);
    MEMORY[0x2611621B0](v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = v26;
  _OWORD v20[2] = v4;
  void v20[3] = v21;
  v20[4] = a3;
  swift_retain();
  swift_retain();
  sub_25B349A48(a1, (uint64_t)sub_25B3507A4, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_25B349760(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25B37F830();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = sub_25B37F860();
  uint64_t v12 = *(void *)(v21[0] - 8);
  MEMORY[0x270FA5388](v21[0]);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  void v16[3] = a4;
  v16[4] = a1;
  aBlock[4] = sub_25B351F68;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B2E423C;
  aBlock[3] = &block_descriptor_86;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  swift_retain();
  id v19 = a1;
  sub_25B37F840();
  v21[1] = MEMORY[0x263F8EE78];
  sub_25B3524F4(&qword_26B3411A8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
  sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
  sub_25B37FDC0();
  MEMORY[0x261161440](0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, void))(v12 + 8))(v14, v21[0]);
  return swift_release();
}

uint64_t sub_25B349A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_25B37F640();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_queue_t v20 = *(dispatch_queue_t *)&v3[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v11, v10, v7);
  *(void *)(v13 + v12) = v3;
  uint64_t v14 = (void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_25B351D5C;
  *(void *)(v15 + 24) = v13;
  aBlock[4] = sub_25B3184E0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B37B5C4;
  aBlock[3] = &block_descriptor_74;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v20, v16);
  _Block_release(v16);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __break(1u);
  }
  return result;
}

uint64_t ReplicatorControlClient.unpair(relationshipID:)(uint64_t a1)
{
  return sub_25B349D08(a1, "Requesting unpair from %{public}s", (uint64_t)sub_25B3507B0);
}

uint64_t ReplicatorControlClient.unavailable(relationshipID:)(uint64_t a1)
{
  return sub_25B349D08(a1, "Sending unavailable event for %{public}s", (uint64_t)sub_25B3507CC);
}

uint64_t sub_25B349D08(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v6 = sub_25B37F640();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_25B37F780();
  __swift_project_value_buffer(v10, (uint64_t)qword_26A4EB630);
  unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v25 = a1;
  v11(v9, a1, v6);
  unint64_t v12 = sub_25B37F760();
  os_log_type_t v13 = sub_25B37FCD0();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    v23[3] = v3;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    v23[2] = a3;
    uint64_t v17 = v16;
    uint64_t v27 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    v23[1] = v15 + 4;
    sub_25B3524F4((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
    uint64_t v18 = sub_25B380190();
    uint64_t v26 = sub_25B2CA048(v18, v19, &v27);
    sub_25B37FD70();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_25B2C1000, v12, v13, v24, v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611621B0](v17, -1, -1);
    MEMORY[0x2611621B0](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  MEMORY[0x270FA5388](v20);
  v23[-2] = v25;
  v23[-1] = v21;
  return sub_25B37FD10();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.retryStuckRelationships()()
{
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_25B37F780();
  __swift_project_value_buffer(v0, (uint64_t)qword_26A4EB630);
  uint64_t v1 = sub_25B37F760();
  os_log_type_t v2 = sub_25B37FCD0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_25B2C1000, v1, v2, "Requesting retry of stuck relationships", v3, 2u);
    MEMORY[0x2611621B0](v3, -1, -1);
  }

  MEMORY[0x270FA5388](v4);
  sub_25B37FD10();
}

uint64_t sub_25B34A168@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.deviceUpdates.getter(a1);
}

uint64_t sub_25B34A18C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3416E0);
  sub_25B37FD10();
  return v1;
}

uint64_t sub_25B34A210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ReplicatorControlClient.pair(relationshipID:completion:)(a1, a2, a3);
}

uint64_t sub_25B34A234(uint64_t a1)
{
  return ReplicatorControlClient.unpair(relationshipID:)(a1);
}

void sub_25B34A258()
{
}

void sub_25B34A27C(Swift::Bool a1)
{
}

void *sub_25B34A2A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_25B34A2AC(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_25B34A2B4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_25B34A2C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_25B34A2DC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_25B34A2F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_25B34A320@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_25B34A34C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_25B34A370(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_25B34A384(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_25B34A398(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_25B34A3AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_25B34A3C0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_25B34A3D4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_25B34A3E8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_25B34A3FC()
{
  return *v0 == 0;
}

uint64_t sub_25B34A40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_25B34A424(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_25B34A438@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_25B34A448(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_25B34A454(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_25B34A468@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_25B351BF4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

id sub_25B34A4A8()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Singleton()), sel_init);
  qword_26A4EB2D8 = (uint64_t)result;
  return result;
}

uint64_t sub_25B34A4DC()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___devicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__devicePublisher, &qword_26B3411A0, &qword_26B341198);
}

uint64_t sub_25B34A500()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___pairedDevicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__pairedDevicePublisher, &qword_26B3411A0, &qword_26B341198);
}

uint64_t sub_25B34A524()
{
  return sub_25B2F84D8(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___enabledStatePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__enabledStatePublisher, &qword_26A4EB308, &qword_26A4EB300);
}

id sub_25B34A548()
{
  uint64_t v1 = sub_25B37FD00();
  uint64_t v17 = *(void *)(v1 - 8);
  uint64_t v18 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v16 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = sub_25B37F860();
  MEMORY[0x270FA5388](v4 - 8);
  *(void *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___devicePublisher] = 0;
  uint64_t v5 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__devicePublisher;
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411A0);
  swift_allocObject();
  uint64_t v7 = v0;
  *(void *)&v0[v5] = sub_25B37F7F0();
  *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___pairedDevicePublisher] = 0;
  uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__pairedDevicePublisher;
  uint64_t v20 = v6;
  uint64_t v9 = v6;
  swift_allocObject();
  *(void *)&v7[v8] = sub_25B37F7F0();
  *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___enabledStatePublisher] = 0;
  uint64_t v10 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__enabledStatePublisher;
  LOBYTE(v20) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB308);
  swift_allocObject();
  *(void *)&v7[v10] = sub_25B37F7F0();
  uint64_t v11 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection;
  *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection] = 0;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_serverStartupToken] = -1;
  uint64_t v12 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue;
  sub_25B2E3070();
  sub_25B37F850();
  uint64_t v20 = v9;
  sub_25B3524F4((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B319318((unint64_t *)&qword_26B341200, (uint64_t *)&unk_26B3411F0);
  sub_25B37FDC0();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v16, *MEMORY[0x263F8F138], v18);
  *(void *)&v7[v12] = sub_25B37FD30();
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken] = -1;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken] = -1;
  *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices] = MEMORY[0x263F8EE78];
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled] = 1;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending] = 0;
  *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData] = 0;
  os_log_type_t v13 = *(void **)&v7[v11];
  *(void *)&v7[v11] = 0;

  uint64_t v14 = (objc_class *)type metadata accessor for Singleton();
  v19.receiver = v7;
  v19.super_class = v14;
  return objc_msgSendSuper2(&v19, sel_init);
}

id sub_25B34A940()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Singleton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_25B34AA34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData) & 1) == 0)
  {
    sub_25B34AA94();
    sub_25B34AEB4();
  }
  *a2 = *(void *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices);
  return swift_bridgeObjectRetain();
}

void sub_25B34AA94()
{
  uint64_t v1 = v0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_25B37F780();
  __swift_project_value_buffer(v6, (uint64_t)qword_26A4EB630);
  uint64_t v7 = sub_25B37F760();
  os_log_type_t v8 = sub_25B37FCD0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_25B2C1000, v7, v8, "Registering for device changes", v9, 2u);
    MEMORY[0x2611621B0](v9, -1, -1);
  }

  uint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  *uint64_t v5 = v10;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  uint64_t v11 = v10;
  char v12 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v12 & 1) == 0) {
    __break(1u);
  }
  uint64_t v13 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken;
  if (*(_DWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken] == -1)
  {
    int out_token = -1;
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_25B352544;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B344CCC;
    aBlock[3] = &block_descriptor_161;
    objc_super v19 = _Block_copy(aBlock);
    swift_release();
    uint64_t v20 = sub_25B37F9F0();
    uint32_t v21 = notify_register_dispatch((const char *)(v20 + 32), &out_token, v11, v19);
    swift_release();
    _Block_release(v19);
    if (v21)
    {
      uint64_t v22 = sub_25B37F760();
      os_log_type_t v23 = sub_25B37FCB0();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl(&dword_25B2C1000, v22, v23, "Could not register for device change notifications", v24, 2u);
        MEMORY[0x2611621B0](v24, -1, -1);
      }
    }
    *(_DWORD *)&v1[v13] = out_token;
  }
  else
  {
    uint64_t v14 = v0;
    uint64_t v15 = sub_25B37F760();
    os_log_type_t v16 = sub_25B37FCD0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 67240192;
      LODWORD(aBlock[0]) = *(_DWORD *)&v1[v13];
      sub_25B37FD70();

      _os_log_impl(&dword_25B2C1000, v15, v16, "Already subscribed to device changes with token %{public}d", v17, 8u);
      MEMORY[0x2611621B0](v17, -1, -1);
    }
    else
    {
    }
  }
}

void sub_25B34AEB4()
{
  v142[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v132 = (char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v130 = (char *)&v124 - v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v124 - v6;
  uint64_t v8 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v139 = *(void *)(v8 - 8);
  uint64_t v140 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v137 = (uint64_t)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v126 = (char *)&v124 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v133 = (uint64_t)&v124 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v134 = (uint64_t)&v124 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  objc_super v19 = (char *)&v124 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  *(void *)&long long v136 = (char *)&v124 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  unint64_t v24 = (unint64_t)&v124 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (uint64_t *)((char *)&v124 - v25);
  uint64_t v27 = sub_25B37F8A0();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  unint64_t v30 = (uint64_t *)((char *)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v129 = v0;
  int64_t v31 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *unint64_t v30 = v31;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v30, *MEMORY[0x263F8F0E0], v27);
  id v32 = v31;
  char v33 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  if ((v33 & 1) == 0) {
    goto LABEL_67;
  }
  if (qword_26A4EB648 != -1) {
    goto LABEL_68;
  }
LABEL_3:
  uint64_t v34 = sub_25B37F780();
  uint64_t v135 = __swift_project_value_buffer(v34, (uint64_t)qword_26A4EB630);
  uint64_t v35 = sub_25B37F760();
  os_log_type_t v36 = sub_25B37FCD0();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = v137;
  if (v37)
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    _os_log_impl(&dword_25B2C1000, v35, v36, "Fetching devices", v39, 2u);
    MEMORY[0x2611621B0](v39, -1, -1);
  }

  uint64_t v40 = v129;
  id v128 = (id)sub_25B34C818();
  if (!v128)
  {
    uint64_t v83 = sub_25B37F760();
    os_log_type_t v84 = sub_25B37FCB0();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl(&dword_25B2C1000, v83, v84, "Could not fetch devices because target could not be created", v85, 2u);
      MEMORY[0x2611621B0](v85, -1, -1);
    }

    return;
  }
  uint64_t v127 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices;
  uint64_t v41 = *(void *)(v40
                  + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices);
  id v42 = (id)MEMORY[0x263F8EE78];
  v142[0] = (id)MEMORY[0x263F8EE78];
  id v43 = *(id *)(v41 + 16);
  swift_bridgeObjectRetain();
  os_log_type_t v138 = v19;
  if (!v43) {
    goto LABEL_22;
  }
  unint64_t v44 = 0;
  uint64_t v45 = v140;
  id v131 = v43;
  do
  {
    if (v44 >= *(void *)(v41 + 16))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_once();
      goto LABEL_3;
    }
    unint64_t v46 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    uint64_t v47 = *(void *)(v139 + 72);
    sub_25B35242C(v41 + v46 + v47 * v44, (uint64_t)v26, type metadata accessor for ReplicatorDevice);
    sub_25B35242C((uint64_t)v26 + *(int *)(v45 + 48), (uint64_t)v7, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v7, 4, v48);
    if ((v49 - 2) >= 2)
    {
      if (v49)
      {
        sub_25B352494((uint64_t)v7, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B35242C((uint64_t)v26, v24, type metadata accessor for ReplicatorDevice);
        sub_25B352494(v24, type metadata accessor for ReplicatorDevice);
LABEL_9:
        sub_25B352494((uint64_t)v26, type metadata accessor for ReplicatorDevice);
        goto LABEL_10;
      }
      uint64_t v50 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v7, v50);
    }
    sub_25B35242C((uint64_t)v26, v24, type metadata accessor for ReplicatorDevice);
    char v51 = *(unsigned char *)(v24 + *(int *)(v45 + 56));
    sub_25B352494(v24, type metadata accessor for ReplicatorDevice);
    if (v51) {
      goto LABEL_9;
    }
    sub_25B3505C4((uint64_t)v26, v136);
    uint64_t v52 = v142[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_25B3109DC(0, v52[2] + 1, 1);
      uint64_t v52 = v142[0];
    }
    unint64_t v54 = v52[2];
    unint64_t v53 = v52[3];
    if (v54 >= v53 >> 1)
    {
      sub_25B3109DC(v53 > 1, v54 + 1, 1);
      uint64_t v52 = v142[0];
    }
    v52[2] = v54 + 1;
    sub_25B3505C4(v136, (uint64_t)v52 + v46 + v54 * v47);
    uint64_t v45 = v140;
    id v43 = v131;
LABEL_10:
    ++v44;
    objc_super v19 = v138;
  }
  while (v43 != (id)v44);
  id v42 = v142[0];
  uint64_t v38 = v137;
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v55 = sub_25B342F64((uint64_t)v42);
  swift_release();
  v142[0] = 0;
  id v56 = objc_msgSend(v128, sel_devicesAndReturnError_, v142);
  id v57 = v142[0];
  if (v56)
  {
    int v58 = v56;
    sub_25B37F400();
    swift_allocObject();
    sub_25B37F3F0();
    uint64_t v59 = sub_25B37F570();
    unint64_t v61 = v60;
    sub_25B322024();
    sub_25B37F3E0();
    sub_25B2CA2D8(v59, v61);
    swift_release();
    id v62 = v142[0];
    if (!v142[0])
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x25B34C048);
    }
    uint64_t v125 = v55;
    id v63 = v57;

    uint64_t v64 = v129;
    *(void *)(v129 + v127) = v62;
    id v131 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v65 = *(void *)(v64
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData);
    uint64_t v7 = v130;
    if ((v65 & 1) == 0) {
      *(void *)(v64
    }
                + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData) = v65 | 1;
    uint64_t v66 = *(void *)(v64 + v127);
    id v67 = (id)MEMORY[0x263F8EE78];
    v142[0] = (id)MEMORY[0x263F8EE78];
    uint64_t v68 = *(void *)(v66 + 16);
    swift_bridgeObjectRetain();
    if (v68)
    {
      unint64_t v24 = 0;
      uint64_t v26 = &qword_26A4EBB98;
      while (1)
      {
        if (v24 >= *(void *)(v66 + 16)) {
          goto LABEL_66;
        }
        unint64_t v70 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
        uint64_t v71 = *(void *)(v139 + 72);
        sub_25B35242C(v66 + v70 + v71 * v24, (uint64_t)v19, type metadata accessor for ReplicatorDevice);
        uint64_t v72 = v140;
        sub_25B35242C((uint64_t)&v19[*(int *)(v140 + 48)], (uint64_t)v7, type metadata accessor for ReplicatorDevice.RelationshipState);
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
        int v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48))(v7, 4, v73);
        if ((v74 - 2) >= 2)
        {
          if (v74)
          {
            sub_25B352494((uint64_t)v7, type metadata accessor for ReplicatorDevice.RelationshipState);
            uint64_t v69 = v134;
            sub_25B35242C((uint64_t)v19, v134, type metadata accessor for ReplicatorDevice);
            sub_25B352494(v69, type metadata accessor for ReplicatorDevice);
            goto LABEL_29;
          }
          uint64_t v75 = sub_25B37F640();
          (*(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 8))(v7, v75);
          uint64_t v72 = v140;
        }
        uint64_t v76 = (uint64_t)v19;
        uint64_t v77 = v134;
        sub_25B35242C(v76, v134, type metadata accessor for ReplicatorDevice);
        char v78 = *(unsigned char *)(v77 + *(int *)(v72 + 56));
        uint64_t v79 = v77;
        objc_super v19 = v138;
        sub_25B352494(v79, type metadata accessor for ReplicatorDevice);
        if ((v78 & 1) == 0)
        {
          sub_25B3505C4((uint64_t)v19, v133);
          char v80 = v142[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_25B3109DC(0, v80[2] + 1, 1);
            char v80 = v142[0];
          }
          unint64_t v82 = v80[2];
          unint64_t v81 = v80[3];
          if (v82 >= v81 >> 1)
          {
            sub_25B3109DC(v81 > 1, v82 + 1, 1);
            char v80 = v142[0];
          }
          v80[2] = v82 + 1;
          sub_25B3505C4(v133, (uint64_t)v80 + v70 + v82 * v71);
          uint64_t v38 = v137;
          uint64_t v7 = v130;
          goto LABEL_30;
        }
LABEL_29:
        sub_25B352494((uint64_t)v19, type metadata accessor for ReplicatorDevice);
LABEL_30:
        if (v68 == ++v24)
        {
          id v67 = v142[0];
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v86 = sub_25B342F64((uint64_t)v67);
    swift_release();
    int64_t v87 = (id *)v131;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_25B37F760();
    os_log_type_t v89 = sub_25B37FCD0();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v91 = (uint64_t)v132;
    uint64_t v133 = v86;
    if (v90)
    {
      unint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v92 = 134217984;
      v142[0] = v87[2];
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B2C1000, v88, v89, "Fetched %ld devices", v92, 0xCu);
      MEMORY[0x2611621B0](v92, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v105 = (uint64_t)v126;
    uint64_t v106 = (char *)v87[2];
    if (v106)
    {
      uint64_t v107 = (uint64_t)v131
           + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
      os_log_type_t v138 = *(char **)(v139 + 72);
      *(void *)&long long v93 = 136446466;
      long long v136 = v93;
      uint64_t v134 = MEMORY[0x263F8EE58] + 8;
      do
      {
        sub_25B35242C(v107, v105, type metadata accessor for ReplicatorDevice);
        sub_25B35242C(v105 + *(int *)(v140 + 48), v91, type metadata accessor for ReplicatorDevice.RelationshipState);
        uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
        int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 48))(v91, 4, v108);
        unint64_t v110 = 0xEA00000000006465;
        uint64_t v111 = 0x6375646F72746E69;
        switch(v109)
        {
          case 1:
            break;
          case 2:
            unint64_t v110 = 0xE700000000000000;
            uint64_t v111 = 0x676E6972696170;
            break;
          case 3:
            unint64_t v110 = 0xE600000000000000;
            uint64_t v111 = 0x646572696170;
            break;
          case 4:
            unint64_t v110 = 0xE700000000000000;
            uint64_t v111 = 0x6E776F6E6B6E75;
            break;
          default:
            uint64_t v112 = sub_25B37F640();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v91, v112);
            unint64_t v110 = 0xE900000000000067;
            uint64_t v111 = 0x6E6974617267696DLL;
            break;
        }
        uint64_t v139 = v111;
        sub_25B35242C(v105, v38, type metadata accessor for ReplicatorDevice);
        swift_bridgeObjectRetain();
        uint64_t v113 = sub_25B37F760();
        os_log_type_t v114 = sub_25B37FCD0();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = swift_slowAlloc();
          uint64_t v116 = (void *)swift_slowAlloc();
          v142[0] = v116;
          *(_DWORD *)uint64_t v115 = v136;
          sub_25B37F640();
          sub_25B3524F4((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
          uint64_t v117 = sub_25B380190();
          *(void *)(v115 + 4) = sub_25B2CA048(v117, v118, (uint64_t *)v142);
          swift_bridgeObjectRelease();
          sub_25B352494(v137, type metadata accessor for ReplicatorDevice);
          *(_WORD *)(v115 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v115 + 14) = sub_25B2CA048(v139, v110, (uint64_t *)v142);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B2C1000, v113, v114, "Fetched %{public}s - %{public}s", (uint8_t *)v115, 0x16u);
          swift_arrayDestroy();
          uint64_t v119 = v116;
          uint64_t v91 = (uint64_t)v132;
          MEMORY[0x2611621B0](v119, -1, -1);
          uint64_t v120 = v115;
          uint64_t v38 = v137;
          MEMORY[0x2611621B0](v120, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();

          sub_25B352494(v38, type metadata accessor for ReplicatorDevice);
        }
        sub_25B352494(v105, type metadata accessor for ReplicatorDevice);
        v107 += (uint64_t)v138;
        --v106;
      }
      while (v106);
    }
    swift_bridgeObjectRelease();
    v142[0] = *(id *)(v129 + v127);
    swift_bridgeObjectRetain();
    sub_25B37F7E0();
    swift_bridgeObjectRelease();
    uint64_t v121 = v133;
    char v122 = sub_25B33CFC0(v125, v133);
    swift_bridgeObjectRelease();
    if (v122)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v123 = (void *)sub_25B3117A4(v121);
      swift_bridgeObjectRelease();
      v142[0] = v123;
      sub_25B37F7E0();
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v94 = v142[0];
    swift_bridgeObjectRelease();
    uint64_t v95 = (void *)sub_25B37F470();

    swift_willThrow();
    id v96 = v95;
    id v97 = v95;
    uint64_t v98 = sub_25B37F760();
    os_log_type_t v99 = sub_25B37FCB0();
    if (os_log_type_enabled(v98, v99))
    {
      id v100 = (uint8_t *)swift_slowAlloc();
      uint64_t v101 = (void *)swift_slowAlloc();
      v142[0] = v101;
      *(_DWORD *)id v100 = 136315138;
      uint64_t v141 = (uint64_t)v95;
      id v102 = v95;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
      uint64_t v103 = sub_25B37F9E0();
      uint64_t v141 = sub_25B2CA048(v103, v104, (uint64_t *)v142);
      sub_25B37FD70();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B2C1000, v98, v99, "Could not fetch devices: %s", v100, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v101, -1, -1);
      MEMORY[0x2611621B0](v100, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_25B34C05C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v29[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t LocalDevice = type metadata accessor for ReplicatorControlXPCServerResponse.GetLocalDevice(0);
  MEMORY[0x270FA5388](LocalDevice - 8);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B37F8A0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (id *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  id v12 = v11;
  LOBYTE(v11) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    if (qword_26A4EB648 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v13 = sub_25B37F780();
  __swift_project_value_buffer(v13, (uint64_t)qword_26A4EB630);
  uint64_t v14 = sub_25B37F760();
  os_log_type_t v15 = sub_25B37FCD0();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_25B2C1000, v14, v15, "Fetching local device", v16, 2u);
    MEMORY[0x2611621B0](v16, -1, -1);
  }

  uint64_t v17 = (void *)sub_25B34C818();
  if (v17)
  {
    v29[0] = 0;
    id v18 = objc_msgSend(v17, sel_localDeviceAndReturnError_, v29);
    id v19 = v29[0];
    if (v18)
    {
      uint64_t v20 = v18;
      sub_25B36E6C4((uint64_t)v18, (uint64_t)v6);
      id v21 = v19;
      swift_unknownObjectRelease();

      return sub_25B3505C4((uint64_t)v6, a1);
    }
    else
    {
      id v28 = v29[0];
      sub_25B37F470();

      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v23 = sub_25B37F760();
    os_log_type_t v24 = sub_25B37FCB0();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_25B2C1000, v23, v24, "Could not fetch local device because target could not be created", v25, 2u);
      MEMORY[0x2611621B0](v25, -1, -1);
    }

    uint64_t v26 = sub_25B37F660();
    sub_25B3524F4(&qword_26A4EC6A0, MEMORY[0x263F63A40]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, *MEMORY[0x263F63A18], v26);
    return swift_willThrow();
  }
}

uint64_t sub_25B34C448@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t PushToken = type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken(0);
  MEMORY[0x270FA5388](PushToken);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37F640();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a1, v8);
  uint64_t v9 = sub_25B34C818();
  if (!v9)
  {
    uint64_t v26 = sub_25B37F660();
    sub_25B3524F4(&qword_26A4EC6A0, MEMORY[0x263F63A40]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, *MEMORY[0x263F63A18], v26);
    swift_willThrow();
    return sub_25B352494((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  }
  uint64_t v10 = (void *)v9;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3524F4(&qword_26A4EBED0, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  uint64_t v11 = sub_25B37F420();
  if (!v2)
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    os_log_type_t v15 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v13, v14);
    swift_release();
    id v32 = 0;
    id v16 = objc_msgSend(v10, sel_pushTokenWithParameters_error_, v15, &v32);

    id v17 = v32;
    if (v16)
    {
      int64_t v31 = a2;
      sub_25B37F400();
      swift_allocObject();
      sub_25B37F3F0();
      uint64_t v18 = sub_25B37F570();
      unint64_t v20 = v19;
      sub_25B322508();
      sub_25B37F3E0();
      sub_25B2CA2D8(v18, v20);
      swift_release();
      unint64_t v21 = v33;
      if (v33 >> 60 != 15)
      {
        id v22 = v32;
        id v23 = v17;

        swift_unknownObjectRelease();
        uint64_t result = sub_25B352494((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
        uint64_t v25 = v31;
        *int64_t v31 = v22;
        v25[1] = v21;
        return result;
      }
      __break(1u);
      goto LABEL_10;
    }
    id v28 = v32;
    sub_25B37F470();

    swift_willThrow();
    swift_unknownObjectRelease();
    return sub_25B352494((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  }
LABEL_10:
  uint64_t v29 = swift_unexpectedError();
  __break(1u);
  sub_25B2CA2D8(v29, v30);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B34C818()
{
  uint64_t v1 = sub_25B37F8A0();
  Class isa = v1[-1].isa;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (void *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v4 = v5;
  (*((void (**)(void *, void, NSObject *))isa + 13))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*((void (**)(void *, NSObject *))isa + 1))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_15;
  }
  sub_25B34FBF4();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection);
  if (!v7)
  {
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B37F780();
    __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB630);
    uint64_t v1 = sub_25B37F760();
    os_log_type_t v9 = sub_25B37FCC0();
    if (os_log_type_enabled(v1, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_25B2C1000, v1, v9, "ReplicatorControlClient: Failed to establish a connection", v10, 2u);
      MEMORY[0x2611621B0](v10, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v1 = v7;
  if ([v1 remoteTarget])
  {
    sub_25B37FDA0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_25B2E31F0((uint64_t)v17, (uint64_t)v18, &qword_26B3413D8);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB2C0);
    if (swift_dynamicCast())
    {

      return v16[1];
    }
  }
  else
  {
    sub_25B2E344C((uint64_t)v18, &qword_26B3413D8);
  }
  if (qword_26A4EB648 != -1) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v12 = sub_25B37F780();
  __swift_project_value_buffer(v12, (uint64_t)qword_26A4EB630);
  uint64_t v13 = sub_25B37F760();
  os_log_type_t v14 = sub_25B37FCC0();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl(&dword_25B2C1000, v13, v14, "ReplicatorControlClient: Failed to cast connection to server interface protocol", v15, 2u);
    MEMORY[0x2611621B0](v15, -1, -1);
  }

LABEL_18:
  return 0;
}

uint64_t sub_25B34CB58(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v29 = a4;
  uint64_t v27 = a3;
  uint64_t v5 = sub_25B37F640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = type metadata accessor for ReplicatorControlXPCServerParameters.Pair(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v26 = a1;
  v11(v10, a1, v5);
  uint64_t v12 = (void *)sub_25B34C818();
  id v28 = v10;
  if (v12)
  {
    id v25 = v12;
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B3524F4(&qword_26A4EBE60, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
    uint64_t v13 = sub_25B37F420();
    unint64_t v15 = v14;
    id v16 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v13, v15);
    swift_release();
    v11((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v5);
    unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v17, (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v19 = (void (**)(void))(v18 + ((v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
    unint64_t v20 = v29;
    char *v19 = v27;
    v19[1] = v20;
    aBlock[4] = sub_25B351EB0;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B34D454;
    aBlock[3] = &block_descriptor_80;
    unint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v25, sel_pairWithParameters_completion_, v16, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    id v22 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v23 = 3;
    *(void *)(v23 + 8) = 0;
    v27();
  }
  return sub_25B352494((uint64_t)v28, type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
}

void sub_25B34CED4(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_25B37F640();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v38 - v13;
  if (a1)
  {
    uint64_t v42 = a4;
    uint64_t v15 = qword_26A4EB648;
    id v16 = a1;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_25B37F780();
    __swift_project_value_buffer(v17, (uint64_t)qword_26A4EB630);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    id v18 = v16;
    uint64_t v19 = sub_25B37F760();
    os_log_type_t v20 = sub_25B37FCD0();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v41 = a3;
      uint64_t v22 = v21;
      unint64_t v39 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v44 = v40;
      *(_DWORD *)uint64_t v22 = 136446466;
      v38[1] = v22 + 4;
      sub_25B3524F4((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
      uint64_t v23 = sub_25B380190();
      uint64_t v43 = sub_25B2CA048(v23, v24, &v44);
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v22 + 12) = 2114;
      uint64_t v43 = (uint64_t)v18;
      id v25 = v18;
      sub_25B37FD70();
      uint64_t v26 = v39;
      *unint64_t v39 = a1;

      _os_log_impl(&dword_25B2C1000, v19, v20, "Failed to pair with %{public}s: %{public}@", (uint8_t *)v22, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB8F8);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v26, -1, -1);
      uint64_t v27 = v40;
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v27, -1, -1);
      uint64_t v28 = v22;
      a3 = v41;
      MEMORY[0x2611621B0](v28, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    id v37 = v18;
    a3(a1);
  }
  else
  {
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_25B37F780();
    __swift_project_value_buffer(v29, (uint64_t)qword_26A4EB630);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
    unint64_t v30 = sub_25B37F760();
    os_log_type_t v31 = sub_25B37FCD0();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v42 = a4;
      uint64_t v34 = v33;
      uint64_t v44 = v33;
      *(_DWORD *)id v32 = 136446210;
      uint64_t v41 = a3;
      sub_25B3524F4((unint64_t *)&qword_26A4EC110, MEMORY[0x263F07508]);
      uint64_t v35 = sub_25B380190();
      uint64_t v43 = sub_25B2CA048(v35, v36, &v44);
      a3 = v41;
      sub_25B37FD70();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      _os_log_impl(&dword_25B2C1000, v30, v31, "Paired with %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v34, -1, -1);
      MEMORY[0x2611621B0](v32, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }

    a3(0);
  }
}

void sub_25B34D454(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_25B34D4C0(uint64_t a1)
{
  v18[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ReplicatorControlXPCServerParameters.Unpair(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B37F640();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  uint64_t v7 = sub_25B34C818();
  if (!v7)
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 3;
    *(void *)(v15 + 8) = 0;
    swift_willThrow();
    return sub_25B352494((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  }
  uint64_t v8 = (void *)v7;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3524F4(&qword_26A4EBE70, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  uint64_t v9 = sub_25B37F420();
  if (!v1)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v11, v12);
    swift_release();
    v18[0] = 0;
    LOBYTE(v12) = objc_msgSend(v8, sel_unpairWithParameters_error_, v13, v18);

    if (v12)
    {
      id v14 = v18[0];
    }
    else
    {
      id v16 = v18[0];
      sub_25B37F470();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
    return sub_25B352494((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B34D734(uint64_t a1)
{
  v18[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B37F640();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  uint64_t v7 = sub_25B34C818();
  if (!v7)
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 3;
    *(void *)(v15 + 8) = 0;
    swift_willThrow();
    return sub_25B352494((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  }
  uint64_t v8 = (void *)v7;
  sub_25B37F440();
  swift_allocObject();
  sub_25B37F430();
  sub_25B3524F4(&qword_26A4EBE80, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  uint64_t v9 = sub_25B37F420();
  if (!v1)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = (void *)sub_25B37F560();
    sub_25B2CA2D8(v11, v12);
    swift_release();
    v18[0] = 0;
    LOBYTE(v12) = objc_msgSend(v8, sel_unavailableWithParameters_error_, v13, v18);

    if (v12)
    {
      id v14 = v18[0];
    }
    else
    {
      id v16 = v18[0];
      sub_25B37F470();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
    return sub_25B352494((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unavailable);
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B34D9A8(uint64_t a1, char a2)
{
  return sub_25B34F1A8(a1, a2, (void (*)(uint64_t, uint64_t))sub_25B321B6C, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled, (SEL *)&selRef_enableAllowListWithParameters_error_);
}

uint64_t sub_25B34DA18(uint64_t a1, void *a2)
{
  v15[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = sub_25B34C818();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    v15[0] = a2;
    sub_25B37F440();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_25B37F430();
    sub_25B321D54();
    uint64_t v6 = sub_25B37F420();
    if (v2)
    {
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v8 = v6;
      unint64_t v9 = v7;
      unint64_t v10 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v8, v9);
      swift_bridgeObjectRelease();
      swift_release();
      v15[0] = 0;
      LOBYTE(v8) = objc_msgSend(v5, sel_setAllowListWithParameters_error_, v10, v15);

      if (v8)
      {
        id v11 = v15[0];
      }
      else
      {
        id v14 = v15[0];
        sub_25B37F470();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v12 = 3;
    *(void *)(v12 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B34DBD0(uint64_t a1, uint64_t a2, SEL *a3)
{
  v21[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B34C818();
  if (v9)
  {
    unint64_t v10 = (void *)v9;
    uint64_t v11 = sub_25B37F640();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v8, a2, v11);
    sub_25B37F440();
    swift_allocObject();
    sub_25B37F430();
    sub_25B3524F4(&qword_26A4EBEA8, (void (*)(uint64_t))type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
    uint64_t v12 = sub_25B37F420();
    if (v3)
    {
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      id v16 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v14, v15);
      swift_release();
      v21[0] = 0;
      LOBYTE(v14) = objc_msgSend(v10, *a3, v16, v21);

      if (v14)
      {
        id v17 = v21[0];
      }
      else
      {
        id v20 = v21[0];
        sub_25B37F470();

        swift_willThrow();
      }
      swift_unknownObjectRelease();
      return sub_25B352494((uint64_t)v8, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
    }
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 3;
    *(void *)(v18 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B34DE44@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25B34DE84();
  *a1 = result & 1;
  return result;
}

uint64_t sub_25B34DE84()
{
  v34[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (id *)((char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = (void *)sub_25B34C818();
  if (!v7)
  {
    if (qword_26A4EB648 == -1)
    {
LABEL_7:
      uint64_t v16 = sub_25B37F780();
      __swift_project_value_buffer(v16, (uint64_t)qword_26A4EB630);
      id v17 = sub_25B37F760();
      os_log_type_t v18 = sub_25B37FCB0();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_25B2C1000, v17, v18, "Could not fetch allow list state because target could not be created", v19, 2u);
        MEMORY[0x2611621B0](v19, -1, -1);
      }

      return 0;
    }
LABEL_18:
    swift_once();
    goto LABEL_7;
  }
  v34[0] = 0;
  id v8 = objc_msgSend(v7, sel_isAllowListEnabledAndReturnError_, v34);
  id v9 = v34[0];
  if (!v8)
  {
    id v20 = v34[0];
    uint64_t v21 = (void *)sub_25B37F470();

    swift_willThrow();
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_25B37F780();
    __swift_project_value_buffer(v22, (uint64_t)qword_26A4EB630);
    id v23 = v21;
    id v24 = v21;
    id v25 = sub_25B37F760();
    os_log_type_t v26 = sub_25B37FCB0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v33 = (uint64_t)v21;
      id v29 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
      uint64_t v30 = sub_25B37F9E0();
      uint64_t v33 = sub_25B2CA048(v30, v31, (uint64_t *)v34);
      sub_25B37FD70();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B2C1000, v25, v26, "Could not fetch allow list state: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v28, -1, -1);
      MEMORY[0x2611621B0](v27, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return 0;
  }
  unint64_t v10 = v8;
  sub_25B37F400();
  swift_allocObject();
  sub_25B37F3F0();
  uint64_t v11 = sub_25B37F570();
  unint64_t v13 = v12;
  sub_25B32220C();
  sub_25B37F3E0();
  sub_25B2CA2D8(v11, v13);
  swift_release();
  if (LOBYTE(v34[0]) != 2)
  {
    uint64_t v14 = (uint64_t)v34[0] & 1;
    id v15 = v9;
    swift_unknownObjectRelease();

    return v14;
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B34E350@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25B34E38C();
  *a1 = result;
  return result;
}

uint64_t sub_25B34E38C()
{
  v34[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (id *)((char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = (void *)sub_25B34C818();
  if (!v7)
  {
    if (qword_26A4EB648 == -1)
    {
LABEL_7:
      uint64_t v16 = sub_25B37F780();
      __swift_project_value_buffer(v16, (uint64_t)qword_26A4EB630);
      id v17 = sub_25B37F760();
      os_log_type_t v18 = sub_25B37FCB0();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_25B2C1000, v17, v18, "Could not fetch allow list because target could not be created", v19, 2u);
        MEMORY[0x2611621B0](v19, -1, -1);
      }

      return MEMORY[0x263F8EE78];
    }
LABEL_18:
    swift_once();
    goto LABEL_7;
  }
  v34[0] = 0;
  id v8 = objc_msgSend(v7, sel_allowListAndReturnError_, v34);
  id v9 = v34[0];
  if (!v8)
  {
    id v20 = v34[0];
    uint64_t v21 = (void *)sub_25B37F470();

    swift_willThrow();
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_25B37F780();
    __swift_project_value_buffer(v22, (uint64_t)qword_26A4EB630);
    id v23 = v21;
    id v24 = v21;
    id v25 = sub_25B37F760();
    os_log_type_t v26 = sub_25B37FCB0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v33 = (uint64_t)v21;
      id v29 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
      uint64_t v30 = sub_25B37F9E0();
      uint64_t v33 = sub_25B2CA048(v30, v31, (uint64_t *)v34);
      sub_25B37FD70();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B2C1000, v25, v26, "Could not fetch allow list: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611621B0](v28, -1, -1);
      MEMORY[0x2611621B0](v27, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return MEMORY[0x263F8EE78];
  }
  unint64_t v10 = v8;
  sub_25B37F400();
  swift_allocObject();
  id v11 = v9;
  sub_25B37F3F0();
  uint64_t v12 = sub_25B37F570();
  unint64_t v14 = v13;
  sub_25B322348();
  sub_25B37F3E0();
  sub_25B2CA2D8(v12, v14);
  swift_release();
  id v15 = v34[0];
  if (v34[0])
  {
    swift_unknownObjectRelease();

    return (uint64_t)v15;
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_25B34E858()
{
  v5[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = (void *)sub_25B34C818();
  if (v0)
  {
    v5[0] = 0;
    if (objc_msgSend(v0, sel_retryStuckRelationshipsAndReturnError_, v5))
    {
      id v1 = v5[0];
    }
    else
    {
      id v4 = v5[0];
      sub_25B37F470();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v2 = 3;
    *(void *)(v2 + 8) = 0;
    return swift_willThrow();
  }
}

void sub_25B34E94C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData) & 2) == 0)
  {
    sub_25B34E9A8();
    sub_25B34ECA0();
  }
  *a2 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled);
}

void sub_25B34E9A8()
{
  uint64_t v1 = v0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  uint64_t v7 = v6;
  uint64_t v8 = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken;
  if (*(_DWORD *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken) != -1)
    return;
  int out_token = -1;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_25B35253C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B344CCC;
  aBlock[3] = &block_descriptor_157_0;
  unint64_t v10 = _Block_copy(aBlock);
  swift_release();
  uint64_t v11 = sub_25B37F9F0();
  uint32_t v12 = notify_register_dispatch((const char *)(v11 + 32), &out_token, v7, v10);
  swift_release();
  _Block_release(v10);
  if (v12)
  {
    if (qword_26A4EB648 == -1)
    {
LABEL_5:
      uint64_t v13 = sub_25B37F780();
      __swift_project_value_buffer(v13, (uint64_t)qword_26A4EB630);
      unint64_t v14 = sub_25B37F760();
      os_log_type_t v15 = sub_25B37FCB0();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_25B2C1000, v14, v15, "Could not register for enabled state change notifications", v16, 2u);
        MEMORY[0x2611621B0](v16, -1, -1);
      }

      goto LABEL_8;
    }
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
LABEL_8:
  *(_DWORD *)(v1 + v8) = out_token;
}

void sub_25B34ECA0()
{
  uint64_t v1 = v0;
  v35[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B37F8A0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (id *)((char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v7 = v6;
  LOBYTE(v6) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v8 = (void *)sub_25B34C818();
  if (v8)
  {
    v35[0] = 0;
    id v9 = objc_msgSend(v8, sel_isEnabledAndReturnError_, v35);
    id v10 = v35[0];
    if (v9)
    {
      uint64_t v11 = v9;
      sub_25B37F400();
      swift_allocObject();
      sub_25B37F3F0();
      uint64_t v12 = sub_25B37F570();
      unint64_t v14 = v13;
      sub_25B321EE8();
      sub_25B37F3E0();
      sub_25B2CA2D8(v12, v14);
      swift_release();
      if (LOBYTE(v35[0]) == 2)
      {
        __break(1u);
        swift_unexpectedError();
        __break(1u);
      }
      else
      {
        char v15 = (uint64_t)v35[0] & 1;
        id v16 = v10;

        *(unsigned char *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled) = v15;
        uint64_t v17 = *(void *)(v1
                        + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData);
        if ((v17 & 2) == 0) {
          *(void *)(v1
        }
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_fetchedData) = v17 | 2;
        LOBYTE(v35[0]) = v15;
        sub_25B37F7E0();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      id v22 = v35[0];
      id v23 = (void *)sub_25B37F470();

      swift_willThrow();
      if (qword_26A4EB648 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_25B37F780();
      __swift_project_value_buffer(v24, (uint64_t)qword_26A4EB630);
      id v25 = v23;
      id v26 = v23;
      uint64_t v27 = sub_25B37F760();
      os_log_type_t v28 = sub_25B37FCB0();
      if (os_log_type_enabled(v27, v28))
      {
        id v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        v35[0] = v30;
        *(_DWORD *)id v29 = 136315138;
        uint64_t v34 = (uint64_t)v23;
        id v31 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CA8);
        uint64_t v32 = sub_25B37F9E0();
        uint64_t v34 = sub_25B2CA048(v32, v33, (uint64_t *)v35);
        sub_25B37FD70();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_25B2C1000, v27, v28, "Could not fetch enabled state: %s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v30, -1, -1);
        MEMORY[0x2611621B0](v29, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    return;
  }
  if (qword_26A4EB648 != -1) {
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v18 = sub_25B37F780();
  __swift_project_value_buffer(v18, (uint64_t)qword_26A4EB630);
  uint64_t v19 = sub_25B37F760();
  os_log_type_t v20 = sub_25B37FCB0();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_25B2C1000, v19, v20, "Could not fetch enabled state because target could not be created", v21, 2u);
    MEMORY[0x2611621B0](v21, -1, -1);
  }
}

uint64_t sub_25B34F1A8(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, SEL *a5)
{
  v22[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v9 = sub_25B34C818();
  if (v9)
  {
    id v10 = (void *)v9;
    LOBYTE(v22[0]) = a2 & 1;
    sub_25B37F440();
    swift_allocObject();
    uint64_t v11 = sub_25B37F430();
    a3(v11, v12);
    uint64_t v13 = sub_25B37F420();
    if (v5)
    {
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      uint64_t v17 = (void *)sub_25B37F560();
      sub_25B2CA2D8(v15, v16);
      swift_release();
      v22[0] = 0;
      LOBYTE(v15) = objc_msgSend(v10, *a5, v17, v22);

      if (v15)
      {
        id v18 = v22[0];
      }
      else
      {
        id v21 = v22[0];
        sub_25B37F470();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_25B2DCCD4();
    swift_allocError();
    *(unsigned char *)uint64_t v19 = 3;
    *(void *)(v19 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_25B34F35C()
{
  uint64_t v1 = sub_25B37F8A0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (void *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v7 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection;
  if (!*(void *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection])
  {
    id v8 = sub_25B37B3D4();
    if (v8)
    {
      uint64_t v9 = *(void **)&v0[v7];
      *(void *)&v0[v7] = v8;
      id v10 = v8;

      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v0;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = sub_25B351C2C;
      *(void *)(v12 + 24) = v11;
      aBlock[4] = sub_25B318578;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B353A10;
      aBlock[3] = &block_descriptor_1;
      uint64_t v13 = _Block_copy(aBlock);
      unint64_t v14 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_configureConnection_, v13);
      _Block_release(v13);
      LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v13 & 1) == 0)
      {
        sub_25B34F9D8();
        swift_release();

        return;
      }
LABEL_8:
      __break(1u);
    }
  }
}

void sub_25B34F5CC(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_25B37F970();
  id v5 = objc_msgSend(self, sel_interfaceWithIdentifier_, v4);

  id v6 = self;
  id v7 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_2708EE600);
  objc_msgSend(v5, sel_setClient_, v7);

  id v8 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_2708EFAE8);
  objc_msgSend(v5, sel_setServer_, v8);

  id v9 = objc_msgSend(self, sel_utility);
  objc_msgSend(a1, sel_setServiceQuality_, v9);

  objc_msgSend(a1, sel_setInterface_, v5);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(void *)(a2 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue));
  uint64_t v17 = sub_25B34F8C4;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_25B37B5EC;
  unint64_t v16 = &block_descriptor_59;
  id v10 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setActivationHandler_, v10);
  _Block_release(v10);
  uint64_t v17 = sub_25B34F8D0;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_25B37B5EC;
  unint64_t v16 = &block_descriptor_62;
  uint64_t v11 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setInterruptionHandler_, v11);
  _Block_release(v11);
  uint64_t v17 = sub_25B34F8DC;
  uint64_t v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_25B37B5EC;
  unint64_t v16 = &block_descriptor_65;
  uint64_t v12 = _Block_copy(&v13);
  objc_msgSend(a1, sel_setInvalidationHandler_, v12);
  _Block_release(v12);
}

void sub_25B34F8C4(uint64_t a1)
{
}

void sub_25B34F8D0(uint64_t a1)
{
}

void sub_25B34F8DC(uint64_t a1)
{
}

void sub_25B34F8E8(uint64_t a1, const char *a2)
{
  if (qword_26A4EB648 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_25B37F780();
  __swift_project_value_buffer(v3, (uint64_t)qword_26A4EB630);
  oslog = sub_25B37F760();
  os_log_type_t v4 = sub_25B37FCA0();
  if (os_log_type_enabled(oslog, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_25B2C1000, oslog, v4, a2, v5, 2u);
    MEMORY[0x2611621B0](v5, -1, -1);
  }
}

void sub_25B34F9D8()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_serverStartupToken);
  swift_beginAccess();
  if (*v1 == -1)
  {
    uint64_t v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_25B351C94;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B344CCC;
    aBlock[3] = &block_descriptor_56;
    os_log_type_t v4 = _Block_copy(aBlock);
    swift_release();
    id v5 = (const char *)(sub_25B37F9F0() + 32);
    swift_beginAccess();
    uint32_t v6 = notify_register_dispatch(v5, v1, v2, v4);
    swift_endAccess();
    _Block_release(v4);
    swift_release();
    if (v6)
    {
      if (qword_26A4EB648 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_25B37F780();
      __swift_project_value_buffer(v7, (uint64_t)qword_26A4EB630);
      id v8 = sub_25B37F760();
      os_log_type_t v9 = sub_25B37FCB0();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        _os_log_impl(&dword_25B2C1000, v8, v9, "Could not register for daemon startup notifications", v10, 2u);
        MEMORY[0x2611621B0](v10, -1, -1);
      }
    }
  }
}

void sub_25B34FBF4()
{
  uint64_t v1 = (void *)sub_25B37F8A0();
  uint64_t v2 = *(v1 - 1);
  MEMORY[0x270FA5388](v1);
  os_log_type_t v4 = (void *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *os_log_type_t v4 = v5;
  (*(void (**)(void *, void, void *))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  id v6 = v5;
  LOBYTE(v5) = sub_25B37F8B0();
  (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  sub_25B34F35C();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection);
  if (!v7) {
    return;
  }
  uint64_t v1 = v7;
  if (objc_msgSend(v1, sel_remoteTarget))
  {
    sub_25B37FDA0();

    swift_unknownObjectRelease();
    sub_25B2E344C((uint64_t)v12, &qword_26B3413D8);
    return;
  }
  memset(v12, 0, sizeof(v12));
  sub_25B2E344C((uint64_t)v12, &qword_26B3413D8);
  objc_msgSend(v1, sel_activate);
  if (qword_26A4EB648 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v8 = sub_25B37F780();
  __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB630);
  os_log_type_t v9 = sub_25B37F760();
  os_log_type_t v10 = sub_25B37FCD0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_25B2C1000, v9, v10, "Activated ReplicatorControlClient connection", v11, 2u);
    MEMORY[0x2611621B0](v11, -1, -1);
  }
}

void sub_25B34FE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x261162290](v2);
  if (v3)
  {
    os_log_type_t v4 = (void *)v3;
    sub_25B34FBF4();
  }
}

void sub_25B34FE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B37F830();
  uint64_t v37 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_25B37F860();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_25B37F820();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  os_log_type_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_25B37F890();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)&v31 - v14;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x261162290](a2 + 16);
  if (v15)
  {
    unint64_t v16 = (char *)v15;
    if (qword_26A4EB648 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_25B37F780();
    __swift_project_value_buffer(v17, (uint64_t)qword_26A4EB630);
    uint64_t v18 = sub_25B37F760();
    os_log_type_t v19 = sub_25B37FCD0();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v31 = v10;
    if (v20)
    {
      uint64_t v21 = v3;
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl(&dword_25B2C1000, v18, v19, "Server says it has new devices", v22, 2u);
      id v23 = v22;
      uint64_t v3 = v21;
      uint64_t v10 = v31;
      MEMORY[0x2611621B0](v23, -1, -1);
    }

    if (v16[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending])
    {
    }
    else
    {
      v16[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending] = 1;
      sub_25B37F870();
      *os_log_type_t v9 = 100;
      uint64_t v24 = v32;
      uint64_t v25 = v34;
      (*(void (**)(void *, void, uint64_t))(v32 + 104))(v9, *MEMORY[0x263F8F000], v34);
      sub_25B37F880();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v9, v25);
      uint64_t v26 = v33;
      uint64_t v35 = *(void *)(v35 + 8);
      ((void (*)(char *, uint64_t))v35)(v13, v10);
      uint64_t v34 = *(void *)&v16[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v16;
      aBlock[4] = sub_25B352584;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25B2E423C;
      aBlock[3] = &block_descriptor_167;
      os_log_type_t v28 = _Block_copy(aBlock);
      id v29 = v16;
      sub_25B37F840();
      uint64_t v39 = MEMORY[0x263F8EE78];
      sub_25B3524F4(&qword_26B3411A8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B3411D8);
      sub_25B319318(&qword_26B3411E0, &qword_26B3411D8);
      sub_25B37FDC0();
      uint64_t v30 = v38;
      MEMORY[0x261161410](v38, v7, v5, v28);
      _Block_release(v28);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v36);
      ((void (*)(char *, uint64_t))v35)(v30, v31);

      swift_release();
    }
  }
}

void sub_25B350438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x261162290](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_25B34ECA0();
  }
}

uint64_t sub_25B35048C()
{
  return sub_25B34F1A8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), (void (*)(uint64_t, uint64_t))sub_25B321A30, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.SetEnabled, (SEL *)&selRef_setEnabledWithParameters_error_);
}

uint64_t sub_25B3504D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25B34DE84();
  *a1 = result & 1;
  return result;
}

uint64_t sub_25B350510@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25B34E38C();
  *a1 = result;
  return result;
}

uint64_t sub_25B35054C()
{
  return sub_25B34F1A8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), (void (*)(uint64_t, uint64_t))sub_25B321B6C, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled, (SEL *)&selRef_enableAllowListWithParameters_error_);
}

uint64_t sub_25B350590()
{
  return sub_25B34DA18(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_25B3505AC(uint64_t a1)
{
  return sub_25B345000(a1, v1);
}

uint64_t sub_25B3505B4(uint64_t a1)
{
  return sub_25B345A08(a1, v1);
}

uint64_t sub_25B3505BC(uint64_t a1)
{
  return sub_25B34698C(a1, v1);
}

uint64_t sub_25B3505C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B350628@<X0>(uint64_t a1@<X8>)
{
  return sub_25B34C05C(a1);
}

uint64_t sub_25B35064C()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25B350684(uint64_t *a1)
{
  return sub_25B347DD4(a1, v1, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers, (uint64_t)&unk_2708E9708, (uint64_t)sub_25B352064, (uint64_t)&block_descriptor_110);
}

uint64_t sub_25B3506CC(uint64_t *a1)
{
  return sub_25B347DD4(a1, v1, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers, (uint64_t)&unk_2708E9690, (uint64_t)sub_25B351FF0, (uint64_t)&block_descriptor_101);
}

uint64_t sub_25B350714(char *a1)
{
  return sub_25B34818C(a1);
}

uint64_t sub_25B35071C()
{
  return sub_25B34DBD0(*(void *)(v0 + 16), *(void *)(v0 + 24), (SEL *)&selRef_addIDToAllowListWithParameters_error_);
}

uint64_t sub_25B350740()
{
  return sub_25B34DBD0(*(void *)(v0 + 16), *(void *)(v0 + 24), (SEL *)&selRef_removeFromAllowListWithParameters_error_);
}

uint64_t sub_25B350764()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B3507A4(void *a1)
{
  return sub_25B349760(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25B3507B0()
{
  return sub_25B34D4C0(*(void *)(v0 + 16));
}

uint64_t sub_25B3507CC()
{
  return sub_25B34D734(*(void *)(v0 + 16));
}

uint64_t sub_25B3507E8()
{
  return sub_25B34E858();
}

uint64_t sub_25B350804@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.deviceUpdates.getter(a1);
}

uint64_t sub_25B350828(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B346690(a1, a2, a3, a4, &qword_26A4EB330, &qword_26A4EB328, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates);
}

uint64_t sub_25B350858@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.enabledStateUpdates.getter(a1);
}

uint64_t sub_25B35087C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_25B346690(a1, a2, a3, a4, &qword_26A4EC6A8, &qword_26B340B40, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates);
}

uint64_t sub_25B3508AC()
{
  return type metadata accessor for ReplicatorControlClient();
}

uint64_t type metadata accessor for ReplicatorControlClient()
{
  uint64_t result = qword_26A4EB2B0;
  if (!qword_26A4EB2B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25B350900()
{
  sub_25B350A44(319, &qword_26A4EB338, &qword_26A4EB328);
  if (v0 <= 0x3F)
  {
    sub_25B350A44(319, &qword_26A4EB340, &qword_26B340B40);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ReplicatorControlClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReplicatorControlClient);
}

uint64_t dispatch thunk of ReplicatorControlClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void sub_25B350A44(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = sub_25B37FD60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for Singleton()
{
  return self;
}

ValueMetadata *type metadata accessor for Singleton.DataTypes()
{
  return &type metadata for Singleton.DataTypes;
}

unint64_t sub_25B350ACC()
{
  unint64_t result = qword_26A4EC720;
  if (!qword_26A4EC720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC720);
  }
  return result;
}

unint64_t sub_25B350B24()
{
  unint64_t result = qword_26A4EC728;
  if (!qword_26A4EC728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC728);
  }
  return result;
}

unint64_t sub_25B350B7C()
{
  unint64_t result = qword_26A4EC730;
  if (!qword_26A4EC730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC730);
  }
  return result;
}

unint64_t sub_25B350BD4()
{
  unint64_t result = qword_26A4EC738;
  if (!qword_26A4EC738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC738);
  }
  return result;
}

unint64_t sub_25B350C28(unint64_t a1, uint64_t a2)
{
  return sub_25B351A14(a1, a2, type metadata accessor for ReplicatorRecord.Value);
}

unint64_t sub_25B350C44(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = sub_25B37FDD0();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_25B3524F4(&qword_26B340FA0, MEMORY[0x263F07508]);
        uint64_t v17 = sub_25B37F940();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            id v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *id v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25B350F3C(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ReplicatorRecord.ID(0);
  unint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(void *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    uint64_t v44 = v12;
    uint64_t v40 = v5;
    uint64_t v47 = v9;
    uint64_t v48 = a2 + 64;
    uint64_t v17 = ~v15;
    int64_t v18 = a1;
    unint64_t result = sub_25B37FDD0();
    uint64_t v19 = v48;
    if ((*(void *)(v48 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      uint64_t v45 = a2;
      uint64_t v46 = v4;
      unint64_t v20 = (result + 1) & v17;
      uint64_t v21 = *(void *)(v44 + 72);
      uint64_t v22 = v40;
      uint64_t v43 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 6);
      uint64_t v44 = v21;
      ++v40;
      uint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v22 + 4);
      uint64_t v23 = v17;
      while (1)
      {
        int64_t v24 = v21 * v16;
        sub_25B35242C(*(void *)(a2 + 48) + v21 * v16, (uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
        sub_25B380250();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v25 = v10;
        uint64_t v26 = (uint64_t)v47;
        sub_25B35242C((uint64_t)&v14[*(int *)(v10 + 28)], (uint64_t)v47, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v27 = v46;
        if ((*v43)(v26, 1, v46) == 1)
        {
          sub_25B380260();
        }
        else
        {
          uint64_t v28 = v42;
          (*v41)(v42, v26, v27);
          sub_25B380260();
          sub_25B3524F4(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          (*v40)(v28, v27);
        }
        uint64_t v10 = v25;
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v29 = sub_25B380290();
        unint64_t result = sub_25B352494((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v30 = v29 & v23;
        if (v18 >= (uint64_t)v20) {
          break;
        }
        uint64_t v21 = v44;
        a2 = v45;
        if (v30 < v20) {
          goto LABEL_14;
        }
LABEL_15:
        if (v21 * v18 < v24 || *(void *)(a2 + 48) + v21 * v18 >= (unint64_t)(*(void *)(a2 + 48) + v24 + v21))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v21 * v18 != v24)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v31 = *(void *)(a2 + 56);
        uint64_t v32 = *(void *)(*(void *)(type metadata accessor for ReplicatorRecord(0) - 8) + 72);
        int64_t v33 = v32 * v18;
        unint64_t result = v31 + v32 * v18;
        if (v32 * v18 < (uint64_t)(v32 * v16) || result >= v31 + v32 * v16 + v32)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v18 = v16;
          if (v33 == v32 * v16) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v18 = v16;
LABEL_6:
        unint64_t v16 = (v16 + 1) & v23;
        uint64_t v19 = v48;
        if (((*(void *)(v48 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
          goto LABEL_24;
        }
      }
      uint64_t v21 = v44;
      a2 = v45;
      if (v30 < v20) {
        goto LABEL_6;
      }
LABEL_14:
      if (v18 < (uint64_t)v30) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v34 = (uint64_t *)(v19 + 8 * ((unint64_t)v18 >> 6));
    uint64_t v35 = *v34;
    uint64_t v36 = (-1 << v18) - 1;
  }
  else
  {
    uint64_t v34 = (uint64_t *)(a2 + 64 + 8 * (a1 >> 6));
    uint64_t v36 = *v34;
    uint64_t v35 = (-1 << a1) - 1;
  }
  *uint64_t v34 = v36 & v35;
  uint64_t v37 = *(void *)(a2 + 16);
  BOOL v38 = __OFSUB__(v37, 1);
  uint64_t v39 = v37 - 1;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v39;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25B3514A8(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v40 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v9 = *(void *)(v46 - 8);
  unint64_t result = MEMORY[0x270FA5388](v46);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v43 = v8;
    uint64_t v44 = a2 + 64;
    uint64_t v15 = ~v13;
    int64_t v16 = a1;
    unint64_t result = sub_25B37FDD0();
    uint64_t v17 = v44;
    if ((*(void *)(v44 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      uint64_t v45 = v4;
      unint64_t v18 = (result + 1) & v15;
      uint64_t v19 = *(void *)(v9 + 72);
      uint64_t v41 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      uint64_t v42 = v19;
      uint64_t v37 = (void (**)(char *, uint64_t))(v40 + 8);
      BOOL v38 = (void (**)(char *, uint64_t, uint64_t))(v40 + 32);
      uint64_t v20 = v15;
      while (1)
      {
        int64_t v21 = v19 * v14;
        sub_25B35242C(*(void *)(a2 + 48) + v19 * v14, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
        uint64_t v22 = a2;
        sub_25B380250();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v23 = (uint64_t)v43;
        sub_25B35242C((uint64_t)&v12[*(int *)(v46 + 28)], (uint64_t)v43, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v24 = v45;
        if ((*v41)(v23, 1, v45) == 1)
        {
          sub_25B380260();
        }
        else
        {
          uint64_t v25 = v39;
          (*v38)(v39, v23, v24);
          sub_25B380260();
          sub_25B3524F4(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          (*v37)(v25, v24);
        }
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v26 = sub_25B380290();
        unint64_t result = sub_25B352494((uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v27 = v26 & v20;
        a2 = v22;
        if (v16 >= (uint64_t)v18) {
          break;
        }
        uint64_t v19 = v42;
        if (v27 < v18) {
          goto LABEL_14;
        }
LABEL_15:
        if (v19 * v16 < v21
          || *(void *)(v22 + 48) + v19 * v16 >= (unint64_t)(*(void *)(v22 + 48) + v21 + v19))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v19 * v16 != v21)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v28 = *(void *)(v22 + 56);
        uint64_t v29 = *(void *)(v40 + 72);
        int64_t v30 = v29 * v16;
        unint64_t result = v28 + v29 * v16;
        if (v29 * v16 < (uint64_t)(v29 * v14) || result >= v28 + v29 * v14 + v29)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v16 = v14;
          if (v30 == v29 * v14) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v16 = v14;
LABEL_6:
        unint64_t v14 = (v14 + 1) & v20;
        uint64_t v17 = v44;
        if (((*(void *)(v44 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          goto LABEL_24;
        }
      }
      uint64_t v19 = v42;
      if (v27 < v18) {
        goto LABEL_6;
      }
LABEL_14:
      if (v16 < (uint64_t)v27) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v31 = (uint64_t *)(v17 + 8 * ((unint64_t)v16 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1 << v16) - 1;
  }
  else
  {
    uint64_t v31 = (uint64_t *)(a2 + 64 + 8 * (a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1 << a1) - 1;
  }
  *uint64_t v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_25B3519FC(unint64_t a1, uint64_t a2)
{
  return sub_25B351A14(a1, a2, MEMORY[0x263F06EA8]);
}

unint64_t sub_25B351A14(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = sub_25B37FDD0();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v7);
        unint64_t result = sub_25B380240();
        unint64_t v13 = result & v9;
        if (v4 >= (uint64_t)v10)
        {
          if (v13 < v10 || v4 < (uint64_t)v13) {
            goto LABEL_6;
          }
        }
        else if (v13 < v10 && v4 < (uint64_t)v13)
        {
          goto LABEL_6;
        }
        int64_t v16 = (void *)(v11 + 8 * v4);
        if (v4 != v7 || v16 >= v12 + 1) {
          void *v16 = *v12;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v19 = v18 * v4;
        unint64_t result = v17 + v18 * v4;
        int64_t v20 = v18 * v7;
        unint64_t v21 = v17 + v18 * v7 + v18;
        if (v19 < v20 || result >= v21)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v19 == v20) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_25B351BF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_25B351C2C(void *a1)
{
  sub_25B34F5CC(a1, *(void *)(v1 + 16));
}

uint64_t sub_25B351C34()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_25B351C5C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25B351C94(uint64_t a1)
{
  sub_25B34FE48(a1, v1);
}

uint64_t sub_25B351C9C()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_25B351D5C()
{
  uint64_t v1 = *(void *)(sub_25B37F640() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v3);
  unint64_t v6 = (void (**)(void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  return sub_25B34CB58(v4, v5, v7, v8);
}

uint64_t sub_25B351DF8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B351E08()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

void sub_25B351EB0(void *a1)
{
  uint64_t v3 = *(void *)(sub_25B37F640() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *(void (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);
  sub_25B34CED4(a1, v5, v7, v8);
}

uint64_t sub_25B351F50()
{
  return objectdestroy_82Tm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_25B351F68()
{
  return sub_25B3523FC();
}

uint64_t sub_25B351F70()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_25B351FA8()
{
  return sub_25B348C8C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_25B351FB4(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t sub_25B351FF0()
{
  return sub_25B348624(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_2708E96E0, (uint64_t)sub_25B3193C4);
}

uint64_t sub_25B352028()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B352064()
{
  return sub_25B348624(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_2708E9758, (uint64_t)sub_25B319E84);
}

uint64_t sub_25B35209C()
{
  return objectdestroy_263Tm(&qword_26A4EB870);
}

uint64_t sub_25B3520A8(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB870);
  return sub_25B346F20(a1);
}

uint64_t sub_25B35211C(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_25B35214C(uint64_t a1)
{
  return sub_25B3522B8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B347010);
}

uint64_t sub_25B352164()
{
  return sub_25B348B3C(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers, (void (*)(void))sub_25B2DB314, (uint64_t (*)(uint64_t, uint64_t))sub_25B3525D0);
}

uint64_t sub_25B3521B0()
{
  return objectdestroy_263Tm(&qword_26B340B38);
}

uint64_t sub_25B3521C4(uint64_t a1)
{
  return sub_25B3522B8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B346354);
}

uint64_t sub_25B3521DC()
{
  return sub_25B348B3C(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers, (void (*)(void))sub_25B2DB2FC, (uint64_t (*)(uint64_t, uint64_t))sub_25B319830);
}

uint64_t sub_25B352228()
{
  return objectdestroy_263Tm(&qword_26B340B38);
}

uint64_t sub_25B352234(uint64_t a1)
{
  return sub_25B345CA0(a1);
}

uint64_t sub_25B3522A0(uint64_t a1)
{
  return sub_25B3522B8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_25B34576C);
}

uint64_t sub_25B3522B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(sub_25B37F640() - 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5, v6);
}

uint64_t sub_25B352340()
{
  return sub_25B348B3C(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers, (void (*)(void))sub_25B2DB2FC, (uint64_t (*)(uint64_t, uint64_t))sub_25B319830);
}

uint64_t sub_25B35238C()
{
  return objectdestroy_82Tm(MEMORY[0x263F8EEA0]);
}

uint64_t objectdestroy_82Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));
  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t sub_25B3523F4()
{
  return sub_25B3523FC();
}

uint64_t sub_25B3523FC()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_25B35242C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B352494(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B3524F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25B35253C(uint64_t a1)
{
  sub_25B350438(a1, v1);
}

void sub_25B352544(uint64_t a1)
{
  sub_25B34FE9C(a1, v1);
}

uint64_t sub_25B35254C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25B352584()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25B34AEB4();
  *(unsigned char *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending) = 0;
}

uint64_t sub_25B3525B4@<X0>(void *a1@<X8>)
{
  return sub_25B2C9E4C(a1);
}

uint64_t sub_25B3525EC@<X0>(unsigned char *a1@<X8>)
{
  return sub_25B3504D0(a1);
}

uint64_t URL.simulatorRootRelativeURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25B37F500();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_25B3526DC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_25B310BA4(0, v2, 0);
    uint64_t v3 = v16;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC8F8);
    uint64_t v5 = a1
       + ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80));
    uint64_t v13 = *(void *)(*(void *)(v14 - 8) + 72);
    while (1)
    {
      uint64_t v6 = sub_25B3540F0(&v15, v5, (uint64_t *)(v5 + *(int *)(v14 + 48)));
      if (v1) {
        break;
      }
      uint64_t v7 = v6;
      uint64_t v8 = v15;
      uint64_t v16 = v3;
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_25B310BA4(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v16;
      }
      *(void *)(v3 + 16) = v10 + 1;
      uint64_t v11 = v3 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v8;
      v5 += v13;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
  }
  return v3;
}

id sub_25B352854(uint64_t a1)
{
  v11[1] = *(id *)MEMORY[0x263EF8340];
  int64_t v2 = (void *)sub_25B37F4A0();
  v11[0] = 0;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, v11);

  id v4 = v11[0];
  if (v3)
  {
    uint64_t v5 = sub_25B37F500();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    id v7 = v4;
    v6(a1, v5);
  }
  else
  {
    id v8 = v11[0];
    sub_25B37F470();

    swift_willThrow();
    uint64_t v9 = sub_25B37F500();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t sub_25B3529AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3) {
    uint64_t v5 = v3[1];
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v4;
  a2[1] = v5;
  return sub_25B352AB0(v4);
}

uint64_t sub_25B352A0C(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    uint64_t v3 = a1[1];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = v2;
  v4[1] = v3;
  sub_25B352AB0(v2);
  return sub_25B319830(v5);
}

uint64_t sub_25B352A90()
{
  return sub_25B3532D0(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider, (void (*)(void, void))sub_25B352AB0);
}

uint64_t sub_25B352AB0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_25B352AC0(uint64_t a1, uint64_t a2)
{
  return sub_25B353358(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider, (uint64_t (*)(uint64_t, uint64_t))sub_25B319830);
}

uint64_t (*sub_25B352AE0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B352B3C@<X0>(void *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    id v7 = sub_25B35C8F8;
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_25B352AB0(v4);
}

uint64_t sub_25B352BDC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_25B35C8E0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *id v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_25B352AB0(v3);
  return sub_25B319830(v8);
}

uint64_t sub_25B352CA4()
{
  return sub_25B3532D0(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider, (void (*)(void, void))sub_25B35CC4C);
}

uint64_t sub_25B352CC4(uint64_t a1, uint64_t a2)
{
  return sub_25B353358(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider, (uint64_t (*)(uint64_t, uint64_t))sub_25B3525D0);
}

uint64_t (*sub_25B352CE4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B352D40@<X0>(void *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    id v7 = sub_25B35C8F8;
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_25B352AB0(v4);
}

uint64_t sub_25B352DE0(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_25B35C8E0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *id v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_25B352AB0(v3);
  return sub_25B319830(v8);
}

uint64_t sub_25B352EA8()
{
  return sub_25B3532D0(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider, (void (*)(void, void))sub_25B35CC4C);
}

uint64_t sub_25B352EC8(uint64_t a1, uint64_t a2)
{
  return sub_25B353358(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider, (uint64_t (*)(uint64_t, uint64_t))sub_25B3525D0);
}

uint64_t (*sub_25B352EE8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B352F44@<X0>(void *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    id v7 = sub_25B35C8F8;
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_25B352AB0(v4);
}

uint64_t sub_25B352FE4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_25B35C8E0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *id v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_25B352AB0(v3);
  return sub_25B319830(v8);
}

uint64_t sub_25B3530AC()
{
  return sub_25B3532D0(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider, (void (*)(void, void))sub_25B35CC4C);
}

uint64_t sub_25B3530CC(uint64_t a1, uint64_t a2)
{
  return sub_25B353358(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider, (uint64_t (*)(uint64_t, uint64_t))sub_25B3525D0);
}

uint64_t (*sub_25B3530EC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B353148@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    id v7 = sub_25B35C8B8;
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_25B352AB0(v4);
}

uint64_t sub_25B3531E8(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_25B35C890;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *id v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_25B352AB0(v3);
  return sub_25B319830(v8);
}

uint64_t sub_25B3532B0()
{
  return sub_25B3532D0(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler, (void (*)(void, void))sub_25B35CC4C);
}

uint64_t sub_25B3532D0(void *a1, void (*a2)(void, void))
{
  uint64_t v4 = (void *)(v2 + *a1);
  swift_beginAccess();
  uint64_t v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t sub_25B353338(uint64_t a1, uint64_t a2)
{
  return sub_25B353358(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler, (uint64_t (*)(uint64_t, uint64_t))sub_25B3525D0);
}

uint64_t sub_25B353358(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*sub_25B3533BC())()
{
  return j__swift_endAccess;
}

id MigrationServer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t MigrationServer.init()()
{
  uint64_t v1 = sub_25B37FD00();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_25B37FCE0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25B37F860();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
  uint64_t v8 = swift_allocObject();
  *(void *)&v0[v7] = v8;
  *(void *)&v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock_clients] = MEMORY[0x263F8EE88];
  *(_DWORD *)(v8 + 16) = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v11 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener] = 0;
  sub_25B3393BC(0, (unint64_t *)&qword_26B341238);
  uint64_t v14 = v0;
  sub_25B37F850();
  aBlock[0] = MEMORY[0x263F8EE78];
  sub_25B35CAD4((unint64_t *)&qword_26B341230, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B3411F0);
  sub_25B35388C();
  sub_25B37FDC0();
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F138], v1);
  *(void *)&v14[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_queue] = sub_25B37FD30();

  uint64_t v15 = (objc_class *)type metadata accessor for MigrationServer();
  v27.receiver = v14;
  v27.super_class = v15;
  id v16 = objc_msgSendSuper2(&v27, sel_init);
  id v25 = v16;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_25B3539D0;
  *(void *)(v17 + 24) = v24;
  aBlock[4] = sub_25B3539E8;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B353A10;
  aBlock[3] = &block_descriptor_2;
  uint64_t v18 = _Block_copy(aBlock);
  int64_t v19 = self;
  int64_t v20 = (char *)v16;
  swift_retain();
  id v21 = objc_msgSend(v19, sel_listenerWithConfigurator_, v18);
  _Block_release(v18);
  swift_release();
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();

  uint64_t result = swift_release();
  if (v18)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = *(void **)&v20[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener];
    *(void *)&v20[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener] = v21;

    return (uint64_t)v20;
  }
  return result;
}

unint64_t sub_25B35388C()
{
  unint64_t result = qword_26B341200;
  if (!qword_26B341200)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B3411F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341200);
  }
  return result;
}

uint64_t type metadata accessor for MigrationServer()
{
  return self;
}

id sub_25B35390C(void *a1, uint64_t a2)
{
  v8.domain._object = (void *)swift_getObjectType();
  v6[0] = 0xD000000000000026;
  v6[1] = 0x800000025B38BB10;
  v6[2] = 0xD00000000000001CLL;
  v6[3] = 0x800000025B38BB40;
  v8.domain._uint64_t countAndFlagsBits = (uint64_t)v6;
  BSServiceConnectionListenerConfiguring.setDomain(_:)(v8);
  uint64_t v4 = (void *)sub_25B37F970();
  objc_msgSend(a1, sel_setService_, v4);

  return objc_msgSend(a1, sel_setDelegate_, a2);
}

id sub_25B3539D0(void *a1)
{
  return sub_25B35390C(a1, *(void *)(v1 + 16));
}

uint64_t sub_25B3539D8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B3539E8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25B353A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

id sub_25B353AA0()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener);
  if (result) {
    return objc_msgSend(result, sel_activate);
  }
  __break(1u);
  return result;
}

id MigrationServer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MigrationServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_25B353BC4(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = (void (**)(uint64_t))(v1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = swift_retain();
    v11(v12);
    if (v2)
    {
      sub_25B319830((uint64_t)v11);
    }
    else
    {
      if (qword_26A4EB548 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_25B37F780();
      __swift_project_value_buffer(v14, (uint64_t)qword_26A4EB618);
      sub_25B2E2FE0(a1, (uint64_t)v9, &qword_26B3414D0);
      uint64_t v15 = sub_25B37F760();
      os_log_type_t v16 = sub_25B37FCD0();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        os_log_t v24 = v15;
        uint64_t v18 = (uint8_t *)v17;
        uint64_t v25 = swift_slowAlloc();
        uint64_t v27 = v25;
        *(_DWORD *)uint64_t v18 = 136446210;
        v23[1] = v18 + 4;
        sub_25B2E2FE0((uint64_t)v9, (uint64_t)v7, &qword_26B3414D0);
        uint64_t v19 = sub_25B37F9E0();
        uint64_t v26 = sub_25B2CA048(v19, v20, &v27);
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        sub_25B2E344C((uint64_t)v9, &qword_26B3414D0);
        os_log_t v21 = v24;
        _os_log_impl(&dword_25B2C1000, v24, v16, "Returning local device ID %{public}s for migration", v18, 0xCu);
        uint64_t v22 = v25;
        swift_arrayDestroy();
        MEMORY[0x2611621B0](v22, -1, -1);
        MEMORY[0x2611621B0](v18, -1, -1);
        sub_25B319830((uint64_t)v11);
      }
      else
      {
        sub_25B2E344C((uint64_t)v9, &qword_26B3414D0);
        sub_25B319830((uint64_t)v11);
      }
    }
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 2;
    *(void *)(v13 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_25B353ED4()
{
  uint64_t v3 = (uint64_t (**)(uint64_t))(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = swift_retain();
    uint64_t v6 = v4(v5);
    if (v1)
    {
      sub_25B319830((uint64_t)v4);
    }
    else
    {
      uint64_t v2 = sub_25B3526DC(v6);
      swift_bridgeObjectRelease();
      if (qword_26A4EB548 != -1) {
        swift_once();
      }
      uint64_t v8 = sub_25B37F780();
      __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB618);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_25B37F760();
      os_log_type_t v10 = sub_25B37FCD0();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 134349056;
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25B2C1000, v9, v10, "Returning %{public}ld records for migration", v11, 0xCu);
        MEMORY[0x2611621B0](v11, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_25B319830((uint64_t)v4);
    }
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 2;
    *(void *)(v7 + 8) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_25B3540F0(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v46 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v50 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25B37F640();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v51 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
  uint64_t v12 = MEMORY[0x270FA5388](v56);
  uint64_t v14 = (uint64_t *)((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  os_log_type_t v16 = (uint64_t *)((char *)&v43 - v15);
  uint64_t v45 = *a3;
  uint64_t v17 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v43 = a2;
  uint64_t v44 = v17;
  uint64_t v18 = *(void *)(a2 + *(int *)(v17 + 24));
  v55[0] = MEMORY[0x263F8EE78];
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v52 = v18 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  Class v53 = (Class)((unint64_t)(v20 + 63) >> 6);
  uint64_t result = swift_bridgeObjectRetain_n();
  uint64_t v24 = 0;
  if (!v22) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (unint64_t i = v25 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v24 << 6))
  {
    uint64_t v30 = *(void *)(v18 + 56);
    uint64_t v31 = *(void *)(*(void *)(v18 + 48) + 8 * i);
    uint64_t v32 = type metadata accessor for ReplicatorRecord.Value(0);
    sub_25B35CB1C(v30 + *(void *)(*(void *)(v32 - 8) + 72) * i, (uint64_t)v16 + *(int *)(v56 + 48), type metadata accessor for ReplicatorRecord.Value);
    void *v16 = v31;
    sub_25B2E31F0((uint64_t)v16, (uint64_t)v14, &qword_26B340D98);
    sub_25B354704(v55, v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_25B2E344C((uint64_t)v14, &qword_26B340D98);
      swift_release();
      swift_bridgeObjectRelease();
      return v24;
    }
    uint64_t result = sub_25B2E344C((uint64_t)v14, &qword_26B340D98);
    if (v22) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v24++, 1)) {
      break;
    }
    if (v24 >= (uint64_t)v53) {
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v52 + 8 * v24);
    if (!v28)
    {
      uint64_t v29 = v24 + 1;
      if (v24 + 1 >= (uint64_t)v53) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v52 + 8 * v29);
      if (v28) {
        goto LABEL_18;
      }
      uint64_t v29 = v24 + 2;
      if (v24 + 2 >= (uint64_t)v53) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v52 + 8 * v29);
      if (v28) {
        goto LABEL_18;
      }
      uint64_t v29 = v24 + 3;
      if (v24 + 3 >= (uint64_t)v53) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v52 + 8 * v29);
      if (v28) {
        goto LABEL_18;
      }
      uint64_t v29 = v24 + 4;
      if (v24 + 4 >= (uint64_t)v53) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v52 + 8 * v29);
      if (v28)
      {
LABEL_18:
        uint64_t v24 = v29;
        goto LABEL_19;
      }
      uint64_t v29 = v24 + 5;
      if (v24 + 5 < (uint64_t)v53)
      {
        unint64_t v28 = *(void *)(v52 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            uint64_t v24 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_31;
            }
            if (v24 >= (uint64_t)v53) {
              goto LABEL_28;
            }
            unint64_t v28 = *(void *)(v52 + 8 * v24);
            ++v29;
            if (v28) {
              goto LABEL_19;
            }
          }
        }
        goto LABEL_18;
      }
LABEL_28:
      uint64_t v33 = v43;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v56 = v55[0];
      sub_25B35CB1C(v33, v51, type metadata accessor for ReplicatorRecord.ID);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      v34(v47, v33 + *(int *)(v44 + 20), v49);
      uint64_t v35 = sub_25B37F5D0();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
      v36(v50, 1, 1, v35);
      Class v53 = (Class)type metadata accessor for ReplicationXPCServerParametersRecord(0);
      uint64_t v37 = (char *)objc_allocWithZone(v53);
      uint64_t v38 = (uint64_t)&v37[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
      v36((uint64_t)&v37[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration], 1, 1, v35);
      sub_25B35CB1C(v51, (uint64_t)&v37[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
      uint64_t v39 = v47;
      uint64_t v40 = v49;
      v34(&v37[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], (uint64_t)v47, v49);
      *(void *)&v37[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v56;
      swift_beginAccess();
      uint64_t v41 = v37;
      uint64_t v42 = v50;
      sub_25B318EDC(v50, v38);
      swift_endAccess();
      *(void *)&v41[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_options] = 0;

      v54.receiver = v41;
      v54.super_class = v53;
      uint64_t v24 = (uint64_t)objc_msgSendSuper2(&v54, sel_init);
      sub_25B2E344C(v42, &qword_26B340F80);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
      sub_25B35CB84(v51, type metadata accessor for ReplicatorRecord.ID);
      *uint64_t v46 = v45;
      swift_bridgeObjectRetain();
      return v24;
    }
LABEL_19:
    unint64_t v22 = (v28 - 1) & v28;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_25B354704(void *a1, uint64_t *a2)
{
  uint64_t v39 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340CE0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v37 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v37 - v9);
  uint64_t v11 = sub_25B37F500();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(int *)(v6 + 48);
  uint64_t v19 = (uint64_t)v10 + v18;
  uint64_t v20 = (uint64_t)a2 + v18;
  uint64_t v38 = a2;
  uint64_t v21 = *a2;
  uint64_t v22 = v20;
  *uint64_t v10 = v21;
  sub_25B35CB1C(v20, v19, type metadata accessor for ReplicatorRecord.Value);
  uint64_t v23 = type metadata accessor for ReplicatorRecord.Value(0);
  sub_25B2E2FE0(v19 + *(int *)(v23 + 20), (uint64_t)v5, &qword_26B340CE0);
  sub_25B35CB84(v19, type metadata accessor for ReplicatorRecord.Value);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11) == 1)
  {
    sub_25B2E344C((uint64_t)v5, &qword_26B340CE0);
    uint64_t v24 = 0;
    unint64_t v25 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v5, v11);
    sub_25B3393BC(0, (unint64_t *)&qword_26B340B80);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    uint64_t v34 = v40;
    id v35 = sub_25B352854((uint64_t)v15);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return;
    }
    unint64_t v25 = v35;
    uint64_t v36 = URL.extendedAttributes()();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    uint64_t v24 = sub_25B2E39F4(v36);
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = *v38;
  uint64_t v27 = (uint64_t *)((char *)v37 + *(int *)(v6 + 48));
  *uint64_t v37 = *v38;
  sub_25B35CB1C(v22, (uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_25B2E2B14(*v27, v29);
  sub_25B35CB84((uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
  objc_allocWithZone((Class)type metadata accessor for ReplicationXPCServerParametersRecordValue());
  id v30 = v25;
  id v31 = sub_25B330CAC(v26, v28, v29, v25, v24);

  sub_25B2CA2D8(v28, v29);
  id v32 = v31;
  uint64_t v33 = v39;
  MEMORY[0x2611611F0]();
  if (*(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_25B37FB20();
  }
  sub_25B37FB50();
  sub_25B37FB10();
}

uint64_t sub_25B354B6C(void *a1, const char *a2, void (*a3)(uint64_t (*)(uint64_t), uint64_t))
{
  uint64_t v8 = v3 + *a1;
  swift_beginAccess();
  uint64_t v9 = *(uint64_t (**)(uint64_t))v8;
  if (*(void *)v8)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v11 = swift_retain();
    uint64_t v12 = v9(v11);
    if (v4)
    {
      a3(v9, v10);
    }
    else
    {
      uint64_t v5 = v12;
      if (qword_26A4EB548 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_25B37F780();
      __swift_project_value_buffer(v14, (uint64_t)qword_26A4EB618);
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_25B37F760();
      os_log_type_t v16 = sub_25B37FCD0();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 134349056;
        sub_25B37FD70();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25B2C1000, v15, v16, a2, v17, 0xCu);
        MEMORY[0x2611621B0](v17, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      a3(v9, v10);
    }
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 2;
    *(void *)(v13 + 8) = 0;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_25B354D64()
{
  uint64_t v1 = (void (**)(void))(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = qword_26A4EB548;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_25B37F780();
    __swift_project_value_buffer(v4, (uint64_t)qword_26A4EB618);
    uint64_t v5 = sub_25B37F760();
    os_log_type_t v6 = sub_25B37FCD0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_25B2C1000, v5, v6, "Erasing all replicator data", v7, 2u);
      MEMORY[0x2611621B0](v7, -1, -1);
    }

    v2();
    return sub_25B319830((uint64_t)v2);
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v9 = 2;
    *(void *)(v9 + 8) = 0;
    return swift_willThrow();
  }
}

void MigrationServer.listener(_:didReceive:withContext:)(uint64_t a1, void *a2)
{
}

void sub_25B354EE8(uint64_t a1, void *a2)
{
  swift_beginAccess();
  sub_25B356B80(&v4, a2);
  uint64_t v3 = v4;
  swift_endAccess();
}

void sub_25B354F64(void *a1, void *a2, uint64_t a3)
{
  os_log_type_t v6 = (void *)sub_25B37F970();
  id v7 = objc_msgSend(self, sel_interfaceWithIdentifier_, v6);

  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_protocolForProtocol_, &unk_2708EFDA8);
  objc_msgSend(v7, sel_setClient_, v9);

  id v10 = objc_msgSend(v8, sel_protocolForProtocol_, &unk_2708EE8C8);
  objc_msgSend(v7, sel_setServer_, v10);

  id v11 = objc_msgSend(self, sel_main);
  objc_msgSend(a1, sel_setServiceQuality_, v11);

  objc_msgSend(a1, sel_setInterface_, v7);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(void *)(a3 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_queue));
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = a2;
  uint64_t v24 = sub_25B35CA2C;
  uint64_t v25 = v13;
  uint64_t v20 = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_25B37B5EC;
  uint64_t v23 = &block_descriptor_70;
  uint64_t v14 = _Block_copy(&v20);
  id v15 = a2;
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v14);
  _Block_release(v14);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v15;
  uint64_t v24 = sub_25B35CA78;
  uint64_t v25 = v17;
  uint64_t v20 = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_25B37B5EC;
  uint64_t v23 = &block_descriptor_77;
  uint64_t v18 = _Block_copy(&v20);
  id v19 = v15;
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v18);
  _Block_release(v18);
}

void sub_25B35529C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x261162290](v2);
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    if (qword_26A4EB548 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_25B37F780();
    __swift_project_value_buffer(v5, (uint64_t)qword_26A4EB618);
    os_log_type_t v6 = sub_25B37F760();
    os_log_type_t v7 = sub_25B37FCD0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25B2C1000, v6, v7, "Connection interrupted", v8, 2u);
      MEMORY[0x2611621B0](v8, -1, -1);
    }

    id v9 = *(os_unfair_lock_s **)&v4[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock];
    uint64_t v11 = MEMORY[0x270FA5388](v10);
    MEMORY[0x270FA5388](v11);
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    sub_25B319EEC(v12);
    os_unfair_lock_unlock(v9 + 4);
    swift_release();
  }
}

void sub_25B35544C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x261162290](v2);
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    if (qword_26A4EB548 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_25B37F780();
    __swift_project_value_buffer(v5, (uint64_t)qword_26A4EB618);
    os_log_type_t v6 = sub_25B37F760();
    os_log_type_t v7 = sub_25B37FCD0();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25B2C1000, v6, v7, "Connection invalidated", v8, 2u);
      MEMORY[0x2611621B0](v8, -1, -1);
    }

    id v9 = *(os_unfair_lock_s **)&v4[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock];
    uint64_t v11 = MEMORY[0x270FA5388](v10);
    MEMORY[0x270FA5388](v11);
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    sub_25B319EEC(v12);
    os_unfair_lock_unlock(v9 + 4);
    swift_release();
  }
}

void sub_25B3555FC(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t v3 = (void *)sub_25B35B23C(a2);
  swift_endAccess();
}

uint64_t sub_25B3557B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_25B37FE70();
  swift_bridgeObjectRelease();
  LODWORD(v7) = *(_DWORD *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_pid);
  sub_25B380190();
  sub_25B37FA40();
  swift_bridgeObjectRelease();
  sub_25B37FA40();
  id v4 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_connection), sel_remoteProcess, v7);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    sub_25B37F9A0();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4EC910);
  sub_25B37F9E0();
  sub_25B37FA40();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 0x203A646970;
  a2[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_25B3559B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B3414D0);
  MEMORY[0x270FA5388](v4 - 8);
  os_log_type_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (MEMORY[0x261162290](v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate))
  {
    sub_25B353BC4((uint64_t)v6);
    uint64_t result = swift_unknownObjectRelease();
    if (!v2) {
      return sub_25B2E31F0((uint64_t)v6, a1, &qword_26B3414D0);
    }
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v8 = 2;
    *(void *)(v8 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

id sub_25B355C78()
{
  if (MEMORY[0x261162290](v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate))
  {
    uint64_t v3 = sub_25B353ED4();
    if (v1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v5 = v3;
      Records = (objc_class *)type metadata accessor for MigrationXPCServerResponseGetRecords();
      uint64_t v7 = (char *)objc_allocWithZone(Records);
      *(void *)&v7[OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records] = v5;
      v9.receiver = v7;
      v9.super_class = Records;
      id v2 = objc_msgSendSuper2(&v9, sel_init);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_25B35C6D4();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 2;
    *(void *)(v4 + 8) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_25B356218(uint64_t a1, void *a2)
{
  return sub_25B356240(a1, a2, &qword_26A4EC920);
}

uint64_t sub_25B35622C(uint64_t a1, void *a2)
{
  return sub_25B356240(a1, a2, (uint64_t *)&unk_26A4EC928);
}

uint64_t sub_25B356240(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *v3;
  sub_25B380250();
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  id v35 = a2;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v40 = v8;
  sub_25B37FA10();
  uint64_t v39 = v9;
  swift_bridgeObjectRelease();
  uint64_t v38 = v11;
  sub_25B380280();
  uint64_t v37 = v10;
  sub_25B380280();
  uint64_t v12 = sub_25B380290();
  uint64_t v13 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v15 = v5 + 56;
  if ((*(void *)(v5 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v16 = ~v13;
    uint64_t v17 = *(void *)(v5 + 48);
    while (1)
    {
      id v19 = (void *)(v17 + 48 * v14);
      uint64_t v20 = v19[2];
      uint64_t v21 = v19[3];
      uint64_t v22 = v19[4];
      uint64_t v23 = v19[5];
      BOOL v24 = *v19 == v6 && v19[1] == v7;
      if (v24 || (sub_25B3801A0() & 1) != 0)
      {
        BOOL v25 = v20 == v40 && v21 == v39;
        if (v25 || (sub_25B3801A0()) && v22 == v38 && v23 == v37) {
          break;
        }
      }
      unint64_t v14 = (v14 + 1) & v16;
      if (((*(void *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    sub_25B35CA9C((uint64_t)v35);
    uint64_t v29 = *(void *)(*v34 + 48) + 48 * v14;
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t v31 = *(void *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 24);
    *(void *)a1 = *(void *)v29;
    *(void *)(a1 + 8) = v30;
    *(void *)(a1 + 16) = v31;
    *(void *)(a1 + 24) = v32;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v29 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = *v34;
    *uint64_t v34 = 0x8000000000000000;
    sub_25B344474((uint64_t)v35);
    sub_25B358344((uint64_t)v35, v14, isUniquelyReferenced_nonNull_native, a3);
    *uint64_t v34 = v41;
    swift_bridgeObjectRelease();
    long long v27 = v35[1];
    *(_OWORD *)a1 = *v35;
    *(_OWORD *)(a1 + 16) = v27;
    *(_OWORD *)(a1 + 32) = v35[2];
    return 1;
  }
}

uint64_t sub_25B3564B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_25B380250();
  swift_bridgeObjectRetain();
  ReplicatorDevice.hash(into:)((uint64_t)v20);
  uint64_t v11 = sub_25B380290();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_25B35CB1C(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      char v16 = _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v9, a2);
      sub_25B35CB84((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_25B35CB84(a2, type metadata accessor for ReplicatorDevice);
    sub_25B35CB1C(*(void *)(*v3 + 48) + v15 * v13, v19, type metadata accessor for ReplicatorDevice);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_25B35CB1C(a2, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
    v20[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_25B358590((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20[0];
    swift_bridgeObjectRelease();
    sub_25B35CBE4(a2, a1, type metadata accessor for ReplicatorDevice);
    return 1;
  }
}

uint64_t sub_25B35673C(void *a1, void *a2)
{
  uint64_t v4 = *v2;
  sub_25B380250();
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[5];
  uint64_t v52 = a2[4];
  uint64_t v10 = a2[7];
  uint64_t v50 = a2[6];
  uint64_t v11 = a2[8];
  uint64_t v12 = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v58 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v57 = v7;
  sub_25B37FA10();
  uint64_t v56 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v51 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v49 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E81C((uint64_t)v59, v11);
  uint64_t v48 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E628((uint64_t)v59, v12);
  uint64_t v47 = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_25B380290();
  uint64_t v14 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v54 = v4 + 56;
  uint64_t v55 = v4;
  uint64_t v45 = a2;
  if ((*(void *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v53 = ~v14;
    do
    {
      char v16 = (void *)(*(void *)(v55 + 48) + 80 * v15);
      uint64_t v18 = v16[2];
      uint64_t v17 = v16[3];
      uint64_t v19 = v16[4];
      uint64_t v20 = v16[5];
      uint64_t v22 = v16[6];
      uint64_t v21 = v16[7];
      uint64_t v24 = v16[8];
      uint64_t v23 = v16[9];
      BOOL v25 = *v16 == v5 && v16[1] == v58;
      if (v25 || (sub_25B3801A0() & 1) != 0)
      {
        BOOL v26 = v18 == v57 && v17 == v56;
        if (v26 || (sub_25B3801A0() & 1) != 0)
        {
          BOOL v27 = v19 == v52 && v20 == v51;
          if (v27 || (sub_25B3801A0() & 1) != 0)
          {
            BOOL v28 = v22 == v50 && v21 == v49;
            if (v28 || (sub_25B3801A0() & 1) != 0)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (sub_25B37D4A8(v24, v48))
              {
                char v29 = sub_25B37D754(v23, v47);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v29)
                {
                  swift_bridgeObjectRelease();
                  sub_25B315CD0((uint64_t)v45);
                  uint64_t v30 = (void *)(*(void *)(*(void *)v44 + 48) + 80 * v15);
                  uint64_t v31 = v30[1];
                  uint64_t v32 = v30[2];
                  uint64_t v33 = v30[3];
                  uint64_t v34 = v30[4];
                  uint64_t v35 = v30[5];
                  uint64_t v36 = v30[6];
                  uint64_t v37 = v30[7];
                  uint64_t v38 = v30[8];
                  uint64_t v39 = v30[9];
                  *a1 = *v30;
                  a1[1] = v31;
                  a1[2] = v32;
                  a1[3] = v33;
                  a1[4] = v34;
                  a1[5] = v35;
                  a1[6] = v36;
                  a1[7] = v37;
                  a1[8] = v38;
                  a1[9] = v39;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  return 0;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
      unint64_t v15 = (v15 + 1) & v53;
    }
    while (((*(void *)(v54 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v59[0] = *(void *)v44;
  *(void *)uint64_t v44 = 0x8000000000000000;
  sub_25B310A18((uint64_t)v45);
  sub_25B358E7C((uint64_t)v45, v15, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v44 = v59[0];
  swift_bridgeObjectRelease();
  long long v42 = v45[3];
  *((_OWORD *)a1 + 2) = v45[2];
  *((_OWORD *)a1 + 3) = v42;
  *((_OWORD *)a1 + 4) = v45[4];
  long long v43 = v45[1];
  *(_OWORD *)a1 = *v45;
  *((_OWORD *)a1 + 1) = v43;
  return 1;
}

uint64_t sub_25B356B80(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = sub_25B37FE10();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for Client();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_25B37FE00();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = sub_25B356E00(v7, result + 1);
    uint64_t v27 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v25 = v8;
      sub_25B358020();
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    sub_25B3582C0((uint64_t)v8, v22);
    *uint64_t v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_25B37FD40();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      type metadata accessor for Client();
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = sub_25B37FD50();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v19 = *(void **)(*(void *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = sub_25B37FD50();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v2;
    *id v2 = 0x8000000000000000;
    id v8 = a2;
    sub_25B359268((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *id v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_25B356E00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB348);
    uint64_t v2 = sub_25B37FE60();
    uint64_t v14 = v2;
    sub_25B37FDF0();
    if (sub_25B37FE20())
    {
      type metadata accessor for Client();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_25B358020();
          uint64_t v2 = v14;
        }
        uint64_t result = sub_25B37FD40();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_25B37FE20());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t sub_25B356FE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = sub_25B37FE50();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    uint64_t v38 = v4;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v39 = v12;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v36) {
          goto LABEL_33;
        }
        unint64_t v18 = v37[v17];
        int64_t v19 = v12 + 1;
        if (!v18)
        {
          int64_t v19 = v12 + 2;
          if (v12 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v18 = v37[v19];
          if (!v18)
          {
            int64_t v19 = v12 + 3;
            if (v12 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v18 = v37[v19];
            if (!v18)
            {
              uint64_t v20 = v12 + 4;
              if (v12 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v2;
                uint64_t v35 = 1 << *(unsigned char *)(v4 + 32);
                if (v35 > 63) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v37[v20];
              if (!v18)
              {
                while (1)
                {
                  int64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v19 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v37[v19];
                  ++v20;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v19 = v12 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v18 - 1) & v18;
        int64_t v39 = v19;
        unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + 48 * v16);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v21[2];
      uint64_t v25 = v21[3];
      uint64_t v27 = v21[4];
      uint64_t v26 = v21[5];
      sub_25B380250();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      sub_25B380280();
      sub_25B380280();
      uint64_t result = sub_25B380290();
      uint64_t v28 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v10 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (void *)(*(void *)(v6 + 48) + 48 * v13);
      *uint64_t v14 = v22;
      v14[1] = v23;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v27;
      v14[5] = v26;
      ++*(void *)(v6 + 16);
      uint64_t v4 = v38;
      int64_t v12 = v39;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_25B357350()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC948);
  uint64_t v7 = sub_25B37FE50();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v24 = v0;
    uint64_t v25 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    int64_t v26 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v15 << 6);
      }
      else
      {
        int64_t v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v20 >= v26) {
          goto LABEL_23;
        }
        unint64_t v21 = v25[v20];
        ++v15;
        if (!v21)
        {
          int64_t v15 = v20 + 1;
          if (v20 + 1 >= v26) {
            goto LABEL_23;
          }
          unint64_t v21 = v25[v15];
          if (!v21)
          {
            int64_t v15 = v20 + 2;
            if (v20 + 2 >= v26) {
              goto LABEL_23;
            }
            unint64_t v21 = v25[v15];
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v26)
              {
LABEL_23:
                swift_release();
                uint64_t v23 = 1 << *(unsigned char *)(v6 + 32);
                if (v23 > 63) {
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v25 = -1 << v23;
                }
                uint64_t v1 = v24;
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v21 = v25[v22];
              if (!v21)
              {
                while (1)
                {
                  int64_t v15 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_29;
                  }
                  if (v15 >= v26) {
                    goto LABEL_23;
                  }
                  unint64_t v21 = v25[v15];
                  ++v22;
                  if (v21) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v15 = v22;
            }
          }
        }
LABEL_22:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      uint64_t v18 = *(void *)(v3 + 72);
      sub_25B35CBE4(*(void *)(v6 + 48) + v18 * v17, (uint64_t)v5, type metadata accessor for ReplicatorDevice);
      sub_25B380250();
      ReplicatorDevice.hash(into:)((uint64_t)v27);
      sub_25B380290();
      unint64_t v19 = sub_25B37FDE0();
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = sub_25B35CBE4((uint64_t)v5, *(void *)(v8 + 48) + v19 * v18, type metadata accessor for ReplicatorDevice);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_25B357670()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B37F640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v53 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4EC938);
  uint64_t v11 = sub_25B37FE50();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    char v13 = *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 56);
    uint64_t v49 = (void *)(v10 + 56);
    uint64_t v15 = 1 << v13;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v14;
    int64_t v48 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    uint64_t v52 = v2;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    long long v43 = v0;
    uint64_t v44 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v18 = v11 + 56;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    uint64_t v21 = v47;
    for (i = v10; ; uint64_t v10 = i)
    {
      if (v17)
      {
        unint64_t v23 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v24 = v23 | (v20 << 6);
      }
      else
      {
        int64_t v25 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v25 >= v48) {
          goto LABEL_36;
        }
        unint64_t v26 = v49[v25];
        ++v20;
        if (!v26)
        {
          int64_t v20 = v25 + 1;
          if (v25 + 1 >= v48) {
            goto LABEL_36;
          }
          unint64_t v26 = v49[v20];
          if (!v26)
          {
            int64_t v20 = v25 + 2;
            if (v25 + 2 >= v48) {
              goto LABEL_36;
            }
            unint64_t v26 = v49[v20];
            if (!v26)
            {
              int64_t v27 = v25 + 3;
              if (v27 >= v48)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v43;
                uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
                if (v41 > 63) {
                  bzero(v49, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v49 = -1 << v41;
                }
                *(void *)(v10 + 16) = 0;
                break;
              }
              unint64_t v26 = v49[v27];
              if (!v26)
              {
                while (1)
                {
                  int64_t v20 = v27 + 1;
                  if (__OFADD__(v27, 1)) {
                    goto LABEL_42;
                  }
                  if (v20 >= v48) {
                    goto LABEL_36;
                  }
                  unint64_t v26 = v49[v20];
                  ++v27;
                  if (v26) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v20 = v27;
            }
          }
        }
LABEL_23:
        unint64_t v17 = (v26 - 1) & v26;
        unint64_t v24 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      uint64_t v28 = *(void *)(v10 + 48);
      uint64_t v29 = *(void *)(v53 + 72);
      sub_25B35CBE4(v28 + v29 * v24, (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID);
      sub_25B380250();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      sub_25B35CB1C((uint64_t)&v9[*(int *)(v21 + 28)], (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID.Ownership);
      uint64_t v30 = v52;
      if ((*v51)(v7, 1, v52) == 1)
      {
        sub_25B380260();
      }
      else
      {
        char v31 = v7;
        unint64_t v32 = v46;
        (*v45)(v46, v31, v30);
        sub_25B380260();
        sub_25B35CAD4(&qword_26B340FA0, MEMORY[0x263F07508]);
        sub_25B37F950();
        BOOL v33 = v32;
        uint64_t v7 = v31;
        uint64_t v21 = v47;
        (*v44)(v33, v30);
      }
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      uint64_t result = sub_25B380290();
      uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v35 = result & ~v34;
      unint64_t v36 = v35 >> 6;
      if (((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v37 = 0;
        unint64_t v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v39 = v36 == v38;
          if (v36 == v38) {
            unint64_t v36 = 0;
          }
          v37 |= v39;
          uint64_t v40 = *(void *)(v18 + 8 * v36);
        }
        while (v40 == -1);
        unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t result = sub_25B35CBE4((uint64_t)v9, *(void *)(v12 + 48) + v22 * v29, type metadata accessor for ReplicatorRecord.ID);
      ++*(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v12;
  return result;
}

unint64_t sub_25B357C88()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341240);
  uint64_t v2 = sub_25B37FE50();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    int64_t v27 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v28 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v29 = v2 + 56;
    uint64_t v30 = v1;
    unint64_t result = swift_retain();
    for (int64_t i = 0; ; int64_t i = v32)
    {
      if (v6)
      {
        uint64_t v31 = (v6 - 1) & v6;
        int64_t v32 = i;
        unint64_t v9 = __clz(__rbit64(v6)) | (i << 6);
        uint64_t v10 = v30;
      }
      else
      {
        int64_t v21 = i + 1;
        uint64_t v10 = v30;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v21 >= v28) {
          goto LABEL_23;
        }
        unint64_t v22 = v27[v21];
        int64_t v23 = i + 1;
        if (!v22)
        {
          int64_t v23 = i + 2;
          if (i + 2 >= v28) {
            goto LABEL_23;
          }
          unint64_t v22 = v27[v23];
          if (!v22)
          {
            int64_t v23 = i + 3;
            if (i + 3 >= v28) {
              goto LABEL_23;
            }
            unint64_t v22 = v27[v23];
            if (!v22)
            {
              uint64_t v24 = i + 4;
              if (i + 4 >= v28)
              {
LABEL_23:
                swift_release();
                uint64_t v25 = 1 << *(unsigned char *)(v30 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v27 = -1 << v25;
                }
                *(void *)(v30 + 16) = 0;
                break;
              }
              unint64_t v22 = v27[v24];
              if (!v22)
              {
                while (1)
                {
                  int64_t v23 = v24 + 1;
                  if (__OFADD__(v24, 1)) {
                    goto LABEL_29;
                  }
                  if (v23 >= v28) {
                    goto LABEL_23;
                  }
                  unint64_t v22 = v27[v23];
                  ++v24;
                  if (v22) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v23 = i + 4;
            }
          }
        }
LABEL_22:
        uint64_t v31 = (v22 - 1) & v22;
        int64_t v32 = v23;
        unint64_t v9 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      uint64_t v11 = *(void *)(v10 + 48) + 80 * v9;
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 8);
      uint64_t v15 = *(void *)(v11 + 16);
      uint64_t v14 = *(void *)(v11 + 24);
      uint64_t v17 = *(void *)(v11 + 32);
      uint64_t v16 = *(void *)(v11 + 40);
      uint64_t v18 = *(void *)(v11 + 48);
      uint64_t v19 = *(void *)(v11 + 72);
      long long v33 = *(_OWORD *)(v11 + 56);
      sub_25B380250();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37FA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37E81C((uint64_t)v34, *((uint64_t *)&v33 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25B37E628((uint64_t)v34, v19);
      swift_bridgeObjectRelease();
      sub_25B380290();
      unint64_t result = sub_25B37FDE0();
      *(void *)(v29 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v20 = *(void *)(v3 + 48) + 80 * result;
      *(void *)uint64_t v20 = v12;
      *(void *)(v20 + 8) = v13;
      *(void *)(v20 + 16) = v15;
      *(void *)(v20 + 24) = v14;
      *(void *)(v20 + 32) = v17;
      *(void *)(v20 + 40) = v16;
      *(void *)(v20 + 48) = v18;
      *(_OWORD *)(v20 + 56) = v33;
      *(void *)(v20 + 72) = v19;
      ++*(void *)(v3 + 16);
      unint64_t v6 = v31;
    }
  }
  unint64_t result = swift_release();
  uint64_t *v26 = v3;
  return result;
}

uint64_t sub_25B358020()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB348);
  uint64_t v3 = sub_25B37FE50();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = sub_25B37FD40();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_25B3582C0(uint64_t a1, uint64_t a2)
{
  sub_25B37FD40();
  unint64_t result = sub_25B37FDE0();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_25B358344(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t *)result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  unint64_t v36 = (_OWORD *)result;
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    sub_25B356FE8(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_25B3593E0(a4);
      goto LABEL_26;
    }
    sub_25B359C38(v9, a4);
  }
  uint64_t v10 = *v4;
  sub_25B380250();
  uint64_t v11 = *v6;
  uint64_t v12 = v6[1];
  uint64_t v13 = v6[2];
  uint64_t v14 = v6[3];
  uint64_t v16 = v6[4];
  uint64_t v15 = v6[5];
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v40 = v13;
  sub_25B37FA10();
  uint64_t v39 = v14;
  swift_bridgeObjectRelease();
  uint64_t v38 = v16;
  sub_25B380280();
  uint64_t v37 = v15;
  sub_25B380280();
  unint64_t result = sub_25B380290();
  uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v17;
  uint64_t v18 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v10 + 48);
    do
    {
      unint64_t v22 = (uint64_t *)(v20 + 48 * a2);
      unint64_t result = *v22;
      uint64_t v23 = v22[2];
      uint64_t v24 = v22[3];
      uint64_t v26 = v22[4];
      uint64_t v25 = v22[5];
      BOOL v27 = *v22 == v11 && v22[1] == v12;
      if (v27 || (unint64_t result = sub_25B3801A0(), (result & 1) != 0))
      {
        BOOL v28 = v23 == v40 && v24 == v39;
        if (v28 || (unint64_t result = sub_25B3801A0(), (result & 1) != 0))
        {
          if (v26 == v38 && v25 == v37) {
            goto LABEL_29;
          }
        }
      }
      a2 = (a2 + 1) & v19;
    }
    while (((*(void *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_26:
  uint64_t v29 = *v35;
  *(void *)(*v35 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v30 = (_OWORD *)(*(void *)(v29 + 48) + 48 * a2);
  long long v31 = v36[1];
  *uint64_t v30 = *v36;
  v30[1] = v31;
  v30[2] = v36[2];
  uint64_t v32 = *(void *)(v29 + 16);
  BOOL v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (!v33)
  {
    *(void *)(v29 + 16) = v34;
    return result;
  }
  __break(1u);
LABEL_29:
  unint64_t result = sub_25B3801B0();
  __break(1u);
  return result;
}

uint64_t sub_25B358590(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_25B357350();
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_25B359F74();
LABEL_8:
    uint64_t v15 = *v4;
    sub_25B380250();
    ReplicatorDevice.hash(into:)((uint64_t)v27);
    uint64_t v16 = sub_25B380290();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        sub_25B35CB1C(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for ReplicatorDevice);
        char v20 = _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v11, a1);
        sub_25B35CB84((uint64_t)v11, type metadata accessor for ReplicatorDevice);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_25B3595F0(type metadata accessor for ReplicatorDevice, &qword_26A4EC948, type metadata accessor for ReplicatorDevice, type metadata accessor for ReplicatorDevice);
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_25B35CBE4(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, type metadata accessor for ReplicatorDevice);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = sub_25B3801B0();
  __break(1u);
  return result;
}

uint64_t sub_25B358824(void *a1, unint64_t a2, char a3)
{
  uint64_t v67 = sub_25B37F640();
  uint64_t v7 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  MEMORY[0x270FA5388](v66);
  unint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v60 = *(void *)(v14 - 8);
  uint64_t v61 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (void (***)(char *, uint64_t, uint64_t))((char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = *(void *)(*v3 + 16);
  unint64_t v18 = *(void *)(*v3 + 24);
  uint64_t v58 = v3;
  if (v18 <= v17 || (a3 & 1) == 0)
  {
    uint64_t v59 = v11;
    if (a3)
    {
      sub_25B357670();
    }
    else
    {
      if (v18 > v17)
      {
        sub_25B3595F0(type metadata accessor for ReplicatorRecord.ID, (uint64_t *)&unk_26A4EC938, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
        goto LABEL_37;
      }
      sub_25B35A250();
    }
    uint64_t v19 = *v3;
    sub_25B380250();
    ReplicatorRecord.ID.hash(into:)();
    uint64_t v20 = sub_25B380290();
    uint64_t v21 = -1 << *(unsigned char *)(v19 + 32);
    a2 = v20 & ~v21;
    uint64_t v22 = v19 + 56;
    uint64_t v23 = v61;
    if ((*(void *)(v19 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v24 = ~v21;
      uint64_t v25 = *(void *)(v60 + 72);
      uint64_t v26 = v7;
      BOOL v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v26 + 32);
      uint64_t v57 = (void (**)(uint64_t, uint64_t))(v26 + 8);
      uint64_t v64 = ~v21;
      uint64_t v65 = v19 + 56;
      uint64_t v62 = v19;
      uint64_t v63 = v25;
      do
      {
        sub_25B35CB1C(*(void *)(v19 + 48) + v25 * a2, (uint64_t)v16, type metadata accessor for ReplicatorRecord.ID);
        BOOL v28 = *v16 == *a1 && v16[1] == a1[1];
        if (!v28 && (sub_25B3801A0() & 1) == 0) {
          goto LABEL_11;
        }
        BOOL v29 = v16[2] == a1[2] && v16[3] == a1[3];
        if (!v29 && (sub_25B3801A0() & 1) == 0 || (v16[4] != a1[4] || v16[5] != a1[5]) && (sub_25B3801A0() & 1) == 0) {
          goto LABEL_11;
        }
        uint64_t v30 = *(int *)(v23 + 28);
        uint64_t v31 = (uint64_t)a1 + v30;
        uint64_t v32 = (uint64_t)&v13[*(int *)(v66 + 48)];
        BOOL v33 = v13;
        uint64_t v34 = v27;
        sub_25B35CB1C((uint64_t)v16 + v30, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v35 = v67;
        sub_25B35CB1C(v31, v32, type metadata accessor for ReplicatorRecord.ID.Ownership);
        unint64_t v36 = *v34;
        uint64_t v37 = v35;
        BOOL v27 = v34;
        if ((*v34)(v13, 1, v37) == 1)
        {
          unsigned int v38 = v36((char *)v32, 1, v67);
          uint64_t v19 = v62;
          uint64_t v24 = v64;
          if (v38 != 1) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v39 = (uint64_t)v59;
          sub_25B35CB1C((uint64_t)v13, (uint64_t)v59, type metadata accessor for ReplicatorRecord.ID.Ownership);
          if (v36((char *)v32, 1, v67) == 1)
          {
            (*v57)(v39, v67);
            uint64_t v23 = v61;
            uint64_t v19 = v62;
            uint64_t v24 = v64;
LABEL_30:
            sub_25B2E344C((uint64_t)v13, &qword_26B341530);
LABEL_31:
            uint64_t v22 = v65;
            uint64_t v25 = v63;
            goto LABEL_11;
          }
          uint64_t v40 = v56;
          uint64_t v41 = v67;
          (*v54)(v56, v32, v67);
          int v55 = sub_25B37F610();
          uint64_t v42 = *v57;
          long long v43 = v40;
          unint64_t v13 = v33;
          (*v57)((uint64_t)v43, v41);
          uint64_t v44 = v41;
          BOOL v27 = v34;
          v42(v39, v44);
          uint64_t v23 = v61;
          uint64_t v19 = v62;
          uint64_t v24 = v64;
          if ((v55 & 1) == 0)
          {
            sub_25B35CB84((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_31;
          }
        }
        sub_25B35CB84((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v45 = *(int *)(v23 + 32);
        uint64_t v46 = *(void *)((char *)v16 + v45);
        uint64_t v47 = *(void *)((char *)v16 + v45 + 8);
        int64_t v48 = (void *)((char *)a1 + v45);
        uint64_t v22 = v65;
        uint64_t v25 = v63;
        if (v46 == *v48 && v47 == v48[1] || (sub_25B3801A0() & 1) != 0) {
          goto LABEL_40;
        }
LABEL_11:
        sub_25B35CB84((uint64_t)v16, type metadata accessor for ReplicatorRecord.ID);
        a2 = (a2 + 1) & v24;
      }
      while (((*(void *)(v22 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_37:
  uint64_t v49 = *v58;
  *(void *)(*v58 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_25B35CBE4((uint64_t)a1, *(void *)(v49 + 48) + *(void *)(v60 + 72) * a2, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v51 = *(void *)(v49 + 16);
  BOOL v52 = __OFADD__(v51, 1);
  uint64_t v53 = v51 + 1;
  if (v52)
  {
    __break(1u);
LABEL_40:
    sub_25B35CB84((uint64_t)v16, type metadata accessor for ReplicatorRecord.ID);
    uint64_t result = sub_25B3801B0();
    __break(1u);
  }
  else
  {
    *(void *)(v49 + 16) = v53;
  }
  return result;
}

uint64_t sub_25B358E7C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = (uint64_t *)result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  long long v43 = (_OWORD *)result;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_35;
  }
  if (a3)
  {
    sub_25B357C88();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_25B359868();
      goto LABEL_35;
    }
    sub_25B35A82C();
  }
  uint64_t v50 = *v3;
  sub_25B380250();
  uint64_t v8 = *v5;
  uint64_t v9 = v5[1];
  uint64_t v10 = v5[2];
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  uint64_t v13 = v5[5];
  uint64_t v14 = v5[6];
  uint64_t v15 = v5[7];
  uint64_t v17 = v5[8];
  uint64_t v16 = v5[9];
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v53 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v52 = v10;
  sub_25B37FA10();
  uint64_t v51 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v48 = v12;
  sub_25B37FA10();
  uint64_t v47 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v46 = v14;
  sub_25B37FA10();
  uint64_t v45 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E81C((uint64_t)v54, v17);
  uint64_t v44 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E628((uint64_t)v54, v16);
  uint64_t v41 = v16;
  swift_bridgeObjectRelease();
  uint64_t result = sub_25B380290();
  uint64_t v18 = -1 << *(unsigned char *)(v50 + 32);
  a2 = result & ~v18;
  if ((*(void *)(v50 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v49 = ~v18;
    do
    {
      uint64_t v19 = (void *)(*(void *)(v50 + 48) + 80 * a2);
      uint64_t v21 = v19[2];
      uint64_t v20 = v19[3];
      uint64_t v22 = v19[4];
      uint64_t v23 = v19[5];
      uint64_t v24 = v19[6];
      uint64_t v25 = v19[7];
      uint64_t v26 = v19[8];
      uint64_t v27 = v19[9];
      BOOL v28 = *v19 == v8 && v19[1] == v53;
      if (v28 || (uint64_t result = sub_25B3801A0(), (result & 1) != 0))
      {
        BOOL v29 = v21 == v52 && v20 == v51;
        if (v29 || (uint64_t result = sub_25B3801A0(), (result & 1) != 0))
        {
          BOOL v30 = v22 == v48 && v23 == v47;
          if (v30 || (uint64_t result = sub_25B3801A0(), (result & 1) != 0))
          {
            BOOL v31 = v24 == v46 && v25 == v45;
            if (v31 || (uint64_t result = sub_25B3801A0(), (result & 1) != 0))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (sub_25B37D4A8(v26, v44))
              {
                char v32 = sub_25B37D754(v27, v41);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                if (v32)
                {
                  uint64_t result = sub_25B3801B0();
                  __break(1u);
                  break;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
      a2 = (a2 + 1) & v49;
    }
    while (((*(void *)(v50 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_35:
  uint64_t v33 = *v42;
  *(void *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v34 = (_OWORD *)(*(void *)(v33 + 48) + 80 * a2);
  long long v35 = v43[4];
  long long v36 = v43[2];
  v34[3] = v43[3];
  v34[4] = v35;
  long long v37 = v43[1];
  *uint64_t v34 = *v43;
  v34[1] = v37;
  id v34[2] = v36;
  uint64_t v38 = *(void *)(v33 + 16);
  BOOL v39 = __OFADD__(v38, 1);
  uint64_t v40 = v38 + 1;
  if (v39) {
    __break(1u);
  }
  else {
    *(void *)(v33 + 16) = v40;
  }
  return result;
}

void sub_25B359268(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_25B358020();
  }
  else
  {
    if (v7 > v6)
    {
      sub_25B359A8C();
      goto LABEL_14;
    }
    sub_25B35ABAC();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = sub_25B37FD40();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for Client();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = sub_25B37FD50();

    if (v12)
    {
LABEL_13:
      sub_25B3801B0();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = sub_25B37FD50();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void *sub_25B3593E0(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_25B37FE40();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v14) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25)
      {
        int64_t v10 = v24 + 2;
        if (v24 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v7 + 8 * v10);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 48 * v16;
    uint64_t v18 = *(void *)(v3 + 48) + v17;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    uint64_t v22 = *(void *)(v5 + 48) + v17;
    long long v23 = *(_OWORD *)(v18 + 32);
    *(void *)uint64_t v22 = *(void *)v18;
    *(void *)(v22 + 8) = v19;
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    *(_OWORD *)(v22 + 32) = v23;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v14) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_25B3595A8()
{
  return sub_25B3595F0(type metadata accessor for ReplicatorRecord.ID, (uint64_t *)&unk_26A4EC938, type metadata accessor for ReplicatorRecord.ID, type metadata accessor for ReplicatorRecord.ID);
}

void *sub_25B3595F0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  unint64_t v8 = v4;
  uint64_t v9 = a1(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v30 - v11;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = *v4;
  uint64_t v14 = sub_25B37FE40();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *unint64_t v8 = v15;
    return result;
  }
  uint64_t result = (void *)(v14 + 56);
  unint64_t v17 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  BOOL v30 = v8;
  BOOL v31 = (const void *)(v13 + 56);
  if (v15 != v13 || (unint64_t)result >= v13 + 56 + 8 * v17) {
    uint64_t result = memmove(result, v31, 8 * v17);
  }
  int64_t v19 = 0;
  *(void *)(v15 + 16) = *(void *)(v13 + 16);
  uint64_t v20 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(v13 + 56);
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v25 = v24 | (v19 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v27 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v27);
    ++v19;
    if (!v28)
    {
      int64_t v19 = v27 + 1;
      if (v27 + 1 >= v23) {
        goto LABEL_28;
      }
      unint64_t v28 = *((void *)v31 + v19);
      if (!v28)
      {
        int64_t v19 = v27 + 2;
        if (v27 + 2 >= v23) {
          goto LABEL_28;
        }
        unint64_t v28 = *((void *)v31 + v19);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_12:
    unint64_t v26 = *(void *)(v10 + 72) * v25;
    sub_25B35CB1C(*(void *)(v13 + 48) + v26, (uint64_t)v12, a3);
    uint64_t result = (void *)sub_25B35CBE4((uint64_t)v12, *(void *)(v15 + 48) + v26, a4);
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v23)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    unint64_t v8 = v30;
    goto LABEL_30;
  }
  unint64_t v28 = *((void *)v31 + v29);
  if (v28)
  {
    int64_t v19 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v19 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v19 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v19);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_25B359868()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341240);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FE40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v13) {
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28)
      {
        int64_t v9 = v27 + 2;
        if (v27 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v28 = *(void *)(v6 + 8 * v9);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 80 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v17 + 40);
    uint64_t v23 = *(void *)(v17 + 48);
    uint64_t v24 = *(void *)(v17 + 72);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    long long v26 = *(_OWORD *)(v17 + 56);
    *(void *)uint64_t v25 = *(void *)v17;
    *(void *)(v25 + 8) = v18;
    *(void *)(v25 + 16) = v19;
    *(void *)(v25 + 24) = v20;
    *(void *)(v25 + 32) = v21;
    *(void *)(v25 + 40) = v22;
    *(void *)(v25 + 48) = v23;
    *(_OWORD *)(v25 + 56) = v26;
    *(void *)(v25 + 72) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v13) {
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_25B359A8C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB348);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25B37FE40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25B359C38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = sub_25B37FE50();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v35 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v36 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  uint64_t v37 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v38 = v12;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v36) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    int64_t v19 = v12 + 1;
    if (!v18)
    {
      int64_t v19 = v12 + 2;
      if (v12 + 2 >= v36) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v12 + 3;
        if (v12 + 3 >= v36) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v18 - 1) & v18;
    int64_t v38 = v19;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_24:
    uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + 48 * v16);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    uint64_t v25 = v21[3];
    uint64_t v26 = v21[4];
    uint64_t v27 = v21[5];
    sub_25B380250();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    sub_25B380280();
    sub_25B380280();
    uint64_t result = sub_25B380290();
    uint64_t v28 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v10 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = (void *)(*(void *)(v6 + 48) + 48 * v13);
    *unint64_t v14 = v22;
    v14[1] = v23;
    v14[2] = v24;
    v14[3] = v25;
    v14[4] = v26;
    v14[5] = v27;
    ++*(void *)(v6 + 16);
    uint64_t v4 = v37;
    int64_t v12 = v38;
  }
  uint64_t v20 = v12 + 4;
  if (v12 + 4 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v35 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v12 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_25B359F74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC948);
  uint64_t v7 = sub_25B37FE50();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v25 = v0;
  uint64_t v26 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v13 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v14 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_7;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v13) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v16;
    if (!v22)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v16);
      if (!v22)
      {
        int64_t v16 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v26 + 8 * v16);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_7:
    uint64_t v19 = *(void *)(v3 + 72);
    sub_25B35CB1C(*(void *)(v6 + 48) + v19 * v18, (uint64_t)v5, type metadata accessor for ReplicatorDevice);
    sub_25B380250();
    ReplicatorDevice.hash(into:)((uint64_t)v27);
    sub_25B380290();
    unint64_t v20 = sub_25B37FDE0();
    *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = sub_25B35CBE4((uint64_t)v5, *(void *)(v8 + 48) + v20 * v19, type metadata accessor for ReplicatorDevice);
    ++*(void *)(v8 + 16);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13)
  {
LABEL_23:
    uint64_t result = swift_release_n();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    int64_t v16 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v16);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_25B35A250()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B37F640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v51 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v50 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4EC938);
  uint64_t v11 = sub_25B37FE50();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v12;
    return result;
  }
  char v13 = *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 56);
  uint64_t v45 = v10 + 56;
  uint64_t v15 = 1 << v13;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  int64_t v46 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  uint64_t v49 = v2;
  long long v43 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  uint64_t v41 = v0;
  uint64_t v42 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v18 = v11 + 56;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v24 >= v46) {
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v45 + 8 * v24);
    ++v20;
    if (!v25)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v46) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v45 + 8 * v20);
      if (!v25)
      {
        int64_t v20 = v24 + 2;
        if (v24 + 2 >= v46) {
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v45 + 8 * v20);
        if (!v25) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v10 + 48);
    uint64_t v28 = *(void *)(v50 + 72);
    sub_25B35CB1C(v27 + v28 * v23, (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID);
    sub_25B380250();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t v29 = v7;
    uint64_t v30 = v51;
    sub_25B35CB1C((uint64_t)&v9[*(int *)(v7 + 28)], v51, type metadata accessor for ReplicatorRecord.ID.Ownership);
    uint64_t v31 = v49;
    if ((*v48)(v30, 1, v49) == 1)
    {
      sub_25B380260();
    }
    else
    {
      unint64_t v32 = v44;
      (*v43)(v44, v30, v31);
      sub_25B380260();
      sub_25B35CAD4(&qword_26B340FA0, MEMORY[0x263F07508]);
      sub_25B37F950();
      (*v42)(v32, v31);
    }
    uint64_t v7 = v29;
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25B380290();
    uint64_t v33 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = sub_25B35CBE4((uint64_t)v9, *(void *)(v12 + 48) + v21 * v28, type metadata accessor for ReplicatorRecord.ID);
    ++*(void *)(v12 + 16);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v46)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v41;
    goto LABEL_38;
  }
  unint64_t v25 = *(void *)(v45 + 8 * v26);
  if (v25)
  {
    int64_t v20 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v20 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v20 >= v46) {
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v45 + 8 * v20);
    ++v26;
    if (v25) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_25B35A82C()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B341240);
  uint64_t v2 = sub_25B37FE50();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    *unint64_t v25 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v26 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v27 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v28 = v2 + 56;
  uint64_t v30 = v1;
  unint64_t result = swift_retain();
  int64_t v8 = 0;
  uint64_t v29 = v3;
  while (1)
  {
    if (v6)
    {
      uint64_t v31 = (v6 - 1) & v6;
      int64_t v32 = v8;
      unint64_t v9 = __clz(__rbit64(v6)) | (v8 << 6);
      uint64_t v10 = v30;
      goto LABEL_7;
    }
    int64_t v21 = v8 + 1;
    uint64_t v10 = v30;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    int64_t v23 = v8 + 1;
    if (!v22)
    {
      int64_t v23 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v26 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v31 = (v22 - 1) & v22;
    int64_t v32 = v23;
    unint64_t v9 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_7:
    uint64_t v11 = *(void *)(v10 + 48) + 80 * v9;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v16 = *(void *)(v11 + 32);
    uint64_t v17 = *(void *)(v11 + 40);
    uint64_t v18 = *(void *)(v11 + 48);
    uint64_t v19 = *(void *)(v11 + 72);
    long long v33 = *(_OWORD *)(v11 + 56);
    sub_25B380250();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37FA10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37E81C((uint64_t)v34, *((uint64_t *)&v33 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25B37E628((uint64_t)v34, v19);
    swift_bridgeObjectRelease();
    sub_25B380290();
    uint64_t v3 = v29;
    unint64_t result = sub_25B37FDE0();
    *(void *)(v28 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v20 = *(void *)(v29 + 48) + 80 * result;
    *(void *)uint64_t v20 = v12;
    *(void *)(v20 + 8) = v13;
    *(void *)(v20 + 16) = v14;
    *(void *)(v20 + 24) = v15;
    *(void *)(v20 + 32) = v16;
    *(void *)(v20 + 40) = v17;
    *(void *)(v20 + 48) = v18;
    *(_OWORD *)(v20 + 56) = v33;
    *(void *)(v20 + 72) = v19;
    ++*(void *)(v29 + 16);
    unint64_t v6 = v31;
    int64_t v8 = v32;
  }
  uint64_t v24 = v8 + 4;
  if (v8 + 4 >= v27)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v8 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_25B35ABAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB348);
  uint64_t v3 = sub_25B37FE50();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = sub_25B37FD40();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

double sub_25B35AE28@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  sub_25B380250();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[7];
  uint64_t v44 = a1[6];
  uint64_t v13 = a1[8];
  uint64_t v12 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v52 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v51 = v7;
  sub_25B37FA10();
  uint64_t v50 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v46 = v9;
  sub_25B37FA10();
  uint64_t v45 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37FA10();
  uint64_t v43 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E81C((uint64_t)v53, v13);
  uint64_t v42 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B37E628((uint64_t)v53, v12);
  uint64_t v41 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_25B380290();
  uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v48 = v4 + 56;
  uint64_t v49 = v4;
  if (((*(void *)(v4 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  uint64_t v47 = ~v15;
  while (1)
  {
    unint64_t v17 = (void *)(*(void *)(v49 + 48) + 80 * v16);
    uint64_t v19 = v17[2];
    uint64_t v18 = v17[3];
    uint64_t v20 = v17[4];
    uint64_t v21 = v17[5];
    uint64_t v22 = v17[6];
    uint64_t v23 = v17[7];
    uint64_t v25 = v17[8];
    uint64_t v24 = v17[9];
    BOOL v26 = *v17 == v5 && v17[1] == v52;
    if (!v26 && (sub_25B3801A0() & 1) == 0) {
      goto LABEL_4;
    }
    BOOL v27 = v19 == v51 && v18 == v50;
    if (!v27 && (sub_25B3801A0() & 1) == 0) {
      goto LABEL_4;
    }
    BOOL v28 = v20 == v46 && v21 == v45;
    if (!v28 && (sub_25B3801A0() & 1) == 0) {
      goto LABEL_4;
    }
    BOOL v29 = v22 == v44 && v23 == v43;
    if (!v29 && (sub_25B3801A0() & 1) == 0) {
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_25B37D4A8(v25, v42)) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    unint64_t v16 = (v16 + 1) & v47;
    if (((*(void *)(v48 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
      goto LABEL_32;
    }
  }
  char v30 = sub_25B37D754(v24, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0) {
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *v39;
  v53[0] = *v39;
  *uint64_t v39 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_25B359868();
    uint64_t v32 = v53[0];
  }
  uint64_t v33 = *(void *)(v32 + 48) + 80 * v16;
  long long v34 = *(_OWORD *)(v33 + 16);
  long long v35 = *(_OWORD *)(v33 + 32);
  uint64_t v36 = *(void *)(v33 + 48);
  uint64_t v37 = *(void *)(v33 + 72);
  *(_OWORD *)a2 = *(_OWORD *)v33;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = v35;
  *(void *)(a2 + 48) = v36;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(v33 + 56);
  *(void *)(a2 + 72) = v37;
  sub_25B35BABC(v16);
  *uint64_t v39 = v53[0];
  swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_25B35B23C(void *a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v4 = a1;
    char v5 = sub_25B37FE30();

    if (v5)
    {
      uint64_t v6 = sub_25B35B404();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_25B37FD40();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for Client();
  id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
  char v11 = sub_25B37FD50();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_12;
      }
      id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
      char v14 = sub_25B37FD50();
    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v1;
  uint64_t v18 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_25B359A8C();
    uint64_t v16 = v18;
  }
  uint64_t v6 = *(void *)(*(void *)(v16 + 48) + 8 * v9);
  sub_25B35BDCC(v9);
  uint64_t *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25B35B404()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_25B37FE00();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_25B356E00(v3, v2);
  uint64_t v15 = v4;
  swift_retain();
  uint64_t v5 = sub_25B37FD40();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    type metadata accessor for Client();
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
    char v9 = sub_25B37FD50();

    if (v9)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_25B35BDCC(v7);
      if (sub_25B37FD50())
      {
        uint64_t *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
        char v12 = sub_25B37FD50();

        if (v12) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_25B35B590(unint64_t a1)
{
  uint64_t v41 = sub_25B37F640();
  uint64_t v3 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v40 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for ReplicatorRecord.ID(0);
  uint64_t v7 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v34 = v1;
  uint64_t result = *v1;
  uint64_t v11 = *v1 + 56;
  uint64_t v12 = -1 << *(unsigned char *)(result + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(void *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v42 = result;
    swift_retain();
    uint64_t v15 = sub_25B37FDD0();
    uint64_t v38 = v11;
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      unint64_t v16 = (v15 + 1) & v14;
      uint64_t v17 = *(void *)(v7 + 72);
      uint64_t v39 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      long long v35 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v36 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
      uint64_t v18 = v38;
      uint64_t v19 = v14;
      uint64_t v20 = v42;
      while (1)
      {
        uint64_t v21 = v17;
        int64_t v22 = v17 * v13;
        sub_25B35CB1C(*(void *)(v20 + 48) + v17 * v13, (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID);
        sub_25B380250();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v23 = v40;
        sub_25B35CB1C((uint64_t)&v9[*(int *)(v43 + 28)], v40, type metadata accessor for ReplicatorRecord.ID.Ownership);
        uint64_t v24 = v41;
        if ((*v39)(v23, 1, v41) == 1)
        {
          sub_25B380260();
        }
        else
        {
          uint64_t v25 = v37;
          (*v36)(v37, v23, v24);
          sub_25B380260();
          sub_25B35CAD4(&qword_26B340FA0, MEMORY[0x263F07508]);
          sub_25B37F950();
          BOOL v26 = v25;
          uint64_t v18 = v38;
          (*v35)(v26, v24);
        }
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        uint64_t v27 = sub_25B380290();
        sub_25B35CB84((uint64_t)v9, type metadata accessor for ReplicatorRecord.ID);
        unint64_t v28 = v27 & v19;
        if ((uint64_t)a1 >= (uint64_t)v16) {
          break;
        }
        uint64_t v17 = v21;
        uint64_t v20 = v42;
        if (v28 < v16) {
          goto LABEL_14;
        }
LABEL_15:
        unint64_t v29 = v17 * a1;
        if ((uint64_t)(v17 * a1) < v22 || *(void *)(v20 + 48) + v17 * a1 >= *(void *)(v20 + 48) + v22 + v17)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v13;
          if (v29 == v22) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v13;
LABEL_6:
        unint64_t v13 = (v13 + 1) & v19;
        if (((*(void *)(v18 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          goto LABEL_21;
        }
      }
      uint64_t v17 = v21;
      uint64_t v20 = v42;
      if (v28 < v16) {
        goto LABEL_6;
      }
LABEL_14:
      if ((uint64_t)a1 < (uint64_t)v28) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
    uint64_t v18 = v38;
LABEL_21:
    *(void *)(v18 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v11 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v30 = *v34;
  uint64_t v31 = *(void *)(*v34 + 16);
  BOOL v32 = __OFSUB__(v31, 1);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v30 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }
  return result;
}

unint64_t sub_25B35BABC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_25B37FDD0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v20 = v4;
      uint64_t v21 = v3;
      unint64_t v22 = (v8 + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(v3 + 48) + 80 * v6;
        uint64_t v11 = *(void *)(v9 + 64);
        uint64_t v10 = *(void *)(v9 + 72);
        sub_25B380250();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37FA10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37E81C((uint64_t)v23, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_25B37E628((uint64_t)v23, v10);
        swift_bridgeObjectRelease();
        uint64_t v12 = sub_25B380290();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v2 >= (uint64_t)v22)
        {
          if (v13 < v22)
          {
            uint64_t v4 = v20;
            uint64_t v3 = v21;
          }
          else
          {
            uint64_t v4 = v20;
            uint64_t v3 = v21;
            if (v2 >= (uint64_t)v13) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v20;
          uint64_t v3 = v21;
          if (v13 >= v22 || v2 >= (uint64_t)v13)
          {
LABEL_12:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (char *)(v14 + 80 * v2);
            unint64_t v16 = (char *)(v14 + 80 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v16 + 80))
            {
              memmove(v15, v16, 0x50uLL);
              int64_t v2 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_25B35BDCC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_25B37FDD0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v11 = sub_25B37FD40();

        unint64_t v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            unint64_t v16 = (void *)(v15 + 8 * v2);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_25B35BF70(void *a1)
{
  int64_t v2 = v1;
  id v4 = objc_msgSend(a1, sel_remoteProcess);
  uint64_t v5 = (void *)sub_25B37F970();
  unsigned int v6 = objc_msgSend(v4, sel_hasEntitlement_, v5);

  if (v6)
  {
    id v7 = objc_msgSend(a1, sel_remoteProcess);
    unsigned int v8 = objc_msgSend(v7, sel_pid);

    unint64_t v9 = (objc_class *)type metadata accessor for Client();
    id v10 = (char *)objc_allocWithZone(v9);
    uint64_t v11 = OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_lock;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B341260);
    uint64_t v12 = swift_allocObject();
    *(_DWORD *)(v12 + 16) = 0;
    *(void *)&v10[v11] = v12;
    *(void *)&v10[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate + 8] = 0;
    uint64_t v13 = swift_unknownObjectWeakInit();
    *(void *)&v10[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_connection] = a1;
    *(_DWORD *)&v10[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_pid] = v8;
    *(void *)(v13 + 8) = &off_2708E5F98;
    swift_unknownObjectWeakAssign();
    v26.receiver = v10;
    v26.super_class = v9;
    id v14 = a1;
    id v15 = objc_msgSendSuper2(&v26, sel_init);
    unint64_t v16 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock];
    uint64_t v24 = MEMORY[0x270FA5388](v15);
    MEMORY[0x270FA5388](v24);
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    sub_25B3102F8(v17);
    os_unfair_lock_unlock(v16 + 4);
    swift_release();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v2;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_25B35C9D8;
    *(void *)(v19 + 24) = v18;
    aBlock[4] = sub_25B318578;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B353A10;
    aBlock[3] = &block_descriptor_61;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = v15;
    unint64_t v22 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_configureConnection_, v20);
    _Block_release(v20);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v14, sel_activate);
      swift_release();
    }
  }
  else
  {
    objc_msgSend(a1, sel_invalidate);
  }
}

uint64_t method lookup function for MigrationServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MigrationServer);
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of MigrationServer.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t type metadata accessor for Client()
{
  return self;
}

unint64_t sub_25B35C6D4()
{
  unint64_t result = qword_26A4EC8E0;
  if (!qword_26A4EC8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC8E0);
  }
  return result;
}

unint64_t sub_25B35C728()
{
  unint64_t result = qword_26A4ECB20;
  if (!qword_26A4ECB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4ECB20);
  }
  return result;
}

unint64_t sub_25B35C77C()
{
  unint64_t result = qword_26A4EC8F0;
  if (!qword_26A4EC8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC8F0);
  }
  return result;
}

uint64_t sub_25B35C7D0@<X0>(void *a1@<X8>)
{
  return sub_25B3557B8(*(void *)(v1 + 16), a1);
}

void *sub_25B35C7EC@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(void *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    uint64_t v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_25B35C830(uint64_t a1)
{
  return a1;
}

uint64_t sub_25B35C858()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B35C890()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25B35C8B8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *sub_25B35C8E0()
{
  return sub_25B35C910();
}

uint64_t sub_25B35C8F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_25B35C948(a1);
}

void *sub_25B35C910()
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t sub_25B35C948@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void sub_25B35C97C()
{
  sub_25B354EE8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_25B35C998()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_25B35C9D8(void *a1)
{
  sub_25B354F64(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25B35C9E0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B35C9F0()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25B35CA2C(uint64_t a1)
{
  sub_25B35529C(a1, *(void *)(v1 + 16));
}

uint64_t objectdestroy_66Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_25B35CA78(uint64_t a1)
{
  sub_25B35544C(a1, *(void *)(v1 + 16));
}

void sub_25B35CA80()
{
  sub_25B3555FC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_25B35CA9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_25B35CAD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B35CB1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B35CB84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B35CBE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_25B35CC84()
{
}

uint64_t ReplicatorRemoteDeviceProviding.device(relationshipID:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      sub_25B35D30C(v12, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if (sub_25B37F610()) {
        break;
      }
      sub_25B35D374((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      v12 += v13;
      if (!--v11) {
        goto LABEL_5;
      }
    }
    sub_25B3505C4((uint64_t)v9, a3);
    uint64_t v14 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v14, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t ReplicatorRemoteDeviceProviding.device(id:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      sub_25B35D30C(v12, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if (sub_25B37F610()) {
        break;
      }
      sub_25B35D374((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      v12 += v13;
      if (!--v11) {
        goto LABEL_5;
      }
    }
    sub_25B3505C4((uint64_t)v9, a3);
    uint64_t v14 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v14, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t ReplicatorRemoteDeviceProviding.pairedDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v14 = result;
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v26 = *(void *)(result + 16);
  if (!v26)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v15;
  }
  unint64_t v16 = 0;
  while (v16 < *(void *)(v14 + 16))
  {
    unint64_t v17 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v18 = *(void *)(v27 + 72);
    sub_25B35D30C(v14 + v17 + v18 * v16, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
    sub_25B35D30C((uint64_t)&v12[*(int *)(v28 + 48)], (uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v6, 4, v19);
    if ((v20 - 2) < 2) {
      goto LABEL_9;
    }
    if (!v20)
    {
      uint64_t v21 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v6, v21);
      uint64_t v15 = v29;
LABEL_9:
      uint64_t v22 = (uint64_t)v10;
      sub_25B3505C4((uint64_t)v12, (uint64_t)v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_25B3109DC(0, *(void *)(v15 + 16) + 1, 1);
      }
      uint64_t v15 = v29;
      unint64_t v24 = *(void *)(v29 + 16);
      unint64_t v23 = *(void *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_25B3109DC(v23 > 1, v24 + 1, 1);
        uint64_t v15 = v29;
      }
      *(void *)(v15 + 16) = v24 + 1;
      uint64_t v25 = v15 + v17 + v24 * v18;
      uint64_t v10 = (char *)v22;
      uint64_t result = sub_25B3505C4(v22, v25);
      goto LABEL_4;
    }
    sub_25B35D374((uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t result = sub_25B35D374((uint64_t)v12, type metadata accessor for ReplicatorDevice);
LABEL_4:
    if (v26 == ++v16)
    {
      uint64_t v15 = v29;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25B35D30C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B35D374(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ReplicatorRemoteDeviceProviding.unpairedDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ReplicatorDevice(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v15 = result;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v30 = *(void *)(result + 16);
  uint64_t v31 = MEMORY[0x263F8EE78];
  if (!v30)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v16;
  }
  unint64_t v17 = 0;
  uint64_t v28 = v11;
  uint64_t v29 = v7;
  uint64_t v18 = v30;
  while (v17 < *(void *)(v15 + 16))
  {
    unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v21 = *(void *)(v8 + 72);
    sub_25B35D30C(v15 + v20 + v21 * v17, (uint64_t)v13, type metadata accessor for ReplicatorDevice);
    sub_25B35D30C((uint64_t)&v13[*(int *)(v7 + 48)], (uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB98);
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v6, 4, v22);
    if ((v23 - 2) >= 2)
    {
      if (v23)
      {
        sub_25B35D374((uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_25B3505C4((uint64_t)v13, (uint64_t)v11);
        uint64_t v24 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_25B3109DC(0, *(void *)(v24 + 16) + 1, 1);
          uint64_t v24 = v31;
        }
        unint64_t v26 = *(void *)(v24 + 16);
        unint64_t v25 = *(void *)(v24 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_25B3109DC(v25 > 1, v26 + 1, 1);
          uint64_t v24 = v31;
        }
        *(void *)(v24 + 16) = v26 + 1;
        uint64_t v27 = v24 + v20 + v26 * v21;
        uint64_t v11 = v28;
        uint64_t result = sub_25B3505C4((uint64_t)v28, v27);
        uint64_t v7 = v29;
        uint64_t v18 = v30;
        goto LABEL_5;
      }
      uint64_t v19 = sub_25B37F640();
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v6, v19);
    }
    uint64_t result = sub_25B35D374((uint64_t)v13, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v18 == ++v17)
    {
      uint64_t v16 = v31;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ReplicatorLocalDeviceProviding.localDeviceID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorLocalDeviceProviding.replicatorProtocolVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorRemoteDeviceProviding.devices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorRemoteDeviceUpdateProviding.deviceUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorRemoteDeviceUpdateProviding.pairedDeviceUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25B35D770()
{
  return sub_25B380290();
}

uint64_t sub_25B35D880()
{
  return sub_25B380290();
}

uint64_t sub_25B35D980()
{
  sub_25B37FA10();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B35DA60()
{
  sub_25B37FA10();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B35DB5C()
{
  return sub_25B380290();
}

uint64_t sub_25B35DC68()
{
  return sub_25B380290();
}

uint64_t sub_25B35DD64(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x800000025B38A0D0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v3 = 0x800000025B38A0F0;
      break;
    case 2:
      unint64_t v5 = 0x7061436574617473;
      unint64_t v3 = 0xEC00000065727574;
      break;
    case 3:
      unint64_t v5 = 0x6F6974617267696DLL;
      unint64_t v3 = 0xEF7265767265536ELL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x800000025B38A0D0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x800000025B38A0F0;
      if (v5 == 0xD000000000000017) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x7061436574617473;
      unint64_t v6 = 0xEC00000065727574;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEF7265767265536ELL;
      if (v5 == 0x6F6974617267696DLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_25B3801A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25B35DF18(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x800000025B38A070;
      unint64_t v4 = 0xD000000000000011;
      break;
    case 2:
      unint64_t v4 = 0xD000000000000013;
      unint64_t v3 = 0x800000025B38A090;
      break;
    case 3:
      unint64_t v4 = 0x6C6F636F746F7270;
      unint64_t v3 = 0xEF6E6F6973726556;
      break;
    case 4:
      unint64_t v4 = 0x73736572706D6F63;
      unint64_t v3 = 0xED000073656C6946;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0x800000025B38A070;
      if (v4 == 0xD000000000000011) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0x800000025B38A090;
      if (v4 != 0xD000000000000013) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v6 = 0x6C6F636F746F7270;
      unint64_t v5 = 0xEF6E6F6973726556;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xED000073656C6946;
      if (v4 != 0x73736572706D6F63) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_25B3801A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25B35E118(uint64_t a1)
{
  return sub_25B35E220(a1, qword_26B3417A8);
}

uint64_t static LogHelper.replicatorClient.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B35E2BC(&qword_26B3417C0, (uint64_t)qword_26B3417A8, a1);
}

uint64_t sub_25B35E160(uint64_t a1)
{
  return sub_25B35E220(a1, qword_26A4EB630);
}

uint64_t static LogHelper.replicatorControlClient.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B35E2BC(&qword_26A4EB648, (uint64_t)qword_26A4EB630, a1);
}

uint64_t sub_25B35E1A8(uint64_t a1)
{
  return sub_25B35E220(a1, qword_26A4EB6C0);
}

uint64_t static LogHelper.stateCapture.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B35E2BC(&qword_26A4EB550, (uint64_t)qword_26A4EB6C0, a1);
}

uint64_t sub_25B35E1F4(uint64_t a1)
{
  return sub_25B35E220(a1, qword_26A4EB618);
}

uint64_t sub_25B35E220(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_25B37F780();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_25B37F770();
}

uint64_t static LogHelper.migrationServer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B35E2BC(&qword_26A4EB548, (uint64_t)qword_26A4EB618, a1);
}

uint64_t sub_25B35E2BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25B37F780();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t LogHelper.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t LogHelper.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t LogHelper.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25B35E3B0()
{
  return v0;
}

ReplicatorServices::LoggingCategory_optional __swiftcall LoggingCategory.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_25B380000();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

unint64_t LoggingCategory.rawValue.getter()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x7061436574617473;
      break;
    case 3:
      unint64_t result = 0x6F6974617267696DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B35E4C0(unsigned __int8 *a1, char *a2)
{
  return sub_25B35DD64(*a1, *a2);
}

unint64_t sub_25B35E4D0()
{
  unint64_t result = qword_26A4EC950;
  if (!qword_26A4EC950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC950);
  }
  return result;
}

uint64_t sub_25B35E524()
{
  return sub_25B35D880();
}

uint64_t sub_25B35E52C()
{
  return sub_25B35D980();
}

uint64_t sub_25B35E534()
{
  return sub_25B35DC68();
}

ReplicatorServices::LoggingCategory_optional sub_25B35E53C(Swift::String *a1)
{
  return LoggingCategory.init(rawValue:)(*a1);
}

void sub_25B35E548(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x800000025B38A0D0;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xD000000000000017;
      unint64_t v3 = 0x800000025B38A0F0;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "stateCapture");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x6F6974617267696DLL;
      *(void *)(a1 + 8) = 0xEF7265767265536ELL;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = v3;
      break;
  }
}

uint64_t type metadata accessor for LogHelper()
{
  return self;
}

uint64_t method lookup function for LogHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LogHelper);
}

unsigned char *storeEnumTagSinglePayload for LoggingCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B35E704);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingCategory()
{
  return &type metadata for LoggingCategory;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t static ReplicatorRecordDestination.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = swift_bridgeObjectRetain();
      char v4 = sub_25B35E824(v3, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
    return 0;
  }
  if (v2) {
    return 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_25B35E824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B37F640();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      BOOL v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      uint64_t v30 = (void (**)(char *, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      unint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        unint64_t v20 = v9;
        uint64_t v21 = v32;
        v32(v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        sub_25B31B448((unint64_t *)&unk_26B340CF0);
        char v23 = sub_25B37F960();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24(v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t ReplicatorRecordDestination.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return sub_25B380260();
  }
  sub_25B380260();
  return sub_25B33EEB8(a1, v3);
}

uint64_t sub_25B35EAA0(uint64_t a1)
{
  unint64_t v2 = sub_25B35F78C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B35EADC(uint64_t a1)
{
  unint64_t v2 = sub_25B35F78C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B35EB18()
{
  if (*v0) {
    return 7105633;
  }
  else {
    return 0x697463656C6C6F63;
  }
}

uint64_t sub_25B35EB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B35FF4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B35EB78(uint64_t a1)
{
  unint64_t v2 = sub_25B35F738();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B35EBB4(uint64_t a1)
{
  unint64_t v2 = sub_25B35F738();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B35EBF0()
{
  return 12383;
}

uint64_t sub_25B35EBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B3801A0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B35EC7C(uint64_t a1)
{
  unint64_t v2 = sub_25B35F7E0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B35ECB8(uint64_t a1)
{
  unint64_t v2 = sub_25B35F7E0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorRecordDestination.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D60);
  uint64_t v18 = *(void *)(v3 - 8);
  uint64_t v19 = v3;
  MEMORY[0x270FA5388](v3);
  unint64_t v17 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D68);
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v21 = v5;
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D58);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B35F738();
  sub_25B3802C0();
  if (v12)
  {
    char v23 = 0;
    sub_25B35F7E0();
    sub_25B3800E0();
    uint64_t v22 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
    sub_25B35F834(&qword_26A4EBDC0, &qword_26A4EB370);
    uint64_t v13 = v21;
    sub_25B380160();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v13);
  }
  else
  {
    char v24 = 1;
    sub_25B35F78C();
    uint64_t v15 = v17;
    sub_25B3800E0();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t ReplicatorRecordDestination.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_25B380250();
  sub_25B380260();
  if (v1) {
    sub_25B33EEB8((uint64_t)v3, v1);
  }
  return sub_25B380290();
}

uint64_t ReplicatorRecordDestination.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v25 = a2;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB4C8);
  uint64_t v26 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB4D0);
  uint64_t v24 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EB4C0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_25B35F738();
  uint64_t v13 = v28;
  sub_25B3802B0();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v14 = v26;
  uint64_t v28 = v9;
  uint64_t v15 = sub_25B3800D0();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = sub_25B37FEC0();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC508);
    void *v19 = &type metadata for ReplicatorRecordDestination;
    sub_25B380020();
    sub_25B37FEB0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x263F8DCB0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
LABEL_7:
    uint64_t v20 = (uint64_t)v27;
    return __swift_destroy_boxed_opaque_existential_1(v20);
  }
  if (*(unsigned char *)(v15 + 32))
  {
    char v31 = 1;
    sub_25B35F78C();
    sub_25B380010();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
    uint64_t v16 = 0;
  }
  else
  {
    char v30 = 0;
    sub_25B35F7E0();
    sub_25B380010();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EBB30);
    sub_25B35F834(&qword_26A4EBDD0, (unint64_t *)&unk_26B340D00);
    sub_25B3800B0();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
    uint64_t v16 = v29;
  }
  uint64_t v20 = (uint64_t)v27;
  *unint64_t v25 = v16;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t sub_25B35F550@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ReplicatorRecordDestination.init(from:)(a1, a2);
}

uint64_t sub_25B35F568(void *a1)
{
  return ReplicatorRecordDestination.encode(to:)(a1);
}

uint64_t sub_25B35F580(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = swift_bridgeObjectRetain();
      char v4 = sub_25B35E824(v3, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
    return 0;
  }
  if (v2) {
    return 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_25B35F604()
{
  uint64_t v1 = *v0;
  sub_25B380250();
  sub_25B380260();
  if (v1) {
    sub_25B33EEB8((uint64_t)v3, v1);
  }
  return sub_25B380290();
}

uint64_t sub_25B35F668(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return sub_25B380260();
  }
  sub_25B380260();
  return sub_25B33EEB8(a1, v3);
}

uint64_t sub_25B35F6D8()
{
  uint64_t v1 = *v0;
  sub_25B380250();
  sub_25B380260();
  if (v1) {
    sub_25B33EEB8((uint64_t)v3, v1);
  }
  return sub_25B380290();
}

unint64_t sub_25B35F738()
{
  unint64_t result = qword_26B340FD8;
  if (!qword_26B340FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FD8);
  }
  return result;
}

unint64_t sub_25B35F78C()
{
  unint64_t result = qword_26B340FF0;
  if (!qword_26B340FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FF0);
  }
  return result;
}

unint64_t sub_25B35F7E0()
{
  unint64_t result = qword_26A4EC958;
  if (!qword_26A4EC958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC958);
  }
  return result;
}

uint64_t sub_25B35F834(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4EBB30);
    sub_25B31B448(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B35F8B8()
{
  unint64_t result = qword_26A4EC960;
  if (!qword_26A4EC960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC960);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ReplicatorRecordDestination(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ReplicatorRecordDestination(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for ReplicatorRecordDestination(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecordDestination(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordDestination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_25B35FA5C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_25B35FA74(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination()
{
  return &type metadata for ReplicatorRecordDestination;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorRecordDestination.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B35FB70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.CodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorRecordDestination.CollectionCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25B35FC44);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.CollectionCodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.CollectionCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.AllCodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.AllCodingKeys;
}

unint64_t sub_25B35FC90()
{
  unint64_t result = qword_26A4EC968;
  if (!qword_26A4EC968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC968);
  }
  return result;
}

unint64_t sub_25B35FCE8()
{
  unint64_t result = qword_26A4EC970;
  if (!qword_26A4EC970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC970);
  }
  return result;
}

unint64_t sub_25B35FD40()
{
  unint64_t result = qword_26B341010;
  if (!qword_26B341010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341010);
  }
  return result;
}

unint64_t sub_25B35FD98()
{
  unint64_t result = qword_26B341008;
  if (!qword_26B341008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341008);
  }
  return result;
}

unint64_t sub_25B35FDF0()
{
  unint64_t result = qword_26B341000;
  if (!qword_26B341000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B341000);
  }
  return result;
}

unint64_t sub_25B35FE48()
{
  unint64_t result = qword_26B340FF8;
  if (!qword_26B340FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FF8);
  }
  return result;
}

unint64_t sub_25B35FEA0()
{
  unint64_t result = qword_26B340FE8;
  if (!qword_26B340FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FE8);
  }
  return result;
}

unint64_t sub_25B35FEF8()
{
  unint64_t result = qword_26B340FE0;
  if (!qword_26B340FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B340FE0);
  }
  return result;
}

uint64_t sub_25B35FF4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7105633 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t ReplicatorMessageType.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessageType.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessageType.identifier.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessageType.clientIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessageType.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ReplicatorMessageType.clientIdentifier.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorMessageType.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 ReplicatorMessageType.protocolVersion.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*ReplicatorMessageType.protocolVersion.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorMessageType.init(identifier:clientIdentifier:protocolVersion:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, __n128 *a6@<X8>)
{
  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  __n128 result = *a5;
  a6[2] = *a5;
  return result;
}

uint64_t ReplicatorMessageType.hash(into:)()
{
  return sub_25B380280();
}

uint64_t sub_25B360238()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C6F636F746F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_25B3602A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B360FD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B3602D0(uint64_t a1)
{
  unint64_t v2 = sub_25B360B48();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B36030C(uint64_t a1)
{
  unint64_t v2 = sub_25B360B48();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorMessageType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC978);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  uint64_t v16 = v1[3];
  uint64_t v17 = v7;
  uint64_t v8 = v1[4];
  uint64_t v14 = v1[5];
  uint64_t v15 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B360B48();
  sub_25B3802C0();
  LOBYTE(v19) = 0;
  uint64_t v9 = v18;
  sub_25B380140();
  if (!v9)
  {
    uint64_t v11 = v14;
    uint64_t v10 = v15;
    LOBYTE(v19) = 1;
    sub_25B380140();
    uint64_t v19 = v10;
    uint64_t v20 = v11;
    char v21 = 2;
    sub_25B2C8780();
    sub_25B380160();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicatorMessageType.hashValue.getter()
{
  return sub_25B380290();
}

uint64_t ReplicatorMessageType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC988);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B360B48();
  sub_25B3802B0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v22) = 0;
  uint64_t v9 = sub_25B380090();
  uint64_t v11 = v10;
  uint64_t v21 = v9;
  LOBYTE(v22) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_25B380090();
  uint64_t v14 = v13;
  uint64_t v19 = v12;
  char v23 = 2;
  sub_25B2C8684();
  swift_bridgeObjectRetain();
  uint64_t v20 = v14;
  sub_25B3800B0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v15 = v22;
  uint64_t v16 = v20;
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 32) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B36085C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorMessageType.init(from:)(a1, a2);
}

uint64_t sub_25B360874(void *a1)
{
  return ReplicatorMessageType.encode(to:)(a1);
}

uint64_t sub_25B360890()
{
  return sub_25B380290();
}

uint64_t sub_25B360944()
{
  return sub_25B380280();
}

uint64_t sub_25B3609DC()
{
  return sub_25B380290();
}

BOOL _s18ReplicatorServices0A11MessageTypeV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_25B3801A0(), BOOL result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v3 == v7) {
      return v4 == v8 && v5 == v9;
    }
    char v12 = sub_25B3801A0();
    BOOL result = 0;
    if (v12) {
      return v4 == v8 && v5 == v9;
    }
  }
  return result;
}

unint64_t sub_25B360B48()
{
  unint64_t result = qword_26A4EC980;
  if (!qword_26A4EC980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC980);
  }
  return result;
}

unint64_t sub_25B360BA0()
{
  unint64_t result = qword_26A4EC990;
  if (!qword_26A4EC990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC990);
  }
  return result;
}

uint64_t initializeWithCopy for ReplicatorZone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ReplicatorZone(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReplicatorZone(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorZone(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorZone(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessageType()
{
  return &type metadata for ReplicatorMessageType;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorMessageType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B360E90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessageType.CodingKeys()
{
  return &type metadata for ReplicatorMessageType.CodingKeys;
}

unint64_t sub_25B360ECC()
{
  unint64_t result = qword_26A4EC998;
  if (!qword_26A4EC998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC998);
  }
  return result;
}

unint64_t sub_25B360F24()
{
  unint64_t result = qword_26A4EC9A0;
  if (!qword_26A4EC9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC9A0);
  }
  return result;
}

unint64_t sub_25B360F7C()
{
  unint64_t result = qword_26A4EC9A8;
  if (!qword_26A4EC9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC9A8);
  }
  return result;
}

uint64_t sub_25B360FD0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025B38BBC0 || (sub_25B3801A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B3801A0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t dispatch thunk of ReplicatorRecordVersionStoring.recordVersions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ReplicatorServices::ZonePublicationMethod_optional __swiftcall ZonePublicationMethod.init(rawValue:)(Swift::Int64 rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (ReplicatorServices::ZonePublicationMethod_optional)rawValue;
}

uint64_t ZonePublicationMethod.rawValue.getter()
{
  return *v0;
}

unint64_t sub_25B36118C()
{
  unint64_t result = qword_26A4EC9B0;
  if (!qword_26A4EC9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4EC9B0);
  }
  return result;
}

uint64_t sub_25B3611E0()
{
  return sub_25B37FAC0();
}

uint64_t sub_25B361240()
{
  return sub_25B37FAA0();
}

unsigned char *storeEnumTagSinglePayload for ZonePublicationMethod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B36135CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZonePublicationMethod()
{
  return &type metadata for ZonePublicationMethod;
}

unint64_t sub_25B361394()
{
  unint64_t result = qword_26B3415B0;
  if (!qword_26B3415B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B3415B0);
  }
  return result;
}

uint64_t ReplicatorRecord.init(id:version:values:expiration:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a5;
  char v12 = (int *)type metadata accessor for ReplicatorRecord(0);
  uint64_t v13 = a6 + v12[7];
  uint64_t v14 = sub_25B37F5D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_25B3666D8(a1, a6, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v15 = a6 + v12[5];
  uint64_t v16 = sub_25B37F640();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a2, v16);
  *(void *)(a6 + v12[6]) = a3;
  uint64_t result = sub_25B31964C(a4, v13, &qword_26B340F80);
  *(void *)(a6 + v12[8]) = v11;
  return result;
}

uint64_t type metadata accessor for ReplicatorRecord(uint64_t a1)
{
  return sub_25B31FF48(a1, qword_26B3410B0);
}

uint64_t type metadata accessor for ReplicatorRecord.ID(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B341540);
}

uint64_t ReplicatorRecord.size.getter()
{
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
  uint64_t v1 = MEMORY[0x270FA5388](v37);
  uint64_t v36 = (uint64_t *)((char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (uint64_t *)((char *)&v33 - v4);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (uint64_t *)((char *)&v33 - v6);
  uint64_t v8 = *(void *)(v0 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 24));
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v34 = v8 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v35 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v8;
  swift_bridgeObjectRetain_n();
  int64_t v13 = 0;
  uint64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
  while (2)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v13 << 6);
LABEL_23:
    uint64_t v20 = *(void *)(v38 + 56);
    uint64_t v21 = *(void *)(*(void *)(v38 + 48) + 8 * v16);
    uint64_t v22 = v20 + *(void *)(*(void *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72) * v16;
    uint64_t v23 = v37;
    sub_25B366670(v22, (uint64_t)v7 + *(int *)(v37 + 48), type metadata accessor for ReplicatorRecord.Value);
    *uint64_t v7 = v21;
    sub_25B361938((uint64_t)v7, (uint64_t)v5);
    uint64_t v24 = *(int *)(v23 + 48);
    unint64_t v25 = (void *)((char *)v36 + v24);
    void *v36 = *v5;
    sub_25B366670((uint64_t)v5 + v24, (uint64_t)v25, type metadata accessor for ReplicatorRecord.Value);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    sub_25B2E2B14(*v25, v26);
    sub_25B366740((uint64_t)v25, type metadata accessor for ReplicatorRecord.Value);
    switch(v26 >> 62)
    {
      case 1uLL:
        sub_25B2CA2D8(v27, v26);
        LODWORD(v28) = HIDWORD(v27) - v27;
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_37;
        }
        uint64_t v28 = (int)v28;
LABEL_31:
        BOOL v31 = __OFADD__(v14, v28);
        v14 += v28;
        if (v31)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        sub_25B2E344C((uint64_t)v5, &qword_26B340D98);
        if (v12) {
          continue;
        }
LABEL_5:
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_36;
        }
        if (v17 < v35)
        {
          unint64_t v18 = *(void *)(v34 + 8 * v17);
          ++v13;
          if (!v18)
          {
            int64_t v13 = v17 + 1;
            if (v17 + 1 >= v35) {
              goto LABEL_34;
            }
            unint64_t v18 = *(void *)(v34 + 8 * v13);
            if (!v18)
            {
              int64_t v13 = v17 + 2;
              if (v17 + 2 >= v35) {
                goto LABEL_34;
              }
              unint64_t v18 = *(void *)(v34 + 8 * v13);
              if (!v18)
              {
                int64_t v13 = v17 + 3;
                if (v17 + 3 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v18 = *(void *)(v34 + 8 * v13);
                if (!v18)
                {
                  int64_t v13 = v17 + 4;
                  if (v17 + 4 >= v35) {
                    goto LABEL_34;
                  }
                  unint64_t v18 = *(void *)(v34 + 8 * v13);
                  if (!v18)
                  {
                    int64_t v19 = v17 + 5;
                    if (v19 >= v35) {
                      goto LABEL_34;
                    }
                    unint64_t v18 = *(void *)(v34 + 8 * v19);
                    if (v18)
                    {
                      int64_t v13 = v19;
                      goto LABEL_22;
                    }
                    while (1)
                    {
                      int64_t v13 = v19 + 1;
                      if (__OFADD__(v19, 1)) {
                        break;
                      }
                      if (v13 >= v35) {
                        goto LABEL_34;
                      }
                      unint64_t v18 = *(void *)(v34 + 8 * v13);
                      ++v19;
                      if (v18) {
                        goto LABEL_22;
                      }
                    }
LABEL_39:
                    __break(1u);
                    JUMPOUT(0x25B361908);
                  }
                }
              }
            }
          }
LABEL_22:
          unint64_t v12 = (v18 - 1) & v18;
          unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
          goto LABEL_23;
        }
LABEL_34:
        swift_release();
        swift_bridgeObjectRelease();
        return v14;
      case 2uLL:
        uint64_t v30 = *(void *)(v27 + 16);
        uint64_t v29 = *(void *)(v27 + 24);
        sub_25B2CA2D8(v27, v26);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_31;
        }
        goto LABEL_38;
      case 3uLL:
        sub_25B2CA2D8(v27, v26);
        uint64_t v28 = 0;
        goto LABEL_31;
      default:
        sub_25B2CA2D8(v27, v26);
        uint64_t v28 = BYTE6(v26);
        goto LABEL_31;
    }
  }
}

uint64_t type metadata accessor for ReplicatorRecord.Value(uint64_t a1)
{
  return sub_25B31FF48(a1, (uint64_t *)&unk_26B340D18);
}

uint64_t sub_25B361938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ReplicatorRecord.Value.init(data:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (uint64_t)a4 + *(int *)(type metadata accessor for ReplicatorRecord.Value(0) + 20);
  uint64_t v9 = sub_25B37F500();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a4 = a1;
  a4[1] = a2;
  return sub_25B31964C(a3, v8, &qword_26B340CE0);
}

uint64_t ReplicatorRecord.init(id:version:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v28 = a2;
  uint64_t v32 = a4;
  uint64_t v6 = type metadata accessor for ReplicatorRecord(0);
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B340F80);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v27 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25B37F640();
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ReplicatorRecord.ID;
  sub_25B366670(a1, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  uint64_t v19 = sub_25B37F5D0();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v21 = (uint64_t)v27;
  v20(v27, 1, 1, v19);
  uint64_t v22 = (uint64_t)&v9[v7[9]];
  v20((char *)v22, 1, 1, v19);
  sub_25B3666D8((uint64_t)v18, (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID);
  uint64_t v23 = v26;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v9[v7[7]], v15, v26);
  *(void *)&v9[v7[8]] = v31;
  sub_25B31964C(v21, v22, &qword_26B340F80);
  *(void *)&v9[v7[10]] = 0;
  sub_25B3666D8((uint64_t)v9, v32, type metadata accessor for ReplicatorRecord);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v23);
  return sub_25B366740(v30, v29);
}

uint64_t ReplicatorRecord.ID.init(id:zone:clientID:ownership:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16 = sub_25B37F640();
  v24[0] = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  uint64_t v19 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_25B366670(a7, (uint64_t)a8 + *(int *)(v19 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
  swift_bridgeObjectRetain();
  if (sub_25B37FA20() >= 51)
  {
    v24[2] = a1;
    v24[3] = a2;
    sub_25B37F6C0();
    a1 = sub_25B37F5F0();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v24[0] + 8))(v18, v16);
    swift_bridgeObjectRelease();
    a2 = v21;
  }
  uint64_t result = sub_25B366740(a7, type metadata accessor for ReplicatorRecord.ID.Ownership);
  uint64_t v23 = (uint64_t *)((char *)a8 + *(int *)(v19 + 32));
  *uint64_t v23 = a1;
  v23[1] = a2;
  return result;
}

uint64_t ReplicatorRecord.Options.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ReplicatorRecord.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ReplicatorRecord.Options.deleteOnOriginatorUnavailability.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t ReplicatorRecord.ID.Ownership.isLocallyOwned.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B37F640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341530);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v21 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))((char *)&v21 - v14, 1, 1, v2);
  uint64_t v16 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_25B366670((uint64_t)v15, (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
  sub_25B366670(v1, v16, type metadata accessor for ReplicatorRecord.ID.Ownership);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v17((uint64_t)v9, 1, v2) != 1)
  {
    sub_25B366670((uint64_t)v9, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if (v17(v16, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v16, v2);
      char v18 = sub_25B37F610();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
      v19(v5, v2);
      v19(v13, v2);
      sub_25B366740((uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v2);
    goto LABEL_6;
  }
  if (v17(v16, 1, v2) != 1)
  {
LABEL_6:
    sub_25B2E344C((uint64_t)v9, &qword_26B341530);
    char v18 = 0;
    goto LABEL_8;
  }
  sub_25B366740((uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
  char v18 = 1;
LABEL_8:
  sub_25B366740((uint64_t)v15, type metadata accessor for ReplicatorRecord.ID.Ownership);
  return v18 & 1;
}

uint64_t ReplicatorRecord.ID.Ownership.hash(into:)()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B366670(v0, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
    return sub_25B380260();
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_25B380260();
  sub_25B366904(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F950();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_25B3624A8()
{
  if (*v0) {
    return 0x65746F6D6572;
  }
  else {
    return 0x6C61636F6CLL;
  }
}

uint64_t sub_25B3624DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B36A6B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B362504(uint64_t a1)
{
  unint64_t v2 = sub_25B36685C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B362540(uint64_t a1)
{
  unint64_t v2 = sub_25B36685C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B36257C(uint64_t a1)
{
  unint64_t v2 = sub_25B36694C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B3625B8(uint64_t a1)
{
  unint64_t v2 = sub_25B36694C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B3625F4(uint64_t a1)
{
  unint64_t v2 = sub_25B3668B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B362630(uint64_t a1)
{
  unint64_t v2 = sub_25B3668B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReplicatorRecord.ID.Ownership.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341338);
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v23 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_25B37F640();
  uint64_t v26 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v28 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341330);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341328);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B36685C();
  uint64_t v16 = v26;
  sub_25B3802C0();
  sub_25B366670(v27, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v4) == 1)
  {
    char v29 = 0;
    sub_25B36694C();
    sub_25B3800E0();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v28, v11, v4);
    char v30 = 1;
    sub_25B3668B0();
    char v18 = v23;
    sub_25B3800E0();
    sub_25B366904(&qword_26A4EB370, MEMORY[0x263F07508]);
    uint64_t v19 = v25;
    sub_25B380160();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ReplicatorRecord.ID.Ownership.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B37F640();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B380250();
  sub_25B366670(v1, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_25B380260();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_25B380260();
    sub_25B366904(&qword_26B340FA0, MEMORY[0x263F07508]);
    sub_25B37F950();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_25B380290();
}

uint64_t ReplicatorRecord.ID.Ownership.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341288);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v41 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341280);
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B341278);
  uint64_t v39 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v31 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B36685C();
  uint64_t v17 = v42;
  sub_25B3802B0();
  if (!v17)
  {
    uint64_t v32 = v14;
    uint64_t v33 = v16;
    char v18 = v40;
    uint64_t v19 = v41;
    uint64_t v42 = a1;
    uint64_t v20 = sub_25B3800D0();
    if (*(void *)(v20 + 16) == 1)
    {
      a1 = v42;
      if (*(unsigned char *)(v20 + 32))
      {
        uint64_t v40 = (char *)v20;
        char v44 = 1;
        sub_25B3668B0();
        uint64_t v21 = v19;
        sub_25B380010();
        uint64_t v26 = sub_25B37F640();
        sub_25B366904((unint64_t *)&unk_26B340D00, MEMORY[0x263F07508]);
        uint64_t v27 = (uint64_t)v32;
        uint64_t v28 = v36;
        sub_25B3800B0();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v28);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v8);
        a1 = v42;
        uint64_t v29 = (uint64_t)v33;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v27, 0, 1, v26);
        sub_25B3666D8(v27, v29, type metadata accessor for ReplicatorRecord.ID.Ownership);
      }
      else
      {
        char v43 = 0;
        sub_25B36694C();
        sub_25B380010();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v35);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v8);
        uint64_t v30 = sub_25B37F640();
        uint64_t v29 = (uint64_t)v33;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v33, 1, 1, v30);
      }
      sub_25B3666D8(v29, v38, type metadata accessor for ReplicatorRecord.ID.Ownership);
    }
    else
    {
      uint64_t v22 = sub_25B37FEC0();
      swift_allocError();
      uint64_t v24 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4EC508);
      *uint64_t v24 = v11;
      sub_25B380020();
      sub_25B37FEB0();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v22);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v8);
      a1 = v42;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25B3632D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorRecord.ID.Ownership.init(from:)(a1, a2);
}

uint64_t sub_25B3632EC(void *a1)
{
  return ReplicatorRecord.ID.Ownership.encode(to:)(a1);
}

uint64_t sub_25B363308()
{
  uint64_t v1 = sub_25B37F640();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B366670(v0, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
    return sub_25B380260();
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  sub_25B380260();
  sub_25B366904(&qword_26B340FA0, MEMORY[0x263F07508]);
  sub_25B37F950();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}