uint64_t WrdCharacterProperties::setListCharacterPictureBullet(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x40000;
  *(_WORD *)(result + 314) = a2;
  return result;
}

void sub_238BCC6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCC784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCCA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCCBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::getPositionHorizontalRelative(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x390u);
}

uint64_t EshContentProperties::getPositionVertical(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x391u);
}

uint64_t EshContentProperties::getPositionVerticalRelative(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x392u);
}

uint64_t WrdCharacterProperties::setHidden(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20uLL;
  *(_DWORD *)(result + 192) = a2;
  return result;
}

void XlPalette::XlPalette(XlPalette *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE04A8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 26) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPalette *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  __int16 v5 = v4;
  if (v4)
  {
    size_t v6 = 4 * v4;
    unint64_t v7 = 0;
    *((void *)this + 8) = operator new[](v6);
    do
    {
      int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      v9 = (int *)*((void *)this + 8);
      v9[v7 / 4] = v8;
      v7 += 4;
    }
    while (v6 != v7);
  }
  else
  {
    v9 = (int *)*((void *)this + 8);
  }
  XlPalette::takeColors((uint64_t)a2, v9, v5);
  *((void *)this + 8) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlPalette::takeColors(uint64_t this, int *a2, __int16 a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 26))
  {
    this = *(void *)(this + 16);
    if (this) {
      this = MEMORY[0x23EC99790](this, 0x1000C8052888210);
    }
  }
  *(void *)(v5 + 16) = a2;
  *(_WORD *)(v5 + 24) = a3;
  *(unsigned char *)(v5 + 26) = 1;
  return this;
}

double XlColorTable::setColors(XlColorTable *this, int *a2, __int16 a3)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    MEMORY[0x23EC99790](v6, 0x1000C8052888210);
  }
  *((void *)this + 1) = a2;
  *((_WORD *)this + 12) = a3;
  *((unsigned char *)this + 40) = 0;
  if (!a2)
  {
    return XlColorTable::setDefault(this);
  }
  return result;
}

void XlPalette::~XlPalette(XlPalette *this)
{
  XlPalette::~XlPalette(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE04A8;
  if (*((unsigned char *)this + 26))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x23EC99790](v2, 0x1000C8052888210);
    }
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((unsigned char *)this + 26) = 1;
}

void XlPaletteX::XlPaletteX(XlPaletteX *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE04E8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 26) = 1;
}

uint64_t XlColorTable::setXColors(XlColorTable *this, int *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8052888210);
  }
  *((void *)this + 2) = a2;
  *((_WORD *)this + 13) = a3;
  return result;
}

void XlPaletteX::~XlPaletteX(XlPaletteX *this)
{
  XlPaletteX::~XlPaletteX(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE04E8;
  if (*((unsigned char *)this + 26))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x23EC99790](v2, 0x1000C8052888210);
    }
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((unsigned char *)this + 26) = 1;
}

void XlPhoneticInfo::XlPhoneticInfo(XlPhoneticInfo *this)
{
  *(void *)this = &unk_26EBE05E8;
  OcText::OcText((OcText *)((char *)this + 24));
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 4) = -1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t XlString::takeExtendedText(XlString *this, XlPhoneticInfo *a2)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = a2;
  return result;
}

void XlPhoneticInfo::~XlPhoneticInfo(XlPhoneticInfo *this)
{
  XlPhoneticInfo::~XlPhoneticInfo(this);
  JUMPOUT(0x23EC997B0);
}

{
  OcText *v2;
  void *v3;

  *(void *)this = &unk_26EBE05E8;
  uint64_t v2 = (OcText *)((char *)this + 24);
  OcText::clearBuffer((OcText *)((char *)this + 24));
  XlPhoneticInfo::clearRuns(this);
  *((_WORD *)this + 4) = -1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  OcText::~OcText(v2);
}

void *XlPhoneticInfo::clearRuns(void *this)
{
  v1 = this;
  uint64_t v2 = this[9];
  uint64_t v3 = this[10];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[9];
        uint64_t v3 = v1[10];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[10] = v2;
  return this;
}

void sub_238BCD58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCD688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCD928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v13 = v11;

  _Unwind_Resume(a1);
}

void PptAnimEffectBehaviorAtom::PptAnimEffectBehaviorAtom(PptAnimEffectBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8540;
  *(void *)(v2 + 32) = &unk_26EBE85E8;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimEffectBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimEffectBehaviorAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimCmdBehaviorAtom::PptAnimCmdBehaviorAtom(PptAnimCmdBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8258;
  *(void *)(v2 + 32) = &unk_26EBE8300;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimCmdBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimCmdBehaviorAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

float SsrwOOStgStream::readFloat32(SsrwOOStgStream *this)
{
  float v5 = 0.0;
  int v1 = readFloat32(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t readFloat32(uint64_t a1, float *a2)
{
  unsigned int v6 = 4;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)v5, &v6);
    *a2 = CsLeReadFloat32((uint64_t)v5);
  }
  return v2;
}

float CsLeReadFloat32(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t PptAnimVariantAtom::setReal(uint64_t this, float a2)
{
  *(_DWORD *)(this + 48) = 2;
  *(float *)(this + 60) = a2;
  return this;
}

void PptAnimModifierAtom::PptAnimModifierAtom(PptAnimModifierAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0F68;
  *(void *)(v2 + 32) = &unk_26EBF1010;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptAnimModifierAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimModifierAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238BCE358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCE8F0(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void PptAnimEffectBehaviorAtom::~PptAnimEffectBehaviorAtom(PptAnimEffectBehaviorAtom *this)
{
}

void PptAnimCmdBehaviorAtom::~PptAnimCmdBehaviorAtom(PptAnimCmdBehaviorAtom *this)
{
}

void PptAnimModifierAtom::~PptAnimModifierAtom(PptAnimModifierAtom *this)
{
}

void XlStandardWidth::XlStandardWidth(XlStandardWidth *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1500;
  *(_WORD *)(v2 + 16) = 0;
}

void XlSort::XlSort(XlSort *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1440;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSort *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 17) = vmovn_s16(v5).u32[0];
  *((unsigned char *)a2 + 21) = (v6 >> 5) & 0x1F;
  *((unsigned char *)a2 + 22) = (v6 & 0x400) != 0;
  *((unsigned char *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v7 = *((unsigned __int8 *)a2 + 23);
  if (*((unsigned char *)a2 + 23))
  {
    char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v9);
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  unsigned int v10 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    char v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((void *)this + 4) = v12;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v11, v4, v12);
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  unsigned int v13 = *((unsigned __int8 *)a2 + 25);
  if (*((unsigned char *)a2 + 25))
  {
    char v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((void *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, v4, v15);
    XlAddMenu::setStatus(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BCED7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlAddMenu::setMenuItemBefore(XlAddMenu *this, XlString *a2)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = a2;
  return result;
}

void XlSort::~XlSort(XlSort *this)
{
  *(void *)this = &unk_26EBE1440;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  XlSort::~XlSort(this);
  JUMPOUT(0x23EC997B0);
}

void XlChartBinaryReader::scanChartsheet(XlParserVisitor **this)
{
  XlChartBinaryReader::reset((XlChartBinaryReader *)this);
  uint64_t v2 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  *((_DWORD *)this + 393) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  XlBinaryReader::scanWorksheet((XlBinaryReader *)this);
  uint64_t LocationToBeginSearchForMainChart = XlChartBinaryReader::getLocationToBeginSearchForMainChart((XlChartBinaryReader *)this);
  uint64_t v4 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 16))(v4, LocationToBeginSearchForMainChart, 0);
  XlHeader::XlHeader(&v16);
  while (v16.var1 != 10)
  {
    if (v16.var1 == 4098)
    {
      XlChartChart::XlChartChart((XlChartChart *)v11, &v16);
      XlParserVisitor::skipHeader(this[167]);
      (*(void (**)(XlParserVisitor *, unsigned char *))(*(void *)this[167] + 1936))(this[167], v11);
      float v5 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v14);
      float v6 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v15);
      float v7 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v14);
      float v8 = CsMath::convertFixedToFloat((CsMath *)v12);
      float v9 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v15);
      float v10 = CsMath::convertFixedToFloat((CsMath *)v13);
      *((float *)this + 389) = v5;
      *((float *)this + 390) = v6;
      *((float *)this + 391) = v7 + v8;
      *((float *)this + 392) = v9 + v10;
      XlChartChart::~XlChartChart((XlChartChart *)v11);
      return;
    }
    XlParserVisitor::getNextUniqueHeader(this[167], &v16);
  }
}

void sub_238BCF0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XlChartChart::~XlChartChart((XlChartChart *)va);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::getStream(XlBinaryReader *this)
{
  return *((void *)this + 164);
}

void XlPrintSize::XlPrintSize(XlPrintSize *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0758;
  *(_WORD *)(v2 + 16) = 0;
}

void XlPrintSize::~XlPrintSize(XlPrintSize *this)
{
}

uint64_t XlChartBinaryReader::getLocationToBeginSearchForMainChart(XlChartBinaryReader *this)
{
  if (((*((void *)this + 170) - *((void *)this + 169)) & 0x3FFFFFFFCLL) == 0) {
    return *((unsigned int *)this + 393);
  }
  uint64_t v2 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v2 + 16))(v2, *(unsigned int *)(*((void *)this + 170) - 4), 0);
  XlHeader::XlHeader(&v5);
  while (v5.var1 != 10)
    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v5);
  uint64_t v3 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  return (*(unsigned int (**)(uint64_t))(*(void *)v3 + 40))(v3) + 4;
}

void XlChartChart::XlChartChart(XlChartChart *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDB968;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartChart *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::beginRead(XlParserVisitor *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = result;
  return result;
}

float CsMath::convertFixedToFloat(CsMath *this)
{
  return (float)this * 0.000015259;
}

void sub_238BCF538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BCF6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BCF768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238BCF83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCF9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCFA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCFB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BCFC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::getChartCount(XlChartBinaryReader *this)
{
  return (unsigned __int16)((*((_DWORD *)this + 340) - *((_DWORD *)this + 338)) >> 2);
}

uint64_t XlChartBinaryReader::setChart(XlChartBinaryReader *this, unsigned int a2)
{
  if (a2 == -1)
  {
    uint64_t LocationToBeginSearchForMainChart = XlChartBinaryReader::getLocationToBeginSearchForMainChart(this);
  }
  else
  {
    uint64_t v3 = *((void *)this + 169);
    unint64_t v4 = (unint64_t)(*((void *)this + 170) - v3) >> 2;
    if ((int)v4 <= (int)a2)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    if (v4 <= a2) {
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t LocationToBeginSearchForMainChart = *(unsigned int *)(v3 + 4 * a2);
  }
  XlChartBinaryReader::reset(this);
  uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 16))(v6, LocationToBeginSearchForMainChart, 0);
  XlChartBinaryReader::scanChartProperties(this);
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 55);
  if (v7)
  {
    uint64_t v8 = v7;
    XlSubstreamProperties::operator=(v7, (uint64_t)this + 1136);
    XlSubstreamProperties::operator=((uint64_t)this + 1136, (uint64_t)this + 1376);
    XlSubstreamProperties::operator=((uint64_t)this + 1376, v8);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 16))(v9, LocationToBeginSearchForMainChart, 0);
  return XlChartBinaryReader::scanChartObjects(this);
}

void sub_238BCFE60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::scanChartProperties(XlChartBinaryReader *this)
{
  XlHeader::XlHeader(&v10);
  XlSubstreamProperties::setDefault((XlChartBinaryReader *)((char *)this + 1376));
  uint64_t result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
  if (v10.var1 == 2057)
  {
    uint64_t v3 = (XlBof *)operator new(0x28uLL);
    XlBof::XlBof(v3, &v10);
    (*(void (**)(void, XlBof *))(**((void **)this + 167) + 192))(*((void *)this + 167), v3);
    int v4 = *((_DWORD *)v3 + 7);
    *((_DWORD *)this + 348) = v4;
    if (v4 == 32 || v4 == 0x8000)
    {
      (*(void (**)(XlBof *))(*(void *)v3 + 8))(v3);
      uint64_t result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v10);
      for (signed __int16 i = v10.var1; v10.var1 != 10; signed __int16 i = v10.var1)
      {
        if (i > 131)
        {
          if (i > 235)
          {
            if (i == 236)
            {
              if ((*((_DWORD *)this + 384) & 0x80000000) != 0) {
                *((_DWORD *)this + 384) = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              }
              goto LABEL_27;
            }
            if (i == 512)
            {
              uint64_t v6 = (int *)operator new(0x20uLL);
              XlDimensions::XlDimensions((XlDimensions *)v6, &v10);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(void, int *))(**((void **)this + 167) + 248))(*((void *)this + 167), v6);
              XlCellTableInfo::setDimensions((uint64_t)this + 1512, v6[4], v6[5], *((unsigned __int16 *)v6 + 12), *((unsigned __int16 *)v6 + 13));
              goto LABEL_26;
            }
          }
          else if (i == 132)
          {
            XlVCenter::XlVCenter((XlVCenter *)v8, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 1352))(*((void *)this + 167), v8);
            *((unsigned char *)this + 1457) = v9;
          }
          else if (i == 161)
          {
            uint64_t v6 = (int *)operator new(0x40uLL);
            XlSetup::XlSetup((XlSetup *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, int *))(**((void **)this + 167) + 1016))(*((void *)this + 167), v6);
            *(void *)((char *)this + 1458) = *((void *)v6 + 2);
            *((_WORD *)this + 733) = *((_WORD *)v6 + 12);
            *((unsigned char *)this + 1468) = *((unsigned char *)v6 + 26);
            *((_DWORD *)this + 368) = v6[7];
            *((_DWORD *)this + 369) = v6[8];
            *((_WORD *)this + 740) = *((_WORD *)v6 + 18);
            *(_DWORD *)((char *)this + 1482) = *(int *)((char *)v6 + 38);
            *((_OWORD *)this + 93) = *((_OWORD *)v6 + 3);
            *((_WORD *)this + 743) = *((_WORD *)v6 + 21);
LABEL_26:
            (*(void (**)(int *))(*(void *)v6 + 8))(v6);
          }
        }
        else
        {
          if (i > 50)
          {
            if (i != 51)
            {
              if (i == 131)
              {
                XlHCenter::XlHCenter((XlHCenter *)v8, &v10);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 720))(*((void *)this + 167), v8);
                *((unsigned char *)this + 1456) = v9;
              }
              goto LABEL_27;
            }
            uint64_t v6 = (int *)operator new(0x18uLL);
            XlPrintSize::XlPrintSize((XlPrintSize *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, int *))(**((void **)this + 167) + 896))(*((void *)this + 167), v6);
            *((_WORD *)this + 752) = *((_WORD *)v6 + 8);
            goto LABEL_26;
          }
          if (i == 20)
          {
            XlHdr::XlHdr((XlHdr *)v8, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned char *))(**((void **)this + 167) + 728))(*((void *)this + 167), v8);
            if (v9) {
              XlPageProperties::setHeaderString((XlChartBinaryReader *)((char *)this + 1400), (OcText *)(v9 + 8));
            }
            XlHdr::~XlHdr((XlHdr *)v8);
            goto LABEL_27;
          }
          if (i == 21)
          {
            uint64_t v6 = (int *)operator new(0x18uLL);
            XlFooter::XlFooter((XlFooter *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, int *))(**((void **)this + 167) + 688))(*((void *)this + 167), v6);
            uint64_t v7 = *((void *)v6 + 2);
            if (v7) {
              XlPageProperties::setFooterString((XlChartBinaryReader *)((char *)this + 1400), (OcText *)(v7 + 8));
            }
            goto LABEL_26;
          }
        }
LABEL_27:
        uint64_t result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v10);
      }
    }
    else
    {
      return (*(uint64_t (**)(XlBof *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_238BD0380(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlSubstreamProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    XlSheetInfo::operator=(a1 + 8, a2 + 8);
    XlPageProperties::operator=(a1 + 24, a2 + 24);
    XlCellTableInfo::operator=(a1 + 136, a2 + 136);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  return a1;
}

double XlCellTableInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    double result = *(double *)(a2 + 8);
    *(double *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  return result;
}

void XlSubstreamProperties::~XlSubstreamProperties(XlSubstreamProperties *this)
{
  *(void *)this = &unk_26EBDE7E8;
  uint64_t v1 = (XlSubstreamProperties *)((char *)this + 24);
  XlCellTableInfo::~XlCellTableInfo((XlSubstreamProperties *)((char *)this + 136));
  XlPageProperties::~XlPageProperties(v1);
  JUMPOUT(0x23EC997B0);
}

{
  XlPageProperties *v1;

  *(void *)this = &unk_26EBDE7E8;
  uint64_t v1 = (XlSubstreamProperties *)((char *)this + 24);
  XlCellTableInfo::~XlCellTableInfo((XlSubstreamProperties *)((char *)this + 136));
  XlPageProperties::~XlPageProperties(v1);
}

uint64_t XlChartBinaryReader::scanChartObjects(XlChartBinaryReader *this)
{
  *((void *)this + 223) = *((void *)this + 222);
  *((void *)this + 226) = *((void *)this + 225);
  uint64_t v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  while (XlChartBinaryReader::nextSibling(this, v2))
  {
    int var1 = (unsigned __int16)v2->var1;
    if (var1 == 4098) {
      break;
    }
    if ((*((_DWORD *)this + 386) & 0x80000000) != 0 && (var1 | 8) == 0x1068)
    {
      uint64_t v4 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      *((_DWORD *)this + 386) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
    if ((*((_DWORD *)this + 387) & 0x80000000) != 0 && v2->var1 == 2136)
    {
      uint64_t v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      *((_DWORD *)this + 387) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
    if ((*((_DWORD *)this + 498) & 0x80000000) != 0 && v2->var1 == 4178)
    {
      uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      *((_DWORD *)this + 498) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
      uint64_t v7 = (XlHeader *)operator new(8uLL);
      XlHeader::XlHeader(v7);
      do
      {
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v7, *((unsigned char *)this + 444));
        if (v7->var1 == 4181)
        {
          uint64_t v8 = (unsigned __int16 *)operator new(0x18uLL);
          XlChartDataProp::XlChartDataProp((XlChartDataProp *)v8, v7);
          (*(void (**)(void, unsigned __int16 *))(**((void **)this + 167) + 2368))(*((void *)this + 167), v8);
          *((unsigned char *)this + 1997) = v8[8] == 1;
          (*(void (**)(unsigned __int16 *))(*(void *)v8 + 8))(v8);
        }
        else
        {
          XlParserVisitor::seekNextRecord(*((void *)this + 167));
        }
        int v9 = (unsigned __int16)v7->var1;
      }
      while (v9 != 4148 && v9 != 10);
      uint64_t v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, *((unsigned int *)this + 498), 0);
      MEMORY[0x23EC997B0](v7, 0x1000C4087442A64);
    }
    XlParserVisitor::seekNextRecord(*((void *)this + 167));
  }
  uint64_t v12 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  *((_DWORD *)this + 388) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
  XlParserVisitor::seekNextRecord(*((void *)this + 167));
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((unsigned char *)this + 444));
  int v13 = 0;
  int v14 = -1;
  while (XlChartBinaryReader::nextSibling(this, v2))
  {
    int v15 = v2->var1;
    if (v15 == 10) {
      break;
    }
    if (v15 > 4145)
    {
      if (v15 <= 4163)
      {
        if (v15 == 4146)
        {
          uint64_t v31 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
          *((_DWORD *)this + 394) = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
          goto LABEL_60;
        }
        if (v15 != 4161) {
          goto LABEL_60;
        }
        uint64_t v23 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        v21 = (unsigned int *)operator new(0x28uLL);
        XlChartAxisParent::XlChartAxisParent((XlChartAxisParent *)v21, v2);
        (*(void (**)(void, unsigned int *))(**((void **)this + 167) + 1888))(*((void *)this + 167), v21);
        uint64_t v25 = v21[4];
        if (v25 == 1)
        {
          *((_DWORD *)this + 400) = v24;
          goto LABEL_62;
        }
        if (!v25)
        {
          *((_DWORD *)this + 399) = v24;
LABEL_62:
          XlChartBinaryReader::mineChartPlots(this, v25);
        }
      }
      else
      {
        if (v15 == 4164)
        {
          uint64_t v29 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
          *((_DWORD *)this + 414) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
LABEL_60:
          XlParserVisitor::seekNextRecord(*((void *)this + 167));
          goto LABEL_64;
        }
        if (v15 == 4195)
        {
          uint64_t v30 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
          *((_DWORD *)this + 401) = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
          goto LABEL_60;
        }
        if (v15 != 4196) {
          goto LABEL_60;
        }
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        v21 = (unsigned int *)operator new(0x18uLL);
        XlChartPlotGrowth::XlChartPlotGrowth((XlChartPlotGrowth *)v21, v2);
        (*(void (**)(void, unsigned int *))(**((void **)this + 167) + 2144))(*((void *)this + 167), v21);
        *((float *)this + 482) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v21[4]);
        *((float *)this + 483) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v21[5]);
      }
    }
    else
    {
      if (v15 > 4098)
      {
        switch(v15)
        {
          case 4099:
            XlChartBinaryReader::classifySeries((char **)this);
            goto LABEL_64;
          case 4132:
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            v26 = (XlChartDefaultText *)operator new(0x18uLL);
            XlChartDefaultText::XlChartDefaultText(v26, v2);
            (*(void (**)(void, XlChartDefaultText *))(**((void **)this + 167) + 1976))(*((void *)this + 167), v26);
            int v27 = *((_DWORD *)v26 + 4);
            XlChartBinaryReader::nextSibling(this, v2);
            if (((v27 << 16) | 0xFFFFu) <= 0x4FFFE)
            {
              uint64_t v28 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
              *((_DWORD *)this + (__int16)v27 + 395) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28);
            }
            (*(void (**)(XlChartDefaultText *))(*(void *)v26 + 8))(v26);
            break;
          case 4133:
            uint64_t v16 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
            uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
            uint64_t v18 = v17;
            if (v13 == 2132) {
              int v19 = v14;
            }
            else {
              int v19 = v17;
            }
            __int16 v79 = 0;
            __int16 v78 = 0;
            int v20 = XlChartBinaryReader::scanTextForObjectType(this, &v79, &v78);
            if (v20 == 1)
            {
              *((_DWORD *)this + 402) = v19;
            }
            else if (v20 == 4)
            {
              unsigned int v77 = (unsigned __int16)v78 | ((unsigned __int16)v79 << 16);
              v80 = &v77;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 228, &v77, (uint64_t)&std::piecewise_construct, &v80)+ 8) = v19;
            }
            uint64_t v32 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
            (*(void (**)(uint64_t, uint64_t, void))(*(void *)v32 + 16))(v32, v18, 0);
            break;
        }
        goto LABEL_60;
      }
      if (v15 != 160)
      {
        if (v15 == 2132)
        {
          uint64_t v22 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
          int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
        }
        goto LABEL_60;
      }
      XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
      v21 = (unsigned int *)operator new(0x18uLL);
      XlScl::XlScl((XlScl *)v21, v2);
      (*(void (**)(void, unsigned int *))(**((void **)this + 167) + 1008))(*((void *)this + 167), v21);
      *((_DWORD *)this + 484) = v21[4];
    }
    (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
LABEL_64:
    int v13 = (unsigned __int16)v2->var1;
  }
  while (1)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((unsigned char *)this + 444));
    int v33 = v2->var1;
    if (v33 == 10) {
      break;
    }
    if (v33 <= 4196)
    {
      if (v33 == 2135)
      {
        XlParserVisitor::seekCurrentRecord(*((void *)this + 167));
        uint64_t v42 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 40))(v42);
        int v44 = v43;
        v45 = (char *)*((void *)this + 244);
        unint64_t v46 = *((void *)this + 245);
        if ((unint64_t)v45 >= v46)
        {
          v57 = (char *)*((void *)this + 243);
          int64_t v58 = v45 - v57;
          unint64_t v59 = (unint64_t)(v45 - v57) >> 2;
          unint64_t v60 = (v46 - (unint64_t)v57) >> 2;
          if (2 * (int)v60 <= (v59 + 1)) {
            unsigned int v61 = v59 + 1;
          }
          else {
            unsigned int v61 = 2 * v60;
          }
          if (v60 >= 0x7FFFFFFF) {
            unint64_t v62 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1960, v62);
            uint64_t v65 = v64;
            v45 = (char *)*((void *)this + 244);
            v57 = (char *)*((void *)this + 243);
          }
          else
          {
            v63 = 0;
            uint64_t v65 = 0;
          }
          v68 = &v63[v58 & 0x3FFFFFFFCLL];
          *(_DWORD *)v68 = v44;
          v47 = v68 + 4;
          while (v45 != v57)
          {
            int v69 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v68 - 1) = v69;
            v68 -= 4;
          }
          *((void *)this + 243) = v68;
          *((void *)this + 244) = v47;
          *((void *)this + 245) = &v63[4 * v65];
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *(_DWORD *)v45 = v43;
          v47 = v45 + 4;
        }
        *((void *)this + 244) = v47;
      }
      else if (v33 == 4192)
      {
LABEL_75:
        XlParserVisitor::seekCurrentRecord(*((void *)this + 167));
        uint64_t v36 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
        int v38 = v37;
        v39 = (char *)*((void *)this + 247);
        unint64_t v40 = *((void *)this + 248);
        if ((unint64_t)v39 >= v40)
        {
          v48 = (char *)*((void *)this + 246);
          int64_t v49 = v39 - v48;
          unint64_t v50 = (unint64_t)(v39 - v48) >> 2;
          unint64_t v51 = (v40 - (unint64_t)v48) >> 2;
          if (2 * (int)v51 <= (v50 + 1)) {
            unsigned int v52 = v50 + 1;
          }
          else {
            unsigned int v52 = 2 * v51;
          }
          if (v51 >= 0x7FFFFFFF) {
            unint64_t v53 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1984, v53);
            uint64_t v56 = v55;
            v39 = (char *)*((void *)this + 247);
            v48 = (char *)*((void *)this + 246);
          }
          else
          {
            v54 = 0;
            uint64_t v56 = 0;
          }
          v66 = &v54[v49 & 0x3FFFFFFFCLL];
          *(_DWORD *)v66 = v38;
          v41 = v66 + 4;
          while (v39 != v48)
          {
            int v67 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          *((void *)this + 246) = v66;
          *((void *)this + 247) = v41;
          *((void *)this + 248) = &v54[4 * v56];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(_DWORD *)v39 = v37;
          v41 = v39 + 4;
        }
        *((void *)this + 247) = v41;
      }
LABEL_109:
      XlParserVisitor::seekNextRecord(*((void *)this + 167));
      continue;
    }
    if (v33 == 4200) {
      goto LABEL_75;
    }
    if (v33 != 4197) {
      goto LABEL_109;
    }
    v34 = (unsigned __int16 *)operator new(0x18uLL);
    XlChartSiIndex::XlChartSiIndex((XlChartSiIndex *)v34, v2);
    (*(void (**)(void, unsigned __int16 *))(**((void **)this + 167) + 2272))(*((void *)this + 167), v34);
    if (v34[8] <= 3u)
    {
      uint64_t v35 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      *((_DWORD *)this + v34[8] + 410) = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35);
    }
    (*(void (**)(unsigned __int16 *))(*(void *)v34 + 8))(v34);
  }
  uint64_t v70 = *((void *)this + 222);
  unsigned int v71 = -858993459 * ((unint64_t)(*((void *)this + 223) - v70) >> 2);
  if (v71)
  {
    unsigned __int16 v72 = 0;
    uint64_t v73 = *((void *)this + 225);
    unint64_t v74 = (unint64_t)(*((void *)this + 226) - v73) >> 3;
    do
    {
      uint64_t v75 = *(unsigned __int16 *)(v70 + 20 * v72 + 16);
      if (v74 > v75) {
        *(_DWORD *)(v70 + 20 * v72 + 4) = *(_DWORD *)(v73 + 8 * v75 + 4);
      }
      ++v72;
    }
    while (v71 > v72);
  }
  return MEMORY[0x23EC997B0](v2, 0x1000C4087442A64);
}

void sub_238BD1334(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::nextSibling(XlChartBinaryReader *this, XlHeader *a2)
{
  while (1)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), a2, *((unsigned char *)this + 444));
    int var1 = (unsigned __int16)a2->var1;
    if (var1 != 4147) {
      break;
    }
    if (XlChartBinaryReader::nextSibling(this, a2))
    {
      do
        XlParserVisitor::seekNextRecord(*((void *)this + 167));
      while ((XlChartBinaryReader::nextSibling(this, a2) & 1) != 0);
    }
  }
  if (var1 == 4148)
  {
    XlParserVisitor::seekNextRecord(*((void *)this + 167));
    return 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    uint64_t v5 = 1;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 16))(v6, -RecordDataOffset, 1);
  }
  return v5;
}

uint64_t XlParserVisitor::seekNextRecord(uint64_t this)
{
  if ((*(_DWORD *)(this + 80) & 0x80000000) == 0) {
    return (*(uint64_t (**)(void))(**(void **)(this + 16) + 16))();
  }
  return this;
}

void XlChartPlotGrowth::XlChartPlotGrowth(XlChartPlotGrowth *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDBF70;
  v2[2] = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, uint64_t a2)
{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0xCu)
  {
    *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 64))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 64))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 40) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0x20u)
  {
    *(_WORD *)(a2 + 36) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    *(_WORD *)(a2 + 42) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    *(_WORD *)(a2 + 38) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 32) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 34) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  (*(void (**)(void *, uint64_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void **)a1 + 2), 16, 1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0xCu) {
    *(_WORD *)(a2 + 30) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 30) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0x10u)
  {
    *(_WORD *)(a2 + 26) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    *(_WORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(double *)(a2 + 16) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(double *)(a2 + 24) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(double *)(a2 + 32) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(double *)(a2 + 40) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(double *)(a2 + 48) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 56) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  (*(void (**)(void *, uint64_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void **)a1 + 2), 16, 1);
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  unsigned int v4;
  _DWORD *exception;
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  uint64_t v4 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (v4 >= 0xFF)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  *(_WORD *)(a2 + 16) = v4;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 64))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 64))(*((void **)a1 + 2));
  *(unsigned char *)(a2 + 36) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 64))(*((void **)a1 + 2));
  (*(void (**)(void *, uint64_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void **)a1 + 2), 1, 1);
  *(double *)(a2 + 16) = (*(double (**)(void *))(**((void **)a1 + 2) + 120))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  int v4;
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) < 0x14u)
  {
    uint64_t v4 = 180;
  }
  else
  {
    *(_WORD *)(a2 + 30) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    *(_WORD *)(a2 + 32) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
    uint64_t v4 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  }
  *(_DWORD *)(a2 + 36) = v4;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(float *)(a2 + 24) = (float)(*(unsigned int (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2))
                      * 0.000015259;
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  (*(void (**)(void *, uint64_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void **)a1 + 2), 2, 1);
  (*(void (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  *(unsigned char *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2)) & 1;
  (*(void (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  (*(void (**)(void *))(**((void **)a1 + 2) + 104))(*((void **)a1 + 2));
  *(unsigned char *)(a2 + 20) = ((*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2)) & 2) != 0;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

void XlChartPlotGrowth::~XlChartPlotGrowth(XlChartPlotGrowth *this)
{
}

void XlChartBinaryReader::classifySeries(char **this)
{
  uint64_t v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  uint64_t v3 = (*((uint64_t (**)(char **))*this + 78))(this);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v2)
    || (XlParserVisitor::seekNextRecord((uint64_t)this[167]),
        XlParserVisitor::getHeader((XlParserVisitor *)this[167], v2, *((unsigned char *)this + 444)),
        v2->var1 != 4147))
  {
    LOWORD(v7) = 0;
    int v6 = 0;
    __int16 v5 = 0;
    int v8 = 1;
LABEL_17:
    uint64_t v11 = this[223];
    unint64_t v12 = (unint64_t)this[224];
    if ((unint64_t)v11 >= v12)
    {
      int v14 = this[222];
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v14) >> 2);
      unsigned int v16 = v15 + 1;
      if ((v15 + 1) > 0xCCCCCCCC) {
        std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v17 = -858993459 * ((v12 - (unint64_t)v14) >> 2);
      if (2 * v17 > v16) {
        unsigned int v16 = 2 * v17;
      }
      if (v17 >= 0x66666666) {
        unint64_t v18 = 3435973836;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        int v19 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<XlChartBinaryReader::SeriesDescriptor>>((uint64_t)(this + 224), v18);
        int v21 = v20;
        uint64_t v11 = this[223];
        int v14 = this[222];
      }
      else
      {
        int v19 = 0;
        int v21 = 0;
      }
      uint64_t v22 = &v19[20 * v15];
      *(_DWORD *)uint64_t v22 = v4;
      *((_DWORD *)v22 + 1) = 0;
      *((_DWORD *)v22 + 2) = v6;
      *((_DWORD *)v22 + 3) = v8;
      uint64_t v23 = &v19[20 * v21];
      *((_WORD *)v22 + 8) = v5;
      *((_WORD *)v22 + 9) = v7;
      int v13 = v22 + 20;
      if (v11 != v14)
      {
        do
        {
          long long v24 = *(_OWORD *)(v11 - 20);
          *((_DWORD *)v22 - 1) = *((_DWORD *)v11 - 1);
          *(_OWORD *)(v22 - 20) = v24;
          v22 -= 20;
          v11 -= 20;
        }
        while (v11 != v14);
        int v14 = this[222];
      }
      this[222] = v22;
      this[223] = v13;
      this[224] = v23;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v11 = v4;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v6;
      *((_DWORD *)v11 + 3) = v8;
      *((_WORD *)v11 + 8) = v5;
      int v13 = v11 + 20;
      *((_WORD *)v11 + 9) = v7;
    }
    this[223] = v13;
LABEL_36:
    JUMPOUT(0x23EC997B0);
  }
  __int16 v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 1;
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v2))
      {
        if ((v6 != 0) == (v7 == 0)) {
          goto LABEL_36;
        }
        goto LABEL_17;
      }
      int var1 = v2->var1;
      if (var1 > 4170) {
        break;
      }
      if (var1 == 4165)
      {
        XlHeader v10 = (int *)operator new(0x18uLL);
        XlChartSerToCrt::XlChartSerToCrt((XlChartSerToCrt *)v10, v2);
        XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
        (*(void (**)(char *, int *))(*(void *)this[167] + 2248))(this[167], v10);
        __int16 v5 = *((_WORD *)v10 + 8);
      }
      else
      {
        if (var1 != 4170) {
          goto LABEL_12;
        }
        XlHeader v10 = (int *)operator new(0x18uLL);
        XlChartSerParent::XlChartSerParent((XlChartSerParent *)v10, v2);
        XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
        (*(void (**)(char *, int *))(*(void *)this[167] + 2240))(this[167], v10);
        int v7 = *((unsigned __int16 *)v10 + 8);
      }
LABEL_15:
      (*(void (**)(int *))(*(void *)v10 + 8))(v10);
    }
    if (var1 == 4171)
    {
      int v6 = 2;
      goto LABEL_12;
    }
    if (var1 == 4187)
    {
      XlHeader v10 = (int *)operator new(0x28uLL);
      XlChartSerAuxErrBar::XlChartSerAuxErrBar((XlChartSerAuxErrBar *)v10, v2);
      XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
      (*(void (**)(char *, int *))(*(void *)this[167] + 2192))(this[167], v10);
      int v8 = v10[7];
      int v6 = 1;
      goto LABEL_15;
    }
LABEL_12:
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
  }
}

void sub_238BD1B04(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartSerToCrt::XlChartSerToCrt(XlChartSerToCrt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC270;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSerToCrt::~XlChartSerToCrt(XlChartSerToCrt *this)
{
}

void XlChartDefaultText::XlChartDefaultText(XlChartDefaultText *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBB68;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartDefaultText::~XlChartDefaultText(XlChartDefaultText *this)
{
}

void XlChartAxisParent::XlChartAxisParent(XlChartAxisParent *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB868;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, _DWORD *a2)
{
  XlParserVisitor::beginRead(a1);
  a2[4] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  a2[5] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  a2[6] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  a2[7] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  a2[8] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

void XlChartBinaryReader::mineChartPlots(XlChartBinaryReader *a1, uint64_t a2)
{
  int v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((unsigned char *)a1 + 444));
  if (v4->var1 == 4147)
  {
    uint64_t v5 = a2 << 32;
    while (XlChartBinaryReader::nextSibling(a1, v4))
    {
      if (v4->var1 == 4116)
      {
        uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)a1 + 624))(a1);
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
        uint64_t v8 = v7;
        int v9 = (uint64_t *)*((void *)a1 + 226);
        unint64_t v10 = *((void *)a1 + 227);
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v12 = *((void *)a1 + 225);
          unint64_t v13 = (unint64_t)v9 - v12;
          unint64_t v14 = (v10 - v12) >> 3;
          unsigned int v15 = 2 * v14;
          if (2 * (int)v14 <= (v13 >> 3) + 1) {
            unsigned int v15 = (v13 >> 3) + 1;
          }
          if (v14 >= 0x7FFFFFFF) {
            unint64_t v16 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a1 + 1816, v16);
            uint64_t v19 = v18;
          }
          else
          {
            unsigned int v17 = 0;
            uint64_t v19 = 0;
          }
          int v20 = &v17[v13 & 0x7FFFFFFF8];
          *(void *)int v20 = v5 | v8;
          uint64_t v11 = v20 + 8;
          int v21 = (char *)*((void *)a1 + 226);
          uint64_t v22 = (char *)*((void *)a1 + 225);
          if (v21 != v22)
          {
            do
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            int v21 = (char *)*((void *)a1 + 225);
          }
          *((void *)a1 + 225) = v20;
          *((void *)a1 + 226) = v11;
          *((void *)a1 + 227) = &v17[8 * v19];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          uint64_t *v9 = v5 | v7;
          uint64_t v11 = v9 + 1;
        }
        *((void *)a1 + 226) = v11;
        if (!a2
          && *((int *)a1 + 498) >= 1
          && (((unint64_t)v11 - *((void *)a1 + 225)) & 0x7FFFFFFF8) == 8)
        {
          XlParserVisitor::seekNextRecord(*((void *)a1 + 167));
          XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((unsigned char *)a1 + 444));
          if (v4->var1 == 4147)
          {
            XlParserVisitor::seekNextRecord(*((void *)a1 + 167));
            XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((unsigned char *)a1 + 444));
            if (v4->var1 == 4123)
            {
              long long v24 = (XlChartScatter *)operator new(0x18uLL);
              XlChartScatter::XlChartScatter(v24, v4);
              (*(void (**)(void, XlChartScatter *))(**((void **)a1 + 167) + 2184))(*((void *)a1 + 167), v24);
              if (XlChartChartFormat::isVaried(v24)) {
                *((unsigned char *)a1 + 1996) = 1;
              }
              if (v24) {
                (*(void (**)(XlChartScatter *))(*(void *)v24 + 8))(v24);
              }
            }
          }
          uint64_t v25 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)a1 + 624))(a1);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v25 + 16))(v25, v8, 0);
          XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((unsigned char *)a1 + 444));
        }
      }
      XlParserVisitor::seekNextRecord(*((void *)a1 + 167));
    }
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238BD21D0(_Unwind_Exception *a1)
{
  operator delete(v2);
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAxisParent::~XlChartAxisParent(XlChartAxisParent *this)
{
}

uint64_t XlChartBinaryReader::scanTextForObjectType(XlChartBinaryReader *this, __int16 *a2, __int16 *a3)
{
  uint64_t v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if (XlChartBinaryReader::nextSibling(this, v6)
    && (XlParserVisitor::seekNextRecord(*((void *)this + 167)),
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((unsigned char *)this + 444)),
        v6->var1 == 4147))
  {
    uint64_t v7 = 0;
    while (XlChartBinaryReader::nextSibling(this, v6))
    {
      uint64_t v8 = (XlParserVisitor *)*((void *)this + 167);
      if (v6->var1 == 4135)
      {
        XlParserVisitor::skipHeader(v8);
        int v9 = (XlChartObjectLink *)operator new(0x18uLL);
        XlChartObjectLink::XlChartObjectLink(v9, v6);
        (*(void (**)(void, XlChartObjectLink *))(**((void **)this + 167) + 2088))(*((void *)this + 167), v9);
        uint64_t v7 = *((unsigned int *)v9 + 4);
        if (a2) {
          *a2 = *((_WORD *)v9 + 10);
        }
        if (a3) {
          *a3 = *((_WORD *)v9 + 11);
        }
        (*(void (**)(XlChartObjectLink *))(*(void *)v9 + 8))(v9);
      }
      else
      {
        XlParserVisitor::seekNextRecord((uint64_t)v8);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  MEMORY[0x23EC997B0](v6, 0x1000C4087442A64);
  return v7;
}

void sub_238BD23CC(_Unwind_Exception *a1)
{
  if (v2) {
    XlChartBinaryReader::scanChartObjects(v2);
  }
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartObjectLink::XlChartObjectLink(XlChartObjectLink *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDBE68;
  v2[2] = 0;
}

void XlChartObjectLink::~XlChartObjectLink(XlChartObjectLink *this)
{
}

void XlChartSiIndex::XlChartSiIndex(XlChartSiIndex *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC330;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSiIndex::~XlChartSiIndex(XlChartSiIndex *this)
{
}

void sub_238BD26F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_238BD28B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD2CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  int v44 = v41;

  XlChartTextFrame::~XlChartTextFrame((XlChartTextFrame *)&a10);
  XlChartParent::~XlChartParent((XlChartParent *)&a37);

  _Unwind_Resume(a1);
}

void sub_238BD2E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartParent::XlChartParent(XlChartParent *this)
{
  XlChartFrameType::XlChartFrameType((XlChartFrameType *)this);
  XlChartShtProps::XlChartShtProps((XlChartShtProps *)(v2 + 88));
  *(void *)this = &unk_26EBDCCD0;
  *((void *)this + 11) = &unk_26EBDCCF0;
  XlString::XlString((XlString *)((char *)this + 120));
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 28) = _D0;
  *((_DWORD *)this + 58) = 65537;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 264) = 0;
}

void sub_238BD2F68(_Unwind_Exception *a1)
{
  TSURectWithOriginAndSize(v2);
  XlChartFrameType::~XlChartFrameType(v1);
  _Unwind_Resume(a1);
}

void XlChartFrameType::XlChartFrameType(XlChartFrameType *this)
{
  this->var0 = (void **)&unk_26EBDC590;
  *(_OWORD *)&this->int var1 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)((char *)&this->var10 + 1) = 0u;
  *(_WORD *)&this->var13 = 257;
  this->var15 = 0;
  this->var16 = 0;
}

void XlChartShtProps::XlChartShtProps(XlChartShtProps *this)
{
  XlRecord::XlRecord(this, 4164, 4, 0);
  *(void *)uint64_t v1 = &unk_26EBDC2F0;
  *(_WORD *)(v1 + 16) = 1;
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 24) = 0;
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, XlChartParent *a2)
{
  XlChartBinaryReader::readFbi((XlParserVisitor **)this, *((unsigned int *)this + 386), a2);
  uint64_t v4 = *((void *)this + 246);
  if (((*((void *)this + 247) - v4) & 0x3FFFFFFFCLL) != 0)
  {
    int v5 = 0;
    do
    {
      XlChartBinaryReader::readFbi((XlParserVisitor **)this, *(unsigned int *)(v4 + 4 * (unsigned __int16)v5++), a2);
      uint64_t v4 = *((void *)this + 246);
    }
    while (((unint64_t)(*((void *)this + 247) - v4) >> 2) > (unsigned __int16)v5);
  }
  uint64_t v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if (*((_DWORD *)this + 387) != -1)
  {
    uint64_t v7 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v7 + 16))(v7, *((unsigned int *)this + 387), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((unsigned char *)this + 444));
    uint64_t v8 = (XlRecord *)operator new(0x18uLL);
    XlRecord::XlRecord(v8, v6);
    *(void *)uint64_t v8 = &unk_26EBDE820;
    *((void *)v8 + 2) = 0;
    (*(void (**)(void, XlRecord *))(**((void **)this + 167) + 2128))(*((void *)this + 167), v8);
    uint64_t v9 = *((void *)v8 + 2);
    if (v9) {
      XlString::operator=((XlString *)((char *)a2 + 120), v9);
    }
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((unsigned char *)this + 444));
    unint64_t v10 = (XlRecord *)operator new(0x18uLL);
    XlRecord::XlRecord(v10, v6);
    *(void *)unint64_t v10 = &unk_26EBDE860;
    *((unsigned char *)v10 + 16) = 0;
    (*(void (**)(void, XlRecord *))(**((void **)this + 167) + 2120))(*((void *)this + 167), v10);
    *((unsigned char *)a2 + 264) = *((unsigned char *)v10 + 16);
    (*(void (**)(XlRecord *))(*(void *)v10 + 8))(v10);
    (*(void (**)(XlRecord *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, *((unsigned int *)this + 388), 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((unsigned char *)this + 444));
  uint64_t v12 = (unsigned int *)operator new(0x20uLL);
  XlChartChart::XlChartChart((XlChartChart *)v12, v6);
  (*(void (**)(void, unsigned int *))(**((void **)this + 167) + 1936))(*((void *)this + 167), v12);
  *((float *)a2 + 2) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v12[6]);
  *((float *)a2 + 3) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v12[7]);
  *((float *)a2 + 4) = CsMath::convertFixedToFloat((CsMath *)v12[4]);
  *((float *)a2 + 5) = CsMath::convertFixedToFloat((CsMath *)v12[5]);
  *((void *)a2 + 28) = *((void *)this + 241);
  *((_DWORD *)a2 + 58) = *((_DWORD *)this + 484);
  uint64_t v13 = *((unsigned int *)this + 394);
  if ((int)v13 >= 1) {
    XlChartBinaryReader::readFrameFormatting((XlParserVisitor **)this, (XlChartFrameType *)a2, v13);
  }
  if (*((int *)this + 414) >= 1)
  {
    uint64_t v14 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v14 + 16))(v14, *((unsigned int *)this + 414), 0);
    unsigned int v15 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v15);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v15, *((unsigned char *)this + 444));
    unint64_t v16 = (XlChartShtProps *)operator new(0x20uLL);
    XlChartShtProps::XlChartShtProps(v16, v15);
    (*(void (**)(void, XlChartShtProps *))(**((void **)this + 167) + 2264))(*((void *)this + 167), v16);
    *((_WORD *)a2 + 52) = *((_WORD *)v16 + 8);
    *((_DWORD *)a2 + 27) = *((_DWORD *)v16 + 5);
    (*(void (**)(XlChartShtProps *))(*(void *)v16 + 8))(v16);
    MEMORY[0x23EC997B0](v15, 0x1000C4087442A64);
  }
  (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
  JUMPOUT(0x23EC997B0);
}

void sub_238BD3500(_Unwind_Exception *a1)
{
  operator delete(v4);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C4087442A64);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::readFbi(XlParserVisitor **this, uint64_t a2, XlChartParent *a3)
{
  uint64_t v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  if (a2 == -1)
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 16))(v7, a2, 0);
    while (1)
    {
      XlParserVisitor::getHeader(this[167], v6, *((unsigned char *)this + 444));
      if (((unsigned __int16)v6->var1 | 8) != 0x1068) {
        break;
      }
      uint64_t v9 = 0;
      uint64_t v8 = (XlChartFBI *)operator new(0x20uLL);
      XlChartFBI::XlChartFBI(v8, v6);
      uint64_t v9 = v8;
      (*(void (**)(XlParserVisitor *, XlChartFBI *))(*(void *)this[167] + 2000))(this[167], v8);
      XlChartParent::addFontBasis(a3, &v9);
      if (v9) {
        (*(void (**)(XlChartFBI *))(*(void *)v9 + 8))(v9);
      }
    }
  }
  MEMORY[0x23EC997B0](v6, 0x1000C4087442A64);
}

void sub_238BD37B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartFBI::XlChartFBI(XlChartFBI *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBBE8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, _WORD *a2)
{
  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[9] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[10] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[11] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[12] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[9] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[10] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[11] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[9] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[10] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[11] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[12] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[13] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[14] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[15] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 72))(*((void **)a1 + 2));
  a2[16] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

{
  uint64_t vars8;

  XlParserVisitor::beginRead(a1);
  a2[8] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  a2[9] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  a2[10] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  a2[11] = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 80))(*((void **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

void XlChartParent::addFontBasis(XlChartParent *this, XlChartFBI **a2)
{
  uint64_t v2 = (uint64_t)*a2;
  if (*a2)
  {
    uint64_t v5 = *((void *)this + 30);
    uint64_t v6 = (void *)*((void *)this + 31);
    unint64_t v7 = (unint64_t)v6 - v5;
    unint64_t v8 = ((unint64_t)v6 - v5) >> 3;
    if (v8)
    {
      unsigned __int16 v9 = 0;
      while (*(unsigned __int16 *)(*(void *)(v5 + 8 * v9) + 24) != *(unsigned __int16 *)(v2 + 24))
      {
        if (v8 <= ++v9) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      unint64_t v10 = *((void *)this + 32);
      if ((unint64_t)v6 >= v10)
      {
        unint64_t v12 = (v10 - v5) >> 3;
        if (2 * (int)v12 <= (v8 + 1)) {
          unsigned int v13 = v8 + 1;
        }
        else {
          unsigned int v13 = 2 * v12;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 256, v14);
          uint64_t v17 = v16;
          uint64_t v2 = (uint64_t)*a2;
        }
        else
        {
          unsigned int v15 = 0;
          uint64_t v17 = 0;
        }
        unsigned int v18 = &v15[v7 & 0x7FFFFFFF8];
        uint64_t v19 = &v15[8 * v17];
        *(void *)unsigned int v18 = v2;
        uint64_t v11 = v18 + 8;
        int v21 = (char *)*((void *)this + 30);
        int v20 = (char *)*((void *)this + 31);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v18 - 1) = v22;
            v18 -= 8;
          }
          while (v20 != v21);
          int v20 = (char *)*((void *)this + 30);
        }
        *((void *)this + 30) = v18;
        *((void *)this + 31) = v11;
        *((void *)this + 32) = v19;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v6 = v2;
        uint64_t v11 = v6 + 1;
      }
      *((void *)this + 31) = v11;
      *a2 = 0;
    }
  }
}

void XlChartShtProps::XlChartShtProps(XlChartShtProps *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC2F0;
  *(_WORD *)(v2 + 16) = 1;
  *(_DWORD *)(v2 + 20) = 0;
  *(unsigned char *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartShtProps *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  uint64_t v4 = **((void **)this + 2);
  if (*((_DWORD *)a2 + 2) == 3) {
    int v5 = (*(uint64_t (**)(void))(v4 + 64))();
  }
  else {
    int v5 = (*(uint64_t (**)(void))(v4 + 80))();
  }
  *((_DWORD *)a2 + 5) = v5;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChartShtProps::~XlChartShtProps(XlChartShtProps *this)
{
}

void XlChartChart::~XlChartChart(XlChartChart *this)
{
}

void sub_238BD3D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BD44AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BD4BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD4CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartArea::isCategoryPercentage(XlChartArea *this)
{
  return (*((unsigned __int16 *)this + 8) >> 1) & 1;
}

uint64_t XlChartBinaryReader::getSeriesCount(XlChartBinaryReader *this)
{
  return (unsigned __int16)(-13107 * ((*((_DWORD *)this + 446) - *((_DWORD *)this + 444)) >> 2));
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, unsigned int a2, XlChartDataSeries **a3, int a4)
{
  uint64_t v8 = *((void *)this + 222);
  unsigned __int16 v9 = (unsigned int *)(v8 + 20 * a2);
  uint64_t v11 = (_WORD *)v9 + 9;
  unsigned int v10 = *((unsigned __int16 *)v9 + 9);
  if (*((_WORD *)v9 + 9) && v10 <= (unsigned __int16)(-13107 * ((*((_DWORD *)this + 446) - v8) >> 2))) {
    uint64_t v12 = v8 + 20 * (v10 - 1);
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v13);
  int v14 = *(_DWORD *)(v8 + 20 * a2 + 8);
  switch(v14)
  {
    case 2:
      uint64_t v22 = a3;
      v13->int var1 = 4171;
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 83);
      uint64_t v17 = (XlHeader *)(v16 + 200);
      XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
      (*(void (**)(uint64_t, void))(*(void *)v16 + 32))(v16, (unsigned __int16)(*v11 - 1));
      *(_WORD *)(v16 + 16) = a2;
      if (v12) {
        *(_WORD *)(v16 + 20) = *(_WORD *)(v12 + 16);
      }
      uint64_t Series = XlChartBinaryReader::readSeries(this, (XlChartDataSeries *)v16, *v9, a4);
      if ((int)Series >= 1)
      {
        uint64_t v19 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v19 + 16))(v19, Series, 0);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v13, *((unsigned char *)this + 444));
        XlRecord::setHeader(v17, v13);
        (*(void (**)(void, XlHeader *))(**((void **)this + 167) + 2200))(*((void *)this + 167), v17);
      }
      goto LABEL_19;
    case 1:
      uint64_t v22 = a3;
      v13->int var1 = 4187;
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 65);
      (*(void (**)(uint64_t, void))(*(void *)v16 + 32))(v16, (unsigned __int16)(*v11 - 1));
      XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
      *(_WORD *)(v16 + 16) = a2;
      *(_DWORD *)(v16 + 240) = *(_DWORD *)(v8 + 20 * a2 + 12);
      if (v12) {
        *(_WORD *)(v16 + 20) = *(_WORD *)(v12 + 16);
      }
      uint64_t v20 = XlChartBinaryReader::readSeries(this, (XlChartDataSeries *)v16, *v9, a4);
      if ((int)v20 >= 1)
      {
        uint64_t v21 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 16))(v21, v20, 0);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v13, *((unsigned char *)this + 444));
        XlRecord::setHeader((XlHeader *)(v16 + 200), v13);
        (*(void (**)(void, uint64_t))(**((void **)this + 167) + 2192))(*((void *)this + 167), v16 + 200);
      }
LABEL_19:
      *uint64_t v22 = (XlChartDataSeries *)v16;
      goto LABEL_20;
    case 0:
      unsigned int v15 = (XlChartDataSeries *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 62);
      *a3 = v15;
      *((_WORD *)v15 + 8) = a2;
      *((_WORD *)v15 + 10) = *(_WORD *)(v8 + 20 * a2 + 16);
      XlChartBinaryReader::readSeries(this, v15, *v9, a4);
      break;
  }
  if (v13)
  {
LABEL_20:
    JUMPOUT(0x23EC997B0);
  }
}

void sub_238BD53A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartDataSeries::XlChartDataSeries(XlChartDataSeries *this)
{
  *(void *)this = &unk_26EBDC4C0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
}

uint64_t XlChartBinaryReader::readSeries(XlChartBinaryReader *this, XlChartDataSeries *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 16))(v8, a3, 0);
  *((_WORD *)this + 936) = 0;
  unsigned __int16 v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((unsigned char *)this + 444));
  unsigned int v10 = (XlChartSeries *)operator new(0x28uLL);
  XlChartSeries::XlChartSeries(v10, v9);
  (*(void (**)(void, XlChartSeries *))(**((void **)this + 167) + 2216))(*((void *)this + 167), v10);
  uint64_t v11 = *((void *)a2 + 1);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)a2 + 1) = v10;
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((unsigned char *)this + 444));
  if (v9->var1 == 4147)
  {
    unsigned int v39 = -1;
    while (1)
    {
      while (1)
      {
        if (!XlChartBinaryReader::nextSibling(this, v9)) {
          goto LABEL_65;
        }
        int var1 = v9->var1;
        if (var1 <= 4170) {
          break;
        }
        if (var1 == 4177)
        {
          LODWORD(v41) = 0;
          uint64_t v17 = (_DWORD *)XlChartBinaryReader::mapDataLink((uint64_t)this, &v41);
          unsigned int v18 = v17;
          switch((int)v41)
          {
            case 0:
              if (v17 && (v17[2] - 1) <= 1)
              {
                if (*((int *)this + 498) < 1) {
                  char v19 = 0;
                }
                else {
                  char v19 = XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 0, *((unsigned __int16 *)a2 + 8));
                }
                if (XlChartBinaryReader::nextSibling(this, v9) && v9->var1 == 4109)
                {
                  XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                  int v27 = (XlChartSeriesText *)operator new(0x20uLL);
                  XlChartSeriesText::XlChartSeriesText(v27, v9);
                  (*(void (**)(void, XlChartSeriesText *))(**((void **)this + 167) + 2232))(*((void *)this + 167), v27);
                  uint64_t v28 = (OcText *)operator new(0x30uLL);
                  OcText::OcText(v28);
                  uint64_t v29 = *((void *)v27 + 2);
                  if (v29) {
                    OcText::operator=((uint64_t)v28, v29 + 8);
                  }
                  uint64_t v30 = (uint64_t *)operator new(0x40uLL);
                  *((_WORD *)v30 + 4) = -1;
                  *uint64_t v30 = (uint64_t)&unk_26EBDE8E0;
                  OcText::OcText((OcText *)(v30 + 2));
                  uint64_t v31 = (*(uint64_t (**)(uint64_t *))(*v30 + 48))(v30);
                  OcText::operator=(v31, (uint64_t)v28);
                  XlChartLinkedData::takeEnteredData((uint64_t)v18, 0, v30);
                  (*((void (**)(OcText *))v28->var0 + 1))(v28);
                  (*(void (**)(XlChartSeriesText *))(*(void *)v27 + 8))(v27);
                }
                else if ((v19 & 1) == 0 && !*((_WORD *)v18 + 12))
                {
                  (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
                  unsigned int v18 = 0;
                }
              }
              XlChartDataSeries::takeTitleLink(a2, (XlChartLinkedData *)v18);
              break;
            case 1:
              if (v17
                && (v17[2] || *((int *)this + 498) >= 1)
                && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 1u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& v18[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
                unsigned int v18 = 0;
              }
              XlChartDataSeries::takeValueLink(a2, (XlChartLinkedData *)v18);
              break;
            case 2:
              if (v17
                && (v17[2] || *((int *)this + 498) >= 1)
                && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 2u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& v18[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
                unsigned int v18 = 0;
              }
              XlChartDataSeries::takeCategoryLink(a2, (XlChartLinkedData *)v18);
              break;
            case 3:
              if (v17
                && v17[2]
                && (XlChartBinaryReader::mineEnteredData((XlParserVisitor **)this, (XlChartLinkedData *)v17, 3u, *((unsigned __int16 *)a2 + 8)) & 1) == 0&& v18[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
                unsigned int v18 = 0;
              }
              XlChartDataSeries::takeSizeLink(a2, (XlChartLinkedData *)v18);
              break;
            default:
              if (v17) {
                (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
              }
              break;
          }
        }
        else
        {
          if (var1 == 4171 || var1 == 4187)
          {
            uint64_t v26 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
            unsigned int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
          }
LABEL_53:
          XlParserVisitor::seekNextRecord(*((void *)this + 167));
        }
      }
      if (var1 == 4102)
      {
        uint64_t v20 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
        unsigned int v13 = (__int16 *)operator new(0x18uLL);
        XlChartDataFormat::XlChartDataFormat((XlChartDataFormat *)v13, v9);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(void, __int16 *))(**((void **)this + 167) + 1968))(*((void *)this + 167), v13);
        int v22 = v13[8];
        if (v22 < 0)
        {
          uint64_t v25 = (XlChartSeriesFormat *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 79);
          v25->var23 = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v13);
          v25->var11 = v13[10];
          v25->var12 = *((_WORD *)a2 + 8);
          v25->var9 = v22;
          XlChartBinaryReader::mapSeriesFormat(this, v25);
          XlChartDataSeries::takeDefaultFormat(a2, v25);
        }
        else
        {
          unsigned int v40 = v13[8];
          v41 = &v40;
          *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 235, &v40, (uint64_t)&std::piecewise_construct, &v41)+ 8) = v21;
          XlChartDataSeries::addCustomFormat(a2, v22);
          if (a4)
          {
            uint64_t v23 = (XlChartSeriesFormat *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 79);
            v23->var23 = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v13);
            v23->var11 = v13[10];
            v23->var12 = *((_WORD *)a2 + 8);
            v23->var9 = v22;
            XlChartBinaryReader::mapSeriesFormat(this, v23);
            XlChartDataSeries::takeCachedCustomFormat(a2, v23);
          }
        }
LABEL_27:
        (*(void (**)(__int16 *))(*(void *)v13 + 8))(v13);
      }
      else
      {
        if (var1 != 4163) {
          goto LABEL_53;
        }
        unsigned int v13 = (__int16 *)operator new(0x18uLL);
        XlChartLegendXn::XlChartLegendXn((XlChartLegendXn *)v13, v9);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(void, __int16 *))(**((void **)this + 167) + 2048))(*((void *)this + 167), v13);
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 87);
        *(_WORD *)(v14 + 216) = v13[8];
        *(unsigned char *)(v14 + 218) = XlChartChartFormat::isVaried((XlChartChartFormat *)v13);
        *(unsigned char *)(v14 + 219) = XlChartLegendXn::isLabel((XlChartLegendXn *)v13);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v9, *((unsigned char *)this + 444));
        if (v9->var1 == 4147)
        {
          while (XlChartBinaryReader::nextSibling(this, v9))
          {
            if (v9->var1 == 4133)
            {
              uint64_t v15 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
              XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, (XlChartTextFrame *)v14, v16, 1);
            }
            else
            {
              XlParserVisitor::seekNextRecord(*((void *)this + 167));
            }
          }
        }
        else
        {
          uint64_t v24 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 4294967292, 1);
        }
        XlChartDataSeries::takeCustomLegend(a2, v14);
        if (v13) {
          goto LABEL_27;
        }
      }
    }
  }
  unsigned int v39 = -1;
LABEL_65:
  uint64_t v32 = (XlChartBinaryReader *)*((void *)this + 228);
  if (v32 != (XlChartBinaryReader *)((char *)this + 1832))
  {
    do
    {
      unsigned int v33 = *((_DWORD *)v32 + 7);
      if (*((unsigned __int16 *)a2 + 8) == HIWORD(v33))
      {
        XlChartDataSeries::addCustomLabel(a2, (unsigned __int16)*((_DWORD *)v32 + 7));
        if (a4)
        {
          uint64_t v34 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 61);
          *(_WORD *)(v34 + 220) = HIWORD(v33);
          *(_DWORD *)(v34 + 216) = (unsigned __int16)v33;
          (*(void (**)(XlChartBinaryReader *, uint64_t))(*(void *)this + 752))(this, v34);
          XlChartDataSeries::takeCachedCustomLabel(a2, v34);
        }
      }
      uint64_t v35 = (XlChartBinaryReader *)*((void *)v32 + 1);
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          uint64_t v35 = *(XlChartBinaryReader **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (XlChartBinaryReader *)*((void *)v32 + 2);
          BOOL v37 = *(void *)v36 == (void)v32;
          uint64_t v32 = v36;
        }
        while (!v37);
      }
      uint64_t v32 = v36;
    }
    while (v36 != (XlChartBinaryReader *)((char *)this + 1832));
  }
  MEMORY[0x23EC997B0](v9, 0x1000C4087442A64);
  return v39;
}

void sub_238BD5F68(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartSeries::XlChartSeries(XlChartSeries *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC1B0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlChartBinaryReader::mapDataLink(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), v4, *(unsigned char *)(a1 + 444));
  if (v4->var1 == 4177)
  {
    int v5 = (__int16 *)operator new(0x28uLL);
    XlChartAI::XlChartAI((XlChartAI *)v5, v4);
    if (*(_DWORD *)(a1 + 1392) == 0x8000) {
      *((unsigned char *)v5 + 14) = 1;
    }
    (*(void (**)(void, __int16 *))(**(void **)(a1 + 1336) + 1816))(*(void *)(a1 + 1336), v5);
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1328) + 16))(*(void *)(a1 + 1328), 70);
    int v7 = *((_DWORD *)v5 + 5);
    *a2 = *((_DWORD *)v5 + 4);
    *(_DWORD *)(v6 + 8) = v7;
    *(unsigned char *)(v6 + 28) = XlChartAI::isCustomNumberFormat((XlChartAI *)v5) ^ 1;
    *(_WORD *)(v6 + 26) = v5[16];
    if (v5[17] >= 1)
    {
      uint64_t v8 = (unsigned __int8 *)XlChartAI::giveParsedFormula((XlChartAI *)v5);
      XlChartLinkedData::takeFormula(v6, v8, v5[17]);
    }
    (*(void (**)(__int16 *))(*(void *)v5 + 8))(v5);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*(void *)(a1 + 1336));
    uint64_t v6 = 0;
  }
  MEMORY[0x23EC997B0](v4, 0x1000C4087442A64);
  return v6;
}

void sub_238BD6560(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAI::XlChartAI(XlChartAI *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDB668;
  v2[2] = 0;
  v2[3] = 0;
  *(void *)((char *)v2 + 30) = 0;
}

uint64_t XlChartParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 36) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 32) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 34) = v4;
  if (v4 < 1 || *(unsigned char *)(a2 + 14) == 1) {
    return XlParserVisitor::endRead(a1, a2);
  }
  int v6 = *(_DWORD *)(a2 + 8) + *(_DWORD *)(a1 + 72);
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  size_t v8 = (v6 - v7);
  int v13 = v8;
  if (v8 < *(__int16 *)(a2 + 34))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v12 = 3002;
    goto LABEL_12;
  }
  if (*(void *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v12 = 1011;
LABEL_12:
    _DWORD *exception = v12;
  }
  if (v6 != v7)
  {
    unsigned __int16 v9 = operator new[](v8);
    *(void *)(a1 + 24) = v9;
    (*(void (**)(void, void *, int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v9, &v13);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v4;
  unsigned int v5;
  size_t v6;
  void *v7;
  _DWORD *exception;
  int v10;

  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  *(_WORD *)(a2 + 24) = v4;
  int v5 = v4 >> 3;
  if ((v4 & 7) != 0) {
    int v6 = v5 + 1;
  }
  else {
    int v6 = v5;
  }
  unsigned int v10 = v6;
  if (*(void *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  int v7 = operator new[](v6);
  *(void *)(a1 + 24) = v7;
  (*(void (**)(void, void *, int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v7, &v10);
  *(void *)(a2 + 16) = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  return XlParserVisitor::endRead(a1, a2);
}

void XlChartLinkedData::XlChartLinkedData(XlChartLinkedData *this)
{
  *(void *)this = &unk_26EBDC5C0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = -65536;
  *((unsigned char *)this + 28) = 1;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
}

uint64_t XlChartAI::isCustomNumberFormat(XlChartAI *this)
{
  return *((_WORD *)this + 18) & 1;
}

void XlChartAI::~XlChartAI(XlChartAI *this)
{
  *(void *)this = &unk_26EBDB668;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDB668;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
}

void XlChartLinkedData::~XlChartLinkedData(XlChartLinkedData *this)
{
  XlChartLinkedData::~XlChartLinkedData(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  XlChartLinkedData *v3;
  uint64_t v4;
  XlChartLinkedData *v5;
  XlChartLinkedData *v6;
  BOOL v7;

  *(void *)this = &unk_26EBDC5C0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  uint64_t v3 = (XlChartLinkedData *)*((void *)this + 4);
  *((void *)this + 2) = 0;
  if (v3 != (XlChartLinkedData *)((char *)this + 40))
  {
    do
    {
      int v4 = *((void *)v3 + 5);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      int v5 = (XlChartLinkedData *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          int v6 = v5;
          int v5 = *(XlChartLinkedData **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (XlChartLinkedData *)*((void *)v3 + 2);
          int v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != (XlChartLinkedData *)((char *)this + 40));
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

uint64_t XlChartDataSeries::takeTitleLink(XlChartDataSeries *this, XlChartLinkedData *a2)
{
  uint64_t result = *((void *)this + 18);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 18) = a2;
  return result;
}

uint64_t XlChartAI::giveParsedFormula(XlChartAI *this)
{
  uint64_t v1 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  return v1;
}

uint64_t XlChartLinkedData::takeFormula(uint64_t this, unsigned __int8 *a2, __int16 a3)
{
  *(void *)(this + 16) = a2;
  *(_WORD *)(this + 24) = a3;
  return this;
}

uint64_t XlChartBinaryReader::mineEnteredData(XlParserVisitor **this, XlChartLinkedData *a2, unsigned int a3, int a4)
{
  if (*((int *)this + 498) < 1)
  {
    unint64_t v46 = (int *)this + a3;
    if (v46[410] >= 1)
    {
      v47 = (XlHeader *)operator new(8uLL);
      XlHeader::XlHeader(v47);
      uint64_t v48 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
      uint64_t v50 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      (*(void (**)(uint64_t, void, void))(*(void *)v50 + 16))(v50, v46[410], 0);
      char v51 = 0;
      do
      {
        XlParserVisitor::getHeader(this[167], v47, *((unsigned char *)this + 444));
        int var1 = v47->var1;
        switch(var1)
        {
          case 513:
            uint64_t v56 = (XlBlank *)operator new(0x18uLL);
            XlBlank::XlBlank(v56, v47);
            (*(void (**)(XlParserVisitor *, XlBlank *))(*(void *)this[167] + 24))(this[167], v56);
            if (*((__int16 *)v56 + 9) == a4)
            {
              v57 = (OcText *)operator new(0x30uLL);
              OcText::OcText(v57);
              OcText::allocBuffer(v57, 1u, 1);
              int64_t v58 = (uint64_t *)operator new(0x40uLL);
              *((_WORD *)v58 + 4) = -1;
              *int64_t v58 = (uint64_t)&unk_26EBDE8E0;
              OcText::OcText((OcText *)(v58 + 2));
              uint64_t v59 = (*(uint64_t (**)(uint64_t *))(*v58 + 48))(v58);
              OcText::operator=(v59, (uint64_t)v57);
              XlChartLinkedData::takeEnteredData((uint64_t)a2, *((unsigned __int16 *)v56 + 8), v58);
              (*((void (**)(OcText *))v57->var0 + 1))(v57);
              char v51 = 1;
            }
            (*(void (**)(XlBlank *))(*(void *)v56 + 8))(v56);
            break;
          case 515:
            XlNumberFP::XlNumberFP((XlNumberFP *)v76, v47);
            (*(void (**)(XlParserVisitor *, uint64_t **))(*(void *)this[167] + 344))(this[167], v76);
            if (v79 == a4)
            {
              unint64_t v60 = operator new(0x18uLL);
              uint64_t v61 = v77;
              v60[4] = -1;
              *(void *)unint64_t v60 = &unk_26EBDE958;
              *((void *)v60 + 2) = v61;
              XlChartLinkedData::takeEnteredData((uint64_t)a2, v78, (uint64_t *)v60);
              char v51 = 1;
            }
            break;
          case 516:
            XlLabel::XlLabel((XlLabel *)v76, v47);
            (*(void (**)(XlParserVisitor *, uint64_t **))(*(void *)this[167] + 312))(this[167], v76);
            if (v79 == a4 && v77)
            {
              unint64_t v53 = (uint64_t *)operator new(0x40uLL);
              *((_WORD *)v53 + 4) = -1;
              *unint64_t v53 = (uint64_t)&unk_26EBDE8E0;
              OcText::OcText((OcText *)(v53 + 2));
              uint64_t v54 = v77;
              uint64_t v55 = (*(uint64_t (**)(uint64_t *))(*v53 + 48))(v53);
              OcText::operator=(v55, v54 + 8);
              XlChartLinkedData::takeEnteredData((uint64_t)a2, v78, v53);
              char v51 = 1;
            }
            XlLabel::~XlLabel((XlLabel *)v76);
            break;
          default:
            XlParserVisitor::seekNextRecord((uint64_t)this[167]);
            break;
        }
        int v62 = (unsigned __int16)v47->var1;
      }
      while (v62 != 4197 && v62 != 10);
      uint64_t v63 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v63 + 16))(v63, v49, 0);
      MEMORY[0x23EC997B0](v47, 0x1000C4087442A64);
      char v64 = v51 & 1;
      return v64 & 1;
    }
LABEL_132:
    char v64 = 0;
    return v64 & 1;
  }
  if (a3 == 3 && !*((unsigned char *)this + 1996)) {
    goto LABEL_132;
  }
  int v7 = (uint64_t *)operator new(0x18uLL);
  v7[1] = 0;
  v7[2] = 0;
  *int v7 = 0;
  v76[0] = v7;
  size_t v8 = (uint64_t *)operator new(0x18uLL);
  *size_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v80 = v8;
  unsigned __int16 v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  uint64_t v10 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  unsigned int v73 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v11 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, *((unsigned int *)this + 498), 0);
  BOOL v74 = 0;
  int v71 = 2 * a4;
  char v72 = 0;
  int v68 = a4 + 1;
  int v69 = (2 * (unsigned __int16)a4) | 1;
  while (1)
  {
    XlParserVisitor::getHeader(this[167], v9, *((unsigned char *)this + 444));
    int v12 = v9->var1;
    if (v12 <= 4178) {
      break;
    }
    if (v12 == 4179)
    {
      uint64_t v15 = (unsigned __int16 *)operator new(0x20uLL);
      XlChartRowSel::XlChartRowSel((XlChartRowSel *)v15, v9);
      (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 2352))(this[167], v15);
      XlChartColSel::getSelectedColumnIndices((uint64_t)v15, (uint64_t)v76[0]);
      goto LABEL_31;
    }
    if (v12 == 4180)
    {
      uint64_t v15 = (unsigned __int16 *)operator new(0x20uLL);
      XlChartColSel::XlChartColSel((XlChartColSel *)v15, v9);
      (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 2344))(this[167], v15);
      XlChartColSel::getSelectedColumnIndices((uint64_t)v15, (uint64_t)v80);
LABEL_31:
      if (!v15) {
        goto LABEL_107;
      }
      goto LABEL_32;
    }
    if (v12 != 4181) {
      goto LABEL_29;
    }
    uint64_t v15 = (unsigned __int16 *)operator new(0x18uLL);
    XlChartDataProp::XlChartDataProp((XlChartDataProp *)v15, v9);
    (*(void (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 2368))(this[167], v15);
    BOOL v74 = v15[8] == 1;
LABEL_32:
    (*(void (**)(unsigned __int16 *))(*(void *)v15 + 8))(v15);
LABEL_107:
    int v45 = (unsigned __int16)v9->var1;
    if (v45 == 4148 || v45 == 10)
    {
      uint64_t v65 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      char v64 = v70;
      (*(void (**)(uint64_t, void, void))(*(void *)v65 + 16))(v65, v73, 0);
      unsigned int v30 = 0;
      goto LABEL_134;
    }
  }
  BOOL v13 = (v12 - 513) > 3 || v12 == 514;
  if (v13 && (v12 - 3) >= 2)
  {
LABEL_29:
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
    goto LABEL_107;
  }
  if (*v76[0] == v76[0][1] || *v80 == v80[1])
  {
    uint64_t v66 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v66 + 16))(v66, v73, 0);
    char v64 = 0;
    unsigned int v30 = 1;
    goto LABEL_134;
  }
  unsigned int v14 = (unsigned __int16)v9->var1;
  if (v14 > 0x202)
  {
    if (v14 == 516) {
      goto LABEL_26;
    }
    if (v14 != 515) {
      goto LABEL_33;
    }
LABEL_24:
    uint64_t v16 = (XlNumberFP *)operator new(0x20uLL);
    XlNumberFP::XlNumberFP(v16, v9);
    if (v16) {
    else
    }
      uint64_t v17 = 0;
    uint64_t v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 344))(this[167], v17);
    goto LABEL_39;
  }
  if (v14 == 3) {
    goto LABEL_24;
  }
  if (v14 == 4)
  {
LABEL_26:
    uint64_t v16 = (XlNumberFP *)operator new(0x20uLL);
    XlLabel::XlLabel(v16, v9);
    if (v16) {
    else
    }
      uint64_t v17 = 0;
    uint64_t v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 312))(this[167], v17);
LABEL_39:
    uint64_t v20 = v17 + 12;
    int v21 = v17 + 13;
    int v22 = (__int16 *)(v17 + 14);
    goto LABEL_42;
  }
LABEL_33:
  uint64_t v16 = (XlNumberFP *)operator new(0x18uLL);
  XlBlank::XlBlank(v16, v9);
  if (v16) {
  else
  }
    unsigned int v18 = 0;
  uint64_t v19 = (*(uint64_t (**)(XlParserVisitor *, unsigned __int16 *))(*(void *)this[167] + 24))(this[167], v18);
  uint64_t v20 = v18 + 8;
  int v21 = v18 + 9;
  int v22 = (__int16 *)(v18 + 10);
LABEL_42:
  uint64_t v23 = v16;
  __int16 v24 = *v22;
  unsigned int v25 = *v21;
  unsigned int v26 = *v20;
  uint64_t v27 = XlChartBinaryReader::mapMSGraphIndex(v19, v26, v76[0]);
  int v28 = v27;
  int v29 = XlChartBinaryReader::mapMSGraphIndex(v27, v25, v80);
  unsigned int v30 = 3;
  if (v28 < 0 || v29 < 0) {
    goto LABEL_103;
  }
  if (a3 == 2)
  {
    if (v74)
    {
      unsigned int v30 = 0;
      if ((__int16)v25 >= 1 && !v26) {
        goto LABEL_71;
      }
      goto LABEL_103;
    }
    unsigned int v30 = 0;
    if ((_WORD)v25 || !v26) {
      goto LABEL_103;
    }
    goto LABEL_81;
  }
  if (a3 != 1)
  {
    if (a3 != 3)
    {
      if (a3)
      {
        uint64_t v33 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
        (*(void (**)(uint64_t, void, void))(*(void *)v33 + 16))(v33, v73, 0);
        char v70 = 0;
        unsigned int v30 = 1;
      }
      else if (v74)
      {
        unsigned int v30 = 0;
        if (!(_WORD)v25 && v68 == v26) {
          goto LABEL_82;
        }
      }
      else
      {
        unsigned int v30 = 0;
        if (!v26 && v68 == (__int16)v25) {
          goto LABEL_82;
        }
      }
      goto LABEL_103;
    }
    if (!*((unsigned char *)this + 1996)) {
      goto LABEL_101;
    }
    if (v74)
    {
      unsigned int v30 = 0;
      if ((__int16)v25 >= 1 && v26 - 1 == v69) {
        goto LABEL_71;
      }
      goto LABEL_103;
    }
    unsigned int v30 = 0;
    if (!v26 || (__int16)v25 - 1 != v69) {
      goto LABEL_103;
    }
    goto LABEL_81;
  }
  if (!v74)
  {
    int v32 = (__int16)v25 - 1;
    if (*((unsigned char *)this + 1996))
    {
      if (v32 != v71) {
        goto LABEL_101;
      }
    }
    else if (v32 != a4)
    {
      goto LABEL_101;
    }
    if (!v26)
    {
LABEL_101:
      unsigned int v30 = 0;
      goto LABEL_103;
    }
LABEL_81:
    unsigned int v30 = v28 - 1;
    goto LABEL_82;
  }
  unsigned int v31 = v26 - 1;
  if (*((unsigned char *)this + 1996))
  {
    if (v31 != v71) {
      goto LABEL_101;
    }
  }
  else if (v31 != a4)
  {
    goto LABEL_101;
  }
  if ((__int16)v25 <= 0) {
    goto LABEL_101;
  }
LABEL_71:
  unsigned int v30 = v29 - 1;
LABEL_82:
  unsigned int v34 = (unsigned __int16)v9->var1;
  if (v34 > 0x202)
  {
    if (v34 == 516) {
      goto LABEL_90;
    }
    if (v34 != 515) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  if (v34 == 3)
  {
LABEL_88:
    if (v23) {
    else
    }
      uint64_t v35 = 0;
    int v38 = (char *)operator new(0x18uLL);
    uint64_t v41 = v35[2];
    *((_WORD *)v38 + 4) = -1;
    *(void *)int v38 = &unk_26EBDE958;
    *((void *)v38 + 2) = v41;
    goto LABEL_99;
  }
  if (v34 != 4)
  {
LABEL_92:
    BOOL v37 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v37);
    OcText::allocBuffer(v37, 1u, 1);
    int v38 = (char *)operator new(0x40uLL);
    *((_WORD *)v38 + 4) = -1;
    *(void *)int v38 = &unk_26EBDE8E0;
    OcText::OcText((OcText *)(v38 + 16));
    uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v39 + 48))(v39);
    OcText::operator=(v40, (uint64_t)v37);
    goto LABEL_98;
  }
LABEL_90:
  if (v23) {
  else
  }
    uint64_t v36 = 0;
  if (!v36[2]) {
    goto LABEL_101;
  }
  BOOL v37 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v37);
  v37->int var1 = 1;
  OcText::operator=((uint64_t)v37, v36[2] + 8);
  int v38 = (char *)operator new(0x40uLL);
  *((_WORD *)v38 + 4) = -1;
  *(void *)int v38 = &unk_26EBDE8E0;
  OcText::OcText((OcText *)(v38 + 16));
  uint64_t v43 = (*(uint64_t (**)(void *))(*(void *)v42 + 48))(v42);
  OcText::operator=(v43, (uint64_t)v37);
LABEL_98:
  (*((void (**)(OcText *))v37->var0 + 1))(v37);
LABEL_99:
  *((_WORD *)v38 + 4) = v24;
  XlChartLinkedData::takeEnteredData((uint64_t)a2, v30, (uint64_t *)v38);
  if (a3)
  {
    unsigned int v30 = 0;
    char v72 = 1;
  }
  else
  {
    uint64_t v44 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v44 + 16))(v44, v73, 0);
    unsigned int v30 = 1;
    char v72 = 1;
    char v70 = 1;
  }
LABEL_103:
  if (v23) {
    (*(void (**)(XlNumberFP *))(*(void *)v23 + 8))(v23);
  }
  if (!v30 || v30 == 3) {
    goto LABEL_107;
  }
  char v64 = v70;
LABEL_134:
  MEMORY[0x23EC997B0](v9, 0x1000C4087442A64);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)&v80);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)v76);
  if (!v30) {
    char v64 = v72 & 1;
  }
  return v64 & 1;
}

void sub_238BD7B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  operator delete(v21);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  MEMORY[0x23EC997B0](v18, 0x1000C4087442A64);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr(&a18);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr(&a14);
  _Unwind_Resume(a1);
}

uint64_t **XlChartLinkedData::takeEnteredData(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v9 = a2;
  int v4 = (uint64_t **)(a1 + 32);
  int v5 = *(uint64_t **)(a1 + 40);
  if (!v5) {
    goto LABEL_10;
  }
  while (1)
  {
    unsigned int v6 = *((_DWORD *)v5 + 8);
    if (v6 <= a2) {
      break;
    }
LABEL_5:
    int v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v6 < a2)
  {
    ++v5;
    goto LABEL_5;
  }
  uint64_t v10 = &v9;
  int v7 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v9, (uint64_t)&std::piecewise_construct, &v10)[5];
  if (v7) {
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
  }
  uint64_t v10 = &v9;
  std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v9, (uint64_t)&std::piecewise_construct, &v10)[5] = 0;
LABEL_10:
  uint64_t v10 = &v9;
  uint64_t result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v9, (uint64_t)&std::piecewise_construct, &v10);
  result[5] = a3;
  return result;
}

uint64_t XlChartEnteredText::getTextReference(XlChartEnteredText *this)
{
  return (uint64_t)this + 16;
}

void XlBlank::~XlBlank(XlBlank *this)
{
}

uint64_t XlChartDataSeries::takeValueLink(XlChartDataSeries *this, XlChartLinkedData *a2)
{
  uint64_t result = *((void *)this + 19);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 19) = a2;
  return result;
}

void XlLabel::XlLabel(XlLabel *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDFF28;
  v2[2] = 0;
  *(void *)((char *)v2 + 22) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlLabel *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (*((_WORD *)a2 + 6) == 4) {
    (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  uint64_t v6 = **((void **)this + 2);
  if (*((_WORD *)a2 + 6) == 4)
  {
    int v7 = (*(uint64_t (**)(void))(v6 + 64))();
  }
  else
  {
    int v7 = (*(uint64_t (**)(void))(v6 + 72))();
    if (v7 < 0)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
  }
  if (v7)
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 14);
    if (v8 > 8 || v8 == 1) {
      char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    else {
      char v9 = 0;
    }
    uint64_t v10 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v10);
    *((void *)this + 4) = v10;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)v7, v9, v5 + v4, v10);
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BD8310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlLabel::~XlLabel(XlLabel *this)
{
  *(void *)this = &unk_26EBDFF28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDFF28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartDataSeries::takeCategoryLink(XlChartDataSeries *this, XlChartLinkedData *a2)
{
  uint64_t result = *((void *)this + 20);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 20) = a2;
  return result;
}

uint64_t XlChartDataSeries::takeSizeLink(XlChartDataSeries *this, XlChartLinkedData *a2)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 21) = a2;
  return result;
}

void XlChartDataFormat::XlChartDataFormat(XlChartDataFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDBAE8;
  v2[2] = 0;
}

void XlChartSeriesFormat::XlChartSeriesFormat(XlChartSeriesFormat *this)
{
  this->var0 = (void **)&unk_26EBDCDD8;
  *(_OWORD *)&this->int var1 = 0u;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(void *)&this->var7 = 0;
  *(void *)&this->var9 = 0xFFFFFFFFLL;
  this->var12 = 0;
  *(void *)&this->var13 = 0;
  *(void *)&this->var16 = 0;
}

uint64_t XlChartCatSerRange::isBetween(XlChartCatSerRange *this)
{
  return *((_WORD *)this + 11) & 1;
}

uint64_t XlChartBinaryReader::mapSeriesFormat(XlChartBinaryReader *this, XlChartSeriesFormat *a2)
{
  int v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
  if (v4->var1 == 4147)
  {
    char v5 = 0;
    *((_DWORD *)this + 485) = -1;
    while (XlChartBinaryReader::nextSibling(this, v4))
    {
      int var1 = v4->var1;
      if (var1 > 4188)
      {
        switch(var1)
        {
          case 4189:
            BOOL v13 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartSerFmt::XlChartSerFmt((XlChartSerFmt *)v13, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned __int16 *))(**((void **)this + 167) + 2208))(*((void *)this + 167), v13);
            a2->var22 = XlChartArea::isStacked((XlChartArea *)v13);
            a2->var15 = XlChartArea::isCategoryPercentage((XlChartArea *)v13);
            a2->var16 = XlChartAttachedLabel::isShowLabPct((XlChartAttachedLabel *)v13);
            if (v13) {
LABEL_24:
            }
              (*(void (**)(unsigned __int16 *))(*(void *)v13 + 8))(v13);
            break;
          case 4191:
            XlChartShape::XlChartShape((XlChartShape *)v20, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned int **))(**((void **)this + 167) + 2256))(*((void *)this + 167), v20);
            a2->var13 = v21;
            XlChartShape::~XlChartShape((XlChartShape *)v20);
            break;
          case 4198:
            if (a2->var9 < 0)
            {
              if ((v5 & 1) == 0)
              {
                int v14 = *((unsigned __int16 *)this + 936);
                unsigned int v24 = v14 | (a2->var12 << 16);
                *((_WORD *)this + 936) = v14 + 1;
                uint64_t v15 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
                int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
                v20[0] = &v24;
                *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 231, &v24, (uint64_t)&std::piecewise_construct, v20)+ 8) = v16;
              }
              char v5 = 1;
            }
            else
            {
              unsigned int v24 = (unsigned __int16)a2->var9 | (a2->var12 << 16);
              uint64_t v8 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
              int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
              v20[0] = &v24;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 238, &v24, (uint64_t)&std::piecewise_construct, v20)+ 8) = v9;
            }
            XlParserVisitor::seekNextRecord(*((void *)this + 167));
            uint64_t v17 = (XlChartPicF *)operator new(0x28uLL);
            XlChartPicF::XlChartPicF(v17);
            XlChartBinaryReader::readPictureFormat(this, v17);
            XlChartSeriesFormat::takePictureFormat(a2, v17);
            break;
          default:
LABEL_17:
            XlParserVisitor::seekNextRecord(*((void *)this + 167));
            break;
        }
      }
      else
      {
        switch(v4->var1)
        {
          case 0x1007:
            int v7 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties(this);
            XlChartSeriesFormat::takeLineStyle(a2, v7);
            break;
          case 0x1008:
            goto LABEL_17;
          case 0x1009:
            uint64_t v11 = (XlChartMarkerStyle *)XlChartBinaryReader::mapMarkerProperties(this);
            XlChartSeriesFormat::takeMarkerStyle(a2, v11);
            break;
          case 0x100A:
            int v12 = (XlChartFillStyle *)XlChartBinaryReader::mapFillProperties(this);
            XlChartSeriesFormat::takeFillStyle(a2, v12);
            break;
          case 0x100B:
            BOOL v13 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartPieFormat::XlChartPieFormat((XlChartPieFormat *)v13, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned __int16 *))(**((void **)this + 167) + 2112))(*((void *)this + 167), v13);
            a2->var10 = v13[8];
            goto LABEL_24;
          case 0x100C:
            BOOL v13 = (unsigned __int16 *)operator new(0x18uLL);
            XlChartAttachedLabel::XlChartAttachedLabel((XlChartAttachedLabel *)v13, v4);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(void, unsigned __int16 *))(**((void **)this + 167) + 1848))(*((void *)this + 167), v13);
            a2->var17 = XlChartArea::isStacked((XlChartArea *)v13);
            a2->var18 = XlChartArea::isCategoryPercentage((XlChartArea *)v13);
            a2->var20 = XlChartAttachedLabel::isShowLabPct((XlChartAttachedLabel *)v13);
            a2->var14 = XlChartAttachedLabel::isSmoothedLine((XlChartAttachedLabel *)v13);
            a2->var19 = XlChartAttachedLabel::isShowLabel((XlChartAttachedLabel *)v13);
            a2->var21 = XlChartAttachedLabel::isShowBubbleSizes((XlChartAttachedLabel *)v13);
            if (v13) {
              goto LABEL_24;
            }
            break;
          default:
            if (var1 != 2212) {
              goto LABEL_17;
            }
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
            XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v20, v4);
            (*(void (**)(void, unsigned int **))(**((void **)this + 167) + 2392))(*((void *)this + 167), v20);
            if (v23)
            {
              if (v23 == 1)
              {
                unsigned int v10 = v22;
                a2->var8 = v22;
                if (v10) {
                  a2->var6 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v20);
                }
              }
            }
            else
            {
              unsigned int v18 = v22;
              a2->var7 = v22;
              if (v18) {
                a2->var5 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v20);
              }
            }
            XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v20);
            break;
        }
      }
    }
  }
  return MEMORY[0x23EC997B0](v4, 0x1000C4087442A64);
}

void sub_238BD8B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)va);
  MEMORY[0x23EC997B0](v3, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartShape::XlChartShape(XlChartShape *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC2B0;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartDataSeries::takeDefaultFormat(XlChartDataSeries *this, XlChartSeriesFormat *a2)
{
  if (a2)
  {
    unint64_t v6 = *((void *)this + 5);
    int v4 = (char *)this + 40;
    unint64_t v5 = v6;
    int v7 = (void *)*((void *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *((void *)this + 3);
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        int v14 = 0;
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
      unsigned int v18 = &v14[8 * v16];
      *(void *)uint64_t v17 = a2;
      uint64_t v8 = v17 + 8;
      uint64_t v20 = (char *)*((void *)this + 3);
      uint64_t v19 = (char *)*((void *)this + 4);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)*((void *)this + 3);
      }
      *((void *)this + 3) = v17;
      *((void *)this + 4) = v8;
      *((void *)this + 5) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *int v7 = a2;
      uint64_t v8 = v7 + 1;
    }
    *((void *)this + 4) = v8;
  }
}

void XlChartDataFormat::~XlChartDataFormat(XlChartDataFormat *this)
{
}

void sub_238BD8F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartTextFrame::XlChartTextFrame(XlChartTextFrame *this)
{
  XlChartFrameType::XlChartFrameType((XlChartFrameType *)this);
  *(void *)uint64_t v1 = &unk_26EBDADC0;
  *(void *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 96) = 255;
  *(void *)(v1 + 106) = 0;
  *(void *)(v1 + 98) = 0;
  *(void *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 120) = xmmword_238EDEE70;
  *(_DWORD *)(v1 + 136) = 0;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(void *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 184) = 5111807;
  *(void *)(v1 + 188) = 0;
  *(void *)(v1 + 194) = 0;
  *(unsigned char *)(v1 + 202) = 1;
  *(void *)(v1 + 208) = 0;
}

XlParserVisitor **XlChartBinaryReader::read(XlParserVisitor **this, XlChartTextFrame *a2)
{
  uint64_t v2 = *(unsigned int *)((char *)this + ((uint64_t)((unint64_t)*((unsigned int *)a2 + 54) << 48) >> 46) + 1580);
  if ((v2 & 0x80000000) == 0) {
    return (XlParserVisitor **)XlChartBinaryReader::readTextFrame(this, a2, v2, 1);
  }
  return this;
}

void sub_238BD9100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD918C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BD93F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void XlChartTextFrame::~XlChartTextFrame(XlChartTextFrame *this)
{
  *(void *)this = &unk_26EBDADC0;
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 13) = 0;
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 26) = 0;
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 11) = 0;
  uint64_t v5 = *((void *)this + 14);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 14) = 0;
  unint64_t v6 = (void *)*((void *)this + 18);
  if (v6)
  {
    *((void *)this + 19) = v6;
    operator delete(v6);
  }
  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)this);
}

{
  uint64_t vars8;

  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void XlChartFrameType::~XlChartFrameType(XlChartFrameType *this)
{
  this->var0 = (void **)&unk_26EBDC590;
  var9 = this->var9;
  if (var9) {
    (*((void (**)(XlChartLineStyle *))var9->var0 + 1))(var9);
  }
  this->var9 = 0;
  var10 = this->var10;
  if (var10) {
    (*((void (**)(XlChartFillStyle *))var10->var0 + 1))(var10);
  }
  this->var10 = 0;
  var11 = this->var11;
  if (var11) {
    (*((void (**)(XlChartPicF *))var11->var0 + 1))(var11);
  }
  this->var11 = 0;
  var15 = this->var15;
  if (var15) {
    MEMORY[0x23EC99790](var15, 0x1000C8077774924);
  }
  this->var15 = 0;
}

{
  uint64_t vars8;

  XlChartFrameType::~XlChartFrameType(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartBinaryReader::readTextFrame(XlParserVisitor **this, XlChartTextFrame *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 16))(v8, a3, 0);
  uint64_t v9 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v9);
  XlParserVisitor::getHeader(this[167], v9, *((unsigned char *)this + 444));
  if (v9->var1 == 2132)
  {
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
    XlParserVisitor::getHeader(this[167], v9, *((unsigned char *)this + 444));
  }
  unint64_t v10 = this[167];
  if (*((unsigned char *)v10 + 100))
  {
    *((void *)a2 + 21) = *(void *)((char *)v10 + 92);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
  }
  *((unsigned char *)a2 + 201) = v11;
  unsigned int v12 = (char *)operator new(0x38uLL);
  XlChartText::XlChartText((XlChartText *)v12, v9);
  (*(void (**)(XlParserVisitor *, char *))(*(void *)this[167] + 2288))(this[167], v12);
  *(float32x4_t *)((char *)a2 + 8) = vcvtq_f32_s32(*(int32x4_t *)(v12 + 20));
  *((void *)a2 + 15) = *((void *)v12 + 6);
  *((unsigned char *)a2 + 189) = XlChartText::isAutoBackground((XlChartText *)v12);
  *((_DWORD *)a2 + 32) = *((_DWORD *)v12 + 11);
  *((_WORD *)a2 + 93) = *((_WORD *)v12 + 18);
  *((unsigned char *)a2 + 188) = XlChartLegend::isAutoPosition((XlChartLegend *)v12);
  *((unsigned char *)a2 + 190) = XlChartLegend::isAutoYPos((XlChartLegend *)v12);
  *((unsigned char *)a2 + 191) = XlChartText::isGenerated((XlChartText *)v12);
  *((unsigned char *)a2 + 192) = XlChartLegend::isVertical((XlChartLegend *)v12);
  *((unsigned char *)a2 + 193) = XlChartText::isDeleted((XlChartText *)v12);
  *((unsigned char *)a2 + 195) = XlChartText::isShowKey((XlChartText *)v12);
  *((unsigned char *)a2 + 196) = XlChartLegend::isAutoXPos((XlChartLegend *)v12);
  if (XlChartLegend::isAutoXPos((XlChartLegend *)v12))
  {
    char isShowLabelPercent = 0;
  }
  else if (XlChartText::isShowLabel((XlChartText *)v12))
  {
    char isShowLabelPercent = 1;
  }
  else
  {
    char isShowLabelPercent = XlChartText::isShowLabelPercent((XlChartText *)v12);
  }
  *((unsigned char *)a2 + 197) = isShowLabelPercent;
  if (XlChartText::isShowPercent((XlChartText *)v12)) {
    char v14 = 1;
  }
  else {
    char v14 = XlChartText::isShowLabelPercent((XlChartText *)v12);
  }
  *((unsigned char *)a2 + 199) = v14;
  *((unsigned char *)a2 + 200) = XlChartText::isShowBubbleSizes((XlChartText *)v12);
  *((_DWORD *)a2 + 34) = XlChartText::getDataLabelPlacement((XlChartText *)v12);
  int v15 = *((__int16 *)v12 + 19);
  if (v15 > 90) {
    LOWORD(v15) = 90 - v15;
  }
  *((_WORD *)a2 + 88) = v15;
  *((unsigned char *)a2 + 194) = 0;
  int Rotation = XlChartText::getRotation((XlChartText *)v12);
  switch(Rotation)
  {
    case 1:
      __int16 v17 = 0;
      *((unsigned char *)a2 + 194) = 1;
      goto LABEL_22;
    case 2:
      __int16 v17 = 90;
      goto LABEL_22;
    case 3:
      __int16 v17 = -90;
LABEL_22:
      *((_WORD *)a2 + 88) = v17;
      break;
  }
  int v18 = *((_DWORD *)v12 + 4);
  *((_WORD *)a2 + 48) = 255;
  *((_WORD *)a2 + 49) = v18;
  *((_WORD *)a2 + 50) = BYTE1(v18);
  *((_WORD *)a2 + 51) = BYTE2(v18);
  XlParserVisitor::getHeader(this[167], v9, *((unsigned char *)this + 444));
  if (v9->var1 != 4147) {
    goto LABEL_69;
  }
  __int16 v32 = -1;
  while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v9))
  {
    int var1 = v9->var1;
    if (var1 > 4174)
    {
      if (var1 != 4175)
      {
        if (var1 == 4176)
        {
          XlParserVisitor::skipHeader(this[167]);
          int v23 = (__int16 *)operator new(0x20uLL);
          XlChartAlRuns::XlChartAlRuns((XlChartAlRuns *)v23, v9);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 1824))(this[167], v23);
          if (v23[12])
          {
            int v28 = 0;
            do
            {
              int v34 = *(_DWORD *)XlChartAlRuns::getRichTextRun((XlChartAlRuns *)v23, (unsigned __int16)v28);
              XlChartTextFrame::pushTextRun(a2, &v34);
              ++v28;
            }
            while ((unsigned __int16)v23[12] > (unsigned __int16)v28);
          }
        }
        else
        {
          if (var1 != 4177) {
            goto LABEL_49;
          }
          XlParserVisitor::skipHeader(this[167]);
          int v23 = (__int16 *)operator new(0x28uLL);
          XlChartAI::XlChartAI((XlChartAI *)v23, v9);
          if (*((_DWORD *)this + 348) == 0x8000) {
            *((unsigned char *)v23 + 14) = 1;
          }
          (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 1816))(this[167], v23);
          *((_DWORD *)a2 + 33) = *((_DWORD *)v23 + 5);
          *((unsigned char *)a2 + 202) = XlChartAI::isCustomNumberFormat((XlChartAI *)v23) ^ 1;
          *((_WORD *)a2 + 92) = v23[16];
          int v24 = v23[17];
          *((_WORD *)a2 + 89) = v23[17];
          if (v24 >= 1) {
            *((void *)a2 + 13) = XlChartAI::giveParsedFormula((XlChartAI *)v23);
          }
        }
        goto LABEL_64;
      }
      unsigned int v22 = this[167];
      if (a4)
      {
        XlParserVisitor::skipHeader(v22);
        int v23 = (__int16 *)operator new(0x28uLL);
        XlChartPos::XlChartPos((XlChartPos *)v23, v9);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2152))(this[167], v23);
        *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)v23 + 1);
        goto LABEL_64;
      }
LABEL_50:
      XlParserVisitor::seekNextRecord((uint64_t)v22);
    }
    else if (var1 <= 4108)
    {
      if (var1 > 2212)
      {
        if (var1 == 2213)
        {
          int v23 = (__int16 *)operator new(0x20uLL);
          XlChartTextPropsStream::XlChartTextPropsStream((XlChartTextPropsStream *)v23, v9);
          XlParserVisitor::skipHeader(this[167]);
          (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2376))(this[167], v23);
          int v27 = *((_DWORD *)v23 + 6);
          if (!v27) {
            goto LABEL_64;
          }
LABEL_55:
          *((_DWORD *)a2 + 45) = v27;
          *((void *)a2 + 14) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v23);
          goto LABEL_64;
        }
        if (var1 != 2214) {
          goto LABEL_49;
        }
        int v23 = (__int16 *)operator new(0x20uLL);
        XlChartRichTextPropsStream::XlChartRichTextPropsStream((XlChartRichTextPropsStream *)v23, v9);
        XlParserVisitor::skipHeader(this[167]);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2384))(this[167], v23);
        int v27 = *((_DWORD *)v23 + 6);
        if (v27) {
          goto LABEL_55;
        }
      }
      else if (var1 == 2155)
      {
        int v23 = (__int16 *)operator new(0x20uLL);
        XlChartCustomLabel::XlChartCustomLabel((XlChartCustomLabel *)v23, v9);
        XlParserVisitor::skipHeader(this[167]);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2336))(this[167], v23);
        char v26 = *((unsigned char *)v23 + 24);
        *((unsigned char *)a2 + 196) = (v26 & 4) != 0;
        *((unsigned char *)a2 + 197) = (v26 & 2) != 0;
        *((unsigned char *)a2 + 198) = v26 & 1;
        *((unsigned char *)a2 + 199) = (v26 & 8) != 0;
        *((unsigned char *)a2 + 200) = (v26 & 0x10) != 0;
        *((void *)a2 + 26) = *((void *)v23 + 2);
        *((void *)v23 + 2) = 0;
      }
      else
      {
        if (var1 != 2212) {
          goto LABEL_49;
        }
        int v23 = (__int16 *)operator new(0x28uLL);
        XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v23, v9);
        XlParserVisitor::skipHeader(this[167]);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2392))(this[167], v23);
        int v25 = *((_DWORD *)v23 + 6);
        if (v25)
        {
          *((_DWORD *)a2 + 20) = v25;
          *((void *)a2 + 9) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v23);
        }
      }
LABEL_64:
      (*(void (**)(__int16 *))(*(void *)v23 + 8))(v23);
    }
    else
    {
      if (var1 != 4146)
      {
        if (var1 != 4109)
        {
          if (var1 == 4134)
          {
            XlParserVisitor::skipHeader(this[167]);
            int v23 = (__int16 *)operator new(0x18uLL);
            XlChartFontX::XlChartFontX((XlChartFontX *)v23, v9);
            (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2008))(this[167], v23);
            __int16 v32 = v23[8];
            goto LABEL_64;
          }
LABEL_49:
          unsigned int v22 = this[167];
          goto LABEL_50;
        }
        XlParserVisitor::skipHeader(this[167]);
        int v23 = (__int16 *)operator new(0x20uLL);
        XlChartSeriesText::XlChartSeriesText((XlChartSeriesText *)v23, v9);
        (*(void (**)(XlParserVisitor *, __int16 *))(*(void *)this[167] + 2232))(this[167], v23);
        if (*((void *)v23 + 2))
        {
          int v29 = (OcText *)operator new(0x30uLL);
          OcText::OcText(v29);
          OcText::operator=((uint64_t)v29, *((void *)v23 + 2) + 8);
          uint64_t v30 = *((void *)a2 + 11);
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          *((void *)a2 + 11) = v29;
        }
        goto LABEL_64;
      }
      uint64_t v20 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
      XlChartBinaryReader::readFrameFormatting(this, (XlChartFrameType *)a2, v21);
    }
  }
  if (((*((_DWORD *)a2 + 38) - *((_DWORD *)a2 + 36)) & 0x3FFFC) == 0 && (v32 & 0x8000) == 0)
  {
    LOWORD(v33) = 0;
    HIWORD(v33) = v32;
    XlChartTextFrame::pushTextRun(a2, &v33);
  }
  if (v12) {
LABEL_69:
  }
    (*(void (**)(char *))(*(void *)v12 + 8))(v12);
  return MEMORY[0x23EC997B0](v9, 0x1000C4087442A64);
}

void sub_238BDA030(_Unwind_Exception *a1)
{
  if (v4) {
    XlChartBinaryReader::readTextFrame();
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

void XlChartText::XlChartText(XlChartText *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC3B0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
}

uint64_t XlChartText::isAutoBackground(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 7) & 1;
}

uint64_t XlChartLegend::isAutoPosition(XlChartLegend *this)
{
  return *((_WORD *)this + 20) & 1;
}

uint64_t XlChartLegend::isAutoYPos(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 3) & 1;
}

uint64_t XlChartText::isGenerated(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 5) & 1;
}

uint64_t XlChartLegend::isVertical(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 4) & 1;
}

uint64_t XlChartText::isDeleted(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 6) & 1;
}

uint64_t XlChartText::isShowKey(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 1) & 1;
}

uint64_t XlChartLegend::isAutoXPos(XlChartLegend *this)
{
  return (*((unsigned __int16 *)this + 20) >> 2) & 1;
}

uint64_t XlChartText::isShowLabel(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 14) & 1;
}

uint64_t XlChartText::isShowLabelPercent(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 11) & 1;
}

uint64_t XlChartText::isShowPercent(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 12) & 1;
}

uint64_t XlChartText::isShowBubbleSizes(XlChartText *this)
{
  return (*((unsigned __int16 *)this + 20) >> 13) & 1;
}

uint64_t XlChartText::getDataLabelPlacement(XlChartText *this)
{
  return *((_WORD *)this + 21) & 0xF;
}

uint64_t XlChartText::getRotation(XlChartText *this)
{
  return *((unsigned char *)this + 41) & 7;
}

void XlChartPos::XlChartPos(XlChartPos *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBFB0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

void XlChartPos::~XlChartPos(XlChartPos *this)
{
}

void XlChartFontX::XlChartFontX(XlChartFontX *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBC28;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartFontX::~XlChartFontX(XlChartFontX *this)
{
}

void XlChartText::~XlChartText(XlChartText *this)
{
}

void sub_238BDA8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDA964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDAA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDAAB0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238BDABF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDACA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDAD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDAE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDAFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDB148(_Unwind_Exception *a1, XlChartFrameType *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)&a10);
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::read(XlParserVisitor **this, XlChartPlotFrame *a2)
{
  uint64_t v4 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, *((unsigned int *)this + 399), 0);
  uint64_t v5 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v5);
  XlParserVisitor::getHeader(this[167], v5, *((unsigned char *)this + 444));
  unint64_t v6 = (char *)operator new(0x28uLL);
  XlChartAxisParent::XlChartAxisParent((XlChartAxisParent *)v6, v5);
  (*(void (**)(XlParserVisitor *, char *))(*(void *)this[167] + 1888))(this[167], v6);
  *(float32x4_t *)((char *)a2 + 8) = vcvtq_f32_s32(*(int32x4_t *)(v6 + 20));
  XlChartBinaryReader::scanAxisParent((uint64_t)this, (uint64_t)(this + 208));
  if (*((int *)this + 415) >= 1)
  {
    uint64_t v7 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v7 + 16))(v7, *((unsigned int *)this + 415), 0);
    XlParserVisitor::getHeader(this[167], v5, *((unsigned char *)this + 444));
    uint64_t v8 = (XlChartPos *)operator new(0x28uLL);
    XlChartPos::XlChartPos(v8, v5);
    (*(void (**)(XlParserVisitor *, XlChartPos *))(*(void *)this[167] + 2152))(this[167], v8);
    *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)v8 + 1);
    (*(void (**)(XlChartPos *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((unsigned int *)this + 419);
  if ((int)v9 >= 1) {
    XlChartBinaryReader::readFrameFormatting(this, (XlChartFrameType *)a2, v9);
  }
  if (*((int *)this + 400) >= 1)
  {
    uint64_t v10 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v10 + 16))(v10, *((unsigned int *)this + 400), 0);
    XlParserVisitor::getHeader(this[167], v5, *((unsigned char *)this + 444));
    uint64_t v11 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, v5->var0, 1);
    XlChartBinaryReader::scanAxisParent((uint64_t)this, (uint64_t)(this + 215));
  }
  (*(void (**)(char *))(*(void *)v6 + 8))(v6);
  JUMPOUT(0x23EC997B0);
}

void sub_238BDB4F8(_Unwind_Exception *a1)
{
  if (v3) {
    XlChartBinaryReader::scanChartObjects(v3);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::scanAxisParent(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = -1;
  *(void *)(a2 + 8) = -1;
  *(void *)(a2 + 24) = *(void *)(a2 + 16);
  *(void *)(a2 + 40) = -1;
  *(_DWORD *)(a2 + 48) = -1;
  *(_DWORD *)(a1 + 1660) = -1;
  uint64_t v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), v4, *(unsigned char *)(a1 + 444));
  if (v4->var1 != 4147)
  {
LABEL_42:
    JUMPOUT(0x23EC997B0);
  }
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)a1, v4)) {
        goto LABEL_42;
      }
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
      int v7 = v6;
      int var1 = v4->var1;
      if (var1 > 4132) {
        break;
      }
      if (var1 == 4116)
      {
        char v14 = *(char **)(a2 + 24);
        unint64_t v13 = *(void *)(a2 + 32);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = *(char **)(a2 + 16);
          int64_t v17 = v14 - v16;
          unint64_t v18 = (unint64_t)(v14 - v16) >> 2;
          unint64_t v19 = (v13 - (unint64_t)v16) >> 2;
          if (2 * (int)v19 <= (v18 + 1)) {
            unsigned int v20 = v18 + 1;
          }
          else {
            unsigned int v20 = 2 * v19;
          }
          if (v19 >= 0x7FFFFFFF) {
            unint64_t v21 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            unsigned int v22 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(a2 + 32, v21);
            uint64_t v24 = v23;
            uint64_t v16 = *(char **)(a2 + 16);
            char v14 = *(char **)(a2 + 24);
          }
          else
          {
            unsigned int v22 = 0;
            uint64_t v24 = 0;
          }
          int v25 = &v22[v17 & 0x3FFFFFFFCLL];
          *(_DWORD *)int v25 = v7;
          int v15 = v25 + 4;
          while (v14 != v16)
          {
            int v26 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *(void *)(a2 + 16) = v25;
          *(void *)(a2 + 24) = v15;
          *(void *)(a2 + 32) = &v22[4 * v24];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_DWORD *)char v14 = v6;
          int v15 = v14 + 4;
        }
        *(void *)(a2 + 24) = v15;
LABEL_41:
        XlParserVisitor::seekNextRecord(*(void *)(a1 + 1336));
      }
      else
      {
        if (var1 != 4125) {
          goto LABEL_41;
        }
        XlParserVisitor::skipHeader(*(XlParserVisitor **)(a1 + 1336));
        uint64_t v9 = (XlChartAxis *)operator new(0x18uLL);
        XlChartAxis::XlChartAxis(v9, v4);
        (*(void (**)(void, XlChartAxis *))(**(void **)(a1 + 1336) + 1864))(*(void *)(a1 + 1336), v9);
        int v10 = *((_DWORD *)v9 + 4);
        if (v10)
        {
          if (v10 == 1)
          {
            *(_DWORD *)(a2 + 4) = v7;
          }
          else if (v10 == 2)
          {
            *(_DWORD *)(a2 + 8) = v7;
          }
        }
        else
        {
          *(_DWORD *)a2 = v7;
        }
        (*(void (**)(XlChartAxis *))(*(void *)v9 + 8))(v9);
      }
    }
    if (var1 == 4133)
    {
      int v11 = XlChartBinaryReader::scanTextForObjectType((XlChartBinaryReader *)a1, 0, 0);
      switch(v11)
      {
        case 2:
          *(_DWORD *)(a2 + 44) = v7;
          break;
        case 3:
          *(_DWORD *)(a2 + 40) = v7;
          break;
        case 7:
          *(_DWORD *)(a2 + 48) = v7;
          break;
      }
    }
    else
    {
      if (var1 != 4149)
      {
        if (var1 == 4175) {
          *(_DWORD *)(a1 + 1660) = v6;
        }
        goto LABEL_41;
      }
      XlParserVisitor::seekNextRecord(*(void *)(a1 + 1336));
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
    }
  }
}

void sub_238BDB944(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(exception_object);
}

void XlChartAxis::XlChartAxis(XlChartAxis *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB7E8;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartAxis::~XlChartAxis(XlChartAxis *this)
{
}

void XlChartBinaryReader::readFrameFormatting(XlParserVisitor **this, XlChartFrameType *a2, uint64_t a3)
{
  uint64_t v6 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 16))(v6, a3, 0);
  int v7 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v7);
  XlParserVisitor::getHeader(this[167], v7, *((unsigned char *)this + 444));
  uint64_t v8 = (XlChartFrame *)operator new(0x18uLL);
  XlChartFrame::XlChartFrame(v8, v7);
  (*(void (**)(XlParserVisitor *, XlChartFrame *))(*(void *)this[167] + 2016))(this[167], v8);
  a2->var12 = *((_DWORD *)v8 + 4) == 4;
  a2->var13 = XlChartBar::isStacked(v8);
  a2->var14 = XlChartBar::isTranspose(v8);
  XlParserVisitor::getHeader(this[167], v7, *((unsigned char *)this + 444));
  if (v7->var1 != 4147)
  {
LABEL_17:
    (*(void (**)(XlChartFrame *))(*(void *)v8 + 8))(v8);
    goto LABEL_18;
  }
  *((_DWORD *)this + 485) = -1;
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v7))
      {
        if (v8) {
          goto LABEL_17;
        }
LABEL_18:
        JUMPOUT(0x23EC997B0);
      }
      int var1 = v7->var1;
      if (var1 <= 4105) {
        break;
      }
      if (var1 == 4106)
      {
        int v15 = (XlChartFillStyle *)XlChartBinaryReader::mapFillProperties((XlChartBinaryReader *)this);
        XlChartFrameType::takeAreaFillStyle(a2, v15);
      }
      else if (var1 == 4198)
      {
        uint64_t v11 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
        *((_DWORD *)this + 485) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
        XlParserVisitor::seekNextRecord((uint64_t)this[167]);
        uint64_t v12 = (XlChartPicF *)operator new(0x28uLL);
        XlChartPicF::XlChartPicF(v12);
        XlChartBinaryReader::readPictureFormat((XlChartBinaryReader *)this, v12);
        XlChartFrameType::takePictureFormat(a2, v12);
      }
      else
      {
LABEL_15:
        XlParserVisitor::seekNextRecord((uint64_t)this[167]);
      }
    }
    if (var1 == 2212)
    {
      unint64_t v13 = (XlChartShapePropsStream *)operator new(0x28uLL);
      XlChartShapePropsStream::XlChartShapePropsStream(v13, v7);
      XlParserVisitor::skipHeader(this[167]);
      (*(void (**)(XlParserVisitor *, XlChartShapePropsStream *))(*(void *)this[167] + 2392))(this[167], v13);
      unsigned int v14 = *((_DWORD *)v13 + 6);
      if (v14)
      {
        a2->var16 = v14;
        a2->var15 = (char *)XlChartRichTextPropsStream::giveXmlStream(v13);
      }
      (*(void (**)(XlChartShapePropsStream *))(*(void *)v13 + 8))(v13);
    }
    else
    {
      if (var1 != 4103) {
        goto LABEL_15;
      }
      int v10 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)this);
      XlChartFrameType::takeBorderStyle(a2, v10);
    }
  }
}

void sub_238BDBE04(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

void XlChartFrame::XlChartFrame(XlChartFrame *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBC68;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlChartBar::isStacked(XlChartBar *this)
{
  return (*((unsigned __int16 *)this + 10) >> 1) & 1;
}

uint64_t XlChartBar::isTranspose(XlChartBar *this)
{
  return *((_WORD *)this + 10) & 1;
}

uint64_t XlChartBinaryReader::mapLineProperties(XlChartBinaryReader *this)
{
  uint64_t v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((unsigned char *)this + 444));
  if (v2->var1 == 4103)
  {
    uint64_t v3 = (char *)operator new(0x20uLL);
    XlChartLineFormat::XlChartLineFormat((XlChartLineFormat *)v3, v2);
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 69);
    (*(void (**)(void, char *))(**((void **)this + 167) + 2064))(*((void *)this + 167), v3);
    int v5 = *((_DWORD *)v3 + 4);
    *(_WORD *)(v4 + 8) = 255;
    *(_WORD *)(v4 + 10) = v5;
    *(_WORD *)(v4 + 12) = BYTE1(v5);
    *(_WORD *)(v4 + 14) = BYTE2(v5);
    *(void *)(v4 + 16) = *(void *)(v3 + 20);
    *(unsigned char *)(v4 + 26) = XlChart3D::isPerspective((XlChart3D *)v3);
    *(_WORD *)(v4 + 24) = *((_WORD *)v3 + 15);
    *(unsigned char *)(v4 + 27) = XlChart3D::is3DScaling((XlChart3D *)v3);
    *(unsigned char *)(v4 + 28) = (v3[28] & 8) != 0;
    uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    while (XlChartBinaryReader::nextSibling(this, v2))
    {
      int var1 = (unsigned __int16)v2->var1;
      if (var1 == 2249)
      {
        int v10 = (XlChartDTLineFormat *)operator new(0x20uLL);
        XlChartDTLineFormat::XlChartDTLineFormat(v10, v2);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(void, XlChartDTLineFormat *))(**((void **)this + 167) + 2072))(*((void *)this + 167), v10);
        *(_DWORD *)(v4 + 32) = *((_DWORD *)v10 + 6);
        *(_DWORD *)(v4 + 36) = *((_DWORD *)v10 + 5);
        (*(void (**)(XlChartDTLineFormat *))(*(void *)v10 + 8))(v10);
      }
      else
      {
        if (var1 == 4103 || var1 == 4129) {
          break;
        }
        XlParserVisitor::seekNextRecord(*((void *)this + 167));
      }
    }
    uint64_t v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v11 + 16))(v11, v7, 0);
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((void *)this + 167));
    uint64_t v4 = 0;
  }
  MEMORY[0x23EC997B0](v2, 0x1000C4087442A64);
  return v4;
}

void sub_238BDC314(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  goto LABEL_5;
}

void XlChartLineFormat::XlChartLineFormat(XlChartLineFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDBDE8;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChart3D::isPerspective(XlChart3D *this)
{
  return this->var8 & 1;
}

uint64_t XlChart3D::is3DScaling(XlChart3D *this)
{
  return ((unsigned __int16)this->var8 >> 2) & 1;
}

void XlChartLineFormat::~XlChartLineFormat(XlChartLineFormat *this)
{
}

XlChartLineStyle *XlChartFrameType::takeBorderStyle(XlChartFrameType *this, XlChartLineStyle *a2)
{
  uint64_t result = this->var9;
  if (result) {
    uint64_t result = (XlChartLineStyle *)(*((uint64_t (**)(XlChartLineStyle *))result->var0 + 1))(result);
  }
  this->var9 = a2;
  return result;
}

uint64_t XlChartBinaryReader::mapFillProperties(XlChartBinaryReader *this)
{
  uint64_t v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((unsigned char *)this + 444));
  if (v2->var1 == 4106)
  {
    uint64_t v3 = (char *)operator new(0x20uLL);
    XlChartAreaFormat::XlChartAreaFormat((XlChartAreaFormat *)v3, v2);
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 66);
    (*(void (**)(void, char *))(**((void **)this + 167) + 1840))(*((void *)this + 167), v3);
    int v5 = *((_DWORD *)v3 + 4);
    int v6 = *((_DWORD *)v3 + 5);
    *(_WORD *)(v4 + 10) = v5;
    *(_WORD *)(v4 + 8) = 255;
    *(_WORD *)(v4 + 12) = BYTE1(v5);
    *(_WORD *)(v4 + 14) = BYTE2(v5);
    *(_WORD *)(v4 + 16) = 255;
    *(_WORD *)(v4 + 18) = v6;
    *(_WORD *)(v4 + 20) = BYTE1(v6);
    *(_WORD *)(v4 + 22) = BYTE2(v6);
    *(_WORD *)(v4 + 24) = *((_WORD *)v3 + 12);
    *(unsigned char *)(v4 + 30) = XlChartAreaFormat::isInvertNegative((XlChartAreaFormat *)v3);
    *(unsigned char *)(v4 + 31) = XlChartAreaFormat::isAuto((XlChartAreaFormat *)v3);
    *(_DWORD *)(v4 + 26) = *(_DWORD *)(v3 + 26);
    *(unsigned char *)(v4 + 32) = XlChartAreaFormat::isShadow((XlChartAreaFormat *)v3);
    (*(void (**)(char *))(*(void *)v3 + 8))(v3);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((void *)this + 167));
    uint64_t v4 = 0;
  }
  MEMORY[0x23EC997B0](v2, 0x1000C4087442A64);
  return v4;
}

void sub_238BDC7A4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartAreaFormat::XlChartAreaFormat(XlChartAreaFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDB728;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChartAreaFormat::isInvertNegative(XlChartAreaFormat *this)
{
  return (*((unsigned __int16 *)this + 15) >> 1) & 1;
}

uint64_t XlChartAreaFormat::isAuto(XlChartAreaFormat *this)
{
  return *((_WORD *)this + 15) & 1;
}

uint64_t XlChartAreaFormat::isShadow(XlChartAreaFormat *this)
{
  return (*((unsigned __int16 *)this + 15) >> 2) & 1;
}

void XlChartAreaFormat::~XlChartAreaFormat(XlChartAreaFormat *this)
{
}

XlChartFillStyle *XlChartFrameType::takeAreaFillStyle(XlChartFrameType *this, XlChartFillStyle *a2)
{
  uint64_t result = this->var10;
  if (result) {
    uint64_t result = (XlChartFillStyle *)(*((uint64_t (**)(XlChartFillStyle *))result->var0 + 1))(result);
  }
  this->var10 = a2;
  return result;
}

void XlChartFrame::~XlChartFrame(XlChartFrame *this)
{
}

void sub_238BDCB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDCC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDD914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL XlChartBinaryReader::hasAxis(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = a1 + 1664;
  uint64_t v4 = 1720;
  if (a2) {
    uint64_t v3 = a1 + 1720;
  }
  else {
    uint64_t v4 = 1664;
  }
  switch(a3)
  {
    case 2:
      int v5 = *(_DWORD *)(v3 + 8);
      return v5 > 0;
    case 1:
      int v5 = *(_DWORD *)(v3 + 4);
      return v5 > 0;
    case 0:
      int v5 = *(_DWORD *)(a1 + v4);
      return v5 > 0;
  }
  return 0;
}

XlChartTextFrame *XlChartBinaryReader::read(XlChartTextFrame *result, int a2, int a3, XlChartPlotAxis **a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = result;
  uint64_t v8 = (unsigned int *)((char *)result + 1664);
  if (a2) {
    uint64_t v8 = (unsigned int *)((char *)result + 1720);
  }
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v9 = v8 + 11;
      ++v8;
    }
    else
    {
      if (a3 != 2)
      {
        *a4 = 0;
        return result;
      }
      uint64_t v9 = v8 + 12;
      v8 += 2;
    }
  }
  else
  {
    uint64_t v9 = v8 + 10;
  }
  uint64_t v10 = *v8;
  uint64_t v11 = *v9;
  *a4 = 0;
  if ((int)v10 >= 1)
  {
    uint64_t v12 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)result + 624))(result);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v12 + 16))(v12, v10, 0);
    unint64_t v13 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
    unsigned int v14 = (XlChartAxis *)operator new(0x18uLL);
    XlChartAxis::XlChartAxis(v14, v13);
    int v69 = (XlChartTextFrame *)v14;
    (*(void (**)(void, XlChartAxis *))(**((void **)v7 + 167) + 1864))(*((void *)v7 + 167), v14);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
    if (v13->var1 == 4147)
    {
      uint64_t v15 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
      unsigned int v65 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
      uint64_t v66 = (const void **)v4;
      int v16 = 3;
      *((_DWORD *)v7 + 485) = -1;
      while (1)
      {
        if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13))
        {
          unint64_t v19 = v14;
          switch(v16)
          {
            case 0:
              goto LABEL_31;
            case 1:
              goto LABEL_35;
            case 2:
              uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**((void **)v7 + 166) + 16))(*((void *)v7 + 166), 63);
              uint64_t v4 = (XlChartPlotAxis **)v66;
              int v68 = 0;
              int v64 = 1;
              goto LABEL_36;
            case 3:
              int v21 = *((_DWORD *)v14 + 4);
              if (v21 == 1)
              {
LABEL_35:
                uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**((void **)v7 + 166) + 16))(*((void *)v7 + 166), 60);
                uint64_t v4 = (XlChartPlotAxis **)v66;
                int v64 = 0;
                int v68 = 1;
LABEL_36:
                int v24 = 0;
                *uint64_t v4 = (XlChartPlotAxis *)v20;
                int v67 = 1;
              }
              else
              {
                if (v21)
                {
LABEL_113:
                  (*(void (**)(XlChartAxis *))(*(void *)v19 + 8))(v19);
LABEL_114:
                  JUMPOUT(0x23EC997B0);
                }
LABEL_31:
                uint64_t v4 = (XlChartPlotAxis **)v66;
                char *v66 = (const void *)(*(uint64_t (**)(void, uint64_t))(**((void **)v7 + 166) + 16))(*((void *)v7 + 166), 84);
                if (a3 == 1 && ((*((void *)v7 + 244) - *((void *)v7 + 243)) >> 2) > (a2 != 0))
                {
                  uint64_t v22 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
                  (*(void (**)(uint64_t, void, void))(*(void *)v22 + 16))(v22, *(unsigned int *)(*((void *)v7 + 243) + 4 * (a2 != 0)), 0);
                  XlChartBinaryReader::readAxisDisplayUnit((XlChartBinaryReader *)v7, v23);
                }
                int v67 = 0;
                int v68 = 0;
                int v64 = 0;
                int v24 = 1;
              }
              uint64_t v25 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
              (*(void (**)(uint64_t, void, void))(*(void *)v25 + 16))(v25, v65, 0);
              break;
            default:
              unint64_t v19 = v14;
              if (v14) {
                goto LABEL_113;
              }
              goto LABEL_114;
          }
          while (1)
          {
            while (1)
            {
LABEL_38:
              if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13)) {
                goto LABEL_102;
              }
              int var1 = v13->var1;
              if (var1 <= 4125) {
                break;
              }
              if (var1 > 4173)
              {
                if (var1 == 4174)
                {
                  XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                  XlChartiFmt::XlChartiFmt((XlChartiFmt *)v70, v13);
                  (*(void (**)(void, unsigned char *))(**((void **)v7 + 167) + 2032))(*((void *)v7 + 167), v70);
                  XlChartPlotAxis::setNumberFormatIndex(*v4, v71);
                  XlChartiFmt::~XlChartiFmt((XlChartiFmt *)v70);
                  continue;
                }
                if (var1 != 4194)
                {
                  if (var1 == 4198)
                  {
                    uint64_t v29 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
                    *((_DWORD *)v7 + 485) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
                    XlParserVisitor::seekNextRecord(*((void *)v7 + 167));
                    uint64_t v30 = (XlChartPicF *)operator new(0x28uLL);
                    XlChartPicF::XlChartPicF(v30);
                    XlChartBinaryReader::readPictureFormat((XlChartBinaryReader *)v7, v30);
                    XlChartPlotAxis::takePictureFormat(*v4, v30);
                    continue;
                  }
                  goto LABEL_78;
                }
                if (!v67) {
                  goto LABEL_78;
                }
                XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                uint64_t v40 = (XlChartAxCext *)operator new(0x28uLL);
                XlChartAxCext::XlChartAxCext(v40, v13);
                (*(void (**)(void, XlChartAxCext *))(**((void **)v7 + 167) + 1872))(*((void *)v7 + 167), v40);
                uint64_t v41 = *v4;
                if (v64)
                {
                  if (v41) {
                  XlChartDateAxis::takeDateSpec((XlChartDateAxis *)v41, v40);
                  }
                }
                else
                {
                  if (v41) {
                  XlChartCategoryAxis::takeCategorySpec((XlChartCategoryAxis *)v41, v40);
                  }
                }
              }
              else
              {
                switch(v13->var1)
                {
                  case 0x101E:
                    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                    int v27 = (XlChartTick *)operator new(0x30uLL);
                    XlChartTick::XlChartTick(v27, v13);
                    (*(void (**)(void, XlChartTick *))(**((void **)v7 + 167) + 2296))(*((void *)v7 + 167), v27);
                    XlChartPlotAxis::takeTicks(*v4, v27);
                    continue;
                  case 0x101F:
                    if (!v24) {
                      goto LABEL_78;
                    }
                    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                    __int16 v32 = (XlChartValueRange *)operator new(0x40uLL);
                    XlChartValueRange::XlChartValueRange(v32, v13);
                    (*(void (**)(void, XlChartValueRange *))(**((void **)v7 + 167) + 2312))(*((void *)v7 + 167), v32);
                    int v33 = *v4;
                    if (*v4) {
                    goto LABEL_60;
                    }
                  case 0x1020:
                    if (v24) {
                      goto LABEL_78;
                    }
                    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                    __int16 v32 = (XlChartValueRange *)operator new(0x18uLL);
                    XlChartCatSerRange::XlChartCatSerRange(v32, v13);
                    (*(void (**)(void, XlChartValueRange *))(**((void **)v7 + 167) + 1928))(*((void *)v7 + 167), v32);
                    int v33 = *v4;
                    if (*v4) {
LABEL_60:
                    }
                    XlChartCategoryAxis::takeRange((XlChartCategoryAxis *)v33, v32);
                    continue;
                  case 0x1021:
                    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                    int v34 = (XlChartAxisLineFormat *)operator new(0x18uLL);
                    XlChartAxisLineFormat::XlChartAxisLineFormat(v34, v13);
                    (*(void (**)(void, XlChartAxisLineFormat *))(**((void **)v7 + 167) + 1880))(*((void *)v7 + 167), v34);
                    switch(*((_DWORD *)v34 + 4))
                    {
                      case 0:
                        uint64_t v35 = *v4;
                        uint64_t v36 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartPlotAxis::takeAxisFormat(v35, v36);
                        goto LABEL_94;
                      case 1:
                        uint64_t v44 = *v4;
                        int v45 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartPlot::takeDropLineFormat((XlChartPlot *)v44, v45);
                        goto LABEL_94;
                      case 2:
                        unint64_t v46 = *v4;
                        v47 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartFrameType::takeBorderStyle((XlChartFrameType *)v46, v47);
                        goto LABEL_94;
                      case 3:
                        uint64_t v48 = *v4;
                        uint64_t v49 = (XlChartLineStyle *)XlChartBinaryReader::mapLineProperties((XlChartBinaryReader *)v7);
                        XlChartPlot::takeSeriesLineFormat((XlChartPlot *)v48, v49);
                        uint64_t v50 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
                        uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 40))(v50);
                        break;
                      default:
                        goto LABEL_94;
                    }
                    break;
                  case 0x1026:
                    XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                    BOOL v37 = (unsigned __int16 *)operator new(0x18uLL);
                    XlChartFontX::XlChartFontX((XlChartFontX *)v37, v13);
                    (*(void (**)(void, unsigned __int16 *))(**((void **)v7 + 167) + 2008))(*((void *)v7 + 167), v37);
                    XlChartPlotAxis::setFontIndex(*v4, v37[8]);
                    (*(void (**)(unsigned __int16 *))(*(void *)v37 + 8))(v37);
                    continue;
                  default:
                    goto LABEL_78;
                }
                while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v7, v13))
                {
                  int v52 = (unsigned __int16)v13->var1;
                  if (v52 == 4106)
                  {
                    unint64_t v53 = *v4;
                    uint64_t v54 = (XlChartFillStyle *)XlChartBinaryReader::mapFillProperties((XlChartBinaryReader *)v7);
                    XlChartPlotAxis::takeWallFillFormat(v53, v54);
                  }
                  else
                  {
                    if (v52 == 4129) {
                      break;
                    }
                    XlParserVisitor::seekNextRecord(*((void *)v7 + 167));
                  }
                }
                uint64_t v55 = (*(uint64_t (**)(XlChartTextFrame *))(*(void *)v7 + 624))(v7);
                (*(void (**)(uint64_t, uint64_t, void))(*(void *)v55 + 16))(v55, v51, 0);
                if (v34) {
LABEL_94:
                }
                  (*(void (**)(XlChartAxisLineFormat *))(*(void *)v34 + 8))(v34);
              }
            }
            if (var1 > 2211)
            {
              if (var1 == 2212)
              {
                XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v70, v13);
                (*(void (**)(void, unsigned char *))(**((void **)v7 + 167) + 2392))(*((void *)v7 + 167), v70);
                switch(v73)
                {
                  case 0:
                    uint64_t v42 = *v4;
                    unsigned int v43 = v72;
                    (*v4)->var17 = v72;
                    if (v43) {
                      v42->var10 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    }
                    break;
                  case 1:
                    uint64_t v56 = *v4;
                    unsigned int v57 = v72;
                    (*v4)->var18 = v72;
                    if (v57) {
                      v56->var11 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    }
                    break;
                  case 2:
                    int64_t v58 = *v4;
                    unsigned int v59 = v72;
                    (*v4)->var19 = v72;
                    if (v59) {
                      v58->var12 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    }
                    break;
                  case 3:
                    unint64_t v60 = *v4;
                    unsigned int v61 = v72;
                    (*v4)->var20 = v72;
                    if (v61) {
                      v60->var13 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                    }
                    break;
                  default:
                    break;
                }
                XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v70);
              }
              else
              {
                if (var1 != 2213) {
                  goto LABEL_78;
                }
                XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
                XlChartTextPropsStream::XlChartTextPropsStream((XlChartTextPropsStream *)v70, v13);
                (*(void (**)(void, unsigned char *))(**((void **)v7 + 167) + 2376))(*((void *)v7 + 167), v70);
                if (v72)
                {
                  unsigned int v31 = *v4;
                  (*v4)->var21 = v72;
                  v31->var14 = (char *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v70);
                }
                XlChartTextPropsStream::~XlChartTextPropsStream((XlChartTextPropsStream *)v70);
              }
            }
            else
            {
              if (var1 != 2134)
              {
                if (var1 == 2135 && v24)
                {
                  XlChartBinaryReader::readAxisDisplayUnit((XlChartBinaryReader *)v7, v28);
                  goto LABEL_38;
                }
LABEL_78:
                XlParserVisitor::seekNextRecord(*((void *)v7 + 167));
                goto LABEL_38;
              }
              if (!v68) {
                goto LABEL_78;
              }
              XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
              int v38 = (XlRecord *)operator new(0x18uLL);
              XlRecord::XlRecord(v38, v13);
              *(void *)int v38 = &unk_26EBDE8A0;
              *((_DWORD *)v38 + 4) = 1;
              *((_WORD *)v38 + 10) = 0;
              (*(void (**)(void, XlRecord *))(**((void **)v7 + 167) + 2328))(*((void *)v7 + 167), v38);
              unsigned int v39 = *v4;
              if (*v4) {
              XlChartCategoryAxis::takeAlignment((uint64_t)v39, (uint64_t)v38);
              }
            }
          }
        }
        int v17 = v13->var1;
        switch(v17)
        {
          case 4127:
            goto LABEL_23;
          case 4128:
            if (v16 == 3) {
              int v16 = 1;
            }
LABEL_23:
            if (v16 == 3) {
              int v16 = 0;
            }
LABEL_25:
            XlParserVisitor::seekNextRecord(*((void *)v7 + 167));
            break;
          case 4194:
            XlParserVisitor::getHeader(*((XlParserVisitor **)v7 + 167), v13, *((unsigned char *)v7 + 444));
            unint64_t v18 = (XlChartAxCext *)operator new(0x28uLL);
            XlChartAxCext::XlChartAxCext(v18, v13);
            (*(void (**)(void, XlChartAxCext *))(**((void **)v7 + 167) + 1872))(*((void *)v7 + 167), v18);
            if (XlChartAxCext::isDateAxis(v18)) {
              int v16 = 2;
            }
            else {
              int v16 = 1;
            }
            if (v18) {
              (*(void (**)(XlChartAxCext *))(*(void *)v18 + 8))(v18);
            }
            break;
          default:
            goto LABEL_25;
        }
      }
    }
LABEL_102:
    uint64_t result = v69;
    if (v69) {
      uint64_t result = (XlChartTextFrame *)(*(uint64_t (**)(XlChartTextFrame *))(*(void *)v69 + 8))(v69);
    }
    uint64_t v11 = v11;
    if (v13) {
      uint64_t result = (XlChartTextFrame *)MEMORY[0x23EC997B0](v13, 0x1000C4087442A64);
    }
  }
  if ((int)v11 >= 1 && *v4 != 0)
  {
    uint64_t v63 = (XlChartTextFrame *)(*(uint64_t (**)(void, uint64_t))(**((void **)v7 + 166) + 16))(*((void *)v7 + 166), 81);
    XlChartBinaryReader::readTextFrame((XlParserVisitor **)v7, v63, v11, 1);
    return XlChartPlotAxis::takeTitle(*v4, v63);
  }
  return result;
}

void sub_238BDEAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (v14) {
    MEMORY[0x23EC997B0](v14, 0x1000C4087442A64);
  }
  _Unwind_Resume(exception_object);
}

void XlChartAxCext::XlChartAxCext(XlChartAxCext *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB7A8;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 239;
}

uint64_t XlChartAxCext::isDateAxis(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 4) & 1;
}

void XlChartAxCext::~XlChartAxCext(XlChartAxCext *this)
{
}

void XlChartCategoryAxis::XlChartCategoryAxis(XlChartCategoryAxis *this)
{
  XlChartPlotAxis::XlChartPlotAxis((XlChartPlotAxis *)this);
  void *v1 = &unk_26EBDC470;
  v1[20] = 0;
  v1[21] = 0;
  v1[19] = 0;
}

void XlChartPlotAxis::XlChartPlotAxis(XlChartPlotAxis *this)
{
  this->var0 = (void **)&unk_26EBDCD88;
  this->int var1 = 0;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->var6 = 0u;
  *(_OWORD *)&this->var8 = 0u;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  *(_OWORD *)&this->var14 = 0u;
  *(_OWORD *)&this->var18 = 0u;
  *(_WORD *)&this->var22 = 0;
}

void XlChartCatSerRange::XlChartCatSerRange(XlChartCatSerRange *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDB928;
  v2[2] = 0x1000100010000;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartCatSerRange *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartCategoryAxis::takeRange(XlChartCategoryAxis *this, XlChartCatSerRange *a2)
{
  uint64_t result = *((void *)this + 19);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 19) = a2;
  return result;
}

uint64_t XlChartCategoryAxis::takeCategorySpec(XlChartCategoryAxis *this, XlChartAxCext *a2)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 21) = a2;
  return result;
}

void XlChartTick::XlChartTick(XlChartTick *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC3F0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 36) = 0;
  *(void *)(v2 + 28) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartTick *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (*((_DWORD *)a2 + 2) >= 0x1Eu)
  {
    *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlChartTick *XlChartPlotAxis::takeTicks(XlChartPlotAxis *this, XlChartTick *a2)
{
  uint64_t result = this->var9;
  if (result) {
    uint64_t result = (XlChartTick *)(*(uint64_t (**)(XlChartTick *))(*(void *)result + 8))(result);
  }
  this->var9 = a2;
  return result;
}

uint64_t XlChartCategoryAxis::getType(XlChartCategoryAxis *this)
{
  return 1;
}

void sub_238BDF6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDF84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartCatSerRange::isReverse(XlChartCatSerRange *this)
{
  return (*((unsigned __int16 *)this + 11) >> 2) & 1;
}

uint64_t XlChartAxCext::isAutoMax(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 1) & 1;
}

uint64_t XlChartAxCext::isAutoMin(XlChartAxCext *this)
{
  return *((_WORD *)this + 16) & 1;
}

void sub_238BDF9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDFA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDFB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartTick::isAutoRotation(XlChartTick *this)
{
  return (*((unsigned __int16 *)this + 11) >> 5) & 1;
}

void sub_238BDFC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDFD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BDFEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BDFF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartCategoryAxis::~XlChartCategoryAxis(XlChartPlotAxis *this)
{
  XlChartCategoryAxis::~XlChartCategoryAxis(this);
  JUMPOUT(0x23EC997B0);
}

{
  void **var0;
  uint64_t v3;
  XlChartTextFrame *var2;
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBDC470;
  var0 = this[1].var0;
  if (var0) {
    (*((void (**)(void **))*var0 + 1))(var0);
  }
  this[1].var0 = 0;
  uint64_t v3 = *(void *)&this[1].var1;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)&this[1].int var1 = 0;
  var2 = this[1].var2;
  if (var2) {
    (*(void (**)(XlChartTextFrame *))(*(void *)var2 + 8))(var2);
  }
  this[1].var2 = 0;
  XlChartPlotAxis::~XlChartPlotAxis(this);
}

void XlChartCatSerRange::~XlChartCatSerRange(XlChartCatSerRange *this)
{
}

void XlChartPlotAxis::~XlChartPlotAxis(XlChartPlotAxis *this)
{
  this->var0 = (void **)&unk_26EBDCD88;
  var2 = this->var2;
  if (var2) {
    (*(void (**)(XlChartTextFrame *))(*(void *)var2 + 8))(var2);
  }
  this->var2 = 0;
  var3 = this->var3;
  if (var3) {
    (*((void (**)(XlChartLineStyle *))var3->var0 + 1))(var3);
  }
  this->var3 = 0;
  var4 = this->var4;
  if (var4) {
    (*((void (**)(XlChartLineStyle *))var4->var0 + 1))(var4);
  }
  this->var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*((void (**)(XlChartLineStyle *))var5->var0 + 1))(var5);
  }
  this->var5 = 0;
  var6 = this->var6;
  if (var6) {
    (*((void (**)(XlChartLineStyle *))var6->var0 + 1))(var6);
  }
  this->var6 = 0;
  var7 = this->var7;
  if (var7) {
    (*((void (**)(XlChartFillStyle *))var7->var0 + 1))(var7);
  }
  this->var7 = 0;
  var9 = this->var9;
  if (var9) {
    (*(void (**)(XlChartTick *))(*(void *)var9 + 8))(var9);
  }
  this->var9 = 0;
  var10 = this->var10;
  if (var10) {
    MEMORY[0x23EC99790](var10, 0x1000C8077774924);
  }
  this->var10 = 0;
  var11 = this->var11;
  if (var11) {
    MEMORY[0x23EC99790](var11, 0x1000C8077774924);
  }
  this->var11 = 0;
  var12 = this->var12;
  if (var12) {
    MEMORY[0x23EC99790](var12, 0x1000C8077774924);
  }
  this->var12 = 0;
  var13 = this->var13;
  if (var13) {
    MEMORY[0x23EC99790](var13, 0x1000C8077774924);
  }
  this->var13 = 0;
  var14 = this->var14;
  if (var14) {
    MEMORY[0x23EC99790](var14, 0x1000C8077774924);
  }
  this->var14 = 0;
  var8 = this->var8;
  if (var8) {
    (*((void (**)(XlChartPicF *))var8->var0 + 1))(var8);
  }
  this->var8 = 0;
}

void XlChartTick::~XlChartTick(XlChartTick *this)
{
}

void XlChartValueAxis::XlChartValueAxis(XlChartValueAxis *this)
{
  XlChartPlotAxis::XlChartPlotAxis((XlChartPlotAxis *)this);
  void *v1 = &unk_26EBDCE10;
  v1[20] = 0;
  v1[21] = 0;
  v1[19] = 0;
}

void XlChartValueRange::XlChartValueRange(XlChartValueRange *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC430;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 56) = 31;
}

void XlChartAxisLineFormat::XlChartAxisLineFormat(XlChartAxisLineFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB828;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlChartPlot::takeDropLineFormat(XlChartPlot *this, XlChartLineStyle *a2)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = a2;
  return result;
}

void XlChartAxisLineFormat::~XlChartAxisLineFormat(XlChartAxisLineFormat *this)
{
}

void XlChartSeriesText::XlChartSeriesText(XlChartSeriesText *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC1F0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 26) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSeriesText *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v4)
  {
    unsigned int v5 = v4;
    char v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    if (*((void *)this + 4))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    char v7 = v6;
    uint64_t v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    XlStringParser::parse((XlChartParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5, v7, *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18), v8);
    XlChartSeriesText::takeText((uint64_t)a2, *((XlString **)this + 4));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BE089C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlChartSeriesText::takeText(uint64_t this, XlString *a2)
{
  *(void *)(this + 16) = a2;
  if (a2) {
    int v2 = *((_DWORD *)a2 + 6);
  }
  else {
    LOBYTE(v2) = 0;
  }
  *(unsigned char *)(this + 26) = v2;
  return this;
}

void XlChartSeriesText::~XlChartSeriesText(XlChartSeriesText *this)
{
  *(void *)this = &unk_26EBDC1F0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDC1F0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

XlChartTextFrame *XlChartPlotAxis::takeTitle(XlChartPlotAxis *this, XlChartTextFrame *a2)
{
  uint64_t result = this->var2;
  if (result) {
    uint64_t result = (XlChartTextFrame *)(*(uint64_t (**)(XlChartTextFrame *))(*(void *)result + 8))(result);
  }
  this->var2 = a2;
  return result;
}

uint64_t XlChartValueAxis::getType(XlChartValueAxis *this)
{
  return 0;
}

void sub_238BE0BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartValueRange::isAutoMax(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 1) & 1;
}

uint64_t XlChartValueRange::isLogScale(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 5) & 1;
}

uint64_t XlChartValueRange::isAutoMin(XlChartValueRange *this)
{
  return *((_WORD *)this + 28) & 1;
}

uint64_t XlChartValueRange::isAutoMajor(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 2) & 1;
}

uint64_t XlChartValueRange::isAutoMinor(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 3) & 1;
}

uint64_t XlChartValueRange::isAutoCross(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 4) & 1;
}

uint64_t XlChartValueRange::isReverse(XlChartValueRange *this)
{
  return (*((unsigned __int16 *)this + 28) >> 6) & 1;
}

void sub_238BE0DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE1004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE10D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE1198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE142C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartValueAxis::~XlChartValueAxis(XlChartPlotAxis *this)
{
  XlChartValueAxis::~XlChartValueAxis(this);
  JUMPOUT(0x23EC997B0);
}

{
  void **var0;
  uint64_t v3;
  XlChartTextFrame *var2;
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBDCE10;
  var0 = this[1].var0;
  if (var0) {
    (*((void (**)(void **))*var0 + 1))(var0);
  }
  this[1].var0 = 0;
  uint64_t v3 = *(void *)&this[1].var1;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)&this[1].int var1 = 0;
  var2 = this[1].var2;
  if (var2) {
    (*(void (**)(XlChartTextFrame *))(*(void *)var2 + 8))(var2);
  }
  this[1].var2 = 0;
  XlChartPlotAxis::~XlChartPlotAxis(this);
}

void XlChartValueRange::~XlChartValueRange(XlChartValueRange *this)
{
}

void XlChartLineStyle::~XlChartLineStyle(XlChartLineStyle *this)
{
}

uint64_t XlChartBinaryReader::getPlotCount(uint64_t a1, int a2)
{
  uint64_t v2 = 1744;
  if (!a2) {
    uint64_t v2 = 1688;
  }
  uint64_t v3 = 1736;
  int v4 = *(_DWORD *)(a1 + v2);
  if (!a2) {
    uint64_t v3 = 1680;
  }
  return (unsigned __int16)((v4 - *(_DWORD *)(a1 + v3)) >> 2);
}

XlChartPlot *XlChartBinaryReader::read(XlChartPlot *result, int a2, unsigned int a3, XlChartPlot **a4)
{
  *a4 = 0;
  *((void *)result + 203) = *((void *)result + 202);
  *((_DWORD *)result + 403) = -1;
  uint64_t v4 = 1736;
  if (!a2) {
    uint64_t v4 = 1680;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)((char *)result + v4) + 4 * a3);
  if (v5 != -1)
  {
    uint64_t v8 = result;
    uint64_t v9 = (*(uint64_t (**)(XlChartPlot *))(*(void *)result + 624))(result);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 16))(v9, v5, 0);
    uint64_t v10 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v10);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v8 + 167), v10, *((unsigned char *)v8 + 444));
    uint64_t v11 = (XlChartChartLine *)operator new(0x18uLL);
    XlChartChartLine::XlChartChartLine(v11);
    uint64_t v12 = (XlChartChartFormat *)operator new(0x18uLL);
    XlChartChartFormat::XlChartChartFormat(v12, v10);
    (*(void (**)(void, XlChartChartFormat *))(**((void **)v8 + 167) + 1944))(*((void *)v8 + 167), v12);
    unint64_t v13 = (XlChart3D *)operator new(0x20uLL);
    XlChart3D::XlChart3D(v13);
    uint64_t result = (XlChartPlot *)XlParserVisitor::getHeader(*((XlParserVisitor **)v8 + 167), v10, *((unsigned char *)v8 + 444));
    if (v10->var1 != 4147) {
      goto LABEL_74;
    }
    char v54 = 0;
    while (XlChartBinaryReader::nextSibling(v8, v10))
    {
      int var1 = v10->var1;
      if (var1 > 4153)
      {
        switch(v10->var1)
        {
          case 0x103A:
            XlRecord::setHeader((XlHeader *)v13, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            char v54 = 1;
            (*(void (**)(void, XlChart3D *))(**((void **)v8 + 167) + 1808))(*((void *)v8 + 167), v13);
            continue;
          case 0x103B:
          case 0x103C:
            goto LABEL_57;
          case 0x103D:
            uint64_t v20 = (*(uint64_t (**)(XlChartPlot *))(*(void *)v8 + 624))(v8);
            int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
            int v22 = v21;
            unsigned int v23 = (char *)*((void *)v8 + 203);
            unint64_t v24 = *((void *)v8 + 204);
            if ((unint64_t)v23 >= v24)
            {
              __int16 v32 = (char *)*((void *)v8 + 202);
              int64_t v33 = v23 - v32;
              unint64_t v34 = (unint64_t)(v23 - v32) >> 2;
              unint64_t v35 = (v24 - (unint64_t)v32) >> 2;
              if (2 * (int)v35 <= (v34 + 1)) {
                unsigned int v36 = v34 + 1;
              }
              else {
                unsigned int v36 = 2 * v35;
              }
              if (v35 >= 0x7FFFFFFF) {
                unint64_t v37 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37)
              {
                int v38 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v8 + 1632, v37);
                uint64_t v40 = v39;
                unsigned int v23 = (char *)*((void *)v8 + 203);
                __int16 v32 = (char *)*((void *)v8 + 202);
              }
              else
              {
                int v38 = 0;
                uint64_t v40 = 0;
              }
              uint64_t v41 = &v38[v33 & 0x3FFFFFFFCLL];
              *(_DWORD *)uint64_t v41 = v22;
              uint64_t v25 = v41 + 4;
              while (v23 != v32)
              {
                int v42 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v41 - 1) = v42;
                v41 -= 4;
              }
              *((void *)v8 + 202) = v41;
              *((void *)v8 + 203) = v25;
              *((void *)v8 + 204) = &v38[4 * v40];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v23 = v21;
              uint64_t v25 = v23 + 4;
            }
            *((void *)v8 + 203) = v25;
            goto LABEL_57;
          case 0x103E:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 77);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 2160))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x103F:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 80);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 2280))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x1040:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 76);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 2168))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          default:
            if (var1 == 4193)
            {
              unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 74);
              XlRecord::setHeader(v19 + 18, v10);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
              (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 1912))(*((void *)v8 + 167), v19 + 18);
LABEL_32:
              *a4 = (XlChartPlot *)v19;
            }
            else
            {
LABEL_57:
              XlParserVisitor::seekNextRecord(*((void *)v8 + 167));
            }
            break;
        }
      }
      else
      {
        switch(v10->var1)
        {
          case 0x1015:
            uint64_t v15 = (*(uint64_t (**)(XlChartPlot *))(*(void *)v8 + 624))(v8);
            *((_DWORD *)v8 + 403) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
            goto LABEL_57;
          case 0x1016:
          case 0x101D:
          case 0x101E:
          case 0x101F:
          case 0x1020:
          case 0x1021:
          case 0x1022:
          case 0x1023:
            goto LABEL_57;
          case 0x1017:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 59);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 1896))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x1018:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 68);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 2056))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x1019:
            uint64_t v26 = (*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 73);
            XlRecord::setHeader((XlHeader *)(v26 + 144), v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, uint64_t))(**((void **)v8 + 167) + 2104))(*((void *)v8 + 167), v26 + 144);
            if (XlChartBar::isStacked((XlChartBar *)(v26 + 144))) {
              *(unsigned char *)(v26 + 143) = 1;
            }
            *a4 = (XlChartPlot *)v26;
            continue;
          case 0x101A:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 58);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 1832))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x101B:
            unint64_t v19 = (XlHeader *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 78);
            XlRecord::setHeader(v19 + 18, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlHeader *))(**((void **)v8 + 167) + 2184))(*((void *)v8 + 167), v19 + 18);
            goto LABEL_32;
          case 0x101C:
            XlRecord::setHeader((XlHeader *)v11, v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
            (*(void (**)(void, XlChartChartLine *))(**((void **)v8 + 167) + 1952))(*((void *)v8 + 167), v11);
            if (*a4)
            {
              uint64_t v27 = XlChartBinaryReader::mapLineProperties(v8);
              int v28 = (XlChartLineStyle *)v27;
              switch(*((_DWORD *)v11 + 4))
              {
                case 0:
                  uint64_t v29 = *a4;
                  *((unsigned char *)v29 + 140) = 1;
                  XlChartPlot::takeDropLineFormat(v29, v28);
                  break;
                case 1:
                  unsigned int v43 = *a4;
                  *((unsigned char *)v43 + 141) = 1;
                  XlChartFrameType::takeBorderStyle((XlChartFrameType *)v43, v28);
                  break;
                case 2:
                  uint64_t v44 = *a4;
                  *((unsigned char *)v44 + 142) = 1;
                  XlChartPlot::takeSeriesLineFormat(v44, v28);
                  break;
                case 3:
                  int v45 = *a4;
                  *((unsigned char *)v45 + 143) = 1;
                  XlChartPlot::takeLeaderLineFormat(v45, v28);
                  break;
                default:
                  if (v27) {
                    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
                  }
                  break;
              }
            }
            continue;
          case 0x1024:
            if (*a4)
            {
              XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
              uint64_t v49 = (XlChartDefaultText *)operator new(0x18uLL);
              XlChartDefaultText::XlChartDefaultText(v49, v10);
              (*(void (**)(void, XlChartDefaultText *))(**((void **)v8 + 167) + 1976))(*((void *)v8 + 167), v49);
              int v50 = *((_DWORD *)v49 + 4);
              uint64_t v51 = (XlChartTextFrame *)(*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 81);
              uint64_t v52 = (*(uint64_t (**)(XlChartPlot *))(*(void *)v8 + 624))(v8);
              uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 40))(v52);
              XlChartBinaryReader::readTextFrame((XlParserVisitor **)v8, v51, v53, 1);
              XlChartPlot::takeDefaultText(*a4, (uint64_t)v51, v50);
              (*(void (**)(XlChartDefaultText *))(*(void *)v49 + 8))(v49);
            }
            continue;
          default:
            if (var1 == 2212)
            {
              XlParserVisitor::getHeader(*((XlParserVisitor **)v8 + 167), v10, *((unsigned char *)v8 + 444));
              XlChartShapePropsStream::XlChartShapePropsStream((XlChartShapePropsStream *)v55, v10);
              (*(void (**)(void, unsigned char *))(**((void **)v8 + 167) + 2392))(*((void *)v8 + 167), v55);
              uint64_t v30 = *a4;
              if (*a4)
              {
                switch(v57)
                {
                  case 0:
                    int v31 = v56;
                    *((_DWORD *)v30 + 24) = v56;
                    if (v31) {
                      *((void *)v30 + 8) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    }
                    break;
                  case 1:
                    int v46 = v56;
                    *((_DWORD *)v30 + 25) = v56;
                    if (v46) {
                      *((void *)v30 + 9) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    }
                    break;
                  case 2:
                    int v47 = v56;
                    *((_DWORD *)v30 + 27) = v56;
                    if (v47) {
                      *((void *)v30 + 11) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    }
                    break;
                  case 3:
                    int v48 = v56;
                    *((_DWORD *)v30 + 26) = v56;
                    if (v48) {
                      *((void *)v30 + 10) = XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)v55);
                    }
                    break;
                  default:
                    break;
                }
              }
              XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)v55);
            }
            else
            {
              if (var1 != 4102) {
                goto LABEL_57;
              }
              int v16 = (char *)operator new(0x18uLL);
              XlChartDataFormat::XlChartDataFormat((XlChartDataFormat *)v16, v10);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)v8 + 167));
              (*(void (**)(void, char *))(**((void **)v8 + 167) + 1968))(*((void *)v8 + 167), v16);
              if ((*((__int16 *)v16 + 8) & 0x80000000) == 0 && *a4)
              {
                uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**((void **)v8 + 166) + 16))(*((void *)v8 + 166), 79);
                *(unsigned char *)(v17 + 89) = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v16);
                HIDWORD(v18) = *(_DWORD *)(v16 + 18);
                LODWORD(v18) = HIDWORD(v18);
                *(_DWORD *)(v17 + 70) = v18 >> 16;
                XlChartBinaryReader::mapSeriesFormat(v8, (XlChartSeriesFormat *)v17);
                XlChartPlot::takeChartSeriesFormat(*a4, (XlChartSeriesFormat *)v17);
              }
              (*(void (**)(char *))(*(void *)v16 + 8))(v16);
            }
            break;
        }
      }
    }
    uint64_t result = *a4;
    if (*a4)
    {
      if (v54)
      {
        XlChartPlot::take3D(result, v13);
      }
      else if (v13)
      {
        (*((void (**)(XlChart3D *))v13->var0 + 1))(v13);
      }
      uint64_t result = (XlChartPlot *)XlChartPlot::takeChartFormat((uint64_t)*a4, (uint64_t)v12);
      *((_DWORD *)*a4 + 34) = a2;
      if (!v11) {
        goto LABEL_80;
      }
    }
    else
    {
LABEL_74:
      if (v13) {
        uint64_t result = (XlChartPlot *)(*((uint64_t (**)(XlChart3D *))v13->var0 + 1))(v13);
      }
      if (v12) {
        uint64_t result = (XlChartPlot *)(*(uint64_t (**)(XlChartChartFormat *))(*(void *)v12 + 8))(v12);
      }
      if (!v11) {
        goto LABEL_80;
      }
    }
    uint64_t result = (XlChartPlot *)(*(uint64_t (**)(XlChartChartLine *))(*(void *)v11 + 8))(v11);
LABEL_80:
    if (v10) {
      return (XlChartPlot *)MEMORY[0x23EC997B0](v10, 0x1000C4087442A64);
    }
  }
  return result;
}

void sub_238BE25D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  XlChartShapePropsStream::~XlChartShapePropsStream((XlChartShapePropsStream *)va);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (a5)
  {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
    if (!v7)
    {
LABEL_5:
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (!v6) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  MEMORY[0x23EC997B0](v6, 0x1000C4087442A64);
  goto LABEL_7;
}

void XlChartChartLine::XlChartChartLine(XlChartChartLine *this)
{
  XlRecord::XlRecord(this);
  *(void *)uint64_t v1 = &unk_26EBDB9E8;
  *(_DWORD *)(v1 + 16) = 0;
}

void XlRecord::XlRecord(XlRecord *this)
{
  *(void *)this = &unk_26EBE0998;
  XlHeader::XlHeader((XlHeader *)this + 1);
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 14) = 0;
}

void XlChartChartFormat::XlChartChartFormat(XlChartChartFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB9A8;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChart3D::XlChart3D(XlChart3D *this)
{
  XlRecord::XlRecord((XlRecord *)this, 4154, 14, 0);
  *(void *)uint64_t v1 = &unk_26EBDB610;
  *(void *)(v1 + 16) = 0x64001E001E0014;
  *(_DWORD *)(v1 + 24) = 6553700;
  *(_WORD *)(v1 + 28) = 23;
}

void XlChartBarPlot::XlChartBarPlot(XlChartBarPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartBar::XlChartBar((XlChartBar *)(v2 + 144));
  *(void *)this = &unk_26EBDC6C0;
  *((void *)this + 18) = &unk_26EBDC6E8;
}

void sub_238BE2B2C(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartPlot::XlChartPlot(XlChartPlot *this)
{
  *(void *)this = &unk_26EBDCD50;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
}

void XlChartBar::XlChartBar(XlChartBar *this)
{
  XlRecord::XlRecord(this, 4119, 6, 0);
  *(void *)uint64_t v1 = &unk_26EBDB8A8;
  *(_DWORD *)(v1 + 16) = 3276800;
  *(_WORD *)(v1 + 20) = 0;
}

XlHeader *XlRecord::setHeader(XlHeader *this, XlHeader *a2)
{
  this[1] = *a2;
  return this;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartBar *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChart3D::~XlChart3D(XlChart3D *this)
{
}

void XlChartChartLine::~XlChartChartLine(XlChartChartLine *this)
{
}

BOOL XlChartBinaryReader::hasLegend(XlChartBinaryReader *this)
{
  return *((_DWORD *)this + 403) > 0;
}

void sub_238BE2DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE3220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartBarPlot::getChartType(XlChartBarPlot *this)
{
  return 0;
}

void sub_238BE3454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE3604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE3688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE3760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartBar::isCategoryPercentage(XlChartBar *this)
{
  return (*((unsigned __int16 *)this + 10) >> 2) & 1;
}

void sub_238BE3828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartChartFormat::isVaried(XlChartChartFormat *this)
{
  return *((_WORD *)this + 9) & 1;
}

uint64_t XlChartDataSeries::getSeriesType(XlChartDataSeries *this)
{
  return 0;
}

void sub_238BE3D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BE3EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE3F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE44BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, EDValue a13)
{
  int v16 = v14;

  _Unwind_Resume(a1);
}

void sub_238BE45E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE4694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE4710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE4838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL XlChartLinkedData::hasEnteredData(XlChartLinkedData *this)
{
  return *((_DWORD *)this + 12) != 0;
}

void sub_238BE48E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE49A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE4A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE4B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CsData::CsData(CsData *this)
{
  this->var0 = 0;
  this->int var1 = 0;
}

uint64_t XlChartEnteredNumber::isNumber(XlChartEnteredNumber *this)
{
  return 1;
}

double XlChartEnteredNumber::getNumber(XlChartEnteredNumber *this)
{
  return *((double *)this + 2);
}

uint64_t EDValue::operator=(uint64_t a1, int *a2)
{
  if (a2 != (int *)a1)
  {
    if (*(_DWORD *)a1 == 3)
    {
      uint64_t v4 = *(void **)(a1 + 8);
      if (v4) {
        free(v4);
      }
    }
    int v5 = *a2;
    *(_DWORD *)a1 = *a2;
    switch(v5)
    {
      case 0:
        goto LABEL_10;
      case 1:
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        break;
      case 2:
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        break;
      case 3:
        uint64_t v6 = (const char *)*((void *)a2 + 1);
        if (v6) {
          *(void *)(a1 + 8) = strdup(v6);
        }
        else {
LABEL_10:
        }
          *(void *)(a1 + 8) = 0;
        break;
      case 5:
        *(_DWORD *)(a1 + 8) = a2[2];
        break;
      case 6:
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        break;
      default:
        return a1;
    }
  }
  return a1;
}

void EDValue::~EDValue(EDValue *this)
{
  if (this->type == 3)
  {
    string = this->var0.string;
    if (string) {
      free(string);
    }
  }
}

uint64_t XlChartEnteredText::isNumber(XlChartEnteredText *this)
{
  return 0;
}

uint64_t XlChartEnteredText::isText(XlChartEnteredText *this)
{
  return 1;
}

uint64_t XlChartEnteredText::getText(XlChartEnteredText *this)
{
  return (uint64_t)this + 16;
}

void sub_238BE4EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE4F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE5000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE5180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *XlChartBinaryReader::setDefaultFormat(uint64_t *this, int a2, int a3)
{
  uint64_t v3 = this;
  unsigned int v4 = a3 | (a2 << 16);
  unsigned int v8 = v4;
  uint64_t v5 = this[232];
  if (v5)
  {
    this += 231;
    do
    {
      unsigned int v6 = *(_DWORD *)(v5 + 28);
      if (v4 >= v6)
      {
        if (v6 >= v4)
        {
          uint64_t v9 = &v8;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this, &v8, (uint64_t)&std::piecewise_construct, &v9);
          int v7 = *((_DWORD *)this + 8);
          goto LABEL_9;
        }
        v5 += 8;
      }
      uint64_t v5 = *(void *)v5;
    }
    while (v5);
  }
  int v7 = -1;
LABEL_9:
  *((_DWORD *)v3 + 485) = v7;
  return this;
}

void sub_238BE53E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE56A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE57A8(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238BE59BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE5AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE5B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE5CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE5E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE6074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE6180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE6588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238BE66FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE67EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE687C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE6900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartBarPlot::~XlChartBarPlot(XlChartBarPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartPlot::~XlChartPlot(XlChartPlot *this)
{
  *(void *)this = &unk_26EBDCD50;
  uint64_t v3 = *((void *)this + 14);
  uint64_t v2 = *((void *)this + 15);
  if (((v2 - v3) & 0xFFFF0) != 0)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v3 = *((void *)this + 14);
        uint64_t v2 = *((void *)this + 15);
      }
      ++v5;
      v4 += 16;
    }
    while (v5 < (unsigned __int16)((v2 - v3) >> 4));
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 1) = 0;
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 2) = 0;
  uint64_t v9 = *((void *)this + 3);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 3) = 0;
  uint64_t v10 = *((void *)this + 4);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 4) = 0;
  uint64_t v11 = *((void *)this + 5);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 5) = 0;
  uint64_t v12 = *((void *)this + 6);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 6) = 0;
  uint64_t v13 = *((void *)this + 7);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 7) = 0;
  uint64_t v14 = *((void *)this + 8);
  if (v14) {
    MEMORY[0x23EC99790](v14, 0x1000C8077774924);
  }
  *((void *)this + 8) = 0;
  uint64_t v15 = *((void *)this + 9);
  if (v15) {
    MEMORY[0x23EC99790](v15, 0x1000C8077774924);
  }
  *((void *)this + 9) = 0;
  uint64_t v16 = *((void *)this + 10);
  if (v16) {
    MEMORY[0x23EC99790](v16, 0x1000C8077774924);
  }
  *((void *)this + 10) = 0;
  uint64_t v17 = *((void *)this + 11);
  if (v17) {
    MEMORY[0x23EC99790](v17, 0x1000C8077774924);
  }
  *((void *)this + 11) = 0;
  unint64_t v18 = (void *)*((void *)this + 14);
  if (v18)
  {
    *((void *)this + 15) = v18;
    operator delete(v18);
  }
}

void XlChartChartFormat::~XlChartChartFormat(XlChartChartFormat *this)
{
}

void XlChartFillStyle::~XlChartFillStyle(XlChartFillStyle *this)
{
}

BOOL XlChartBinaryReader::hasTitle(XlChartBinaryReader *this)
{
  return *((_DWORD *)this + 402) > 0;
}

uint64_t XlChartBinaryReader::read(uint64_t this, XlChartTextFrame *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 1608);
  if ((int)v2 >= 1) {
    return XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, a2, v2, 1);
  }
  return this;
}

void XlChartParent::~XlChartParent(XlChartParent *this)
{
  *(void *)this = &unk_26EBDCCD0;
  uint64_t v2 = (char *)this + 88;
  *((void *)this + 11) = &unk_26EBDCCF0;
  uint64_t v4 = (char *)this + 240;
  uint64_t v3 = (void *)*((void *)this + 30);
  if (((*((void *)v4 + 1) - (void)v3) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v5 = 0;
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = v3[v5];
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v3 = (void *)*((void *)this + 30);
      }
      v3[v6] = 0;
      unsigned __int16 v5 = v6 + 1;
      uint64_t v3 = (void *)*((void *)this + 30);
    }
    while (((*((void *)this + 31) - (void)v3) >> 3) > (unsigned __int16)(v6 + 1));
  }
  if (v3)
  {
    *((void *)this + 31) = v3;
    operator delete(v3);
  }
  XlString::~XlString((XlString *)((char *)this + 120));
  TSURectWithOriginAndSize(v2);
  XlChartFrameType::~XlChartFrameType((XlChartFrameType *)this);
}

{
  uint64_t vars8;

  XlChartParent::~XlChartParent(this);
  JUMPOUT(0x23EC997B0);
}

void XlChartFBI::~XlChartFBI(XlChartFBI *this)
{
}

void sub_238BE6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHBState;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void XlChartDataSeries::~XlChartDataSeries(XlChartDataSeries *this)
{
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  *(void *)this = &unk_26EBDC4C0;
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 18) = 0;
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 19) = 0;
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 20) = 0;
  unsigned __int16 v5 = *((void *)this + 21);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 21) = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 13) = *((void *)this + 12);
  *((void *)this + 16) = *((void *)this + 15);
  uint64_t v7 = *((void *)this + 22);
  if (((*((_DWORD *)this + 46) - v7) & 0x7FFF8) != 0)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        uint64_t v7 = *((void *)this + 22);
      }
      *(void *)(v7 + 8 * v8++) = 0;
      uint64_t v7 = *((void *)this + 22);
    }
    while (v8 < (unsigned __int16)((*((_DWORD *)this + 46) - v7) >> 3));
  }
  *((void *)this + 23) = v7;
  uint64_t v10 = *((void *)this + 3);
  if (((*((_DWORD *)this + 8) - v10) & 0x7FFF8) != 0)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v10 + 8 * v11);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        uint64_t v10 = *((void *)this + 3);
      }
      *(void *)(v10 + 8 * v11++) = 0;
      uint64_t v10 = *((void *)this + 3);
    }
    while (v11 < (unsigned __int16)((*((_DWORD *)this + 8) - v10) >> 3));
  }
  *((void *)this + 4) = v10;
  uint64_t v13 = *((void *)this + 6);
  if (((*((_DWORD *)this + 14) - v13) & 0x7FFF8) != 0)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(v13 + 8 * v14);
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        uint64_t v13 = *((void *)this + 6);
      }
      *(void *)(v13 + 8 * v14++) = 0;
      uint64_t v13 = *((void *)this + 6);
    }
    while (v14 < (unsigned __int16)((*((_DWORD *)this + 14) - v13) >> 3));
  }
  *((void *)this + 7) = v13;
  uint64_t v16 = *((void *)this + 9);
  if (((*((_DWORD *)this + 20) - v16) & 0x7FFF8) != 0)
  {
    uint64_t v17 = 0;
    do
    {
      unint64_t v18 = *(void *)(v16 + 8 * v17);
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        uint64_t v16 = *((void *)this + 9);
      }
      *(void *)(v16 + 8 * v17++) = 0;
      uint64_t v16 = *((void *)this + 9);
    }
    while (v17 < (unsigned __int16)((*((_DWORD *)this + 20) - v16) >> 3));
  }
  *((void *)this + 10) = v16;
  unint64_t v19 = (void *)*((void *)this + 22);
  if (v19)
  {
    *((void *)this + 23) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 15);
  if (v20)
  {
    *((void *)this + 16) = v20;
    operator delete(v20);
  }
  int v21 = (void *)*((void *)this + 12);
  if (v21)
  {
    *((void *)this + 13) = v21;
    operator delete(v21);
  }
  int v22 = (void *)*((void *)this + 9);
  if (v22)
  {
    *((void *)this + 10) = v22;
    operator delete(v22);
  }
  unsigned int v23 = (void *)*((void *)this + 6);
  if (v23)
  {
    *((void *)this + 7) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)*((void *)this + 3);
  if (v24)
  {
    *((void *)this + 4) = v24;
    operator delete(v24);
  }
}

void XlChartEnteredNumber::~XlChartEnteredNumber(XlChartEnteredNumber *this)
{
}

void XlChartEnteredText::~XlChartEnteredText(XlChartEnteredText *this)
{
  *(void *)this = &unk_26EBDE8E0;
  OcText::~OcText((OcText *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBDE8E0;
  OcText::~OcText((OcText *)((char *)this + 16));
}

void XlChartSeries::~XlChartSeries(XlChartSeries *this)
{
}

void XlChartSeriesFormat::~XlChartSeriesFormat(XlChartSeriesFormat *this)
{
  XlChartSeriesFormat::~XlChartSeriesFormat(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlChartLineStyle *var1;
  XlChartFillStyle *var2;
  XlChartMarkerStyle *var3;
  XlChartPicF *var4;
  char *var5;
  char *var6;

  this->var0 = (void **)&unk_26EBDCDD8;
  int var1 = this->var1;
  if (var1) {
    (*((void (**)(XlChartLineStyle *))var1->var0 + 1))(var1);
  }
  this->int var1 = 0;
  var2 = this->var2;
  if (var2) {
    (*((void (**)(XlChartFillStyle *))var2->var0 + 1))(var2);
  }
  this->var2 = 0;
  var3 = this->var3;
  if (var3) {
    (*((void (**)(XlChartMarkerStyle *))var3->var0 + 1))(var3);
  }
  this->var3 = 0;
  var4 = this->var4;
  if (var4) {
    (*((void (**)(XlChartPicF *))var4->var0 + 1))(var4);
  }
  this->var4 = 0;
  var5 = this->var5;
  if (var5) {
    MEMORY[0x23EC99790](var5, 0x1000C8077774924);
  }
  this->var5 = 0;
  var6 = this->var6;
  if (var6) {
    MEMORY[0x23EC99790](var6, 0x1000C8077774924);
  }
  this->var6 = 0;
}

void sub_238BE74E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHDDataValuesCollection;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

double XlChartBinaryReader::closeChart(XlChartBinaryReader *this)
{
  uint64_t v1 = (XlChartBinaryReader *)((char *)this + 1376);
  XlSubstreamProperties::operator=((uint64_t)this + 1136, (uint64_t)this + 1376);
  return XlSubstreamProperties::setDefault(v1);
}

void sub_238BE7660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE7718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE77C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  uint64_t v11 = v10;

  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_238BE7A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE7B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE7E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE7F18()
{
}

void sub_238BE7F20()
{
}

void sub_238BE7FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE82D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgArea3DBuffer(unsigned __int16 *a1, unsigned int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return extractDataFromPtgArea3DBuffer(a1, a2, a3, &v10, a4, &v9, a5, &v8, a6, &v7);
}

void sub_238BE84B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE874C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE8948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE8A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BE8C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE8CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE8DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t xlSectionForNumberWithFormatting(double a1, EDString *a2, EDWorkbook *a3)
{
  unsigned __int16 v5 = a2;
  uint64_t v6 = a3;
  XlFormatProcessor::XlFormatProcessor((XlFormatProcessor *)v9);
  if (v6) {
    v9[8] = [(EDWorkbook *)v6 legacyDateBase] != 0;
  }
  uint64_t v7 = xlSectionForNumberWithFormattingUsingProcessor(a1, v5, (XlFormatProcessor *)v9);
  XlFormatProcessor::~XlFormatProcessor((XlFormatProcessor *)v9);

  return v7;
}

void sub_238BE8E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlFormatProcessor::XlFormatProcessor(XlFormatProcessor *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t xlSectionForNumberWithFormattingUsingProcessor(double a1, EDString *a2, XlFormatProcessor *a3)
{
  unsigned __int16 v5 = a2;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = [(EDString *)v5 string];

    uint64_t v8 = 0;
    if (a3 && v7)
    {
      OcText::OcText(&v13);
      BOOL v9 = [(EDString *)v6 string];
      [v9 copyToOcText:&v13];

      FormatInfo = (XlFormatInfo *)XlFormatProcessor::getFormatInfo(a3, &v13);
      if (FormatInfo)
      {
        int NumericalSection = XlFormatProcessor::getNumericalSection(a3, a1, FormatInfo);
        if (NumericalSection < 0
          || (unsigned __int16)((*((_DWORD *)FormatInfo + 4) - *((_DWORD *)FormatInfo + 2)) >> 3) <= (unsigned __int16)NumericalSection)
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = XlFormatInfo::removeSection(FormatInfo, (unsigned __int16)NumericalSection);
        }
        XlFormatInfo::~XlFormatInfo(FormatInfo);
        MEMORY[0x23EC997B0]();
      }
      else
      {
        uint64_t v8 = 0;
      }
      OcText::~OcText(&v13);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_238BE8FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OcText::~OcText((OcText *)&a9);

  _Unwind_Resume(a1);
}

void sub_238BE90F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BE9200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlFormatProcessor::getFormatInfo(XlFormatProcessor *this, OcText *a2)
{
  uint64_t v4 = (XlFormatInfo *)operator new(0x20uLL);
  XlFormatInfo::XlFormatInfo(v4);
  *((void *)this + 3) = v4;
  unsigned __int16 v5 = (char *)this + 24;
  uint64_t v6 = *(XlFormatParser **)this;
  if (!*(void *)this)
  {
    uint64_t v6 = (XlFormatParser *)operator new(0x20uLL);
    XlFormatParser::XlFormatParser(v6);
    *(void *)this = v6;
  }
  XlFormatParser::setFormat(v6, a2);
  uint64_t v7 = (XlFormatSection *)operator new(0x60uLL);
  XlFormatSection::XlFormatSection(v7);
  *((void *)this + 4) = v7;
  XlFormatInfo::takeSection(*((XlFormatInfo **)this + 3), v7);
  for (signed __int16 i = (XlFmtPtg *)XlFormatParser::nextToken(*(XlFormatParser **)this);
        i;
        signed __int16 i = (XlFmtPtg *)XlFormatParser::nextToken(*(XlFormatParser **)this))
  {
    int v9 = *(_DWORD *)i;
    XlFormatSection::takeToken(*((XlFormatSection **)this + 4), i);
    if (v9 == 67)
    {
      BOOL v10 = (XlFormatSection *)operator new(0x60uLL);
      XlFormatSection::XlFormatSection(v10);
      *((void *)this + 4) = v10;
      XlFormatInfo::takeSection(*((XlFormatInfo **)this + 3), v10);
      if (((*(_DWORD *)(*(void *)v5 + 16) - *(_DWORD *)(*(void *)v5 + 8)) & 0x7FFF8) == 0x20) {
        *(unsigned char *)(*((void *)this + 4) + 1) = 1;
      }
    }
  }
  uint64_t v11 = (XlFmtPtg *)operator new(0x18uLL);
  XlFmtPtg::XlFmtPtg((uint64_t)v11, 67);
  XlFormatSection::takeToken(*((XlFormatSection **)this + 4), v11);
  uint64_t result = *(void *)v5;
  *(void *)unsigned __int16 v5 = 0;
  *((void *)this + 4) = 0;
  return result;
}

void sub_238BE9354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFormatInfo::XlFormatInfo(XlFormatInfo *this)
{
  *(_WORD *)this = -1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
}

void XlFormatParser::XlFormatParser(XlFormatParser *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
}

XlFmtPtg *XlFormatParser::setFormat(XlFormatParser *this, OcText *a2)
{
  *(void *)this = a2;
  uint64_t result = XlFormatParser::reset(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return result;
}

XlFmtPtg *XlFormatParser::reset(XlFormatParser *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  uint64_t result = (XlFmtPtg *)*((void *)this + 2);
  if (result)
  {
    XlFmtPtg::~XlFmtPtg(result);
    uint64_t result = (XlFmtPtg *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

void XlFormatSection::XlFormatSection(XlFormatSection *this)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = 256;
  *(_DWORD *)((char *)this + 10) = 0;
  *((void *)this + 2) = 0;
  *(void *)((char *)this + 22) = 0;
  *((_WORD *)this + 15) = -1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  *(_DWORD *)((char *)this + 66) = -1;
  *((_WORD *)this + 35) = -1;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
}

uint64_t XlFormatParser::nextToken(XlFormatParser *this)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 16) > *((_DWORD *)this + 6))
  {
    uint64_t v2 = (XlFmtPtg *)operator new(0x18uLL);
    XlFmtPtg::XlFmtPtg(v2);
    *((void *)this + 2) = v2;
    unsigned int Character = OcText::getCharacter(*(OcText **)this, *((_DWORD *)this + 6));
    unsigned int v4 = Character;
    if (Character <= 0x7F)
    {
      if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * Character + 60) & 0x100) != 0) {
        goto LABEL_5;
      }
    }
    else if (__maskrune(Character, 0x100uLL))
    {
LABEL_5:
      int AlphaToken = XlFormatParser::readAlphaToken(this, *((XlFmtPtg **)this + 2));
      goto LABEL_6;
    }
    if (v4 <= 0xFF && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v4 + 60) & 0x400) != 0)
    {
      uint64_t v7 = (XlFmtPtg *)*((void *)this + 2);
      if (v4 == 48)
      {
        *(_DWORD *)uint64_t v7 = 40;
        *((void *)v7 + 2) = 0x4048000000000000;
        goto LABEL_7;
      }
      int AlphaToken = XlFormatParser::readDigitToken(this, v7);
    }
    else
    {
      switch(v4)
      {
        case '[':
          int AlphaToken = XlFormatParser::readBracketToken(this, *((XlFmtPtg **)this + 2));
          break;
        case '.':
          int AlphaToken = XlFormatParser::readPeriodToken(this, *((XlFmtPtg **)this + 2));
          break;
        case '""':
          int AlphaToken = XlFormatParser::readTextToken(this, *((XlFmtPtg **)this + 2));
          break;
        default:
          if (v4 <= 0x7F) {
            int v8 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v4 + 60) & 0x4000;
          }
          else {
            int v8 = __maskrune(v4, 0x4000uLL);
          }
          if (v8)
          {
            uint64_t v9 = *((void *)this + 2);
            int v10 = 59;
          }
          else
          {
            switch(v4)
            {
              case '#':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 41;
                break;
              case '$':
                uint64_t v9 = *((void *)this + 2);
                *(void *)(v9 + 16) = 0x4042000000000000;
                int v10 = 51;
                break;
              case '%':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 44;
                break;
              case '&':
              case '\'':
              case '.':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case '<':
              case '=':
              case '>':
                goto LABEL_46;
              case '(':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 55;
                break;
              case ')':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 56;
                break;
              case '*':
                unsigned int v13 = *((_DWORD *)this + 6) + 1;
                *((_DWORD *)this + 6) = v13;
                uint64_t v14 = *((void *)this + 2);
                *(double *)(v14 + 16) = (double)OcText::getCharacter(*(OcText **)this, v13);
                uint64_t v9 = *((void *)this + 2);
                int v10 = 57;
                break;
              case '+':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 53;
                break;
              case ',':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 45;
                break;
              case '-':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 52;
                break;
              case '/':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 54;
                break;
              case ':':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 58;
                break;
              case ';':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 67;
                break;
              case '?':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 42;
                break;
              case '@':
                uint64_t v9 = *((void *)this + 2);
                int v10 = 50;
                break;
              default:
                if (v4 == 92)
                {
                  unsigned int v15 = *((_DWORD *)this + 6) + 1;
                  *((_DWORD *)this + 6) = v15;
                  uint64_t v16 = *((void *)this + 2);
                  *(double *)(v16 + 16) = (double)OcText::getCharacter(*(OcText **)this, v15);
                  uint64_t v9 = *((void *)this + 2);
                  int v10 = 62;
                }
                else
                {
                  if (v4 != 95)
                  {
LABEL_46:
                    exception = __cxa_allocate_exception(4uLL);
                    _DWORD *exception = 3002;
                  }
                  unsigned int v11 = *((_DWORD *)this + 6) + 1;
                  *((_DWORD *)this + 6) = v11;
                  uint64_t v12 = *((void *)this + 2);
                  *(double *)(v12 + 16) = (double)OcText::getCharacter(*(OcText **)this, v11);
                  uint64_t v9 = *((void *)this + 2);
                  int v10 = 61;
                }
                break;
            }
          }
          *(_DWORD *)uint64_t v9 = v10;
          goto LABEL_7;
      }
    }
LABEL_6:
    *((_DWORD *)this + 6) = AlphaToken + *((_DWORD *)this + 6) - 1;
LABEL_7:
    ++*((_DWORD *)this + 6);
    uint64_t result = *((void *)this + 2);
    *((void *)this + 2) = 0;
    return result;
  }
  return 0;
}

void sub_238BE9814(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFmtPtg::XlFmtPtg(XlFmtPtg *this)
{
  *(_DWORD *)this = 255;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

uint64_t XlFormatParser::readAlphaToken(XlFormatParser *this, XlFmtPtg *a2)
{
  unsigned int v4 = *((_DWORD *)this + 6);
  *(_DWORD *)a2 = 255;
  int Character = OcText::getCharacter(*(OcText **)this, v4);
  if (Character != 121)
  {
    unsigned int v6 = Character;
    if (Character == 100)
    {
      LOWORD(v7) = 0;
      *((unsigned char *)this + 28) = 1;
      unsigned int v8 = v4 + 1;
      do
      {
        __int16 v9 = v7;
        unsigned int v10 = v8;
        int v7 = (__int16)(v7 + 1);
        unsigned int v11 = *(OcText **)this;
        if (*(void *)this && v11->var3 <= v8) {
          break;
        }
        int v12 = OcText::getCharacter(v11, v8);
        unsigned int v8 = v10 + 1;
      }
      while (v12 == 100);
      switch(v9)
      {
        case 2:
          int v13 = 17;
          goto LABEL_65;
        case 1:
          int v13 = 16;
          goto LABEL_65;
        case 0:
          int v13 = 15;
LABEL_65:
          *(_DWORD *)a2 = v13;
          return (unsigned __int16)(v10 - *((_WORD *)this + 12));
      }
      if (v7 >= 4)
      {
        int v13 = 18;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if ((Character & 0xFFFFFFDF) == 0x4D)
    {
      LOWORD(v23) = 0;
      *((unsigned char *)this + 28) = 1;
      unsigned int v24 = v4 + 1;
      do
      {
        __int16 v25 = v23;
        unsigned int v10 = v24;
        int v23 = (__int16)(v23 + 1);
        uint64_t v26 = *(OcText **)this;
        if (*(void *)this && v26->var3 <= v24) {
          break;
        }
        int v27 = OcText::getCharacter(v26, v24);
        unsigned int v24 = v10 + 1;
      }
      while ((v27 & 0xFFFFFFDF) == 0x4D);
      switch(v25)
      {
        case 0:
          int v13 = 23;
          goto LABEL_65;
        case 1:
          int v13 = 24;
          goto LABEL_65;
        case 2:
          int v13 = 25;
          goto LABEL_65;
        case 3:
          break;
        case 4:
          int v13 = 27;
          goto LABEL_65;
        default:
          if (v23 < 6) {
            goto LABEL_108;
          }
          break;
      }
      int v13 = 26;
      goto LABEL_65;
    }
    if ((Character & 0xFFFFFFDF) == 0x48)
    {
      LOWORD(v18) = 0;
      *((unsigned char *)this + 28) = 1;
      unsigned int v19 = v4 + 1;
      do
      {
        __int16 v20 = v18;
        unsigned int v10 = v19;
        int v18 = (__int16)(v18 + 1);
        int v21 = *(OcText **)this;
        if (*(void *)this && v21->var3 <= v19) {
          break;
        }
        int v22 = OcText::getCharacter(v21, v19);
        unsigned int v19 = v10 + 1;
      }
      while ((v22 & 0xFFFFFFDF) == 0x48);
      if (!v20)
      {
        int v13 = 21;
        goto LABEL_65;
      }
      if (v18 >= 2)
      {
        int v13 = 22;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if (Character == 115)
    {
      LOWORD(v28) = 0;
      *((unsigned char *)this + 28) = 1;
      unsigned int v29 = v4 + 1;
      do
      {
        __int16 v30 = v28;
        unsigned int v10 = v29;
        int v28 = (__int16)(v28 + 1);
        int v31 = *(OcText **)this;
        if (*(void *)this && v31->var3 <= v29) {
          break;
        }
        int v32 = OcText::getCharacter(v31, v29);
        unsigned int v29 = v10 + 1;
      }
      while (v32 == 115);
      if (!v30)
      {
        int v13 = 31;
        goto LABEL_65;
      }
      if (v28 >= 2)
      {
        int v13 = 32;
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    if ((Character & 0xFFDF) == 0x41)
    {
      int64_t v33 = *(OcText **)this;
      if (!*(void *)this || v33->var3 > v4 + 2)
      {
        if (OcText::getCharacter(v33, v4) == 65
          && OcText::getCharacter(*(OcText **)this, v4 + 1) == 47
          && OcText::getCharacter(*(OcText **)this, v4 + 2) == 80)
        {
          *((unsigned char *)this + 28) = 1;
          LOWORD(v10) = v4 + 3;
          int v13 = 39;
          goto LABEL_65;
        }
        if (OcText::getCharacter(*(OcText **)this, v4) == 97
          && OcText::getCharacter(*(OcText **)this, v4 + 1) == 47
          && OcText::getCharacter(*(OcText **)this, v4 + 2) == 112)
        {
          *((unsigned char *)this + 28) = 1;
          LOWORD(v10) = v4 + 3;
          int v13 = 38;
          goto LABEL_65;
        }
        unint64_t v35 = *(OcText **)this;
        if (!*(void *)this || v35->var3 > v4 + 4)
        {
          if (OcText::getCharacter(v35, v4) == 65
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 77
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 47
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 80
            && OcText::getCharacter(*(OcText **)this, v4 + 4) == 77)
          {
            *((unsigned char *)this + 28) = 1;
            LOWORD(v10) = v4 + 5;
            int v13 = 36;
            goto LABEL_65;
          }
          if (OcText::getCharacter(*(OcText **)this, v4) == 97
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 109
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 47
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 112)
          {
            LOWORD(v10) = v4;
            if (OcText::getCharacter(*(OcText **)this, v4 + 4) == 109)
            {
              *((unsigned char *)this + 28) = 1;
              LOWORD(v10) = v4 + 5;
              int v13 = 37;
              goto LABEL_65;
            }
            goto LABEL_108;
          }
        }
      }
LABEL_107:
      LOWORD(v10) = v4;
      goto LABEL_108;
    }
    if (Character > 100)
    {
      switch(Character)
      {
        case 'e':
          unsigned int v10 = v4 + 1;
          uint64_t v44 = *(OcText **)this;
          if (!*(void *)this || v44->var3 > v10)
          {
            if (OcText::getCharacter(v44, v4 + 1) == 45)
            {
              LOWORD(v10) = v4 + 2;
              int v13 = 47;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 43)
            {
              LOWORD(v10) = v4 + 2;
              int v13 = 48;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 101)
            {
              unsigned int v51 = v4 + 2;
              int v52 = 1;
              do
              {
                int v53 = v52;
                unsigned int v10 = v51;
                char v54 = *(OcText **)this;
                if (*(void *)this && v54->var3 <= v51) {
                  break;
                }
                int v55 = OcText::getCharacter(v54, v51);
                unsigned int v51 = v10 + 1;
                int v52 = v53 + 1;
              }
              while (v55 == 101);
              if ((_WORD)v53)
              {
                int v13 = 69;
                goto LABEL_65;
              }
            }
          }
          int v13 = 68;
          goto LABEL_65;
        case 'g':
          int v45 = 0;
          unsigned int v46 = v4 + 1;
          do
          {
            int v47 = v45;
            unsigned int v10 = v46;
            int v48 = *(OcText **)this;
            if (*(void *)this && v48->var3 <= v46) {
              break;
            }
            int v49 = OcText::getCharacter(v48, v46);
            unsigned int v46 = v10 + 1;
            int v45 = v47 + 1;
          }
          while (v49 == 103);
          if ((unsigned __int16)v47 == 1) {
            int v13 = 71;
          }
          else {
            int v13 = 72;
          }
          goto LABEL_65;
        case 'r':
          int v36 = 0;
          unsigned int v37 = v4 + 1;
          do
          {
            int v38 = v36;
            unsigned int v10 = v37;
            unsigned int v39 = *(OcText **)this;
            if (*(void *)this && v39->var3 <= v37) {
              break;
            }
            int v40 = OcText::getCharacter(v39, v37);
            unsigned int v37 = v10 + 1;
            int v36 = v38 + 1;
          }
          while (v40 == 114);
          if ((_WORD)v38) {
            int v13 = 74;
          }
          else {
            int v13 = 73;
          }
          goto LABEL_65;
      }
    }
    else
    {
      switch(Character)
      {
        case 'E':
          unsigned int v10 = v4 + 1;
          uint64_t v41 = *(OcText **)this;
          if (!*(void *)this || v41->var3 > v10)
          {
            if (OcText::getCharacter(v41, v4 + 1) == 45)
            {
              LOWORD(v10) = v4 + 2;
              int v13 = 46;
              goto LABEL_65;
            }
            if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 43)
            {
              LOWORD(v10) = v4 + 2;
              int v13 = 49;
              goto LABEL_65;
            }
          }
          goto LABEL_108;
        case 'G':
          int v42 = *(OcText **)this;
          if ((!*(void *)this || v42->var3 > v4 + 6)
            && OcText::getCharacter(v42, v4) == 71
            && OcText::getCharacter(*(OcText **)this, v4 + 1) == 101
            && OcText::getCharacter(*(OcText **)this, v4 + 2) == 110
            && OcText::getCharacter(*(OcText **)this, v4 + 3) == 101
            && OcText::getCharacter(*(OcText **)this, v4 + 4) == 114
            && OcText::getCharacter(*(OcText **)this, v4 + 5) == 97)
          {
            LOWORD(v10) = v4;
            if (OcText::getCharacter(*(OcText **)this, v4 + 6) == 108)
            {
              LOWORD(v10) = v4 + 7;
              int v13 = 63;
              goto LABEL_65;
            }
            goto LABEL_108;
          }
          goto LABEL_107;
        case 'O':
          *((void *)a2 + 2) = 0x4048000000000000;
          int v34 = 40;
          goto LABEL_127;
      }
    }
    if ((Character & 0xFFDF) == 0x42)
    {
      unsigned int v10 = v4 + 1;
      int v50 = *(OcText **)this;
      if (!*(void *)this || v50->var3 > v10)
      {
        if (OcText::getCharacter(v50, v4 + 1) == 49)
        {
          LOWORD(v10) = v4 + 2;
          int v13 = 76;
        }
        else if (OcText::getCharacter(*(OcText **)this, v4 + 1) == 50)
        {
          LOWORD(v10) = v4 + 2;
          int v13 = 75;
        }
        else
        {
          *((double *)a2 + 2) = (double)v6;
          int v13 = 62;
        }
        goto LABEL_65;
      }
      goto LABEL_108;
    }
    *((double *)a2 + 2) = (double)Character;
    int v34 = 62;
LABEL_127:
    *(_DWORD *)a2 = v34;
    LOWORD(v10) = v4 + 1;
    return (unsigned __int16)(v10 - *((_WORD *)this + 12));
  }
  LOWORD(v14) = 0;
  *((unsigned char *)this + 28) = 1;
  unsigned int v15 = v4 + 1;
  do
  {
    unsigned int v10 = v15;
    int v14 = (__int16)(v14 + 1);
    uint64_t v16 = *(OcText **)this;
    if (*(void *)this && v16->var3 <= v15) {
      break;
    }
    int v17 = OcText::getCharacter(v16, v15);
    unsigned int v15 = v10 + 1;
  }
  while (v17 == 121);
  if (v14 == 2)
  {
    int v13 = 19;
    goto LABEL_65;
  }
  if (v14 >= 4)
  {
    int v13 = 20;
    goto LABEL_65;
  }
LABEL_108:
  if (*(_DWORD *)a2 == 255)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return (unsigned __int16)(v10 - *((_WORD *)this + 12));
}

void XlFormatSection::takeToken(XlFormatSection *this, XlFmtPtg *a2)
{
  if (!a2) {
    return;
  }
  unsigned int v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= 8u)
  {
    *((unsigned char *)this + 10) = 1;
    if (v4 == 8) {
      unsigned int v4 = (int)*((double *)a2 + 2);
    }
    *((_WORD *)this + 21) = v4;
    goto LABEL_26;
  }
  unsigned int v5 = v4 - 9;
  if (v4 - 9 <= 5)
  {
    int v6 = 1;
    *((unsigned char *)this + 11) = 1;
    *((void *)this + 2) = *((void *)a2 + 2);
    *((_DWORD *)this + 11) = 0;
    switch(v5)
    {
      case 0u:
        int v6 = 5;
        break;
      case 1u:
        int v6 = 3;
        break;
      case 2u:
        int v6 = 6;
        break;
      case 3u:
        int v6 = 2;
        break;
      case 5u:
        int v6 = 4;
        break;
      default:
        break;
    }
    *((_DWORD *)this + 11) = v6;
    goto LABEL_26;
  }
  if (v4 - 15 > 0x18)
  {
    if (v4 - 40 <= 9)
    {
      *((unsigned char *)this + 12) = 1;
      switch(v4)
      {
        case '+':
          ++*((_WORD *)this + 13);
          goto LABEL_50;
        case ',':
          *((unsigned char *)this + 5) = 1;
          goto LABEL_26;
        case '-':
          *((unsigned char *)this + 13) = 1;
          int v24 = *((unsigned __int16 *)this + 34);
          if ((v24 & 0x8000) != 0) {
            goto LABEL_51;
          }
          uint64_t v25 = (*((void *)this + 10) - *((void *)this + 9)) >> 3;
          if (v24 + 1 != v25 && *((__int16 *)this + 35) + 1 != v25) {
            goto LABEL_51;
          }
          *((_WORD *)this + 35) = v25;
          break;
        case '.':
        case '/':
        case '0':
        case '1':
          *((unsigned char *)this + 3) = 1;
          goto LABEL_26;
        default:
          if (v4 - 40 > 2) {
            goto LABEL_26;
          }
          *((unsigned char *)this + 7) = 1;
          if (*((unsigned char *)this + 3))
          {
            ++*((_WORD *)this + 19);
          }
          else if (*((_WORD *)this + 13) || *((unsigned char *)this + 4))
          {
            ++*((_WORD *)this + 16);
            if (v4 == 40) {
              ++*((_WORD *)this + 17);
            }
          }
          else
          {
            ++*((_WORD *)this + 18);
          }
LABEL_50:
          *((_WORD *)this + 34) = (*((_DWORD *)this + 20) - *((_DWORD *)this + 18)) >> 3;
LABEL_51:
          *((_WORD *)this + 35) = -1;
          break;
      }
    }
    goto LABEL_26;
  }
  *((unsigned char *)this + 2) = 1;
  if (v4 >= 0x24)
  {
    *((unsigned char *)this + 6) = 1;
    goto LABEL_26;
  }
  if (v4 < 0x15 || v4 - 25 <= 3)
  {
LABEL_63:
    *((_WORD *)this + 33) = -1;
    goto LABEL_26;
  }
  if (v4 >= 0x21)
  {
    unsigned __int16 v7 = v4 - 32;
    if (*((unsigned __int16 *)this + 14) < v7) {
      *((_WORD *)this + 14) = v7;
    }
    goto LABEL_63;
  }
  if (v4 <= 0x1D && ((1 << v4) & 0x20600000) != 0)
  {
    *((_WORD *)this + 33) = -1;
    *((unsigned char *)this + 64) = 1;
    goto LABEL_26;
  }
  if (v4 - 23 <= 1)
  {
    *((_WORD *)this + 33) = -1;
    if (*((unsigned char *)this + 64))
    {
      if (v4 == 23) {
        int v26 = 65;
      }
      else {
        int v26 = 66;
      }
      *(_DWORD *)a2 = v26;
      *((unsigned char *)this + 64) = 0;
    }
    else
    {
      *((_WORD *)this + 33) = (*((_DWORD *)this + 20) - *((_DWORD *)this + 18)) >> 3;
    }
    goto LABEL_26;
  }
  if (v4 - 31 <= 1)
  {
    *((unsigned char *)this + 64) = 1;
    if ((*((__int16 *)this + 33) & 0x80000000) == 0)
    {
      uint64_t v27 = *(void *)(*((void *)this + 9) + 8 * *((unsigned __int16 *)this + 33));
      double v28 = 2.0;
      if (*(_DWORD *)v27 == 23) {
        double v28 = 1.0;
      }
      *(double *)(v27 + 16) = v28;
      *(_DWORD *)uint64_t v27 = 28;
      goto LABEL_63;
    }
  }
LABEL_26:
  unint64_t v8 = *((void *)this + 11);
  __int16 v9 = (void *)*((void *)this + 10);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *((void *)this + 9);
    unint64_t v12 = (unint64_t)v9 - v11;
    unint64_t v13 = (v8 - v11) >> 3;
    unsigned int v14 = 2 * v13;
    if (2 * (int)v13 <= (v12 >> 3) + 1) {
      unsigned int v14 = (v12 >> 3) + 1;
    }
    if (v13 >= 0x7FFFFFFF) {
      unint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 88, v15);
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v18 = 0;
    }
    unsigned int v19 = &v16[v12 & 0x7FFFFFFF8];
    __int16 v20 = &v16[8 * v18];
    *(void *)unsigned int v19 = a2;
    unsigned int v10 = v19 + 8;
    int v22 = (char *)*((void *)this + 9);
    int v21 = (char *)*((void *)this + 10);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      int v21 = (char *)*((void *)this + 9);
    }
    *((void *)this + 9) = v19;
    *((void *)this + 10) = v10;
    *((void *)this + 11) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    void *v9 = a2;
    unsigned int v10 = v9 + 1;
  }
  *((void *)this + 10) = v10;
}

void sub_238BEA618(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlFmtPtg::XlFmtPtg(uint64_t result, int a2)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void XlFmtPtg::~XlFmtPtg(XlFmtPtg *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

uint64_t XlFormatProcessor::getNumericalSection(XlFormatProcessor *this, double a2, XlFormatInfo *a3)
{
  if (!a3) {
    return -1;
  }
  unsigned int v5 = (unsigned char **)*((void *)a3 + 1);
  unint64_t v6 = *((void *)a3 + 2) - (void)v5;
  __int16 v7 = -1;
  switch((unsigned __int16)(v6 >> 3))
  {
    case 0u:
      return v7;
    case 1u:
      if ((v6 & 0x7FFFFFFF8) == 0) {
        goto LABEL_54;
      }
      unint64_t v8 = *v5;
      __int16 v7 = v8[1];
      if (v8[1])
      {
        __int16 v7 = 0;
        *unint64_t v8 = 1;
      }
      return v7;
    case 2u:
      BOOL hasCondition = XlFormatInfo::hasCondition(a3);
      uint64_t v12 = *((void *)a3 + 1);
      uint64_t v13 = *((void *)a3 + 2) - v12;
      if (hasCondition)
      {
        if ((v13 & 0x7FFFFFFF8) != 0) {
          return (__int16)(XlFormatSection::isConditionMet(*(XlFormatSection **)v12, a2) ^ 1);
        }
LABEL_54:
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      if ((v13 & 0x7FFFFFFF0) == 0) {
        goto LABEL_54;
      }
      __int16 v7 = 0;
      if (a2 >= 0.0) {
        return v7;
      }
      uint64_t v20 = *(void *)(v12 + 8);
      if (*(unsigned char *)(v20 + 1)) {
        return v7;
      }
      *(unsigned char *)(v20 + 9) = 0;
      return 1;
    case 3u:
      BOOL v14 = XlFormatInfo::hasCondition(a3);
      uint64_t v15 = *((void *)a3 + 1);
      unint64_t v16 = (unint64_t)(*((void *)a3 + 2) - v15) >> 3;
      if (!v14)
      {
        if (v16 <= 2) {
          goto LABEL_54;
        }
        if (*(unsigned char *)(*(void *)(v15 + 16) + 1))
        {
          if (a2 >= 0.0) {
            return 0;
          }
        }
        else
        {
          if (a2 > 0.0) {
            return 0;
          }
          if (a2 >= 0.0) {
            return 2;
          }
        }
LABEL_50:
        *(unsigned char *)(*(void *)(v15 + 8) + 9) = 0;
        return 1;
      }
      if (!v16) {
        goto LABEL_54;
      }
      if (*(unsigned char *)(*(void *)v15 + 11))
      {
        if ((XlFormatSection::isConditionMet(*(XlFormatSection **)v15, a2) & 1) == 0)
        {
          uint64_t v17 = *((void *)a3 + 1);
          unint64_t v18 = (unint64_t)(*((void *)a3 + 2) - v17) >> 3;
          if (v18 <= 1) {
            goto LABEL_54;
          }
          unsigned int v19 = *(XlFormatSection **)(v17 + 8);
          if (!*((unsigned char *)v19 + 11))
          {
            if (v18 <= 2) {
              goto LABEL_54;
            }
            if (*(unsigned char *)(*(void *)(v17 + 16) + 1)) {
              return 1;
            }
            if (a2 < 0.0)
            {
              *((unsigned char *)v19 + 9) = 0;
              return 1;
            }
            return 2;
          }
          goto LABEL_42;
        }
        return 0;
      }
      if (a2 > 0.0) {
        return 0;
      }
      if (v16 <= 1) {
        goto LABEL_54;
      }
      unsigned int v19 = *(XlFormatSection **)(v15 + 8);
LABEL_42:
      if (XlFormatSection::isConditionMet(v19, a2)) {
        return 1;
      }
      uint64_t v21 = *((void *)a3 + 1);
      if (((unint64_t)(*((void *)a3 + 2) - v21) >> 3) <= 2) {
        goto LABEL_54;
      }
      if (*(unsigned char *)(*(void *)(v21 + 16) + 1)) {
        return -1;
      }
      else {
        return 2;
      }
    default:
      if (XlFormatInfo::hasCondition(a3))
      {
        __int16 v9 = (XlFormatSection **)*((void *)a3 + 1);
        if (((*((void *)a3 + 2) - (void)v9) & 0x7FFFFFFF8) == 0) {
          goto LABEL_54;
        }
        if ((XlFormatSection::isConditionMet(*v9, a2) & 1) == 0)
        {
          uint64_t v10 = *((void *)a3 + 1);
          if (((*((void *)a3 + 2) - v10) & 0x7FFFFFFF0) == 0) {
            goto LABEL_54;
          }
          if (XlFormatSection::isConditionMet(*(XlFormatSection **)(v10 + 8), a2)) {
            return 1;
          }
          else {
            return 2;
          }
        }
        return 0;
      }
      if (a2 > 0.0) {
        return 0;
      }
      if (a2 >= 0.0) {
        return 2;
      }
      uint64_t v15 = *((void *)a3 + 1);
      if (((*((void *)a3 + 2) - v15) & 0x7FFFFFFF0) == 0) {
        goto LABEL_54;
      }
      goto LABEL_50;
  }
}

uint64_t XlFormatInfo::removeSection(XlFormatInfo *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    return 0;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  *(void *)(v2 + 8 * a2) = 0;
  return result;
}

void XlFormatInfo::~XlFormatInfo(XlFormatInfo *this)
{
  XlFormatInfo::reset(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void *XlFormatInfo::reset(void *this)
{
  uint64_t v1 = this;
  *(_WORD *)this = -1;
  uint64_t v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        XlFormatSection::~XlFormatSection((XlFormatSection *)this);
        this = (void *)MEMORY[0x23EC997B0]();
        uint64_t v2 = v1[1];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void XlFormatProcessor::~XlFormatProcessor(XlFormatParser **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    XlFormatParser::~XlFormatParser(v2);
    MEMORY[0x23EC997B0]();
  }
  *this = 0;
  unint64_t v3 = this[3];
  if (v3)
  {
    XlFormatInfo::~XlFormatInfo(v3);
    MEMORY[0x23EC997B0]();
  }
  this[3] = 0;
  unsigned int v4 = this[2];
  if (v4)
  {
    XlDateTimeFormat::~XlDateTimeFormat(v4);
    MEMORY[0x23EC997B0]();
  }
  this[2] = 0;
}

void XlFormatParser::~XlFormatParser(XlFormatParser *this)
{
}

void XlFormatSection::~XlFormatSection(XlFormatSection *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (((*((void *)this + 10) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      unsigned int v4 = *(XlFmtPtg **)(v2 + 8 * v3);
      if (v4)
      {
        XlFmtPtg::~XlFmtPtg(v4);
        MEMORY[0x23EC997B0]();
        uint64_t v2 = *((void *)this + 9);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *((void *)this + 9);
    }
    while (v3 < ((unint64_t)(*((void *)this + 10) - v2) >> 3));
  }
  *((void *)this + 10) = v2;
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *((void *)this + 7) = 0;
  }
  __int16 v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
}

void sub_238BEADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEAF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEB3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, EDValue a11)
{
  EDValue::~EDValue(v14);
  _Unwind_Resume(a1);
}

void sub_238BEB6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEB8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEBAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEBDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDReferenceIterator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238BEBEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEC064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEC1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEC33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEC3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BECA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238BECB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BECDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BED244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BED390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BED44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BED5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEDC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,EDValue a24)
{
  _Unwind_Resume(a1);
}

void sub_238BEDE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EDValue::EDValue(EDValue *this, const EDValue *a2)
{
  int type = a2->type;
  this->int type = a2->type;
  switch(type)
  {
    case 0:
      goto LABEL_6;
    case 1:
      this->var0.BOOLean = a2->var0.BOOLean;
      break;
    case 2:
      this->var0.stringIndex = a2->var0.stringIndex;
      break;
    case 3:
      string = a2->var0.string;
      if (string) {
        this->var0.stringIndex = (unint64_t)strdup(string);
      }
      else {
LABEL_6:
      }
        this->var0.stringIndex = 0;
      break;
    case 5:
      this->var0.error = a2->var0.error;
      break;
    case 6:
      this->var0.stringIndex = a2->var0.stringIndex;
      break;
    default:
      return;
  }
}

void sub_238BEE010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BEF124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

double EDValue::numberValue(EDValue *this)
{
  return this->var0.number;
}

void sub_238BEF80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BEFB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartSerParent::XlChartSerParent(XlChartSerParent *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC230;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSerParent::~XlChartSerParent(XlChartSerParent *this)
{
}

void XlChartSerAuxErrBar::XlChartSerAuxErrBar(XlChartSerAuxErrBar *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC0F0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 36) = 0;
}

void XlChartSerAuxErrBar::~XlChartSerAuxErrBar(XlChartSerAuxErrBar *this)
{
}

void XlChartErrorBar::XlChartErrorBar(XlChartErrorBar *this)
{
  XlChartDataSeries::XlChartDataSeries(this);
  void *v2 = &unk_26EBDC780;
  XlChartSerAuxErrBar::XlChartSerAuxErrBar((XlChartSerAuxErrBar *)(v2 + 25));
  *((_DWORD *)this + 60) = 1;
}

void sub_238BEFEEC(_Unwind_Exception *a1)
{
  XlChartDataSeries::~XlChartDataSeries(v1);
  _Unwind_Resume(a1);
}

void XlChartSerAuxErrBar::XlChartSerAuxErrBar(XlChartSerAuxErrBar *this)
{
  XlRecord::XlRecord(this, 4187, 14, 0);
  *(void *)uint64_t v1 = &unk_26EBDC0F0;
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)(v1 + 28) = 0;
  *(unsigned char *)(v1 + 36) = 0;
}

uint64_t XlChartErrorBar::setParentSeriesIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = a2;
  return this;
}

XlChartLineStyle *XlChartSeriesFormat::takeLineStyle(XlChartSeriesFormat *this, XlChartLineStyle *a2)
{
  uint64_t result = this->var1;
  if (result) {
    uint64_t result = (XlChartLineStyle *)(*((uint64_t (**)(XlChartLineStyle *))result->var0 + 1))(result);
  }
  this->int var1 = a2;
  return result;
}

XlChartFillStyle *XlChartSeriesFormat::takeFillStyle(XlChartSeriesFormat *this, XlChartFillStyle *a2)
{
  uint64_t result = this->var2;
  if (result) {
    uint64_t result = (XlChartFillStyle *)(*((uint64_t (**)(XlChartFillStyle *))result->var0 + 1))(result);
  }
  this->var2 = a2;
  return result;
}

void XlChartPieFormat::XlChartPieFormat(XlChartPieFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBF30;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartPieFormat::~XlChartPieFormat(XlChartPieFormat *this)
{
}

uint64_t XlChartBinaryReader::mapMarkerProperties(XlChartBinaryReader *this)
{
  uint64_t v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((unsigned char *)this + 444));
  if (v2->var1 == 4105)
  {
    unint64_t v3 = operator new(0x28uLL);
    XlChartMarkerFormat::XlChartMarkerFormat((XlChartMarkerFormat *)v3, v2);
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 71);
    (*(void (**)(void, _DWORD *))(**((void **)this + 167) + 2080))(*((void *)this + 167), v3);
    int v5 = v3[4];
    int v6 = v3[5];
    *(_WORD *)(v4 + 22) = v5;
    *(_WORD *)(v4 + 20) = 255;
    *(_WORD *)(v4 + 24) = BYTE1(v5);
    *(_WORD *)(v4 + 26) = BYTE2(v5);
    *(_WORD *)(v4 + 12) = 255;
    *(_WORD *)(v4 + 14) = v6;
    *(_WORD *)(v4 + 16) = BYTE1(v6);
    *(_WORD *)(v4 + 18) = BYTE2(v6);
    *(_DWORD *)(v4 + 8) = v3[6];
    *(_DWORD *)(v4 + 28) = v3[9];
    *(unsigned char *)(v4 + 36) = XlChartMarkerFormat::isNoBackground((XlChartMarkerFormat *)v3) ^ 1;
    *(unsigned char *)(v4 + 37) = XlChartMarkerFormat::isNoForeground((XlChartMarkerFormat *)v3) ^ 1;
    *(unsigned char *)(v4 + 38) = XlChart3D::isPerspective((XlChart3D *)v3);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)((char *)v3 + 30);
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  else
  {
    XlParserVisitor::seekCurrentRecord(*((void *)this + 167));
    uint64_t v4 = 0;
  }
  MEMORY[0x23EC997B0](v2, 0x1000C4087442A64);
  return v4;
}

void sub_238BF0268(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartMarkerFormat::XlChartMarkerFormat(XlChartMarkerFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBE28;
  *(_DWORD *)(v2 + 36) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
}

uint64_t XlChartMarkerFormat::isNoBackground(XlChartMarkerFormat *this)
{
  return (*((unsigned __int16 *)this + 14) >> 4) & 1;
}

uint64_t XlChartMarkerFormat::isNoForeground(XlChartMarkerFormat *this)
{
  return (*((unsigned __int16 *)this + 14) >> 5) & 1;
}

void XlChartMarkerFormat::~XlChartMarkerFormat(XlChartMarkerFormat *this)
{
}

XlChartMarkerStyle *XlChartSeriesFormat::takeMarkerStyle(XlChartSeriesFormat *this, XlChartMarkerStyle *a2)
{
  uint64_t result = this->var3;
  if (result) {
    uint64_t result = (XlChartMarkerStyle *)(*((uint64_t (**)(XlChartMarkerStyle *))result->var0 + 1))(result);
  }
  this->var3 = a2;
  return result;
}

void XlChartScatterPlot::XlChartScatterPlot(XlChartScatterPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartScatter::XlChartScatter((XlChartScatter *)(v2 + 144));
  *(void *)this = &unk_26EBDB4E0;
  *((void *)this + 18) = &unk_26EBDB508;
}

void sub_238BF05F0(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartScatter::XlChartScatter(XlChartScatter *this)
{
  XlRecord::XlRecord(this, 4123, 6, 0);
  void *v1 = &unk_26EBDC0B0;
  v1[2] = 0x100000064;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartScatter *a2)
{
  XlParserVisitor::beginRead(this);
  if (*((_DWORD *)a2 + 2) >= 6u)
  {
    *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPlot::takeChartSeriesFormat(XlChartPlot *this, XlChartSeriesFormat *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = a2;
  return result;
}

uint64_t XlChartScatterPlot::getChartType(XlChartScatterPlot *this)
{
  return 5;
}

void sub_238BF07F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF0FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartErrorBar::getSeriesType(XlChartErrorBar *this)
{
  return 1;
}

void sub_238BF1304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartErrorBar::getParentSeriesIndex(XlChartErrorBar *this)
{
  return *((unsigned __int16 *)this + 9);
}

void sub_238BF1410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF14B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF1598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF1640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF1984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF19FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF1A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartScatterPlot::~XlChartScatterPlot(XlChartScatterPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartMarkerStyle::~XlChartMarkerStyle(XlChartMarkerStyle *this)
{
}

void XlChartErrorBar::~XlChartErrorBar(XlChartErrorBar *this)
{
  *(void *)this = &unk_26EBDC780;
  XlChartSerAuxErrBar::~XlChartSerAuxErrBar((XlChartErrorBar *)((char *)this + 200));
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBDC780;
  XlChartSerAuxErrBar::~XlChartSerAuxErrBar((XlChartErrorBar *)((char *)this + 200));
  XlChartDataSeries::~XlChartDataSeries(this);
}

void sub_238BF1C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF1E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

XlChartLineStyle *XlChartPlotAxis::takeAxisFormat(XlChartPlotAxis *this, XlChartLineStyle *a2)
{
  uint64_t result = this->var3;
  if (result) {
    uint64_t result = (XlChartLineStyle *)(*((uint64_t (**)(XlChartLineStyle *))result->var0 + 1))(result);
  }
  this->var3 = a2;
  return result;
}

void sub_238BF20A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF21BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF2250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF2364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::handleChartSubstream(XlChartBinaryReader *this, int a2)
{
  uint64_t v4 = (char *)*((void *)this + 170);
  unint64_t v5 = *((void *)this + 171);
  if ((unint64_t)v4 >= v5)
  {
    __int16 v7 = (char *)*((void *)this + 169);
    int64_t v8 = v4 - v7;
    unint64_t v9 = (unint64_t)(v4 - v7) >> 2;
    unint64_t v10 = (v5 - (unint64_t)v7) >> 2;
    if (2 * (int)v10 <= (v9 + 1)) {
      unsigned int v11 = v9 + 1;
    }
    else {
      unsigned int v11 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1368, v12);
      uint64_t v15 = v14;
      uint64_t v4 = (char *)*((void *)this + 170);
      __int16 v7 = (char *)*((void *)this + 169);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v13[v8 & 0x3FFFFFFFCLL];
    uint64_t v17 = &v13[4 * v15];
    *(_DWORD *)unint64_t v16 = a2;
    int v6 = v16 + 4;
    while (v4 != v7)
    {
      int v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((void *)this + 169) = v16;
    *((void *)this + 170) = v6;
    *((void *)this + 171) = v17;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = a2;
    int v6 = v4 + 4;
  }
  *((void *)this + 170) = v6;
  return 0;
}

XlChartPlotAxis *XlChartPlotAxis::setFontIndex(XlChartPlotAxis *this, unsigned __int16 a2)
{
  this->var22 = 1;
  this->var15 = a2;
  return this;
}

void EshCalloutRule::EshCalloutRule(EshCalloutRule *this)
{
  EshAtom::EshAtom(this, 0xF017u, 0);
  *(void *)uint64_t v1 = &unk_26EBD6D70;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshCalloutRule::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptAnimRotationBehaviorAtom::PptAnimRotationBehaviorAtom(PptAnimRotationBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8920;
  *(void *)(v2 + 32) = &unk_26EBE89C8;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
}

uint64_t PptAnimRotationBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimRotationBehaviorAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((float *)a2 + 12) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (*((float *)a2 + 13) = (float)(*(unsigned int (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12)
    || (*((float *)a2 + 14) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshShadow::getShadowType(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x200u);
}

void PptAnimRotationBehaviorAtom::~PptAnimRotationBehaviorAtom(PptAnimRotationBehaviorAtom *this)
{
}

void EshCalloutRule::~EshCalloutRule(EshCalloutRule *this)
{
}

uint64_t XlSupBook::setEncodedName(uint64_t this, XlString *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 55))
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(void *)(v3 + 16) = a2;
  return this;
}

uint64_t XlLink::getTotalOperandCount(XlLink *this)
{
  unsigned int v1 = *((_DWORD *)this + 6);
  uint64_t v2 = (*((void *)this + 12) - *((void *)this + 11)) >> 3;
  if (v1 <= v2) {
    return v2;
  }
  else {
    return v1;
  }
}

void sub_238BF2D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

XlString *XlString::setString(XlString *this, const char *__s)
{
  if (__s)
  {
    uint64_t v3 = this;
    int v4 = strlen(__s);
    this = (XlString *)OcText::copyBuffer((OcText *)((char *)v3 + 8), (const unsigned __int8 *)__s, v4 + 1);
    *((_DWORD *)v3 + 6) = v4;
    *((_DWORD *)v3 + 4) = 2;
  }
  return this;
}

uint64_t XlGraphicsInfo::takeOLEName(XlGraphicsInfo *this, XlString *a2)
{
  uint64_t result = *((void *)this + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 16) = a2;
  return result;
}

void sub_238BF2EE8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x238BF2EA8);
}

void sub_238BF2F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlAddMenu::setMacro(XlAddMenu *this, XlString *a2)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = a2;
  return result;
}

void PptExitAnimationInfoAtom::PptExitAnimationInfoAtom(PptExitAnimationInfoAtom *this, const EshHeader *a2)
{
  PptAnimationInfoAtom::PptAnimationInfoAtom(this, a2);
  void *v2 = &unk_26EBE7EF0;
  v2[4] = &unk_26EBE7F98;
}

void PptExitAnimationInfoAtom::~PptExitAnimationInfoAtom(PptExitAnimationInfoAtom *this)
{
}

uint64_t SsrwOOMemStream::readSInt32(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadSInt32((unsigned int *)(**((void **)this + 1) + v1));
  *((_DWORD *)this + 5) += 4;
  return result;
}

void sub_238BF313C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF32DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlPhoneticRun::XlPhoneticRun(XlPhoneticRun *this)
{
  *(void *)this = &unk_26EBE0620;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = -1;
}

void XlPhoneticInfo::appendRun(XlPhoneticInfo *this, XlPhoneticRun *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 11);
  int v4 = (char *)this + 88;
  unint64_t v5 = v6;
  __int16 v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 9);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int64_t v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 9);
    unsigned int v19 = (char *)*((void *)this + 10);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 9);
    }
    *((void *)this + 9) = v17;
    *((void *)this + 10) = v8;
    *((void *)this + 11) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *__int16 v7 = a2;
    int64_t v8 = v7 + 1;
  }
  *((void *)this + 10) = v8;
}

void XlPhoneticRun::~XlPhoneticRun(XlPhoneticRun *this)
{
}

uint64_t XlEshGroup::takeClientAnchor(uint64_t this, XlEshClientAnchor *a2)
{
  if (*(void *)(this + 368))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(void *)(this + 368) = a2;
  return this;
}

uint64_t XlEshGroup::takeClientData(uint64_t this, XlEshClientData *a2)
{
  if (*(void *)(this + 376))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(void *)(this + 376) = a2;
  return this;
}

void sub_238BF375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF383C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF3940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF39E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF3A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF3B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EshConnectorRule::EshConnectorRule(EshConnectorRule *this)
{
  EshAtom::EshAtom(this, 0xF012u, 1u);
  void *v1 = &unk_26EBD6F98;
  *(void *)((char *)v1 + 28) = 0;
  *(void *)((char *)v1 + 44) = 0;
  *(void *)((char *)v1 + 36) = 0;
}

uint64_t EshConnectorRule::accept(int a1, void *lpsrc)
{
  return v2();
}

void XlMsoDrawingSelection::XlMsoDrawingSelection(XlMsoDrawingSelection *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE01E8;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 28) = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, unsigned int *a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  unsigned int v6 = a2[2];
  if (v6)
  {
    a2[2] = XlParserVisitor::getDataAndContinues((XlParserVisitor *)a1, &v6, -1) - *(_DWORD *)(a1 + 72);
    unsigned int v4 = v6;
  }
  else
  {
    unsigned int v4 = 0;
  }
  XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *(unsigned __int8 **)(a1 + 24), v4);
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlMsoDrawingSelection::~XlMsoDrawingSelection(XlMsoDrawingSelection *this)
{
  *(void *)this = &unk_26EBE01E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE01E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void EshConnectorRule::~EshConnectorRule(EshConnectorRule *this)
{
}

void sub_238BF41D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF4414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlNote::XlNote(XlNote *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE02E8;
  v2[2] = 0;
  v2[3] = 0;
  *(void *)((char *)v2 + 31) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlNote *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) < 9u)
  {
    *((unsigned char *)a2 + 38) = 1;
    *((_WORD *)a2 + 18) = 0;
    XlBoundSheet::setName(a2, 0);
    int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    int v20 = v7;
    if (v7)
    {
      unsigned int v8 = v7;
      uint64_t v9 = operator new[]((v7 + 1));
      *((void *)this + 3) = v9;
      v9[v8] = 0;
      if (v8 > 0x800)
      {
        unsigned int v10 = 0;
        unsigned int v19 = 2048;
        while (1)
        {
          (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3) + v10, &v19);
          unsigned int v11 = v19;
          int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
          unsigned int v19 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
          if (v12 != 28) {
            break;
          }
          int v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
          unsigned int v14 = *(void (**)(void))(**((void **)this + 2) + 16);
          if (v13 != -1)
          {
            v14();
            break;
          }
          v10 += v11;
          v14();
          unsigned int v19 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
          if (v8 < v19 || v10 > v8 - v19)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = 3002;
          }
        }
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
      }
      else
      {
        (*(void (**)(void, void, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v20);
      }
    }
    uint64_t v17 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v17);
    *((void *)this + 4) = v17;
    XlString::takeString((uint64_t)v17, *((char **)this + 3), v20 + 1, v20, 1252);
    *((void *)this + 3) = 0;
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                        - *((_DWORD *)this + 18);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    int v5 = *((_DWORD *)a2 + 2);
    *((unsigned char *)a2 + 38) = ((*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 2) != 0;
    *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    unsigned int v6 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v6);
    *((void *)this + 4) = v6;
    if (*((_DWORD *)a2 + 2) >= 0xBu)
    {
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5 + v4, v6);
      unsigned int v6 = (XlString *)*((void *)this + 4);
    }
    XlBoundSheet::setName(a2, v6);
    *((void *)this + 4) = 0;
    XlAddMenu::setMenuItem(a2, 0);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BF4908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlAddMenu::setMenuItem(XlAddMenu *this, XlString *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = a2;
  return result;
}

void XlNote::~XlNote(XlNote *this)
{
  XlNote::~XlNote(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBE02E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
}

void XlDVal::XlDVal(XlDVal *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF3E8;
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  *(void *)(v2 + 28) = 0;
  *(void *)(v2 + 20) = 0;
}

void XlDV::XlDV(XlDV *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF3A8;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 22) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(void *)(v2 + 104) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDV *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = v7 & 0xF;
  *((_DWORD *)a2 + 5) = (v7 >> 4) & 7;
  *((unsigned char *)a2 + 24) = (v7 & 0x80) != 0;
  *((unsigned char *)a2 + 25) = BYTE1(v7) & 1;
  *((unsigned char *)a2 + 26) = (v7 & 0x200) != 0;
  *((unsigned char *)a2 + 27) = v7 >> 10;
  *((unsigned char *)a2 + 28) = (v7 & 0x40000) != 0;
  *((unsigned char *)a2 + 29) = (v7 & 0x80000) != 0;
  *((_DWORD *)a2 + 8) = ((v7 >> 20) & 0xF) + 1;
  unsigned int v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  int v9 = v5 + v4;
  *((void *)this + 4) = v8;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v8);
  XlAddMenu::setMacro(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  unsigned int v10 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v10);
  *((void *)this + 4) = v10;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v10);
  XlAddMenu::setStatus(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  unsigned int v11 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v11);
  *((void *)this + 4) = v11;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v11);
  XlAddMenu::setHelp(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  int v12 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v12);
  *((void *)this + 4) = v12;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v12);
  XlDocRoute::setRoutingID(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  int v13 = (XlSxFmla *)operator new(0x20uLL);
  XlSxFmla::XlSxFmla(v13, 249, 0, *((unsigned char *)a2 + 14));
  (*(void (**)(XlParserVisitor *, XlSxFmla *))(*(void *)this + 1104))(this, v13);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), (unsigned __int16)(*((_WORD *)v13 + 8) + 4), 1);
  *((_DWORD *)v13 + 2) = (unsigned __int16)(*((_WORD *)v13 + 8) + 4);
  XlChartPlotAxis::takeTicks((XlChartPlotAxis *)a2, (XlChartTick *)v13);
  unsigned int v14 = (XlSxFmla *)operator new(0x20uLL);
  XlSxFmla::XlSxFmla(v14, 249, 0, *((unsigned char *)a2 + 14));
  (*(void (**)(XlParserVisitor *, XlSxFmla *))(*(void *)this + 1104))(this, v14);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), (unsigned __int16)(*((_WORD *)v14 + 8) + 4), 1);
  *((_DWORD *)v14 + 2) = (unsigned __int16)(*((_WORD *)v14 + 8) + 4);
  XlDV::setMaxFmla(a2, v14);
  int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v15)
  {
    int v16 = v15;
    do
    {
      uint64_t v17 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v17, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v17);
      XlDV::appendRef(a2, v17);
      --v16;
    }
    while (v16);
  }
  *((_DWORD *)this + 18) = v6;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238BF5098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlAddMenu::setStatus(XlAddMenu *this, XlString *a2)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = a2;
  return result;
}

uint64_t XlDocRoute::setRoutingID(XlDocRoute *this, XlString *a2)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = a2;
  return result;
}

void XlSxFmla::XlSxFmla(XlSxFmla *this, __int16 a2, int a3, char a4)
{
  XlRecord::XlRecord(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_26EBE17F8;
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFmla *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *(_DWORD *)unsigned int v7 = v4;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v4)
  {
    int v5 = (unsigned __int8 *)operator new[](v4);
    (*(void (**)(void, unsigned __int8 *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, v7);
    XlObjProj::setVbProj(a2, v5, v7[0]);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlObjProj::setVbProj(XlObjProj *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 3) = a2;
  *((_WORD *)this + 8) = a3;
  return result;
}

uint64_t XlDV::setMaxFmla(XlDV *this, XlSxFmla *a2)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = a2;
  return result;
}

void XlDV::appendRef(XlDV *this, XlRef *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 13);
  unsigned int v4 = (char *)this + 104;
  unint64_t v5 = v6;
  unsigned int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 11);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    unsigned int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 11);
    unsigned int v19 = (char *)*((void *)this + 12);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 11);
    }
    *((void *)this + 11) = v17;
    *((void *)this + 12) = v8;
    *((void *)this + 13) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    unsigned int v8 = v7 + 1;
  }
  *((void *)this + 12) = v8;
}

void sub_238BF5560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF5608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlDVal::~XlDVal(XlDVal *this)
{
}

void XlDV::~XlDV(XlDV *this)
{
  XlDV::~XlDV(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(void *)this = &unk_26EBDF3A8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 6) = 0;
  unsigned int v4 = *((void *)this + 7);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 7) = 0;
  unint64_t v5 = *((void *)this + 8);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 8) = 0;
  unint64_t v6 = *((void *)this + 9);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 9) = 0;
  unsigned int v7 = *((void *)this + 10);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 10) = 0;
  XlDV::clearRefs((uint64_t)this);
  unsigned int v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
  }
}

void XlSxFmla::~XlSxFmla(XlSxFmla *this)
{
  *(void *)this = &unk_26EBE17F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE17F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

uint64_t XlDV::clearRefs(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 88);
  uint64_t v3 = *(void *)(this + 96);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
        uint64_t v2 = *(void *)(v1 + 88);
        uint64_t v3 = *(void *)(v1 + 96);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 96) = v2;
  return this;
}

void XlSheetTab::XlSheetTab(XlSheetTab *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE13C0;
  *(_DWORD *)(v2 + 16) = 20;
  *(_WORD *)(v2 + 20) = 0;
}

void sub_238BF6174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF62C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OCCXmlStreamer::createUsingInputFile(OCCStreamer *a1, _DWORD *a2, uint64_t a3, SsrwOORootStorage **a4)
{
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  *a2 = 8001;
  if (OCCStreamer::openInputFile(a1, (char *)&v8, &v9, a4)
    && (uint64_t result = OCCXmlStreamer::createUsingRootStorage((OCCStreamer *)v9, a2, v5, v6)) != 0)
  {
    *(void *)(result + 40) = v8;
  }
  else
  {
    if (v9)
    {
      SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)v9);
      MEMORY[0x23EC997B0]();
    }
    uint64_t result = (uint64_t)v8;
    if (v8)
    {
      fclose(v8);
      return 0;
    }
  }
  return result;
}

FILE *OCCStreamer::openInputFile(OCCStreamer *this, char *a2, __sFILE **a3, SsrwOORootStorage **a4)
{
  uint64_t result = fopen((const char *)this, "rb");
  *(void *)a2 = result;
  if (result) {
    operator new();
  }
  return result;
}

void sub_238BF63D8(void *a1)
{
  MEMORY[0x23EC997B0](v3, 0x1020C400B9F2F10);
  __cxa_begin_catch(a1);
  if (*v2)
  {
    SsrwOORootStorage::~SsrwOORootStorage(*v2);
    MEMORY[0x23EC997B0]();
  }
  void *v2 = 0;
  fclose(*v1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x238BF63C8);
}

void sub_238BF6550(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x238BF6500);
  }

  _Unwind_Resume(a1);
}

void sub_238BF66A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF69EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12)
{
}

void sub_238BF6B18()
{
  objc_end_catch();
  JUMPOUT(0x238BF6AE4);
}

void sub_238BF6B28()
{
  if (v0) {
    JUMPOUT(0x238BF6B30);
  }
  JUMPOUT(0x238BF6B34);
}

void sub_238BF6D5C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    id v5 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_238BF70E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF7418(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 1)
  {
    id v12 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_238BF7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238BF7AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF7B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF7BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF7C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF7D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF7FD4()
{
}

void sub_238BF80B4()
{
  objc_end_catch();
  JUMPOUT(0x238BF80C0);
}

void sub_238BF81A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF82B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF84E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF8730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF88DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF89F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF8AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF8D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF8E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF9004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF926C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  id v5 = CXFirstChild(a1);
  pTCXmlCheckName(v5, a2, a3);
  return v5;
}

BOOL CXNodeHasName(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  if (!a1 || !xmlStrEqual(a1->name, str2)) {
    return 0;
  }
  return [(CXNamespace *)a2 containsNode:a1];
}

void sub_238BF9418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  uint64_t result = CXFindAttribute(a1, a2, a3);
  if (result)
  {
    return (_xmlAttr *)CXUnsignedLongValue(result);
  }
  return result;
}

unint64_t CXUnsignedLongValue(_xmlAttr *a1)
{
  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    char v3 = 0;
  }
  else
  {
    String = children->content;
    char v3 = 1;
  }
  unint64_t v5 = 0;
  if (String) {
    sfaxmlXmlCharToUnsignedLong((const char *)String, &v5);
  }
  if ((v3 & 1) == 0) {
    ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(String);
  }
  return v5;
}

uint64_t sfaxmlXmlCharToUnsignedLong(const char *a1, unint64_t *a2)
{
  __endptr = 0;
  unint64_t v4 = strtoul(a1, &__endptr, 10);
  if (*__endptr || !*a1) {
    return 0;
  }
  *a2 = v4;
  return 1;
}

_xmlNode *CXNextSibling(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  unint64_t v5 = CXNextSibling(a1);
  pTCXmlCheckName(v5, a2, a3);
  return v5;
}

void sub_238BF9694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t xmlStringHash(const xmlChar *a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = xmlStrlen(a1);
  if (v2 >= 0x11)
  {
    uint64_t v6 = 0;
    int v4 = v2;
    do
      int v4 = 257 * v4 + v1[v6++];
    while (v6 != 8);
    uint64_t v7 = -8;
    do
      int v4 = 257 * v4 + v1[v2 + v7++];
    while (v7);
  }
  else if (v2)
  {
    unsigned int v3 = v2;
    int v4 = v2;
    do
    {
      int v5 = *v1++;
      int v4 = 257 * v4 + v5;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  return ((v4 << v2) + v4);
}

uint64_t xmlStringIsEqual(const xmlChar *a1, const xmlChar *a2)
{
  return xmlStrEqual(a1, a2);
}

void sub_238BF9B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF9C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF9CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF9D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF9DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BF9E68(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238BF9F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BF9FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFA508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFA74C(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238BFA808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFAA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFB118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL CXOptionalStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString **a4)
{
  int v5 = CXFindAttribute(a1, a2, a3);
  if (v5) {
    *a4 = (NSString *)(id)objc_msgSend([NSString alloc], "tc_initWithValueOfXmlAttribute:", v5);
  }
  return v5 != 0;
}

void sub_238BFB2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFB510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238BFBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238BFC0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFC7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238BFC910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFCA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238BFCB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlGetNSStringAnyNsProp(const xmlNode *a1, const xmlChar *a2, void *a3)
{
  Prop = xmlGetProp(a1, a2);
  if (!Prop) {
    return 0;
  }
  int v5 = Prop;
  id v9 = 0;
  BOOL v6 = sfaxmlXmlCharToNSString((uint64_t)Prop, &v9);
  id v7 = v9;
  ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(v5);
  if (v6) {
    *a3 = v7;
  }

  return v6;
}

void sub_238BFCCB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlXmlCharToNSString(uint64_t a1, void *a2)
{
  id v3 = [NSString stringWithUTF8String:a1];
  *a2 = v3;
  return v3 != 0;
}

void sub_238BFD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238BFD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_238BFF260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238C0045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C01CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C021A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sfaxmlGetBoolAnyNsProp(const xmlNode *a1, const xmlChar *a2, unsigned char *a3)
{
  Prop = xmlGetProp(a1, a2);
  if (!Prop) {
    return 0;
  }
  int v5 = Prop;
  char v8 = 0;
  uint64_t v6 = sfaxmlXmlCharToBool(Prop, &v8);
  ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(v5);
  if (v6) {
    *a3 = v8;
  }
  return v6;
}

void sub_238C022C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C031E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C03538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C037B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C03F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C041FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C04388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C05558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t SFUXmlReaderIORead(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = [a1 readToBuffer:a2 size:a3];
  if (v3 >= 0x80000000)
  {
    uint64_t v4 = objc_msgSend(NSString, "stringWithUTF8String:", "int SFUXmlReaderIORead(void *, char *, int)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUDataRepresentation.m"], 486, 0, "Overflow in SFUXmlReaderIORead");
    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return v3;
}

void sub_238C0577C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C05D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C05E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C05EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0601C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C060A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C06378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C06734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C068EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C06D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlNsEqual(uint64_t a1, uint64_t a2)
{
  if (!(a1 | a2)) {
    return 1;
  }
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return xmlStrEqual(*(const xmlChar **)(a1 + 16), *(const xmlChar **)(a2 + 16)) != 0;
    }
  }
  return result;
}

void sub_238C06E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C06FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_238C07C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238C080BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, char a17)
{
  do
  {
    unsigned int v19 = (void *)*((void *)v18 - 1);
    v18 -= 8;
  }
  while (v18 != &a17);

  _Unwind_Resume(a1);
}

void sub_238C0839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C08868(_Unwind_Exception *a1)
{
  id v7 = v4;

  _Unwind_Resume(a1);
}

void sub_238C08B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C08FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C09690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C09920(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238C09D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238C09EB0()
{
  JUMPOUT(0x238C09E78);
}

void sub_238C09EC0()
{
  JUMPOUT(0x238C09E98);
}

void sub_238C0A034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0A408(_Unwind_Exception *a1)
{
  uint64_t v6 = v1;
  char v8 = *(void **)(v5 - 200);
  id v7 = *(void **)(v5 - 192);
  id v9 = *(void **)(v5 - 120);

  _Unwind_Resume(a1);
}

void sub_238C0A614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0A704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0A9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_238C0B868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  BOOL result = CXFindAttribute(a1, a2, a3);
  if (result)
  {
    return (_xmlAttr *)CXBoolValue(result);
  }
  return result;
}

void sub_238C0BC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0BF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0C0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0C1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0C4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0C7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, id a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t SFUXmlReaderIOClose(void *a1)
{
  return 0;
}

void sub_238C0DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0DF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0DF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0E0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0E154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C0E218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C0EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238C0EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C0F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C0FD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C10004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C100B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C10444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, id a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C10A0C()
{
  JUMPOUT(0x238C10AE0);
}

void sub_238C10A18()
{
  JUMPOUT(0x238C10B38);
}

void sub_238C10A78()
{
}

void sub_238C10A80()
{
}

void sub_238C10AC0()
{
}

void sub_238C10ACC()
{
}

void sub_238C10AF8()
{
  JUMPOUT(0x238C10B38);
}

void sub_238C10B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C10C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C10DEC()
{
}

void sub_238C1104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C11150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C11300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OAVReadComposite(NSString *a1)
{
  uint64_t v1 = [(NSString *)a1 componentsSeparatedByString:@";"];
  uint64_t v2 = [v1 count];
  id v15 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v2];
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = [v1 objectAtIndex:i];
      uint64_t v5 = [v4 componentsSeparatedByString:@":"];

      if ([v5 count] == 2)
      {
        uint64_t v6 = [v5 objectAtIndex:0];
        id v7 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
        char v8 = [v6 stringByTrimmingCharactersInSet:v7];

        id v9 = [v5 objectAtIndex:1];
        unint64_t v10 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
        unint64_t v11 = [v9 stringByTrimmingCharactersInSet:v10];

        if ([v11 hasPrefix:@"\""]
          && [v11 hasSuffix:@"\""]
          && (unint64_t)[v11 length] >= 2)
        {
          uint64_t v12 = objc_msgSend(v11, "substringWithRange:", 1, objc_msgSend(v11, "length") - 2);

          id v13 = (void *)v12;
        }
        else
        {
          id v13 = v11;
        }
        [v15 setObject:v13 forKey:v8];
      }
    }
  }

  return v15;
}

void sub_238C11538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C115F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C116B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C11CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

float OAVReadLength(NSString *a1)
{
  uint64_t v1 = a1;
  double v13 = 0.0;
  int v12 = 0;
  CXSplitValueAndUnit(v1, &v13, &v12);
  switch(v12)
  {
    case 0:
    case 10:
      double v2 = v13;
      double v3 = 0.75;
      goto LABEL_6;
    case 6:
      double v7 = v13;
      goto LABEL_12;
    case 7:
      double v2 = v13;
      double v3 = 72.0;
LABEL_6:
      double v7 = v2 * v3;
      goto LABEL_12;
    case 8:
      double v8 = v13;
      double v9 = 360000.0;
      goto LABEL_9;
    case 9:
      double v8 = v13;
      double v9 = 36000.0;
LABEL_9:
      double v10 = v8 * v9;
      goto LABEL_11;
    case 12:
      double v10 = v13;
LABEL_11:
      double v7 = v10 / 12700.0;
LABEL_12:
      float v6 = v7;
      break;
    default:
      uint64_t v4 = [NSString stringWithUTF8String:"float OAVReadLength(NSString *__strong)"];
      uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:65 isFatal:0 description:"Unhandled case"];

      float v6 = 0.0;
      +[OITSUAssertionHandler logBacktraceThrottled];
      break;
  }

  return v6;
}

void sub_238C11F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C120B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C124E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C127E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C128AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C12950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float OAVReadFraction(NSString *a1)
{
  uint64_t v1 = a1;
  double v8 = 0.0;
  int v7 = 0;
  CXSplitValueAndUnit(v1, &v8, &v7);
  if (v7)
  {
    if (v7 == 1)
    {
      double v2 = v8 * 0.0000152587891;
    }
    else
    {
      if (v7 != 13)
      {
        uint64_t v4 = [NSString stringWithUTF8String:"float OAVReadFraction(NSString *__strong)"];
        uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm"];
        +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:84 isFatal:0 description:"Unhandled case"];

        float v3 = 0.0;
        +[OITSUAssertionHandler logBacktraceThrottled];
        goto LABEL_9;
      }
      double v2 = v8 / 100.0;
    }
  }
  else
  {
    double v2 = v8;
  }
  float v3 = v2;
LABEL_9:

  return v3;
}

void sub_238C12A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C12BF8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238C12DB4(_Unwind_Exception *a1)
{
  float v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238C12F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C131A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C13704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C13958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C13F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1401C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C140C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C141D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238C14568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C147A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C14C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C14E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C15078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C156B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C15878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C159B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C15A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C15BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCPPackagePart;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238C15E08(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  if (a2 == 1)
  {
    id v15 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x238C15DB0);
  }

  _Unwind_Resume(a1);
}

void sub_238C15FC8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238C1606C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C160F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C165D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C16868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C169FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C16B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C16CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CXOptionalUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, unint64_t *a4)
{
  uint64_t v5 = CXFindAttribute(a1, a2, a3);
  float v6 = v5;
  if (v5) {
    *a4 = CXUnsignedLongValue(v5);
  }
  return v6 != 0;
}

void sub_238C16F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C171E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CXOptionalDoubleAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double *a4)
{
  uint64_t v5 = CXFindAttribute(a1, a2, a3);
  float v6 = v5;
  if (v5) {
    *a4 = CXDoubleValue(v5);
  }
  return v6 != 0;
}

double CXDoubleValue(_xmlAttr *a1)
{
  double v5 = 0.0;
  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    char v3 = 0;
    if (!String) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  String = children->content;
  char v3 = 1;
  if (String) {
LABEL_7:
  }
    sfaxmlXmlCharToDouble((uint64_t)String, &v5);
LABEL_8:
  if ((v3 & 1) == 0) {
    ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(String);
  }
  return v5;
}

uint64_t sfaxmlXmlCharToDouble(uint64_t a1, double *a2)
{
  char v3 = (const char *)(a1 - 1);
  uint64_t v4 = MEMORY[0x263EF8318];
  do
  {
    unsigned int v5 = v3[1];
    if ((v5 & 0x80000000) != 0) {
      int v6 = __maskrune(v3[1], 0x4000uLL);
    }
    else {
      int v6 = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    }
    ++v3;
  }
  while (v6);
  BOOL v7 = v5 == 43;
  if (v5 == 43) {
    double v8 = v3 + 1;
  }
  else {
    double v8 = v3;
  }
  size_t v9 = strlen(v8);
  if (v9 >= 3)
  {
    unint64_t v10 = v9;
    if (!strncasecmp(v8, "NAN", 3uLL))
    {
      unint64_t v13 = 0x7FF8000000000000;
    }
    else if (!strncasecmp(v8, "INF", 3uLL))
    {
      unint64_t v13 = 0x7FF0000000000000;
    }
    else
    {
      if (v10 < 4 || strncasecmp(v8, "-INF", 4uLL)) {
        goto LABEL_14;
      }
      unint64_t v13 = 0xFFF0000000000000;
    }
    double v11 = *(double *)&v13;
    goto LABEL_22;
  }
LABEL_14:
  unsigned int v14 = 0;
  double v11 = strtod(v8, &v14);
  if (*v14 || !v3[v7]) {
    return 0;
  }
LABEL_22:
  *a2 = v11;
  return 1;
}

void sub_238C17548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1762C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C176EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C179DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C17FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C183A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C185C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1867C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C18824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C188D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C18988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C18A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CXCountChildren(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  children = a1->children;
  if (!children) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    if (children->type == XML_ELEMENT_NODE && xmlStrEqual(str1, children->name)) {
      uint64_t v6 = v6 + [(CXNamespace *)a2 containsNode:children];
    }
    children = children->next;
  }
  while (children);
  return v6;
}

void sub_238C18C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1900C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C191BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C19374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C19458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C19558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C196E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C19848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C19A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C19C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C19CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C19E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C19FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v16 = v15;

  _Unwind_Resume(a1);
}

void sub_238C1A108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1A340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C1AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C1AF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238C1B21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1B2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1B49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1B5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1B874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1B9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1BA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1BAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1BFD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
}

void sub_238C1C138()
{
  objc_end_catch();
  JUMPOUT(0x238C1C100);
}

void sub_238C1C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1C664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C1CA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1CB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1CBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1CE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1CEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1D174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1D3C0(_Unwind_Exception *a1)
{
  unsigned int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238C1D5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1D9DC()
{
}

void sub_238C1DAFC()
{
  objc_end_catch();
  JUMPOUT(0x238C1DACCLL);
}

void sub_238C1DE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1E2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C1E564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1E748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C1E85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1EA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v16 = v14;

  _Unwind_Resume(a1);
}

void sub_238C1EA80()
{
}

void sub_238C1EA88()
{
}

void sub_238C1EBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C1EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_238C1F038()
{
}

void sub_238C1F048()
{
}

void sub_238C1F058()
{
}

void sub_238C1F068()
{
}

void sub_238C1F074()
{
}

void sub_238C1F080()
{
}

void sub_238C1F08C()
{
}

void sub_238C1F098()
{
}

void sub_238C1F0A4()
{
}

void sub_238C1F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,void *a41,void *a42,void *a43,void *a44)
{
  int v47 = *(void **)(v45 - 200);
  unsigned int v46 = *(void **)(v45 - 192);
  int v49 = *(void **)(v45 - 216);
  int v48 = *(void **)(v45 - 208);

  _Unwind_Resume(a1);
}

void sub_238C1F658()
{
}

void sub_238C1F668()
{
}

void sub_238C1F678()
{
}

void sub_238C1F688()
{
}

void sub_238C1F698()
{
}

void sub_238C1F6A8()
{
}

void sub_238C1F6B8()
{
}

void sub_238C1F6C8()
{
}

void sub_238C1F6D8()
{
}

void sub_238C1F6E8()
{
}

void sub_238C1F6F8()
{
}

void sub_238C1F708()
{
}

void sub_238C1F718()
{
}

void sub_238C1F728()
{
}

void sub_238C1F734()
{
}

void sub_238C1F740()
{
}

void sub_238C1F74C()
{
}

void sub_238C1F758()
{
}

void sub_238C1F764()
{
}

void sub_238C1F770()
{
}

void sub_238C1F77C()
{
}

void sub_238C1F788()
{
}

void sub_238C1F794()
{
}

void sub_238C1F910(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x238C1F8BCLL);
  }

  _Unwind_Resume(a1);
}

void sub_238C206A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_238C209D0()
{
  objc_end_catch();

  JUMPOUT(0x238C209DCLL);
}

void sub_238C20BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C20C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C20CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C20D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C20E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C20ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C21034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C21128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2129C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C21934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C21B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238C220A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C22240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C22528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C22658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C226E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C22810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C22BB8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(a1);
    uint64_t v10 = objc_opt_class();
    double v11 = TSUSpecificCast(v10, v9);
    int v12 = v11;
    if (!v11
      || ([v11 name],
          unint64_t v13 = objc_claimAutoreleasedReturnValue(),
          unsigned int v14 = (void *)*MEMORY[0x263EFF488],
          v13,
          v12,
          v13 != v14))
    {
      +[TCMessageContext reportWarningException:v9];
    }

    objc_end_catch();
    JUMPOUT(0x238C22AF8);
  }

  _Unwind_Resume(a1);
}

void sub_238C22D24()
{
  objc_end_catch();
  JUMPOUT(0x238C22C84);
}

void sub_238C22E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C22F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C232EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C23550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C23618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2371C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C23CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C24004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C241AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t CXDefaultUnsignedLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  unsigned int v5 = CXFindAttribute(a1, a2, a3);
  if (!v5) {
    return a4;
  }
  return CXUnsignedLongValue(v5);
}

void sub_238C24644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_238C24780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C248B0()
{
}

uint64_t SFUOpen(void *a1, int a2, unsigned int a3)
{
  uint64_t v4 = open((const char *)[a1 fileSystemRepresentation], a2, a3);
  if (v4 == -1) {
    objc_msgSend(MEMORY[0x263EFF940], "sfu_errnoRaise:format:", @"SFUOpenError", @"Could not open %@", a1);
  }
  return v4;
}

uint64_t SFUDup(uint64_t a1)
{
  uint64_t v2 = dup(a1);
  if (v2 == -1) {
    objc_msgSend(MEMORY[0x263EFF940], "sfu_errnoRaise:format:", @"SFUDupError", @"Could not dup %d", a1);
  }
  return v2;
}

void sub_238C24D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C24F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C25050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2526C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C25408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C25650(_Unwind_Exception *a1)
{
  unsigned int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238C258D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C259F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C25AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C25CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C25F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238C26270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2638C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C26418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C267E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C2698C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C26B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setDoubleStrikethrough(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x800uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFBF | ((a2 & 1) << 6);
  return this;
}

unsigned __int16 *WrdListLevelFormat::reset(WrdListLevelFormat *this)
{
  this->var3 = 0;
  this->var4 = 0;
  *(void *)&this->var5 = 0;
  this->var7 = 0;
  *(void *)&this->var9 = 0;
  this->var11 = 0;
  *((unsigned char *)this + 80) &= 0xE0u;
  *(_WORD *)&this->var18 = 0;
  *(void *)this->var8 = 0;
  this->var8[8] = 0;
  (*(void (**)(WrdParagraphProperties *))(*(void *)this->var1 + 16))(this->var1);
  (*((void (**)(WrdCharacterProperties *))this->var2->var0 + 2))(this->var2);
  BOOL result = this->var12;
  if (result) {
    BOOL result = (unsigned __int16 *)MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  this->var12 = 0;
  return result;
}

void sub_238C26E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdTableCellDescriptor::getShadingReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 1;
  return *((void *)v1 + 1);
}

WrdTableProperties *WrdTableProperties::setCantSplit(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x80000u;
  *((unsigned char *)this + 386) = a2;
  return this;
}

void sub_238C273EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2749C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2773C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C278C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlHLink::XlHLink(XlHLink *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFD28;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 3;
  *(_WORD *)(v2 + 28) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 58) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHLink *a2)
{
  uint64_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int var0 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  __int16 v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  char v8 = v7;
  unsigned int v9 = var0 + v5;
  a2->var4 = (v7 & 2) != 0;
  a2->var5 = HIBYTE(v7) & 1;
  if ((v7 & 0x14) != 0)
  {
    int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    if (v10)
    {
      unsigned __int16 v11 = v10 - 1;
      int v12 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v10 - 1), 1);
      if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v12 > v9
        && a2->var1.var0 != 8228)
      {
        int v13 = 3779;
LABEL_30:
        ChLogFunction("Failure to parse XlHLink", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", v13);
        goto LABEL_31;
      }
      unsigned int v14 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v14);
      *((void *)this + 4) = v14;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, 1, v9, v14);
      XlAddMenu::setMacro((XlAddMenu *)a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    }
  }
  if (v8 < 0)
  {
    int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    if (v15)
    {
      unsigned __int16 v16 = v15 - 1;
      int v17 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v15 - 1), 1);
      if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v17 > v9
        && a2->var1.var0 != 8228)
      {
        int v13 = 3805;
        goto LABEL_30;
      }
      int v18 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v18);
      *((void *)this + 4) = v18;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v16, 1, v9, v18);
      XlAddMenu::setStatus((XlAddMenu *)a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    }
  }
  if ((v8 & 1) == 0)
  {
    XlHLink::setType(a2, 3);
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  if (a2->var5)
  {
    XlHLink::setType(a2, 2);
    int v19 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    if (!v19) {
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    }
    unsigned __int16 v20 = v19 - 1;
    uint64_t v21 = (XlParserVisitor *)((char *)this + 8);
    int v22 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v19 - 1), 1);
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v22 > v9
      && a2->var1.var0 != 8228)
    {
      int v13 = 3837;
      goto LABEL_30;
    }
LABEL_34:
    unsigned int v29 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v29);
    *((void *)this + 4) = v29;
    XlStringParser::parse(v21, *((SsrwOOStream **)this + 2), v20, 1, v9, v29);
    XlAddMenu::setHelp((XlAddMenu *)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  int v23 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (v23 == 51680)
  {
    XlHLink::setType(a2, 0);
    int v24 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    if (!v24) {
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    }
    unsigned __int16 v20 = ((unsigned __int16)v24 >> 1) - 1;
    uint64_t v21 = (XlParserVisitor *)((char *)this + 8);
    int v25 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v20, 1);
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v25 > v9
      && a2->var1.var0 != 8228)
    {
      int v13 = 3874;
      goto LABEL_30;
    }
    goto LABEL_34;
  }
  XlHLink::setType(a2, 1);
  a2->var11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v26 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (v26)
  {
    unsigned __int16 v27 = v26 - 1;
    int v28 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), (unsigned __int16)(v26 - 1), 0);
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v28 > v9
      && a2->var1.var0 != 8228)
    {
      int v13 = 3904;
      goto LABEL_30;
    }
    __int16 v30 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v30);
    *((void *)this + 4) = v30;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v27, 0, v9, v30);
    XlDocRoute::setRoutingID((XlDocRoute *)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (v9 != (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))) {
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2))) {
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  uint64_t v31 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (!v31) {
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v31, 1);
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v32 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  unsigned int v33 = v32 >> 1;
  int v34 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v33, 1);
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v34 <= v9
    || a2->var1.var0 == 8228)
  {
    unint64_t v35 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v35);
    *((void *)this + 4) = v35;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v33, 1, v9, v35);
    *((void *)this + 4) = 0;
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
LABEL_31:
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C2849C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlDConRef::setConsolidationArea(XlDConRef *this, XlRef *a2)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = a2;
  return result;
}

XlString *XlHLink::setType(XlHLink *this, int a2)
{
  this->var3 = a2;
  return XlHLink::resetExtendedContent(this);
}

XlString *XlHLink::resetExtendedContent(XlHLink *this)
{
  var9 = this->var9;
  if (var9) {
    (*(void (**)(XlString *))(*(void *)var9 + 8))(var9);
  }
  this->var9 = 0;
  uint64_t result = this->var10;
  if (result) {
    uint64_t result = (XlString *)(*(uint64_t (**)(XlString *))(*(void *)result + 8))(result);
  }
  this->var10 = 0;
  this->var11 = 0;
  return result;
}

void sub_238C2877C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlHLink::~XlHLink(XlHLink *this)
{
  XlHLink::~XlHLink(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlRef *var2;
  XlString *var6;
  XlString *var7;
  XlString *var8;

  this->unsigned int var0 = (void **)&unk_26EBDFD28;
  var2 = this->var2;
  if (var2) {
    MEMORY[0x23EC997B0](var2, 0x1000C400EA6A39BLL);
  }
  this->var2 = 0;
  var6 = this->var6;
  if (var6) {
    (*(void (**)(XlString *))(*(void *)var6 + 8))(var6);
  }
  this->var6 = 0;
  var7 = this->var7;
  if (var7) {
    (*(void (**)(XlString *))(*(void *)var7 + 8))(var7);
  }
  this->var7 = 0;
  var8 = this->var8;
  if (var8) {
    (*(void (**)(XlString *))(*(void *)var8 + 8))(var8);
  }
  this->var8 = 0;
  XlHLink::resetExtendedContent(this);
}

void XlChartSerFmt::XlChartSerFmt(XlChartSerFmt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC170;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlChartArea::isStacked(XlChartArea *this)
{
  return *((_WORD *)this + 8) & 1;
}

uint64_t XlChartAttachedLabel::isShowLabPct(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 2) & 1;
}

void XlChartSerFmt::~XlChartSerFmt(XlChartSerFmt *this)
{
}

void XlChartiFmt::XlChartiFmt(XlChartiFmt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBCE8;
  *(_WORD *)(v2 + 16) = 0;
}

XlChartPlotAxis *XlChartPlotAxis::setNumberFormatIndex(XlChartPlotAxis *this, unsigned __int16 a2)
{
  this->var23 = 1;
  this->var16 = a2;
  return this;
}

void sub_238C28DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v15 = v13;

  _Unwind_Resume(a1);
}

uint64_t XlFormatParser::readPeriodToken(XlFormatParser *this, XlFmtPtg *a2)
{
  int v4 = *((_DWORD *)this + 6);
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *(OcText **)this;
  if (v6 && *((unsigned char *)this + 28) && v6->var3 > v5 && OcText::getCharacter(v6, v4 + 1) == 48)
  {
    unsigned int v5 = v4 + 2;
    __int16 v7 = *(OcText **)this;
    if (*(void *)this && v7->var3 <= v5 || OcText::getCharacter(v7, v4 + 2) != 48)
    {
      int v10 = 33;
    }
    else
    {
      unsigned int v5 = v4 + 3;
      char v8 = *(OcText **)this;
      if (*(void *)this && v8->var3 <= v5)
      {
        int v10 = 34;
      }
      else
      {
        int Character = OcText::getCharacter(v8, v4 + 3);
        if (Character == 48) {
          int v10 = 35;
        }
        else {
          int v10 = 34;
        }
        if (Character == 48) {
          LOWORD(v5) = v4 + 4;
        }
      }
    }
  }
  else
  {
    int v10 = 43;
  }
  *(_DWORD *)a2 = v10;
  return (unsigned __int16)(v5 - *((_WORD *)this + 12));
}

void sub_238C290C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C29368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C29390(void *a1)
{
}

void sub_238C293AC(void *a1)
{
  objc_begin_catch(a1);
  if (!v1) {
    JUMPOUT(0x238C292ECLL);
  }
  JUMPOUT(0x238C292E4);
}

void sub_238C293C4(void *a1)
{
  objc_begin_catch(a1);
  if (!v1) {
    JUMPOUT(0x238C292ECLL);
  }
  JUMPOUT(0x238C292E4);
}

void sub_238C293D8()
{
}

void XlScenProtect::XlScenProtect(XlScenProtect *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1280;
  *(unsigned char *)(v2 + 16) = 0;
}

void XlObjProtect::XlObjProtect(XlObjProtect *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0428;
  *(unsigned char *)(v2 + 16) = 0;
}

void sub_238C29610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PptAnimScaleBehaviorAtom::PptAnimScaleBehaviorAtom(PptAnimScaleBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1158;
  *(void *)(v2 + 32) = &unk_26EBF1200;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 72) = 1;
}

uint64_t PptAnimScaleBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimScaleBehaviorAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 73) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((float *)a2 + 12) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 13) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_6;
  }
  *((float *)a2 + 16) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 17) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20
    || (*((float *)a2 + 14) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1)),
        *((float *)a2 + 15) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 28)
    || (*((unsigned char *)a2 + 72) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 32))
  {
LABEL_6:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238C29D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptAnimScaleBehaviorAtom::~PptAnimScaleBehaviorAtom(PptAnimScaleBehaviorAtom *this)
{
}

void PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(PptTextBlockStylingMac11Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE91F0;
  *(void *)(v2 + 32) = &unk_26EBE9298;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStylingMac11Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStylingMac11Atom *a2, uint64_t a3)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  if (a3) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), a3, 1);
  }
  unsigned int DataLength = EshRecord::getDataLength(a2);
  if (DataLength >= 8)
  {
    unsigned int v7 = DataLength;
    while (1)
    {
      char v8 = PptTextBlockStylingMac11Atom::addNewStyle(a2);
      int v9 = PptParserVisitor::parseMac11(this, v8);
      if (!v9) {
        break;
      }
      v7 -= v9;
      if (v7 < 8) {
        return 1;
      }
    }
    PptTextBlockStylingMac11Atom::removeStyle(a2, v8);
    PptParserVisitor::endRead(this, a2);
  }
  return 1;
}

PptCharStyleMac11 *PptTextBlockStylingMac11Atom::addNewStyle(PptTextBlockStylingMac11Atom *this)
{
  uint64_t v2 = (PptCharStyleMac11 *)operator new(0x10uLL);
  PptCharStyleMac11::PptCharStyleMac11(v2);
  unint64_t v3 = *((void *)this + 8);
  int v4 = (PptCharStyleMac11 **)*((void *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *((void *)this + 6);
    unint64_t v7 = (unint64_t)v4 - v6;
    unint64_t v8 = (v3 - v6) >> 3;
    unsigned int v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1) {
      unsigned int v9 = (v7 >> 3) + 1;
    }
    if (v8 >= 0x7FFFFFFF) {
      unint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      unsigned __int16 v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      uint64_t v13 = v12;
    }
    else
    {
      unsigned __int16 v11 = 0;
      uint64_t v13 = 0;
    }
    unsigned int v14 = (PptCharStyleMac11 **)&v11[v7 & 0x7FFFFFFF8];
    int v15 = &v11[8 * v13];
    *unsigned int v14 = v2;
    unsigned int v5 = v14 + 1;
    int v17 = (char *)*((void *)this + 6);
    unsigned __int16 v16 = (char *)*((void *)this + 7);
    if (v16 != v17)
    {
      do
      {
        int v18 = (PptCharStyleMac11 *)*((void *)v16 - 1);
        v16 -= 8;
        *--unsigned int v14 = v18;
      }
      while (v16 != v17);
      unsigned __int16 v16 = (char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v14;
    *((void *)this + 7) = v5;
    *((void *)this + 8) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int v4 = v2;
    unsigned int v5 = v4 + 1;
  }
  *((void *)this + 7) = v5;
  return v2;
}

void sub_238C2A0A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    PptTextBlockStylingMac11Atom::addNewStyle(v1);
  }
  _Unwind_Resume(exception_object);
}

void PptCharStyleMac11::PptCharStyleMac11(PptCharStyleMac11 *this)
{
  *(void *)this = &unk_26EBF0B50;
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
}

uint64_t PptParserVisitor::parseMac11(PptParserVisitor *this, PptCharStyleMac11 *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v5 = v4;
  if ((v4 & 0x10000000) != 0)
  {
    *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    *((unsigned char *)a2 + 8) = 1;
    unsigned int v6 = 8;
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v6 = 4;
  if ((v4 & 0x8000000) != 0) {
LABEL_5:
  }
    v6 += (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)) + 4;
LABEL_6:
  if ((v5 & 0xE7FFFFFF) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

BOOL PptTextBlockStylingMac11Atom::removeStyle(PptTextBlockStylingMac11Atom *this, const PptCharStyleMac11 *a2)
{
  uint64_t v2 = (const PptCharStyleMac11 **)*((void *)this + 6);
  unint64_t v3 = *((void *)this + 7) - (void)v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  if (*v2 != a2)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (v3 >> 3);
    unint64_t v7 = v2 + 1;
    while (v6 - 1 != v5)
    {
      unint64_t v8 = v7[v5++];
      if (v8 == a2)
      {
        BOOL v9 = v5 < v6;
        goto LABEL_9;
      }
    }
    return 0;
  }
  unint64_t v5 = 0;
  BOOL v9 = 1;
LABEL_9:
  (*(void (**)(const PptCharStyleMac11 *))(*(void *)a2 + 8))(a2);
  uint64_t v10 = *((void *)this + 6);
  if (v5 >= ((unint64_t)(*((void *)this + 7) - v10) >> 3)) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  *(void *)(v10 + 8 * v5) = 0;
  uint64_t v11 = *((void *)this + 7);
  uint64_t v12 = *((void *)this + 6) + 8 * v5;
  uint64_t v13 = v11 - (v12 + 8);
  if (v11 != v12 + 8) {
    memmove((void *)v12, (const void *)(v12 + 8), v11 - (v12 + 8));
  }
  *((void *)this + 7) = v12 + v13;
  return v9;
}

void PptCharStyleMac11::~PptCharStyleMac11(PptCharStyleMac11 *this)
{
}

void PptTextMasterStyleMac11Atom::PptTextMasterStyleMac11Atom(PptTextMasterStyleMac11Atom *this, const EshHeader *a2)
{
  PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(this, a2);
  void *v2 = &unk_26EBE93E0;
  v2[4] = &unk_26EBE9488;
}

uint64_t PptTextMasterStyleMac11Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(void **a1, uint64_t a2)
{
  *(_WORD *)(a2 + 72) = (*(uint64_t (**)(void *))(*a1[1] + 80))(a1[1]);
  int v4 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[119];
  return v4(a1, a2, 2);
}

uint64_t PptTextDefaultStyleMac11Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultStyleMac11Atom *a2)
{
  if (!PptParserVisitor::parseMac11(this, (PptTextDefaultStyleMac11Atom *)((char *)a2 + 48))) {
    PptParserVisitor::endRead(this, a2);
  }
  return 1;
}

void sub_238C2A6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(PptTextBlockStylingMac11Atom *this)
{
  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_26EBE91F0;
  *((void *)this + 4) = &unk_26EBE9298;
  uint64_t v2 = (void *)*((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  if (((v3 - (void)v2) & 0x7FFFFFFF8) != 0)
  {
    int v4 = 0;
    do
    {
      unint64_t v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(void))(*(void *)v5 + 8))(v2[v4]);
        uint64_t v2 = (void *)*((void *)this + 6);
        unint64_t v3 = *((void *)this + 7);
      }
      if (v4 >= ((unint64_t)(v3 - (void)v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      v2[v4++] = 0;
      uint64_t v2 = (void *)*((void *)this + 6);
      unint64_t v3 = *((void *)this + 7);
    }
    while (v4 < ((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

void PptTextMasterStyleMac11Atom::~PptTextMasterStyleMac11Atom(PptTextMasterStyleMac11Atom *this)
{
  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(this);
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultStyleMac11Atom::~PptTextDefaultStyleMac11Atom(PptTextDefaultStyleMac11Atom *this)
{
  *(void *)this = &unk_26EBE92E8;
  *((void *)this + 4) = &unk_26EBE9390;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 48));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE92E8;
  *((void *)this + 4) = &unk_26EBE9390;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 48));
}

uint64_t WrdCharacterProperties::setFontIndexForSymbol(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x10;
  *(_WORD *)(result + 232) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setSymbolCharacter(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x20;
  *(_WORD *)(result + 244) = a2;
  return result;
}

void sub_238C2A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2AA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2AB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2ACA8(void *a1, int a2)
{
  if (a2 == 3)
  {
    int v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v4 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238C2AC70);
}

void sub_238C2AD2C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238C2AC70);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238C2AF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2B0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2B290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C2B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2B9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C2C450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2C5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2C6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2CA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2D004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2D2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2D450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2D52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2D718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2D768()
{
}

void sub_238C2D824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2DB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2DDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2E078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2E56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2E6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2E9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2EAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setRevisionMark(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40uLL;
  *(_DWORD *)(result + 224) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setIndexToAuthorIDOfRevisionEdit(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x80000000000000uLL;
  this->var61 = a2;
  return this;
}

uint64_t WrdCharacterProperties::getRevisionEditReference(WrdCharacterProperties *this)
{
  unsigned int v2 = *((_DWORD *)&this->var2 + 2);
  uint64_t v1 = (char *)&this->var2 + 8;
  unint64_t v3 = v2 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | 0x2000000000;
  *(_DWORD *)uint64_t v1 = v2;
  *((_WORD *)v1 + 2) = WORD2(v3);
  return *((void *)v1 + 11);
}

uint64_t WrdCharacterProperties::setIndexToStringsForReasons(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x8000;
  *(_WORD *)(result + 310) = a2;
  return result;
}

void sub_238C2EC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C2EE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setRevisionMarkDelete(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 8uLL;
  *(_DWORD *)(result + 220) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setIndexToAuthorIDOfRevisionDelete(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x4000;
  *(_WORD *)(result + 306) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getRevisionDeleteReference(WrdCharacterProperties *this)
{
  unsigned int v2 = *((_DWORD *)&this->var2 + 2);
  uint64_t v1 = (char *)&this->var2 + 8;
  unint64_t v3 = v2 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | 0x4000000000;
  *(_DWORD *)uint64_t v1 = v2;
  *((_WORD *)v1 + 2) = WORD2(v3);
  return *((void *)v1 + 12);
}

uint64_t WrdCharacterProperties::setIndexToStringsForReasonsOfDeletion(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)uint64_t result = v3 | 0x10000;
  *(_WORD *)(result + 312) = a2;
  return result;
}

void sub_238C2EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshStroke::isBlipSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C5u);
}

uint64_t EshStroke::getBlipId(EshStroke *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty((uint64_t)this->var2, 0x1C5u) + 4);
}

uint64_t EshStroke::isBlipNameSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C6u);
}

uint64_t EshStroke::isColor2Set(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C2u);
}

uint64_t EshContentProperties::getWrdInline(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x53Fu);
}

uint64_t EshContentProperties::getAllowOverlap(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x3B6u);
}

void XlScenMan::XlScenMan(XlScenMan *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1240;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScenMan *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 11) = v4;
  if (v4)
  {
    int v5 = v4;
    do
    {
      unint64_t v6 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v6, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v6);
      XlCrn::appendOperand(a2, (XlOper *)v6);
      --v5;
    }
    while (v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C2F6D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlScenMan::~XlScenMan(XlScenMan *this)
{
  XlScenMan::~XlScenMan(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBE1240;
  XlRangeProtection::clearRanges((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t XlRangeProtection::clearRanges(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = *(void *)(this + 32);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
        uint64_t v2 = *(void *)(v1 + 24);
        uint64_t v3 = *(void *)(v1 + 32);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 32) = v2;
  return this;
}

void PptTextBookmarkAtom::PptTextBookmarkAtom(PptTextBookmarkAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDF00;
  *(void *)(v2 + 32) = &unk_26EBEDFA8;
}

uint64_t PptTextBookmarkAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBookmarkAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBookmarkAtom::~PptTextBookmarkAtom(PptTextBookmarkAtom *this)
{
}

void sub_238C2FB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2FC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C2FCAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColorRef TSUCGColorCreatePatternWithImageAndTransform(CGImage *a1, long long *a2)
{
  v6[1] = *(CGFloat *)MEMORY[0x263EF8340];
  uint64_t v2 = TSUCGPatternCreateWithImageAndTransform(a1, a2);
  Pattern = CGColorSpaceCreatePattern(0);
  v6[0] = 1.0;
  CGColorRef v4 = CGColorCreateWithPattern(Pattern, v2, v6);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v2);
  return v4;
}

CGPatternRef TSUCGPatternCreateWithImageAndTransform(CGImageRef image, long long *a2)
{
  if (!image)
  {
    uint64_t v4 = objc_msgSend(NSString, "stringWithUTF8String:", "CGPatternRef TSUCGPatternCreateWithImageAndTransform(CGImageRef, const CGAffineTransform *)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUColorUtils.m"], 244, 0, "can't create an image pattern without an image");
    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  CGImageRetain(image);
  CGFloat v5 = *MEMORY[0x263F00148];
  CGFloat v6 = *(double *)(MEMORY[0x263F00148] + 8);
  size_t Width = CGImageGetWidth(image);
  size_t Height = CGImageGetHeight(image);
  if (a2)
  {
    long long v9 = a2[1];
    long long v14 = *a2;
    long long v15 = v9;
    long long v10 = a2[2];
  }
  else
  {
    long long v11 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
    long long v14 = *MEMORY[0x263F000D0];
    long long v15 = v11;
    long long v10 = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  }
  long long v16 = v10;
  v17.size.height = (double)Height;
  v17.size.width = (double)Width;
  *(_OWORD *)&v13.a = v14;
  *(_OWORD *)&v13.c = v15;
  *(_OWORD *)&v13.tx = v10;
  v17.origin.x = v5;
  v17.origin.y = v6;
  return CGPatternCreate(image, v17, &v13, (double)Width, v17.size.height, kCGPatternTilingConstantSpacing, 1, &TSUCGPatternCreateWithImageAndTransform_sCallbacks);
}

void TSUDrawImageAtOriginInContext(CGImage *a1, CGContext *a2)
{
  uint64_t v4 = *MEMORY[0x263F00148];
  uint64_t v5 = *(void *)(MEMORY[0x263F00148] + 8);
  double Width = (double)CGImageGetWidth(a1);
  double Height = (double)CGImageGetHeight(a1);
  uint64_t v8 = v4;
  uint64_t v9 = v5;
  double v10 = Width;
  CGContextDrawImage(a2, *(CGRect *)&v8, a1);
}

uint64_t EshStroke::getDefaultMiterLimit(EshStroke *this)
{
  return 0x80000;
}

void sub_238C2FFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C304E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C30B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C30EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3113C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptAnimIterateDataAtom::PptAnimIterateDataAtom(PptAnimIterateDataAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1630;
  *(void *)(v2 + 32) = &unk_26EBF16D8;
}

uint64_t PptAnimIterateDataAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimIterateDataAtom *a2)
{
  return 1;
}

void PptAnimIterateDataAtom::~PptAnimIterateDataAtom(PptAnimIterateDataAtom *this)
{
  *(void *)this = &unk_26EBF1630;
  *((void *)this + 4) = &unk_26EBF16D8;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1630;
  *((void *)this + 4) = &unk_26EBF16D8;
}

void sub_238C31454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C31618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C318E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C31DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C323BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C32694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C327E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C32888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C32908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C32994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C32D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C32F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C32FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C330E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C332D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238C334E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float convertRgbToHsl(float result, float a2, float a3, float *a4, float *a5, float *a6)
{
  if (result >= a2) {
    float v6 = a2;
  }
  else {
    float v6 = result;
  }
  if (result >= a2) {
    float v7 = result;
  }
  else {
    float v7 = a2;
  }
  if (v6 >= a3) {
    float v8 = a3;
  }
  else {
    float v8 = v6;
  }
  if (v7 < a3) {
    float v7 = a3;
  }
  float v9 = v7 - v8;
  *a6 = (float)(v7 + v8) * 0.5;
  if ((float)(v7 - v8) == 0.0)
  {
    *a4 = 0.0;
    *a5 = 0.0;
  }
  else
  {
    *a5 = 0.0;
    float v10 = *a6;
    if (*a6 > 0.0 && v10 < 1.0)
    {
      if (v10 >= 0.5) {
        float v12 = (float)(v10 * -2.0) + 2.0;
      }
      else {
        float v12 = v10 + v10;
      }
      *a5 = v9 / v12;
    }
    *a4 = 0.0;
    if (v9 > 0.0)
    {
      float v13 = 0.0;
      if (v7 == result && v7 != a2) {
        float v13 = (float)((float)(a2 - a3) / v9) + 0.0;
      }
      if (v7 == a2 && v7 != a3) {
        float v13 = (float)((float)((float)(a3 - result) / v9) + 2.0) + v13;
      }
      if (v7 == a3 && v7 != result) {
        float v13 = (float)((float)((float)(result - a2) / v9) + 4.0) + v13;
      }
      uint64_t result = v13 * 60.0;
      *a4 = v13 * 60.0;
    }
  }
  return result;
}

float *convertHslToRgb(float a1, float a2, float a3, float *result, float *a5, float *a6)
{
  if (a3 == 0.0)
  {
    *a6 = 0.0;
    *a5 = 0.0;
    *uint64_t result = 0.0;
    return result;
  }
  if (a2 == 0.0)
  {
    *a6 = a3;
    *a5 = a3;
    *uint64_t result = a3;
    return result;
  }
  float v6 = a1 / 360.0;
  float v7 = (float)(a2 + a3) - (float)(a3 * a2);
  float v8 = (a2 + 1.0) * a3;
  if (a3 <= 0.5) {
    float v7 = v8;
  }
  float v9 = -(v7 - a3 * 2.0);
  double v10 = v6;
  float v11 = v6 + 0.333333333;
  if (v11 < 0.0) {
    float v11 = v11 + 1.0;
  }
  if (v11 <= 1.0) {
    float v12 = v11;
  }
  else {
    float v12 = v11 + -1.0;
  }
  double v13 = v12;
  if (v12 * 6.0 < 1.0)
  {
    double v14 = v9 + (float)(v12 * (float)(v7 - v9)) * 6.0;
LABEL_17:
    float v15 = v14;
    goto LABEL_18;
  }
  float v15 = v7;
  if (v13 + v13 >= 1.0)
  {
    float v15 = v9;
    if (v13 * 3.0 < 2.0)
    {
      double v14 = v9 + (0.666666667 - v13) * (float)(v7 - v9) * 6.0;
      goto LABEL_17;
    }
  }
LABEL_18:
  *uint64_t result = v15;
  if (v6 < 0.0) {
    float v6 = v6 + 1.0;
  }
  if (v6 <= 1.0) {
    float v16 = v6;
  }
  else {
    float v16 = v6 + -1.0;
  }
  double v17 = v16;
  if (v16 * 6.0 < 1.0)
  {
    double v18 = v9 + (float)(v16 * (float)(v7 - v9)) * 6.0;
LABEL_28:
    float v19 = v18;
    goto LABEL_29;
  }
  float v19 = v7;
  if (v17 + v17 >= 1.0)
  {
    float v19 = v9;
    if (v17 * 3.0 < 2.0)
    {
      double v18 = v9 + (0.666666667 - v17) * (float)(v7 - v9) * 6.0;
      goto LABEL_28;
    }
  }
LABEL_29:
  *a5 = v19;
  float v20 = v10 + -0.333333333;
  if (v20 < 0.0) {
    float v20 = v20 + 1.0;
  }
  if (v20 <= 1.0) {
    float v21 = v20;
  }
  else {
    float v21 = v20 + -1.0;
  }
  double v22 = v21;
  if (v21 * 6.0 < 1.0)
  {
    double v23 = v9 + (float)(v21 * (float)(v7 - v9)) * 6.0;
LABEL_39:
    float v7 = v23;
    goto LABEL_40;
  }
  if (v22 + v22 < 1.0)
  {
LABEL_40:
    *a6 = v7;
    return result;
  }
  if (v22 * 3.0 < 2.0)
  {
    double v23 = v9 + (0.666666667 - v22) * (float)(v7 - v9) * 6.0;
    goto LABEL_39;
  }
  *a6 = v9;
  return result;
}

void sub_238C3399C()
{
}

void sub_238C33A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C33C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C33FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C340D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238C34754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_238C34A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C34EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, id a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C35134(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238C35578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C35824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C35904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C35EB8(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_238C360A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C36478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C36540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C366F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C36794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C368E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C36A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getDropCapReference(WrdParagraphProperties *this)
{
  *((void *)this + 2) |= 0x200uLL;
  return *((void *)this + 6);
}

WrdParagraphProperties *WrdParagraphProperties::setPageBreakBefore(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x2000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFDF | (32 * (a2 & 1));
  return this;
}

uint64_t WrdCharacterProperties::setShadow(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x100uLL;
  *(_DWORD *)(result + 196) = a2;
  return result;
}

void WrdEshGroup::WrdEshGroup(WrdEshGroup *this)
{
  EshGroup::EshGroup(this);
  void *v1 = &unk_26EBE5D38;
  v1[34] = &unk_26EBE5DE8;
  v1[46] = 0;
  v1[47] = 0;
}

uint64_t EshTablePropVal<EshComputedRect>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedRect>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  uint64_t v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)uint64_t v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::resize((uint64_t *)(a2 + 8), *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      float v6 = (EshComputedValue *)EshBasicTablePropVal<EshComputedRect>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement((uint64_t)a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238C36C5C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, EshComputedValue *a2)
{
  EshPropValParserVisitor::parseValue(a1, a2, *(unsigned __int16 *)(a1 + 20) >> 2);
  EshPropValParserVisitor::parseValue(a1, a2 + 1, *(unsigned __int16 *)(a1 + 20) >> 2);
  EshPropValParserVisitor::parseValue(a1, a2 + 2, *(unsigned __int16 *)(a1 + 20) >> 2);
  int v4 = *(unsigned __int16 *)(a1 + 20) >> 2;
  return EshPropValParserVisitor::parseValue(a1, a2 + 3, v4);
}

double EshShapeProperties::setCoordBottom(EshShapeProperties *this, unsigned int a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x143u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShadow::getDefaultColor(EshShadow *this, EshColor *a2)
{
  return EshColor::rgb(128, 128, 128, (uint64_t)this);
}

void sub_238C36EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshGroup::getContentPropertiesReference(EshGroup *this)
{
  return (uint64_t)this + 288;
}

void WrdEshGroup::~WrdEshGroup(WrdEshGroup *this)
{
  *(void *)this = &unk_26EBE5D38;
  *((void *)this + 34) = &unk_26EBE5DE8;
  XlEshGroup::cleanup(this);
  EshGroup::~EshGroup(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE5D38;
  *((void *)this + 34) = &unk_26EBE5DE8;
  XlEshGroup::cleanup(this);
  EshGroup::~EshGroup(this);
}

void sub_238C37114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C37228(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238C3729C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C373E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptDateTimeMCAtom::PptDateTimeMCAtom(PptDateTimeMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9A28;
  *(void *)(v2 + 32) = &unk_26EBE9AD0;
}

uint64_t PptDateTimeMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptDateTimeMCAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 5))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 3u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptDateTimeMCAtom::~PptDateTimeMCAtom(PptDateTimeMCAtom *this)
{
}

uint64_t EshShapeImageData::getOLEID(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x10Bu);
}

WrdTableProperties *WrdTableProperties::setTableHeader(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x100000u;
  *((unsigned char *)this + 387) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setEmbossed(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x200uLL;
  *(_DWORD *)(result + 200) = a2;
  return result;
}

uint64_t EshRawPropVal::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
  }
  else {
    return 1;
  }
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshRawPropVal *a2)
{
  EshDataTablePropVal<unsigned char>::resize((uint64_t)a2, *((_DWORD *)this + 4));
  int v5 = *((_DWORD *)this + 4);
  (*(void (**)(void, void, int *))(**((void **)this + 1) + 56))(*((void *)this + 1), *((void *)a2 + 1), &v5);
  return 1;
}

void *EshDataTablePropVal<unsigned char>::resize(uint64_t a1, unsigned int a2)
{
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_DWORD *)(a1 + 16) = a2;
  double result = operator new[](a2);
  *(void *)(a1 + 8) = result;
  return result;
}

void EshRawPropVal::~EshRawPropVal(EshRawPropVal *this)
{
  *(void *)this = &unk_26EBD7780;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBD7780;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t WrdCharacterProperties::setHyphenationRule(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000000000000uLL;
  *(_DWORD *)(result + 144) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setHyphenationChangeCharacter(WrdCharacterProperties *this, unsigned __int8 a2)
{
  *(void *)&this->var2 |= 0x8000000000000uLL;
  this->var108 = a2;
  return this;
}

void sub_238C37C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdTableProperties::setWidthOfInvisibleCellAfterUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40000uLL;
  *(_DWORD *)(result + 144) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthOfInvisibleCellAfter(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x1000000000000000uLL;
  *((_WORD *)this + 171) = a2;
  return this;
}

double WrdTapParser::setBorderBasedOnFlags(WrdTapParser *this, char a2, const WrdBorder *a3, WrdTableCellDescriptor *a4)
{
  if ((a2 & 8) != 0)
  {
    uint64_t RightBorderReference = WrdTableCellDescriptor::getRightBorderReference(a4);
    double result = WrdBorder::operator=(RightBorderReference, (uint64_t)a3);
    if ((a2 & 4) == 0)
    {
LABEL_3:
      if ((a2 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a2 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t BottomBorderReference = WrdTableCellDescriptor::getBottomBorderReference(a4);
  double result = WrdBorder::operator=(BottomBorderReference, (uint64_t)a3);
  if ((a2 & 2) == 0)
  {
LABEL_4:
    if ((a2 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t LeftBorderReference = WrdTableCellDescriptor::getLeftBorderReference(a4);
  double result = WrdBorder::operator=(LeftBorderReference, (uint64_t)a3);
  if ((a2 & 1) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t DiagonalDownBorderReference = WrdTableCellDescriptor::getDiagonalDownBorderReference(a4);
    double result = WrdBorder::operator=(DiagonalDownBorderReference, (uint64_t)a3);
    if ((a2 & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t TopBorderReference = WrdTableCellDescriptor::getTopBorderReference(a4);
  double result = WrdBorder::operator=(TopBorderReference, (uint64_t)a3);
  if ((a2 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((a2 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  uint64_t DiagonalUpBorderReference = WrdTableCellDescriptor::getDiagonalUpBorderReference(a4);
  return WrdBorder::operator=(DiagonalUpBorderReference, (uint64_t)a3);
}

void sub_238C37F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v11 = v10;

  _Unwind_Resume(a1);
}

int *WrdCharacterProperties::setHighlightColor97(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  double result = (int *)(a1 + 24);
  *double result = v3 | 0x80000;
  result[33] = a2;
  return result;
}

int *WrdCharacterProperties::setHighlighted(WrdCharacterProperties *this, char a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  double result = (int *)&this->var2 + 2;
  *double result = v3 | 0x100000;
  result[79] = result[79] & 0xFFEFFFFF | ((a2 & 1) << 20);
  return result;
}

uint64_t WrdTableProperties::setTableAlignment(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40000000000uLL;
  *(_DWORD *)(result + 240) = a2;
  return result;
}

void PptExHyperlinkExtraAtom::PptExHyperlinkExtraAtom(PptExHyperlinkExtraAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEA948;
  *(void *)(v2 + 32) = &unk_26EBEA9F0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptExHyperlinkExtraAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExHyperlinkExtraAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExHyperlinkExtraAtom::~PptExHyperlinkExtraAtom(PptExHyperlinkExtraAtom *this)
{
}

void XlSheetProtection::XlSheetProtection(XlSheetProtection *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1380;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 26) = 1;
  *(unsigned char *)(v2 + 30) = 1;
}

uint64_t WrdTableProperties::getTableAutoformatLookSpecifierReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 8uLL;
  return *((void *)this + 4);
}

uint64_t EshContentProperties::getWrapDistanceTop(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x385u);
}

uint64_t EshContentProperties::getWrapDistanceBottom(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x387u);
}

void sub_238C389B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C38B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlHorizPageBreaks::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 752))(a2, a1);
}

uint64_t XlChartPlot::takeSeriesLineFormat(XlChartPlot *this, XlChartLineStyle *a2)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = a2;
  return result;
}

XlChartFillStyle *XlChartPlotAxis::takeWallFillFormat(XlChartPlotAxis *this, XlChartFillStyle *a2)
{
  uint64_t result = this->var7;
  if (result) {
    uint64_t result = (XlChartFillStyle *)(*((uint64_t (**)(XlChartFillStyle *))result->var0 + 1))(result);
  }
  this->var7 = a2;
  return result;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChart3D *a2)
{
  XlParserVisitor::beginRead(this);
  a2->var2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartBinaryReader::read(uint64_t this, XlChartLegendFrame *a2)
{
  if (*(int *)(this + 1612) >= 1)
  {
    int v3 = (XlParserVisitor **)this;
    int v4 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v4);
    uint64_t v5 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, *((unsigned int *)v3 + 403), 0);
    XlParserVisitor::getHeader(v3[167], v4, *((unsigned char *)v3 + 444));
    float v6 = (int32x4_t *)operator new(0x30uLL);
    XlChartLegend::XlChartLegend((XlChartLegend *)v6, v4);
    (*(void (**)(XlParserVisitor *, int32x4_t *))(*(void *)v3[167] + 2040))(v3[167], v6);
    XlParserVisitor::getHeader(v3[167], v4, *((unsigned char *)v3 + 444));
    if (v4->var1 == 4147)
    {
      while (XlChartBinaryReader::nextSibling((XlChartBinaryReader *)v3, v4))
      {
        int var1 = v4->var1;
        switch(var1)
        {
          case 4133:
            uint64_t v9 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
            uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
            XlChartBinaryReader::readTextFrame(v3, (XlChartTextFrame *)a2, v10, 0);
            break;
          case 4146:
            uint64_t v11 = (*((uint64_t (**)(XlParserVisitor **))*v3 + 78))(v3);
            uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
            XlChartBinaryReader::readFrameFormatting(v3, (XlChartFrameType *)a2, v12);
            break;
          case 4175:
            XlParserVisitor::skipHeader(v3[167]);
            float v8 = (XlChartPos *)operator new(0x28uLL);
            XlChartPos::XlChartPos(v8, v4);
            (*(void (**)(XlParserVisitor *, XlChartPos *))(*(void *)v3[167] + 2152))(v3[167], v8);
            *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)v8 + 1);
            *((unsigned char *)a2 + 236) = *((unsigned __int16 *)v8 + 17) == 2;
            (*(void (**)(XlChartPos *))(*(void *)v8 + 8))(v8);
            break;
          default:
            XlParserVisitor::seekNextRecord((uint64_t)v3[167]);
            break;
        }
      }
    }
    *(int8x16_t *)((char *)a2 + 8) = vextq_s8((int8x16_t)vcvtq_f32_s32(v6[1]), (int8x16_t)vcvtq_f32_u32((uint32x4_t)v6[1]), 8uLL);
    *((void *)a2 + 27) = v6[2].i64[0];
    *((unsigned char *)a2 + 232) = XlChartLegend::isVertical((XlChartLegend *)v6);
    *((unsigned char *)a2 + 233) = XlChartLegend::isAutoPosition((XlChartLegend *)v6);
    *((unsigned char *)a2 + 234) = XlChartLegend::isAutoXPos((XlChartLegend *)v6);
    *((unsigned char *)a2 + 235) = XlChartLegend::isAutoYPos((XlChartLegend *)v6);
    (*(void (**)(int32x4_t *))(v6->i64[0] + 8))(v6);
    JUMPOUT(0x23EC997B0);
  }
  return this;
}

void sub_238C39174(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

void XlChartLegend::XlChartLegend(XlChartLegend *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBD28;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartLegend *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlChartLegend::~XlChartLegend(XlChartLegend *this)
{
}

void sub_238C39514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C395FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C396C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C397DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlChart3D::isCluster(XlChart3D *this)
{
  return ((unsigned __int16)this->var8 >> 1) & 1;
}

void sub_238C39A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t chdShapeTypeFromXlShapeTypeEnum(int a1)
{
  if (a1 == 512) {
    int v1 = 5;
  }
  else {
    int v1 = a1 == 257;
  }
  if (a1 == 513) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == 256) {
    int v3 = 4;
  }
  else {
    int v3 = 0;
  }
  if (a1 == 1) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a1 <= 256) {
    return v4;
  }
  else {
    return v2;
  }
}

void sub_238C39C18(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRef3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, int *a4)
{
  *a2 = -1;
  *a3 = -1;
  *a4 = -1;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    *a4 = *((unsigned __int8 *)result + 4);
  }
  return result;
}

void sub_238C39D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SsrwOOStorage::getChildType(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  LODWORD(result) = getChildType((uint64_t)this->var0, a2);
  if (result >= 3) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t getChildType(uint64_t result, const unsigned __int16 *a2)
{
  uint64_t v6 = 0;
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (a2)
    {
      if (*(void *)v3)
      {
        if (!*a2 || (*(_DWORD *)(v3 + 32) | 2) != 2) {
          return 0;
        }
        TOC = (uint64_t *)rootStorageGetTOC(*(void *)v3);
        uint64_t result = tocGetEntryAtIndex(TOC, *(_DWORD *)(v3 + 8));
        if (!result) {
          return result;
        }
        if (!tocFindChildEntry(TOC, result, a2, &v6))
        {
          uint64_t result = v6;
          if (v6)
          {
            int Type = directoryGetType(v6);
            if (Type == 2) {
              return 2;
            }
            else {
              return Type == 1;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_238C3A724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3A7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3AE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3AFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3B098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3B114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3B190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3B22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3B3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3B7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3B97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3BFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3C244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3C43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3C6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3CAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3CCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3CE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3CF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3CFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3D074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3D168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3D29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3D3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3D5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3D838(_Unwind_Exception *a1)
{
  float v8 = v4;

  _Unwind_Resume(a1);
}

void sub_238C3D980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3DC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3DEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3E078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3E1E4(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_238C3E61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3E894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3EA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3EEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_238C3F0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C3F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C3F49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3F674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3F7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3F8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3FAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C3FD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C3FF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4021C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C402F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C404C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C40534()
{
  JUMPOUT(0x238C4051CLL);
}

void sub_238C40548()
{
  JUMPOUT(0x238C40520);
}

void sub_238C40554()
{
}

void sub_238C40624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4073C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C407E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C40CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C40F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C41014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C411F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C413E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C414B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C41694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C417D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C41A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C41C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C41E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartDataSeries::takeCachedCustomFormat(XlChartDataSeries *this, XlChartSeriesFormat *a2)
{
  if (a2)
  {
    unint64_t v6 = *((void *)this + 8);
    unsigned int v4 = (char *)this + 64;
    unint64_t v5 = v6;
    float v7 = (void *)*((void *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *((void *)this + 6);
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        double v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        double v14 = 0;
        uint64_t v16 = 0;
      }
      double v17 = &v14[v10 & 0x7FFFFFFF8];
      double v18 = &v14[8 * v16];
      *(void *)double v17 = a2;
      float v8 = v17 + 8;
      float v20 = (char *)*((void *)this + 6);
      float v19 = (char *)*((void *)this + 7);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        float v19 = (char *)*((void *)this + 6);
      }
      *((void *)this + 6) = v17;
      *((void *)this + 7) = v8;
      *((void *)this + 8) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *float v7 = a2;
      float v8 = v7 + 1;
    }
    *((void *)this + 7) = v8;
  }
}

void sub_238C42248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C422D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C423B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *XlChartBinaryReader::setDataPointFormat(uint64_t *this, int a2, int a3)
{
  uint64_t v3 = this;
  unsigned int v4 = a3 | (a2 << 16);
  unsigned int v8 = v4;
  uint64_t v5 = this[239];
  if (v5)
  {
    this += 238;
    do
    {
      unsigned int v6 = *(_DWORD *)(v5 + 28);
      if (v4 >= v6)
      {
        if (v6 >= v4)
        {
          uint64_t v9 = &v8;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this, &v8, (uint64_t)&std::piecewise_construct, &v9);
          int v7 = *((_DWORD *)this + 8);
          goto LABEL_9;
        }
        v5 += 8;
      }
      uint64_t v5 = *(void *)v5;
    }
    while (v5);
  }
  int v7 = -1;
LABEL_9:
  *((_DWORD *)v3 + 485) = v7;
  return this;
}

void XlChartAlRuns::XlChartAlRuns(XlChartAlRuns *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB6A8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(unsigned __int8 **this, XlChartAlRuns *a2)
{
  XlParserVisitor::beginRead((XlParserVisitor *)this);
  unsigned int v4 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)this[2] + 80))(this[2]);
  int v5 = *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18);
  unsigned int v7 = v5 - (*(uint64_t (**)(unsigned __int8 *))(*(void *)this[2] + 40))(this[2]);
  XlParserVisitor::getDataAndContinues((XlParserVisitor *)this, &v7);
  XlChartAlRuns::takeRichTextRuns((uint64_t)a2, this[3], v7, v4);
  this[3] = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::getDataAndContinues(XlParserVisitor *this, unsigned int *a2)
{
  return XlParserVisitor::getDataAndContinues(this, a2, -1);
}

uint64_t XlChartAlRuns::getRichTextRun(XlChartAlRuns *this, unsigned int a2)
{
  if (*((unsigned __int16 *)this + 12) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v5 = 1004;
    goto LABEL_6;
  }
  uint64_t v2 = *((void *)this + 2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v5 = 1003;
LABEL_6:
    _DWORD *exception = v5;
  }
  return v2 + 4 * a2;
}

void XlChartAlRuns::~XlChartAlRuns(XlChartAlRuns *this)
{
  *(void *)this = &unk_26EBDB6A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDB6A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

void sub_238C42814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlFormatParser::readTextToken(XlFormatParser *this, XlFmtPtg *a2)
{
  int v4 = *((_DWORD *)this + 6);
  int v5 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v5);
  __int16 v6 = v4 + 1;
  *((void *)this + 1) = v5;
  unsigned int v7 = *(OcText **)this;
  v5->int var1 = *(_DWORD *)(*(void *)this + 8);
  if (v7->var3 > v4 + 1)
  {
    if (OcText::getCharacter(v7, v4 + 1) == 34)
    {
      __int16 v6 = v4 + 2;
      int v5 = (OcText *)*((void *)this + 1);
    }
    else
    {
      int v8 = 1;
      do
      {
        unsigned int v9 = v8;
        unsigned int v10 = v4 + v8 + 1;
        unint64_t v11 = *(OcText **)this;
        if (*(void *)this && v11->var3 <= v10) {
          break;
        }
        int Character = OcText::getCharacter(v11, v10);
        int v8 = v9 + 1;
      }
      while (Character != 34);
      __int16 v6 = v4 + v9 + 2;
      int v5 = (OcText *)*((void *)this + 1);
      if (v9)
      {
        uint64_t v13 = *(void *)(*(void *)this + 24);
        int v14 = *((_DWORD *)this + 6) + 1;
        unsigned int v15 = (const unsigned __int8 *)(v13
                                      + (v14 << (OcText::isSingleByteEncoding(*(_DWORD *)(*(void *)this + 8)) ^ 1)));
        char isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(*(void *)this + 8));
        OcText::copyBuffer(v5, v15, v9 << (isSingleByteEncoding ^ 1));
        int v5 = (OcText *)*((void *)this + 1);
        v5->var3 = v9;
      }
    }
  }
  *(_DWORD *)a2 = 60;
  uint64_t v17 = *((void *)a2 + 1);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  *((void *)a2 + 1) = v5;
  *((void *)this + 1) = 0;
  return (unsigned __int16)(v6 - *((_WORD *)this + 12));
}

void sub_238C429DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OcText::setCharacter(OcText *this, unsigned int a2, __int16 a3)
{
  uint64_t result = OcText::isSingleByteEncoding(this->var1);
  if (result)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v9 = 8005;
LABEL_7:
    _DWORD *exception = v9;
  }
  var5 = this->var5;
  if (!var5 || this->var3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v9 = 1004;
    goto LABEL_7;
  }
  *(_WORD *)&var5[2 * a2] = a3;
  return result;
}

BOOL XlFormatInfo::hasCondition(XlFormatInfo *this)
{
  uint64_t v1 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)v1 + 11)) {
    return 1;
  }
  unint64_t v4 = (v2 >> 3);
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v4 == v5) {
      break;
    }
    ++v5;
  }
  while (!*(unsigned char *)(*(void *)(v1 + 8 * v6) + 11));
  return v6 < v4;
}

void sub_238C42C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartAttachedLabel::XlChartAttachedLabel(XlChartAttachedLabel *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDB768;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartAttachedLabel *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartAttachedLabel::isSmoothedLine(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 3) & 1;
}

uint64_t XlChartAttachedLabel::isShowLabel(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 4) & 1;
}

uint64_t XlChartAttachedLabel::isShowBubbleSizes(XlChartAttachedLabel *this)
{
  return (*((unsigned __int16 *)this + 8) >> 5) & 1;
}

void XlChartAttachedLabel::~XlChartAttachedLabel(XlChartAttachedLabel *this)
{
}

uint64_t XlChartBinaryReader::read(uint64_t **this, XlChartTextFrame *a2)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 108) | (*((unsigned __int16 *)a2 + 110) << 16);
  unsigned int v7 = &v6;
  unint64_t v4 = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 228, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, a2, *((unsigned int *)v4 + 8), 1);
}

void XlChartDataSeries::takeCachedCustomLabel(void *a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v6 = a1[11];
    uint64_t v4 = (uint64_t)(a1 + 11);
    unint64_t v5 = v6;
    unsigned int v7 = *(void **)(v4 - 8);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = a1[9];
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        int v14 = 0;
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
      double v18 = &v14[8 * v16];
      *(void *)uint64_t v17 = a2;
      int v8 = v17 + 8;
      float v20 = (char *)a1[9];
      float v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        float v19 = (char *)a1[9];
      }
      a1[9] = v17;
      a1[10] = v8;
      a1[11] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *unsigned int v7 = a2;
      int v8 = v7 + 1;
    }
    a1[10] = v8;
  }
}

void XlChartPiePlot::XlChartPiePlot(XlChartPiePlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartPie::XlChartPie((XlChartPie *)(v2 + 144));
  *(void *)this = &unk_26EBDC920;
  *((void *)this + 18) = &unk_26EBDC948;
}

void sub_238C42EE4(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartPie::XlChartPie(XlChartPie *this)
{
  XlRecord::XlRecord(this, 4121, 6, 0);
  *(void *)uint64_t v1 = &unk_26EBDBEF0;
  *(_DWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 20) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartPie *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (*((_DWORD *)a2 + 2) >= 6u) {
    *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPiePlot::getChartType(XlChartPiePlot *this)
{
  return 2;
}

void sub_238C430A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C432DC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238C4340C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C435F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C436E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartPiePlot::~XlChartPiePlot(XlChartPiePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void XlChartCustomLabelText::~XlChartCustomLabelText(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlTxo::setFormula(XlTxo *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 6) = a2;
  *((_WORD *)this + 21) = a3;
  return result;
}

void sub_238C43B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C43C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C43F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C44098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C44118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C441E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C44268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C44324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C446C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C44780()
{
}

void sub_238C44D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_238C44F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4500C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C45468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238C455F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C45724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C457C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C458E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C45A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C45BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C45DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C45EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C46048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C46380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C46520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C46628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C46A48(_Unwind_Exception *a1)
{
}

void EFLexer::EFLexer(EFLexer *this, const char *a2)
{
}

void ELexer::ELexer(ELexer *this, const char *a2)
{
  uint64_t v3 = yyFlexLexer::yyFlexLexer((uint64_t)this, 0, 0);
  *(void *)uint64_t v3 = &unk_26EBDB260;
  *(_DWORD *)(v3 + 28) = 1;
  *(void *)(v3 + 576) = a2;
  operator new();
}

void sub_238C46C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v16;
  MEMORY[0x23EC99760](v18);
  MEMORY[0x23EC997B0](v17, 0x10B1C40C9CB012ALL);
  yyFlexLexer::~yyFlexLexer(v15);
  _Unwind_Resume(a1);
}

void yyFlexLexer::yy_flush_buffer(yyFlexLexer *this, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a2 + 32) = 0;
    **(unsigned char **)(a2 + 8) = 0;
    *(unsigned char *)(*(void *)(a2 + 8) + 1) = 0;
    *(void *)(a2 + 16) = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 48) = 1;
    *(_DWORD *)(a2 + 64) = 0;
    uint64_t v2 = *((void *)this + 54);
    if (v2) {
      uint64_t v2 = *(void *)(v2 + 8 * *((void *)this + 52));
    }
    if (v2 == a2) {
      yyFlexLexer::yy_load_buffer_state(this);
    }
  }
}

void yyFlexLexer::yy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  yyFlexLexer::yyensure_buffer_stack((yyFlexLexer *)a1);
  uint64_t v4 = *(void *)(a1 + 432);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 416);
    uint64_t v6 = *(void *)(v4 + 8 * v5);
    if (v6 != a2)
    {
      if (v6)
      {
        **(unsigned char **)(a1 + 392) = *(unsigned char *)(a1 + 376);
        uint64_t v4 = *(void *)(a1 + 432);
        uint64_t v5 = *(void *)(a1 + 416);
        uint64_t v7 = *(void *)(a1 + 384);
        *(void *)(*(void *)(v4 + 8 * v5) + 16) = *(void *)(a1 + 392);
        *(void *)(*(void *)(v4 + 8 * v5) + 32) = v7;
      }
      *(void *)(v4 + 8 * v5) = a2;
      yyFlexLexer::yy_load_buffer_state((yyFlexLexer *)a1);
      *(_DWORD *)(a1 + 408) = 1;
    }
  }
}

double yyFlexLexer::yyensure_buffer_stack(yyFlexLexer *this)
{
  uint64_t v2 = (void *)*((void *)this + 54);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 53);
    if (*((void *)this + 52) >= (unint64_t)(v3 - 1))
    {
      uint64_t v4 = v3 + 8;
      uint64_t v5 = (char *)malloc_type_realloc(v2, 8 * (v3 + 8), 0xA7BF72DAuLL);
      *((void *)this + 54) = v5;
      if (!v5)
      {
        (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "out of dynamic memory in yyensure_buffer_stack()");
        uint64_t v5 = (char *)*((void *)this + 54);
      }
      uint64_t v6 = &v5[8 * *((void *)this + 53)];
      double result = 0.0;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *(_OWORD *)uint64_t v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((void *)this + 53) = v4;
    }
  }
  else
  {
    int v8 = malloc_type_malloc(8uLL, 0xCCAAE399uLL);
    *((void *)this + 54) = v8;
    if (!v8)
    {
      (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "out of dynamic memory in yyensure_buffer_stack()");
      int v8 = (void *)*((void *)this + 54);
    }
    *int v8 = 0;
    double result = 0.0;
    *((_OWORD *)this + 26) = xmmword_238EDD5A0;
  }
  return result;
}

uint64_t yyparse(EFormula *a1)
{
  v229 = (EFormula *)MEMORY[0x270FA5388](a1);
  v232[1] = 0;
  int v225 = 0;
  int v1 = 0;
  uint64_t v242 = *MEMORY[0x263EF8340];
  uint64_t v2 = &v239;
  unint64_t v3 = 200;
  __src = &v239;
  uint64_t v4 = v240;
  uint64_t v5 = (__int16 *)v240;
  v232[0] = -2;
  while (2)
  {
    *(_WORD *)uint64_t v4 = v1;
    if (&v5[v3 - 1] <= (__int16 *)v4)
    {
      if (v3 >> 5 > 0xC34
        || (2 * v3 >= 0x186A0 ? (uint64_t v6 = 100000) : (uint64_t v6 = 2 * v3),
            (uint64_t v7 = (__int16 *)malloc_type_malloc(42 * v6 + 39, 0x4C849250uLL)) == 0))
      {
        v190 = v241;
LABEL_252:
        v191 = (NSString *)[NSString stringWithUTF8String:"memory exhausted"];
        unsigned int v25 = 0;
        v229->mErrMsg = v191;
        uint64_t v192 = 2;
        goto LABEL_302;
      }
      int v8 = v7;
      uint64_t v9 = (v4 - (char *)v5) >> 1;
      uint64_t v10 = v9 + 1;
      memcpy(v7, v5, 2 * (v9 + 1));
      int64_t v11 = v6;
      unsigned int v12 = (char *)&v8[20 * ((2 * (int)v6 + 39) / 0x28u)];
      memcpy(v12, __src, 40 * (v9 + 1));
      if (v5 != (__int16 *)v240) {
        free(v5);
      }
      uint64_t v4 = (char *)&v8[v9];
      uint64_t v2 = (EFRefTok *)&v12[40 * v10 - 40];
      if (v11 <= v10)
      {
        unsigned int v25 = 0;
        uint64_t v192 = 1;
        v190 = v241;
        uint64_t v5 = v8;
        goto LABEL_302;
      }
      __src = v12;
      uint64_t v5 = v8;
      unint64_t v3 = v11;
    }
    int v13 = yypact[v1];
    if (v13 == -189) {
      goto LABEL_31;
    }
    int v14 = v232[0];
    if (v232[0] == -2)
    {
      unsigned int v15 = v229;
      int v14 = (*(uint64_t (**)(void *))(*(void *)v229->mYylex + 64))(v229->mYylex);
      mYylex = v15->mYylex;
      id v227 = (id)mYylex[65];
      long long v17 = *((_OWORD *)mYylex + 34);
      long long v235 = *((_OWORD *)mYylex + 33);
      long long v236 = v17;
    }
    if (v14 < 1)
    {
      *(void *)v232 = 0;
    }
    else
    {
      v232[0] = v14;
      int v18 = v14 > 0x130 ? 2 : yytranslate[v14];
      v232[1] = v18;
    }
    uint64_t v19 = (v232[1] + v13);
    if (v19 > 0x14F || v232[1] != yycheck[v19])
    {
LABEL_31:
      unsigned int v24 = yydefact[v1];
      if (!yydefact[v1]) {
        goto LABEL_253;
      }
    }
    else
    {
      int v20 = yytable[v19];
      if (v20 > 0)
      {
        if (v19 != 44)
        {
          int v21 = v225 - 1;
          if (!v225) {
            int v21 = 0;
          }
          int v225 = v21;
          if (v232[0]) {
            int v22 = -2;
          }
          else {
            int v22 = 0;
          }
          v232[0] = v22;
          *(void *)&v2[2].unsigned int type = v227;
          v2 += 2;
          long long v23 = v236;
          *(_OWORD *)v2->data = v235;
          *(_OWORD *)&v2[1].dataSize = v23;
          goto LABEL_250;
        }
        unsigned int v25 = 0;
        uint64_t v192 = 0;
        goto LABEL_301;
      }
      if (!yytable[v19])
      {
LABEL_253:
        if (v225 == 3)
        {
          if (v232[0] <= 0)
          {
            v190 = v241;
            if (!v232[0])
            {
              unsigned int v25 = 0;
              uint64_t v192 = 1;
              goto LABEL_307;
            }
          }
          else
          {
            v232[0] = -2;
            v190 = v241;
            if ((v232[1] - 51) <= 0x25 && ((1 << (LOBYTE(v232[1]) - 51)) & 0x3D2059F6CFLL) != 0)
            {

              v232[0] = -2;
            }
          }
        }
        else if (v225)
        {
          v190 = v241;
        }
        else
        {
          uint64_t v193 = yysyntax_error(0, v1, v232[0]);
          uint64_t v194 = v193;
          v190 = v241;
          if ((unint64_t)v193 < 0x81)
          {
            unint64_t v197 = 128;
          }
          else
          {
            if (v193 < 0) {
              size_t v195 = -1;
            }
            else {
              size_t v195 = 2 * v193;
            }
            v196 = (char *)malloc_type_malloc(v195, 0x7E5807D3uLL);
            unint64_t v197 = 128;
            if (v196)
            {
              unint64_t v197 = v195;
              v190 = v196;
            }
          }
          if (v194 - 1 >= v197)
          {
            v199 = (NSString *)[NSString stringWithUTF8String:"syntax error"];
            v229->mErrMsg = v199;
            if (v194) {
              goto LABEL_252;
            }
          }
          else
          {
            yysyntax_error(v190, v1, v232[0]);
            v198 = (NSString *)[NSString stringWithUTF8String:v190];
            v229->mErrMsg = v198;
          }
        }
        while (v4 != (char *)v5)
        {
          unsigned int v200 = yystos[v1] - 51;
          BOOL v201 = v200 > 0x25;
          uint64_t v202 = (1 << v200) & 0x3D2059F6CFLL;
          if (!v201 && v202 != 0) {

          }
          v2 -= 2;
          int v204 = *((__int16 *)v4 - 1);
          v4 -= 2;
          int v1 = v204;
        }
        unsigned int v25 = 0;
        uint64_t v192 = 1;
        uint64_t v4 = (char *)v5;
        goto LABEL_302;
      }
      unsigned int v24 = -v20;
    }
    unsigned int v25 = yyr2[v24];
    int v26 = &v2[-2 * yyr2[v24]];
    uint64_t v27 = *(void *)&v26[2].type;
    uint64_t v28 = (void *)*(unsigned __int16 *)v26[2].data;
    unsigned int v29 = (EFormula *)*(unsigned __int16 *)&v26[2].data[2];
    int v30 = *(unsigned __int16 *)&v26[2].data[4];
    LODWORD(v31) = *(unsigned __int16 *)&v26[2].data[6];
    int v32 = *(_DWORD *)&v26[2].data[8];
    long long v33 = *(_OWORD *)&v26[3].type;
    int v238 = *(_DWORD *)&v26[3].data[8];
    long long v237 = v33;
    switch(v24)
    {
      case 2u:
        uint64_t v27 = *(void *)&v2->type;
        id v76 = *(id *)&v2->type;
        int v224 = (int)v31;
        v228 = v29;
        __int16 v77 = v30;
        int v78 = v32;
        [(EFormula *)v229 setFormula:v76];
        int v32 = v78;
        LOWORD(v30) = v77;
        LOWORD(v29) = (_WORD)v228;
        goto LABEL_209;
      case 3u:
      case 0x2Au:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 16;
        goto LABEL_122;
      case 4u:
      case 0x14u:
      case 0x16u:
      case 0x19u:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x2Bu:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x5Fu:
      case 0x65u:
      case 0x66u:
      case 0x6Cu:
        goto LABEL_33;
      case 5u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 11;
        goto LABEL_122;
      case 6u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 14;
        goto LABEL_122;
      case 7u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 9;
        goto LABEL_122;
      case 8u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 10;
        goto LABEL_122;
      case 9u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 13;
        goto LABEL_122;
      case 0xAu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 12;
        goto LABEL_122;
      case 0xBu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 8;
        goto LABEL_122;
      case 0xCu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 3;
        goto LABEL_122;
      case 0xDu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 4;
        goto LABEL_122;
      case 0xEu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 5;
        goto LABEL_122;
      case 0xFu:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 6;
        goto LABEL_122;
      case 0x10u:
        unint64_t v35 = *(void **)&v2[-6].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
        uint64_t v38 = 7;
        goto LABEL_122;
      case 0x11u:
        int v226 = v32;
        int v230 = v30;
        uint64_t v27 = *(void *)&v2[-2].type;
        if (!v27) {
          uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        }
        __int16 v79 = (void *)v27;
        uint64_t v80 = 20;
        goto LABEL_108;
      case 0x12u:
        int v226 = v32;
        int v230 = v30;
        uint64_t v27 = *(void *)&v2->type;
        if (!*(void *)&v2->type) {
          uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        }
        __int16 v79 = (void *)v27;
        uint64_t v80 = 19;
        goto LABEL_108;
      case 0x13u:
        int v226 = v32;
        int v230 = v30;
        uint64_t v27 = *(void *)&v2->type;
        if (!*(void *)&v2->type) {
          uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        }
        __int16 v79 = (void *)v27;
        uint64_t v80 = 18;
LABEL_108:
        [v79 addToken:v80 extendedDataLength:0];
        goto LABEL_244;
      case 0x15u:
        v81 = *(NSString **)&v2[-2].type;
        goto LABEL_220;
      case 0x17u:
        double v43 = *(double *)&v2[-2].type;
        goto LABEL_218;
      case 0x18u:
        unsigned int type = v2[-2].type;
        int v230 = v30;
        int v41 = v32;
        id v42 = intTokens(v229, type);
        goto LABEL_221;
      case 0x1Au:
        int v226 = v32;
        int v230 = v30;
        uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        if ([*(id *)&v2[-2].type compare:@"#NULL!"])
        {
          if ([*(id *)&v2[-2].type compare:@"#DIV/0!"])
          {
            if ([*(id *)&v2[-2].type compare:@"#VALUE!"])
            {
              if ([*(id *)&v2[-2].type compare:@"#REF!"])
              {
                if ([*(id *)&v2[-2].type compare:@"#NAME?"])
                {
                  if ([*(id *)&v2[-2].type compare:@"#NUM!"])
                  {
                    [*(id *)&v2[-2].type compare:@"#N/A"];
                    v83 = (void *)v27;
                    __int16 v84 = 42;
                  }
                  else
                  {
                    v83 = (void *)v27;
                    __int16 v84 = 36;
                  }
                }
                else
                {
                  v83 = (void *)v27;
                  __int16 v84 = 29;
                }
              }
              else
              {
                v83 = (void *)v27;
                __int16 v84 = 23;
              }
            }
            else
            {
              v83 = (void *)v27;
              __int16 v84 = 15;
            }
          }
          else
          {
            v83 = (void *)v27;
            __int16 v84 = 7;
          }
        }
        else
        {
          v83 = (void *)v27;
          __int16 v84 = 0;
        }
        addErrorToken(v83, v84);
        goto LABEL_244;
      case 0x1Bu:
      case 0x5Au:
        goto LABEL_191;
      case 0x1Cu:
      case 0x4Cu:
        goto LABEL_204;
      case 0x1Du:
        uint64_t v27 = v27 & 0xFFFFFFFF00000000 | 0x11;
        goto LABEL_246;
      case 0x1Eu:
        uint64_t v27 = v27 & 0xFFFFFFFF00000000 | 0xF;
        goto LABEL_246;
      case 0x1Fu:
        uint64_t v38 = v2[-2].type;
        unint64_t v35 = *(void **)&v2[-4].type;
        id v36 = *(id *)&v2->type;
        unsigned int v37 = v229;
LABEL_122:
        int v230 = v30;
        int v41 = v32;
        id v42 = operatorTokens(v37, v38, v35, v36);
        goto LABEL_221;
      case 0x24u:
      case 0x73u:
        unsigned int v39 = v229;
        char v40 = 1;
        goto LABEL_42;
      case 0x25u:
        v85 = v229;
        int v230 = v30;
        int v226 = v32;
        id v86 = [(EFormula *)v229 formulaHelper];
        v87 = @"TRUE";
        goto LABEL_125;
      case 0x26u:
      case 0x74u:
        unsigned int v39 = v229;
        char v40 = 0;
LABEL_42:
        int v230 = v30;
        int v41 = v32;
        id v42 = BOOLTokens(v39, v40);
        goto LABEL_221;
      case 0x27u:
        v85 = v229;
        int v230 = v30;
        int v226 = v32;
        id v86 = [(EFormula *)v229 formulaHelper];
        v87 = @"FALSE";
LABEL_125:
        __int16 v88 = [v86 resolveFunctionName:v87];
        int v224 = (int)v31;
        __int16 v89 = (__int16)v28;
        uint64_t v28 = (void *)v3;
        __int16 v90 = v88;
        uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v85 formulaClass]);
        __int16 v91 = v90;
        unint64_t v3 = (unint64_t)v28;
        LOWORD(v28) = v89;
        LOWORD(v31) = v224;
        addFunction((void *)v27, v91, 0);
        goto LABEL_188;
      case 0x29u:
        v92 = *(void **)&v2[-4].type;
        int v230 = v30;
        int v93 = v32;
        [v92 addToken:21 extendedDataLength:0];
        int v32 = v93;
        LOWORD(v30) = v230;
        uint64_t v27 = *(void *)&v2[-4].type;
        goto LABEL_246;
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x4Bu:
        uint64_t v27 = *(void *)&v2[-2].type;
        goto LABEL_35;
      case 0x31u:
        int v226 = v32;
        int v224 = (int)v31;
        int v230 = v30;
        unint64_t v222 = v3;
        v223 = v28;
        v94 = v229;
        uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        v95 = *(NSMutableArray **)&v2[-4].type;
        v221 = (char *)[(NSMutableArray *)v95 count];
        uint64_t v96 = *(void *)&v2[-8].type;
        __int16 v97 = objc_msgSend(-[EFormula formulaHelper](v94, "formulaHelper"), "resolveFunctionName:", v96);
        if (v97 == 255)
        {
          uint64_t v233 = -1;
          uint64_t v234 = -1;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "workbook"), "resources"), "links"), "addOrEquivalentExternalAddInName:linkReferenceIndex:nameIndex:", v96, &v234, &v233);
          uint64_t v98 = [(id)v27 addToken:57 extendedDataLength:6];
          *(_WORD *)uint64_t v98 = v234;
          *(_DWORD *)(v98 + 2) = (unsigned __int16)v233;
          ++v221;
        }
        int v99 = XlArgumentCountForFunction(v97);
        id v100 = args(v95);
        v101 = v100;
        v228 = v29;
        LODWORD(v220) = v97;
        if (v100)
        {
          if ([v100 tokenCount])
          {
            int v102 = [v101 tokenTypeAtIndex:0];
            if (v99 <= 0 && v221 == (char *)1 && v102 == 22)
            {
              uint64_t v103 = -1;
LABEL_229:
              unint64_t v3 = v222;

              if (v99 == -1) {
                addVariableFunction((void *)v27, (__int16)v220, (uint64_t)&v221[v103]);
              }
              else {
                addFunction((void *)v27, (__int16)v220, (uint64_t)v221);
              }
              goto LABEL_198;
            }
          }
        }
        if (v99 < 0 || v99 == v221)
        {
          v182 = v5;
          int v183 = [v101 tokenCount];
          if (v183)
          {
            int v184 = v183;
            uint64_t v185 = 0;
            do
            {
              [(id)v27 copyTokenAtIndex:v185 fromFormula:v101];
              uint64_t v185 = (v185 + 1);
            }
            while (v184 != v185);
          }
          uint64_t v103 = 0;
          uint64_t v5 = v182;
          goto LABEL_229;
        }
        v210 = (NSString *)[NSString stringWithUTF8String:"Invalid number of parameters for function!"];
        v229->mErrMsg = v210;

        goto LABEL_300;
      case 0x32u:
        uint64_t v27 = *(void *)&v2[-6].type;
        if (!v27) {
          goto LABEL_246;
        }
        int v224 = (int)v31;
        v223 = v28;
        uint64_t v28 = (void *)v3;
        id v104 = *(id *)&v2->type;
        if (*(void *)&v2->type)
        {
          v105 = (void *)v27;
          __int16 v106 = v30;
          int v107 = v32;
          [v105 addObject:*(void *)&v2->type];

          int v32 = v107;
          LOWORD(v30) = v106;
          uint64_t v27 = *(void *)&v2[-6].type;
        }
        goto LABEL_141;
      case 0x33u:
        uint64_t v27 = *(void *)&v2[-4].type;
        if (!v27) {
          goto LABEL_246;
        }
        int v224 = (int)v31;
        v223 = v28;
        uint64_t v28 = (void *)v3;
        id v108 = *(id *)&v2->type;
        if (*(void *)&v2->type)
        {
          v109 = (void *)v27;
          __int16 v110 = v30;
          int v111 = v32;
          [v109 addObject:*(void *)&v2->type];

          int v32 = v111;
          LOWORD(v30) = v110;
          uint64_t v27 = *(void *)&v2[-4].type;
        }
LABEL_141:
        unint64_t v3 = (unint64_t)v28;
        LOWORD(v28) = (_WORD)v223;
        goto LABEL_209;
      case 0x34u:
      case 0x35u:
      case 0x6Au:
        v228 = v29;
        int v230 = v30;
        LODWORD(v29) = v32;
        uint64_t v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithObjects:", *(void *)&v2->type, 0);

        goto LABEL_143;
      case 0x36u:
        v228 = v29;
        int v230 = v30;
        LODWORD(v29) = v32;
        uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        [(id)v27 addToken:22 extendedDataLength:0];
LABEL_143:
        int v32 = (int)v29;
        LOWORD(v30) = v230;
        LOWORD(v29) = (_WORD)v228;
        goto LABEL_246;
      case 0x3Cu:
        int v230 = v30;
        int v41 = v32;
        id v42 = refTokens(v229, v2);
        goto LABEL_221;
      case 0x3Du:
        v112 = v229;
        v228 = v29;
        int v230 = v30;
        LODWORD(v29) = v32;
        id v113 = refTokens(v229, v2 - 6);
        id v42 = operatorTokens(v112, 17, v113, *(void **)&v2->type);
        goto LABEL_146;
      case 0x3Eu:
        LOWORD(v28) = 0;
        int v30 = *(_DWORD *)&v2[-10].data[8] | (LOBYTE(v2[-9].dataSize) << 14);
        LODWORD(v31) = *(_DWORD *)&v2[-2].data[8] | (LOBYTE(v2[-1].dataSize) << 14);
        LOWORD(v29) = -1;
        goto LABEL_155;
      case 0x3Fu:
        LOWORD(v28) = LOWORD(v2[-10].type) - 1;
        LOWORD(v29) = LOWORD(v2[-2].type) - 1;
        LOWORD(v30) = 0x8000;
        LOWORD(v31) = -32513;
        goto LABEL_155;
      case 0x40u:
        LODWORD(v28) = v2[-9].type;
        LODWORD(v29) = v2[-1].type;
        if (BYTE1(v2[-9].dataSize)) {
          LOWORD(v30) = 0x8000;
        }
        else {
          LOWORD(v30) = 0;
        }
        if (BYTE1(v2[-1].dataSize)) {
          LOWORD(v31) = 0x8000;
        }
        else {
          LOWORD(v31) = 255;
        }
LABEL_155:
        uint64_t v27 = 0x800000025;
        goto LABEL_246;
      case 0x41u:
        LOWORD(v28) = *(_WORD *)v2[-6].data;
        LOWORD(v29) = *(_WORD *)v2->data;
        LOWORD(v30) = *(_WORD *)&v2[-6].data[2];
        uint64_t v27 = 0x800000025;
        LOWORD(v31) = *(_WORD *)&v2->data[2];
        goto LABEL_246;
      case 0x42u:
        uint64_t v27 = *(void *)&v2->type;
        LOWORD(v28) = *(_WORD *)v2->data;
        LOWORD(v29) = *(_WORD *)&v2->data[2];
        LOWORD(v30) = *(_WORD *)&v2->data[4];
        LOWORD(v31) = *(_WORD *)&v2->data[6];
        int v32 = *(_DWORD *)&v2->data[8];
        goto LABEL_246;
      case 0x43u:
        int v226 = v32;
        __int16 v114 = v30;
        unint64_t v115 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "resolveName:", *(void *)&v2[-2].type);
        if (v115 != -1)
        {
          LOWORD(v28) = v115;
          uint64_t v27 = 0x400000023;
          LOWORD(v30) = v114;
          unsigned int v29 = (EFormula *)(v115 >> 16);
          goto LABEL_245;
        }
        v208 = NSString;
        v209 = "Column followed by no TOK_COLON or TOK_LPAREN.";
        goto LABEL_299;
      case 0x44u:
        LODWORD(v28) = v2[-1].type;
        if ((int)v28 < 500001 && *(int *)&v2[-2].data[8] < 500001)
        {
          LOWORD(v29) = *(_DWORD *)&v2[-2].data[8] | (unsigned __int16)(BYTE1(v2[-1].dataSize) << 15) | (LOBYTE(v2[-1].dataSize) << 14);
          uint64_t v27 = 0x400000024;
          goto LABEL_246;
        }
        v208 = NSString;
        v209 = "Reference out of bounds!";
        goto LABEL_299;
      case 0x45u:
        uint64_t v116 = *(void *)&v2[-7].dataSize;
        if (v116 != -1) {
          goto LABEL_201;
        }
        v208 = NSString;
        v209 = "label! but label is not a sheet name.";
        goto LABEL_299;
      case 0x46u:
        v223 = v28;
        uint64_t v28 = (void *)v3;
        uint64_t v55 = *(void *)&v2[-2].data[8];
        if (v55 != -1)
        {
          int v226 = v32;
          int v230 = v30;
          uint64_t v56 = *(void *)&v2[-9].dataSize;
          if (v56 == -1 || v2[-9].data[4]) {
            goto LABEL_168;
          }
          uint64_t v58 = *(void *)&v2[-4].data[8];
          int v57 = v229;
          goto LABEL_237;
        }
        v208 = NSString;
        v209 = "\"sheet!label\" but label is not a local name.";
        goto LABEL_299;
      case 0x47u:
        if (*(void *)&v2[-7].dataSize != -1) {
          goto LABEL_33;
        }
        v208 = NSString;
        v209 = "\"label!...\" but label is not a sheet name.";
        goto LABEL_299;
      case 0x48u:
        int v224 = (int)v31;
        __int16 v117 = (__int16)v28;
        uint64_t v28 = (void *)v3;
        uint64_t v118 = *(void *)&v2[-2].data[8];
        if (v118 != -1) {
          goto LABEL_208;
        }
        v208 = NSString;
        v209 = "simple \"label\" but label is not a local name.";
        goto LABEL_299;
      case 0x49u:
        if (*(void *)&v2[-15].dataSize == -1 || *(void *)&v2[-7].dataSize == -1)
        {
          v208 = NSString;
          v209 = "\"label:label!...\" but one of label is not a sheet name.";
        }
        else
        {
          if (v2->type)
          {
            uint64_t v44 = *(void *)&v2[-16].type;
            uint64_t v45 = *(void *)&v2[-8].type;
            v228 = v29;
            int v230 = v30;
            LODWORD(v29) = v32;
            id v42 = link3DTokens(v229, [(EFormula *)v229 resolveFirstSheet:v44 lastSheet:v45], v2);
LABEL_146:
            int v32 = (int)v29;
            LOWORD(v30) = v230;
            LOWORD(v29) = (_WORD)v228;
LABEL_222:
            uint64_t v27 = (uint64_t)v42;
            goto LABEL_246;
          }
LABEL_285:
          v208 = NSString;
          v209 = "3d reference not supported.";
        }
        goto LABEL_299;
      case 0x4Au:
        uint64_t v27 = *(void *)&v2[-2].type;
        goto LABEL_246;
      case 0x4Du:
        if (!*(void *)&v2[-2].type)
        {
LABEL_33:
          uint64_t v27 = *(void *)&v2->type;
          goto LABEL_246;
        }
        v208 = NSString;
        v209 = "should not have table name at all!";
        goto LABEL_299;
      case 0x4Eu:
        if (*(_DWORD *)v2[-4].data == 278)
        {
          unint64_t v222 = v3;
          v119 = *(void **)&v2[-3].dataSize;
          v221 = *(char **)&v2[-4].data[8];
          int v230 = v30;
          int v226 = v32;
          v120 = (void *)[v119 tableRange];
          v223 = v28;
          uint64_t v28 = v120;
          int v121 = [v120 firstRow];
          uint64_t v219 = [v119 headerRowCount] + v121;
          LOWORD(v121) = [v28 lastRow];
          LOWORD(v119) = v121 - [v119 totalsRowCount];
          unsigned __int8 v122 = [v28 firstColumn];
          v220 = v5;
          int v224 = (int)v31;
          __int16 v123 = (__int16)v29;
          __int16 v124 = v122 | 0xC000;
          v125 = v28;
          LOWORD(v28) = (_WORD)v223;
          __int16 v126 = [v125 lastColumn] | 0xC000;
          uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
          v127 = (_WORD *)[(id)v27 addToken:59 extendedDataLength:10];
          int v32 = v226;
          LOWORD(v30) = v230;
          _WORD *v127 = (_WORD)v221;
          v127[1] = v219;
          v127[2] = (_WORD)v119;
          unint64_t v3 = v222;
          v127[3] = v124;
          LOWORD(v29) = v123;
          LOWORD(v31) = v224;
          v127[4] = v126;
          uint64_t v5 = v220;
          goto LABEL_246;
        }
        v208 = NSString;
        v209 = "type must be TOK_TABLE_NAME";
        goto LABEL_299;
      case 0x4Fu:
        int v226 = v32;
        int v230 = v30;
        unint64_t v222 = v3;
        if (!*(void *)&v2[-6].type)
        {
          uint64_t v234 = -1;
          id v128 = [(EFormula *)v229 resolveTable:"" sheetIndex:&v234];
          *(void *)&v2[-5].dataSize = v128;
          *(void *)&v2[-6].data[8] = v234;
          if (!v128) {
            goto LABEL_298;
          }
        }
        int v224 = (int)v31;
        v228 = v29;
        v223 = v28;
        v129 = [[EFTableData alloc] initWith:&v2[-6]];
        id v130 = [(EFTableData *)v129 reference];
        id v131 = [(EFTableData *)v129 table];
        uint64_t v132 = [(EFTableData *)v129 ptgData];
        uint64_t v133 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "resolveTableColumn:columnName:", v131, *(void *)&v2[-2].type);
        if (v133 == -1) {
          goto LABEL_287;
        }
        __int16 v134 = v133;
        __int16 v135 = [v130 firstRow];
        v220 = v5;
        *(_WORD *)(v132 + 2) = [v131 headerRowCount] + v135;
        __int16 v136 = [v130 lastRow];
        __int16 v137 = v136 - [v131 totalsRowCount];
        uint64_t v5 = v220;
        *(_WORD *)(v132 + 4) = v137;
        *(_WORD *)(v132 + 6) = v134 + [v130 firstColumn];
        char v138 = [v130 firstColumn];
        *(unsigned char *)(v132 + 7) = -64;
        *(_WORD *)(v132 + 8) = (v134 + v138) | 0xC000;
        v139 = [(EFTableData *)v129 refTok];
        uint64_t v27 = (uint64_t)refTokens(v229, v139);

        goto LABEL_197;
      case 0x50u:
        int v226 = v32;
        int v230 = v30;
        unint64_t v222 = v3;
        if (*(void *)&v2[-6].type
          || (uint64_t v234 = -1,
              id v140 = [(EFormula *)v229 resolveTable:"" sheetIndex:&v234],
              *(void *)&v2[-5].dataSize = v140,
              *(void *)&v2[-6].data[8] = v234,
              v140))
        {
          v141 = [[EFTableData alloc] initWith:&v2[-6]];
          uint64_t v142 = [(EFTableData *)v141 reference];
          v228 = v29;
          __int16 v143 = (__int16)v31;
          __int16 v144 = (__int16)v28;
          uint64_t v28 = (void *)v142;
          uint64_t v145 = [(EFTableData *)v141 ptgData];
          -[EFTableData makeup:with:](v141, "makeup:with:", *(void *)&v2[-2].type, objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "rowNumber"));
          *(_WORD *)(v145 + 6) = [v28 firstColumn];
          v146 = v28;
          LOWORD(v28) = v144;
          LOWORD(v31) = v143;
          LOWORD(v29) = (_WORD)v228;
          unsigned __int8 v147 = [v146 lastColumn];
          *(unsigned char *)(v145 + 7) = -64;
          *(_WORD *)(v145 + 8) = v147 | 0xC000;
          v148 = [(EFTableData *)v141 refTok];
          uint64_t v27 = (uint64_t)refTokens(v229, v148);

LABEL_185:
          unint64_t v3 = v222;
LABEL_244:
          LOWORD(v30) = v230;
          goto LABEL_245;
        }
LABEL_298:
        v208 = NSString;
        v209 = "cell is not in a table!";
        goto LABEL_299;
      case 0x51u:
        int v226 = v32;
        int v230 = v30;
        unint64_t v222 = v3;
        v220 = v5;
        if (!*(void *)&v2[-2].type)
        {
          uint64_t v234 = -1;
          id v46 = [(EFormula *)v229 resolveTable:"" sheetIndex:&v234];
          *(void *)&v2[-1].dataSize = v46;
          *(void *)&v2[-2].data[8] = v234;
          if (!v46)
          {
            v206 = NSString;
            v205 = "cell is not in a table!";
            goto LABEL_283;
          }
        }
        int v47 = [[EFTableData alloc] initWith:&v2[-2]];
        uint64_t v48 = [(EFTableData *)v47 reference];
        v223 = v28;
        uint64_t v28 = (void *)v48;
        uint64_t v49 = [(EFTableData *)v47 table];
        v228 = v29;
        unsigned int v29 = (EFormula *)v49;
        uint64_t v50 = [(EFTableData *)v47 ptgData];
        int v224 = (int)v31;
        uint64_t v31 = (_WORD *)v50;
        __int16 v51 = [v28 firstRow];
        v31[1] = [(EFormula *)v29 headerRowCount] + v51;
        __int16 v52 = [v28 lastRow];
        int v53 = v29;
        LOWORD(v29) = (_WORD)v228;
        v31[2] = v52 - [v53 totalsRowCount];
        v31[3] = [v28 firstColumn];
        char v54 = v28;
        LOWORD(v28) = (_WORD)v223;
        v31[4] = [v54 lastColumn];
        LOWORD(v31) = v224;
        [(EFormula *)v229 setTableData:v47];

        uint64_t v5 = v220;
        goto LABEL_185;
      case 0x52u:
        v228 = v29;
        unsigned int v29 = v229;
        int v230 = v30;
        int v226 = v32;
        uint64_t v149 = objc_msgSend(-[EFormula tableData](v229, "tableData"), "ptgData");
        *(unsigned char *)(v149 + 7) = -64;
        *(unsigned char *)(v149 + 9) = -64;
        uint64_t v27 = (uint64_t)refTokens(v29, (const EFRefTok *)objc_msgSend(-[EFormula tableData](v29, "tableData"), "refTok"));
        v150 = v29;
        LOWORD(v29) = (_WORD)v228;
        [v150 setTableData:0];
        goto LABEL_188;
      case 0x58u:
        v228 = v29;
        unsigned int v29 = v229;
        int v230 = v30;
        int v226 = v32;
        uint64_t v151 = objc_msgSend(-[EFormula formulaHelper](v229, "formulaHelper"), "rowNumber");
        v152 = v29;
        LOWORD(v29) = (_WORD)v228;
        int v224 = (int)v31;
        __int16 v153 = (__int16)v28;
        uint64_t v28 = (void *)v3;
        uint64_t v154 = v151;
        v155 = (void *)[v152 tableData];
        uint64_t v156 = v154;
        unint64_t v3 = (unint64_t)v28;
        LOWORD(v28) = v153;
        LOWORD(v31) = v224;
        [v155 makeup:*(void *)&v2[-2].type with:v156];
LABEL_188:
        int v32 = v226;
        LOWORD(v30) = v230;
        goto LABEL_246;
      case 0x59u:
        if (*(void *)&v2[-2].type)
        {
          id v157 = *(id *)&v2->type;
          uint64_t v218 = *(void *)&v2[-2].type;
          uint64_t v27 = [NSString stringWithFormat:@"%@%@", v218, v157];
          *(void *)&v2[-2].unsigned int type = v27;
LABEL_35:
          LOWORD(v28) = *(_WORD *)v2[-2].data;
          LOWORD(v29) = *(_WORD *)&v2[-2].data[2];
          LOWORD(v30) = *(_WORD *)&v2[-2].data[4];
          LOWORD(v31) = *(_WORD *)&v2[-2].data[6];
          int v32 = *(_DWORD *)&v2[-2].data[8];
          long long v34 = *(_OWORD *)&v2[-1].type;
          int v238 = *(_DWORD *)&v2[-1].data[8];
          long long v237 = v34;
        }
        else
        {
LABEL_191:
          uint64_t v27 = *(void *)&v2->type;
          LOWORD(v28) = *(_WORD *)v2->data;
          LOWORD(v29) = *(_WORD *)&v2->data[2];
          LOWORD(v30) = *(_WORD *)&v2->data[4];
          LOWORD(v31) = *(_WORD *)&v2->data[6];
          int v32 = *(_DWORD *)&v2->data[8];
          long long v237 = *(_OWORD *)&v2[1].type;
          int v238 = *(_DWORD *)&v2[1].data[8];
        }
        goto LABEL_246;
      case 0x5Bu:
        int v226 = v32;
        int v224 = (int)v31;
        v228 = v29;
        int v230 = v30;
        unint64_t v222 = v3;
        v223 = v28;
        v158 = v229;
        v221 = (char *)objc_msgSend(-[EFormula tableData](v229, "tableData"), "table");
        v159 = objc_msgSend(-[EFormula tableData](v158, "tableData"), "reference");
        uint64_t v160 = objc_msgSend(-[EFormula tableData](v158, "tableData"), "ptgData");
        uint64_t v161 = *(void *)&v2[-2].type;
        id v162 = [(EFormula *)v158 formulaHelper];
        uint64_t v163 = [v162 resolveTableColumn:v221 columnName:v161];
        if (v163 != -1)
        {
          __int16 v164 = v163;
          *(_WORD *)(v160 + 6) = v163 + [v159 firstColumn];
          *(_WORD *)(v160 + 8) = v164 + [v159 firstColumn];
LABEL_197:
          unint64_t v3 = v222;
LABEL_198:
          LOWORD(v28) = (_WORD)v223;
          LOWORD(v30) = v230;
          LOWORD(v29) = (_WORD)v228;
          goto LABEL_199;
        }
LABEL_287:
        v208 = NSString;
        v209 = "column name in a table could not be resolved!";
LABEL_299:
        v211 = (NSString *)[v208 stringWithUTF8String:v209];
        v229->mErrMsg = v211;
        goto LABEL_300;
      case 0x5Cu:
        int v226 = v32;
        int v224 = (int)v31;
        v228 = v29;
        int v230 = v30;
        unint64_t v222 = v3;
        v223 = v28;
        v165 = v229;
        uint64_t v166 = objc_msgSend(-[EFormula tableData](v229, "tableData"), "table");
        v221 = (char *)objc_msgSend(-[EFormula tableData](v165, "tableData"), "reference");
        uint64_t v167 = objc_msgSend(-[EFormula tableData](v165, "tableData"), "ptgData");
        uint64_t v168 = objc_msgSend(-[EFormula formulaHelper](v165, "formulaHelper"), "resolveTableColumn:columnName:", v166, *(void *)&v2[-10].type);
        if (v168 != -1)
        {
          __int16 v169 = v168;
          v220 = v5;
          uint64_t v170 = objc_msgSend(-[EFormula formulaHelper](v165, "formulaHelper"), "resolveTableColumn:columnName:", v166, *(void *)&v2[-2].type);
          if (v170 == -1)
          {
            v206 = NSString;
            v205 = "column name in a table could not be resolved!";
            goto LABEL_283;
          }
          __int16 v171 = v170;
          v172 = v221;
          *(_WORD *)(v167 + 6) = v169 + [v221 firstColumn];
          *(_WORD *)(v167 + 8) = v171 + [v172 firstColumn];
          uint64_t v5 = v220;
          goto LABEL_197;
        }
        v165->mErrMsg = (NSString *)[NSString stringWithUTF8String:"column name in a table could not be resolved!"];
LABEL_300:
        uint64_t v192 = 1;
LABEL_301:
        v190 = v241;
        goto LABEL_302;
      case 0x5Du:
        uint64_t v116 = *(void *)&v2[-2].type;
        if (v116 == -1) {
          goto LABEL_285;
        }
LABEL_201:
        if (!v2->type) {
          goto LABEL_285;
        }
        int v230 = v30;
        int v41 = v32;
        id v42 = link3DTokens(v229, v116, v2);
        goto LABEL_221;
      case 0x5Eu:
        v223 = v28;
        uint64_t v28 = (void *)v3;
        uint64_t v55 = *(void *)&v2->data[8];
        if (v55 != -1)
        {
          int v226 = v32;
          int v230 = v30;
          uint64_t v56 = *(void *)&v2[-2].type;
          if (v56 == -1)
          {
LABEL_168:
            uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
            *(_DWORD *)[(id)v27 addToken:35 extendedDataLength:4] = v55;
LABEL_238:
            unint64_t v3 = (unint64_t)v28;
            LOWORD(v28) = (_WORD)v223;
            goto LABEL_244;
          }
          int v57 = v229;
          LOWORD(v58) = v55;
LABEL_237:
          uint64_t v27 = (uint64_t)sheetNameTokens(v57, v56, v58);
          goto LABEL_238;
        }
        v208 = NSString;
        v209 = "TOK_NAME has to be a local name.";
        goto LABEL_299;
      case 0x60u:
        if (*(void *)&v2[-10].type) {
          goto LABEL_286;
        }
LABEL_204:
        uint64_t v27 = 0;
        goto LABEL_246;
      case 0x61u:
        uint64_t v27 = *(void *)&v2[-8].type;
        goto LABEL_246;
      case 0x62u:
        uint64_t v27 = *(void *)&v2[1].dataSize;
        goto LABEL_246;
      case 0x63u:
        uint64_t v173 = *(void *)&v2[-4].type;
        id v174 = *(id *)&v2->type;
        int v230 = v30;
        int v41 = v32;
        id v42 = [(EFormula *)v229 resolveFirstSheet:v173 lastSheet:v174];
        goto LABEL_221;
      case 0x64u:
        int v224 = (int)v31;
        __int16 v117 = (__int16)v28;
        uint64_t v28 = (void *)v3;
        uint64_t v118 = *(void *)&v2->data[8];
        if (v118 != -1)
        {
LABEL_208:
          v228 = v29;
          int v230 = v30;
          LODWORD(v29) = v32;
          uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
          v175 = (_DWORD *)[(id)v27 addToken:35 extendedDataLength:4];
          int v32 = (int)v29;
          LOWORD(v30) = v230;
          LOWORD(v29) = (_WORD)v228;
          _DWORD *v175 = v118;
          unint64_t v3 = (unint64_t)v28;
          LOWORD(v28) = v117;
LABEL_209:
          LOWORD(v31) = v224;
          goto LABEL_246;
        }
        v208 = NSString;
        v209 = "\"extbook!TOK_NAME\" where TOK_NAME has to be a local name.";
        goto LABEL_299;
      case 0x67u:
        if (!*(void *)&v2[-6].type) {
          goto LABEL_246;
        }
LABEL_286:
        v208 = NSString;
        v209 = "External book reference not supported!";
        goto LABEL_299;
      case 0x68u:
        int v226 = v32;
        int v230 = v30;
        v220 = v5;
        uint64_t v27 = (uint64_t)objc_alloc_init([(EFormula *)v229 formulaClass]);
        LODWORD(v234) = 0;
        v221 = (char *)[*(id *)&v2[-6].type count];
        v223 = v28;
        int v224 = (int)v31;
        if (!v221)
        {
          [(id)v27 addArrayWithCol:0xFFFFFFFFLL andRow:0xFFFFFFFFLL];
          goto LABEL_232;
        }
        unint64_t v222 = v3;
        uint64_t v59 = 0;
        int v60 = 0;
        v228 = v29;
LABEL_58:
        unsigned int v61 = (void *)[*(id *)&v2[-6].type objectAtIndex:v59];
        int v62 = [v61 tokenCount];
        if (v62 >= 1)
        {
          uint64_t v63 = 0;
          do
          {
            if ([v61 tokenTypeAtIndex:v63] == 23) {
              [v61 extendedDataForTokenAtIndex:v63 extendedDataIndex:0 length:&v234];
            }
            uint64_t v63 = (v63 + 1);
          }
          while (v62 != v63);
        }
        if (!v60)
        {
          int v60 = v62;
          LOWORD(v29) = (_WORD)v228;
LABEL_67:
          if ((char *)++v59 == v221)
          {
            int v64 = v221;
            [(id)v27 addArrayWithCol:(v60 - 1) andRow:(v221 - 1)];
            unint64_t v3 = v222;
            if (v64)
            {
              uint64_t v65 = 0;
              int v66 = 0;
              do
              {
                int v67 = *(void **)&v2[-6].type;
                uint64_t v219 = v65;
                int v68 = objc_msgSend(v67, "objectAtIndex:");
                int v69 = [v68 tokenCount];
                if (v69 >= 1)
                {
                  int v70 = v69;
                  uint64_t v71 = 0;
                  do
                  {
                    switch([v68 tokenTypeAtIndex:v71])
                    {
                      case 0x17u:
                        unsigned int v72 = (const unsigned __int16 *)[v68 extendedDataForTokenAtIndex:v71 extendedDataIndex:0 length:&v234];
                        if (addUnicodeStringToArray((void *)v27, v72 + 2, *(__int16 *)v72, v66 + v71)) {
                          break;
                        }
                        v205 = "String too long!";
                        goto LABEL_282;
                      case 0x1Du:
                        addBoolToArray((void *)v27, *(unsigned char *)[v68 extendedDataForTokenAtIndex:v71 extendedDataIndex:0 length:&v234] != 0, v66 + v71);
                        break;
                      case 0x1Eu:
                        LOWORD(v73) = *(_WORD *)[v68 extendedDataForTokenAtIndex:v71 extendedDataIndex:0 length:&v234];
                        double v74 = (double)v73;
                        goto LABEL_81;
                      case 0x1Fu:
                        uint64_t v75 = (double *)[v68 extendedDataForTokenAtIndex:v71 extendedDataIndex:0 length:&v234];
                        if (v75) {
                          double v74 = *v75;
                        }
                        else {
                          double v74 = 0.0;
                        }
LABEL_81:
                        addNumberToArray((void *)v27, v66 + v71, v74);
                        break;
                      default:
                        addErrorToArrayAtIndex((void *)v27, v66 + v71);
                        break;
                    }
                    uint64_t v71 = (v71 + 1);
                  }
                  while (v70 != v71);
                  v66 += v71;
                  unint64_t v3 = v222;
                  LOWORD(v29) = (_WORD)v228;
                }
                uint64_t v65 = v219 + 1;
              }
              while ((char *)(v219 + 1) != v221);
            }
LABEL_232:

            uint64_t v5 = v220;
            LOWORD(v28) = (_WORD)v223;
            LOWORD(v30) = v230;
LABEL_199:
            LOWORD(v31) = v224;
LABEL_245:
            int v32 = v226;
LABEL_246:
            v186 = &v2[-2 * v25];
            *(void *)&v186[2].unsigned int type = v27;
            uint64_t v2 = v186 + 2;
            v4 -= 2 * v25;
            *(_WORD *)v2->data = (_WORD)v28;
            *(_WORD *)&v2->data[2] = (_WORD)v29;
            *(_WORD *)&v2->data[4] = v30;
            *(_WORD *)&v2->data[6] = (_WORD)v31;
            *(_DWORD *)&v2->data[8] = v32;
            long long v187 = v237;
            *(_DWORD *)&v2[1].data[8] = v238;
            *(_OWORD *)&v2[1].unsigned int type = v187;
            uint64_t v188 = yyr1[v24] - 50;
            uint64_t v189 = (*(__int16 *)v4 + yypgoto[v188]);
            if (v189 <= 0x14F && yycheck[v189] == *(_WORD *)v4) {
              int v20 = yytable[v189];
            }
            else {
              int v20 = yydefgoto[v188];
            }
LABEL_250:
            v4 += 2;
            int v1 = v20;
            continue;
          }
          goto LABEL_58;
        }
        LOWORD(v29) = (_WORD)v228;
        if (v60 == v62) {
          goto LABEL_67;
        }
        v205 = "Array Colums are not same!";
LABEL_282:
        v206 = NSString;
LABEL_283:
        v207 = (NSString *)[v206 stringWithUTF8String:v205];
        v229->mErrMsg = v207;
        uint64_t v192 = 1;
        v190 = v241;
        uint64_t v5 = v220;
LABEL_302:
        if (v232[0] != -2
          && v232[0]
          && (v232[1] - 51) <= 0x25
          && ((1 << (LOBYTE(v232[1]) - 51)) & 0x3D2059F6CFLL) != 0)
        {
        }
LABEL_307:
        v212 = (__int16 *)&v4[-2 * v25];
        if (v212 != v5)
        {
          v213 = (id *)&v2[-2 * v25];
          do
          {
            unsigned int v214 = yystos[*v212] - 51;
            BOOL v201 = v214 > 0x25;
            uint64_t v215 = (1 << v214) & 0x3D2059F6CFLL;
            if (!v201 && v215 != 0) {

            }
            v213 -= 5;
            --v212;
          }
          while (v212 != v5);
        }
        if (v5 != (__int16 *)v240) {
          free(v5);
        }
        if (v190 != v241) {
          free(v190);
        }
        return v192;
      case 0x69u:
        v176 = *(void **)&v2[-6].type;
        id v177 = *(id *)&v2->type;
        int v230 = v30;
        int v178 = v32;
        [v176 addObject:v177];
        goto LABEL_214;
      case 0x6Bu:
        v179 = *(void **)&v2[-6].type;
        id v180 = *(id *)&v2->type;
        int v230 = v30;
        int v178 = v32;
        [v179 copyTokenAtIndex:0 fromFormula:v180];
LABEL_214:

        int v32 = v178;
        LOWORD(v30) = v230;
        uint64_t v27 = *(void *)&v2[-6].type;
        goto LABEL_246;
      case 0x6Du:
      case 0x6Fu:
        double v43 = *(double *)&v2->type;
        goto LABEL_218;
      case 0x6Eu:
        double v181 = *(double *)&v2->type;
        goto LABEL_217;
      case 0x70u:
      case 0x72u:
        double v43 = (double)*(unint64_t *)&v2->type;
        goto LABEL_218;
      case 0x71u:
        double v181 = (double)*(unint64_t *)&v2->type;
LABEL_217:
        double v43 = -v181;
LABEL_218:
        int v230 = v30;
        int v41 = v32;
        id v42 = numberTokens(v229, v43);
        goto LABEL_221;
      case 0x75u:
        v81 = *(NSString **)&v2->type;
LABEL_220:
        int v230 = v30;
        int v41 = v32;
        id v42 = strTokens(v229, v81);
LABEL_221:
        int v32 = v41;
        LOWORD(v30) = v230;
        goto LABEL_222;
      default:
        goto LABEL_246;
    }
  }
}

uint64_t EFLexer::yylex(EFLexer *this)
{
  if (!*((_DWORD *)this + 100))
  {
    *((_DWORD *)this + 100) = 1;
    if (!*((_DWORD *)this + 101)) {
      *((_DWORD *)this + 101) = 1;
    }
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 6) - 24) + 48);
    if ((v2->__rdstate_ & 5) != 0)
    {
      v2->__rdbuf_ = *(void **)(MEMORY[0x263F8C0E8] + *(void *)(*MEMORY[0x263F8C0E8] - 24) + 40);
      std::ios_base::clear(v2, 0);
    }
    unint64_t v3 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 27) - 24) + 216);
    if ((v3->__rdstate_ & 5) != 0)
    {
      v3->__rdbuf_ = *(void **)(MEMORY[0x263F8C100] + *(void *)(*MEMORY[0x263F8C100] - 24) + 40);
      std::ios_base::clear(v3, 0);
    }
    uint64_t v4 = *((void *)this + 54);
    if (!v4 || !*(void *)(v4 + 8 * *((void *)this + 52)))
    {
      double v5 = yyFlexLexer::yyensure_buffer_stack(this);
      *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52)) = (*(uint64_t (**)(EFLexer *, char *, uint64_t, double))(*(void *)this + 32))(this, (char *)this + 48, 0x4000, v5);
    }
    yyFlexLexer::yy_load_buffer_state(this);
  }
  uint64_t v6 = (void *)((char *)this + 392);
  uint64_t v7 = (char *)this + 448;
LABEL_13:
  int v8 = (unsigned __int8 *)*((void *)this + 49);
  *int v8 = *((unsigned char *)this + 376);
  int v9 = *((_DWORD *)this + 101);
  uint64_t v10 = v8;
  do
  {
LABEL_14:
    uint64_t v11 = yy_ec[*v10];
    if (yy_accept[v9])
    {
      *((_DWORD *)this + 110) = v9;
      *((void *)this + 56) = v10;
    }
    uint64_t v12 = v9;
    uint64_t v13 = yy_base[v9] + v11;
    if (v9 != (__int16)yy_chk[v13])
    {
      do
      {
        uint64_t v12 = yy_def[v12];
        if (v12 >= 673) {
          uint64_t v11 = *((unsigned __int8 *)&yy_meta + v11);
        }
        uint64_t v13 = yy_base[v12] + v11;
      }
      while (yy_chk[v13] != (unsigned __int16)v12);
    }
    int v9 = yy_nxt[v13];
    ++v10;
  }
  while (v9 != 672);
  int v14 = *((_DWORD *)this + 110);
  unsigned int v15 = (unsigned char **)v7;
  while (2)
  {
    uint64_t v16 = *v15;
    int v17 = (__int16)yy_accept[v14];
    *((void *)this + 1) = v8;
    *((void *)this + 2) = v16 - v8;
    *((unsigned char *)this + 376) = *v16;
    *uint64_t v16 = 0;
    *((void *)this + 49) = v16;
LABEL_23:
    switch(v17)
    {
      case 0:
        *uint64_t v16 = *((unsigned char *)this + 376);
        int v14 = *((_DWORD *)this + 110);
        unsigned int v15 = (unsigned char **)((char *)this + 448);
        continue;
      case 1:
        return 258;
      case 2:
        return 259;
      case 3:
        return 262;
      case 4:
        return 263;
      case 5:
        return 297;
      case 6:
        return 296;
      case 7:
        return 299;
      case 8:
        return 298;
      case 9:
        return 300;
      case 10:
        return 301;
      case 11:
        return 304;
      case 12:
        return 265;
      case 13:
        return 264;
      case 14:
        return 266;
      case 15:
        return 295;
      case 16:
        return 294;
      case 17:
        return 292;
      case 18:
        return 291;
      case 19:
        return 289;
      case 20:
        return 290;
      case 21:
        return 293;
      case 22:
        return 269;
      case 23:
        yyFlexLexer::yy_push_state(this, 1);
        return 260;
      case 24:
        yyFlexLexer::yy_pop_state(this);
        return 261;
      case 25:
        *((void *)this + 65) = [NSString stringWithUTF8String:*((void *)this + 1)];
        return 280;
      case 26:
        uint64_t v28 = (const char *)*((void *)this + 1);
        goto LABEL_95;
      case 27:
        unsigned int v29 = (const char *)*((void *)this + 1);
        unint64_t v30 = atol(v29);
        if (v30 >> 16)
        {
          uint64_t v28 = v29;
LABEL_95:
          *((double *)this + 65) = atof(v28);
          return 284;
        }
        else
        {
          *((void *)this + 65) = v30;
          return 282;
        }
      case 28:
        return 267;
      case 29:
        return 268;
      case 30:
        *((void *)this + 65) = [NSString stringWithUTF8String:*((void *)this + 1)];
        *((_DWORD *)this + 132) = 274;
        char v41 = 0;
        uint64_t result = isCellName(*((const char **)this + 1), (unsigned int *)this + 134, (BOOL *)this + 544, (unsigned int *)this + 135, (BOOL *)this + 545, *((EFormula **)this + 70));
        if (result) {
          goto LABEL_90;
        }
        uint64_t v31 = [*((id *)this + 70) resolveName:*((void *)this + 1)];
        uint64_t v42 = v31;
        if (v31 != -1)
        {
          *((void *)this + 67) = v31;
          *((_DWORD *)this + 132) = 275;
          uint64_t v32 = [*((id *)this + 70) resolveSheet:*((void *)this + 1) isCurrentSheet:&v41];
          if (v32 != -1)
          {
            *((void *)this + 68) = v32;
            uint64_t result = 279;
LABEL_90:
            *((_DWORD *)this + 132) = result;
            return result;
          }
          *((void *)this + 68) = -1;
          return 279;
        }
        uint64_t v36 = [*((id *)this + 70) resolveTable:*((void *)this + 1) sheetIndex:&v42];
        if (v36)
        {
          *((void *)this + 68) = v36;
          *((void *)this + 67) = v42;
          uint64_t result = 278;
          goto LABEL_90;
        }
        uint64_t v37 = [*((id *)this + 70) resolveSheet:*((void *)this + 1) isCurrentSheet:&v41];
        if (v37 != -1)
        {
          *((void *)this + 68) = v37;
          *((unsigned char *)this + 552) = v41;
          *((_DWORD *)this + 132) = 277;
          *((void *)this + 67) = -1;
          return 279;
        }
        return 274;
      case 31:
        goto LABEL_83;
      case 32:
        yyFlexLexer::yy_push_state(this, 2);
        long long v33 = NSString;
        uint64_t v34 = *((void *)this + 1) + 1;
        goto LABEL_84;
      case 33:
        yyFlexLexer::yy_pop_state(this);
LABEL_83:
        long long v33 = NSString;
        uint64_t v34 = *((void *)this + 1);
LABEL_84:
        *((void *)this + 65) = [v33 stringWithUTF8String:v34];
        uint64_t result = 274;
        goto LABEL_90;
      case 34:
        yyFlexLexer::yy_pop_state(this);
        uint64_t v35 = [NSString stringWithUTF8String:"virtual int EFLexer::yylex()"];
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v35, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Formula/EFLexer.lmm"], 363, 0, "table column name error: single quote ' as an escape symbol followed by white space \"\\x%x\"", **((char **)this + 1));
        +[OITSUAssertionHandler logBacktraceThrottled];
        return 270;
      case 35:
        yyFlexLexer::yy_push_state(this, 3);
        return 272;
      case 36:
        *((void *)this + 65) = atoi((const char *)(*((void *)this + 1) + 1));
        return 283;
      case 37:
        *((void *)this + 65) = [NSString stringWithUTF8String:*((void *)this + 1)];
        char v40 = 0;
        *((void *)this + 68) = [*((id *)this + 70) resolveSheet:*((void *)this + 1) isCurrentSheet:&v40];
        *((unsigned char *)this + 552) = v40;
        uint64_t result = 277;
        goto LABEL_90;
      case 38:
        yyFlexLexer::yy_pop_state(this);
        return 273;
      case 39:
        *((void *)this + 65) = (id)[[NSString alloc] initWithBytes:*((void *)this + 1) + 1 length:strlen(*((const char **)this + 1)) - 2 encoding:4];
        return 281;
      case 40:
        *((void *)this + 65) = [NSString stringWithUTF8String:*((void *)this + 1)];
        return 285;
      case 41:
        return 270;
      case 42:
        int v26 = v6;
        (*(void (**)(EFLexer *, void, void))(*(void *)this + 104))(this, *((void *)this + 1), *((void *)this + 2));
        goto LABEL_43;
      case 43:
        uint64_t v18 = *((void *)this + 1);
        *uint64_t v16 = *((unsigned char *)this + 376);
        uint64_t v19 = *((void *)this + 54);
        uint64_t v20 = *((void *)this + 52);
        uint64_t v21 = *(void *)(v19 + 8 * v20);
        if (*(_DWORD *)(v21 + 64))
        {
          uint64_t v22 = *((void *)this + 48);
        }
        else
        {
          uint64_t v22 = *(void *)(v21 + 32);
          *((void *)this + 48) = v22;
          *(void *)uint64_t v21 = *(void *)((char *)this + *(void *)(*((void *)this + 6) - 24) + 88);
          uint64_t v21 = *(void *)(v19 + 8 * v20);
          *(_DWORD *)(v21 + 64) = 1;
        }
        unsigned int v39 = v6;
        if (*v6 <= (unint64_t)(*(void *)(v21 + 8) + v22))
        {
          *((void *)this + 49) = *((void *)this + 1) + ~v18 + (int)v16;
          int previous_state = yyFlexLexer::yy_get_previous_state(this);
          int v9 = yyFlexLexer::yy_try_NUL_trans(this, previous_state);
          int v8 = (unsigned __int8 *)*((void *)this + 1);
          if (!v9)
          {
            int v14 = *((_DWORD *)this + 110);
            unsigned int v15 = (unsigned char **)((char *)this + 448);
            uint64_t v6 = v39;
            continue;
          }
          uint64_t v6 = v39;
          uint64_t v10 = (unsigned __int8 *)(*v39 + 1);
          void *v39 = v10;
          uint64_t v7 = (char *)this + 448;
          goto LABEL_14;
        }
        uint64_t v38 = v8;
        int next_buffer = yyFlexLexer::yy_get_next_buffer(this);
        if (next_buffer != 1)
        {
          if (!next_buffer)
          {
            *((void *)this + 49) = *((void *)this + 1) + ~v18 + (int)v16;
            int v9 = yyFlexLexer::yy_get_previous_state(this);
            uint64_t v10 = (unsigned __int8 *)*((void *)this + 49);
            int v8 = (unsigned __int8 *)*((void *)this + 1);
            uint64_t v6 = v39;
            uint64_t v7 = (char *)this + 448;
            goto LABEL_14;
          }
          uint64_t v6 = v39;
          uint64_t v7 = (char *)this + 448;
          if (next_buffer != 2) {
            goto LABEL_13;
          }
          *((void *)this + 49) = *(void *)(*(void *)(*((void *)this + 54) + 8 * *((void *)this + 52)) + 8)
                                 + *((void *)this + 48);
          int v14 = yyFlexLexer::yy_get_previous_state(this);
          uint64_t v6 = v39;
          int v8 = (unsigned __int8 *)*((void *)this + 1);
          unsigned int v15 = (unsigned char **)v39;
          continue;
        }
        *((_DWORD *)this + 102) = 0;
        if ((*(unsigned int (**)(EFLexer *))(*(void *)this + 88))(this))
        {
          *((void *)this + 49) = *((void *)this + 1);
          int v24 = *((_DWORD *)this + 101);
          if (v24 >= 1) {
            --v24;
          }
          int v17 = (v24 >> 1) + 44;
          uint64_t v6 = v39;
          int v8 = v38;
          goto LABEL_23;
        }
        uint64_t v6 = v39;
        uint64_t v7 = (char *)this + 448;
        if (!*((_DWORD *)this + 102))
        {
          (*(void (**)(EFLexer *, char *))(*(void *)this + 56))(this, (char *)this + 48);
          uint64_t v6 = v39;
        }
        goto LABEL_13;
      case 44:
      case 45:
      case 46:
      case 47:
        return 0;
      default:
        int v26 = v6;
        (*(void (**)(EFLexer *, const char *))(*(void *)this + 112))(this, "fatal flex scanner internal error--no action found");
LABEL_43:
        uint64_t v6 = v26;
        uint64_t v7 = (char *)this + 448;
        goto LABEL_13;
    }
  }
}

uint64_t yyFlexLexer::yy_get_next_buffer(yyFlexLexer *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
  unint64_t v3 = *(unsigned char **)(v2 + 8);
  uint64_t v4 = (char *)*((void *)this + 1);
  if (*((void *)this + 49) > (unint64_t)&v3[*((void *)this + 48) + 1])
  {
    (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "fatal flex scanner internal error--end of buffer missed");
    uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
  }
  uint64_t v5 = *((void *)this + 49);
  uint64_t v6 = *((void *)this + 1);
  if (!*(_DWORD *)(v2 + 60))
  {
    if (v5 - v6 == 1) {
      return 1;
    }
    else {
      return 2;
    }
  }
  int v7 = ~v6;
  int v8 = v7 + v5;
  if (v7 + (int)v5 >= 1)
  {
    int v9 = v7 + v5;
    do
    {
      char v10 = *v4++;
      *v3++ = v10;
      --v9;
    }
    while (v9);
    uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
  }
  if (*(_DWORD *)(v2 + 64) == 2)
  {
    *((void *)this + 48) = 0;
    *(void *)(v2 + 32) = 0;
LABEL_28:
    if (v8)
    {
      unint64_t v20 = 0;
      uint64_t v11 = 2;
      *(_DWORD *)(v2 + 64) = 2;
    }
    else
    {
      (*(void (**)(yyFlexLexer *, char *))(*(void *)this + 56))(this, (char *)this + 48);
      unint64_t v20 = *((void *)this + 48);
      uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
      uint64_t v11 = 1;
    }
    goto LABEL_31;
  }
  int v12 = ~v8;
  int v13 = *(_DWORD *)(v2 + 24);
  unsigned int v14 = v13 + ~v8;
  if (!v14)
  {
    unsigned int v15 = (char *)*((void *)this + 49);
    while (1)
    {
      uint64_t v16 = *(void **)(v2 + 8);
      if (!*(_DWORD *)(v2 + 40)) {
        break;
      }
      int v17 = 2 * v13;
      *(_DWORD *)(v2 + 24) = v17;
      uint64_t v18 = (char *)malloc_type_realloc(v16, v17 + 2, 0xA7BF72DAuLL);
      *(void *)(v2 + 8) = v18;
      if (!v18) {
        goto LABEL_19;
      }
LABEL_20:
      unsigned int v15 = &v18[(int)v15 - (int)v16];
      *((void *)this + 49) = v15;
      uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
      int v13 = *(_DWORD *)(v2 + 24);
      unsigned int v14 = v13 + v12;
      if (v13 + v12) {
        goto LABEL_21;
      }
    }
    *(void *)(v2 + 8) = 0;
LABEL_19:
    (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "fatal error - scanner input buffer overflow");
    uint64_t v18 = *(char **)(v2 + 8);
    goto LABEL_20;
  }
LABEL_21:
  if (v14 >= 0x2000) {
    uint64_t v19 = 0x2000;
  }
  else {
    uint64_t v19 = v14;
  }
  unint64_t v20 = (*(uint64_t (**)(yyFlexLexer *, void, uint64_t))(*(void *)this + 96))(this, *(void *)(v2 + 8) + v8, v19);
  *((void *)this + 48) = v20;
  if ((v20 & 0x80000000) != 0)
  {
    (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "input in flex scanner failed");
    unint64_t v20 = *((void *)this + 48);
  }
  uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
  *(void *)(v2 + 32) = v20;
  if (!v20) {
    goto LABEL_28;
  }
  uint64_t v11 = 0;
LABEL_31:
  unint64_t v21 = v20 + v8;
  if (v21 > *(int *)(v2 + 24))
  {
    size_t v22 = v21 + (v20 >> 1);
    long long v23 = malloc_type_realloc(*(void **)(v2 + 8), v22, 0xA7BF72DAuLL);
    uint64_t v24 = *((void *)this + 54);
    uint64_t v25 = *((void *)this + 52);
    *(void *)(*(void *)(v24 + 8 * v25) + 8) = v23;
    uint64_t v2 = *(void *)(v24 + 8 * v25);
    if (!*(void *)(v2 + 8))
    {
      (*(void (**)(yyFlexLexer *, const char *))(*(void *)this + 112))(this, "out of dynamic memory in yy_get_next_buffer()");
      uint64_t v2 = *(void *)(*((void *)this + 54) + 8 * *((void *)this + 52));
    }
    *(_DWORD *)(v2 + 24) = v22 - 2;
    unint64_t v21 = *((void *)this + 48) + v8;
  }
  *((void *)this + 48) = v21;
  *(unsigned char *)(*(void *)(v2 + 8) + v21) = 0;
  *(unsigned char *)(*((void *)this + 48)
           + *(void *)(*(void *)(*((void *)this + 54) + 8 * *((void *)this + 52)) + 8)
           + 1) = 0;
  *((void *)this + 1) = *(void *)(*(void *)(*((void *)this + 54) + 8 * *((void *)this + 52)) + 8);
  return v11;
}

uint64_t yyFlexLexer::LexerInput(yyFlexLexer *this, char *a2)
{
  uint64_t v2 = (void *)((char *)this + 48);
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 6) - 24) + 80) & 7) != 0) {
    return 0;
  }
  std::istream::read();
  if (*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32)) {
    return -1;
  }
  else {
    return *((void *)this + 7);
  }
}

uint64_t yyFlexLexer::yy_get_previous_state(yyFlexLexer *this)
{
  uint64_t v1 = *((unsigned int *)this + 101);
  uint64_t v2 = (unsigned char *)*((void *)this + 1);
  unint64_t v3 = (unsigned char *)*((void *)this + 49);
  if (v2 < v3)
  {
    do
    {
      if (*v2) {
        uint64_t v4 = yy_ec[*v2];
      }
      else {
        uint64_t v4 = 1u;
      }
      if (yy_accept[(int)v1])
      {
        *((_DWORD *)this + 110) = v1;
        *((void *)this + 56) = v2;
      }
      uint64_t v5 = (int)v1;
      uint64_t v6 = yy_base[(int)v1] + v4;
      if (v1 != (__int16)yy_chk[v6])
      {
        do
        {
          uint64_t v5 = yy_def[v5];
          if (v5 >= 673) {
            uint64_t v4 = *((unsigned __int8 *)&yy_meta + v4);
          }
          uint64_t v6 = yy_base[v5] + v4;
        }
        while (yy_chk[v6] != (unsigned __int16)v5);
      }
      uint64_t v1 = yy_nxt[v6];
      ++v2;
    }
    while (v2 != v3);
  }
  return v1;
}

id intTokens(EFormula *a1, unsigned int a2)
{
  id v3 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  id v4 = v3;
  if (HIWORD(a2)) {
    addNumberOperand(v3, (double)a2);
  }
  else {
    addIntOperand(v3, a2);
  }
  return v4;
}

uint64_t yyFlexLexer::yywrap(yyFlexLexer *this)
{
  return 1;
}

id operatorTokens(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a3)
  {
    if (!a4) {
      goto LABEL_9;
    }
  }
  else
  {
    id v7 = objc_alloc_init((Class)[a1 formulaClass]);
    if (!a4) {
      goto LABEL_9;
    }
  }
  int v8 = [a4 tokenCount];
  if (v8)
  {
    int v9 = v8;
    uint64_t v10 = 0;
    do
    {
      [a3 copyTokenAtIndex:v10 fromFormula:a4];
      uint64_t v10 = (v10 + 1);
    }
    while (v9 != v10);
  }

LABEL_9:
  [v7 addToken:a2 extendedDataLength:0];
  return v7;
}

void sub_238C49C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EFLexer::~EFLexer(EFLexer *this)
{
  ELexer::~ELexer(this);
  JUMPOUT(0x23EC997B0);
}

void ELexer::~ELexer(ELexer *this)
{
  *(void *)this = &unk_26EBDB260;
  uint64_t v2 = *((void *)this + 74);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 75);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 73);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  yyFlexLexer::~yyFlexLexer(this);
}

void yyFlexLexer::yy_delete_buffer(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 432);
    if (v3) {
      uint64_t v4 = *(void ***)(v3 + 8 * *(void *)(a1 + 416));
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4 == a2) {
      *(void *)(v3 + 8 * *(void *)(a1 + 416)) = 0;
    }
    if (*((_DWORD *)a2 + 10)) {
      free(a2[1]);
    }
    free(a2);
  }
}

void yyFlexLexer::~yyFlexLexer(yyFlexLexer *this)
{
  *(void *)this = &unk_26EBE4958;
  uint64_t v2 = *((void *)this + 57);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  free(*((void **)this + 5));
  uint64_t v3 = *((void *)this + 54);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8 * *((void *)this + 52));
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(yyFlexLexer *, uint64_t))(*(void *)this + 40))(this, v4);
  free(*((void **)this + 54));
  std::ostream::~ostream();
  std::istream::~istream();
}

{
  uint64_t vars8;

  yyFlexLexer::~yyFlexLexer(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238C49F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4A040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4A188(_Unwind_Exception *a1, CsString *a2)
{
  _Unwind_Resume(a1);
}

uint64_t XlFunctionIdForName(const unsigned __int16 *a1)
{
  ItemWithFunctionName = findItemWithFunctionName(a1);
  if (ItemWithFunctionName) {
    return (__int16)*ItemWithFunctionName;
  }
  else {
    return 255;
  }
}

const unsigned __int16 *findItemWithFunctionName(const unsigned __int16 *result)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = (unsigned __int16 *)result;
    uint64_t v2 = _ChWcslen(result);
    MEMORY[0x270FA5388](v2);
    uint64_t v4 = &v12[-((v3 + 19) & 0xFFFFFFFFFFFFFFF0)];
    bzero(v4, v5);
    uint64_t v6 = ChCHAR2ToWchar(v4, v1);
    if (wcslen(v6) <= 0x13)
    {
      if ((_XlSortedByName & 1) == 0)
      {
        memcpy(&XlFunctionTableByName, &XlFunctionTableById, 0x597CuLL);
        qsort(&XlFunctionTableByName, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareByName);
        _XlSortedByName = 1;
      }
      uint64_t v7 = _ChWcslen(v1);
      MEMORY[0x270FA5388](v7);
      int v9 = &v12[-((v8 + 19) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v9, v10);
      uint64_t v11 = ChCHAR2ToWchar(v9, v1);
      wcscpy(v14, v11);
      return (const unsigned __int16 *)bsearch(__key, &XlFunctionTableByName, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareByName);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _XlFunctionTableItemCompareByName(const __int32 *a1, const __int32 *a2)
{
  return wcscmp(a1 + 1, a2 + 1);
}

uint64_t XlArgumentCountForFunction(__int16 a1)
{
  __key[0] = a1;
  uint64_t v1 = bsearch(__key, &XlFunctionTableById, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareById);
  if (v1) {
    return (__int16)v1[42];
  }
  else {
    return -1;
  }
}

uint64_t _XlFunctionTableItemCompareById(__int16 *a1, __int16 *a2)
{
  return (*a1 - *a2);
}

void sub_238C4A5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptAnimColorBehaviorAtom::PptAnimColorBehaviorAtom(PptAnimColorBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8448;
  *(void *)(v2 + 32) = &unk_26EBE84F0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

uint64_t PptAnimColorBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimColorBehaviorAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = v5;
  *((_DWORD *)a2 + 13) = v6;
  *((_DWORD *)a2 + 14) = v7;
  *((_DWORD *)a2 + 15) = v8;
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 16) = v9;
  *((_DWORD *)a2 + 17) = v10;
  *((_DWORD *)a2 + 18) = v11;
  *((_DWORD *)a2 + 19) = v12;
  int v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v15 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v16 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 20) = v13;
  *((_DWORD *)a2 + 21) = v14;
  *((_DWORD *)a2 + 22) = v15;
  *((_DWORD *)a2 + 23) = v16;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 52)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimMotionBehaviorAtom::PptAnimMotionBehaviorAtom(PptAnimMotionBehaviorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8730;
  *(void *)(v2 + 32) = &unk_26EBE87D8;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptAnimMotionBehaviorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimMotionBehaviorAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((float *)a2 + 12) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 13) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 14) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 15) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 16) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((float *)a2 + 16) = (*(float (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  *((_DWORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 32)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimColorBehaviorAtom::~PptAnimColorBehaviorAtom(PptAnimColorBehaviorAtom *this)
{
}

void PptAnimMotionBehaviorAtom::~PptAnimMotionBehaviorAtom(PptAnimMotionBehaviorAtom *this)
{
}

WrdShading *WrdCharacterProperties::getShadingReference(WrdCharacterProperties *this)
{
  *(void *)&this->var2 |= 0x400000uLL;
  return this->var6;
}

uint64_t EshTablePropVal<float>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<float>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  int v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)int v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<float,ChAllocator<float>>::resize(a2 + 8, *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      int v6 = (float *)EshBasicTablePropVal<int>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement(a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238C4B1A4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

void EshPropValParserVisitor::parseElement(EshPropValParserVisitor *this, float *a2)
{
  if (*((_WORD *)this + 10) != 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  uint64_t v3 = (EshFixedPointUtil *)(*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *a2 = EshFixedPointUtil::toFloat(v3);
}

uint64_t EshTablePropVal<EshHandle>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshHandle>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  int v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)int v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshHandle,ChAllocator<EshHandle>>::resize((uint64_t *)(a2 + 8), *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = EshBasicTablePropVal<EshHandle>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement((uint64_t)a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238C4B35C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshHandle>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (-252645135 * ((unint64_t)(*(void *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return v2 + 68 * a2;
}

uint64_t EshPropValParserVisitor::parseValuePair(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  if (a4)
  {
    int v9 = (uint64_t *)(a2 + 16 * a3 + 4);
    int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
    uint64_t v11 = 1;
    uint64_t v12 = 4;
    LODWORD(v13) = v10 - 256;
    uint64_t v14 = 2;
    if (v10 <= 0xFF)
    {
      LODWORD(v13) = v10 - 3;
      uint64_t v14 = 3;
    }
    if (v10 >= 3) {
      uint64_t v12 = v14;
    }
    else {
      LODWORD(v13) = v10;
    }
    if (a5) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v10;
    }
    if (a5) {
      uint64_t v11 = v12;
    }
    uint64_t *v9 = v11 | (v13 << 32);
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
    uint64_t v16 = 1;
    uint64_t v17 = 4;
    LODWORD(v18) = result - 256;
    uint64_t v19 = 2;
    if (result <= 0xFF)
    {
      LODWORD(v18) = result - 3;
      uint64_t v19 = 3;
    }
    if ((int)result >= 3) {
      uint64_t v17 = v19;
    }
    else {
      LODWORD(v18) = result;
    }
    if (a6) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = result;
    }
    if (a6) {
      uint64_t v16 = v17;
    }
    v9[1] = v16 | (v18 << 32);
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
    unint64_t v20 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 104);
    return v20();
  }
  return result;
}

uint64_t EshTablePropVal<EshFormula>::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
  }
  else {
    return 1;
  }
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshFormula>>(EshPropValParserVisitor *a1, uint64_t a2)
{
  int v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)int v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  EshPropValParserVisitor::parseTableHeader(a1, v4);
  *((_WORD *)a1 + 10) = *((_WORD *)v4 + 2);
  std::vector<EshFormula,ChAllocator<EshFormula>>::resize((uint64_t *)(a2 + 8), *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = (_DWORD *)EshBasicTablePropVal<EshFormula>::operator[](a2, v5);
      EshPropValParserVisitor::parseElement((uint64_t)a1, v6);
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238C4B86C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, _DWORD *a2)
{
  if (*(_WORD *)(a1 + 20) != 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  *a2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  uint64_t v4 = (uint64_t)(a2 + 1);
  unsigned int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t result = EshPropValParserVisitor::parseFormulaArgument(a1, v4, ((v5 >> i) & 0x20) == 0);
    v4 += 8;
  }
  return result;
}

uint64_t EshPropValParserVisitor::parseFormulaArgument(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (!a3)
  {
    if ((result & 0xFF80) == 0x400)
    {
      *(_DWORD *)a2 = 3;
      __int16 v7 = result - 1024;
    }
    else
    {
      __int16 v7 = result - 327;
      if ((result - 327) > 9)
      {
        int v6 = 4;
        goto LABEL_9;
      }
      *(_DWORD *)a2 = 2;
    }
    *(_WORD *)(a2 + 4) = v7;
    return result;
  }
  int v6 = 1;
LABEL_9:
  *(_DWORD *)a2 = v6;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

void sub_238C4BB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *EshGeometryProperties::generateImpliedPath(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = a3 + 8;
  if (a2 == 3)
  {
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 4u);
    *(void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
    int v9 = (void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
    uint64_t v10 = ((a1 - 2) / 6) | 0x100000000;
    goto LABEL_15;
  }
  if (a2 != 2)
  {
    if (!a2)
    {
      std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 3u);
      *(void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
      if (a1 >= 2) {
        unsigned int v6 = a1 - 2;
      }
      else {
        unsigned int v6 = a1 - 1;
      }
      __int16 v7 = (void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
      uint64_t v8 = (unsigned __int16)(v6 >> 1);
      goto LABEL_10;
    }
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 4u);
    *(void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
    if (a1 >= 2) {
      unsigned int v12 = a1 - 2;
    }
    else {
      unsigned int v12 = a1 - 1;
    }
    int v9 = (void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
    uint64_t v10 = (unsigned __int16)(v12 >> 1);
LABEL_15:
    void *v9 = v10;
    *(void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 2u) = 0x300000001;
    unsigned int v11 = 3;
    goto LABEL_16;
  }
  std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(v5, 3u);
  *(void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 0) = 0x200000001;
  __int16 v7 = (void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, 1u);
  uint64_t v8 = ((a1 - 2) / 6) | 0x100000000;
LABEL_10:
  *__int16 v7 = v8;
  unsigned int v11 = 2;
LABEL_16:
  uint64_t result = (void *)EshBasicTablePropVal<EshComputedValue>::operator[](a3, v11);
  *uint64_t result = 0x400000001;
  return result;
}

void EshTablePropVal<float>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7928;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshTablePropVal<EshHandle>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD79C8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterScale(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(void *)&this->var2 |= 0x100000000000uLL;
  this->var60 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setStrikethrough(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x80uLL;
  *(_DWORD *)(result + 180) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setOutline(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x10uLL;
  *(_DWORD *)(result + 176) = a2;
  return result;
}

CsString *WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureFilename *a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 120) + 64))(*(void *)(*((void *)this + 4) + 120));
  uint64_t v5 = (CsString *)((char *)a2 + 8);
  *((_DWORD *)a2 + 6) = 0;
  bzero(*((void **)a2 + 2), 2 * *((unsigned int *)a2 + 7));
  int v6 = v4 + 1;
  uint64_t result = CsString::reserve(v5, v4 + 1);
  if (v4)
  {
    uint64_t v8 = *(void *)(*((void *)this + 4) + 120);
    do
    {
      unsigned __int16 v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
      uint64_t result = CsString::append(v5, v9);
      --v4;
    }
    while (v4);
  }
  *((_DWORD *)this + 153) += v6;
  *((_DWORD *)this + 154) -= v6;
  return result;
}

void sub_238C4C10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4C270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartLinePlot::XlChartLinePlot(XlChartLinePlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartLine::XlChartLine((XlChartLine *)(v2 + 144));
  *(void *)this = &unk_26EBDC828;
  *((void *)this + 18) = &unk_26EBDC850;
}

void sub_238C4C38C(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartLine::XlChartLine(XlChartLine *this)
{
  XlRecord::XlRecord(this, 4120, 2, 0);
  *(void *)uint64_t v1 = &unk_26EBDBDA8;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartLine *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C4C4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartLinePlot::getChartType(XlChartLinePlot *this)
{
  return 1;
}

void sub_238C4C60C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238C4C790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4C884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartLinePlot::~XlChartLinePlot(XlChartLinePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_238C4C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setNoLineNumbering(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x10000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFBF | ((a2 & 1) << 6);
  return this;
}

void sub_238C4CAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TSUFlushableObjectInfo::compareFlushingOrder(TSUFlushableObjectInfo *this, const TSUFlushableObjectInfo *a2)
{
  if (this == a2) {
    return 0;
  }
  int var3 = this->var3;
  int v3 = a2->var3;
  if (var3 > v3) {
    return -1;
  }
  if (var3 < v3) {
    return 1;
  }
  int var1 = this->var1;
  float v5 = 1.0;
  if (var1 == 1) {
    float v6 = 1.5;
  }
  else {
    float v6 = 1.0;
  }
  if (!var1) {
    float v6 = 2.0;
  }
  if (!this->var2) {
    float v6 = v6 * 1.5;
  }
  int v7 = a2->var1;
  if (v7 == 1) {
    float v5 = 1.5;
  }
  if (!v7) {
    float v5 = 2.0;
  }
  if (!a2->var2) {
    float v5 = v5 * 1.5;
  }
  float v8 = v6 * (float)this->var4[1];
  float v9 = v5 * (float)a2->var4[1];
  if (v8 < v9) {
    return -1;
  }
  if (v8 > v9) {
    return 1;
  }
  float v11 = v6 * (float)this->var4[0];
  float v12 = v5 * (float)a2->var4[0];
  if (v11 >= v12) {
    return v11 > v12;
  }
  else {
    return -1;
  }
}

uint64_t WrdStyleSheet::getPredefinedStyleInfoReference(uint64_t a1, unsigned int a2)
{
  return a1 + 2 * a2 + 48;
}

void sub_238C4CCE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4D1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4D2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4D360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4D3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4D500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4D594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4D7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4DD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4DE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4DEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4DF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4E0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4E230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4E38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4E508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4E68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4E750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4E854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4EA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4EC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4EF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4F590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4F93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C4FAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C4FE78(_Unwind_Exception *a1)
{
  int v7 = v5;

  _Unwind_Resume(a1);
}

void sub_238C4FF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t setBoolValueForEDCell(uint64_t result, char a2)
{
  if (result)
  {
    if (*(_DWORD *)result >> 29 == 1)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0) {
        *(unsigned char *)(result + 12) = a2;
      }
      else {
        *(unsigned char *)(result + 8) = a2;
      }
    }
    else
    {
      uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "void setBoolValueForEDCell(EDCellHeader *, BOOL)");
      int v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:193 isFatal:0 description:"Invalid Cell Type!"];

      return +[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
  return result;
}

void sub_238C50080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setBiDi(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x100000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFEFFFF | ((a2 & 1) << 16);
  return this;
}

void sub_238C501B8(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t PptTextDefaultStyle10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultStyle10Atom *a2)
{
  return 1;
}

void PptTextDefaultStyle10Atom::~PptTextDefaultStyle10Atom(PptTextDefaultStyle10Atom *this)
{
  *(void *)this = &unk_26EBF05F0;
  *((void *)this + 4) = &unk_26EBF0698;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF05F0;
  *((void *)this + 4) = &unk_26EBF0698;
}

void sub_238C5053C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdBorder *WrdCharacterProperties::getBorderReference(WrdCharacterProperties *this)
{
  *(void *)&this->var2 |= 0x40000000000000uLL;
  return this->var7;
}

WrdParagraphProperties *WrdParagraphProperties::setLocked(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x80000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFEFF | ((a2 & 1) << 8);
  return this;
}

void sub_238C506D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptFontEmbedDataAtom::PptFontEmbedDataAtom(PptFontEmbedDataAtom *this, const EshHeader *a2)
{
  PptBinaryDataAtom::PptBinaryDataAtom(this, a2);
  void *v2 = &unk_26EBEB4E8;
  v2[4] = &unk_26EBEB5A0;
}

uint64_t PptFontEmbedDataAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(uint64_t a1, EshRecord *a2)
{
  uint64_t v3 = a1;
  (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*(void *)(v3 + 24));
  LODWORD(v3) = (*(uint64_t (**)(void))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8));
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(EshRecord *, void))(*(void *)a2 + 160))(a2, (v3 - Offset - 8));
  return 1;
}

void PptFontEmbedDataAtom::~PptFontEmbedDataAtom(PptFontEmbedDataAtom *this)
{
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdCharacterProperties::setRightToLeft(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000000000uLL;
  *(_DWORD *)(result + 228) = a2;
  return result;
}

uint64_t WrdParagraphProperties::resetStylableProperties(WrdParagraphProperties *this)
{
  __int16 v2 = *((_WORD *)this + 12);
  uint64_t v3 = *((void *)this + 2);
  int v4 = (unsigned int *)((char *)this + 294);
  unsigned int v5 = *(_DWORD *)((char *)this + 294);
  int v6 = *((_DWORD *)this + 61);
  __int16 v7 = *((_WORD *)this + 146);
  uint64_t result = (*(uint64_t (**)(WrdParagraphProperties *))(*(void *)this + 16))(this);
  if ((v3 & 2) != 0)
  {
    *((void *)this + 2) |= 2uLL;
    *int v4 = *v4 & 0xFFFFFFFE | v5 & 1;
    if ((v3 & 4) == 0)
    {
LABEL_3:
      if ((v3 & 0x1000000000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_3;
  }
  *((void *)this + 2) |= 4uLL;
  *int v4 = *v4 & 0xFFFFFFFD | (2 * ((v5 >> 1) & 1));
  if ((v3 & 0x1000000000000) == 0)
  {
LABEL_4:
    if ((v3 & 0x2000000000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  *((void *)this + 2) |= 0x1000000000000uLL;
  *((_DWORD *)this + 61) = v6;
  if ((v3 & 0x2000000000000) == 0)
  {
LABEL_5:
    if ((v3 & 0x4000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  *((void *)this + 2) |= 0x2000000000000uLL;
  *int v4 = *v4 & 0xFFEFFFFF | (((v5 >> 20) & 1) << 20);
  if ((v3 & 0x4000000000000) == 0)
  {
LABEL_6:
    if ((v3 & 0x8000000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  *((void *)this + 2) |= 0x4000000000000uLL;
  *int v4 = *v4 & 0xFFDFFFFF | (((v5 >> 21) & 1) << 21);
  if ((v3 & 0x8000000000000) == 0)
  {
LABEL_7:
    if ((v2 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  *((void *)this + 2) |= 0x8000000000000uLL;
  *int v4 = *v4 & 0xFFBFFFFF | (((v5 >> 22) & 1) << 22);
  if ((v2 & 0x200) == 0)
  {
LABEL_8:
    if ((v2 & 0x400) == 0) {
      return result;
    }
    goto LABEL_9;
  }
LABEL_17:
  *((_WORD *)this + 12) |= 0x200u;
  *int v4 = *v4 & 0xFBFFFFFF | (((v5 >> 26) & 1) << 26);
  if ((v2 & 0x400) == 0) {
    return result;
  }
LABEL_9:
  *((_WORD *)this + 12) |= 0x400u;
  *((_WORD *)this + 146) = v7;
  return result;
}

uint64_t WrdChpParser::applyCMajoritySPRM(WrdChpParser *this, WrdCharacterProperties *a2, WrdCharacterProperties *a3, unsigned __int16 *a4, const unsigned __int8 *a5, unsigned int a6)
{
  uint64_t v12 = (*((uint64_t (**)(WrdCharacterProperties *))a2->var0 + 3))(a2);
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  uint64_t v13 = operator new(0x10uLL);
  void *v13 = 0;
  v13[1] = 0;
  if ((unsigned __int16)((_WORD)a5 - (_WORD)a4) < a6) {
    a6 = (unsigned __int16)((_WORD)a5 - (_WORD)a4);
  }
  if (a6)
  {
    unsigned __int16 v14 = 0;
    do
    {
      unsigned __int16 v37 = 0;
      WrdPropertyParser::parseSPRM(a4, (unint64_t)a5, &v37, (uint64_t)v13);
      int v15 = 0;
      unsigned __int16 v16 = v37;
      uint64_t v17 = (const unsigned __int8 *)a4 + v37;
      unsigned __int16 v36 = 0;
      if (*(_DWORD *)v13 == 2)
      {
        WrdChpParser::applySprm(this, v12, 0, v13, v17, a5, &v36);
        int v15 = v36;
      }
      a4 = (unsigned __int16 *)&v17[v15];
      v14 += v15 + v16;
    }
    while (a6 > v14);
  }
  if (a3)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = (WrdCharacterProperties *)(*((uint64_t (**)(WrdCharacterProperties *))a2->var0 + 3))(a2);
    (*((void (**)(WrdCharacterProperties *))v18->var0 + 2))(v18);
    a3 = v18;
  }
  int v19 = *(_DWORD *)(v12 + 168);
  if (v19 == a3->var23)
  {
    WrdCharacterProperties::clearBold(a2);
    WrdCharacterProperties::clearBold(a3);
  }
  else if ((*(void *)(v12 + 16) & 2) != 0)
  {
    WrdCharacterProperties::setBold((uint64_t)a2, v19);
    int v20 = WrdCharacterProperties::resolveToAbsolute(a3->var23, *(_DWORD *)(v12 + 168));
    WrdCharacterProperties::setBold((uint64_t)a3, v20);
  }
  int v21 = *(_DWORD *)(v12 + 172);
  if (v21 == a3->var24)
  {
    WrdCharacterProperties::clearItalic(a2);
    WrdCharacterProperties::clearItalic(a3);
  }
  else if ((*(void *)(v12 + 16) & 4) != 0)
  {
    WrdCharacterProperties::setItalic((uint64_t)a2, v21);
    int v22 = WrdCharacterProperties::resolveToAbsolute(a3->var24, *(_DWORD *)(v12 + 172));
    WrdCharacterProperties::setItalic((uint64_t)a3, v22);
  }
  int v23 = *(_DWORD *)(v12 + 180);
  if (v23 == a3->var26)
  {
    WrdCharacterProperties::clearStrikethrough(a2);
    WrdCharacterProperties::clearStrikethrough(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x80) != 0)
  {
    WrdCharacterProperties::setStrikethrough((uint64_t)a2, v23);
    int v24 = WrdCharacterProperties::resolveToAbsolute(a3->var26, *(_DWORD *)(v12 + 180));
    WrdCharacterProperties::setStrikethrough((uint64_t)a3, v24);
  }
  int v25 = *(_DWORD *)(v12 + 176);
  if (v25 == a3->var25)
  {
    WrdCharacterProperties::clearOutline(a2);
    WrdCharacterProperties::clearOutline(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x10) != 0)
  {
    WrdCharacterProperties::setOutline((uint64_t)a2, v25);
    int v26 = WrdCharacterProperties::resolveToAbsolute(a3->var25, *(_DWORD *)(v12 + 176));
    WrdCharacterProperties::setOutline((uint64_t)a3, v26);
  }
  int v27 = *(_DWORD *)(v12 + 196);
  if (v27 == a3->var30)
  {
    WrdCharacterProperties::clearShadow(a2);
    WrdCharacterProperties::clearShadow(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x100) != 0)
  {
    WrdCharacterProperties::setShadow((uint64_t)a2, v27);
    int v28 = WrdCharacterProperties::resolveToAbsolute(a3->var30, *(_DWORD *)(v12 + 196));
    WrdCharacterProperties::setShadow((uint64_t)a3, v28);
  }
  int v29 = *(_DWORD *)(v12 + 184);
  if (v29 == a3->var27)
  {
    WrdCharacterProperties::clearSmallCaps(a2);
    WrdCharacterProperties::clearSmallCaps(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x10000000) != 0)
  {
    WrdCharacterProperties::setSmallCaps((uint64_t)a2, v29);
    int v30 = WrdCharacterProperties::resolveToAbsolute(a3->var27, *(_DWORD *)(v12 + 184));
    WrdCharacterProperties::setSmallCaps((uint64_t)a3, v30);
  }
  int v31 = *(_DWORD *)(v12 + 188);
  if (v31 == a3->var28)
  {
    WrdCharacterProperties::clearCaps(a2);
    WrdCharacterProperties::clearCaps(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x20000000) != 0)
  {
    WrdCharacterProperties::setCaps((uint64_t)a2, v31);
    int v32 = WrdCharacterProperties::resolveToAbsolute(a3->var28, *(_DWORD *)(v12 + 188));
    WrdCharacterProperties::setCaps((uint64_t)a3, v32);
  }
  if (*(unsigned __int16 *)(v12 + 248) == a3->var43)
  {
    WrdCharacterProperties::clearFontIndexForASCIIText(a2);
    WrdCharacterProperties::clearFontIndexForASCIIText(a3);
  }
  if (*(unsigned __int16 *)(v12 + 252) == a3->var45)
  {
    WrdCharacterProperties::clearFontIndexForOtherText(a2);
    WrdCharacterProperties::clearFontIndexForOtherText(a3);
  }
  if (*(unsigned __int16 *)(v12 + 312) == a3->var62)
  {
    WrdCharacterProperties::clearFontSize(a2);
    WrdCharacterProperties::clearFontSize(a3);
  }
  int v33 = *(_DWORD *)(v12 + 140);
  if (v33 == a3->var16)
  {
    WrdCharacterProperties::clearUnderline(a2);
    WrdCharacterProperties::clearUnderline(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x100000) != 0)
  {
    WrdCharacterProperties::setUnderline((uint64_t)a2, v33);
    WrdCharacterProperties::setUnderline((uint64_t)a3, *(_DWORD *)(v12 + 140));
  }
  if (*(unsigned __int16 *)(v12 + 30) == *((unsigned __int16 *)&a3->var2 + 7)
    && *(unsigned __int16 *)(v12 + 32) == a3->var3.var0
    && *(unsigned __int16 *)(v12 + 34) == a3->var3.var1
    && *(unsigned __int16 *)(v12 + 36) == a3->var3.var2)
  {
    WrdCharacterProperties::clearColor(a2);
    WrdCharacterProperties::clearColor(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x10000) != 0)
  {
    *(void *)WrdCharacterProperties::getColorReference(a2) = *(void *)(v12 + 30);
    *(void *)WrdCharacterProperties::getColorReference(a3) = *(void *)(v12 + 30);
  }
  int v34 = *(_DWORD *)(v12 + 128);
  if (v34 == a3->var13)
  {
    WrdCharacterProperties::clearColor97(a2);
    WrdCharacterProperties::clearColor97(a3);
  }
  else if ((*(void *)(v12 + 16) & 0x20000) != 0)
  {
    WrdCharacterProperties::setColor97((uint64_t)a2, v34);
    WrdCharacterProperties::setColor97((uint64_t)a3, *(_DWORD *)(v12 + 128));
  }
  if (v18) {
    (*((void (**)(WrdCharacterProperties *))v18->var0 + 1))(v18);
  }
  if (v13) {
    MEMORY[0x23EC997B0](v13, 0x1000C4099076E91);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

void sub_238C510C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_238C5115C()
{
}

void sub_238C5116C()
{
}

WrdCharacterProperties *WrdCharacterProperties::clearBold(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~2uLL;
  this->var23 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearItalic(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~4uLL;
  this->var24 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearStrikethrough(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x80uLL;
  this->var26 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearOutline(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x10uLL;
  this->var25 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearShadow(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x100uLL;
  this->var30 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearSmallCaps(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x10000000uLL;
  this->var27 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearCaps(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x20000000uLL;
  this->var28 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearFontSize(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x1000uLL;
  this->var62 = 20;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearUnderline(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x100000uLL;
  this->var16 = 0;
  return this;
}

uint64_t WrdCharacterProperties::clearColor(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x10000uLL;
  return WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var2 + 14);
}

WrdCharacterProperties *WrdCharacterProperties::clearColor97(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x20000uLL;
  this->var13 = 0;
  return this;
}

uint64_t WrdPropertyParser::parseSPRM(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 10) = result & 0x1FF;
  *(unsigned char *)(a2 + 12) = (result & 0x200) != 0;
  *(_DWORD *)a2 = (result >> 10) & 7;
  *(_DWORD *)(a2 + 4) = result >> 13;
  *(unsigned char *)(a2 + 13) = 0;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableTopCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x80u;
  *((_WORD *)this + 181) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableTopCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000000uLL;
  *(_DWORD *)(result + 180) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableLeftCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x100u;
  *((_WORD *)this + 182) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableBottomCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x200u;
  *((_WORD *)this + 183) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableRightCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x400u;
  *((_WORD *)this + 184) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableRightCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40000000uLL;
  *(_DWORD *)(result + 192) = a2;
  return result;
}

uint64_t WrdTableProperties::setVerticalPosition(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000000000uLL;
  *(_DWORD *)(result + 228) = a2;
  return result;
}

uint64_t WrdTableProperties::setHorizontalPosition(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x10000000000uLL;
  *(_DWORD *)(result + 232) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setAbsoluteVerticalPosition(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x400000000000uLL;
  *((_DWORD *)this + 77) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setLeftDistanceFromText(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x800000000000uLL;
  *((_DWORD *)this + 78) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setRightDistanceFromText(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x2000000000000uLL;
  *((_DWORD *)this + 80) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setPageSetupLinePitch(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x400000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFBFFFF | ((a2 & 1) << 18);
  return this;
}

void PptAnimChartBuildAtom::PptAnimChartBuildAtom(PptAnimChartBuildAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8160;
  *(void *)(v2 + 32) = &unk_26EBE8208;
}

uint64_t PptAnimChartBuildAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimChartBuildAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 52) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  (*(void (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimChartBuildAtom::~PptAnimChartBuildAtom(PptAnimChartBuildAtom *this)
{
}

char *SsrwOOStream::readCsData(SsrwOOStream *this, CsData *a2, unsigned int a3)
{
  unsigned int v8 = a3;
  uint64_t result = CsData::setLength(a2, a3);
  if (a3)
  {
    uint64_t result = (char *)(*((uint64_t (**)(SsrwOOStream *, char *, unsigned int *))this->var0 + 7))(this, a2->var1, &v8);
    if (v8 != a2->var0)
    {
      CsData::setLength(a2, 0);
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 19;
    }
  }
  return result;
}

char *CsData::setLength(CsData *this, unsigned int a2)
{
  int var1 = this->var1;
  if (var1) {
    MEMORY[0x23EC99790](var1, 0x1000C8077774924);
  }
  this->int var1 = 0;
  this->unsigned int var0 = a2;
  if (a2) {
    uint64_t result = (char *)operator new[](a2);
  }
  else {
    uint64_t result = 0;
  }
  this->int var1 = result;
  return result;
}

uint64_t **EshOpt::takeDataProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  int v6 = *(uint64_t **)(a1 + 40);
  if (!v6) {
    goto LABEL_9;
  }
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_5:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  unsigned int v10 = a2;
  float v11 = &v10;
  unsigned int v8 = (CsData *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
  if (v8)
  {
    CsData::~CsData(v8);
    MEMORY[0x23EC997B0]();
  }
LABEL_9:
  unsigned int v10 = a2;
  float v11 = &v10;
  uint64_t result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = a3;
  result[6] = 0;
  return result;
}

CsData **ChAutoPtr<CsData>::~ChAutoPtr(CsData **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CsData::~CsData(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

uint64_t *EshShapeImageData::getQuicktimeData(EshShapeImageData *this)
{
  return *EshOpt::getProperty(*((void *)this + 2) + 64, 0x112u);
}

void CsData::~CsData(CsData *this)
{
  int var1 = this->var1;
  if (var1) {
    MEMORY[0x23EC99790](var1, 0x1000C8077774924);
  }
  this->int var1 = 0;
}

uint64_t EshPath::getPathType(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x144u);
}

void sub_238C51EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C52058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartPicF::XlChartPicF(XlChartPicF *this)
{
  XlRecord::XlRecord((XlRecord *)this, 4156, 14, 0);
  *(void *)uint64_t v1 = &unk_26EBDBEA8;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v1 + 32) = 1;
  *(unsigned char *)(v1 + 36) = 0;
}

void XlChartBinaryReader::readPictureFormat(XlChartBinaryReader *this, XlChartPicF *a2)
{
  int v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
  while (1)
  {
    int var1 = (unsigned __int16)v4->var1;
    if (var1 != 60 && var1 != 4198) {
      break;
    }
    XlParserVisitor::seekNextRecord(*((void *)this + 167));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
  }
  if (var1 == 4147)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
    (*(void (**)(void, XlChartPicF *))(**((void **)this + 167) + 2096))(*((void *)this + 167), a2);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
    int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 16))(v7, -RecordDataOffset, 1);
  }
  JUMPOUT(0x23EC997B0);
}

void sub_238C52240(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(exception_object);
}

void XlChartDateAxis::XlChartDateAxis(XlChartDateAxis *this)
{
  XlChartCategoryAxis::XlChartCategoryAxis(this);
  void *v1 = &unk_26EBDC508;
  v1[22] = 0;
}

uint64_t XlChartDateAxis::takeDateSpec(XlChartDateAxis *this, XlChartAxCext *a2)
{
  uint64_t result = *((void *)this + 22);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 22) = a2;
  return result;
}

uint64_t XlChartDateAxis::getType(XlChartDateAxis *this)
{
  return 2;
}

void sub_238C52480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartAxCext::isAutoMajor(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 2) & 1;
}

uint64_t XlChartAxCext::isAutoMinor(XlChartAxCext *this)
{
  return (*((unsigned __int16 *)this + 16) >> 3) & 1;
}

void XlChartDateAxis::~XlChartDateAxis(XlChartPlotAxis *this)
{
  XlChartDateAxis::~XlChartDateAxis(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlChartLineStyle *var3;
  uint64_t vars8;

  this->unsigned int var0 = (void **)&unk_26EBDC508;
  int var3 = this[1].var3;
  if (var3) {
    (*((void (**)(XlChartLineStyle *))var3->var0 + 1))(var3);
  }
  this[1].int var3 = 0;
  XlChartCategoryAxis::~XlChartCategoryAxis(this);
}

void sub_238C527B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartGelFrame::XlChartGelFrame(XlChartGelFrame *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBCA8;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 28) = 0;
}

uint64_t XlChartParserVisitor::visit(unsigned __int8 **this, XlChartGelFrame *a2)
{
  XlParserVisitor::beginRead((XlParserVisitor *)this);
  unsigned int v10 = *((_DWORD *)a2 + 2);
  uint64_t v4 = v10;
  this[3] = 0;
  if (v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      unsigned int v5 = 0;
      do
      {
        do
        {
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)this[2] + 16))(this[2], v4, 1);
          v5 += v4;
          int v6 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)this[2] + 72))(this[2]);
          uint64_t v4 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)this[2] + 80))(this[2]);
        }
        while (v6 == 4198);
      }
      while ((unsigned __int16)v6 == 60);
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)this[2] + 16))(this[2], 4294967292, 1);
      unsigned int v10 = v5;
      int DataAndContinues = (*(uint64_t (**)(unsigned __int8 *))(*(void *)this[2] + 40))(this[2]);
    }
    else
    {
      int DataAndContinues = XlParserVisitor::getDataAndContinues((XlParserVisitor *)this, &v10, 4198);
      unsigned int v5 = v10;
    }
    *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
    unsigned int v8 = this[3];
  }
  else
  {
    unsigned int v5 = 0;
    unsigned int v8 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, v8, v5);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlBinaryReader::getEshReader(XlBinaryReader *this)
{
  return (uint64_t)this + 40;
}

void XlChartGelFrame::~XlChartGelFrame(XlChartGelFrame *this)
{
  *(void *)this = &unk_26EBDBCA8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDBCA8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

void XlChartPicF::~XlChartPicF(XlChartPicF *this)
{
}

_xmlAttr *CXFindAttribute(_xmlNode *a1, xmlChar *str2)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = a1->properties; i; uint64_t i = i->next)
  {
    name = i->name;
    if (name && xmlStrEqual(name, str2)) {
      break;
    }
  }
  return i;
}

void sub_238C52BF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_238C52E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C52FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C531A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C532DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C533FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C539D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C53D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C53E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C53FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C541BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C54BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, void *a17, void *a18)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x238C54B10);
  }

  _Unwind_Resume(a1);
}

void sub_238C54FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C551D8(_Unwind_Exception *a1)
{
  float v9 = v7;

  _Unwind_Resume(a1);
}

void sub_238C55270()
{
}

void sub_238C5544C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C555A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C55840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C55B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C55CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C55DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C55F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C56054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C563AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C56AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C56CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C57074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C570DC()
{
}

void sub_238C57158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C57490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C57838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C57BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C57E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C57F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C58048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C581D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C589E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C58C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C58FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C596E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXFindRequiredChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  uint64_t v4 = pCXFindChild(a1, a2, a3);
  if (!v4) {
    objc_msgSend(MEMORY[0x263EFF940], "raise:format:", @"TCXmlException", @"Could not find node: %s", a3);
  }
  return v4;
}

void sub_238C59E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C5A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5A4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5A570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A678(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238C5A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5ABD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238C5B250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5B36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5B3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5B600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5B77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5B81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5BAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChildNamed(_xmlNode *a1, xmlChar *str1)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = a1->children; i; uint64_t i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE && xmlStrEqual(str1, i->name)) {
      break;
    }
  }
  return i;
}

void sub_238C5C420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, EDValue a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5C734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5C7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5CF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5D5F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id link3DTokens(EFormula *a1, __int16 a2, const EFRefTok *a3)
{
  id v5 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  id v6 = v5;
  if (a3->type == 37)
  {
    addArea3DOperandWithSheet(v5, 1, a2, *(_WORD *)a3->data, *(_WORD *)&a3->data[2], *(_WORD *)&a3->data[4], *(_WORD *)&a3->data[6]);
  }
  else if (a3->type == 36)
  {
    addRef3DOperandWithSheet(v5, 1, a2, *(_WORD *)a3->data, *(_WORD *)&a3->data[2], 0);
  }
  return v6;
}

void sub_238C5D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5D940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5DB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_238C5DDD4(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

_xmlNode *CXNextSiblingNamed(_xmlNode *a1, xmlChar *str1)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = a1->next; i; uint64_t i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE && xmlStrEqual(str1, i->name)) {
      break;
    }
  }
  return i;
}

void sub_238C5DF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C5E3E8(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238C5E578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5EF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5F3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5F52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5F700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5F858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C5F930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C5FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C5FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C5FF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C60044()
{
}

void sub_238C60110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C604A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C60648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C606F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C60A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C60BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238C60CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C60DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C60EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C611A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C61344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C614D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptTextDefaultStyle9Atom::PptTextDefaultStyle9Atom(PptTextDefaultStyle9Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBF0400;
  *(void *)(v3 + 32) = &unk_26EBF04A8;
  PptCharProperty9::PptCharProperty9((PptCharProperty9 *)(v3 + 46));
  PptParaProperty9::PptParaProperty9((PptParaProperty9 *)this + 4);
}

uint64_t PptTextDefaultStyle9Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptParaProperty9 *a2)
{
  return 1;
}

void PptTextDefaultStyle9Atom::~PptTextDefaultStyle9Atom(PptTextDefaultStyle9Atom *this)
{
  *(void *)this = &unk_26EBF0400;
  *((void *)this + 4) = &unk_26EBF04A8;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF0400;
  *((void *)this + 4) = &unk_26EBF04A8;
}

uint64_t XlFormatParser::readBracketToken(XlFormatParser *this, XlFmtPtg *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 6);
  unsigned int v5 = v4 + 1;
  unsigned int Character = OcText::getCharacter(*(OcText **)this, v4 + 1);
  int v7 = Character;
  if (Character <= 0x7F)
  {
    if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * Character + 60) & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  else if (__maskrune(Character, 0x100uLL))
  {
LABEL_3:
    switch(v7)
    {
      case 's':
        unsigned __int16 v11 = 0;
        *((unsigned char *)this + 28) = 1;
        unsigned int v5 = v4 + 2;
        do
        {
          ++v11;
          int v12 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v12 == 115);
        *((double *)a2 + 2) = (double)v11;
        int v10 = 30;
        goto LABEL_110;
      case 'm':
        unsigned __int16 v13 = 0;
        *((unsigned char *)this + 28) = 1;
        unsigned int v5 = v4 + 2;
        do
        {
          ++v13;
          int v14 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v14 == 109);
        *((double *)a2 + 2) = (double)v13;
        int v10 = 28;
        goto LABEL_110;
      case 'h':
        unsigned __int16 v8 = 0;
        *((unsigned char *)this + 28) = 1;
        unsigned int v5 = v4 + 2;
        do
        {
          ++v8;
          int v9 = OcText::getCharacter(*(OcText **)this, v5++);
        }
        while (v9 == 104);
        *((double *)a2 + 2) = (double)v8;
        int v10 = 29;
        goto LABEL_110;
    }
    int v15 = OcText::getCharacter(*(OcText **)this, v4 + 1);
    int v16 = OcText::getCharacter(*(OcText **)this, v4 + 2);
    int v17 = OcText::getCharacter(*(OcText **)this, v4 + 3);
    unsigned int v18 = v15 & 0xFFFFFFDF;
    unsigned int v19 = v16 & 0xFFFFFFDF;
    BOOL v20 = (v15 & 0xFFFFFFDF) == 0x42 && v19 == 76;
    int v21 = v20;
    unsigned int v22 = v17 & 0xFFFFFFDF;
    if (v20 && v22 == 65)
    {
      int v10 = 0;
      LOWORD(v5) = v4 + 7;
LABEL_110:
      *(_DWORD *)a2 = v10;
      return (unsigned __int16)(v5 - *((_DWORD *)this + 6));
    }
    if (v22 != 85) {
      int v21 = 0;
    }
    if (v21 == 1)
    {
      LOWORD(v5) = v4 + 6;
      int v10 = 4;
      goto LABEL_110;
    }
    if ((v15 | 0x20) == 0x63)
    {
      if (v19 == 89 && v22 == 65)
      {
        LOWORD(v5) = v4 + 6;
        int v10 = 7;
        goto LABEL_110;
      }
      if (v15 == 67 && v16 == 111 && v17 == 108)
      {
        char v48 = OcText::getCharacter(*(OcText **)this, v4 + 6);
        char v49 = 0;
        LOWORD(v5) = v4 + 7;
        unsigned int v45 = OcText::getCharacter(*(OcText **)this, v4 + 7);
        __int16 v46 = 8;
        if (v45 != 93)
        {
          if (v45 > 0xFF || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v45 + 60) & 0x400) == 0) {
            goto LABEL_79;
          }
          char v49 = v45;
          __int16 v46 = 9;
        }
        LOWORD(v5) = v4 + v46;
        *(_DWORD *)a2 = 8;
LABEL_79:
        *((double *)a2 + 2) = atof(&v48);
        goto LABEL_80;
      }
    }
    else
    {
      if (v18 == 71 && v19 == 82 && v22 == 69)
      {
        LOWORD(v5) = v4 + 7;
        int v10 = 3;
        goto LABEL_110;
      }
      if (v18 == 77 && v19 == 65 && v22 == 71)
      {
        LOWORD(v5) = v4 + 9;
        int v10 = 6;
        goto LABEL_110;
      }
      if (v18 == 82 && v19 == 69 && v22 == 68)
      {
        LOWORD(v5) = v4 + 5;
        int v10 = 2;
        goto LABEL_110;
      }
      if (v18 == 87 && v19 == 72 && v22 == 73)
      {
        LOWORD(v5) = v4 + 7;
        int v10 = 1;
        goto LABEL_110;
      }
      if (v18 == 89 && v19 == 69 && v22 == 76)
      {
        LOWORD(v5) = v4 + 8;
        int v10 = 5;
        goto LABEL_110;
      }
    }
    if (v7 != 93)
    {
      do
        ++v5;
      while (OcText::getCharacter(*(OcText **)this, v5) != 93);
    }
LABEL_36:
    LOWORD(v5) = v5 + 1;
    int v10 = 59;
    goto LABEL_110;
  }
  if (v7 > 60)
  {
    switch(v7)
    {
      case '=':
        unsigned int v5 = v4 + 2;
        int v25 = 12;
        break;
      case '>':
        unsigned int v5 = v4 + 2;
        unsigned int v26 = OcText::getCharacter(*(OcText **)this, v4 + 2);
        if (v26 <= 0xFF) {
          int v27 = (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v26 + 60) >> 10) & 1;
        }
        else {
          LOBYTE(v27) = 0;
        }
        int v25 = 14;
        if (v26 != 45 && (v27 & 1) == 0)
        {
          if (v26 != 61) {
            goto LABEL_81;
          }
          unsigned int v5 = v4 + 3;
          int v25 = 11;
        }
        break;
      case ']':
        goto LABEL_36;
      default:
        do
LABEL_35:
          ++v5;
        while (OcText::getCharacter(*(OcText **)this, v5) != 93);
        goto LABEL_36;
    }
LABEL_72:
    *(_DWORD *)a2 = v25;
    int v41 = OcText::getCharacter(*(OcText **)this, v5);
    if (v41 == 93)
    {
      uint64_t v42 = 0;
    }
    else
    {
      uint64_t v43 = 0;
      do
      {
        if (v43 == 63) {
          goto LABEL_81;
        }
        uint64_t v42 = v43 + 1;
        *(&v48 + v43) = v41;
        int v41 = OcText::getCharacter(*(OcText **)this, v5 + v43 + 1);
        uint64_t v43 = v42;
      }
      while (v41 != 93);
      LOWORD(v5) = v5 + v42;
    }
    *(&v48 + v42) = 0;
    LOWORD(v5) = v5 + 1;
    goto LABEL_79;
  }
  if (v7 != 36)
  {
    if (v7 != 60) {
      goto LABEL_35;
    }
    unsigned int v5 = v4 + 2;
    unsigned int v23 = OcText::getCharacter(*(OcText **)this, v4 + 2);
    if (v23 <= 0xFF) {
      int v24 = (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v23 + 60) >> 10) & 1;
    }
    else {
      LOBYTE(v24) = 0;
    }
    int v25 = 13;
    if (v23 != 45 && (v24 & 1) == 0)
    {
      if (v23 == 62)
      {
        unsigned int v5 = v4 + 3;
        int v25 = 9;
      }
      else
      {
        if (v23 != 61) {
          goto LABEL_81;
        }
        unsigned int v5 = v4 + 3;
        int v25 = 10;
      }
    }
    goto LABEL_72;
  }
  int v28 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v28);
  *((void *)this + 1) = v28;
  int v29 = *(OcText **)this;
  v28->int var1 = *(_DWORD *)(*(void *)this + 8);
  int v30 = OcText::getCharacter(v29, v4 + 2);
  if (v30 == 93)
  {
    unsigned int v31 = 0;
    LOWORD(v5) = v4 + 3;
LABEL_65:
    *((void *)a2 + 2) = 0x4042000000000000;
    int v34 = 51;
    goto LABEL_66;
  }
  int v32 = v30;
  unsigned int v31 = 0;
  do
    unsigned int v33 = v4 + 3 + v31++;
  while (OcText::getCharacter(*(OcText **)this, v33) != 93);
  LOWORD(v5) = v4 + v31 + 3;
  if (v32 != 45) {
    goto LABEL_65;
  }
  int v34 = 78;
LABEL_66:
  *(_DWORD *)a2 = v34;
  uint64_t v35 = (OcText *)*((void *)this + 1);
  if (v31)
  {
    uint64_t v36 = *(void *)(*(void *)this + 24);
    int v37 = *((_DWORD *)this + 6) + 2;
    uint64_t v38 = (const unsigned __int8 *)(v36
                                  + (v37 << (OcText::isSingleByteEncoding(*(_DWORD *)(*(void *)this + 8)) ^ 1)));
    char isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(*(void *)this + 8));
    OcText::copyBuffer(v35, v38, v31 << (isSingleByteEncoding ^ 1));
    uint64_t v35 = (OcText *)*((void *)this + 1);
    v35->int var3 = v31;
  }
  uint64_t v40 = *((void *)a2 + 1);
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  *((void *)a2 + 1) = v35;
  *((void *)this + 1) = 0;
LABEL_80:
  if (*(_DWORD *)a2 == 255)
  {
LABEL_81:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return (unsigned __int16)(v5 - *((_DWORD *)this + 6));
}

void sub_238C61E20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptExWaveAudioEmbeddedAtom::PptExWaveAudioEmbeddedAtom(PptExWaveAudioEmbeddedAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB3F0;
  *(void *)(v2 + 32) = &unk_26EBEB498;
  *(void *)(v2 + 48) = 0xE8D8000000000000;
}

uint64_t PptExWaveAudioEmbeddedAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExWaveAudioEmbeddedAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_238C624CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void PptExWaveAudioEmbeddedAtom::~PptExWaveAudioEmbeddedAtom(PptExWaveAudioEmbeddedAtom *this)
{
}

char *XlCf::takeSecondFmla(XlCf *this, char *a2, signed __int16 a3)
{
  uint64_t result = this->var8;
  if (result) {
    uint64_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  this->var8 = a2;
  this->var5 = a3;
  return result;
}

XlCell *XlCell::setBoolean(XlCell *this, BOOL a2)
{
  uint64_t result = XlCell::resetContent(this);
  this->var4 = 2;
  this->var9 = a2;
  return result;
}

void XlAutoFilterInfo::XlAutoFilterInfo(XlAutoFilterInfo *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEBA8;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlAutoFilterInfo::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 464))(a2, a1);
}

void XlAutoFilterInfo::~XlAutoFilterInfo(XlAutoFilterInfo *this)
{
}

uint64_t WrdTableProperties::getShadingReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x10uLL;
  return *((void *)this + 6);
}

void sub_238C62B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C62D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6332C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C63448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C635F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C63A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

double TSURectWithCenterAndSize(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

void sub_238C63F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C64294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C643D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C644D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C64708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C647B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C648F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C64C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C64DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C64EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C65608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_238C65748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ODIHRangeVector::minDistanceTo(void *a1, uint64_t *a2)
{
  unint64_t v3 = (unint64_t)(a2[1] - *a2) >> 3;
  if (((a1[1] - *a1) >> 3) < v3) {
    LODWORD(v3) = (a1[1] - *a1) >> 3;
  }
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 8 * v3;
  double result = 0.0;
  do
  {
    float v7 = *(float *)(*a1 + v4) + (float)(*(float *)(*a1 + v4 + 4) * 0.5);
    uint64_t v2 = *a2;
    if ((float)((float)(*(float *)(v2 + v4) - (float)(*(float *)(v2 + v4 + 4) * 0.5)) - v7) < *(float *)&result
      || v4 == 0)
    {
      *(float *)&double result = (float)(*(float *)(v2 + v4) - (float)(*(float *)(v2 + v4 + 4) * 0.5)) - v7;
    }
    v4 += 8;
  }
  while (v5 != v4);
  return result;
}

void *ODIHRangeVector::operator+=(void *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v5 = (char *)a1[1];
  unint64_t v6 = (unint64_t)&v5[-*a1] >> 3;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v9 = (unint64_t)(v7 - *a2) >> 3;
  if (v6 >= v9) {
    int v10 = (unint64_t)(v7 - *a2) >> 3;
  }
  else {
    int v10 = (unint64_t)&v5[-*a1] >> 3;
  }
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      float v13 = *(float *)&v4[v11] - (float)(*(float *)&v4[v11 + 4] * 0.5);
      float v14 = *(float *)(v8 + v11) + (float)(*(float *)(v8 + v11 + 4) * 0.5);
      if (v14 < v13)
      {
        int v15 = [NSString stringWithUTF8String:"ODIHRangeVector &ODIHRangeVector::operator+=(const ODIHRangeVector &)"];
        int v16 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Diagrams/Importer/ODIHierarchy.mm"];
        +[OITSUAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:88 isFatal:0 description:"Incorrect range structure"];

        +[OITSUAssertionHandler logBacktraceThrottled];
        uint64_t v4 = (char *)*a1;
        uint64_t v5 = (char *)a1[1];
        uint64_t v8 = *a2;
        uint64_t v7 = a2[1];
      }
      int v17 = (float *)&v4[v11];
      *int v17 = (float)(v13 + v14) * 0.5;
      v17[1] = v14 - v13;
      ++v12;
      unint64_t v6 = (unint64_t)(v5 - v4) >> 3;
      unint64_t v9 = (unint64_t)(v7 - v8) >> 3;
      if (v6 >= v9) {
        unint64_t v18 = v9;
      }
      else {
        unint64_t v18 = v6;
      }
      v11 += 8;
    }
    while (v12 < v18);
  }
  if (v6 < v9)
  {
    unsigned int v19 = a1 + 2;
    unint64_t v20 = v6;
    do
    {
      if ((unint64_t)v5 >= *v19)
      {
        unint64_t v21 = (unint64_t)&v5[-*a1];
        uint64_t v22 = (*v19 - *a1) >> 3;
        unsigned int v23 = 2 * v22;
        if (2 * (int)v22 <= (v21 >> 3) + 1) {
          unsigned int v23 = (v21 >> 3) + 1;
        }
        if (v22 >= 0x7FFFFFFF) {
          unint64_t v24 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          int v25 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 2), v24);
          uint64_t v27 = v26;
        }
        else
        {
          int v25 = 0;
          uint64_t v27 = 0;
        }
        int v28 = &v25[v21 & 0x7FFFFFFF8];
        *(void *)int v28 = *(void *)(v8 + 8 * v20);
        uint64_t v5 = v28 + 8;
        int v30 = (char *)*a1;
        int v29 = (char *)a1[1];
        if (v29 != (char *)*a1)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v28 - 1) = v31;
            v28 -= 8;
          }
          while (v29 != v30);
          int v29 = (char *)*a1;
        }
        *a1 = v28;
        a1[1] = v5;
        a1[2] = &v25[8 * v27];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)uint64_t v5 = *(void *)(v8 + 8 * v20);
        v5 += 8;
      }
      a1[1] = v5;
      ++v20;
      uint64_t v8 = *a2;
    }
    while (v20 < ((unint64_t)(a2[1] - *a2) >> 3));
  }
  return a1;
}

void sub_238C65A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float ODIHRangeVector::boundingRange(float **this)
{
  float v1 = **this;
  float v2 = (*this)[1] * 0.5;
  float v3 = v1 - v2;
  float v4 = v1 + v2;
  unint64_t v5 = (char *)this[1] - (char *)*this;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v6 = (v5 >> 3);
    uint64_t v7 = *this + 1;
    do
    {
      float v8 = *(v7 - 1);
      float v9 = *v7 * 0.5;
      if (v3 >= (float)(v8 - v9)) {
        float v3 = v8 - v9;
      }
      float v10 = v8 + v9;
      if (v4 < v10) {
        float v4 = v10;
      }
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return (float)(v4 + v3) * 0.5;
}

void sub_238C65C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C65D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C65E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C665C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_238C668F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdTableCellDescriptor::setTopPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x1000000;
  *(_WORD *)(result + 108) = a2;
  return result;
}

int *WrdTableCellDescriptor::setTopPaddingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x8000;
  result[19] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setLeftPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x800000;
  *(_WORD *)(result + 106) = a2;
  return result;
}

int *WrdTableCellDescriptor::setLeftPaddingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x4000;
  result[18] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setRightPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x4000000;
  *(_WORD *)(result + 112) = a2;
  return result;
}

int *WrdTableCellDescriptor::setRightPaddingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x20000;
  result[21] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setBottomPadding(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x2000000;
  *(_WORD *)(result + 110) = a2;
  return result;
}

int *WrdTableCellDescriptor::setBottomPaddingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (int *)(a1 + 8);
  *uint64_t result = v3 | 0x10000;
  result[20] = a2;
  return result;
}

void XlExternName::XlExternName(XlExternName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF7A8;
  *(_WORD *)(v2 + 22) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 28) = 0;
  *(void *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 20) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExternName *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 17) = vmovn_s16(v5).u32[0];
  *((_WORD *)a2 + 11) = (v6 >> 5) & 0x3FF;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 28) = v7;
  if (v7)
  {
    unsigned int v8 = v7;
    float v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v10, v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  Contentint Type = XlExternName::getContentType(a2);
  if (ContentType == 1)
  {
    if (!*((unsigned char *)a2 + 19)
      && v4 - (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) >= 3)
    {
      *((_WORD *)a2 + 28) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2))
                          + 1;
      __int16 v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      *((_WORD *)a2 + 29) = v14 + 1;
      unsigned __int16 v15 = *((_WORD *)a2 + 28) * (v14 + 1);
      if (v15)
      {
        int v16 = 0;
        do
        {
          int v17 = (XlOper *)operator new(0x20uLL);
          XlOper::XlOper(v17);
          unsigned int v19 = v17;
          (*(void (**)(XlParserVisitor *, XlOper *))(*(void *)this + 1584))(this, v17);
          XlExternName::appendOperand(a2, v19);
          unsigned int v19 = 0;
          ChAutoPtr<XlOper>::~ChAutoPtr(&v19);
          ++v16;
        }
        while ((unsigned __int16)v16 < v15);
      }
    }
  }
  else if (!ContentType)
  {
    unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *(_DWORD *)unint64_t v20 = v12;
    if (v12)
    {
      float v13 = operator new[](v12);
      *((void *)this + 3) = v13;
      (*(void (**)(void, void *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v13, v20);
      XlExternName::setNameDefinition(a2, *((unsigned __int8 **)this + 3), v20[0]);
      *((void *)this + 3) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C670B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlExternName::getContentType(XlExternName *this)
{
  if (!*((unsigned char *)this + 17)
    && !*((unsigned char *)this + 18)
    && !*((unsigned char *)this + 19)
    && !*((unsigned char *)this + 20)
    && !*((_WORD *)this + 11))
  {
    return 0;
  }
  if (*((unsigned char *)this + 16)) {
    return 3;
  }
  if (!*((unsigned char *)this + 20)) {
    return 1;
  }
  if (*((unsigned char *)this + 19)) {
    return 3;
  }
  return 2;
}

uint64_t XlExternName::setNameDefinition(XlExternName *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 6) = a2;
  *((_WORD *)this + 20) = a3;
  return result;
}

void XlSxExt::appendODBC(XlSxExt *this, XlSxString *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 9);
  int v4 = (char *)this + 72;
  unint64_t v5 = v6;
  unsigned int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 7);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      __int16 v14 = 0;
      uint64_t v16 = 0;
    }
    int v17 = &v14[v10 & 0x7FFFFFFF8];
    unint64_t v18 = &v14[8 * v16];
    *(void *)int v17 = a2;
    unsigned int v8 = v17 + 8;
    unint64_t v20 = (char *)*((void *)this + 7);
    unsigned int v19 = (char *)*((void *)this + 8);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = (char *)*((void *)this + 7);
    }
    *((void *)this + 7) = v17;
    *((void *)this + 8) = v8;
    *((void *)this + 9) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    unsigned int v8 = v7 + 1;
  }
  *((void *)this + 8) = v8;
}

uint64_t XlLink::getExternalName(XlLink *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (((unint64_t)(*((void *)this + 8) - v2) >> 3) <= a2
    || (uint64_t result = *(void *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return result;
}

void XlChartLegendXn::XlChartLegendXn(XlChartLegendXn *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBD68;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlChartLegendXn::isLabel(XlChartLegendXn *this)
{
  return (*((unsigned __int16 *)this + 9) >> 1) & 1;
}

void XlChartDataSeries::takeCustomLegend(void *a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v6 = a1[24];
    uint64_t v4 = (uint64_t)(a1 + 24);
    unint64_t v5 = v6;
    unsigned int v7 = *(void **)(v4 - 8);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = a1[22];
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        __int16 v14 = 0;
        uint64_t v16 = 0;
      }
      int v17 = &v14[v10 & 0x7FFFFFFF8];
      unint64_t v18 = &v14[8 * v16];
      *(void *)int v17 = a2;
      unsigned int v8 = v17 + 8;
      unint64_t v20 = (char *)a1[22];
      unsigned int v19 = (char *)a1[23];
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        unsigned int v19 = (char *)a1[22];
      }
      a1[22] = v17;
      a1[23] = v8;
      a1[24] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *unsigned int v7 = a2;
      unsigned int v8 = v7 + 1;
    }
    a1[23] = v8;
  }
}

void XlChartLegendXn::~XlChartLegendXn(XlChartLegendXn *this)
{
}

void XlChartPlot::takeDefaultText(void *a1, uint64_t a2, int a3)
{
  unint64_t v8 = a1[16];
  uint64_t v6 = (uint64_t)(a1 + 16);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = a1[14];
    uint64_t v12 = v9 - v11;
    unint64_t v13 = (v9 - v11) >> 4;
    unint64_t v14 = (v7 - v11) >> 4;
    if (2 * (int)v14 <= (v13 + 1)) {
      unsigned int v15 = v13 + 1;
    }
    else {
      unsigned int v15 = 2 * v14;
    }
    if (v14 >= 0x7FFFFFFF) {
      unint64_t v16 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v6, v16);
      uint64_t v19 = v18;
    }
    else
    {
      int v17 = 0;
      uint64_t v19 = 0;
    }
    unint64_t v20 = &v17[v12 & 0xFFFFFFFF0];
    uint64_t v21 = &v17[16 * v19];
    *(void *)unint64_t v20 = a2;
    *((_DWORD *)v20 + 2) = a3;
    unint64_t v10 = v20 + 16;
    unsigned int v23 = (char *)a1[14];
    uint64_t v22 = (char *)a1[15];
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v22 - 1);
        v20 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)a1[14];
    }
    a1[14] = v20;
    a1[15] = v10;
    a1[16] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)unint64_t v9 = a2;
    *(_DWORD *)(v9 + 8) = a3;
    unint64_t v10 = (char *)(v9 + 16);
  }
  a1[15] = v10;
}

void sub_238C676A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C67748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartCustomLegend::~XlChartCustomLegend(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void XlExternName::~XlExternName(XlExternName *this)
{
  XlExternName::~XlExternName(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(void *)this = &unk_26EBDF7A8;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  int v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 20) = 0;
  XlExternName::clearOperands(this);
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
}

void *XlExternName::clearOperands(void *this)
{
  float v1 = this;
  uint64_t v2 = this[8];
  uint64_t v3 = this[9];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        XlOper::~XlOper((XlOper *)this);
        this = (void *)MEMORY[0x23EC997B0]();
        uint64_t v2 = v1[8];
        uint64_t v3 = v1[9];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[9] = v2;
  return this;
}

void sub_238C67D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartTrendLine::XlChartTrendLine(XlChartTrendLine *this)
{
  XlChartDataSeries::XlChartDataSeries(this);
  XlChartSerAuxTrend::XlChartSerAuxTrend((XlChartSerAuxTrend *)(v2 + 200));
  *(void *)this = &unk_26EBDCBC8;
  *((void *)this + 25) = &unk_26EBDCC00;
}

void sub_238C67DDC(_Unwind_Exception *a1)
{
  XlChartDataSeries::~XlChartDataSeries(v1);
  _Unwind_Resume(a1);
}

void XlChartSerAuxTrend::XlChartSerAuxTrend(XlChartSerAuxTrend *this)
{
  XlRecord::XlRecord(this, 4171, 28, 0);
  void *v1 = &unk_26EBDC130;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
  *(void *)((char *)v1 + 39) = 0;
}

uint64_t XlChartTrendLine::setParentSeriesIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = a2;
  return this;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSerAuxTrend *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 44) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((double *)a2 + 2) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 46) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((double *)a2 + 3) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  *((double *)a2 + 4) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartTrendLine::getSeriesType(XlChartTrendLine *this)
{
  return 2;
}

void sub_238C68240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartTrendLine::getParentSeriesIndex(XlChartTrendLine *this)
{
  return *((unsigned __int16 *)this + 9);
}

void sub_238C685C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C68678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C68700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C68820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C688EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartTrendLine::~XlChartTrendLine(XlChartTrendLine *this)
{
  TSURectWithOriginAndSize((char *)this + 200);
  XlChartDataSeries::~XlChartDataSeries(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 200);
  XlChartDataSeries::~XlChartDataSeries(this);
}

void sub_238C68A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C68C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C68DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C68FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *CXRequiredLongChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  return CXRequiredLongChild(a1, a2, a3, 0);
}

void sub_238C69144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C69408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setInnerTableCell(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x2000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFEFFFFF | ((a2 & 1) << 20);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setInnerTableTrailerParagraph(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x4000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFDFFFFF | ((a2 & 1) << 21);
  return this;
}

void sub_238C69668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C697E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C698F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C69A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C69D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C69EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6A1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6A33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6A4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6A6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6A928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6AAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6ABC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_238C6ADC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6AF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6B1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6B314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6B42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6B4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C6B5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C6B7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::clearFontIndexForASCIIText(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x2000uLL;
  this->var43 = 0;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::clearFontIndexForOtherText(WrdCharacterProperties *this)
{
  *(void *)&this->var2 &= ~0x8000uLL;
  this->var45 = 0;
  return this;
}

uint64_t WrdCharacterProperties::resolveToAbsolute(uint64_t result, unsigned int a2)
{
  if (result) {
    unsigned int v2 = 129;
  }
  else {
    unsigned int v2 = 1;
  }
  if (result == 1) {
    unsigned int v2 = 0;
  }
  if (a2 != 129) {
    unsigned int v2 = a2;
  }
  if (a2 == 128) {
    return result;
  }
  else {
    return v2;
  }
}

void WrdCharacterProperties::clearListNumberRevisionAttributes(WrdCharacterProperties *this)
{
  float v1 = (unsigned int *)&this->var2 + 2;
  unint64_t v2 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  *((_DWORD *)this + 85) &= ~0x1000000u;
  v2 &= 0xFFFD7FFFFFFFuLL;
  *((_DWORD *)&this->var2 + 2) = v2;
  *((_WORD *)&this->var2 + 6) = WORD2(v2);
  (*((void (**)(WrdDateTime *))this->var10->var0 + 3))(this->var10);
  uint64_t v3 = *v1;
  unint64_t v4 = (v3 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  unsigned int *v1 = v3;
  *((_WORD *)v1 + 2) = WORD2(v4);
  *((_WORD *)v1 + 152) = 0;
  v1[10] = 0;
  unint64_t v5 = (void *)*((void *)v1 + 4);
  size_t v6 = 2 * v1[11];
  bzero(v5, v6);
}

WrdTableProperties *WrdTableProperties::setAbsoluteHorizontalPosition(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x200000000000uLL;
  *((_DWORD *)this + 76) = a2;
  return this;
}

uint64_t EshPath::getStrokeOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Cu);
}

WrdParagraphProperties *WrdParagraphProperties::setRevisionMark(WrdParagraphProperties *this, char a2)
{
  *((_WORD *)this + 12) |= 0x200u;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFBFFFFFF | ((a2 & 1) << 26);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAuthorIDForRevision(WrdParagraphProperties *this, __int16 a2)
{
  *((_WORD *)this + 12) |= 0x400u;
  *((_WORD *)this + 146) = a2;
  return this;
}

uint64_t WrdParagraphProperties::getDttmRevisionMarkReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0xA00u;
  return *((void *)this + 14);
}

void sub_238C6BC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6BD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6BE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C6BFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6C368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_238C6C634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C6CA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OAVReadIntPair(NSString *a1, int *a2, int *a3)
{
  id v7 = [(NSString *)a1 componentsSeparatedByString:@","];
  if ([v7 count])
  {
    unint64_t v5 = [v7 objectAtIndex:0];
    *a2 = [v5 intValue];

    if ((unint64_t)[v7 count] >= 2)
    {
      size_t v6 = [v7 objectAtIndex:1];
      *a3 = [v6 intValue];
    }
  }
}

void sub_238C6CB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float OAVReadAngle(NSString *a1)
{
  float v1 = a1;
  double v10 = 0.0;
  int v9 = 0;
  CXSplitValueAndUnit(v1, &v10, &v9);
  switch(v9)
  {
    case 0:
    case 3:
      double v2 = v10;
      goto LABEL_8;
    case 1:
    case 2:
      double v2 = v10 * 0.0000152587891;
      goto LABEL_8;
    case 4:
      double v6 = v10 * 180.0;
      double v7 = 3.14159265;
      goto LABEL_7;
    case 5:
      double v6 = v10 * 9.0;
      double v7 = 10.0;
LABEL_7:
      double v2 = v6 / v7;
LABEL_8:
      float v5 = v2;
      break;
    default:
      uint64_t v3 = [NSString stringWithUTF8String:"float OAVReadAngle(NSString *__strong)"];
      unint64_t v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:39 isFatal:0 description:"Unhandled case"];

      float v5 = 0.0;
      +[OITSUAssertionHandler logBacktraceThrottled];
      break;
  }

  return v5;
}

void sub_238C6CCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OAVReadLengthPair(NSString *a1, float *a2, float *a3)
{
  double v10 = a1;
  float v5 = [(NSString *)v10 componentsSeparatedByString:@","];
  if ([v5 count] != 2)
  {
    double v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void OAVReadLengthPair(NSString *__strong, float *, float *)");
    double v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Vml/OAVUtils.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:102 isFatal:0 description:"Bad input"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  unint64_t v8 = [v5 objectAtIndex:0];
  *a2 = OAVReadLength(v8);

  int v9 = [v5 objectAtIndex:1];
  *a3 = OAVReadLength(v9);
}

void sub_238C6CE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C6D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void sub_238C6D414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6D4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6D760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C6D834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void XlFileSharing::XlFileSharing(XlFileSharing *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF8E8;
  *(unsigned char *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 18) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFileSharing *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = v6;
  if (v6)
  {
    unsigned int v7 = v6;
    unint64_t v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C6DB3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFileSharing::~XlFileSharing(XlFileSharing *this)
{
  *(void *)this = &unk_26EBDF8E8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDF8E8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
}

void sub_238C6DD34(_Unwind_Exception *a1)
{
  unsigned int v6 = v5;

  _Unwind_Resume(a1);
}

void sub_238C6DDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor(WrdAnnotationReferenceDescriptor *this)
{
  *(void *)this = &unk_26EBE5350;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 0;
}

uint64_t WrdAnnotationReferenceDescriptorTable::getDescriptor(WrdAnnotationReferenceDescriptorTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || *((unsigned __int16 *)this + 8) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return v2 + 40 * a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdAnnotationReferenceDescriptor *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((_DWORD *)a2 + 6) = 0;
  bzero(*((void **)a2 + 2), 2 * *((unsigned int *)a2 + 7));
  CsString::reserve((CsString *)((char *)a2 + 8), v4 + 1);
  int v5 = (_WORD *)*((void *)a2 + 2);
  if (!v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    do
    {
      *v5++ = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      --v6;
    }
    while (v6);
  }
  CsString::setCount((CsString *)((char *)a2 + 8), v4);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2 * ((WrdAnnotationReferenceDescriptor::s_unNumberOfCharactersForAuthor + ~(_WORD)v4) & 0x7FFFu), 1);
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  *((_DWORD *)a2 + 8) = result;
  return result;
}

void WrdAnnotation::WrdAnnotation(WrdAnnotation *this, WrdAnnotationReferenceDescriptor *a2, WrdDateTime *a3)
{
  this->unsigned int var0 = (void **)&unk_26EBE52D8;
  *(void *)&this->int var1 = 0;
  this->int var3 = 0;
  this->var4 = a2;
  this->var5 = a3;
}

uint64_t WrdAnnotationReferenceDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  uint64_t v3 = (const CsString *)(a2 + 8);
  unsigned int v4 = (CsString *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append(v4, v3);
  return a1;
}

void XlFormatInfo::takeSection(XlFormatInfo *this, XlFormatSection *a2)
{
  if (a2)
  {
    unint64_t v6 = *((void *)this + 3);
    unsigned int v4 = (char *)this + 24;
    unint64_t v5 = v6;
    unsigned int v7 = (void *)*((void *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *((void *)this + 1);
      unint64_t v10 = (unint64_t)v7 - v9;
      unint64_t v11 = (v5 - v9) >> 3;
      unsigned int v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1) {
        unsigned int v12 = (v10 >> 3) + 1;
      }
      if (v11 >= 0x7FFFFFFF) {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        uint64_t v16 = v15;
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v16 = 0;
      }
      int v17 = &v14[v10 & 0x7FFFFFFF8];
      unsigned int v18 = &v14[8 * v16];
      *(void *)int v17 = a2;
      unint64_t v8 = v17 + 8;
      unint64_t v20 = (char *)*((void *)this + 1);
      uint64_t v19 = (char *)*((void *)this + 2);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)*((void *)this + 1);
      }
      *((void *)this + 1) = v17;
      *((void *)this + 2) = v8;
      *((void *)this + 3) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *unsigned int v7 = a2;
      unint64_t v8 = v7 + 1;
    }
    *((void *)this + 2) = v8;
  }
}

void WrdStringTable::appendString(WrdStringTable *this, const unsigned __int16 *a2, unsigned int a3)
{
  unint64_t v6 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v6);
  CsString::append(v6, a2, a3);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = (CsString **)*((void *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *((void *)this + 1);
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v7 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v17 = 0;
    }
    unsigned int v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
    uint64_t v19 = &v15[8 * v17];
    *unsigned int v18 = v6;
    uint64_t v9 = v18 + 1;
    uint64_t v21 = (char *)*((void *)this + 1);
    unint64_t v20 = (char *)*((void *)this + 2);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = (CsString *)*((void *)v20 - 1);
        v20 -= 8;
        *--unsigned int v18 = v22;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v18;
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  *((void *)this + 2) = v9;
}

void sub_238C6E2DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_238C6E5EC(void *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = v11;
  int v13 = (int)a2;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  if (v13 == 3)
  {
    unsigned int v15 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v15);
    __cxa_end_catch();
  }
  else
  {
    unsigned int v16 = __cxa_begin_catch(a1);
    if (v13 == 2) {
      [v16 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238C6E5C8);
}

void sub_238C6E6B8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 2)
  {
    [objc_begin_catch(exc_buf) raise];
    objc_end_catch();
    JUMPOUT(0x238C6E5C8);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdAnnotationTable::getAnnotationAtMainTextCP(WrdAnnotationTable *this, int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (unint64_t)(*((void *)this + 2) - v3) >> 3;
  if (!v4) {
    return 0;
  }
  uint64_t result = *(void *)v3;
  if (*(_DWORD *)(*(void *)v3 + 8) != a2)
  {
    unsigned __int16 v7 = 0;
    while (v4 > ++v7)
    {
      unsigned int v6 = v7;
      uint64_t result = *(void *)(v3 + 8 * v7);
      if (*(_DWORD *)(result + 8) == a2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
  unsigned int v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void sub_238C6E8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6E980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdAnnotation::~WrdAnnotation(WrdAnnotation *this)
{
  WrdAnnotation::~WrdAnnotation(this);
  JUMPOUT(0x23EC997B0);
}

{
  WrdAnnotationReferenceDescriptor *var4;
  WrdDateTime *var5;

  this->unsigned int var0 = (void **)&unk_26EBE52D8;
  var4 = this->var4;
  if (var4) {
    (*(void (**)(WrdAnnotationReferenceDescriptor *))(*(void *)var4 + 8))(var4);
  }
  this->var4 = 0;
  var5 = this->var5;
  if (var5) {
    (*((void (**)(WrdDateTime *))var5->var0 + 1))(var5);
  }
  this->var5 = 0;
}

void WrdAnnotationReferenceDescriptor::~WrdAnnotationReferenceDescriptor(WrdAnnotationReferenceDescriptor *this)
{
  *(void *)this = &unk_26EBE5350;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBE5350;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void XlArray::XlArray(XlArray *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEAB8;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlArray *a2)
{
  unint64_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlArray::setCellRange(a2, v4);
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 40) = v5 & 1;
  *((unsigned char *)a2 + 41) = (v5 & 2) != 0;
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v7 = *((_DWORD *)this + 20) - *((_DWORD *)this + 21) - 18;
  LODWORD(v4) = XlParserVisitor::getDataAndContinues(this, &v7, -1);
  XlArray::setFormula(a2, *((unsigned __int8 **)this + 3), v7);
  *((_DWORD *)a2 + 2) = v4 - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

{
  XlRef *v4;
  XlRef *v5;
  void *v6;
  __int16 v7;

  unint64_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  char v5 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v5, 0);
  unsigned int v6 = operator new(0x10uLL);
  *unsigned int v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v5);
  XlArray::setCellRange(a2, v5);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlRevisionMove::takeDestRef((XlRevisionMove *)a2, v4);
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  XlRevisionMove::setSourceTabIndex((uint64_t)a2, v7);
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

{
  XlRef *v4;
  void *v5;

  unint64_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  char v5 = operator new(0x10uLL);
  *char v5 = 0;
  v5[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v5);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v5);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlArray::setCellRange(a2, v4);
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C6ED24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XlArray *XlFormulaInfo::takeArrayBase(XlFormulaInfo *this, XlArray *a2)
{
  uint64_t result = this->var7;
  if (result) {
    uint64_t result = (XlArray *)(*(uint64_t (**)(XlArray *))(*(void *)result + 8))(result);
  }
  this->var7 = a2;
  return result;
}

void sub_238C6EE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C6EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlArray::~XlArray(XlArray *this)
{
  XlArray::~XlArray(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBDEAB8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
}

void XlChartDTLineFormat::XlChartDTLineFormat(XlChartDTLineFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBBA8;
  *(void *)(v2 + 16) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v2 + 24) = 1065353216;
}

void XlChartDTLineFormat::~XlChartDTLineFormat(XlChartDTLineFormat *this)
{
}

_DWORD *XlStringExtractor::markHashTableAsCorrupted(XlStringExtractor *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 16 * v3;
      do
      {
        uint64_t v7 = *(void *)(v4 + v6);
        if (v7) {
          MEMORY[0x23EC99790](v7, 0x1000C8052888210);
        }
        *(void *)(v4 + v6) = 0;
        v6 -= 16;
      }
      while (v6);
    }
    MEMORY[0x23EC99790](v4 - 8, 0x1010C8057418832);
  }
  *((void *)this + 3) = 0;
  int v8 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 37) = 1;
  *((_DWORD *)this + 38) = v8;
  uint64_t v9 = (char *)operator new[](0x20uLL);
  *(_OWORD *)uint64_t v9 = xmmword_238EE6CF0;
  *((void *)v9 + 3) = 0;
  *((_WORD *)v9 + 10) = 0;
  *((_DWORD *)v9 + 4) = 0;
  uint64_t result = v9 + 16;
  *((void *)this + 3) = result;
  *uint64_t result = **((_DWORD **)this + 17);
  return result;
}

uint64_t XlParserVisitor::currentRecordLocation(XlParserVisitor *this)
{
  if (!*((unsigned char *)this + 100)) {
    return (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) - 4;
  }
  int v1 = *((_DWORD *)this + 21);
  if (v1 < 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v1;
  }
}

void XlBinaryReader::findCellAHome(XlBinaryReader *this, XlRowBlock *a2, int a3)
{
  uint64_t v6 = (XlCell **)*((void *)this + 52);
  uint64_t v7 = *((void *)this + 53);
  do
  {
    if (((v7 - (void)v6) & 0x7FFFFFFF8) == 0) {
      break;
    }
    if (((*((void *)a2 + 2) - *((void *)a2 + 1)) & 0x7FFFFFFF8) != 0)
    {
      unsigned int v8 = 0;
      while (1)
      {
        uint64_t v9 = v6[v8];
        if (v9)
        {
          unsigned int var1 = v9->var1;
          if (var1 >= XlRowBlock::getMinRow(a2))
          {
            unsigned int v11 = v9->var1;
            if (v11 <= XlRowBlock::getMaxRow(a2))
            {
              XlRowBlock::takeCell(a2, v9);
              uint64_t v12 = *((void *)this + 53);
              uint64_t v13 = *((void *)this + 52) + 8 * v8;
              uint64_t v14 = v12 - (v13 + 8);
              if (v12 != v13 + 8) {
                memmove((void *)v13, (const void *)(v13 + 8), v12 - (v13 + 8));
              }
              *((void *)this + 53) = v13 + v14;
              --v8;
            }
          }
        }
        ++v8;
        uint64_t v6 = (XlCell **)*((void *)this + 52);
        uint64_t v15 = (*((void *)this + 53) - (void)v6) >> 3;
        if (v8 >= v15) {
          break;
        }
        if (((*((void *)a2 + 2) - *((void *)a2 + 1)) & 0x7FFFFFFF8) == 0) {
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      LODWORD(v15) = 1;
    }
    if (!v15) {
      break;
    }
    if (!a3) {
      break;
    }
    unsigned int v16 = *v6;
    if (!*v6) {
      break;
    }
    uint64_t v17 = (XlCellRow *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 5);
    if (v17)
    {
      unsigned int v18 = v17;
      uint64_t v19 = *((void *)v17 + 1);
      *(_WORD *)(v19 + 8) = v16->var1;
      *(_DWORD *)(v19 + 10) = 983295;
      *(unsigned char *)(v19 + 19) = 1;
      XlCellRow::takeCell(v17, v16);
      uint64_t v21 = *((void *)this + 52);
      uint64_t v20 = *((void *)this + 53);
      uint64_t v22 = v20 - (v21 + 8);
      if (v20 != v21 + 8) {
        memmove(*((void **)this + 52), (const void *)(v21 + 8), v20 - (v21 + 8));
      }
      *((void *)this + 53) = v21 + v22;
      XlRowBlock::takeRow(a2, v18);
    }
    uint64_t v6 = (XlCell **)*((void *)this + 52);
    uint64_t v7 = *((void *)this + 53);
  }
  while (((v7 - (void)v6) & 0x7FFFFFFF8) != 0);
}

void sub_238C6F4A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setRightIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x10000000000000uLL;
  *((_WORD *)this + 140) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLeftIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x20000000000000uLL;
  *((_WORD *)this + 141) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineIndentCharacterUnits(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x40000000000000uLL;
  *((_WORD *)this + 142) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLineSpaceBefore(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x80000000000000uLL;
  *((_WORD *)this + 143) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLineSpaceAfter(WrdParagraphProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 0x100000000000000uLL;
  *((_WORD *)this + 144) = a2;
  return this;
}

uint64_t **EshOpt::takeBlipRecordProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  if (!v6) {
    goto LABEL_10;
  }
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_5:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  unsigned int v10 = a2;
  unsigned int v11 = &v10;
  if (!*((unsigned char *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)+ 40))
  {
    unsigned int v10 = a2;
    unsigned int v11 = &v10;
    unsigned int v8 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[6];
    if (v8) {
      (*(void (**)(uint64_t *))(*v8 + 8))(v8);
    }
  }
LABEL_10:
  unsigned int v10 = a2;
  unsigned int v11 = &v10;
  uint64_t result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = 0;
  result[6] = a3;
  return result;
}

uint64_t *EshFill::getBlipRecordReference(EshFill *this)
{
  return EshOpt::getProperty((uint64_t)this->var2, 0x186u)[1];
}

uint64_t XlChartCategoryAxis::takeAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 160);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 160) = a2;
  return result;
}

void XlChartAxisAlignment::~XlChartAxisAlignment(XlChartAxisAlignment *this)
{
}

unsigned __int16 *WrdCharacterProperties::getUnderlineColorReference(WrdCharacterProperties *this)
{
  *(void *)&this->var2 |= 0x20000000000000uLL;
  return &this->var3.var3;
}

WrdParagraphProperties *WrdParagraphProperties::setNoOverlapAllowed(WrdParagraphProperties *this, char a2)
{
  *((_WORD *)this + 12) |= 2u;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFDFFFFFF | ((a2 & 1) << 25);
  return this;
}

WrdTableProperties *WrdTableProperties::setDoNotAllowOverlap(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x800000u;
  *((unsigned char *)this + 390) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setLineBreak(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  uint64_t result = a1 + 24;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 0x100;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

OcBinaryData *WrdBinaryReader::read(OcBinaryData *result, uint64_t a2)
{
  uint64_t v2 = *(SsrwOOStream **)(*(void *)&result->var6 + 120);
  if (v2)
  {
    int v3 = result;
    __int16 v4 = (OcBinaryData *)(a2 + 8);
    unsigned int v5 = (*((uint64_t (**)(void))v2->var0 + 4))(*(void *)(*(void *)&result->var6 + 120));
    unsigned int v6 = *((_DWORD *)&v3[12].var6 + 1);
    unsigned int var7 = v3[12].var7;
    return OcBinaryData::setDataInfo(v4, v2, v5, v6, var7);
  }
  return result;
}

void sub_238C6FB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C70108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_238C70388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C705FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C707BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C709E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C70BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlOleSize::XlOleSize(XlOleSize *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0468;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, XlDConRef *a2)
{
  __int16 v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  (*(void (**)(uint64_t, XlRef *))(*(void *)a1 + 1504))(a1, v4);
  XlDConRef::setConsolidationArea(a2, v4);
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void sub_238C70CE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlDocumentProperties::setOleSize(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 102) = 1;
  return XlRef::operator=(a1 + 92, *(void *)(a2 + 16));
}

void XlOleSize::~XlOleSize(XlOleSize *this)
{
  *(void *)this = &unk_26EBE0468;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0468;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

void sub_238C70FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setWordWrap(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x400000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFF7FF | ((a2 & 1) << 11);
  return this;
}

void PptPrintOptions::PptPrintOptions(PptPrintOptions *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECD38;
  *(void *)(v2 + 32) = &unk_26EBECDE0;
  *(_WORD *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 58) = 0;
}

uint64_t PptPrintOptions::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptPrintOptions *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 2)
    || (*((unsigned char *)a2 + 56) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 3)
    || (*((unsigned char *)a2 + 57) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 58) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptPrintOptions::~PptPrintOptions(PptPrintOptions *this)
{
}

void sub_238C715A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C716B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *yyFlexLexer::yy_push_state(_DWORD *this, int a2)
{
  uint64_t v3 = (uint64_t)this;
  int v4 = this[9];
  if (this[8] >= v4)
  {
    int v5 = v4 + 25;
    this[9] = v5;
    unsigned int v6 = (void *)*((void *)this + 5);
    this = v6 ? malloc_type_realloc(v6, 4 * v5, 0xA7BF72DAuLL) : malloc_type_malloc(4 * v5, 0xCCAAE399uLL);
    *(void *)(v3 + 40) = this;
    if (!this) {
      this = (_DWORD *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)v3 + 112))(v3, "out of memory expanding start-condition stack");
    }
  }
  int v7 = *(_DWORD *)(v3 + 404);
  if (v7 >= 1) {
    --v7;
  }
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_DWORD *)(v8 + 4 * v9) = v7 >> 1;
  *(_DWORD *)(v3 + 404) = (2 * a2) | 1;
  return this;
}

uint64_t yyFlexLexer::LexerOutput(yyFlexLexer *this, const char *a2)
{
  return MEMORY[0x270F98750]((char *)this + 216, a2);
}

uint64_t yysyntax_error(char *a1, int a2, unsigned int a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v3 = yypact[a2];
  if (v3 >= -188)
  {
    if (a3 > 0x130) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = yytranslate[a3];
    }
    int v7 = yytname[v5];
    uint64_t v8 = yytnamerr(0, v7);
    long long v38 = 0u;
    long long v37 = 0u;
    uint64_t v36 = v7;
    strcpy(v35, "syntax error, unexpected %s");
    int v9 = -v3 & (v3 >> 31);
    if (336 - v3 >= 50) {
      int v10 = 50;
    }
    else {
      int v10 = 336 - v3;
    }
    if (v9 < v10)
    {
      int v11 = 0;
      uint64_t v12 = &v35[27];
      uint64_t v13 = v9;
      uint64_t v14 = v3;
      uint64_t v15 = v10;
      unsigned int v16 = ", expecting %s";
      int v17 = 1;
      uint64_t v34 = v8;
      unint64_t v18 = v8;
      while (1)
      {
        if (v13 != 1 && v13 == yycheck[v13 + v14])
        {
          if (v17 == 5)
          {
            v35[27] = 0;
            int v17 = 1;
            unint64_t v18 = v34;
            goto LABEL_24;
          }
          uint64_t v19 = yytname[v13];
          (&v36)[v17] = v19;
          uint64_t v20 = yytnamerr(0, v19);
          BOOL v21 = __CFADD__(v20, v18);
          v18 += v20;
          int v22 = v21;
          --v12;
          do
          {
            int v23 = *(unsigned __int8 *)v16++;
            *++uint64_t v12 = v23;
          }
          while (v23);
          ++v17;
          v11 |= v22;
          unsigned int v16 = " or %s";
        }
        if (++v13 >= v15) {
          goto LABEL_24;
        }
      }
    }
    int v11 = 0;
    int v17 = 1;
    unint64_t v18 = v8;
LABEL_24:
    uint64_t v24 = 0;
    while (v35[v24++])
      ;
    unint64_t v6 = v18 + v24 - 1;
    if (v11 | (v6 < v18)) {
      return -1;
    }
    if (!a1) {
      return v6;
    }
    int v27 = 0;
    for (uint64_t i = v35; ; i += v32)
    {
      int v29 = *i;
      *a1 = v29;
      if (v29 != 37) {
        break;
      }
      if (i[1] != 115 || v27 >= v17) {
        goto LABEL_38;
      }
      int v33 = v27 + 1;
      uint64_t v31 = yytnamerr(a1, (&v36)[v27]);
      uint64_t v32 = 2;
      int v27 = v33;
LABEL_40:
      a1 += v31;
    }
    if (!v29) {
      return v6;
    }
LABEL_38:
    uint64_t v31 = 1;
    uint64_t v32 = 1;
    goto LABEL_40;
  }
  return 0;
}

uint64_t yytnamerr(char *a1, const char *a2)
{
  if (*a2 != 34)
  {
LABEL_13:
    uint64_t v10 = 0;
    if (a1)
    {
      do
      {
        int v11 = a2[v10];
        a1[v10++] = v11;
      }
      while (v11);
    }
    else
    {
      while (a2[v10++])
        ;
    }
    return v10 - 1;
  }
  uint64_t v2 = 0;
  int v3 = a2;
  for (i = a2; ; int v3 = i)
  {
    int v6 = *++i;
    int v5 = v6;
    char v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        int v9 = *((unsigned __int8 *)v3 + 2);
        uint64_t v8 = v3 + 2;
        if (v9 != 92) {
          goto LABEL_13;
        }
        char v7 = 92;
        uint64_t i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34) {
      break;
    }
    if (v5 == 39 || v5 == 44) {
      goto LABEL_13;
    }
LABEL_10:
    if (a1) {
      a1[v2] = v7;
    }
    ++v2;
  }
  if (a1) {
    a1[v2] = 0;
  }
  return v2;
}

void sub_238C71BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7201C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C72458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C72728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C727B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *yyFlexLexer::yy_pop_state(_DWORD *this)
{
  uint64_t v1 = this;
  int v2 = this[8];
  int v3 = v2 - 1;
  this[8] = v2 - 1;
  if (v2 <= 0)
  {
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *, const char *))(*(void *)this + 112))(this, "start-condition stack underflow");
    int v3 = v1[8];
  }
  v1[101] = (2 * *(_DWORD *)(*((void *)v1 + 5) + 4 * v3)) | 1;
  return this;
}

void sub_238C72A70(_Unwind_Exception *a1)
{
  char v7 = v3;

  _Unwind_Resume(a1);
}

void sub_238C72E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C72FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C733E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C73C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C73EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C73FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C74058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C740DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7423C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C74300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C74498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7451C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C747C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C74A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptOEShapeAtom::PptOEShapeAtom(PptOEShapeAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC858;
  *(void *)(v2 + 32) = &unk_26EBEC900;
}

uint64_t PptOEShapeAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOEShapeAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptOEShapeAtom::~PptOEShapeAtom(PptOEShapeAtom *this)
{
}

void sub_238C74F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, id a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238C7530C(_Unwind_Exception *a1)
{
  int v6 = v2;

  _Unwind_Resume(a1);
}

void sub_238C75760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_238C75B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C75F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7607C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C762B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7633C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C764A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartSurfacePlot::XlChartSurfacePlot(XlChartSurfacePlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartSurface::XlChartSurface((XlChartSurface *)(v2 + 144));
  *(void *)this = &unk_26EBDCB40;
  *((void *)this + 18) = &unk_26EBDCB68;
}

void sub_238C7680C(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartSurface::XlChartSurface(XlChartSurface *this)
{
  XlRecord::XlRecord(this, 4159, 2, 0);
  *(void *)uint64_t v1 = &unk_26EBDC370;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSurface *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartSurfacePlot::getChartType(XlChartSurfacePlot *this)
{
  return 8;
}

void sub_238C769A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartSurfacePlot::~XlChartSurfacePlot(XlChartSurfacePlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_238C76CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C76DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C76F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C776E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C77818(_Unwind_Exception *a1)
{
  uint64_t v8 = v6;

  _Unwind_Resume(a1);
}

void sub_238C77868()
{
  JUMPOUT(0x238C77854);
}

void sub_238C77874()
{
}

void sub_238C7787C()
{
}

void sub_238C7793C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C779C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C77B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C77C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C77D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C77DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C77F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7804C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7821C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C78290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C78300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C783F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL XlFormula::getBooleanResult(XlFormula *this)
{
  return *((unsigned char *)this + 26) != 0;
}

void XlImData::XlImData(XlImData *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFDE8;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 1;
  *(unsigned char *)(v2 + 36) = 0;
}

void XlImData::~XlImData(XlImData *this)
{
  *(void *)this = &unk_26EBDFDE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDFDE8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void XlChartRadarPlot::XlChartRadarPlot(XlChartRadarPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartRadar::XlChartRadar((XlChartRadar *)(v2 + 144));
  *(void *)this = &unk_26EBDCAB8;
  *((void *)this + 18) = &unk_26EBDCAE0;
}

void sub_238C7882C(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartRadar::XlChartRadar(XlChartRadar *this)
{
  XlRecord::XlRecord(this, 4158, 2, 0);
  *(void *)uint64_t v1 = &unk_26EBDBFF0;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartRadar *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartRadarPlot::getChartType(XlChartRadarPlot *this)
{
  return 6;
}

void XlChartRadarPlot::~XlChartRadarPlot(XlChartRadarPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_238C789D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setUseParagraphStylesProperties(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 1uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFE | a2 & 1;
  return this;
}

uint64_t WrdParagraphProperties::getBorderBarReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x80u;
  return *((void *)this + 12);
}

void sub_238C78BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshStroke::getColor2(EshStroke *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x1C2u);
}

uint64_t WrdParagraphProperties::setBorderCode(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000uLL;
  *(_DWORD *)(result + 148) = a2;
  return result;
}

void sub_238C78EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_238C795F0(_Unwind_Exception *a1)
{
  int v6 = v4;

  _Unwind_Resume(a1);
}

void sub_238C796AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7992C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C79B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C79D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C79E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7A33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238C7A50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7A74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7AC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7AD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7AE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7AF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B26C(_Unwind_Exception *a1)
{
  char v7 = v5;

  _Unwind_Resume(a1);
}

void sub_238C7B374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t setStyleForEDCell(EDCellHeader *a1, EDStyle *a2, EDResources *a3)
{
  int v5 = a2;
  int v6 = a3;
  char v7 = v6;
  if (a1)
  {
    uint64_t v8 = [(EDResources *)v6 styles];
    uint64_t v9 = [v8 addOrEquivalentObject:v5];

    a1->unsigned int var1 = v9;
  }
  else
  {
    uint64_t v9 = -1;
  }

  return v9;
}

void sub_238C7B418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7B768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t styleIndexForEDRowInfo(EDRowInfo *a1)
{
  if (!a1) {
    return -1;
  }
  if (a1->var0 == -1) {
    return -1;
  }
  return a1->var0;
}

void sub_238C7B808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double TSUMix(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

void sub_238C7BA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7BC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7BD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7BDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptComment10Atom::PptComment10Atom(PptComment10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1820;
  *(void *)(v2 + 32) = &unk_26EBF18C8;
  *(_WORD *)(v2 + 60) = 0;
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 55) = 0;
}

uint64_t PptComment10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptComment10Atom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *(void *)((char *)a2 + 52) = OcParser::parseSystemTimeFromStream(*((OcParser **)this + 1), v4);
  *((_WORD *)a2 + 30) = (_WORD)v5;
  OcParser::parsePointI4FromStream(*((OcParser **)this + 1), v5, &v7);
  *((void *)a2 + 8) = v7;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptComment10Atom::~PptComment10Atom(PptComment10Atom *this)
{
  *(void *)this = &unk_26EBF1820;
  *((void *)this + 4) = &unk_26EBF18C8;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1820;
  *((void *)this + 4) = &unk_26EBF18C8;
}

void XlHLinkToolTip::XlHLinkToolTip(XlHLinkToolTip *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  void *v2 = &unk_26EBDFD68;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHLinkToolTip *a2)
{
  if (a2->var1.var0 <= 9)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  unsigned int var0 = a2->var1.var0;
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v7 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  unsigned int v8 = var0 - 10;
  if (v8)
  {
    uint64_t v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8 >> 1, 1, v7 + v6, v9);
    XlAddMenu::setMenuItem((XlAddMenu *)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C7C29C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238C7C350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlHLinkToolTip::~XlHLinkToolTip(XlHLinkToolTip *this)
{
  XlHLinkToolTip::~XlHLinkToolTip(this);
  JUMPOUT(0x23EC997B0);
}

{
  XlRef *var2;
  XlString *var3;

  this->unsigned int var0 = (void **)&unk_26EBDFD68;
  var2 = this->var2;
  if (var2) {
    MEMORY[0x23EC997B0](var2, 0x1000C400EA6A39BLL);
  }
  this->var2 = 0;
  int var3 = this->var3;
  if (var3) {
    (*(void (**)(XlString *))(*(void *)var3 + 8))(var3);
  }
  this->int var3 = 0;
}

void sub_238C7C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7C710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7CAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7D694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7D790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7D91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7DACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7DCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7DE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7DEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7E1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7E298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7E504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7E8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_238C7F138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C7F258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlTable::XlTable(XlTable *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1D78;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTable *a2)
{
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea((XlDConRef *)a2, v4);
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 24) = v5 & 1;
  *((unsigned char *)a2 + 25) = (v5 & 2) != 0;
  *((unsigned char *)a2 + 26) = (v5 & 4) != 0;
  *((unsigned char *)a2 + 27) = (v5 & 8) != 0;
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C7F480(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XlChartPicF *XlChartFrameType::takePictureFormat(XlChartFrameType *this, XlChartPicF *a2)
{
  uint64_t result = this->var11;
  if (result) {
    uint64_t result = (XlChartPicF *)(*((uint64_t (**)(XlChartPicF *))result->var0 + 1))(result);
  }
  this->var11 = a2;
  return result;
}

void XlTable::~XlTable(XlTable *this)
{
  *(void *)this = &unk_26EBE1D78;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBE1D78;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
}

void sub_238C7F614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7F6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C7F710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlSxIDStm::XlSxIDStm(XlSxIDStm *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE18B8;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxIDStm::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1128))(a2, a1);
}

void XlSxVs::XlSxVs(XlSxVs *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1CB8;
  *(_DWORD *)(v2 + 16) = 1;
}

uint64_t XlSxVs::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1264))(a2, a1);
}

void XlDConRef::XlDConRef(XlDConRef *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF1A8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
}

uint64_t XlDConRef::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 568))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDConRef *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v6, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v6);
  XlDConRef::setConsolidationArea(a2, v6);
  uint64_t v7 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    unsigned int v8 = (*(uint64_t (**)(void))(v7 + 64))();
  }
  else {
    unsigned int v8 = (*(uint64_t (**)(void))(v7 + 80))();
  }
  unsigned int v9 = v8;
  *((_WORD *)a2 + 12) = v8;
  if (v8)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v10 = 0;
    }
    else {
      char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    int v11 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v11);
    *((void *)this + 4) = v11;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v10, v5 + v4, v11);
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C7FD68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlGenericRecord::XlGenericRecord(XlGenericRecord *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFB68;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 16) = *(_WORD *)(v2 + 12);
  *(_WORD *)(v2 + 12) = 0;
}

uint64_t XlGenericRecord::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a1);
}

void XlPivotInfo::~XlPivotInfo(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlDConRef::~XlDConRef(XlDConRef *this)
{
  XlDConRef::~XlDConRef(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26EBDF1A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
  int v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
}

void XlSxVs::~XlSxVs(XlSxVs *this)
{
}

void XlSxIDStm::~XlSxIDStm(XlSxIDStm *this)
{
}

void sub_238C80028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C80290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8036C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C805D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C80900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238C80A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C80D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C81198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238C812B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C813C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C81618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C81770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartCustomLabel::XlChartCustomLabel(XlChartCustomLabel *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBA68;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartCustomLabel *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  XlParserVisitor::beginRead(this);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 12, 1);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  unsigned int v7 = v6;
  if (v6)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v8 = 0;
    }
    else {
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    unsigned int v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlChartParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
    XlChartCustomLabel::takeSeparatorText((uint64_t)a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C8198C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartCustomLabel::~XlChartCustomLabel(XlChartCustomLabel *this)
{
  *(void *)this = &unk_26EBDBA68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDBA68;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void sub_238C81EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t categoryForType(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 21:
    case 25:
      uint64_t result = 2;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 33:
    case 34:
    case 65:
    case 66:
    case 97:
    case 98:
      uint64_t result = 1;
      break;
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 44:
    case 45:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 64:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 75:
    case 76:
    case 77:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 96:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
      return result;
    default:
      uint64_t result = 3;
      break;
  }
  return result;
}

void sub_238C826CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartAreaPlot::XlChartAreaPlot(XlChartAreaPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartArea::XlChartArea((XlChartArea *)(v2 + 144));
  *(void *)this = &unk_26EBDC638;
  *((void *)this + 18) = &unk_26EBDC660;
}

void sub_238C828E8(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartArea::XlChartArea(XlChartArea *this)
{
  XlRecord::XlRecord(this, 4122, 2, 0);
  *(void *)uint64_t v1 = &unk_26EBDB6E8;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartArea *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartAreaPlot::getChartType(XlChartAreaPlot *this)
{
  return 4;
}

void sub_238C82A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C82B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartAreaPlot::~XlChartAreaPlot(XlChartAreaPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

uint64_t XlParserVisitor::seekCurrentRecord(uint64_t this)
{
  if (!*(unsigned char *)(this + 100)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(this + 16) + 16))(*(void *)(this + 16), 4294967292, 1);
  }
  if ((*(_DWORD *)(this + 84) & 0x80000000) == 0) {
    return (*(uint64_t (**)(void))(**(void **)(this + 16) + 16))();
  }
  return this;
}

void sub_238C82C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptTextMasterStyle10Atom::PptTextMasterStyle10Atom(PptTextMasterStyle10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF04F8;
  *(void *)(v2 + 32) = &unk_26EBF05A0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyle10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyle10Atom *a2)
{
  if ((*(int (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1)) >= 1) {
    PptTextMasterStyle10Atom::addLevel(a2);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextMasterStyle10Atom::addLevel(PptTextMasterStyle10Atom *this)
{
}

void sub_238C82F7C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C404F21501ELL);
  _Unwind_Resume(a1);
}

void PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom(PptTextMasterStyle10Atom *this)
{
  PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBF04F8;
  *((void *)this + 4) = &unk_26EBF05A0;
  PptTextMasterStyle10Atom::cleanup((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextMasterStyle10Atom::cleanup(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 48);
  if (((*(void *)(this + 56) - v2) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v3 = 0;
    do
    {
      uint64_t v4 = v3;
      this = *(void *)(v2 + 8 * v3);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C404F21501ELL);
        uint64_t v2 = *(void *)(v1 + 48);
      }
      *(void *)(v2 + 8 * v4) = 0;
      *(void *)(*(void *)(v1 + 48) + 8 * v4) = 0;
      unsigned __int16 v3 = v4 + 1;
      uint64_t v2 = *(void *)(v1 + 48);
    }
    while (((unint64_t)(*(void *)(v1 + 56) - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  *(void *)(v1 + 56) = v2;
  return this;
}

uint64_t EshShadow::getSoftness(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2) + 128, 0x21Cu);
}

SsrwOOStorage *ChAutoPtr<SsrwOOStorage>::setValue(SsrwOOStorage **a1, SsrwOOStorage *a2)
{
  uint64_t result = *a1;
  if (result != a2)
  {
    if (result)
    {
      SsrwOOStorage::~SsrwOOStorage(result);
      uint64_t result = (SsrwOOStorage *)MEMORY[0x23EC997B0]();
    }
    *a1 = a2;
  }
  return result;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartPicF *a2)
{
  XlParserVisitor::beginRead(this);
  a2->int var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  a2->var4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  a2->var5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var2 = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C8330C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C83438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C836F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C838D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptExControlAtom::PptExControlAtom(PptExControlAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEA660;
  *(void *)(v2 + 32) = &unk_26EBEA708;
}

uint64_t PptExControlAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExControlAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExControlAtom::~PptExControlAtom(PptExControlAtom *this)
{
}

void *EshPathParamTable::clone(EshPathParamTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD6120;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238C83B54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeParams(EshPath *this, EshPathParamTable *a2)
{
  return EshOpt::takeComplexProperty((uint64_t)this->var2, 0x145u, (uint64_t *)a2);
}

WrdParagraphProperties *WrdParagraphProperties::resetListProperties(WrdParagraphProperties *this)
{
  uint64_t v1 = 0;
  *((void *)this + 2) &= ~0x100uLL;
  *((_DWORD *)this + 34) = 0;
  uint64_t v2 = *((void *)this + 25);
  uint64_t v3 = *((void *)this + 26);
  uint64_t v4 = *((void *)this + 27);
  do
  {
    *(_WORD *)(v2 + v1) = 0;
    *(_WORD *)(v3 + v1) = 0;
    *(_WORD *)(v4 + v1) = 0;
    v1 += 2;
  }
  while (v1 != 128);
  uint64_t v5 = *((void *)this + 2);
  __int16 v6 = *((_WORD *)this + 12);
  *((_WORD *)this + 71) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_WORD *)this + 142) = 0;
  *((void *)this + 2) = v5 & 0x78FFFFFFFFFFFE7;
  *((_WORD *)this + 12) = v6 & 0xFFFE;
  *((unsigned char *)this + 300) = 9;
  return this;
}

void sub_238C83C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WrdTableProperties *WrdTableProperties::setBottomDistanceFromText(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x4000000000000uLL;
  *((_DWORD *)this + 81) = a2;
  return this;
}

void sub_238C83DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdBookmark::setExtraData(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (v3)
  {
    if (*(unsigned __int16 *)(this + 40) > a2) {
      *(unsigned char *)(v3 + a2) = a3;
    }
  }
  return this;
}

void sub_238C83F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C841B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationTable::getAnnotationForBookmark(WrdAnnotationTable *this, int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (unint64_t)(*((void *)this + 2) - v3) >> 3;
  if (!v4) {
    return 0;
  }
  uint64_t result = *(void *)v3;
  if (*(_DWORD *)(*(void *)(*(void *)v3 + 24) + 32) != a2)
  {
    unsigned __int16 v7 = 0;
    while (v4 > ++v7)
    {
      unsigned int v6 = v7;
      uint64_t result = *(void *)(v3 + 8 * v7);
      if (*(_DWORD *)(*(void *)(result + 24) + 32) == a2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
  unsigned int v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void sub_238C84320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C843F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C844EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t EshTextPath::getAlign(EshTextPath *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0xC2u);
}

void sub_238C845E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C846AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double NSNonNegativeSizeRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX - fabs(a3) * 0.5;
}

uint64_t WrdTableProperties::getDiagonalDownBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x800uLL;
  return *((void *)this + 13);
}

uint64_t WrdTableProperties::getDiagonalUpBorderReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 0x1000uLL;
  return *((void *)this + 14);
}

uint64_t **WrdStyle::takeTableProps(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v5 = (uint64_t **)(a1 + 128);
  for (uint64_t i = *(uint64_t **)(a1 + 136); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v7 = *((_DWORD *)i + 8);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        unsigned int v11 = a2;
        uint64_t v12 = &v11;
        char v8 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 128), &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        if (v8) {
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        }
        unsigned int v11 = a2;
        uint64_t v12 = &v11;
        std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
        break;
      }
      ++i;
    }
  }
  unsigned int v11 = a2;
  uint64_t v12 = &v11;
  uint64_t result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
  result[5] = a3;
  return result;
}

uint64_t **WrdStyle::takeCharProps(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v5 = (uint64_t **)(a1 + 104);
  for (uint64_t i = *(uint64_t **)(a1 + 112); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v7 = *((_DWORD *)i + 8);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        unsigned int v11 = a2;
        uint64_t v12 = &v11;
        char v8 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        if (v8) {
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        }
        unsigned int v11 = a2;
        uint64_t v12 = &v11;
        std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
        break;
      }
      ++i;
    }
  }
  unsigned int v11 = a2;
  uint64_t v12 = &v11;
  uint64_t result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
  result[5] = a3;
  return result;
}

uint64_t *WrdStyle::getCharPropsReference(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 152) != 3 || (uint64_t v2 = *(uint64_t **)(a1 + 112)) == 0)
  {
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  unsigned int v6 = a2;
  unsigned int v7 = &v6;
  return std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v6, (uint64_t)&std::piecewise_construct, &v7)[5];
}

uint64_t WrdStyle::getTableProps(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 152) != 3) {
    goto LABEL_8;
  }
  unint64_t v4 = *(uint64_t **)(a1 + 136);
  uint64_t v2 = (uint64_t *)(a1 + 136);
  unsigned int v3 = v4;
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v5 = v3;
  while (1)
  {
    unsigned int v6 = *((_DWORD *)v5 + 8);
    if (a2 >= v6) {
      break;
    }
LABEL_7:
    uint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_8;
    }
  }
  if (v6 < a2)
  {
    ++v5;
    goto LABEL_7;
  }
  char v8 = v2;
  do
  {
    unsigned int v9 = *((_DWORD *)v3 + 8);
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unsigned int v11 = (uint64_t **)v3;
    }
    else {
      unsigned int v11 = (uint64_t **)(v3 + 1);
    }
    if (v10) {
      char v8 = v3;
    }
    unsigned int v3 = *v11;
  }
  while (*v11);
  if (v8 == v2 || *((_DWORD *)v8 + 8) > a2)
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return v8[5];
}

void sub_238C84B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **ChAutoPtr<ChStack<XlPtg *>>::~ChAutoPtr(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = ChStack<XlPtg *>::~ChStack(v2);
    MEMORY[0x23EC997B0](v3, 0x1080C40E1DA5700);
  }
  *a1 = 0;
  return a1;
}

unsigned __int16 *extractDataFromPtgAreaBuffer(unsigned __int16 *a1, int *a2, int *a3, int *a4, int *a5)
{
  return extractDataFromPtgAreaBuffer(a1, a2, &v9, a3, &v8, a4, &v7, a5, &v6);
}

uint64_t SsrwOOMemStream::readString16(uint64_t this, unsigned int *a2, unsigned __int16 *a3)
{
  uint64_t v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(v6);
      a3[v7] = this;
      if (!this) {
        break;
      }
      if (v4 == ++v7)
      {
        a3[v4] = 0;
        goto LABEL_8;
      }
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

uint64_t SsrwOOMemStream::readChar16(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadUInt16((unsigned __int16 *)(**((void **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

void PptLinkedSlide10Atom::PptLinkedSlide10Atom(PptLinkedSlide10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1C00;
  *(void *)(v2 + 32) = &unk_26EBF1CA8;
}

uint64_t PptLinkedSlide10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptLinkedSlide10Atom *a2)
{
  return 1;
}

void PptLinkedShape10Atom::PptLinkedShape10Atom(PptLinkedShape10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1A10;
  *(void *)(v2 + 32) = &unk_26EBF1AB8;
}

uint64_t PptLinkedShape10Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptLinkedShape10Atom *a2)
{
  return 1;
}

void PptLinkedSlide10Atom::~PptLinkedSlide10Atom(PptLinkedSlide10Atom *this)
{
  *(void *)this = &unk_26EBF1C00;
  *((void *)this + 4) = &unk_26EBF1CA8;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1C00;
  *((void *)this + 4) = &unk_26EBF1CA8;
}

void PptLinkedShape10Atom::~PptLinkedShape10Atom(PptLinkedShape10Atom *this)
{
  *(void *)this = &unk_26EBF1A10;
  *((void *)this + 4) = &unk_26EBF1AB8;
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF1A10;
  *((void *)this + 4) = &unk_26EBF1AB8;
}

void sub_238C8537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WrdParser::parse(SsrwOOStream **this, WrdAnnotationDateTimeTable *a2)
{
  if (*((unsigned __int16 *)this + 116) >= 0x70u)
  {
    uint64_t started = WrdParser::startFCLCB((WrdParser *)this, 0x70u);
    if (HIDWORD(started))
    {
      int v5 = (unsigned __int16)(HIDWORD(started) / 0x12);
      if ((unsigned __int16)(HIDWORD(started) / 0x12))
      {
        do
        {
          uint64_t v6 = (WrdDateTime *)operator new(0x18uLL);
          WrdDateTime::WrdDateTime(v6);
          WrdBaseParser::parseStream((WrdBaseParser *)this, v6, this[16]);
          (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 14, 1);
          XlFormatInfo::takeSection(a2, (XlFormatSection *)v6);
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      WrdAnnotationDateTimeTable::clear(a2);
    }
  }
}

void sub_238C85490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationDateTimeTable::getDateTime(WrdAnnotationDateTimeTable *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *(void *)(v2 + 8 * a2);
}

void ChLogF(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  BOOL v9 = (FILE *)g_pFile;
  if (g_pFile)
  {
    unsigned int v11 = (char *)malloc_type_malloc(0x1F4uLL, 0x25C4A5A8uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      time_t v16 = 0;
      time(&v16);
      uint64_t v13 = localtime(&v16);
      snprintf(__str, 0x16uLL, "%02d/%02d/%04d-%02d:%02d:%02d; ",
        v13->tm_mday,
        v13->tm_mon,
        v13->tm_year + 1900,
        v13->tm_hour,
        v13->tm_min,
        v13->tm_sec);
      size_t v14 = strlen(__str);
      fwrite(__str, 1uLL, v14, v9);
      vsnprintf(v12, 0x1F4uLL, a1, &a9);
      size_t v15 = strlen(v12);
      fwrite(v12, 1uLL, v15, v9);
      fflush(v9);
      free(v12);
    }
  }
}

void sub_238C85DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C85E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C85FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C860E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlOper::XlOper(XlOper *this)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 7) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
}

void XlParserVisitor::visit(XlParserVisitor *this, XlOper *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *(_DWORD *)a2 = v4;
  switch(v4)
  {
    case 1:
      *((double *)a2 + 1) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
      return;
    case 2:
      unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
      if (v6 == 1) {
        int v8 = 512;
      }
      else {
        int v8 = 256;
      }
      if (v5)
      {
        int v9 = v7;
        BOOL v10 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v10);
        *((void *)this + 4) = v10;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5, v6, v9 + v8, v10);
        XlBoundSheet::setName(a2, *((XlString **)this + 4));
        *((void *)this + 4) = 0;
      }
      return;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    case 4:
      *((unsigned char *)a2 + 24) = (*(unsigned int (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) != 0;
      goto LABEL_13;
    case 8:
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      goto LABEL_13;
    default:
      if (v4 != 16) {
        return;
      }
      *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
LABEL_13:
      (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      unsigned int v11 = *(void (**)(void))(**((void **)this + 2) + 72);
      v11();
      return;
  }
}

void sub_238C863D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlExternName::appendOperand(XlExternName *this, XlOper *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 10);
  int v4 = (char *)this + 80;
  unint64_t v5 = v6;
  int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 8);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      size_t v14 = 0;
      uint64_t v16 = 0;
    }
    int v17 = &v14[v10 & 0x7FFFFFFF8];
    uint64_t v18 = &v14[8 * v16];
    *(void *)int v17 = a2;
    int v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 8);
    uint64_t v19 = (char *)*((void *)this + 9);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*((void *)this + 8);
    }
    *((void *)this + 8) = v17;
    *((void *)this + 9) = v8;
    *((void *)this + 10) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *int v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 9) = v8;
}

XlOper **ChAutoPtr<XlOper>::~ChAutoPtr(XlOper **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    XlOper::~XlOper(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

uint64_t XlBaseFormulaTable::remove(XlBaseFormulaTable *this, int a2, int a3)
{
  uint64_t result = XlBaseFormulaTable::locate(this, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v5 = result;
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(v6 + 8 * result);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v6 = *((void *)this + 1);
    }
    *(void *)(v6 + 8 * v7) = 0;
    uint64_t v9 = *((void *)this + 4);
    uint64_t result = *(void *)(v9 + 8 * v7);
    if (result)
    {
      uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4052888210);
      uint64_t v9 = *((void *)this + 4);
    }
    *(void *)(v9 + 8 * v7) = 0;
    if (*((_DWORD *)this + 16) > v5) {
      *((_DWORD *)this + 16) = v5;
    }
  }
  return result;
}

void XlOper::~XlOper(XlOper *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void sub_238C866A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8675C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C867D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshPath::getLimoX(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x153u);
}

uint64_t EshPath::getLimoY(EshPath *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x154u);
}

uint64_t XlChartParserVisitor::visit(SsrwOOStream **this, XlChartPivotTableReference *a2)
{
  XlParserVisitor::beginRead((XlParserVisitor *)this);
  (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[2]->var0 + 2))(this[2], 2, 1);
  (*((void (**)(SsrwOOStream *))this[2]->var0 + 12))(this[2]);
  unsigned int v4 = (*((uint64_t (**)(SsrwOOStream *))this[2]->var0 + 8))(this[2]);
  if (v4)
  {
    unsigned int v5 = v4;
    char v6 = (*((uint64_t (**)(SsrwOOStream *))this[2]->var0 + 8))(this[2]);
    if (this[4])
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    char v7 = v6;
    uint64_t v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    this[4] = (SsrwOOStream *)v8;
    XlStringParser::parse((XlStringParser *)(this + 1), this[2], v5, v7, *((_DWORD *)a2 + 2) + *((_DWORD *)this + 18), v8);
    uint64_t v9 = this[4];
    uint64_t v10 = *((void *)a2 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *((void *)a2 + 2) = v9;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C869D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartPivotChartAppearance::~XlChartPivotChartAppearance(XlChartPivotChartAppearance *this)
{
}

void XlChartPivotTableReference::~XlChartPivotTableReference(XlChartPivotTableReference *this)
{
  *(void *)this = &unk_26EBDE820;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26EBDE820;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

void sub_238C86CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C86EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C86F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C871C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartRadarAreaPlot::XlChartRadarAreaPlot(XlChartRadarAreaPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartRadarArea::XlChartRadarArea((XlChartRadarArea *)(v2 + 144));
  *(void *)this = &unk_26EBDCA30;
  *((void *)this + 18) = &unk_26EBDCA58;
}

void sub_238C872DC(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartRadarArea::XlChartRadarArea(XlChartRadarArea *this)
{
  XlRecord::XlRecord(this, 4160, 2, 0);
  *(void *)uint64_t v1 = &unk_26EBDC030;
  *(_WORD *)(v1 + 16) = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartRadarArea *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartRadarAreaPlot::getChartType(XlChartRadarAreaPlot *this)
{
  return 7;
}

void XlChartRadarAreaPlot::~XlChartRadarAreaPlot(XlChartRadarAreaPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

void sub_238C8779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C879BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C87B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, EDValue a9)
{
  EDValue::~EDValue(&a9);
  _Unwind_Resume(a1);
}

void sub_238C87CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C87DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptTextBlockStyling11Atom::PptTextBlockStyling11Atom(PptTextBlockStyling11Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF06E8;
  *(void *)(v2 + 32) = &unk_26EBF0790;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling11Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling11Atom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v4 < EshRecord::getDataLength(a2) + v4) {
    PptTextBlockStyling11Atom::addStyle(a2);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBlockStyling11Atom::addStyle(PptTextBlockStyling11Atom *this)
{
}

void sub_238C881E8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1020C408CB94CA5);
  _Unwind_Resume(a1);
}

void PptSpecialInfo11::PptSpecialInfo11(PptSpecialInfo11 *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
}

void PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom(PptTextBlockStyling11Atom *this)
{
  PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;

  *(void *)this = &unk_26EBF06E8;
  *((void *)this + 4) = &unk_26EBF0790;
  PptTextBlockStyling11Atom::reset(this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

void *PptTextBlockStyling11Atom::reset(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  unsigned int v3 = this + 6;
  unint64_t v4 = this[7] - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      uint64_t v7 = v1[6];
      unint64_t v8 = v1[7] - v7;
      if (v5 >= (v8 >> 3)) {
        goto LABEL_10;
      }
      this = *(void **)(v7 + 8 * v5);
      if (this)
      {
        PptSpecialInfo11::~PptSpecialInfo11((PptSpecialInfo11 *)this);
        this = (void *)MEMORY[0x23EC997B0]();
        uint64_t v7 = v1[6];
        unint64_t v8 = v1[7] - v7;
      }
      if (v5 >= (v8 >> 3)) {
LABEL_10:
      }
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(void *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    uint64_t v2 = *v3;
  }
  v1[7] = v2;
  return this;
}

void sub_238C88488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C885A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C88708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C88888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C88A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C88BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::readAxisDisplayUnit(XlChartBinaryReader *this, XlChartValueAxis *a2)
{
  unint64_t v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v4, *((unsigned char *)this + 444));
  unint64_t v5 = (XlRecord *)operator new(0x18uLL);
  XlRecord::XlRecord(v5, v4);
  *(void *)unint64_t v5 = &unk_26EBDE9B8;
  *((_DWORD *)v5 + 4) = 0;
  *((unsigned char *)v5 + 20) = 0;
  (*(void (**)(void, XlRecord *))(**((void **)this + 167) + 2320))(*((void *)this + 167), v5);
  XlChartCategoryAxis::takeAlignment((uint64_t)a2, (uint64_t)v5);
  uint64_t v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  char v8 = 1;
  do
  {
    char v9 = v8;
    if ((XlChartBinaryReader::nextSibling(this, v4) & 1) == 0) {
      break;
    }
    if (v4->var1 == 4133)
    {
      unint64_t v11 = (XlChartTextFrame *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 81);
      uint64_t v12 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
      XlChartBinaryReader::readTextFrame((XlParserVisitor **)this, v11, v13, 1);
      XlChartValueAxis::takeUnitTextFrame(a2, v11);
LABEL_7:
      JUMPOUT(0x23EC997B0);
    }
    XlParserVisitor::seekNextRecord(*((void *)this + 167));
    char v8 = 0;
  }
  while ((v9 & 1) != 0);
  uint64_t v10 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 16))(v10, v7, 0);
  goto LABEL_7;
}

void sub_238C88EB8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t XlChartValueAxis::takeUnitTextFrame(XlChartValueAxis *this, XlChartTextFrame *a2)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 21) = a2;
  return result;
}

void XlChartAxisDisplayUnit::~XlChartAxisDisplayUnit(XlChartAxisDisplayUnit *this)
{
}

void sub_238C89244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlScenario::XlScenario(XlScenario *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1200;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 19) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScenario *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = v5;
  *((unsigned char *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 22) = v6;
  unsigned int v7 = *((unsigned __int8 *)a2 + 20);
  if (!*((unsigned char *)a2 + 20))
  {
    unsigned int v9 = v6;
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    char v8 = 0;
  }
  else {
    char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  uint64_t v10 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v10);
  *((void *)this + 4) = v10;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v10);
  XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  unsigned int v9 = *((unsigned __int8 *)a2 + 22);
  if (*((unsigned char *)a2 + 22))
  {
LABEL_8:
    (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v11 = 0;
    }
    else {
      char v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    uint64_t v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((void *)this + 4) = v12;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v11, v4, v12);
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
LABEL_12:
  unsigned int v13 = *((unsigned __int8 *)a2 + 21);
  if (*((unsigned char *)a2 + 21))
  {
    (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v14 = 0;
    }
    else {
      char v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    unsigned int v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((void *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, v4, v15);
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  if (v5 >= 1)
  {
    int v16 = 0;
    *((void *)a2 + 7) = *((void *)a2 + 6);
    do
    {
      __int16 v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      __int16 v18 = v17;
      uint64_t v20 = (char *)*((void *)a2 + 7);
      unint64_t v19 = *((void *)a2 + 8);
      if ((unint64_t)v20 >= v19)
      {
        int v22 = (char *)*((void *)a2 + 6);
        int64_t v23 = v20 - v22;
        unint64_t v24 = (unint64_t)(v20 - v22) >> 1;
        unint64_t v25 = (v19 - (unint64_t)v22) >> 1;
        if (2 * (int)v25 <= (v24 + 1)) {
          unsigned int v26 = v24 + 1;
        }
        else {
          unsigned int v26 = 2 * v25;
        }
        if (v25 >= 0x7FFFFFFF) {
          uint64_t v27 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v27 = v26;
        }
        if (v27)
        {
          int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 64, v27);
          uint64_t v30 = v29;
          int v22 = (char *)*((void *)a2 + 6);
          uint64_t v20 = (char *)*((void *)a2 + 7);
        }
        else
        {
          int v28 = 0;
          uint64_t v30 = 0;
        }
        uint64_t v31 = &v28[v23 & 0x1FFFFFFFELL];
        *(_WORD *)uint64_t v31 = v18;
        uint64_t v21 = v31 + 2;
        while (v20 != v22)
        {
          __int16 v32 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v31 - 1) = v32;
          v31 -= 2;
        }
        *((void *)a2 + 6) = v31;
        *((void *)a2 + 7) = v21;
        *((void *)a2 + 8) = &v28[2 * v30];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_WORD *)uint64_t v20 = v17;
        uint64_t v21 = v20 + 2;
      }
      *((void *)a2 + 7) = v21;
      ++v16;
    }
    while (2 * (unsigned __int16)v5 > (__int16)v16);
    LOWORD(v33) = 0;
    do
    {
      uint64_t v34 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v34);
      *((void *)this + 4) = v34;
      uint64_t v35 = (SsrwOOStream *)*((void *)this + 2);
      if (*((unsigned __int8 *)a2 + 14) < 9u)
      {
        unsigned int v36 = (*((uint64_t (**)(void))v35->var0 + 8))(*((void *)this + 2));
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v36, 0, v4, *((XlString **)this + 4));
      }
      else
      {
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v35, v4, v34);
      }
      XlPhoneticInfo::appendRun(a2, *((XlPhoneticRun **)this + 4));
      *((void *)this + 4) = 0;
      int v33 = (__int16)(v33 + 1);
    }
    while (v33 < v5);
    LOWORD(v37) = 0;
    *((void *)a2 + 13) = *((void *)a2 + 12);
    do
    {
      __int16 v38 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      __int16 v39 = v38;
      int v41 = (char *)*((void *)a2 + 13);
      unint64_t v40 = *((void *)a2 + 14);
      if ((unint64_t)v41 >= v40)
      {
        uint64_t v43 = (char *)*((void *)a2 + 12);
        int64_t v44 = v41 - v43;
        unint64_t v45 = (unint64_t)(v41 - v43) >> 1;
        unint64_t v46 = (v40 - (unint64_t)v43) >> 1;
        if (2 * (int)v46 <= (v45 + 1)) {
          unsigned int v47 = v45 + 1;
        }
        else {
          unsigned int v47 = 2 * v46;
        }
        if (v46 >= 0x7FFFFFFF) {
          uint64_t v48 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v48 = v47;
        }
        if (v48)
        {
          char v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 112, v48);
          uint64_t v51 = v50;
          uint64_t v43 = (char *)*((void *)a2 + 12);
          int v41 = (char *)*((void *)a2 + 13);
        }
        else
        {
          char v49 = 0;
          uint64_t v51 = 0;
        }
        __int16 v52 = &v49[v44 & 0x1FFFFFFFELL];
        *(_WORD *)__int16 v52 = v39;
        uint64_t v42 = v52 + 2;
        while (v41 != v43)
        {
          __int16 v53 = *((_WORD *)v41 - 1);
          v41 -= 2;
          *((_WORD *)v52 - 1) = v53;
          v52 -= 2;
        }
        *((void *)a2 + 12) = v52;
        *((void *)a2 + 13) = v42;
        *((void *)a2 + 14) = &v49[2 * v51];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(_WORD *)int v41 = v38;
        uint64_t v42 = v41 + 2;
      }
      *((void *)a2 + 13) = v42;
      int v37 = (__int16)(v37 + 1);
    }
    while (v37 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238C89A18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlScenario::~XlScenario(XlScenario *this)
{
  XlScenario::~XlScenario(this);
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_26EBE1200;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  unsigned int v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
  int v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 7) = *((void *)this + 6);
  *((void *)this + 13) = *((void *)this + 12);
  XlScenario::clearCells(this);
  int v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
}

void *XlScenario::clearCells(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[9];
  uint64_t v3 = this[10];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[9];
        uint64_t v3 = v1[10];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[10] = v2;
  return this;
}

void sub_238C8A0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8A300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8A588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8A6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238C8ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t isFormulaCell(EDCellHeader *a1)
{
  return (HIBYTE(a1->var0) >> 4) & 1;
}

uint64_t setFormulaIndexForEDCell(uint64_t result, int a2)
{
  if (result)
  {
    if ((*(unsigned char *)(result + 3) & 0x10) != 0) {
      *(_DWORD *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t styleIndexForEDCell(const EDCellHeader *a1)
{
  if (!a1) {
    return -1;
  }
  if (a1->var1 == -1) {
    return -1;
  }
  return a1->var1;
}

_DWORD *errorValueForEDCell(_DWORD *result)
{
  if (result)
  {
    if (*result >> 29 == 5)
    {
      if ((*result & 0x10000000) != 0) {
        return (_DWORD *)result[3];
      }
      else {
        return (_DWORD *)result[2];
      }
    }
    else
    {
      uint64_t v1 = [NSString stringWithUTF8String:"EDErrorValue errorValueForEDCell(const EDCellHeader *)"];
      uint64_t v2 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v1 file:v2 lineNumber:282 isFatal:0 description:"Invalid Cell Type!"];

      +[OITSUAssertionHandler logBacktraceThrottled];
      return 0;
    }
  }
  return result;
}

void sub_238C8B2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t handleExceptionForClientWithCallbacks(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  unsigned int v6 = [v5 name];
  int v7 = [v6 isEqualToString:kCMTopExceptionDocumentIsEncrypted];

  if (v7)
  {
    uint64_t v8 = 64257;
  }
  else
  {
    unsigned int v9 = [v5 name];
    uint64_t v10 = [v5 reason];
    NSLog((NSString *)@"EXCEPTION %@: %@", v9, v10);

    uint64_t v8 = 0xFFFFFFFFLL;
  }
  if (*(void *)(a3 + 32))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      char v11 = [v5 getEntry];
      uint64_t v12 = [v11 getMessageText];

      id v13 = objc_alloc(NSDictionary);
      char v14 = objc_msgSend(v13, "initWithObjectsAndKeys:", v12, *MEMORY[0x263F08320], 0);
    }
    else
    {
      char v14 = 0;
    }
    id v15 = objc_alloc(MEMORY[0x263F087E8]);
    if (v7) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = 912;
    }
    __int16 v17 = (void *)[v15 initWithDomain:@"OfficeImportErrorDomain" code:v16 userInfo:v14];
    (*(void (**)(uint64_t, void *))(a3 + 32))(a2, v17);
  }
  return v8;
}

void sub_238C8B45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OcBinaryData::~OcBinaryData((OcBinaryData *)&a10);
  _Unwind_Resume(a1);
}

void XlBinaryData::XlBinaryData(XlBinaryData *this)
{
  *((void *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlBinaryData *a2)
{
  XlHeader::XlHeader(&v22);
  uint64_t v4 = *((unsigned int *)a2 + 14);
  unsigned int v21 = 0;
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_45:
    unsigned int v7 = 0;
    goto LABEL_46;
  }
  (*(void (**)(void, uint64_t, void))(**((void **)this + 164) + 16))(*((void *)this + 164), v4, 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((unsigned char *)this + 1320));
  unsigned int var0 = v22.var0;
  if ((unsigned __int16)v22.var1 <= 0xEAu)
  {
    if (v22.var1 == 60)
    {
LABEL_13:
      uint64_t v5 = (v4 + 4);
      unsigned int v6 = v22.var0;
      goto LABEL_19;
    }
    if (v22.var1 != 127 && v22.var1 != 233)
    {
LABEL_48:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1009;
    }
    uint64_t v5 = (v4 + 12);
    unsigned int v6 = v22.var0 - 8;
  }
  else
  {
    if ((unsigned __int16)v22.var1 <= 0x808u)
    {
      if ((unsigned __int16)v22.var1 - 235 >= 3) {
        goto LABEL_48;
      }
      goto LABEL_13;
    }
    if (v22.var1 == 2057)
    {
      (*(void (**)(void, void, void))(**((void **)this + 164) + 16))(*((void *)this + 164), (*((_DWORD *)a2 + 4) + v4), 0);
      unsigned int v21 = *((_DWORD *)a2 + 7);
      if ((*(unsigned int (**)(void))(**((void **)this + 164) + 176))(*((void *)this + 164)) < v21) {
        unsigned int v21 = (*(uint64_t (**)(void))(**((void **)this + 164) + 176))(*((void *)this + 164));
      }
      (*(void (**)(void, void, unsigned int *))(**((void **)this + 164) + 56))(*((void *)this + 164), *((void *)a2 + 4), &v21);
      unsigned int v7 = v21;
      goto LABEL_46;
    }
    if (v22.var1 != 2150)
    {
      if (v22.var1 != 4198) {
        goto LABEL_48;
      }
      goto LABEL_13;
    }
    uint64_t v5 = (v4 + 18);
    unsigned int v6 = v22.var0 - 14;
  }
  unsigned int var0 = v6;
LABEL_19:
  if (*((_DWORD *)a2 + 4))
  {
    unsigned int v8 = 0;
    do
    {
      if (!v6)
      {
        (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((unsigned char *)this + 1320));
        if (!(*(unsigned int (**)(XlBinaryReader *, void))(*(void *)this + 680))(this, (unsigned __int16)v22.var1))goto LABEL_45; {
        if (v22.var1 == 2150)
        }
          unsigned int v6 = v22.var0 - 14;
        else {
          unsigned int v6 = v22.var0;
        }
        if (v22.var1 == 2150) {
          LODWORD(v5) = v5 + 18;
        }
        else {
          LODWORD(v5) = v5 + 4;
        }
      }
      unsigned int v9 = v6 + v8;
      unsigned int v10 = *((_DWORD *)a2 + 4);
      unsigned int v11 = v6 - (unsigned __int16)(v10 - v8);
      if (v6 + v8 > v10) {
        unsigned int v6 = (unsigned __int16)(v10 - v8);
      }
      if (v9 <= v10) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = v11;
      }
      unsigned int var0 = v12;
      uint64_t v5 = v6 + v5;
      v8 += v6;
      unsigned int v6 = v12;
    }
    while (v8 < v10);
  }
  (*(void (**)(void, uint64_t, void))(**((void **)this + 164) + 16))(*((void *)this + 164), v5, 0);
  unsigned int v21 = *((_DWORD *)a2 + 7);
  if (!v21) {
    goto LABEL_45;
  }
  unsigned int v7 = 0;
  unsigned int v13 = var0;
  while (1)
  {
    if (!v13)
    {
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v22, *((unsigned char *)this + 1320));
      if (!(*(unsigned int (**)(XlBinaryReader *, void))(*(void *)this + 680))(this, (unsigned __int16)v22.var1))goto LABEL_46; {
      unsigned int v13 = v22.var0;
      }
      unsigned int var0 = v22.var0;
      if (v22.var1 == 2150)
      {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 14, 1);
        unsigned int v13 = var0 - 14;
        var0 -= 14;
      }
    }
    char v14 = *(void (**)(void))(**((void **)this + 164) + 56);
    if (v13 > v21) {
      break;
    }
    v14();
    unsigned int v13 = 0;
    v7 += var0;
    unsigned int v16 = v21 - var0;
    BOOL v15 = v21 == var0;
    unsigned int var0 = 0;
    unsigned int v21 = v16;
    if (v15) {
      goto LABEL_46;
    }
  }
  v14();
  unsigned int v18 = v21;
  unsigned int v21 = 0;
  v7 += v18;
LABEL_46:
  uint64_t result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 8), v7);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

BOOL XlChartBinaryReader::isValidBinaryRecordType(XlChartBinaryReader *this, int a2)
{
  return a2 == 4198 || XlBinaryReader::isValidBinaryRecordType(this, a2);
}

BOOL XlBinaryReader::isValidBinaryRecordType(XlBinaryReader *this, int a2)
{
  return a2 == 235 || a2 == 60 || a2 == 2150;
}

void sub_238C8BCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8BD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8BE64(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238C8C2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_238C8C4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8C540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8C73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8C9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8CB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8CC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8D1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238C8D378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8D69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t EshPathCommand::paramsPerCommand(int a1)
{
  return EshPathCommand::m_commandPropsArray[6 * a1 + 4];
}

void sub_238C8DBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8DD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8DEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8DFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8E0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8E2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238C8E3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8E4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238C8E5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartChartLine *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPlot::takeLeaderLineFormat(XlChartPlot *this, XlChartLineStyle *a2)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = a2;
  return result;
}

unsigned __int16 *extractDataFromPtgRefBuffer(unsigned __int16 *result, int *a2, int *a3)
{
  *a2 = -1;
  *a3 = -1;
  if (result)
  {
    *a2 = *result;
    *a3 = *((unsigned __int8 *)result + 2);
  }
  return result;
}

void OcMsoEnvelope::OcMsoEnvelope(OcMsoEnvelope *this)
{
  *(unsigned char *)this = 0;
  CsString::CsString((CsString *)this + 1);
  FromRecord::FromRecord((OcMsoEnvelope *)((char *)this + 48));
  CsString::CsString((CsString *)((char *)this + 128));
  CsString::CsString((CsString *)((char *)this + 160));
  CsString::CsString((CsString *)((char *)this + 184));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 208));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 232));
  OcContact::OcContact((OcMsoEnvelope *)((char *)this + 256));
  CsString::CsString((CsString *)((char *)this + 280));
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(int32x2_t *)((char *)this + 4) = vdup_n_s32(0x5AE980E0u);
  *((_DWORD *)this + 3) = 1525252320;
  *((_DWORD *)this + 38) = 1;
}

void sub_238C8E830(_Unwind_Exception *a1)
{
  unsigned int v9 = v5;
  OcContactCollection::~OcContactCollection(v9);
  OcContactCollection::~OcContactCollection(v8);
  OcContactCollection::~OcContactCollection(v7);
  CsString::~CsString(v6);
  CsString::~CsString(v4);
  CsString::~CsString(v3);
  CsString::~CsString(v2 + 4);
  CsString::~CsString(v2 + 3);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void sub_238C8E8A8()
{
}

void sub_238C8E8B0()
{
}

void sub_238C8E8B8()
{
}

void FromRecord::FromRecord(FromRecord *this)
{
}

void sub_238C8E8F8(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t PptEnvelopeData9Atom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit()
{
  return 1;
}

void PptEnvelopeData9Atom::~PptEnvelopeData9Atom(PptEnvelopeData9Atom *this)
{
  *(void *)this = &unk_26EBF0A58;
  *((void *)this + 4) = &unk_26EBF0B00;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 48));
  JUMPOUT(0x23EC997B0);
}

{
  *(void *)this = &unk_26EBF0A58;
  *((void *)this + 4) = &unk_26EBF0B00;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 48));
}

void OcMsoEnvelope::~OcMsoEnvelope(OcMsoEnvelope *this)
{
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }
  CsString::~CsString((CsString *)((char *)this + 280));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 256));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 232));
  OcContactCollection::~OcContactCollection((OcMsoEnvelope *)((char *)this + 208));
  CsString::~CsString((CsString *)((char *)this + 184));
  CsString::~CsString((CsString *)((char *)this + 160));
  CsString::~CsString((CsString *)((char *)this + 128));
  CsString::~CsString((CsString *)this + 4);
  CsString::~CsString((CsString *)this + 3);
  CsString::~CsString((CsString *)this + 1);
}

void OcContactCollection::~OcContactCollection(OcContact ***this)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  if ((((char *)v3 - (char *)v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        OcContact::~OcContact(v2[v5]);
        MEMORY[0x23EC997B0]();
        (*this)[v5] = 0;
        uint64_t v2 = *this;
        uint64_t v3 = this[1];
      }
      ++v5;
    }
    while (v5 < ((unint64_t)((char *)v3 - (char *)v2) >> 3));
  }
  if (v2)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void sub_238C8EBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PptExLinkAtom::PptExLinkAtom(PptExLinkAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEAB38;
  *(void *)(v2 + 3CsString::CsString((CsString *)this + 2) = &unk_26EBEABE0;
}

uint64_t PptExLinkAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExLinkAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) & 1;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1 {
    || (PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 3u),
  }
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
    || (*((_DWORD *)a2 + 1CsString::CsString((CsString *)this + 2) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExLinkAtom::~PptExLinkAtom(PptExLinkAtom *this)
{
}

void sub_238C8EFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor()
{
  for (uint64_t i = 0xC8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_0()
{
  for (uint64_t i = 0x88u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0xD8u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[OAXBlipEffects(Private) duotoneTransferModeEnumMap]::duotoneTransferModeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_2()
{
  for (uint64_t i = 0xBE8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_3()
{
  for (uint64_t i = 0xB8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_4()
{
  for (uint64_t i = 0xB8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_5()
{
  for (uint64_t i = 0x1B8u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ55__OAXColorTransform_Private__colorTransformTypeEnumMap_EUb_E29colorTransformTypeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_6()
{
  for (uint64_t i = 0x138u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_7()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_8()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_9()
{
  for (uint64_t i = 0xBA8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_10()
{
  for (uint64_t i = 0x3D8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_11()
{
  for (uint64_t i = 0xB8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_12()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_13()
{
  for (uint64_t i = 0x138u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_14()
{
  for (uint64_t i = 0x288u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_15()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_16()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_17()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_18()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_20()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_21()
{
  for (uint64_t i = 0xD8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_22()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_23()
{
  for (uint64_t i = 0xA8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_24()
{
  for (uint64_t i = 0x128u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_25()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

{
  uint64_t i;

  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_26()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_27()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_28()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_29()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_30()
{
  for (uint64_t i = 0xC78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_31()
{
  for (uint64_t i = 0x118u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_32()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_33()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_34()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_35()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_36()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_37()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

{
  uint64_t i;

  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_38()
{
  for (uint64_t i = 0x88u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[WXOfficeArt relativeHorizontalPositionEnumMap]::sRelativeHorizontalPositionStructs
                       + i));
}

void __cxx_global_array_dtor_39()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_40()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_41()
{
  for (uint64_t i = 0x258u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_42()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_43()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

{
  uint64_t i;

  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_44()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_45()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_46()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_47()
{
  for (uint64_t i = 0x108u; i != -8; i -= 16)
}

{
  uint64_t i;

  for (uint64_t i = 0xA8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_48()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_49()
{
  for (uint64_t i = 0x358u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_50()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_51()
{
  for (uint64_t i = 0xF8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_52()
{
  for (uint64_t i = 0x238u; i != -8; i -= 16)
}

{
  uint64_t i;

  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_53()
{
  for (uint64_t i = 0x348u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_54()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void sub_238C904C8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1080C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void sub_238C91308(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C9139C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C914D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C91564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUFlushableObjectInfo::TSUFlushableObjectInfo(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (objc_opt_respondsToSelector()) {
    *(_DWORD *)(a1 + 8) = [a2 reloadCost];
  }
  *(_DWORD *)(a1 + 1CsString::CsString((CsString *)this + 2) = 1;
  if (objc_opt_respondsToSelector()) {
    *(_DWORD *)(a1 + 1CsString::CsString((CsString *)this + 2) = [a2 flushCost];
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 1;
  return a1;
}

void std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1, *a2);
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__emplace_unique_key_args<TSUFlushableObjectInfo *,TSUFlushableObjectInfo * const&>(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)(*(void *)a2 + 20);
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *(_DWORD *)(v5[4] + 20);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unsigned int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            unsigned int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            OcContactCollection *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)vPptSkipVisitor::beginRead(*((void *)this + 3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)vPptSkipVisitor::beginRead(*((void *)this + 3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__erase_unique<TSUFlushableObjectInfo *>(uint64_t **a1, const TSUFlushableObjectInfo **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>(uint64_t a1, const TSUFlushableObjectInfo **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    uint64_t v6 = TSUFlushableObjectInfo::compareFlushingOrder(*(TSUFlushableObjectInfo **)(v3 + 32), *a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 != -1)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || TSUFlushableObjectInfo::compareFlushingOrder((TSUFlushableObjectInfo *)*a2, *(const TSUFlushableObjectInfo **)(v5 + 32)) == -1)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    BOOL v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unsigned int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        unsigned __int16 v7[2] = (uint64_t)v15;
        unsigned int v16 = v7;
      }
      else
      {
        BOOL v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      unint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v2PptSkipVisitor::beginRead(*((void *)this + 3)) = v24;
      *unint64_t v24 = v23;
      goto LABEL_72;
    }
    unsigned int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    __int16 v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      __int16 v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    unsigned __int16 v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    __int16 v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    unsigned __int16 v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    unsigned __int16 v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v2PptSkipVisitor::beginRead(*((void *)this + 3)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__erase_unique<TSUFlushableObjectInfo *>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

void *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::find<TSUFlushableObjectInfo *>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 20);
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = *(_DWORD *)(v3[4] + 20);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6[4] + 20)) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__emplace_unique_key_args<TSUFlushableObjectInfo *,TSUFlushableObjectInfo * const&>(uint64_t **a1, TSUFlushableObjectInfo **a2, uint64_t *a3)
{
  unsigned int v5 = std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__find_equal<TSUFlushableObjectInfo *>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__find_equal<TSUFlushableObjectInfo *>(uint64_t a1, void *a2, TSUFlushableObjectInfo **a3)
{
  unsigned int v5 = (uint64_t *)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v4;
        if (TSUFlushableObjectInfo::compareFlushingOrder(*a3, (const TSUFlushableObjectInfo *)v4[4]) != -1) {
          break;
        }
        int v4 = (uint64_t *)*v7;
        unsigned int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (TSUFlushableObjectInfo::compareFlushingOrder((TSUFlushableObjectInfo *)v7[4], *a3) != -1) {
        break;
      }
      unsigned int v5 = v7 + 1;
      int v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_238C92140(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_238C92300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t SFUBundle()
{
  if (SFUBundle_onceToken != -1) {
    dispatch_once(&SFUBundle_onceToken, &__block_literal_global);
  }
  return SFUBundle_sSFUBundle;
}

uint64_t __SFUBundle_block_invoke()
{
  uint64_t result = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  SFUBundle_sSFUBundle = result;
  return result;
}

uint64_t TSUHashWithSeed(char *a1, uint64_t a2, uint64_t a3)
{
  for (; a2; --a2)
  {
    uint64_t v3 = *a1++;
    a3 = 0x100000001B3 * (a3 ^ v3);
  }
  return a3;
}

void sub_238C92E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void TSUSetCrashReporterInfovAndCrash(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a2;
  uint64_t v2 = [NSString stringWithUTF8String:a1];
  uint64_t v3 = objc_msgSend([NSString alloc], "tsu_initRedactedWithFormat:arguments:", v2, v6);
  int v4 = (const char *)[v3 UTF8String];
  unsigned int v5 = 0;
  if (v4) {
    asprintf(&v5, "%s", v4);
  }

  _os_crash();
  __break(1u);
}

void TSUCrash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFDateFormatter *TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(const __CFAllocator *a1, void *a2, CFDateFormatterStyle a3, CFDateFormatterStyle a4)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  CFLocaleRef v7 = a2;
  if (!v7)
  {
    BOOL v8 = objc_msgSend(NSString, "stringWithUTF8String:", "CFDateFormatterRef TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(CFAllocatorRef, NSLocale *__strong, CFDateFormatterStyle, CFDateFormatterStyle)");
    uint64_t v9 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:235 isFatal:1 description:"<rdar://problem/29112058>: Shouldn't be passed a locale of NULL"];

    TSUCrash((uint64_t)"<rdar://problem/29112058>: Shouldn't be passed a locale of NULL", v10, v11, v12, v13, v14, v15, v16, v59);
  }
  if (+[OITSULocale localeIsAutoUpdating:v7]
    || (+[OITSULocale currentLocale],
        __int16 v17 = objc_claimAutoreleasedReturnValue(),
        [v17 gregorianCalendarLocale],
        CFLocaleRef v18 = (const __CFLocale *)objc_claimAutoreleasedReturnValue(),
        v18,
        v17,
        v7 == v18))
  {
    uint64_t v20 = CFDateFormatterCreate(a1, v7, a3, a4);
  }
  else
  {
    TSULocaleNSLocaleWithHarmonizedNumberingSystem(v7);
    CFLocaleRef v19 = (const __CFLocale *)objc_claimAutoreleasedReturnValue();

    CFDateFormatterStyle v60 = a3;
    uint64_t v20 = CFDateFormatterCreate(a1, v19, a3, a4);
    BOOL v21 = [(__CFLocale *)v19 localeIdentifier];
    if (TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols_onceToken != -1) {
      dispatch_once(&TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols_onceToken, &__block_literal_global_2);
    }
    [(id)sDateFormatterCldrLock lock];
    uint64_t v22 = [(id)sDateFormatterCldrSymbolsCache objectForKeyedSubscript:v21];
    CFDateFormatterStyle v61 = a4;
    int v62 = v21;
    if (!v22)
    {
      uint64_t v23 = (void *)sDateFormatterCldrSymbolsCache;
      uint64_t v22 = [MEMORY[0x263EFF9A0] dictionary];
      [v23 setObject:v22 forKeyedSubscript:v21];
      unint64_t v24 = SFUBundle();
      uint64_t v25 = +[OITSULocaleStructuredDictionary dictionaryWithContentsOfFileForLocale:v19 inDirectory:@"DateFormatterSymbols" inBundle:v24];

      if (v25
        || (+[OITSULocaleStructuredDictionary dateFormatterSymbolsFallbackDictionary], (uint64_t v25 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        id v26 = (id)sDateFormatterCldrOverridingKeys;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v71 objects:v77 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v72;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v72 != v29) {
                objc_enumerationMutation(v26);
              }
              uint64_t v31 = *(void *)(*((void *)&v71 + 1) + 8 * i);
              uint64_t v32 = [v25 objectForKey:v31 locale:v19];
              if (v32) {
                [v22 setObject:v32 forKeyedSubscript:v31];
              }
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v71 objects:v77 count:16];
          }
          while (v28);
        }

        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id v33 = (id)sDateFormatterCldrOverridingFormatKeys;
        uint64_t v34 = [v33 countByEnumeratingWithState:&v67 objects:v76 count:16];
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)v68;
          do
          {
            for (uint64_t j = 0; j != v35; ++j)
            {
              if (*(void *)v68 != v36) {
                objc_enumerationMutation(v33);
              }
              uint64_t v38 = *(void *)(*((void *)&v67 + 1) + 8 * j);
              __int16 v39 = [v25 objectForKey:v38 locale:v19];
              if (v39) {
                [v22 setObject:v39 forKeyedSubscript:v38];
              }
            }
            uint64_t v35 = [v33 countByEnumeratingWithState:&v67 objects:v76 count:16];
          }
          while (v35);
        }

        BOOL v21 = v62;
      }
    }
    [(id)sDateFormatterCldrLock unlock];
    unint64_t v40 = [v22 objectForKeyedSubscript:@"months.format.narrow"];

    if (v40)
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      id v41 = (id)sDateFormatterCldrOverridingKeys;
      uint64_t v42 = [v41 countByEnumeratingWithState:&v63 objects:v75 count:16];
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = *(void *)v64;
        do
        {
          for (uint64_t k = 0; k != v43; ++k)
          {
            if (*(void *)v64 != v44) {
              objc_enumerationMutation(v41);
            }
            uint64_t v46 = *(void *)(*((void *)&v63 + 1) + 8 * k);
            unsigned int v47 = [(id)sDateFormatterCldrOverridingKeys objectForKeyedSubscript:v46];
            uint64_t v48 = [v22 objectForKeyedSubscript:v46];
            CFDateFormatterSetProperty(v20, v47, v48);
          }
          uint64_t v43 = [v41 countByEnumeratingWithState:&v63 objects:v75 count:16];
        }
        while (v43);
      }

      if ((unint64_t)(v60 - 1) > 3)
      {
        char v49 = 0;
      }
      else
      {
        char v49 = [v22 objectForKeyedSubscript:off_264D60BD0[v60 - 1]];
      }
      BOOL v21 = v62;
      unsigned int v50 = 0;
      uint64_t v51 = @"timeFormats.short";
      switch(v61)
      {
        case kCFDateFormatterNoStyle:
          goto LABEL_48;
        case kCFDateFormatterShortStyle:
          goto LABEL_47;
        case kCFDateFormatterMediumStyle:
          uint64_t v51 = @"timeFormats.medium";
          goto LABEL_47;
        case kCFDateFormatterLongStyle:
          uint64_t v51 = @"timeFormats.long";
          goto LABEL_47;
        case kCFDateFormatterFullStyle:
          uint64_t v51 = @"timeFormats.full";
          goto LABEL_47;
        default:
          if (@"timeFormats.short")
          {
LABEL_47:
            unsigned int v50 = [v22 objectForKeyedSubscript:v51];
          }
          else
          {
            unsigned int v50 = 0;
          }
LABEL_48:
          if (![v62 rangeOfString:@"ar"]
            && [(__CFString *)v49 tsu_containsSubstring:@"\u200F"]
            && [(__CFString *)v49 characterAtIndex:0] != 8207)
          {
            uint64_t v52 = [NSString stringWithFormat:@"\u200F%@", v49];

            char v49 = (__CFString *)v52;
          }
          __int16 v53 = &stru_26EBF24D8;
          if (v49) {
            char v54 = v49;
          }
          else {
            char v54 = &stru_26EBF24D8;
          }
          if (v49) {
            BOOL v55 = v50 == 0;
          }
          else {
            BOOL v55 = 1;
          }
          uint64_t v56 = @" ";
          if (v55) {
            uint64_t v56 = &stru_26EBF24D8;
          }
          if (v50) {
            __int16 v53 = v50;
          }
          int v57 = [NSString stringWithFormat:@"%@%@%@", v54, v56, v53];
          CFDateFormatterSetFormat(v20, v57);

          break;
      }
    }

    CFLocaleRef v7 = v19;
  }

  return v20;
}

id TSUGetGMTTimeZone()
{
  char v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
  if (!TSUGetGMTTimeZone_sGMTTimeZone)
  {
    uint64_t v1 = [MEMORY[0x263EFFA18] timeZoneForSecondsFromGMT:0];
    uint64_t v2 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    TSUGetGMTTimeZone_sGMTTimeZone = v1;

    char v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    if (!TSUGetGMTTimeZone_sGMTTimeZone)
    {
      uint64_t v3 = [NSString stringWithUTF8String:"NSTimeZone *TSUGetGMTTimeZone(void)"];
      int v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
      +[OITSUAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:599 isFatal:0 description:"GMTTimeZone() couldn't create time zone"];

      +[OITSUAssertionHandler logBacktraceThrottled];
      char v0 = (void *)TSUGetGMTTimeZone_sGMTTimeZone;
    }
  }
  return v0;
}

void sub_238C94E78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = [NSString stringWithUTF8String:"NSDictionary *TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(NSLocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:115 isFatal:0 description:"Unspecified locale no longer supported."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  int v4 = SFUBundle();
  unsigned int v5 = [v1 localeIdentifier];
  uint64_t v6 = +[OITSULocale canonicalizeLocaleIdentifierWithLanguageScriptAndRegionOnly:v5];

  CFLocaleRef v7 = [v4 pathForResource:v6 ofType:@"plist" inDirectory:@"DateTimeFormats"];
  if (!v7)
  {
    BOOL v8 = +[OITSULocale canonicalizeLocaleIdentifierWithLanguageOnly:v6];
    uint64_t v9 = +[OITSULocale deducedScriptForLocale:v6];
    uint64_t v10 = [v1 localeIdentifier];
    uint64_t v11 = TSUDateComponentOrderingForLocale(v10);

    uint64_t v12 = off_264D60BF0[v11];
    if (!v9
      || ([NSString stringWithFormat:@"generic-%@-%@-%@", v8, v9, v12],
          uint64_t v13 = objc_claimAutoreleasedReturnValue(),
          [v4 pathForResource:v13 ofType:@"plist" inDirectory:@"DateTimeFormats"],
          CFLocaleRef v7 = objc_claimAutoreleasedReturnValue(),
          v13,
          !v7))
    {
      uint64_t v14 = [NSString stringWithFormat:@"generic-%@-%@", v8, v12];
      CFLocaleRef v7 = [v4 pathForResource:v14 ofType:@"plist" inDirectory:@"DateTimeFormats"];

      if (!v7)
      {
        uint64_t v15 = [NSString stringWithFormat:@"fallback-%@", v12];
        CFLocaleRef v7 = [v4 pathForResource:v15 ofType:@"plist" inDirectory:@"DateTimeFormats"];
      }
    }

    if (!v7)
    {
      uint64_t v16 = [NSString stringWithUTF8String:"NSDictionary *TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(NSLocale *__strong)"];
      __int16 v17 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
      +[OITSUAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:169 isFatal:0 description:"Unable to find path for plist containing date time formats!"];

      +[OITSUAssertionHandler logBacktraceThrottled];
      CFLocaleRef v7 = 0;
    }
  }
  uint64_t v18 = [NSDictionary dictionaryWithContentsOfFile:v7];

  return v18;
}

uint64_t TSUDateComponentOrderingForLocale(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x263EFF960];
  id v2 = a1;
  uint64_t v3 = (void *)[[v1 alloc] initWithLocaleIdentifier:v2];

  int v4 = [MEMORY[0x263F08790] dateFormatFromTemplate:@"yMd" options:0 locale:v3];
  unint64_t v5 = [v4 rangeOfString:@"y"];
  unint64_t v6 = [v4 rangeOfString:@"M"];
  uint64_t v7 = [v4 rangeOfString:@"d"];
  unint64_t v8 = v7;
  if (v5 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x7FFFFFFFFFFFFFFFLL || v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = [NSString stringWithUTF8String:"TSUDateComponentOrdering TSUDateComponentOrderingForLocale(NSString *__strong)"];
    uint64_t v12 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:730 isFatal:0 description:"Format Failed."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v13 = 1;
  uint64_t v14 = 4;
  if (v8 > v6) {
    uint64_t v14 = 5;
  }
  if (v8 >= v5) {
    uint64_t v13 = v14;
  }
  uint64_t v15 = 2;
  if (v8 > v5) {
    uint64_t v15 = 3;
  }
  if (v8 < v6) {
    uint64_t v15 = 0;
  }
  if (v6 < v5) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v13;
  }

  return v16;
}

uint64_t TSUDateFormatterCopyFormatStringForDateAndTimeStyles(CFDateFormatterStyle a1, CFDateFormatterStyle a2, void *a3)
{
  unint64_t v5 = [a3 gregorianCalendarLocale];
  UsingHarmonizedSymbols = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, v5, a1, kCFDateFormatterNoStyle);
  uint64_t v7 = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, v5, kCFDateFormatterNoStyle, a2);
  unint64_t v8 = CFDateFormatterGetFormat(UsingHarmonizedSymbols);
  uint64_t v9 = CFDateFormatterGetFormat(v7);
  uint64_t v10 = &stru_26EBF24D8;
  if ([v8 length] && objc_msgSend(v9, "length")) {
    uint64_t v10 = @" ";
  }
  uint64_t v11 = [NSString stringWithFormat:@"%@%@%@", v8, v10, v9];
  CFRelease(UsingHarmonizedSymbols);
  CFRelease(v7);

  return v11;
}

void __TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols_block_invoke()
{
  v21[14] = *MEMORY[0x263EF8340];
  uint64_t v0 = objc_opt_new();
  id v1 = (void *)sDateFormatterCldrLock;
  sDateFormatterCldrLocuint64_t k = v0;

  id v2 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  uint64_t v3 = (void *)sDateFormatterCldrSymbolsCache;
  sDateFormatterCldrSymbolsCache = (uint64_t)v2;

  uint64_t v4 = *MEMORY[0x263EFFC18];
  v20[0] = @"months.format.narrow";
  v20[1] = @"months.stand-alone.narrow";
  uint64_t v5 = *MEMORY[0x263EFFC20];
  v21[0] = v4;
  v21[1] = v5;
  uint64_t v6 = *MEMORY[0x263EFFBC8];
  unsigned __int16 v20[2] = @"months.format.abbreviated";
  v20[3] = @"months.stand-alone.abbreviated";
  uint64_t v7 = *MEMORY[0x263EFFBD8];
  v21[2] = v6;
  v21[3] = v7;
  uint64_t v8 = *MEMORY[0x263EFFBB0];
  v20[4] = @"months.format.wide";
  v20[5] = @"months.stand-alone.wide";
  uint64_t v9 = *MEMORY[0x263EFFBF8];
  v21[4] = v8;
  v21[5] = v9;
  uint64_t v10 = *MEMORY[0x263EFFC30];
  v20[6] = @"days.format.narrow";
  v20[7] = @"days.stand-alone.narrow";
  uint64_t v11 = *MEMORY[0x263EFFC28];
  v21[6] = v10;
  v21[7] = v11;
  uint64_t v12 = *MEMORY[0x263EFFBF0];
  v20[8] = @"days.format.abbreviated";
  v20[9] = @"days.stand-alone.abbreviated";
  uint64_t v13 = *MEMORY[0x263EFFBE8];
  v21[8] = v12;
  v21[9] = v13;
  uint64_t v14 = *MEMORY[0x263EFFC38];
  v20[10] = @"days.format.wide";
  v20[11] = @"days.stand-alone.wide";
  uint64_t v15 = *MEMORY[0x263EFFC08];
  v21[10] = v14;
  v21[11] = v15;
  v20[12] = @"dayPeriods.format.abbreviated.am";
  v20[13] = @"dayPeriods.format.abbreviated.pm";
  uint64_t v16 = *MEMORY[0x263EFFBB8];
  v21[12] = *MEMORY[0x263EFFB88];
  v21[13] = v16;
  uint64_t v17 = [NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:14];
  uint64_t v18 = (void *)sDateFormatterCldrOverridingKeys;
  sDateFormatterCldrOverridingKeys = v17;

  CFLocaleRef v19 = (void *)sDateFormatterCldrOverridingFormatKeys;
  sDateFormatterCldrOverridingFormatKeys = (uint64_t)&unk_26EC806C0;
}

id TSUDateFormatterStringFromDateWithFormat(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDateFormatterStringFromDateWithFormat(NSDate *__strong, NSString *__strong, OITSULocale *__strong)");
    uint64_t v9 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:396 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v10 = +[OITSUDateFormatter_FormatterCache dateFormatterStringFromDate:v5 withFormat:v6 locale:v7];

  return v10;
}

id TSUShortestCompleteDateTimeFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUShortestCompleteDateTimeFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:404 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = [v1 localeSpecificStorageForKey:@"TSUShortestCompleteDateTimeFormat"];
  if (!v4)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (__CFString *)CFDateFormatterCreateDateFormatFromTemplate(0, @"yMd", 0, (CFLocaleRef)[v1 cfGregorianCalendarLocale]);
    id v7 = (__CFString *)CFDateFormatterCreateDateFormatFromTemplate(0, @"jms", 0, (CFLocaleRef)[v1 cfGregorianCalendarLocale]);
    uint64_t v4 = [NSString stringWithFormat:@"%@ %@", DateFormatFromTemplate, v7];
    [v1 setLocaleSpecificStorage:v4 forKey:@"TSUShortestCompleteDateTimeFormat"];

    objc_sync_exit(v5);
  }

  return v4;
}

void sub_238C958F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUShortestCompleteTimeOnlyFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUShortestCompleteTimeOnlyFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:427 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  DateFormatFromTemplate = [v1 localeSpecificStorageForKey:@"TSUShortestCompleteTimeOnlyFormat"];
  if (!DateFormatFromTemplate)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (void *)CFDateFormatterCreateDateFormatFromTemplate(0, @"jms", 0, (CFLocaleRef)[v1 cfGregorianCalendarLocale]);
    [v1 setLocaleSpecificStorage:DateFormatFromTemplate forKey:@"TSUShortestCompleteTimeOnlyFormat"];
    objc_sync_exit(v5);
  }
  return DateFormatFromTemplate;
}

void sub_238C95A40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUShortestCompleteDateOnlyFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUShortestCompleteDateOnlyFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:445 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  DateFormatFromTemplate = [v1 localeSpecificStorageForKey:@"TSUShortestCompleteDateOnlyFormat"];
  if (!DateFormatFromTemplate)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    DateFormatFromTemplate = (void *)CFDateFormatterCreateDateFormatFromTemplate(0, @"yMd", 0, (CFLocaleRef)[v1 cfGregorianCalendarLocale]);
    [v1 setLocaleSpecificStorage:DateFormatFromTemplate forKey:@"TSUShortestCompleteDateOnlyFormat"];
    objc_sync_exit(v5);
  }
  return DateFormatFromTemplate;
}

void sub_238C95B88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateTimeFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUDefaultDateTimeFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:522 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = [v1 localeSpecificStorageForKey:@"TSUDefaultDateTimeFormat"];
  if (!v4)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    uint64_t v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterShortStyle, kCFDateFormatterShortStyle, v1);
    [v1 setLocaleSpecificStorage:v4 forKey:@"TSUDefaultDateTimeFormat"];
    objc_sync_exit(v5);
  }
  return v4;
}

void sub_238C95CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateOnlyShortFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUDefaultDateOnlyShortFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:538 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = [v1 localeSpecificStorageForKey:@"TSUDefaultDateOnlyShortFormat"];
  if (!v4)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    uint64_t v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterShortStyle, kCFDateFormatterNoStyle, v1);
    id v6 = +[OITSUDateFormatter supportedDateFormatsForLocale:v1];
    char v7 = [v6 containsObject:v4];

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = +[OITSUDateFormatter p_supportedDateFormatMatchingFormat:v4 locale:v1];

      uint64_t v4 = (void *)v8;
    }
    [v1 setLocaleSpecificStorage:v4 forKey:@"TSUDefaultDateOnlyShortFormat"];
    objc_sync_exit(v5);
  }
  return v4;
}

void sub_238C95E40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultDateOnlyMediumFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUDefaultDateOnlyMediumFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:557 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = [v1 localeSpecificStorageForKey:@"TSUDefaultDateOnlyMediumFormat"];
  if (!v4)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    uint64_t v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterMediumStyle, kCFDateFormatterNoStyle, v1);
    id v6 = +[OITSUDateFormatter supportedDateFormatsForLocale:v1];
    char v7 = [v6 containsObject:v4];

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = +[OITSUDateFormatter p_supportedDateFormatMatchingFormat:v4 locale:v1];

      uint64_t v4 = (void *)v8;
    }
    [v1 setLocaleSpecificStorage:v4 forKey:@"TSUDefaultDateOnlyMediumFormat"];
    objc_sync_exit(v5);
  }
  return v4;
}

void sub_238C95FC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUDefaultTimeOnlyShortFormat(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v2 = [NSString stringWithUTF8String:"NSString *TSUDefaultTimeOnlyShortFormat(OITSULocale *__strong)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:576 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = [v1 localeSpecificStorageForKey:@"TSUDefaultTimeOnlyShortFormat"];
  if (!v4)
  {
    id v5 = objc_opt_class();
    objc_sync_enter(v5);
    uint64_t v4 = (void *)TSUDateFormatterCopyFormatStringForDateAndTimeStyles(kCFDateFormatterNoStyle, kCFDateFormatterShortStyle, v1);
    id v6 = +[OITSUDateFormatter supportedDateFormatsForLocale:v1];
    char v7 = [v6 containsObject:v4];

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = +[OITSUDateFormatter p_supportedTimeFormatMatchingFormat:v4 locale:v1];

      uint64_t v4 = (void *)v8;
    }
    [v1 setLocaleSpecificStorage:v4 forKey:@"TSUDefaultTimeOnlyShortFormat"];
    objc_sync_exit(v5);
  }
  return v4;
}

void sub_238C96140(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUCopyLocaleWithGregorianCalendarFromLocale(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x263EFF960];
  uint64_t v3 = [v1 localeIdentifier];
  uint64_t v4 = [v2 componentsFromLocaleIdentifier:v3];
  id v5 = (void *)[v4 mutableCopy];

  [v5 setObject:*MEMORY[0x263EFF3F8] forKey:*MEMORY[0x263EFFCA0]];
  if (!+[OITSULocale localeIsAutoUpdating:v1])
  {
    uint64_t v6 = *MEMORY[0x263EFF4D8];
    uint64_t v7 = [v1 objectForKey:*MEMORY[0x263EFF4D8]];
    uint64_t v8 = (void *)v7;
    uint64_t v9 = &stru_26EBF24D8;
    if (v7) {
      uint64_t v9 = (__CFString *)v7;
    }
    uint64_t v10 = v9;

    [v5 setObject:v10 forKey:v6];
  }
  uint64_t v11 = [MEMORY[0x263EFF960] localeIdentifierFromComponents:v5];
  uint64_t v12 = [MEMORY[0x263EFF960] localeWithLocaleIdentifier:v11];

  return v12;
}

uint64_t TSUGregorianUnitsPresentInFormatString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 4 * ([v1 rangeOfString:@"y"] != 0x7FFFFFFFFFFFFFFFLL);
  if ([v1 rangeOfString:@"M"] != 0x7FFFFFFFFFFFFFFFLL
    || [v1 rangeOfString:@"L"] != 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 |= 8uLL;
  }
  if ([v1 rangeOfString:@"d"] != 0x7FFFFFFFFFFFFFFFLL) {
    v2 |= 0x10uLL;
  }
  if ([v1 rangeOfString:@"h" options:1] != 0x7FFFFFFFFFFFFFFFLL
    || [v1 rangeOfString:@"k" options:1] != 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 |= 0x20uLL;
  }
  if ([v1 rangeOfString:@"m"] != 0x7FFFFFFFFFFFFFFFLL) {
    v2 |= 0x40uLL;
  }
  if ([v1 rangeOfString:@"s"] != 0x7FFFFFFFFFFFFFFFLL) {
    v2 |= 0x80uLL;
  }

  return v2;
}

uint64_t TSUCreateDateWithGregorianUnitsSetToDefaultValue(void *a1, void *a2)
{
  uint64_t v3 = (objc_class *)MEMORY[0x263EFF8F0];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  uint64_t v7 = *MEMORY[0x263EFF3F8];
  uint64_t v8 = (void *)[v6 initWithCalendarIdentifier:*MEMORY[0x263EFF3F8]];
  uint64_t v9 = [MEMORY[0x263EFFA18] timeZoneForSecondsFromGMT:0];
  [v8 setTimeZone:v9];

  uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263EFF8F0]) initWithCalendarIdentifier:v7];
  uint64_t v11 = [MEMORY[0x263EFFA18] defaultTimeZone];
  [v10 setTimeZone:v11];

  uint64_t v12 = [v8 components:252 fromDate:v5];

  uint64_t v13 = [MEMORY[0x263EFF910] date];
  uint64_t v14 = [v10 components:252 fromDate:v13];

  unint64_t v15 = TSUGregorianUnitsPresentInFormatString(v4);
  char v16 = ~(_BYTE)v15;
  if ((v15 & 0x1C) == 0)
  {
    if (v15 < 0x20)
    {
      uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDate *TSUCreateDateWithGregorianUnitsSetToDefaultValue(NSDate *__strong, NSString *__strong)");
      uint64_t v18 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
      +[OITSUAssertionHandler handleFailureInFunction:v17 file:v18 lineNumber:705 isFatal:0 description:"this line must not be reached"];

      +[OITSUAssertionHandler logBacktraceThrottled];
      if ((v16 & 0x20) != 0) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if ((~(_BYTE)v15 & 4) != 0)
    {
      objc_msgSend(v12, "setYear:", objc_msgSend(v14, "year"));
      if ((~(_BYTE)v15 & 8) == 0)
      {
LABEL_14:
        if ((~(_BYTE)v15 & 0x10) == 0) {
          goto LABEL_15;
        }
LABEL_22:
        uint64_t v20 = [v14 day];
        CFLocaleRef v19 = v12;
LABEL_23:
        [v19 setDay:v20];
        if ((~(_BYTE)v15 & 0x20) != 0) {
          goto LABEL_24;
        }
LABEL_16:
        if ((v16 & 0x40) == 0) {
          goto LABEL_17;
        }
LABEL_25:
        [v12 setMinute:0];
        if ((v16 & 0x80) == 0) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else if ((~(_BYTE)v15 & 8) == 0)
    {
      goto LABEL_14;
    }
    objc_msgSend(v12, "setMonth:", objc_msgSend(v14, "month"));
    if ((~(_BYTE)v15 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  if ((~(_BYTE)v15 & 4) == 0)
  {
    if ((~(_BYTE)v15 & 8) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    [v12 setMonth:1];
    if ((~(_BYTE)v15 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  objc_msgSend(v12, "setYear:", objc_msgSend(v14, "year"));
  if ((~(_BYTE)v15 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((~(_BYTE)v15 & 0x10) != 0)
  {
LABEL_11:
    CFLocaleRef v19 = v12;
    uint64_t v20 = 1;
    goto LABEL_23;
  }
LABEL_15:
  if ((~(_BYTE)v15 & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_24:
  [v12 setHour:0];
  if ((v16 & 0x40) != 0) {
    goto LABEL_25;
  }
LABEL_17:
  if (v16 < 0) {
LABEL_18:
  }
    [v12 setSecond:0];
LABEL_19:
  uint64_t v21 = [v8 dateFromComponents:v12];

  return v21;
}

uint64_t TSUCreateArrayOfDateFormatStringsForLocale(void *a1)
{
  id v1 = (void *)TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(a1);
  uint64_t v2 = [v1 objectForKey:@"AcceptedDateFormats"];

  return v2;
}

uint64_t TSUCreateArrayOfTimeFormatStringsForLocale(void *a1)
{
  id v1 = (void *)TSUDateFormatterCopyDateTimeFormatInfoDictionaryForLocale(a1);
  uint64_t v2 = [v1 objectForKey:@"AcceptedTimeFormats"];

  return v2;
}

uint64_t TSUCreateDateFromStringWithPreferredFormat(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  if (!v10)
  {
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDate *TSUCreateDateFromStringWithPreferredFormat(NSString *__strong, OITSULocale *__strong, NSString *__strong, NSString *__autoreleasing *, BOOL)");
    uint64_t v13 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDateFormatter.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v12 file:v13 lineNumber:763 isFatal:0 description:"A locale is required here."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v14 = [v10 dateParserLibrary];
  unint64_t v15 = [v14 checkoutDateParser];
  uint64_t v16 = [v15 newDateFromString:v9 preferredFormatString:v11 successfulFormatString:a4 tryAggressiveFormats:a5];
  [v14 returnDateParser:v15];

  return v16;
}

void sub_238C96898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C96C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_238C97254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

__CFDateFormatter *p_createADateFormatter(void *a1)
{
  UsingHarmonizedSymbols = TSUDateFormatterCFDateFormatterCreateUsingHarmonizedSymbols(0, a1, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, (CFStringRef)*MEMORY[0x263EFFBA0], (CFTypeRef)*MEMORY[0x263EFFB38]);
  CFStringRef v2 = (const __CFString *)*MEMORY[0x263EFFC10];
  uint64_t v3 = TSUGetGMTTimeZone();
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, v2, v3);

  id v4 = [MEMORY[0x263EFF910] date];
  id v5 = objc_alloc(MEMORY[0x263EFF8F0]);
  id v6 = (void *)[v5 initWithCalendarIdentifier:*MEMORY[0x263EFF3F8]];
  uint64_t v7 = [v6 components:4 fromDate:v4];
  uint64_t v8 = TSUGetGMTTimeZone();
  [v7 setTimeZone:v8];

  id v9 = [v6 dateFromComponents:v7];
  CFDateFormatterSetProperty(UsingHarmonizedSymbols, (CFStringRef)*MEMORY[0x263EFFB90], v9);

  return UsingHarmonizedSymbols;
}

void sub_238C9AC14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(void *a1, double *a2, _DWORD *a3, _DWORD *a4, int a5, void *a6)
{
  char v54 = 0;
  id v10 = (void *)MEMORY[0x23EC9A170]();
  char v49 = a6;
  id v11 = (void *)TSUDurationFormatterTokensFromString(a1, &v54, a6);
  id v12 = v11;
  if (!v11 || ![v11 count])
  {
LABEL_44:

    return 0;
  }
  double v53 = 0.0;
  uint64_t v50 = [v49 decimalSeparator];
  if (a3) {
    *a3 = 0;
  }
  if (v54)
  {
    if (a4) {
      *a4 = 0;
    }
    uint64_t v13 = [v11 count];
    uint64_t v14 = v13;
    if (v13)
    {
      uint64_t v15 = 0;
      char v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = v13 - 2;
      while (1)
      {
        CFLocaleRef v19 = (void *)[v11 objectAtIndex:v15];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        if ([v19 isEqual:@"."])
        {
          if (v18 != v15) {
            goto LABEL_16;
          }
        }
        else
        {
          char v21 = [v19 isEqual:v50];
          if (v18 != v15 || (v21 & 1) == 0) {
            goto LABEL_16;
          }
        }
        char v16 = 1;
LABEL_16:
        v17 += isKindOfClass & 1;
        if (v14 == ++v15) {
          goto LABEL_43;
        }
      }
    }
    unsigned int v17 = 0;
    char v16 = 0;
LABEL_43:
    int v34 = v17 - (v16 & 1);
    if (v34 > 5) {
      goto LABEL_44;
    }
    int v36 = 5;
    int v37 = a5;
    if (a5 <= 7)
    {
      if (a5 == 2)
      {
        int v36 = 4;
      }
      else if (a5 == 4)
      {
        int v36 = 3;
      }
    }
    else
    {
      switch(a5)
      {
        case 8:
          int v36 = 2;
          break;
        case 16:
          int v36 = 1;
          break;
        case 32:
          int v36 = 0;
          break;
      }
    }
    if (a5 && v17 <= v36 + (v16 & 1u))
    {
      if (v14) {
        goto LABEL_60;
      }
LABEL_93:
      char v39 = 0;
      double v24 = 0.0;
      double v29 = 0.0;
      double v28 = 0.0;
      double v27 = 0.0;
      double v26 = 0.0;
LABEL_94:
      unsigned int v23 = v39 & 1;
      goto LABEL_95;
    }
    unsigned int v45 = v34 - 1;
    if (v45 >= 5)
    {
      uint64_t v46 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(NSString *, NSTimeInterval *, TSUDurationUnits *, TSUDurationStyle *, TSUDurationUnits, OITSULocale *)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v46, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"], 668, 0, "Unexpected duration unit count!");
      +[OITSUAssertionHandler logBacktraceThrottled];
      int v37 = 0;
      if (!v14) {
        goto LABEL_93;
      }
    }
    else
    {
      int v37 = dword_238EDAED0[v45];
      if (!v14) {
        goto LABEL_93;
      }
    }
LABEL_60:
    uint64_t v38 = 0;
    char v39 = 0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    double v29 = 0.0;
    double v24 = 0.0;
    do
    {
      unint64_t v40 = (void *)[v11 objectAtIndex:v38];
      if ([@"-" isEqual:v40])
      {
        char v39 = 1;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          objc_msgSend((id)objc_msgSend(v40, "first"), "doubleValue");
          double v42 = v41;
          if (v38
            && ((objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v38 - 1), "isEqual:", @".") & 1) != 0
             || objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v38 - 1), "isEqual:", v50)))
          {
            uint64_t v43 = [v40 second];
            TSUGetNumberValueAndTypeFromString((void *)[NSString stringWithFormat:@"%@%@", v50, v43], objc_msgSend(v49, "locale"), (uint64_t)&v53, 0, 0, 0);
            if (a3) {
              *a3 |= 0x20u;
            }
          }
          else
          {
            switch(v37)
            {
              case 1:
                if (a3) {
                  *a3 |= 1u;
                }
                int v37 = 2;
                double v26 = v42;
                break;
              case 2:
                if (a3) {
                  *a3 |= 2u;
                }
                int v37 = 4;
                double v24 = v42;
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                goto LABEL_76;
              case 4:
                if (a3) {
                  *a3 |= 4u;
                }
                int v37 = 8;
                double v29 = v42;
                break;
              case 8:
                if (a3) {
                  *a3 |= 8u;
                }
                int v37 = 16;
                double v28 = v42;
                break;
              default:
                if (v37 == 16)
                {
                  int v37 = 0;
                  if (a3) {
                    *a3 |= 0x10u;
                  }
                  double v27 = v42;
                }
                else
                {
LABEL_76:
                  uint64_t v44 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSUDurationFormatterTimeIntervalFromStringWithCompactStyleStartUnit(NSString *, NSTimeInterval *, TSUDurationUnits *, TSUDurationStyle *, TSUDurationUnits, OITSULocale *)");
                  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v44, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"], 716, 0, "Unexpected duration unit!");
                  +[OITSUAssertionHandler logBacktraceThrottled];
                }
                break;
            }
          }
        }
      }
      ++v38;
    }
    while (v14 != v38);
    goto LABEL_94;
  }
  if (a4) {
    *a4 = 1;
  }
  unint64_t v22 = [v11 count];
  unsigned int v23 = objc_msgSend(@"-", "isEqual:", objc_msgSend(v11, "objectAtIndex:", 0));
  double v24 = 0.0;
  if (v22 > v23)
  {
    uint64_t v25 = 0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    double v29 = 0.0;
    while (1)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", v23 + v25), "first"), "doubleValue");
      double v31 = v30;
      uint64_t v32 = (void *)[v11 objectAtIndex:v23 + v25 + 1];
      int v52 = 1;
      int v33 = TSUDurationFormatterDurationUnitFromString(v32, &v52);
      if (a4 && !v25) {
        *a4 = v52;
      }
      switch(v33)
      {
        case 1:
          double v26 = v31;
          if (a3) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 2:
          double v24 = v31;
          if (!a3) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_44;
        case 4:
          double v29 = v31;
          if (!a3) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 8:
          double v28 = v31;
          if (!a3) {
            goto LABEL_28;
          }
          goto LABEL_27;
        default:
          if (v33 == 16)
          {
            double v27 = v31;
            if (!a3) {
              goto LABEL_28;
            }
LABEL_27:
            *a3 |= v33;
            goto LABEL_28;
          }
          if (v33 != 32) {
            goto LABEL_44;
          }
          double v53 = v31 / 1000.0;
          if (a3) {
            goto LABEL_27;
          }
LABEL_28:
          v25 += 2;
          if ((unint64_t)v23 + v25 >= v22) {
            goto LABEL_95;
          }
          break;
      }
    }
  }
  double v29 = 0.0;
  double v28 = 0.0;
  double v27 = 0.0;
  double v26 = 0.0;
LABEL_95:
  if (a2)
  {
    double v47 = v27 + v24 * 86400.0 + v26 * 604800.0 + v29 * 3600.0 + v28 * 60.0 + v53;
    *a2 = v47;
    if (v23) {
      *a2 = -v47;
    }
  }

  return 1;
}

uint64_t durationStringsEqual(void *a1, void *a2)
{
  CFStringRef v2 = a2;
  uint64_t v3 = a1;
  if ([a1 isEqualToString:a2]) {
    return 1;
  }
  if ([v3 rangeOfString:@" "] != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = (void *)[v3 stringByReplacingOccurrencesOfString:@" " withString:&stru_26EBF24D8];
  }
  if ([v2 rangeOfString:@" "] != 0x7FFFFFFFFFFFFFFFLL) {
    CFStringRef v2 = (void *)[v2 stringByReplacingOccurrencesOfString:@" " withString:&stru_26EBF24D8];
  }
  return [v3 isEqualToString:v2];
}

uint64_t TSUDurationFormatterDurationUnitFromString(void *a1, int *a2)
{
  id v4 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  if ((durationStringsEqual((void *)[v4 weekLongSingularString], a1) & 1) != 0
    || durationStringsEqual((void *)[v4 weekLongPluralString], a1))
  {
    uint64_t result = 1;
    if (!a2) {
      return result;
    }
    goto LABEL_4;
  }
  if ((durationStringsEqual((void *)[v4 weekMediumSingularString], a1) & 1) != 0
    || (durationStringsEqual((void *)[v4 weekMediumPluralString], a1) & 1) != 0
    || durationStringsEqual((void *)[v4 weekShortString], a1))
  {
    int v6 = 1;
    uint64_t result = 1;
    if (!a2) {
      return result;
    }
    goto LABEL_9;
  }
  if ((durationStringsEqual((void *)[v4 dayLongSingularString], a1) & 1) == 0
    && !durationStringsEqual((void *)[v4 dayLongPluralString], a1))
  {
    if ((durationStringsEqual((void *)[v4 dayMediumSingularString], a1) & 1) != 0
      || (durationStringsEqual((void *)[v4 dayMediumPluralString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 dayShortString], a1))
    {
      uint64_t result = 2;
      if (!a2) {
        return result;
      }
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)[v4 hourLongSingularString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 hourLongPluralString], a1))
    {
      uint64_t result = 4;
      if (!a2) {
        return result;
      }
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)[v4 hourMediumSingularString], a1) & 1) != 0
      || (durationStringsEqual((void *)[v4 hourMediumPluralString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 hourShortString], a1))
    {
      uint64_t result = 4;
      if (!a2) {
        return result;
      }
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)[v4 minuteLongSingularString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 minuteLongPluralString], a1))
    {
      uint64_t result = 8;
      if (!a2) {
        return result;
      }
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)[v4 minuteMediumSingularString], a1) & 1) != 0
      || (durationStringsEqual((void *)[v4 minuteMediumPluralString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 minuteShortString], a1))
    {
      uint64_t result = 8;
      if (!a2) {
        return result;
      }
      goto LABEL_19;
    }
    if ((durationStringsEqual((void *)[v4 secondLongSingularString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 secondLongPluralString], a1))
    {
      uint64_t result = 16;
      if (!a2) {
        return result;
      }
      goto LABEL_4;
    }
    if ((durationStringsEqual((void *)[v4 secondMediumSingularString], a1) & 1) != 0
      || (durationStringsEqual((void *)[v4 secondMediumPluralString], a1) & 1) != 0
      || durationStringsEqual((void *)[v4 secondShortString], a1))
    {
      uint64_t result = 16;
      if (!a2) {
        return result;
      }
    }
    else
    {
      if ((durationStringsEqual((void *)[v4 millisecondLongSingularString], a1) & 1) != 0
        || durationStringsEqual((void *)[v4 millisecondLongPluralString], a1))
      {
        uint64_t result = 32;
        if (!a2) {
          return result;
        }
LABEL_4:
        int v6 = 2;
LABEL_9:
        *a2 = v6;
        return result;
      }
      uint64_t result = durationStringsEqual((void *)[v4 millisecondShortString], a1);
      if (!result) {
        return result;
      }
      uint64_t result = 32;
      if (!a2) {
        return result;
      }
    }
LABEL_19:
    int v6 = 1;
    goto LABEL_9;
  }
  int v6 = 2;
  uint64_t result = 2;
  if (a2) {
    goto LABEL_9;
  }
  return result;
}

__CFString *TSUDurationFormatterUnitString(int a1, int a2, double a3)
{
  if (!a2) {
    return &stru_26EBF24D8;
  }
  id v6 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  switch(a1)
  {
    case 1:
      if (a2 == 2)
      {
        if (a3 == 1.0)
        {
          return (__CFString *)[v6 weekLongSingularString];
        }
        else
        {
          return (__CFString *)[v6 weekLongPluralString];
        }
      }
      else
      {
        if (a2 != 1) {
          return &stru_26EBF24D8;
        }
        return (__CFString *)[v6 weekShortString];
      }
    case 2:
      if (a2 == 2)
      {
        if (a3 == 1.0)
        {
          return (__CFString *)[v6 dayLongSingularString];
        }
        else
        {
          return (__CFString *)[v6 dayLongPluralString];
        }
      }
      else
      {
        if (a2 != 1) {
          return &stru_26EBF24D8;
        }
        return (__CFString *)[v6 dayShortString];
      }
    case 3:
    case 5:
    case 6:
    case 7:
      return &stru_26EBF24D8;
    case 4:
      if (a2 == 2)
      {
        if (a3 == 1.0)
        {
          return (__CFString *)[v6 hourLongSingularString];
        }
        else
        {
          return (__CFString *)[v6 hourLongPluralString];
        }
      }
      else
      {
        if (a2 != 1) {
          return &stru_26EBF24D8;
        }
        return (__CFString *)[v6 hourShortString];
      }
    case 8:
      if (a2 == 2)
      {
        if (a3 == 1.0)
        {
          return (__CFString *)[v6 minuteLongSingularString];
        }
        else
        {
          return (__CFString *)[v6 minuteLongPluralString];
        }
      }
      else
      {
        if (a2 != 1) {
          return &stru_26EBF24D8;
        }
        return (__CFString *)[v6 minuteShortString];
      }
    default:
      if (a1 == 16)
      {
        if (a2 == 2)
        {
          if (a3 == 1.0)
          {
            uint64_t result = (__CFString *)[v6 secondLongSingularString];
          }
          else
          {
            uint64_t result = (__CFString *)[v6 secondLongPluralString];
          }
        }
        else
        {
          if (a2 != 1) {
            return &stru_26EBF24D8;
          }
          uint64_t result = (__CFString *)[v6 secondShortString];
        }
      }
      else
      {
        if (a1 != 32) {
          return &stru_26EBF24D8;
        }
        if (a2 == 2)
        {
          if (a3 == 1.0)
          {
            uint64_t result = (__CFString *)[v6 millisecondLongSingularString];
          }
          else
          {
            uint64_t result = (__CFString *)[v6 millisecondLongPluralString];
          }
        }
        else
        {
          if (a2 != 1) {
            return &stru_26EBF24D8;
          }
          uint64_t result = (__CFString *)[v6 millisecondShortString];
        }
      }
      break;
  }
  return result;
}

uint64_t TSUDurationFormatterTokensFromString(void *a1, unsigned char *a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v5 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:](OITSUDurationLocaleSpecificStorage, "localeSpecificStorageForLocale:");
  id v6 = objc_msgSend(a1, "stringByTrimmingCharactersInSet:", objc_msgSend(v5, "whitespaceAndNewlineCharacterSet"));
  uint64_t v7 = (void *)[MEMORY[0x263F08B08] scannerWithString:v6];
  objc_msgSend(v7, "setCharactersToBeSkipped:", objc_msgSend(v5, "emptyCharacterSet"));
  uint64_t v58 = 0;
  double v42 = a3;
  uint64_t v41 = [a3 decimalSeparator];
  uint64_t v8 = 0;
  if ([v7 isAtEnd])
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    goto LABEL_3;
  }
  int v44 = 0;
  int v10 = 0;
  int v40 = 0;
  int v12 = 0;
  int v13 = -1;
  uint64_t v43 = v6;
  do
  {
    if (!v8) {
      uint64_t v8 = (void *)[MEMORY[0x263EFF980] array];
    }
    uint64_t v14 = objc_msgSend(v6, "characterAtIndex:", objc_msgSend(v7, "scanLocation"));
    if (!objc_msgSend((id)objc_msgSend(v5, "alphabeticCharacterSet"), "characterIsMember:", v14))
    {
      if (v12)
      {
        if (objc_msgSend((id)objc_msgSend(v5, "decimalDigitCharacterSet"), "characterIsMember:", v14))
        {
          if (!v13) {
            return 0;
          }
          uint64_t v29 = [v5 decimalDigitCharacterSet];
LABEL_43:
          [v7 scanCharactersFromSet:v29 intoString:&v58];
          double v45 = 0.0;
          if (!TSUGetNumberValueAndTypeFromString(v58, (void *)[v42 locale], (uint64_t)&v45, 0, 0, 0))return 0; {
          v44 |= trunc(v45) != v45;
          }
          uint64_t v30 = objc_msgSend(NSNumber, "numberWithDouble:");
          objc_msgSend(v8, "addObject:", +[OITSUPair pairWithFirst:second:](OITSUPair, "pairWithFirst:second:", v30, v58));
          int v13 = 0;
          goto LABEL_62;
        }
      }
      else if (objc_msgSend((id)objc_msgSend(v5, "decimalDigitAndSeperatorsCharacterSet"), "characterIsMember:", v14))
      {
        if (!v13) {
          return 0;
        }
        uint64_t v29 = [v5 decimalDigitAndSeperatorsCharacterSet];
        goto LABEL_43;
      }
      if (!objc_msgSend((id)objc_msgSend(v5, "minusSignCharacterSet"), "characterIsMember:", v14)
        || [v8 count])
      {
        return 0;
      }
      objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "minusSignCharacterSet"), 0);
      [v8 addObject:@"-"];
      int v13 = 3;
      int v40 = 1;
      goto LABEL_62;
    }
    if ((v12 | v10)) {
      return 0;
    }
    uint64_t v15 = [v8 count];
    uint64_t result = 0;
    if (v13 == 3 || !v15) {
      return result;
    }
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "alphabeticCharacterSet"), &v58);
    if (v13 == 1)
    {
      if (!objc_msgSend((id)objc_msgSend(v5, "multiWordDurationUnitStrings"), "count")) {
        goto LABEL_26;
      }
      uint64_t v17 = [v8 lastObject];
      uint64_t v18 = (void *)[NSString stringWithFormat:@"%@ %@", v17, v58];
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      CFLocaleRef v19 = (void *)[v5 multiWordDurationUnitStrings];
      uint64_t v20 = [v19 countByEnumeratingWithState:&v54 objects:v61 count:16];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)v55;
LABEL_20:
        uint64_t v23 = 0;
        while (1)
        {
          if (*(void *)v55 != v22) {
            objc_enumerationMutation(v19);
          }
          if ([*(id *)(*((void *)&v54 + 1) + 8 * v23) hasPrefix:v18]) {
            break;
          }
          if (v21 == ++v23)
          {
            uint64_t v21 = [v19 countByEnumeratingWithState:&v54 objects:v61 count:16];
            if (v21) {
              goto LABEL_20;
            }
            goto LABEL_26;
          }
        }
      }
      else
      {
LABEL_26:
        uint64_t result = objc_msgSend((id)objc_msgSend(v5, "fullStopDurationUnitStrings"), "count");
        if (!result) {
          return result;
        }
        uint64_t v24 = [v8 lastObject];
        uint64_t v18 = (void *)[NSString stringWithFormat:@"%@%@", v24, v58];
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        uint64_t v25 = (void *)[v5 fullStopDurationUnitStrings];
        uint64_t result = [v25 countByEnumeratingWithState:&v50 objects:v60 count:16];
        if (!result) {
          return result;
        }
        uint64_t v26 = result;
        uint64_t v27 = *(void *)v51;
LABEL_29:
        uint64_t v28 = 0;
        while (1)
        {
          if (*(void *)v51 != v27) {
            objc_enumerationMutation(v25);
          }
          if ([*(id *)(*((void *)&v50 + 1) + 8 * v28) hasPrefix:v18]) {
            break;
          }
          if (v26 == ++v28)
          {
            uint64_t result = [v25 countByEnumeratingWithState:&v50 objects:v60 count:16];
            uint64_t v26 = result;
            if (result) {
              goto LABEL_29;
            }
            return result;
          }
        }
      }
      [v8 removeLastObject];
      uint64_t v58 = v18;
    }
    if (objc_msgSend((id)objc_msgSend(v5, "fullStopDurationUnitStrings"), "count"))
    {
      double v31 = (void *)[NSString stringWithFormat:@"%@.", v58];
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      uint64_t v32 = (void *)[v5 fullStopDurationUnitStrings];
      uint64_t v33 = [v32 countByEnumeratingWithState:&v46 objects:v59 count:16];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)v47;
        while (2)
        {
          for (uint64_t i = 0; i != v34; ++i)
          {
            if (*(void *)v47 != v35) {
              objc_enumerationMutation(v32);
            }
            if ([*(id *)(*((void *)&v46 + 1) + 8 * i) hasPrefix:v31])
            {
              if ([v7 scanString:@"." intoString:0]) {
                uint64_t v58 = v31;
              }
              goto LABEL_61;
            }
          }
          uint64_t v34 = [v32 countByEnumeratingWithState:&v46 objects:v59 count:16];
          if (v34) {
            continue;
          }
          break;
        }
      }
    }
LABEL_61:
    [v8 addObject:v58];
    int v13 = 1;
    id v6 = v43;
LABEL_62:
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "whitespaceCharacterSet"), 0);
    int v37 = objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "separatorPunctuationCharacterSet"), &v58);
    char v38 = v37;
    if (v37)
    {
      if (([v8 count] == 0) | v10 & 1) {
        return 0;
      }
      [v8 addObject:v58];
      if ([v58 isEqualToString:@"."])
      {
        int v13 = 2;
        int v10 = 1;
      }
      else
      {
        int v10 = [v58 isEqualToString:v41];
        v12 |= v10 ^ 1;
        int v13 = 2;
      }
    }
    objc_msgSend(v7, "scanCharactersFromSet:intoString:", objc_msgSend(v5, "whitespaceCharacterSet"), 0);
  }
  while (![v7 isAtEnd]);
  int v9 = v44;
  int v11 = v40;
  if (v38) {
    return 0;
  }
LABEL_3:
  if (a2) {
    *a2 = (v10 | v12) & 1;
  }
  if (v12 & v9) {
    return 0;
  }
  if ((v12 | v10))
  {
    if (!(v12 & 1 | ((v10 & 1) == 0))) {
      return 0;
    }
  }
  else if (((v11 ^ (([v8 count] & 1) == 0)) & 1) == 0)
  {
    return 0;
  }
  if ((v11 & 1) != 0 && (unint64_t)[v8 count] < 2) {
    return 0;
  }
  else {
    return (uint64_t)v8;
  }
}

uint64_t TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(void *a1, int a2, void *a3, double a4)
{
  id v4 = a3;
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"], 963, 0, "invalid nil value for '%{public}s'", "locale");
    +[OITSUAssertionHandler logBacktraceThrottled];
    id v4 = +[OITSULocale currentLocale];
  }
  unint64_t v8 = [a1 length];
  int v9 = (void *)[MEMORY[0x263F089D8] stringWithCapacity:v8];
  id v76 = v4;
  id v10 = +[OITSUDurationLocaleSpecificStorage localeSpecificStorageForLocale:v4];
  if (a4 < 0.0)
  {
    [v9 appendString:@"-"];
    a4 = fabs(a4);
  }
  __int16 v77 = v9;
  if (!v8)
  {
    int v36 = 0;
    char v78 = 0;
    int v11 = 0;
    BOOL v31 = 1;
    double v37 = 2.22507386e-308;
    double v34 = 2.22507386e-308;
    double v33 = 2.22507386e-308;
    double v35 = 2.22507386e-308;
    goto LABEL_51;
  }
  char v78 = 0;
  int v11 = 0;
  unint64_t v12 = 0;
  char v13 = 0;
  id v79 = v10;
  do
  {
    uint64_t v14 = [a1 characterAtIndex:v12];
    uint64_t v15 = v14;
    unint64_t v16 = v12 + 1;
    if (v12 + 1 >= v8)
    {
      if (v14 == 39) {
        goto LABEL_45;
      }
    }
    else
    {
      int v17 = [a1 characterAtIndex:v12 + 1];
      if (v15 == 39)
      {
        if (v17 == 39)
        {
          [v9 appendString:@"'"];
          unint64_t v16 = v12 + 2;
          goto LABEL_45;
        }
        while (1)
        {
          unsigned int v18 = [a1 characterAtIndex:v16];
          unsigned int v19 = v18;
          if (v16 + 1 >= v8) {
            break;
          }
          int v20 = [a1 characterAtIndex:v16 + 1];
          if (v19 != 39) {
            goto LABEL_16;
          }
          if (v20 != 39) {
            goto LABEL_32;
          }
          [v9 appendString:@"'"];
          v16 += 2;
LABEL_17:
          if (v16 >= v8) {
            goto LABEL_45;
          }
        }
        if (v18 == 39)
        {
LABEL_32:
          ++v16;
          goto LABEL_45;
        }
LABEL_16:
        objc_msgSend(v9, "appendFormat:", @"%C", v19);
        ++v16;
        goto LABEL_17;
      }
    }
    if (!objc_msgSend((id)objc_msgSend(v10, "specialDurationFormatCharacters"), "characterIsMember:", v15))
    {
      objc_msgSend(v9, "appendFormat:", @"%C", v15);
      goto LABEL_45;
    }
    if ((v11 + 1) >= 7)
    {
      uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
      uint64_t v22 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"];
      uint64_t v23 = v21;
      id v10 = v79;
      +[OITSUAssertionHandler handleFailureInFunction:v23 file:v22 lineNumber:1013 isFatal:0 description:"Too many placeholders in duration format string!"];
      int v9 = v77;
      +[OITSUAssertionHandler logBacktraceThrottled];
    }
    uint64_t v24 = [v9 length];
    if (v16 >= v8)
    {
      int v28 = 0;
      int v27 = v11 + 1;
    }
    else
    {
      int v25 = v8 - v12;
      int v26 = 1;
      while ([a1 characterAtIndex:v16] == v15)
      {
        ++v26;
        if (v8 == ++v16)
        {
          unint64_t v16 = v8;
          int v26 = v25;
          break;
        }
      }
      id v10 = v79;
      int v27 = v11 + 1;
      int v28 = 0;
      switch(v26)
      {
        case 1:
          break;
        case 2:
          int v28 = 1;
          break;
        case 3:
          int v28 = 2;
          break;
        case 5:
          int v28 = 2;
          char v78 = 1;
          break;
        default:
          int v28 = 3;
          break;
      }
    }
    int v29 = 0;
    switch((int)v15)
    {
      case 'd':
        int v29 = 2;
        break;
      case 'e':
      case 'g':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
        break;
      case 'f':
        int v29 = 32;
        break;
      case 'h':
        int v29 = 4;
        break;
      case 'm':
        int v29 = 8;
        break;
      default:
        int v29 = v15 == 119;
        if (v15 == 115) {
          int v29 = 16;
        }
        break;
    }
    uint64_t v30 = &v82[v11];
    *(void *)uint64_t v30 = v24;
    v13 |= v29;
    *((_DWORD *)v30 + CsString::CsString((CsString *)this + 2) = v29;
    *((_DWORD *)v30 + 3) = v28;
    int v11 = v27;
LABEL_45:
    unint64_t v12 = v16;
  }
  while (v16 < v8);
  BOOL v31 = (v13 & 1) == 0;
  if (v13)
  {
    double v33 = floor(a4 / 604800.0);
    a4 = a4 + v33 * -604800.0;
    int v32 = 1;
    if ((v13 & 2) == 0) {
      goto LABEL_55;
    }
LABEL_48:
    double v34 = floor(a4 / 86400.0);
    a4 = a4 + v34 * -86400.0;
    if ((v13 & 4) != 0) {
      goto LABEL_49;
    }
LABEL_56:
    double v35 = 2.22507386e-308;
  }
  else
  {
    int v32 = 0;
    double v33 = 2.22507386e-308;
    if ((v13 & 2) != 0) {
      goto LABEL_48;
    }
LABEL_55:
    double v34 = 2.22507386e-308;
    if ((v13 & 4) == 0) {
      goto LABEL_56;
    }
LABEL_49:
    double v35 = floor(a4 / 3600.0);
    a4 = a4 + v35 * -3600.0;
  }
  BOOL v39 = (v13 & 8) == 0;
  if ((v13 & 8) != 0)
  {
    double v37 = floor(a4 / 60.0);
    a4 = a4 + v37 * -60.0;
    if ((v13 & 0x10) == 0) {
      goto LABEL_66;
    }
LABEL_59:
    double v41 = trunc(a4);
    a4 = a4 - v41;
    LOBYTE(v8) = v13;
    BOOL v42 = (v13 & 0x20) == 0;
    if ((v13 & 0x20) != 0) {
      double v40 = a4 * 1000.0;
    }
    else {
      double v40 = 2.22507386e-308;
    }
    int v38 = 16;
    if (v42) {
      int v36 = 16;
    }
    else {
      int v36 = 32;
    }
    goto LABEL_74;
  }
  double v37 = 2.22507386e-308;
  if ((v13 & 0x10) != 0) {
    goto LABEL_59;
  }
LABEL_66:
  if ((v13 & 0x20) != 0)
  {
    LOBYTE(v8) = v13;
    int v38 = v13 & 0x20;
    double v40 = a4 * 1000.0;
    int v36 = 32;
    double v41 = 2.22507386e-308;
    goto LABEL_74;
  }
  if ((v13 & 8) != 0)
  {
    LOBYTE(v8) = v13;
    BOOL v39 = 0;
    int v38 = 0;
    int v36 = 8;
    goto LABEL_53;
  }
  if ((v13 & 2) != 0) {
    int v36 = 2;
  }
  else {
    int v36 = v32;
  }
  LOBYTE(v8) = v13;
  if ((v13 & 4) == 0)
  {
LABEL_51:
    int v38 = 0;
    goto LABEL_52;
  }
  int v38 = 0;
  int v36 = 4;
LABEL_52:
  BOOL v39 = 1;
LABEL_53:
  double v40 = 2.22507386e-308;
  double v41 = 2.22507386e-308;
LABEL_74:
  int v81 = v11;
  if (a2)
  {
    switch(v36)
    {
      case 1:
        if (round(a4 / 604800.0) >= 1.0) {
          double v33 = v33 + 1.0;
        }
        goto LABEL_106;
      case 2:
        if (round(a4 / 86400.0) >= 1.0) {
          double v34 = v34 + 1.0;
        }
        goto LABEL_106;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_83;
      case 4:
        if (round(a4 / 3600.0) >= 1.0) {
          double v35 = v35 + 1.0;
        }
        goto LABEL_106;
      case 8:
        if (round(a4 / 60.0) >= 1.0) {
          double v37 = v37 + 1.0;
        }
        goto LABEL_106;
      default:
        if (v36 == 16)
        {
          if (round(a4) >= 1.0) {
            double v41 = v41 + 1.0;
          }
          goto LABEL_106;
        }
        if (v36 == 32) {
          goto LABEL_86;
        }
LABEL_83:
        uint64_t v43 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
        uint64_t v44 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"];
        uint64_t v45 = v43;
        uint64_t v46 = 1159;
        break;
    }
  }
  else
  {
    switch(v36)
    {
      case 1:
        double v33 = v33 + a4 / 604800.0;
        goto LABEL_106;
      case 2:
        double v34 = v34 + a4 / 86400.0;
        goto LABEL_106;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_87;
      case 4:
        double v35 = v35 + a4 / 3600.0;
        goto LABEL_106;
      case 8:
        double v37 = v37 + a4 / 60.0;
        goto LABEL_106;
      default:
        if (v36 == 16)
        {
          double v41 = v41 + a4;
          goto LABEL_106;
        }
        if (v36 == 32)
        {
LABEL_86:
          double v40 = round(v40);
          goto LABEL_106;
        }
LABEL_87:
        uint64_t v47 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
        uint64_t v44 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"];
        uint64_t v45 = v47;
        uint64_t v46 = 1183;
        break;
    }
  }
  +[OITSUAssertionHandler handleFailureInFunction:v45 file:v44 lineNumber:v46 isFatal:0 description:"Unknown minimum unit!"];
  int v9 = v77;
  +[OITSUAssertionHandler logBacktraceThrottled];
LABEL_106:
  if (v31) {
    int v48 = 2;
  }
  else {
    int v48 = 1;
  }
  if ((v8 & 3) == 0) {
    int v48 = 4;
  }
  if (v39) {
    int v49 = v38;
  }
  else {
    int v49 = 8;
  }
  if ((v8 & 7) != 0) {
    int v50 = v48;
  }
  else {
    int v50 = v49;
  }
  if (v50 != v36)
  {
    while (2)
    {
      switch(v36)
      {
        case 1:
          break;
        case 2:
          if (v34 >= 7.0)
          {
            double v33 = v33 + 1.0;
            int v36 = 1;
            double v34 = 0.0;
            goto LABEL_132;
          }
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_125;
        case 4:
          if (v35 < 24.0) {
            break;
          }
          double v34 = v34 + 1.0;
          int v36 = 2;
          double v35 = 0.0;
          goto LABEL_132;
        case 8:
          if (v37 < 60.0) {
            break;
          }
          double v35 = v35 + 1.0;
          int v36 = 4;
          double v37 = 0.0;
          goto LABEL_132;
        default:
          if (v36 == 16)
          {
            if (v41 < 60.0) {
              break;
            }
            double v37 = v37 + 1.0;
            int v36 = 8;
            double v41 = 0.0;
          }
          else if (v36 == 32)
          {
            if (v40 < 1000.0) {
              break;
            }
            double v41 = v41 + 1.0;
            int v36 = 16;
            double v40 = 0.0;
          }
          else
          {
LABEL_125:
            uint64_t v51 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
            +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v51, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"], 1247, 0, "Unknown unit!");
            int v9 = v77;
            +[OITSUAssertionHandler logBacktraceThrottled];
          }
LABEL_132:
          if (v50 == v36) {
            break;
          }
          continue;
      }
      break;
    }
  }
  long long v52 = v76;
  char v53 = v78;
  if (v81)
  {
    uint64_t v54 = 0;
    char v55 = 0;
    int v56 = 0;
    if (a2) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = (unsigned __int16)kTSUNumberFormatterDecimalPlacesAsManyAsNecessary;
    }
    unsigned int v80 = a2 ^ 1;
    do
    {
      uint64_t v58 = &v82[v54];
      uint64_t v59 = *(void *)v58;
      int v61 = *((_DWORD *)v58 + 2);
      int v60 = *((_DWORD *)v58 + 3);
      int v62 = 0;
      double v63 = v33;
      switch(v61)
      {
        case 1:
          break;
        case 2:
          int v62 = 0;
          double v63 = v34;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_143;
        case 4:
          int v62 = 0;
          double v63 = v35;
          break;
        case 8:
          int v62 = 0;
          double v63 = v37;
          break;
        default:
          if (v61 == 16)
          {
            int v62 = 0;
            double v63 = v41;
          }
          else if (v61 == 32)
          {
            int v62 = 1;
            double v63 = v40;
          }
          else
          {
LABEL_143:
            uint64_t v64 = v57;
            uint64_t v65 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUDurationFormatterStringFromTimeIntervalWithFormatAndRounding(NSTimeInterval, NSString *, BOOL, OITSULocale *)");
            long long v52 = v76;
            uint64_t v66 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUDurationFormatter.m"];
            char v53 = v78;
            uint64_t v67 = v65;
            uint64_t v57 = v64;
            +[OITSUAssertionHandler handleFailureInFunction:v67 file:v66 lineNumber:1284 isFatal:0 description:"Unknown duration unit!"];
            int v9 = v77;
            +[OITSUAssertionHandler logBacktraceThrottled];
            int v62 = 0;
            double v63 = 0.0;
          }
          break;
      }
      if ((v53 & (v63 == 0.0)) == 1 && v55 & 1 | (v54 + 1 != v81))
      {
        int v68 = -1;
        ++v54;
      }
      else
      {
        switch(v60)
        {
          case 0:
            if (v62) {
              long long v69 = @"000";
            }
            else {
              long long v69 = @"0";
            }
            goto LABEL_157;
          case 1:
            if (v62) {
              long long v69 = @"000";
            }
            else {
              long long v69 = @"00";
            }
LABEL_157:
            LOBYTE(v74) = 0;
            uint64_t v70 = [v52 numberFormatterStringFromDouble:v69 withFormat:v80 useDecimalPlaces:0 minDecimalPlaces:(unsigned __int16)v57 decimalPlaces:0 showThousandsSeparator:0 currencyCode:v63 suppressMinusSign:v74];
            goto LABEL_160;
          case 2:
            LOBYTE(v74) = 0;
            char v53 = v78;
            uint64_t v70 = [NSString stringWithFormat:@"%@%@", objc_msgSend(v52, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", @"0", v80, 0, (unsigned __int16)v57, 0, 0, v63, v74), TSUDurationFormatterUnitString(v61, 1, v63)];
            goto LABEL_160;
          case 3:
            LOBYTE(v74) = 0;
            char v53 = v78;
            uint64_t v70 = [NSString stringWithFormat:@"%@ %@", objc_msgSend(v52, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", @"0", v80, 0, (unsigned __int16)v57, 0, 0, v63, v74), TSUDurationFormatterUnitString(v61, 2, v63)];
LABEL_160:
            long long v71 = (void *)v70;
            break;
          default:
            long long v71 = 0;
            break;
        }
        [v9 insertString:v71 atIndex:v59 + v56];
        int v68 = [v71 length];
        ++v54;
        char v55 = 1;
      }
      v56 += v68;
    }
    while (v54 != v81);
  }
  if ((v53 & 1) == 0) {
    return (uint64_t)v9;
  }
  uint64_t v72 = [MEMORY[0x263F08708] whitespaceCharacterSet];
  return [v9 stringByTrimmingCharactersInSet:v72];
}

uint64_t TSURegisterLocaleChangeObserver(uint64_t a1)
{
  CFStringRef v2 = (void *)[MEMORY[0x263F08A00] defaultCenter];
  uint64_t v3 = [v2 addObserverForName:*MEMORY[0x263EFFCC8] object:0 queue:0 usingBlock:a1];
  uint64_t v4 = [v2 addObserverForName:*MEMORY[0x263EFF458] object:0 queue:0 usingBlock:a1];
  return objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", v3, v4, 0);
}

void sub_238C9D7E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C9D890(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238C9FC1C(void *a1)
{
}

void sub_238C9FF18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSURemoveLocaleChangeObserver(void *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFStringRef v2 = (void *)[MEMORY[0x263F08A00] defaultCenter];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(a1);
        }
        [v2 removeObserver:*(void *)(*((void *)&v7 + 1) + 8 * v6++)];
      }
      while (v4 != v6);
      uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void *TSULocaleCopyISOCurrencyCodes()
{
  return &unk_26EC80738;
}

id TSULocaleNSLocaleWithHarmonizedNumberingSystem(void *a1)
{
  id v1 = a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  CFStringRef v2 = (void *)[a1 localeIdentifier];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [&unk_26EC81248 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(&unk_26EC81248);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        if ([v2 hasPrefix:v7]
          && [v2 rangeOfString:@"numbers="] == 0x7FFFFFFFFFFFFFFFLL)
        {
          if ([v2 rangeOfString:@"@"] == 0x7FFFFFFFFFFFFFFFLL) {
            long long v8 = @"@";
          }
          else {
            long long v8 = @":";
          }
          id v1 = (void *)[MEMORY[0x263EFF960] localeWithLocaleIdentifier:objc_msgSend(v2, "stringByAppendingFormat:", @"%@numbers=%@", v8, objc_msgSend(&unk_26EC81248, "objectForKeyedSubscript:", v7))];
          return v1;
        }
      }
      uint64_t v4 = [&unk_26EC81248 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  return v1;
}

id TSUNumberFormatStringFromDouble(int a1, unsigned __int16 a2, unsigned __int16 a3, char a4, __CFString *a5, uint64_t a6, uint64_t a7, void *a8, double a9, double a10, void *a11, uint64_t a12, unsigned __int8 a13, char a14, unsigned __int16 a15, unsigned __int16 a16, unsigned __int8 a17, char a18, __int16 a19, unsigned __int8 a20,unsigned __int16 a21,unsigned __int8 a22,unsigned int a23,void *a24)
{
  double v30 = a9;
  unsigned __int16 v102 = HIWORD(a12);
  if (__fpclassifyd(a9) == 3) {
    double v30 = 0.0;
  }
  if ((a7 & 1) == 0)
  {
    a3 = TSUNumberOfDecimalPlacesInValue(v30);
    a2 = a3;
  }
  double v31 = v30 * a10;
  if (a14)
  {
    int v32 = @"#,##0";
    double v33 = a24;
    double v34 = v31;
    uint64_t v35 = 1;
    uint64_t v36 = 2;
    uint64_t v37 = 2;
    uint64_t v38 = 1;
LABEL_7:
    uint64_t v39 = 0;
LABEL_8:
    return (id)objc_msgSend(v33, "numberFormatterStringFromDouble:withFormat:useDecimalPlaces:minDecimalPlaces:decimalPlaces:showThousandsSeparator:currencyCode:suppressMinusSign:", v32, v35, v36, v37, v38, v39, v34);
  }
  uint64_t v35 = a15 ^ 1u;
  if (((a15 ^ 1) & 1) == 0 && (a15 & 0x100) == 0)
  {
    return TSUNumberFormatterStringByUnescapingFormatString(a5);
  }
  char v41 = a4 | a13;
  if (BYTE1(a12) | a12 || (a16 & HIBYTE(a16) & 1) != 0 || a8)
  {
    if (a6)
    {
      uint64_t v45 = a5;
      uint64_t v46 = -[__CFString rangeOfString:](a5, "rangeOfString:", objc_msgSend(NSString, "stringWithFormat:", @"%C", 164));
      uint64_t v47 = a17;
      if (v46 && (unint64_t v48 = v46, v46 != 0x7FFFFFFFFFFFFFFFLL))
      {
        unint64_t v49 = -[__CFString rangeOfCharacterFromSet:options:](a5, "rangeOfCharacterFromSet:options:", [MEMORY[0x263F08708] characterSetWithCharactersInString:@"0#"], 4);
        uint64_t v35 = a15 ^ 1u;
        char v41 = a4 | a13;
        if (v48 > v49)
        {
          __int16 v50 = objc_msgSend(+[OITSUNumberFormatter currencySymbolForCurrencyCode:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:", a6, a15 ^ 1u), "length");
          char v41 = a4 | a13;
          uint64_t v35 = a15 ^ 1u;
          unsigned __int16 v102 = HIWORD(a12) + v50 - 1;
        }
      }
      else
      {
        uint64_t v35 = a15 ^ 1u;
        char v41 = a4 | a13;
      }
    }
    else
    {
      uint64_t v47 = a17;
      uint64_t v45 = a5;
    }
    double v51 = trunc(v31);
    if ((a16 & HIBYTE(a16)) != 0) {
      double v52 = v51;
    }
    else {
      double v52 = v31;
    }
    LOBYTE(v99) = v41;
    char v53 = (void *)[a24 numberFormatterStringFromDouble:v45 withFormat:v35 useDecimalPlaces:a3 minDecimalPlaces:a2 decimalPlaces:v47 showThousandsSeparator:a6 currencyCode:v52 suppressMinusSign:v99];
    if (BYTE1(a12) | a12)
    {
      double v54 = fabs(v52);
      if (v54 >= 1.0) {
        unint64_t v55 = (unint64_t)log10(v54) + 1;
      }
      else {
        unint64_t v55 = 0;
      }
      if (v55 <= BYTE2(a12)) {
        unint64_t v56 = BYTE2(a12);
      }
      else {
        unint64_t v56 = v55;
      }
      if ((uint64_t)(a12 - v56) >= 1)
      {
        uint64_t v57 = (void *)[v53 mutableCopy];
        unint64_t v58 = TSUNumberOfDecimalPlacesInValue(v31);
        uint64_t v59 = [v53 length];
        if (BYTE5(a12) == BYTE4(a12) && v58 == 0) {
          uint64_t v61 = v59 + ~(v56 + v102) + 1;
        }
        else {
          uint64_t v61 = v59 + ~(v56 + v102);
        }
        uint64_t v62 = v58 - (BYTE5(a12) - BYTE4(a12));
        if (v62 <= 0) {
          int v63 = BYTE4(a12);
        }
        else {
          int v63 = BYTE4(a12) - v62;
        }
        uint64_t v64 = v61 + v63;
        if (v58 < BYTE5(a12)) {
          unint64_t v65 = v64;
        }
        else {
          unint64_t v65 = v59 + ~(v56 + v102);
        }
        if (v47 && (unint64_t v66 = [a24 groupingSize]) != 0)
        {
          uint64_t v67 = vcvtpd_s64_f64((double)v56 / (double)v66);
          if (v67 <= 1) {
            uint64_t v67 = 1;
          }
          uint64_t v68 = v67 - 1;
        }
        else
        {
          uint64_t v68 = 0;
        }
        uint64_t v69 = v65 - v68;
        if (v69 >= 0)
        {
          unsigned int v70 = 0;
          do
          {
            if (v69 >= (int)[v57 length]) {
              break;
            }
            int v71 = [v57 characterAtIndex:v69];
            if (v71 == 48) {
              ++v70;
            }
            if ((v71 - 58) <= 0xFFFFFFF6) {
              objc_msgSend(v57, "replaceCharactersInRange:withString:", v69, 1, @" ");
            }
            if ((uint64_t)(a12 - v56) <= v70) {
              break;
            }
            BOOL v72 = v69-- <= 0;
          }
          while (!v72);
        }
        int v73 = BYTE1(a12) - BYTE3(a12);
        if (BYTE1(a12) <= (int)BYTE3(a12)) {
          goto LABEL_88;
        }
        uint64_t v74 = v102;
        if (v57)
        {
LABEL_83:
          uint64_t v75 = [v53 length];
          uint64_t v76 = BYTE3(a12) - v74 + v75 + 1;
          if (v76 + v73 <= [v53 length])
          {
            uint64_t v77 = v75 + v73 + BYTE3(a12) - v74;
            do
            {
              if ([v57 characterAtIndex:v77] != 48) {
                break;
              }
              objc_msgSend(v57, "replaceCharactersInRange:withString:", v77, 1, @" ");
              BOOL v72 = v77-- <= v76;
            }
            while (!v72);
          }
LABEL_88:
          id v42 = v53;
          if (v57) {
            id v42 = v57;
          }
          goto LABEL_90;
        }
LABEL_82:
        uint64_t v57 = (void *)[v53 mutableCopy];
        goto LABEL_83;
      }
      int v73 = BYTE1(a12) - BYTE3(a12);
      id v42 = v53;
      if (v73 >= 1)
      {
        uint64_t v74 = v102;
        goto LABEL_82;
      }
    }
    else
    {
      id v42 = 0;
    }
LABEL_90:
    if (a8)
    {
      __int16 v106 = v53;
      if (v42) {
        char v78 = v42;
      }
      else {
        char v78 = v53;
      }
      id v42 = (id)[MEMORY[0x263F089D8] string];
      v105 = (void *)[MEMORY[0x263F08708] decimalDigitCharacterSet];
      uint64_t v79 = [v78 length];
      uint64_t v80 = [a11 firstIndex];
      if (v79 - 1 < 0)
      {
        int v83 = 0;
      }
      else
      {
        uint64_t v81 = v80;
        unint64_t v82 = 0;
        int v83 = 0;
        int v84 = 0;
        do
        {
          if (v81 == v84 && v81 != 0x7FFFFFFFFFFFFFFFLL)
          {
            objc_msgSend(v42, "insertString:atIndex:", objc_msgSend(a8, "objectAtIndex:", v83), 0);
            uint64_t v81 = [a11 indexGreaterThanIndex:v81];
            ++v83;
          }
          unsigned int v85 = [v78 characterAtIndex:--v79];
          uint64_t v86 = [v106 characterAtIndex:v79];
          [v42 insertString:objc_msgSend(NSString, "stringWithFormat:", @"%C", v85), 0 atIndex];
          if (v82 >= v102) {
            v84 += [v105 characterIsMember:v86];
          }
          ++v82;
        }
        while (v79 > 0);
      }
      if (v83 >= (int)[a8 count])
      {
        int v87 = (a16 & HIBYTE(a16));
        char v53 = v106;
      }
      else
      {
        int v87 = (a16 & HIBYTE(a16));
        char v53 = v106;
        if ([a8 count] > (unint64_t)v83)
        {
          unint64_t v88 = v83;
          do
            objc_msgSend(v42, "insertString:atIndex:", objc_msgSend(a8, "objectAtIndex:", v88++), 0);
          while (v88 < [a8 count]);
        }
      }
    }
    else
    {
      int v87 = (a16 & HIBYTE(a16));
    }
    if (!v87) {
      return v42;
    }
    if (v42) {
      __int16 v89 = v42;
    }
    else {
      __int16 v89 = v53;
    }
    id v42 = (id)[v89 mutableCopy];
    double v90 = fabs(v31);
    uint64_t v43 = TSUNumberFormatFractionStringFromDouble(a23, a24, v90 - floor(v90));
    uint64_t v44 = NSString;
    goto LABEL_116;
  }
  if (HIBYTE(a16) && (a16 & 1) == 0)
  {
    id v42 = (id)[TSUNumberFormatterStringByUnescapingFormatString(a5) mutableCopy];
    if (a6) {
      [v42 replaceOccurrencesOfString:objc_msgSend(NSString, "stringWithFormat:", @"%C", 164), +[OITSUNumberFormatter currencySymbolForCurrencyCode:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:", a6), 0, 0, objc_msgSend(v42, "length") withString options range];
    }
    uint64_t v43 = TSUNumberFormatFractionStringFromDouble(a23, a24, v31);
    uint64_t v44 = NSString;
LABEL_116:
    [v42 replaceOccurrencesOfString:objc_msgSend(v44, "stringWithFormat:", @"%C", (unsigned __int16)TSUCustomNumberFormatFractionReplacementCharacter), v43, 0, 0, objc_msgSend(v42, "length") withString options range];
    return v42;
  }
  if (a1 == 1)
  {
    if (a18)
    {
      id v91 = +[OITSUNumberFormatter defaultFormatStringForValueType:0 negativeStyle:2];
      BYTE6(v10CsString::CsString((CsString *)this + 1) = a22;
      WORD2(v10CsString::CsString((CsString *)this + 1) = a21;
      BYTE2(v10CsString::CsString((CsString *)this + 1) = a20;
      LOWORD(v10CsString::CsString((CsString *)this + 1) = a19;
      HIBYTE(v100) = 1;
      BYTE6(v100) = a17;
      *(_DWORD *)((char *)&v100 + CsString::CsString((CsString *)this + 2) = __PAIR32__(a16, a15);
      LOWORD(v100) = a13;
      uint64_t v92 = TSUNumberFormatStringFromDouble(0, a2, a3, 0, v91, a6, a7, 0, v31, a10, a11, a12, v100, v101, a23, a24);

      id v93 = +[OITSUNumberFormatter currencySymbolForCurrencyCode:a6];
      return (id)[NSString stringWithFormat:@"%@\t%@", v93, v92];
    }
    goto LABEL_130;
  }
  if (a1 != 5)
  {
    if (a1 == 4)
    {
      return (id)TSUNumberFormatFractionStringFromDouble(a23, a24, v31);
    }
    if (!a1)
    {
      if ((_BYTE)a19)
      {
        if ((a15 & 1) == 0)
        {
          double v95 = fabs(v31);
          if (v95 > 1.0e12 || v95 < 0.0000001 && (v96 = __fpclassifyd(v31), uint64_t v35 = a15 ^ 1u, v96 != 3))
          {
            int v32 = @"0E0";
            double v33 = a24;
            double v34 = v31;
            uint64_t v35 = 1;
            uint64_t v36 = 0;
            uint64_t v37 = 5;
            uint64_t v38 = 0;
            goto LABEL_7;
          }
        }
      }
    }
LABEL_130:
    if (HIBYTE(a19) && (a15 & 1) == 0 && (v97 = v35, v98 = __fpclassifyd(v31), uint64_t v35 = v97, v98 == 3))
    {
      double v33 = a24;
      double v34 = v31;
      int v32 = a5;
      uint64_t v35 = 1;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v36 = a3;
      uint64_t v37 = a2;
      double v33 = a24;
      double v34 = v31;
      int v32 = a5;
    }
    uint64_t v38 = a17;
    uint64_t v39 = a6;
    goto LABEL_8;
  }
  id v42 = TSUNumberFormatBaseStringFromDouble(a20, a21, a22, v31);
  if (v42) {
    return v42;
  }
  HIDWORD(v99) = -3;
  LOBYTE(v99) = 1;
  v94 = +[OITSUNumberFormat numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:](OITSUNumberFormat, "numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:", 0, 0, 0, +[OITSUNumberFormatter currentLocaleCurrencyCode], 0, 0, v99);
  [(OITSUNumberFormat *)v94 setUseScientificFormattingAutomatically:1];
  return [(OITSUNumberFormat *)v94 stringFromDouble:a24 locale:v31];
}

uint64_t TSUNumberFormatFractionStringFromDouble(unsigned int a1, void *a2, double a3)
{
  if (!TSUNumberFormatFractionStringFromDouble_sFractionFormatter)
  {
    uint64_t v6 = objc_opt_class();
    objc_sync_enter(v6);
    if (!TSUNumberFormatFractionStringFromDouble_sFractionFormatter)
    {
      TSUNumberFormatFractionStringFromDouble_sFractionFormatter = objc_opt_new();
      [(id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter setMaximumFractionDigits:0];
      uint64_t v7 = [a2 locale];
      [(id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter setLocale:v7];
    }
    objc_sync_exit(v6);
  }
  double v8 = fabs(a3);
  if (a3 >= 0.0) {
    double v9 = a3;
  }
  else {
    double v9 = v8;
  }
  if (a1 <= 0xFFFFFFFC)
  {
    uint64_t v10 = (int)a1;
    uint64_t v11 = (int)a1;
  }
  else
  {
    uint64_t v10 = qword_238EDAEF8[a1 + 3];
    uint64_t v11 = 2;
  }
  uint64_t v12 = 0;
  int64_t v13 = 0;
  double v14 = floor(v9);
  double v15 = v9 - v14;
  uint64_t v16 = v10 + 1;
  double v17 = 1.79769313e308;
  do
  {
    double v18 = v15 * (double)v11;
    double v19 = vabdd_f64(v15, round(v18) / (double)v11);
    unint64_t v20 = llround(v18);
    if (v19 < v17)
    {
      int64_t v13 = v20;
      uint64_t v12 = v11;
      double v17 = v19;
    }
    ++v11;
  }
  while (v16 != v11);
  if (a1 >= 0xFFFFFFFD)
  {
    uint64_t v21 = v12;
    if (v13)
    {
      uint64_t v22 = v13;
      uint64_t v23 = v12;
      do
      {
        uint64_t v21 = v22;
        uint64_t v22 = v23 % v22;
        uint64_t v23 = v21;
      }
      while (v22);
    }
    if (v21 >= 2)
    {
      v13 /= v21;
      v12 /= v21;
    }
  }
  if (v13 == v12) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v13;
  }
  if (v13 == v12) {
    double v25 = v14 + 1.0;
  }
  else {
    double v25 = v14;
  }
  int v26 = (void *)TSUNumberFormatFractionStringFromDouble_sFractionFormatter;
  objc_sync_enter((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter);
  objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "setLocale:", TSULocaleNSLocaleWithHarmonizedNumberingSystem(objc_msgSend(a2, "locale")));
  if (v25 == 0.0)
  {
    uint64_t v28 = 0;
    if (a3 < 0.0) {
      uint64_t v24 = -v24;
    }
  }
  else
  {
    double v27 = -v25;
    if (a3 >= 0.0) {
      double v27 = v25;
    }
    uint64_t v28 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(NSNumber, "numberWithDouble:", v27));
  }
  if (v24)
  {
    uint64_t v24 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(NSNumber, "numberWithInteger:", v24));
    uint64_t v29 = objc_msgSend((id)TSUNumberFormatFractionStringFromDouble_sFractionFormatter, "stringFromNumber:", objc_msgSend(NSNumber, "numberWithInteger:", v12));
  }
  else
  {
    uint64_t v29 = 0;
  }
  objc_sync_exit(v26);
  if (v28 && v24) {
    return [NSString stringWithFormat:@"%@ %@/%@", v28, v24, v29];
  }
  if (v28) {
    return v28;
  }
  if (v24) {
    return [NSString stringWithFormat:@"%@/%@", v24, v29, v32];
  }
  double v31 = (void *)TSUNumberFormatFractionStringFromDouble_sFractionFormatter;
  return [v31 stringFromNumber:&unk_26EC80BB8];
}

void sub_238CA356C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *TSUNumberFormatBaseStringFromDouble(uint64_t a1, unsigned int a2, int a3, double a4)
{
  if ((a1 - 37) <= 0xDBu)
  {
    uint64_t v4 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUNumberFormatBaseStringFromDouble(double, UInt8, UInt16, BOOL)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUNumberFormat.m"], 1352, 0, "Trying to format a baseFormat cell with an illegal base number");
    +[OITSUAssertionHandler logBacktraceThrottled];
    return 0;
  }
  if (a4 > 9.22337204e18 || a4 < -9.22337204e18) {
    return 0;
  }
  char v8 = a3;
  uint64_t v11 = llround(a4);
  if (v11 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = -v11;
  }
  if (v11 < 0) {
    int v13 = a3;
  }
  else {
    int v13 = 0;
  }
  if (v11 < 0 && (a3 & 1) == 0)
  {
    if (a1 > 0x10 || ((1 << a1) & 0x10104) == 0)
    {
      uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *TSUNumberFormatBaseStringFromDouble(double, UInt8, UInt16, BOOL)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUNumberFormat.m"], 1374, 0, "Trying to display two's-complement for unsupported base %d", a1);
      +[OITSUAssertionHandler logBacktraceThrottled];
    }
    if ((unint64_t)v12 >= 0x80000001)
    {
      uint64_t v15 = -32;
      uint64_t v16 = 0x80000000;
      while (v15 != -50)
      {
        uint64_t v17 = 2 * v16;
        --v15;
        BOOL v18 = v12 > (unint64_t)(2 * v16);
        v16 *= 2;
        if (!v18)
        {
          unint64_t v19 = -v15;
          goto LABEL_27;
        }
      }
      return 0;
    }
    uint64_t v17 = 0x80000000;
    unint64_t v19 = 32;
LABEL_27:
    uint64_t v12 = 2 * v17 - v12;
    LODWORD(v20) = (int)(log2((double)a1) * (double)a2);
    unint64_t v20 = (int)v20 <= 32 ? 32 : v20;
    BOOL v18 = v20 > v19;
    unint64_t v21 = v20 - v19;
    if (v18)
    {
      while (v17 <= 500000000000000)
      {
        v12 += 2 * v17;
        v17 *= 2;
        if (!--v21) {
          goto LABEL_34;
        }
      }
      return 0;
    }
  }
LABEL_34:
  uint64_t v30 = v11;
  uint64_t v6 = (void *)[MEMORY[0x263F089D8] string];
  uint64_t v22 = 1;
  do
  {
    if (a1 == 26)
    {
      unsigned __int16 v23 = v12 / v22 % 26 + 65;
    }
    else if (a1 == 1)
    {
      unsigned __int16 v23 = 49;
    }
    else
    {
      int v24 = v12 / v22 % a1;
      if (v24 <= 9) {
        __int16 v25 = 48;
      }
      else {
        __int16 v25 = 55;
      }
      unsigned __int16 v23 = v25 + v24;
    }
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", v23, 0);
    uint64_t v22 = (a1 == 1) + v22 * a1;
  }
  while (v22 && v12 / v22 > 0);
  if (a2)
  {
    signed int v26 = (a2 - [v6 length]) << 24;
    if (v26 >= 1)
    {
      int v27 = v26 >> 24;
      if (a1 == 26) {
        uint64_t v28 = 65;
      }
      else {
        uint64_t v28 = 48;
      }
      if (v27 <= 1) {
        int v29 = 1;
      }
      else {
        int v29 = v27;
      }
      do
      {
        objc_msgSend(v6, "tsu_insertCharacter:atIndex:", v28, 0);
        --v29;
      }
      while (v29);
    }
  }
  if ((v30 & 0x8000000000000000) == 0
    && (v8 & 1) == 0
    && v12 >= 0x80000000
    && [v6 characterAtIndex:0] != 48)
  {
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", 48, 0);
  }
  if (v13) {
    objc_msgSend(v6, "tsu_insertCharacter:atIndex:", 45, 0);
  }
  return v6;
}

__CFString *TSUNumberFormatterThreadDictionaryKeyForLocale(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    CFStringRef v2 = @"TSUNumberFormatterThreadDictionaryKey";
    if (!+[OITSULocale localeIsAutoUpdating:v1])
    {
      uint64_t v3 = NSString;
      uint64_t v4 = +[OITSULocale cacheKeyForLocale:v1];
      CFStringRef v2 = [v3 stringWithFormat:@"%@-%@", @"TSUNumberFormatterThreadDictionaryKey", v4];
    }
  }
  else
  {
    CFStringRef v2 = @"TSUNumberFormatterThreadDictionaryKey";
  }

  return v2;
}

BOOL TSULocationInRanges(unint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && (uint64_t v5 = [v3 count]) != 0)
  {
    unint64_t v6 = v5;
    uint64_t v7 = [v4 objectAtIndex:0];
    unint64_t v8 = [v7 rangeValue];
    unint64_t v10 = v9;

    if (a1 < v8 || a1 - v8 >= v10)
    {
      uint64_t v12 = 1;
      do
      {
        unint64_t v13 = v12;
        if (v6 == v12) {
          break;
        }
        uint64_t v14 = [v4 objectAtIndex:v12];
        unint64_t v15 = [v14 rangeValue];
        unint64_t v17 = v16;

        uint64_t v12 = v13 + 1;
      }
      while (a1 < v15 || a1 - v15 >= v17);
      BOOL v11 = v13 < v6;
    }
    else
    {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v12 = [v9 componentsSeparatedByString:v10];
  double v18 = 0.0;
  int v17 = -999;
  if ((unint64_t)[v12 count] >= 2)
  {
    unint64_t v13 = [v12 lastObject];
    if (TSUGetNumberValueAndTypeFromStringWithCurrencyCode(v13, 0, v11, (uint64_t)&v18, &v17, 0, 0))
    {
      int v14 = v17;

      if (!v14)
      {
        uint64_t v15 = [v9 rangeOfString:v10 options:4];
        if (a4)
        {
          *a4 = [v9 substringToIndex:v15];
        }
        if (a5)
        {
          unint64_t v16 = vcvtmd_s64_f64(v18);
LABEL_13:
          *a5 = v16;
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {
    }
  }
  if (a4) {
    *a4 = v9;
  }
  if (a5)
  {
    unint64_t v16 = 0;
    goto LABEL_13;
  }
LABEL_14:
}

uint64_t TSUGetNumberValueAndTypeFromString(void *a1, void *a2, uint64_t a3, int *a4, void *a5, uint64_t a6)
{
  return TSUGetNumberValueAndTypeFromStringWithCurrencyCode(a1, 0, a2, a3, a4, a5, a6);
}

void TSUNumberFormatterExtractBaseStemFromString(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    id v10 = 0;
    TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(v5, @" ", v6, &v10, 0);
    id v7 = v10;
    if ([v5 isEqualToString:v7])
    {
      id v8 = v5;
    }
    else
    {
      do
      {
        id v8 = v7;

        id v10 = v8;
        TSUNumberFormatterExtractStemAndTagFromStringWithSeparator(v8, @" ", v6, &v10, 0);
        id v7 = v10;

        id v5 = v8;
      }
      while (([v8 isEqualToString:v7] & 1) == 0);
    }
    id v9 = v7;
    *a3 = v9;

    id v5 = v8;
  }
}

__CFNumberFormatter *TSUHarmonizedCFNumberFormatterCreate(uint64_t a1, uint64_t a2)
{
  return +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:a1 style:a2];
}

uint64_t TSUNumberOfDecimalPlacesInValue(double a1)
{
  double valuePtr = a1;
  if (floor(a1) == a1) {
    return 0;
  }
  CFStringRef v2 = (__CFNumberFormatter *)TSUNumberOfDecimalPlacesInValue_formatter;
  if (!TSUNumberOfDecimalPlacesInValue_formatter)
  {
    id v3 = objc_opt_class();
    objc_sync_enter(v3);
    if (!TSUNumberOfDecimalPlacesInValue_formatter)
    {
      uint64_t v4 = (void *)MEMORY[0x263EFF960];
      id v5 = [MEMORY[0x263EFF960] canonicalLocaleIdentifierFromString:@"en_US"];
      id v6 = [v4 localeWithLocaleIdentifier:v5];

      id v7 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v6 style:0];
      CFNumberFormatterSetFormat(v7, @"0");
      id v8 = [NSNumber numberWithInt:0];
      CFNumberFormatterSetProperty(v7, (CFNumberFormatterKey)*MEMORY[0x263EFFDA0], v8);

      id v9 = [NSNumber numberWithInt:0x7FFFFFFFLL];
      CFNumberFormatterSetProperty(v7, (CFNumberFormatterKey)*MEMORY[0x263EFFD88], v9);

      __dmb(0xBu);
      TSUNumberOfDecimalPlacesInValue_formatter = (uint64_t)v7;
    }
    objc_sync_exit(v3);

    CFStringRef v2 = (__CFNumberFormatter *)TSUNumberOfDecimalPlacesInValue_formatter;
  }
  id v10 = (__CFString *)CFNumberFormatterCreateStringWithValue((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, kCFNumberDoubleType, &valuePtr);
  uint64_t v11 = [(__CFString *)v10 rangeOfString:@"."];
  if (v11 != 0x7FFFFFFFFFFFFFFFLL && v12 == 1) {
    uint64_t v1 = [(__CFString *)v10 length] + ~v11;
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

void sub_238CA466C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *TSUNumberFormatterNumberingSystemForFormatter(__CFNumberFormatter *a1)
{
  id v2 = (id)sNumberingSystemForLocaleIdentifier;
  objc_sync_enter(v2);
  CFLocaleRef Locale = CFNumberFormatterGetLocale(a1);
  uint64_t v4 = MEMORY[0x23EC986E0](Locale);
  id v5 = [(id)sNumberingSystemForLocaleIdentifier objectForKeyedSubscript:v4];

  if (v5)
  {
    id v6 = [(id)sNumberingSystemForLocaleIdentifier objectForKeyedSubscript:v4];
  }
  else
  {
    StringWithNumber = (__CFString *)CFNumberFormatterCreateStringWithNumber(0, a1, (CFNumberRef)&unk_26EC80BE8);
    uint64_t v8 = [(__CFString *)StringWithNumber length];
    if (v8)
    {
      uint64_t v9 = 0;
      while (1)
      {
        id v10 = (void *)sNumberingSystemForZeroChar;
        uint64_t v11 = -[__CFString substringWithRange:](StringWithNumber, "substringWithRange:", v9, 1);
        id v6 = [v10 objectForKey:v11];

        if (v6) {
          break;
        }
        if (v8 == ++v9)
        {
          id v6 = @"latn";
          break;
        }
      }
    }
    else
    {
      id v6 = @"latn";
    }
    [(id)sNumberingSystemForLocaleIdentifier setObject:v6 forKeyedSubscript:v4];
  }
  objc_sync_exit(v2);

  return v6;
}

void sub_238CA47E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TSUCurrencyCodesForLocale(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x263EFF980];
  id v6 = +[OITSUNumberFormatter userVisibleCurrencyCodes];
  id v7 = [v5 arrayWithArray:v6];

  if (v3)
  {
    uint64_t v8 = [v3 objectForKey:*MEMORY[0x263EFF4D8]];
    if (v8 && ([v7 containsObject:v8] & 1) == 0) {
      [v7 insertObject:v8 atIndex:0];
    }
  }
  if (v4 && ([v7 containsObject:v4] & 1) == 0) {
    [v7 insertObject:v4 atIndex:0];
  }

  return v7;
}

id TSUCreateArrayOfDecimalFormattersForLocale(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v3 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v1 style:1];
  CFStringRef v4 = (const __CFString *)*MEMORY[0x263EFFD50];
  CFNumberFormatterSetProperty(v3, (CFNumberFormatterKey)*MEMORY[0x263EFFD50], @"xyzzyqghbv&q");
  [v2 addObject:v3];

  id v5 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", @"#,##0;- #,##0",
                 @"#,##0;(#,##0)",
                 @"#,##0;( #,##0)",
                 0);
  uint64_t v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v1 style:0];
      id v10 = [v5 objectAtIndex:i];
      CFNumberFormatterSetFormat(v9, v10);

      CFNumberFormatterSetProperty(v9, v4, @"xyzzyqghbv&q");
      [v2 addObject:v9];
    }
  }

  return v2;
}

id TSUCreateArrayOfPercentageFormattersForLocale(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x263EFF980];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  CFStringRef v4 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v2 style:3];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x263EFFD50];
  CFNumberFormatterSetProperty(v4, (CFNumberFormatterKey)*MEMORY[0x263EFFD50], @"xyzzyqghbv&q");
  [v3 addObject:v4];

  uint64_t v6 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v2 style:0];
  CFNumberFormatterSetFormat(v6, @"#,##0%");
  CFNumberFormatterSetProperty(v6, v5, @"xyzzyqghbv&q");
  [v3 addObject:v6];

  uint64_t v7 = (void *)MEMORY[0x263EFF960];
  uint64_t v8 = [MEMORY[0x263EFF960] canonicalLocaleIdentifierFromString:@"en_US"];
  CFLocaleRef v9 = [v7 localeWithLocaleIdentifier:v8];

  id v10 = CFNumberFormatterCreate(0, v9, kCFNumberFormatterPercentStyle);
  CFNumberFormatterSetProperty(v10, v5, @"xyzzyqghbv&q");
  [v3 addObject:v10];

  return v3;
}

id TSUCreateArrayOfScientificFormattersForLocale(void *a1)
{
  v9[2] = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v1 style:4];
  id v3 = [v1 objectForKey:*MEMORY[0x263EFF508]];
  if ([v3 isEqualToString:@"hi"])
  {
    char v4 = [(__CFString *)(id)CFNumberFormatterGetFormat(v2) isEqualToString:@"#E0"];

    if ((v4 & 1) == 0)
    {
      CFStringRef v5 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v1 style:4];
      CFNumberFormatterSetFormat(v5, @"#E0");
      v9[0] = v2;
      v9[1] = v5;
      uint64_t v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v9 count:2];

      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v8 = v2;
  uint64_t v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v8 count:1];
LABEL_6:

  return v6;
}

uint64_t TSUImprovedCFNumberFormatterGetValueFromString(__CFNumberFormatter *a1, void *a2, double *a3)
{
  CFStringRef v5 = a2;
  uint64_t v6 = v5;
  uint64_t v7 = 0;
  if (!a1) {
    goto LABEL_9;
  }
  if (!a3) {
    goto LABEL_9;
  }
  v10.location = 0;
  v10.CFIndex length = [(__CFString *)v5 length];
  uint64_t v7 = 0;
  if (!CFNumberFormatterGetValueFromString(a1, v6, &v10, kCFNumberDoubleType, a3) || v10.location) {
    goto LABEL_9;
  }
  CFIndex length = v10.length;
  if (length == [(__CFString *)v6 length])
  {
    if (__fpclassifyd(*a3) == 3) {
      *a3 = 0.0;
    }
    uint64_t v7 = 1;
LABEL_9:
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_10:
  if (!v7) {
    *a3 = 0.0;
  }
LABEL_12:

  return v7;
}

uint64_t TSUGetNumberValueAndTypeFromStringWithCurrencyCode(void *a1, void *a2, void *a3, uint64_t a4, int *a5, void *a6, uint64_t a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  if (v13)
  {
    uint64_t v37 = a6;
    id v16 = v13;
    int v17 = [MEMORY[0x263F08708] decimalDigitCharacterSet];
    uint64_t v18 = [v16 rangeOfCharacterFromSet:v17];

    if (v18 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v19 = 0;
LABEL_31:

      goto LABEL_32;
    }
    context = (void *)MEMORY[0x23EC9A170]();
    unint64_t v20 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
    unint64_t v21 = [v16 stringByTrimmingCharactersInSet:v20];

    unint64_t v22 = [v21 length];
    unint64_t v23 = v22;
    if (v22 > 0x3E8)
    {
      unsigned int v29 = 0;
      uint64_t v30 = context;
LABEL_27:
      if (v23 < 0x3E9) {
        uint64_t v19 = v29;
      }
      else {
        uint64_t v19 = 0;
      }
      id v16 = v21;
      goto LABEL_31;
    }
    unint64_t v35 = v22;
    if (a5) {
      *a5 = -999;
    }
    int v24 = +[OITSUNumberFormatter formatterForLocale:v15];
    __int16 v25 = (__CFString *)[v21 mutableCopy];
    CFStringTransform(v25, 0, (CFStringRef)*MEMORY[0x263EFFEF0], 0);
    double v34 = v25;
    signed int v26 = v25;
    int v27 = v24;
    uint64_t v28 = +[OITSUNumberFormatter stringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand:v26];

    unint64_t v21 = p_stripSingleSpaceNotSurroundedByDigits(v28, v15);

    if ([v24 decimalFromString:v21 value:a4 formatString:v37])
    {
      if (a5) {
        *a5 = 0;
      }
      unsigned int v29 = 1;
LABEL_16:
      unint64_t v23 = v35;
      uint64_t v30 = context;
LABEL_26:

      goto LABEL_27;
    }
    if ([v24 currencyFromString:v21 additionalCurrencyCode:v14 value:a4 formatString:v37 currencyCode:a7])
    {
      unsigned int v29 = 1;
      if (a5) {
        *a5 = 1;
      }
      goto LABEL_16;
    }
    if ([v24 percentageFromString:v21 value:a4 formatString:v37])
    {
      unint64_t v23 = v35;
      if (a5)
      {
        int v31 = 2;
LABEL_23:
        *a5 = v31;
      }
    }
    else
    {
      int v32 = [v24 scientificFromString:v21 value:a4 formatString:v37];
      unint64_t v23 = v35;
      if (!v32)
      {
        if ([v27 fractionFromString:v21 value:a4])
        {
          if (a5) {
            *a5 = 4;
          }
          uint64_t v30 = context;
          if (v37) {
            *uint64_t v37 = 0;
          }
          unsigned int v29 = 1;
          goto LABEL_26;
        }
        unsigned int v29 = 0;
        goto LABEL_25;
      }
      if (a5)
      {
        int v31 = 3;
        goto LABEL_23;
      }
    }
    unsigned int v29 = 1;
LABEL_25:
    uint64_t v30 = context;
    goto LABEL_26;
  }
  uint64_t v19 = 0;
LABEL_32:

  return v19;
}

id p_stripSingleSpaceNotSurroundedByDigits(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFStringRef v5 = +[OITSUNumberFormatter decimalSeparatorForLocale:v4];
  uint64_t v6 = +[OITSUNumberFormatter groupingSeparatorForLocale:v4];
  uint64_t v7 = (void *)MEMORY[0x263F089C0];
  uint64_t v8 = [NSString stringWithFormat:@"%@%@", v5, v6];
  CFLocaleRef v9 = [v7 characterSetWithCharactersInString:v8];

  CFRange v10 = [MEMORY[0x263F08708] decimalDigitCharacterSet];
  [v9 formUnionWithCharacterSet:v10];

  uint64_t v11 = [MEMORY[0x263F089D8] stringWithString:v3];
  uint64_t v12 = [v11 length] - 2;
  if (v12 >= 1)
  {
    while (1)
    {
      if ([v11 characterAtIndex:v12] != 32) {
        goto LABEL_8;
      }
      uint64_t v13 = v12 - 1;
      uint64_t v14 = [v11 characterAtIndex:v12 - 1];
      uint64_t v15 = [v11 characterAtIndex:v12 + 1];
      if (v14 != 32) {
        break;
      }
LABEL_9:
      uint64_t v12 = v13 - 1;
      if (v13 <= 1) {
        goto LABEL_10;
      }
    }
    uint64_t v16 = v15;
    if (v15 != 32
      && (![v9 characterIsMember:v14]
       || ([v9 characterIsMember:v16] & 1) == 0))
    {
      objc_msgSend(v11, "deleteCharactersInRange:", v12, 1);
    }
LABEL_8:
    uint64_t v13 = v12;
    goto LABEL_9;
  }
LABEL_10:

  return v11;
}

__CFString *TSUNumberFormatterStringFromValueType(unsigned int a1)
{
  if (a1 > 5) {
    return @"unknown";
  }
  else {
    return off_264D60CB8[a1];
  }
}

__CFString *TSUNumberFormatterStringFromNegativeStyle(unsigned int a1)
{
  if (a1 > 4) {
    return @"unknown";
  }
  else {
    return off_264D60CE8[a1];
  }
}

__CFString *TSUNumberFormatterStringFromFractionAccuracy(uint64_t a1)
{
  if (a1 <= 0xFFFFFFFC)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"1/%d", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_264D60D10[(int)a1 + 3];
  }
  return v1;
}

id TSUNumberFormatterStringByUnescapingFormatString(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [v1 length];
  id v3 = [MEMORY[0x263F089D8] stringWithCapacity:v2];
  if (v2)
  {
    unint64_t v4 = 0;
    while (1)
    {
      unsigned int v5 = [v1 characterAtIndex:v4];
      unsigned int v6 = v5;
      unint64_t v7 = v4 + 1;
      if (v4 + 1 >= v2)
      {
        if (v5 != 39) {
LABEL_16:
        }
          objc_msgSend(v3, "appendFormat:", @"%C", v6);
        ++v4;
        goto LABEL_18;
      }
      int v8 = [v1 characterAtIndex:v4 + 1];
      if (v6 != 39) {
        goto LABEL_16;
      }
      if (v8 != 39) {
        break;
      }
      [v3 appendString:@"'"];
      v4 += 2;
LABEL_18:
      if (v4 >= v2) {
        goto LABEL_19;
      }
    }
    while (1)
    {
      unsigned int v9 = [v1 characterAtIndex:v7];
      unsigned int v10 = v9;
      unint64_t v4 = v7 + 1;
      if (v7 + 1 >= v2)
      {
        if (v9 == 39) {
          goto LABEL_18;
        }
      }
      else
      {
        int v11 = [v1 characterAtIndex:v7 + 1];
        if (v10 == 39)
        {
          if (v11 != 39) {
            goto LABEL_18;
          }
          [v3 appendString:@"'"];
          unint64_t v4 = v7 + 2;
          goto LABEL_13;
        }
      }
      objc_msgSend(v3, "appendFormat:", @"%C", v10);
LABEL_13:
      unint64_t v7 = v4;
      if (v4 >= v2) {
        goto LABEL_18;
      }
    }
  }
LABEL_19:

  return v3;
}

void TSUHarmonizedCFNumberFormatterSetCurrency(__CFNumberFormatter *a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    CFNumberFormatterGetLocale(a1);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v4 = +[OITSUNumberFormatter currencySymbolForCurrencyCode:locale:](OITSUNumberFormatter, "currencySymbolForCurrencyCode:locale:", v3);
    unsigned int v5 = (void *)[v4 copy];

    CFNumberFormatterSetProperty(a1, (CFNumberFormatterKey)*MEMORY[0x263EFFD38], v5);
    CFComparisonResult v6 = CFStringCompare(v3, @"CHF", 0);

    if (v6 == kCFCompareEqualTo)
    {
      unint64_t v7 = (void *)[objc_alloc(NSNumber) initWithInt:0];
      CFNumberFormatterSetProperty(a1, (CFNumberFormatterKey)*MEMORY[0x263EFFE18], v7);
    }
  }
}

void sub_238CA7EF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CA8278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_238CA83BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_238CA85F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id p_newArrayOfCurrencyFormattersForCurrencyCode(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = [v6 count];
  unsigned int v9 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v8];
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    CFStringRef key = (const __CFString *)*MEMORY[0x263EFFD80];
    int v11 = (const void *)*MEMORY[0x263EFFB40];
    CFStringRef v12 = (const __CFString *)*MEMORY[0x263EFFD50];
    do
    {
      uint64_t v13 = +[OITSUNumberFormatter createHarmonizedCFNumberFormatterWithLocale:v5 style:2];
      [v6 objectAtIndex:v10];
      uint64_t v14 = v9;
      id v15 = v7;
      id v16 = v6;
      id v17 = v5;
      uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      CFNumberFormatterSetFormat(v13, v18);

      id v5 = v17;
      id v6 = v16;
      id v7 = v15;
      unsigned int v9 = v14;
      TSUHarmonizedCFNumberFormatterSetCurrency(v13, v7);
      CFNumberFormatterSetProperty(v13, key, v11);
      CFNumberFormatterSetProperty(v13, v12, @"xyzzyqghbv&q");
      [v14 addObject:v13];

      ++v10;
    }
    while (v8 != v10);
  }

  return v9;
}

void sub_238CA8CE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CA8DA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CA8E40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CA8ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *TSUSpecificCast(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a2 isMemberOfClass:a1]) {
    return a2;
  }
  return 0;
}

void *TSUProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9 = a1;
  uint64_t v13 = &a9;
  uint64_t v14 = &a9;
  if (a1)
  {
    uint64_t v10 = a2;
    if (a2)
    {
      while (1)
      {
        int v11 = v14++;
        if ((objc_msgSend(v9, "conformsToProtocol:", *v11, v13) & 1) == 0) {
          break;
        }
        if (!--v10) {
          return v9;
        }
      }
      return 0;
    }
  }
  return v9;
}

uint64_t TSUCheckedDynamicCast(objc_class *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v4 = objc_msgSend(NSString, "stringWithUTF8String:", "id TSUCheckedDynamicCast(Class, id<NSObject>)");
    uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUCast.m"];
    id v6 = (objc_class *)objc_opt_class();
    id v7 = NSStringFromClass(v6);
    +[OITSUAssertionHandler handleFailureInFunction:v4, v5, 135, 0, "Unexpected object type %@ in checked dynamic cast to %@", v7, NSStringFromClass(a1) file lineNumber isFatal description];
    +[OITSUAssertionHandler logBacktrace];
    return 0;
  }
  return v2;
}

id TokenizeVersionString(void *a1)
{
  id v1 = [a1 componentsSeparatedByString:@"."];
  if ((unint64_t)[v1 count] >= 2)
  {
    id v3 = [v1 valueForKey:@"integerValue"];
    if ((unint64_t)[v3 count] >= 3)
    {
      id v4 = v3;
    }
    else
    {
      id v4 = [v3 arrayByAddingObject:&unk_26EC80C00];
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void *TSUSoftLinkingLoadFramework(void *a1, void *a2)
{
  uint64_t v4 = [a2 stringByAppendingString:@".framework"];
  if (a1) {
    uint64_t v5 = objc_msgSend((id)TSUPathForSystemFramework(objc_msgSend(a1, "stringByAppendingString:", @".framework")), "stringByAppendingPathComponent:", v4);
  }
  else {
    uint64_t v5 = (void *)TSUPathForSystemFramework(v4);
  }
  id v6 = (void *)[v5 stringByAppendingPathComponent:a2];
  id v7 = v6;
  if (!v6 || (uint64_t result = dlopen((const char *)[v6 fileSystemRepresentation], 256)) == 0)
  {
    if (([a2 isEqualToString:@"Ubiquity"] & 1) == 0) {
      NSLog((NSString *)@"NSSoftLinking - The %@ framework's library couldn't be loaded from %@.", a2, v7);
    }
    return 0;
  }
  return result;
}

uint64_t TSUPathForSystemFramework(uint64_t a1)
{
  uint64_t v2 = (void *)[MEMORY[0x263F08850] defaultManager];
  id v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  uint64_t v4 = [(NSArray *)v3 count];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = [(NSArray *)v3 objectAtIndex:v6];
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"Frameworks"), "stringByAppendingPathComponent:", a1);
    if ([v2 fileExistsAtPath:v8]) {
      break;
    }
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"PrivateFrameworks"), "stringByAppendingPathComponent:", a1);
    if ([v2 fileExistsAtPath:v8]) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return v8;
}

void *TSUSoftLinkingGetFrameworkFunction(void *a1, void *a2, char *__symbol, void **a4)
{
  Frameworuint64_t k = *a4;
  if (!*a4 && (Frameworuint64_t k = TSUSoftLinkingLoadFramework(a1, a2), (*a4 = Framework) == 0)
    || (uint64_t result = dlsym(Framework, __symbol)) == 0)
  {
    if (([a2 isEqualToString:@"Ubiquity"] & 1) == 0) {
      NSLog((NSString *)@"NSSoftLinking - The function '%s' can't be found in the %@ framework.", __symbol, a2);
    }
    return 0;
  }
  return result;
}

uint64_t TSUCFArrayDescription(const __CFArray *a1)
{
  uint64_t v2 = +[OITSUDescription descriptionWithCFType:format:](OITSUDescription, "descriptionWithCFType:format:", a1, @"; count=%ld",
         CFArrayGetCount(a1));
  if (CFArrayGetCount(a1) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      -[OITSUDescription addField:format:](v2, "addField:format:", objc_msgSend(NSString, "stringWithFormat:", @"[%d]", v3), @"%@", CFArrayGetValueAtIndex(a1, v3));
      ++v3;
    }
    while (CFArrayGetCount(a1) > v3);
  }
  [(OITSUDescription *)v2 setFieldOptionCommaSeparated];
  return (uint64_t)[(OITSUDescription *)v2 descriptionString];
}

__CFString *TSUObjectReferenceDescription(void *a1)
{
  if (!a1) {
    return @"<nil>";
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  CFIndex v3 = NSString;
  ClassName = object_getClassName(a1);
  if (isKindOfClass) {
    return (__CFString *)objc_msgSend(v3, "stringWithFormat:", @"(%s*)%p; count=%lu",
  }
                           ClassName,
                           a1,
                           [a1 count]);
  else {
    return (__CFString *)objc_msgSend(v3, "stringWithFormat:", @"(%s*)%p", ClassName, a1, v6);
  }
}

CGColorSpaceRef __TSUDeviceRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  TSUDeviceRGBColorSpace_sDeviceRGBColorSpace = (uint64_t)result;
  return result;
}

CGColorSpaceRef __TSUDeviceCMYKColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateDeviceCMYK();
  TSUDeviceCMYKColorSpace_sDeviceCMYKColorSpace = (uint64_t)result;
  return result;
}

uint64_t TSUSRGBColorSpace()
{
  if (TSUSRGBColorSpace_sSRGBDispatchOnce != -1) {
    dispatch_once(&TSUSRGBColorSpace_sSRGBDispatchOnce, &__block_literal_global_12);
  }
  return TSUSRGBColorSpace_sSRGBColorSpace;
}

CGColorSpaceRef __TSUSRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  TSUSRGBColorSpace_sSRGBColorSpace = (uint64_t)result;
  if (!result)
  {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
    TSUSRGBColorSpace_sSRGBColorSpace = (uint64_t)result;
  }
  return result;
}

uint64_t TSUP3ColorSpace()
{
  if (TSUP3ColorSpace_sP3DispatchOnce != -1) {
    dispatch_once(&TSUP3ColorSpace_sP3DispatchOnce, &__block_literal_global_14);
  }
  return TSUP3ColorSpace_sP3ColorSpace;
}

CGColorSpaceRef __TSUP3ColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F001E8]);
  TSUP3ColorSpace_sP3ColorSpace = (uint64_t)result;
  if (!result)
  {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
    TSUP3ColorSpace_sP3ColorSpace = (uint64_t)result;
  }
  return result;
}

CGColorRef TSUCGColorCreateRandomRGB()
{
  double v0 = TSURandom();
  double v1 = TSURandom();
  double v2 = TSURandom();
  return TSUCGColorCreateDeviceRGB(v0, v1, v2, 1.0);
}

CGColorRef TSUCreateCGColorFromHSBInColorSpace(CGColorSpace *a1, double a2, double a3, double a4, double a5)
{
  v9[2] = *(double *)MEMORY[0x263EF8340];
  v9[1] = a5;
  TSUHSBToRGB(&components, &v8, v9, a2, a3, a4);
  if (!a1)
  {
    if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1) {
      dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
    }
    a1 = (CGColorSpace *)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace;
  }
  return CGColorCreate(a1, &components);
}

double *TSUHSBToRGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6 = a4 * 6.0;
  BOOL v7 = a4 == 1.0;
  double v8 = 0.0;
  if (!v7) {
    double v8 = v6;
  }
  uint64_t v9 = (uint64_t)v8;
  double v10 = v8 - (double)(uint64_t)v8;
  double v11 = (1.0 - a5) * a6;
  double v12 = (1.0 - a5 * v10) * a6;
  double v13 = (1.0 - a5 * (1.0 - v10)) * a6;
  double v14 = a6;
  double v15 = v13;
  switch(v9)
  {
    case 0:
      goto LABEL_10;
    case 1:
      double v14 = v12;
      double v15 = a6;
      goto LABEL_10;
    case 2:
      double v14 = v11;
      double v15 = a6;
      double v11 = v13;
      goto LABEL_10;
    case 3:
      double v14 = v11;
      double v15 = v12;
      goto LABEL_8;
    case 4:
      double v14 = v13;
      double v15 = v11;
LABEL_8:
      double v11 = a6;
      goto LABEL_10;
    case 5:
      double v14 = a6;
      double v15 = v11;
      double v11 = v12;
LABEL_10:
      *CGColorSpaceRef result = v14;
      *a2 = v15;
      *a3 = v11;
      break;
    default:
      return result;
  }
  return result;
}

CGColorRef TSUCreateCGColorFromHSB(double a1, double a2, double a3, double a4)
{
  return TSUCreateCGColorFromHSBInColorSpace(0, a1, a2, a3, a4);
}

double TSURGBToHSB(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4) {
      double v7 = a4;
    }
    else {
      double v7 = a5;
    }
    if (a4 >= a6) {
      double v8 = a6;
    }
    else {
      double v8 = a4;
    }
    BOOL v9 = a5 < a4 || a5 < a6;
    if (v9) {
      double v10 = a6;
    }
    else {
      double v10 = a5;
    }
    if (v9) {
      double v11 = v7;
    }
    else {
      double v11 = v8;
    }
  }
  else
  {
    if (a5 >= a6) {
      double v11 = a6;
    }
    else {
      double v11 = a5;
    }
    double v10 = a4;
  }
  double v12 = 0.0;
  if (v10 <= 0.0)
  {
    double v14 = 0.0;
  }
  else
  {
    double v13 = v10 - v11;
    double v14 = (v10 - v11) / v10;
    if (v14 != 0.0)
    {
      double v15 = (v10 - a5) / v13;
      double v16 = (v10 - a6) / v13;
      if (v10 == a4)
      {
        if (v11 == a5) {
          double v12 = v16 + 5.0;
        }
        else {
          double v12 = 1.0 - v15;
        }
      }
      else
      {
        BOOL v18 = v10 == a5;
        double v19 = (v10 - a4) / v13;
        if (v18)
        {
          if (v11 == a6) {
            double v12 = v19 + 1.0;
          }
          else {
            double v12 = 3.0 - v16;
          }
        }
        else if (v11 == a4)
        {
          double v12 = v15 + 3.0;
        }
        else
        {
          double v12 = 5.0 - v19;
        }
      }
    }
  }
  *a3 = v10;
  double result = v12 / 6.0;
  *a1 = v12 / 6.0;
  *a2 = v14;
  return result;
}

CGContext *TSUCreateRGBABitmapContext(int a1, double a2, CGFloat a3, CGFloat a4)
{
  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1) {
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  }
  double v8 = CGBitmapContextCreate(0, (unint64_t)(a2 * a4), (unint64_t)(a3 * a4), 8uLL, (4 * (unint64_t)(a2 * a4) + 31) & 0xFFFFFFFFFFFFFFE0, (CGColorSpaceRef)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace, 0x2002u);
  CGAffineTransformMakeScale(&transform, a4, a4);
  CGContextConcatCTM(v8, &transform);
  if (a1)
  {
    CGContextTranslateCTM(v8, 0.0, a3);
    CGAffineTransformMakeScale(&v10, 1.0, -1.0);
    CGContextConcatCTM(v8, &v10);
  }
  return v8;
}

unint64_t TSUBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

double TSURandom()
{
  return (double)random() / 2147483650.0;
}

uint64_t p_chunkIndexForCharacterIndex(unint64_t a1, void *a2)
{
  double v2 = (void **)a2[1];
  if (v2 != (void **)*a2)
  {
    unint64_t v3 = ((uint64_t)v2 - *a2) >> 4;
    double v2 = (void **)*a2;
    do
    {
      unint64_t v4 = v3 >> 1;
      uint64_t v5 = &v2[2 * (v3 >> 1)];
      double v7 = *v5;
      double v6 = v5 + 2;
      v3 += ~(v3 >> 1);
      if (v7[2] + *v7 <= a1) {
        double v2 = v6;
      }
      else {
        unint64_t v3 = v4;
      }
    }
    while (v3);
  }
  return ((uint64_t)v2 - *a2) >> 4;
}

void sub_238CB40C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<TSUStringChunk>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  double v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer(v18);
  }
  else
  {
    *double v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_238CB41E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_238CB4858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<TSUStringChunk>>::insert(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 4;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    char v41 = a1 + 2;
    if (v18)
    {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>((uint64_t)(a1 + 2), v18);
      uint64_t v21 = v20;
    }
    else
    {
      double v19 = 0;
      uint64_t v21 = 0;
    }
    unint64_t v23 = (long long *)&v19[16 * v9];
    uint64_t v38 = v19;
    *(void *)&long long v39 = v23;
    *((void *)&v39 + CsString::CsString((CsString *)this + 1) = v23;
    double v40 = &v19[16 * v21];
    if (v9 == v21)
    {
      if (v8 < 1)
      {
        if ((void *)v7 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v8 >> 3;
        }
        uint64_t v45 = v11;
        signed int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v11, v25);
        uint64_t v28 = v39;
        uint64_t v29 = *((void *)&v39 + 1) - v39;
        if (*((void *)&v39 + 1) == (void)v39)
        {
          int64x2_t v34 = vdupq_n_s64(v39);
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2)];
        }
        else
        {
          uint64_t v30 = v29 >> 4;
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2) + (v29 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v32 = 16 * v30;
          double v33 = &v26[16 * (v25 >> 2)];
          do
          {
            *(_OWORD *)double v33 = *(_OWORD *)v28;
            v33 += 16;
            *(void *)uint64_t v28 = 0;
            *(void *)(v28 + 8) = 0;
            v28 += 16;
            v32 -= 16;
          }
          while (v32);
          int64x2_t v34 = (int64x2_t)v39;
        }
        unint64_t v35 = v40;
        id v42 = v38;
        uint64_t v38 = v26;
        *(void *)&long long v39 = &v26[16 * (v25 >> 2)];
        int64x2_t v43 = v34;
        *((void *)&v39 + CsString::CsString((CsString *)this + 1) = v31;
        double v40 = &v26[16 * v27];
        uint64_t v44 = v35;
        std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer(&v42);
        unint64_t v23 = (long long *)*((void *)&v39 + 1);
      }
      else
      {
        if (v9 >= -1) {
          uint64_t v24 = v9 + 1;
        }
        else {
          uint64_t v24 = v9 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *>((uint64_t)&v42, v23, v23, (uint64_t)&v23[-(v24 >> 1)]);
        *(void *)&long long v39 = v39 - 16 * (v24 >> 1);
        *((void *)&v39 + CsString::CsString((CsString *)this + 1) = v23;
      }
    }
    *(void *)unint64_t v23 = *a3;
    uint64_t v36 = a3[1];
    *((void *)v23 + CsString::CsString((CsString *)this + 1) = v36;
    if (v36)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      unint64_t v23 = (long long *)*((void *)&v39 + 1);
    }
    *((void *)&v39 + CsString::CsString((CsString *)this + 1) = v23 + 1;
    unint64_t v4 = (void *)std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(a1, &v38, v4);
    std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer(&v38);
  }
  else if (a2 == (void *)v6)
  {
    long long v22 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v22 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(a2 + 2);
  }
  else
  {
    std::vector<std::shared_ptr<TSUStringChunk>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    *unint64_t v4 = v13;
    uint64_t v14 = v7 + 16 * v9;
    double v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return v4;
}

void sub_238CB4B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_238CB5014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void std::vector<std::shared_ptr<TSUStringChunk>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void __clang_call_terminate(void *a1)
{
}

void std::vector<std::shared_ptr<TSUStringChunk>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<TSUStringChunk>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::shared_ptr<TSUStringChunk>::shared_ptr[abi:ne180100]<TSUStringChunk,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_238CB5254(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C401E2E008BLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<TSUStringChunk *,std::shared_ptr<TSUStringChunk>::__shared_ptr_default_delete<TSUStringChunk,TSUStringChunk>,std::allocator<TSUStringChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23EC997B0);
}

uint64_t std::__shared_ptr_pointer<TSUStringChunk *,std::shared_ptr<TSUStringChunk>::__shared_ptr_default_delete<TSUStringChunk,TSUStringChunk>,std::allocator<TSUStringChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x23EC997B0);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_238CB53B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + CsString::CsString((CsString *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + CsString::CsString((CsString *)this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<TSUStringChunk>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<TSUStringChunk>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *std::vector<std::shared_ptr<TSUStringChunk>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      void *v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<TSUStringChunk>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>,std::reverse_iterator<std::shared_ptr<TSUStringChunk>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*,std::shared_ptr<TSUStringChunk>*,std::shared_ptr<TSUStringChunk>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *,std::shared_ptr<TSUStringChunk> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + CsString::CsString((CsString *)this + 1) = 0;
      long long v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*,std::shared_ptr<TSUStringChunk>*,std::shared_ptr<TSUStringChunk>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  CGFloat v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSUStringChunk>>,std::shared_ptr<TSUStringChunk>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void _SFRSetLineWidth(CGContextRef c, CGFloat a2)
{
  if (a2 == 0.0)
  {
    NSLog((NSString *)@"BOGUS - lineWidth is 0.");
    CGContextGetCTM(&v3, c);
    CGAffineTransformInvert(&v4, &v3);
    a2 = v4.a + v4.c;
  }
  CGContextSetLineWidth(c, a2);
}

void *pBuildBezierPath(void *result, uint64_t a2)
{
  CGAffineTransform v3 = result;
  switch(*(_DWORD *)a2)
  {
    case 0:
      CGAffineTransform v4 = *(double **)(a2 + 8);
      double v5 = *v4;
      double v6 = v4[1];
      uint64_t result = objc_msgSend(result, "moveToPoint:", v5, v6);
      break;
    case 1:
      goto LABEL_6;
    case 2:
      uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void pBuildBezierPath(void *, const CGPathElement *)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPath.m"], 215, 0, "kCGPathElementAddQuadCurveToPoint not supported yet");
      +[OITSUAssertionHandler logBacktraceThrottled];
LABEL_6:
      long long v8 = *(double **)(a2 + 8);
      double v9 = *v8;
      double v10 = v8[1];
      uint64_t result = objc_msgSend(v3, "lineToPoint:", v9, v10);
      break;
    case 3:
      uint64_t v11 = *(double **)(a2 + 8);
      double v12 = v11[4];
      double v13 = v11[5];
      double v14 = *v11;
      double v15 = v11[1];
      double v16 = v11[2];
      double v17 = v11[3];
      uint64_t result = objc_msgSend(result, "curveToPoint:controlPoint1:controlPoint2:", v12, v13, v14, v15, v16, v17);
      break;
    case 4:
      uint64_t result = (void *)[result closePath];
      break;
    default:
      return result;
  }
  return result;
}

void scanSpaceThenFloat(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v5 = *a2;
  double v6 = (const char *)(a1 + v5);
  if (*(unsigned char *)(a1 + v5) == 32)
  {
    do
    {
      uint64_t v7 = a1 + v5++;
      *a2 = v5;
    }
    while (*(unsigned char *)(v7 + 1) == 32);
    double v6 = (const char *)(a1 + v5);
  }
  long long v8 = 0;
  strtof(v6, &v8);
  if (v6 == v8) {
    *a3 = 1;
  }
  else {
    *a2 += v8 - v6;
  }
}

void addifclose(uint64_t a1, float *a2)
{
  uint64_t v4 = 0;
  uint64_t v36 = *MEMORY[0x263EF8340];
  double v5 = *(double *)a1;
  double v6 = *(double *)(a1 + 8);
  float v7 = 0.0;
  double v8 = v6;
  double v9 = *(double *)a1;
  do
  {
    double v10 = *(double *)(a1 + v4 + 16);
    double v11 = *(double *)(a1 + v4 + 24);
    float v7 = TSUDistance(v9, v8, v10, v11) + v7;
    v4 += 16;
    double v8 = v11;
    double v9 = v10;
  }
  while (v4 != 48);
  float v12 = TSUDistance(v5, v6, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if ((float)(v7 - v12) <= 0.1)
  {
    *a2 = *a2 + v7;
  }
  else
  {
    long long v13 = *(_OWORD *)(a1 + 16);
    v35[0] = *(_OWORD *)a1;
    v35[1] = v13;
    long long v14 = *(_OWORD *)(a1 + 48);
    v35[2] = *(_OWORD *)(a1 + 32);
    v35[3] = v14;
    uint64_t v15 = 3;
    uint64_t v16 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    long long v22 = v35;
    do
    {
      uint64_t v23 = 0;
      float64x2_t v24 = (float64x2_t)v35[4 * v16 - 4];
      do
      {
        unint64_t v25 = (float64x2_t *)&v22[v23];
        float64x2_t v26 = v25[1];
        v25[4] = vmlaq_f64(vmulq_f64(v26, _Q0), _Q0, v24);
        ++v23;
        float64x2_t v24 = v26;
      }
      while (v15 != v23);
      ++v16;
      --v15;
      v22 += 4;
    }
    while (v16 != 4);
    uint64_t v27 = 0;
    uint64_t v28 = v35;
    do
    {
      long long v29 = *v28;
      v28 += 4;
      *(_OWORD *)&v34[v27] = v29;
      v27 += 16;
    }
    while (v27 != 64);
    uint64_t v30 = v33;
    uint64_t v31 = 3;
    uint64_t v32 = 12;
    do
    {
      *v30++ = v35[v32];
      --v31;
      v32 -= 3;
    }
    while (v31 != -1);
    addifclose(v34, a2);
    addifclose(v33, a2);
  }
}

void sub_238CBB6A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBB940(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBB9FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBA64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBAD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBB38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBBA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBC08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBCE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBBD4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBC050(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBC934(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBC9A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCA04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCA80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCAF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCB68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCBE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CBCC48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUPreferredLocale()
{
  double v0 = (void *)[MEMORY[0x263EFF960] currentLocale];
  if (!objc_msgSend((id)objc_msgSend(v0, "localeIdentifier"), "hasPrefix:", @"ars")) {
    return (uint64_t)v0;
  }
  uint64_t v1 = (void *)MEMORY[0x263EFF960];
  uint64_t v2 = objc_msgSend((id)objc_msgSend(v0, "localeIdentifier"), "stringByReplacingOccurrencesOfString:withString:options:range:", @"ars", @"ar", 0, 0, 3);
  return [v1 localeWithLocaleIdentifier:v2];
}

BOOL TSUCGAffineTransformIsValid(double *a1)
{
  if (!a1) {
    return 1;
  }
  BOOL result = 0;
  if (fabs(*a1) != INFINITY)
  {
    BOOL result = 0;
    if (fabs(a1[1]) != INFINITY)
    {
      BOOL result = 0;
      if (fabs(a1[2]) != INFINITY)
      {
        BOOL result = 0;
        if (fabs(a1[3]) != INFINITY)
        {
          BOOL result = 0;
          if (fabs(a1[4]) != INFINITY) {
            return fabs(a1[5]) != INFINITY;
          }
        }
      }
    }
  }
  return result;
}

uint64_t TSUNotifyCGAssertionAvoided()
{
  uint64_t v0 = [NSString stringWithUTF8String:"void TSUNotifyCGAssertionAvoided(void)"];
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v0, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUSafeCGWrappers.m"], 86, 0, "A CG call was elided because of an invalid parameter.");
  return +[OITSUAssertionHandler logBacktrace];
}

void CGPathMoveToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4)
{
  BOOL IsValid = TSUCGAffineTransformIsValid(&a2->a);
  double v9 = fabs(a3);
  BOOL v11 = fabs(a4) == INFINITY || v9 == INFINITY;
  if (v11 || !IsValid)
  {
    TSUNotifyCGAssertionAvoided();
  }
  else
  {
    CGPathMoveToPoint(a1, a2, a3, a4);
  }
}

void CGPathAddLineToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4)
{
  BOOL IsValid = TSUCGAffineTransformIsValid(&a2->a);
  double v9 = fabs(a3);
  BOOL v11 = fabs(a4) == INFINITY || v9 == INFINITY;
  if (v11 || !IsValid)
  {
    TSUNotifyCGAssertionAvoided();
  }
  else
  {
    CGPathAddLineToPoint(a1, a2, a3, a4);
  }
}

void CGPathAddArcToPointSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4, double a5, double a6, CGFloat a7)
{
  BOOL IsValid = TSUCGAffineTransformIsValid(&a2->a);
  double v15 = fabs(a3);
  double v16 = fabs(a4);
  double v17 = fabs(a5);
  BOOL v23 = fabs(a6) == INFINITY || v17 == INFINITY || v16 == INFINITY || v15 == INFINITY;
  if (v23 || !IsValid)
  {
    TSUNotifyCGAssertionAvoided();
  }
  else
  {
    CGPathAddArcToPoint(a1, a2, a3, a4, a5, a6, a7);
  }
}

void CGPathAddRectSafe(CGPath *a1, CGAffineTransform *a2, double a3, double a4, double a5, double a6)
{
  if (TSUCGAffineTransformIsValid(&a2->a))
  {
    double v12 = a3;
    double v13 = a4;
    double v14 = a5;
    double v15 = a6;
    CGPathAddRect(a1, a2, *(CGRect *)&v12);
  }
  else
  {
    TSUNotifyCGAssertionAvoided();
  }
}

void sub_238CBE660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void std::vector<_NSRange>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<_NSRange>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<_NSRange>::insert(uint64_t a1, char *__src, char *a3)
{
  CGAffineTransform v3 = a3;
  uint64_t v4 = __src;
  double v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    uint64_t v20 = &v19[16 * v16];
    __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    long long v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        BOOL v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v8, v22);
        uint64_t v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        long long v29 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v3;
    uint64_t v28 = v20 + 16;
    uint64_t v4 = (char *)std::vector<_NSRange>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    double v9 = __src + 16;
    double v10 = v6 - 16;
    BOOL v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_238CBFBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL p_sortFunction(_NSRange a1, _NSRange a2)
{
  if (a1.location == a2.location) {
    return a2.location + a2.length < a1.location + a1.length;
  }
  else {
    return a1.location < a2.location;
  }
}

void std::vector<_NSRange>::__append(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v12);
    }
    else {
      double v13 = 0;
    }
    unint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    unint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - CsString::CsString((CsString *)this + 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::vector<_NSRange>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(void **)(a2 + 8);
  double v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  double v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v21 = *((void *)a2 - 2);
          uint64_t v22 = *((void *)a2 - 1);
          BOOL v23 = a2 - 16;
          if ((*a3)(v21, v22, *(void *)v11, *((void *)v11 + 1)))
          {
            long long v25 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v23;
            *(_OWORD *)BOOL v23 = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v11, (void *)v11 + 2, (void *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)v11 + 6, (void *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,_NSRange*>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[16 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v11, &v11[16 * (v15 >> 1)], (void *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((void *)v11 + 2, (void *)v17 - 2, (void *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((void *)v11 + 4, &v11[16 * v16 + 16], (void *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((void *)v17 - 2, v17, &v11[16 * v16 + 16], a3);
      long long v24 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v24;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(&v11[16 * (v15 >> 1)], v11, (void *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(*((void *)v11 - 2), *((void *)v11 - 1), *(void *)v11, *((void *)v11 + 1)) & 1) == 0)
    {
      uint64_t v11 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(v11, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v18 = (char *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v11, v18, a3);
    uint64_t v11 = v18 + 16;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(v18 + 16, a2, a3))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = v18 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)result;
      do
      {
        uint64_t v9 = v5;
        BOOL result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if (result)
        {
          uint64_t v10 = *v9;
          uint64_t v11 = v8[3];
          uint64_t v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            BOOL result = (*a3)(v10, v11, *(void *)((char *)v4 + v12 - 16), *(void *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          void *v13 = v10;
          v13[1] = v11;
        }
        char v5 = v9 + 2;
        v7 += 16;
        uint64_t v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        BOOL result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if (result)
        {
          uint64_t v8 = *v7;
          uint64_t v9 = v4[3];
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10 - 1;
            _OWORD *v10 = *(v10 - 1);
            BOOL result = (*a3)(v8, v9, *((void *)v10 - 4), *((void *)v10 - 3));
            uint64_t v10 = v11;
          }
          while ((result & 1) != 0);
          void *v11 = v8;
          v11[1] = v9;
        }
        char v5 = v7 + 2;
        uint64_t v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(void *a1, void *a2, void *a3, uint64_t (**a4)(void, void, void, void))
{
  char v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  uint64_t result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1])) {
      return 1;
    }
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!result)
  {
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1])) {
      return 1;
    }
    long long v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  long long v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(void *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((*a3)(*a1, v7, *((void *)a2 - 2), *((void *)a2 - 1)))
  {
    char v8 = a1;
    do
    {
      uint64_t v9 = v8[2];
      uint64_t v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    long long v11 = a1 + 2;
    do
    {
      char v8 = v11;
      if (v11 >= (void *)v4) {
        break;
      }
      int v12 = (*a3)(v6, v7, *v11, v11[1]);
      long long v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (void *)v4)
  {
    do
    {
      uint64_t v13 = *((void *)v4 - 2);
      uint64_t v14 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (void *)v4)
  {
    long long v20 = *(_OWORD *)v8;
    *(_OWORD *)char v8 = *v4;
    *uint64_t v4 = v20;
    do
    {
      uint64_t v15 = v8[2];
      uint64_t v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      uint64_t v17 = *((void *)v4 - 2);
      uint64_t v18 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  }
  *(v8 - CsString::CsString((CsString *)this + 2) = v6;
  *(v8 - CsString::CsString((CsString *)this + 1) = v7;
  return v8;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,BOOL (*&)(_NSRange,_NSRange)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  do
  {
    char v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  uint64_t v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      uint64_t v13 = *(a2 - 2);
      uint64_t v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      uint64_t v11 = *(a2 - 2);
      uint64_t v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  uint64_t v15 = &a1[v6];
  if (v10 < a2)
  {
    uint64_t v16 = a2;
    do
    {
      long long v17 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
      do
      {
        uint64_t v18 = v15[2];
        uint64_t v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        uint64_t v20 = *(v16 - 2);
        uint64_t v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  uint64_t result = v15 - 2;
  if (v15 - 2 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)result;
  }
  *(v15 - CsString::CsString((CsString *)this + 2) = v7;
  *(v15 - CsString::CsString((CsString *)this + 1) = v8;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *((void *)a2 - 1), *(void *)a1, *((void *)a1 + 1)))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *((void *)v11 + 1), *(void *)v10, *((void *)v10 + 1)))
    {
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *((void *)v11 + 1);
      uint64_t v16 = v12;
      while (1)
      {
        long long v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32) {
          break;
        }
        v16 -= 16;
        if (((*a3)(v14, v15, *((void *)v17 + 2), *((void *)v17 + 3)) & 1) == 0)
        {
          uint64_t v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *((void *)v18 + CsString::CsString((CsString *)this + 1) = v15;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void, void, void, void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void, void, void, void))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(void, void, void, void, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    long long v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      long long v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*,_NSRange*>(char *a1, char *a2, char *a3, uint64_t (**a4)(void, void, uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __n128 v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if ((*a4)(*(void *)v14, *((void *)v14 + 1), *(void *)a1, *((void *)a1 + 1)))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      long long v17 = a2 - 16;
      do
      {
        long long v21 = *(_OWORD *)a1;
        uint64_t v18 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(a1, (unsigned int (**)(void, void, void, void))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)uint64_t v18 = v21;
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
          *(_OWORD *)long long v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, unsigned int (**a2)(void, void, void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (void *)(result + 16 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        uint64_t v10 = v12;
      }
      __n128 result = ((uint64_t (*)(void, void, void, void))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        uint64_t v13 = *v5;
        uint64_t v14 = v5[1];
        do
        {
          long long v15 = v11;
          *(_OWORD *)char v5 = *(_OWORD *)v11;
          if (v17 < v10) {
            break;
          }
          uint64_t v16 = (2 * v10) | 1;
          unint64_t v11 = (void *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              uint64_t v16 = 2 * v10 + 2;
            }
          }
          __n128 result = ((uint64_t (*)(void, void, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          char v5 = v15;
          uint64_t v10 = v16;
        }
        while (!result);
        void *v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(_OWORD *a1, unsigned int (**a2)(void, void, void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(void *)&a1[v6 + 1], *((void *)&a1[v6 + 1] + 1), *(void *)&a1[v6 + 2], *((void *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(_NSRange,_NSRange),_NSRange*>(uint64_t result, uint64_t a2, uint64_t (**a3)(void, void, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v10 = (_OWORD *)(a2 - 16);
    __n128 result = (*a3)(*v9, v9[1], *(void *)(a2 - 16), *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v11 = *(void *)(a2 - 16);
      uint64_t v12 = *(void *)(a2 - 8);
      do
      {
        uint64_t v13 = v9;
        _OWORD *v10 = *(_OWORD *)v9;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(v7 + 16 * v8);
        __n128 result = (*a3)(*v9, v9[1], v11, v12);
        uint64_t v10 = v13;
      }
      while ((result & 1) != 0);
      void *v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

uint64_t MOFullMethodName(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_opt_class();
  char v5 = NSString;
  if (v4 == a1) {
    return [NSString stringWithFormat:@"+[%@ %@]", a1, NSStringFromSelector(a2)];
  }
  uint64_t v6 = objc_opt_class();
  return [v5 stringWithFormat:@"-[%@ %@]", v6, NSStringFromSelector(a2)];
}

CFDataRef _createASCIIData(const __CFString *a1, UInt8 a2, CFIndex a3, CFIndex a4)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  if (CStringPtr)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    return CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&CStringPtr[a3], a4, v9);
  }
  else
  {
    if (a4 < 1) {
      return 0;
    }
    Mutable = CFDataCreateMutable(0, a4);
    CFDataSetLength(Mutable, a4);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    v14.location = a3;
    v14.CFIndex length = a4;
    if (a4 != CFStringGetBytes(a1, v14, 0x600u, a2, 0, MutableBytePtr, a4, 0)) {
      NSLog((NSString *)@"*** %s: Unexpected string conversion error", "NSData *_createASCIIData(CFStringRef, UInt8, CFRange)");
    }
    return Mutable;
  }
}

void sub_238CC29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

{
}

void sub_238CC3520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_238CC4694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_238CC4AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CC4D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSUImageSourceOrientation(CGImageSource *a1)
{
  CFDictionaryRef v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  int v2 = objc_msgSend((id)-[__CFDictionary objectForKey:](v1, "objectForKey:", *MEMORY[0x263F0F4C8]), "intValue");

  uint64_t result = 0;
  if ((v2 - 1) <= 7) {
    return TSUImageSourceOrientation___orientationMapping[v2 - 1];
  }
  return result;
}

void sub_238CC58A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

BOOL TSUCGImageIsEmpty(CGImage *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  memset(data, 0, sizeof(data));
  int v2 = CGBitmapContextCreateWithData(data, 1uLL, 1uLL, 8uLL, 1uLL, 0, 7u, 0, 0);
  v6.origin.x = 0.0;
  v6.origin.y = 0.0;
  v6.size.width = 1.0;
  v6.size.height = 1.0;
  CGContextDrawImage(v2, v6, a1);
  CFRelease(v2);
  return LOBYTE(data[0]) == 0;
}

void TSUSplitRectIntoSlices(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  CGSize v21 = *(CGSize *)(MEMORY[0x263F001A0] + 16);
  CGPoint v22 = (CGPoint)*MEMORY[0x263F001A0];
  remainder.origin = v22;
  remainder.size = v21;
  slice.origin = v22;
  slice.size = v21;
  v28.origin = v22;
  v28.size = v21;
  v29.origin = v22;
  v29.size = v21;
  v24.origin = v22;
  v24.size = v21;
  v25.origin = v22;
  v25.size = v21;
  v26.origin = v22;
  v26.size = v21;
  CGRectDivide(*(CGRect *)&a2, &slice, &remainder, a8, CGRectMinYEdge);
  CGRectDivide(remainder, &v29, &v28, a9, CGRectMaxYEdge);
  remainder.origin = v22;
  remainder.size = v21;
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  CGRectDivide(v31, &v24, &remainder, a6, CGRectMinXEdge);
  CGRectDivide(remainder, &v26, &v25, a7, CGRectMaxXEdge);
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 16;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = v18;
    do
    {
      *(CGRect *)(v20 - 16) = CGRectIntersection(*(CGRect *)((char *)&slice + v19), *(&v24 + v17));
      v20 += 96;
      v19 += 32;
    }
    while (v19 != 96);
    ++v17;
    v18 += 32;
  }
  while (v17 != 3);
}

UIImage *CGImagePNGRepresentationWithProperties(uint64_t a1)
{
  uint64_t result = (UIImage *)[objc_alloc(MEMORY[0x263F1C6B0]) initWithCGImage:a1];
  if (result)
  {
    int v2 = result;
    CGAffineTransform v3 = UIImagePNGRepresentation(result);

    return (UIImage *)v3;
  }
  return result;
}

UIImage *CGImageJPEGRepresentation(uint64_t a1, CGFloat a2)
{
  uint64_t result = (UIImage *)[objc_alloc(MEMORY[0x263F1C6B0]) initWithCGImage:a1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = UIImageJPEGRepresentation(result, a2);

    return (UIImage *)v5;
  }
  return result;
}

__CFData *CGImageTIFFRepresentation(CGImage *a1)
{
  int v2 = (__CFData *)[MEMORY[0x263EFF990] data];
  CGAffineTransform v3 = CGImageDestinationCreateWithData(v2, (CFStringRef)[(id)*MEMORY[0x263F1DCE0] identifier], 1uLL, 0);
  CGImageDestinationAddImage(v3, a1, 0);
  BOOL v4 = CGImageDestinationFinalize(v3);
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    return v2;
  }
  else {
    return 0;
  }
}

double TSURectWithSize()
{
  return 0.0;
}

BOOL TSUNearlyEqualPoints(double a1, double a2, double a3, double a4)
{
  BOOL v4 = vabdd_f64(a1, a3) < 0.01;
  return vabdd_f64(a2, a4) < 0.01 && v4;
}

BOOL TSUCollinearPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return fabs((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1)) < 8.90029543e-308;
}

double TSUPointOnCurve(float64x2_t *a1, double a2)
{
  __asm { FMOV            V5.2D, #3.0 }
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[1], _Q5), a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(*a1, 1.0 - a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[2], _Q5), a2), a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(a1[3], a2), a2), a2);
  return result;
}

double TSUSubtractPoints(double a1, double a2, double a3)
{
  return a1 - a3;
}

double TSUMultiplyRectScalar(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v11.origin.x = v9;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    if (!CGRectIsNull(v11)) {
      return v9 * a5;
    }
  }
  return v9;
}

double TSUPointLength(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double TSUDistance(double a1, double a2, double a3, double a4)
{
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double TSUDotPoints(double a1, double a2, double a3, double a4)
{
  return a2 * a4 + a1 * a3;
}

void TSUNormalizeAngleInDegrees(double a1)
{
}

double TSUCeilSize(double a1)
{
  return ceil(a1);
}

uint64_t TSUCustomFormatTokenIdentifierCharacterForTokenType(unsigned int a1)
{
  if (a1 < 7) {
    return (unsigned __int16)aSidcptf[a1];
  }
  uint64_t v2 = [NSString stringWithUTF8String:"unichar TSUCustomFormatTokenIdentifierCharacterForTokenType(TSUCustomNumberFormatTokenType)"];
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUCustomFormatTokenizer.m"], 352, 0, "Invalid custom number format token type!");
  +[OITSUAssertionHandler logBacktraceThrottled];
  return 83;
}

void sub_238CC97B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_238CCC4E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t SFUDeriveAes128Key(uint64_t a1, unint64_t a2, unsigned int a3, char *a4, uint64_t a5, void *a6, size_t a7)
{
  if (a4) {
    BOOL v7 = a5 == 16;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v10 = v7 && a1 != 0 && a3 >= 0x3E8 && HIDWORD(a2) == 0;
  int v11 = !v10;
  if (v10)
  {
    unsigned int v14 = a5;
    uint64_t v19 = a7 + 4;
    if (a7 + 4 <= 0x14) {
      uint64_t v19 = 20;
    }
    uint64_t v20 = (char *)malloc_type_calloc(1uLL, v19 + 40, 0x7C2FD18uLL);
    sfu_pbkdf2((uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))hmacsha1, 20, a1, a2, a6, a7, a3, a4, v14, v20);
    free(v20);
  }
  return v11 ^ 1u;
}

void hmacsha1(const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

void TSUEllipseParametricAngleWithPolarAngle(double a1, double a2, double a3)
{
  if (a2 != 0.0 && a3 != 0.0)
  {
    double v5 = a1;
    for (i = 0.0; v5 >= 360.0; double v5 = v5 + -360.0)
      double i = i + 1.0;
    for (; v5 < 0.0; double v5 = v5 + 360.0)
      double i = i + -1.0;
    if (v5 < 0.0 || v5 >= 360.0)
    {
      uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSUEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)");
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPathAdditions.m"], 37, 0, "Angle out of range");
      +[OITSUAssertionHandler logBacktraceThrottled];
    }
    if (v5 / 90.0 - floor(v5 / 90.0) >= 0.01 && ceil(v5 / 90.0) - v5 / 90.0 >= 0.01)
    {
      __double2 v8 = __sincos_stret(v5 * 3.14159265 / 180.0);
      for (double j = atan2(v8.__sinval / a3, v8.__cosval / a2) * 180.0 / 3.14159265; j < 0.0; double j = j + 360.0)
        ;
      for (; j >= 360.0; double j = j + -360.0)
        ;
      if (j < 0.0 || j >= 360.0)
      {
        uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSUEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)");
        +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/TSUBezierPathAdditions.m"], 55, 0, "Angle out of range");
        +[OITSUAssertionHandler logBacktraceThrottled];
      }
    }
  }
}

void sub_238CCF614()
{
}

void sub_238CCF6A0()
{
}

void sub_238CCFA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    uint64_t v11 = [NSString stringWithUTF8String:"-[OISFUDataRepresentation readIntoData:]"];
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUDataRepresentation.m"], 263, 0, "Caught exception trying to read storage into NSMutableData: %@");
    +[OITSUAssertionHandler logBacktraceThrottled];
    [v9 setLength:v10];
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CCFBD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CCFC88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SFUCGDataProviderGetBytes(void *a1, const char *a2, uint64_t a3)
{
  return [a1 readToBuffer:a2 size:a3];
}

uint64_t SFUCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  uint64_t v4 = [a1 offset];
  [a1 seekToOffset:v4 + a2];
  return [a1 offset] - v4;
}

uint64_t SFUCGDataProviderRewind(void *a1, const char *a2)
{
  return [a1 seekToOffset:0];
}

void SFUCGDataProviderReleaseInfo(void *a1)
{
  [a1 closeLocalStream];
}

void sub_238CD0320(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD05E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CD0958(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

FILE *SFUFileOpen(void *a1, const char *a2)
{
  CGAffineTransform v3 = fopen((const char *)[a1 fileSystemRepresentation], a2);
  if (!v3) {
    objc_msgSend(MEMORY[0x263EFF940], "sfu_errnoRaise:format:", @"SFUFileOpenError", @"Could not open %@", a1);
  }
  return v3;
}

void sub_238CD18D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD1DB8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    free(v3);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD240C(void *a1)
{
  objc_begin_catch(a1);
  free(v1);
  objc_exception_rethrow();
}

void sub_238CD2420(_Unwind_Exception *a1)
{
}

void sub_238CD3280(_Unwind_Exception *a1)
{
}

void sub_238CD32A0(void *a1)
{
}

void sub_238CD3340(_Unwind_Exception *a1)
{
}

void sub_238CD3360(void *a1)
{
}

void sub_238CD34C4(_Unwind_Exception *a1)
{
}

void sub_238CD35A0(void *a1, int a2)
{
  if (a2 == 2)
  {
    if (TSUErrorCat_init_token != -1) {
      dispatch_once(&TSUErrorCat_init_token, &__block_literal_global_14);
    }
    objc_end_catch();
  }
  JUMPOUT(0x238CD3570);
}

void sub_238CD3BE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x238CD3B90);
  }
  _Unwind_Resume(a1);
}

void sub_238CD3FD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD4B54(void *a1)
{
}

void sub_238CD5168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CD5A9C(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x238CD5B48);
}

void sub_238CD5AAC()
{
  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_238CD5AC4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x238CD5B44);
  }
  _Unwind_Resume(v2);
}

void sub_238CD5AFC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x238CD5B04);
  }
  objc_terminate();
}

void sub_238CD5B10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(a1);
      NSLog((NSString *)@"Caught exception trying to zip the output: %@");
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x238CD5A30);
  }
  _Unwind_Resume(v12);
}

uint64_t SFUZipCurrentDosTime()
{
  time_t v3 = time(0);
  uint64_t v0 = localtime(&v3);
  int tm_year = v0->tm_year;
  if (tm_year <= 81) {
    int tm_year = 81;
  }
  return ((tm_year << 25) + 1610612736) | ((v0->tm_mon << 21) + 0x200000) | (v0->tm_mday << 16) | (v0->tm_hour << 11) | (32 * v0->tm_min) | (v0->tm_sec >> 1);
}

void sub_238CD6910(_Unwind_Exception *a1)
{
}

void sub_238CD6930(void *a1)
{
}

uint64_t SFUSimpleXmlOutputWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t SFUSimpleXmlOutputCloseCallback()
{
  return 0;
}

void sub_238CD7D80(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD8204(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238CD87E0(void *a1)
{
  objc_begin_catch(a1);
  fclose(v1);
  objc_exception_rethrow();
}

void sub_238CD87F8(_Unwind_Exception *a1)
{
}

void sub_238CD8DE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238CD8EA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SFUHash(char *a1, uint64_t a2)
{
  return SFUHashWithSeed(a1, a2, 2166136261);
}

uint64_t SFUHashWithSeed(char *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    do
    {
      unsigned int v4 = *a1++;
      a3 = (16777619 * a3) ^ v4;
      --a2;
    }
    while (a2);
  }
  else
  {
    uint64_t v5 = objc_msgSend(NSString, "stringWithUTF8String:", "unsigned int SFUHashWithSeed(const char *, size_t, unsigned int)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/shared/utility/sf/SFUHash.m"], 25, 0, "SFUHash must have at least one byte of input.");
    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return a3;
}

CGPath *TSUCreateRoundRectPathForRectWithRadius(double a1, double a2, double a3, double a4, CGFloat a5)
{
  Mutable = CGPathCreateMutable();
  uint64_t v10 = Mutable;
  CGFloat v31 = a5;
  if (a5 == 0.0)
  {
    CGPathAddRectSafe(Mutable, 0, a1, a2, a3, a4);
  }
  else
  {
    if (a3 > a5 + a5 && a4 > a5 + a5)
    {
      v33.origin.x = a1;
      v33.origin.y = a2;
      v33.size.width = a3;
      v33.size.height = a4;
      *(CGRect *)&CGFloat v13 = CGRectInset(v33, a5, a5);
    }
    else
    {
      TSUCenterOfRect(a1, a2, a3, a4);
      TSURectWithOriginAndSize(v12);
    }
    CGFloat v17 = v13;
    CGFloat v18 = v14;
    CGFloat v19 = v15;
    CGFloat v20 = v16;
    double MaxX = CGRectGetMaxX(*(CGRect *)&v13);
    v34.origin.x = a1;
    v34.origin.y = a2;
    v34.size.width = a3;
    v34.size.height = a4;
    double v27 = CGRectGetMaxX(v34);
    v35.origin.x = v17;
    v35.origin.y = v18;
    v35.size.width = v19;
    v35.size.height = v20;
    double MaxY = CGRectGetMaxY(v35);
    v36.origin.x = a1;
    v36.origin.y = a2;
    v36.size.width = a3;
    v36.size.height = a4;
    double v29 = CGRectGetMaxY(v36);
    v37.origin.x = v17;
    v37.origin.y = v18;
    v37.size.width = v19;
    v37.size.height = v20;
    double MinY = CGRectGetMinY(v37);
    v38.origin.x = a1;
    v38.origin.y = a2;
    v38.size.width = a3;
    v38.size.height = a4;
    CGFloat v21 = CGRectGetMinY(v38);
    v39.origin.y = a2;
    double v22 = v21;
    v39.origin.x = a1;
    v39.size.width = a3;
    v39.size.height = a4;
    double MinX = CGRectGetMinX(v39);
    v40.origin.x = v17;
    v40.origin.y = v18;
    v40.size.width = v19;
    v40.size.height = v20;
    double v24 = CGRectGetMinX(v40);
    CGPathMoveToPointSafe(v10, 0, v24, v22);
    CGPathAddLineToPointSafe(v10, 0, MaxX, v22);
    CGPathAddArcToPointSafe(v10, 0, v27, v22, v27, MinY, v31);
    CGPathAddLineToPointSafe(v10, 0, v27, MaxY);
    CGPathAddArcToPointSafe(v10, 0, v27, v29, MaxX, v29, v31);
    CGPathAddLineToPointSafe(v10, 0, v24, v29);
    CGPathAddArcToPointSafe(v10, 0, MinX, v29, MinX, MaxY, v31);
    CGPathAddLineToPointSafe(v10, 0, MinX, MinY);
    CGPathAddArcToPointSafe(v10, 0, MinX, v22, v24, v22, v31);
    CGPathCloseSubpath(v10);
  }
  return v10;
}

void std::vector<CGRect>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<CGRect>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<CGRect>::insert(uint64_t a1, char *__src, char *a3)
{
  time_t v3 = a3;
  unsigned int v4 = __src;
  CGRect v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v14 = *(char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 5) + 1;
    if (v15 >> 59) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = __src - v14;
    uint64_t v17 = (__src - v14) >> 5;
    uint64_t v18 = v7 - (void)v14;
    if (v18 >> 4 > v15) {
      unint64_t v15 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v15;
    }
    uint64_t v34 = a1 + 16;
    if (v19) {
      CGFloat v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(a1 + 16, v19);
    }
    else {
      CGFloat v20 = 0;
    }
    BOOL v23 = &v20[32 * v17];
    __p = v20;
    CGFloat v31 = v23;
    uint64_t v32 = v23;
    CGRect v33 = &v20[32 * v19];
    if (v17 == v19)
    {
      if (v16 < 1)
      {
        if (v14 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v16 >> 4;
        }
        CGRect v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v8, v25);
        BOOL v23 = &v26[32 * (v25 >> 2)];
        __p = v26;
        CGFloat v31 = v23;
        CGRect v33 = &v26[32 * v27];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v24 = v17 + 2;
        if (v17 >= -1) {
          unint64_t v24 = v17 + 1;
        }
        v23 -= 32 * (v24 >> 1);
        CGFloat v31 = v23;
      }
    }
    long long v28 = *((_OWORD *)v3 + 1);
    *(_OWORD *)BOOL v23 = *(_OWORD *)v3;
    *((_OWORD *)v23 + CsString::CsString((CsString *)this + 1) = v28;
    uint64_t v32 = v23 + 32;
    unsigned int v4 = (char *)std::vector<CGRect>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v32 != v31) {
      v32 += (v31 - v32 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v22 = *((_OWORD *)a3 + 1);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + CsString::CsString((CsString *)this + 1) = v22;
    *(void *)(a1 + 8) = __src + 32;
  }
  else
  {
    double v9 = __src + 32;
    uint64_t v10 = v6 - 32;
    uint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      long long v13 = *((_OWORD *)v10 + 1);
      v10 += 32;
      _OWORD *v11 = v12;
      v11[1] = v13;
      v11 += 2;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-32 * ((v6 - v9) >> 5)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 32 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    long long v21 = *((_OWORD *)v3 + 1);
    *(_OWORD *)unsigned int v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + CsString::CsString((CsString *)this + 1) = v21;
  }
  return v4;
}

void sub_238CDBD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CGRect>::__append(void **a1, unint64_t a2)
{
  CGRect v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    double v14 = &v13[32 * v10];
    unint64_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - CsString::CsString((CsString *)this + 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - CsString::CsString((CsString *)this + 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void *std::vector<CGRect>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  CGRect v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 1);
      unint64_t v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 3CsString::CsString((CsString *)this + 2) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  double v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  unint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  uint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t TSUBase64UpdateBase64StringWithChunk(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >= 3)
  {
    uint64_t v5 = 0;
    CGRect v6 = (_WORD *)(a1 + 2 * a2 + 4);
    do
    {
      *(v6 - CsString::CsString((CsString *)this + 2) = ENCODE_ALPHABETS[(unint64_t)*(unsigned __int8 *)(a3 + v5) >> 2];
      *(v6 - CsString::CsString((CsString *)this + 1) = ENCODE_ALPHABETS[((unint64_t)*(unsigned __int8 *)(a3 + v5 + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(unsigned char *)(a3 + v5) & 3))];
      *CGRect v6 = ENCODE_ALPHABETS[((unint64_t)*(unsigned __int8 *)(a3 + v5 + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(unsigned char *)(a3 + v5 + 1) & 0xF))];
      a2 += 4;
      v6[1] = ENCODE_ALPHABETS[*(unsigned char *)(a3 + v5 + 2) & 0x3F];
      unint64_t v4 = v5 + 3;
      unint64_t v7 = v5 + 6;
      v6 += 4;
      v5 += 3;
    }
    while (v7 <= a4);
  }
  else
  {
    unint64_t v4 = 0;
  }
  if (v4 < a4)
  {
    unint64_t v8 = *(unsigned __int8 *)(a3 + v4);
    uint64_t v9 = a2 + 1;
    *(_WORD *)(a1 + 2 * aCsString::CsString((CsString *)this + 2) = ENCODE_ALPHABETS[v8 >> 2];
    unint64_t v10 = v4 + 1;
    if (v10 >= a4)
    {
      *(_WORD *)(a1 + 2 * v9) = ENCODE_ALPHABETS[16 * (v8 & 3)];
      __int16 v12 = 61;
    }
    else
    {
      unint64_t v11 = *(unsigned __int8 *)(a3 + v10);
      *(_WORD *)(a1 + 2 * v9) = ENCODE_ALPHABETS[(v11 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v8 & 3))];
      __int16 v12 = ENCODE_ALPHABETS[4 * (v11 & 0xF)];
    }
    uint64_t v13 = a1 + 2 * a2;
    *(_WORD *)(v13 + 4) = v12;
    *(_WORD *)(v13 + 6) = 61;
    a2 += 4;
  }
  return a2;
}

void TSUFormatStructRelease(id *a1)
{
  int v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 266 || v1 == 261)
  {
    unint64_t v2 = a1 + 2;
  }
  else
  {
    if ((v1 - 270) > 2) {
      return;
    }
    unint64_t v2 = a1 + 1;
  }
  time_t v3 = *v2;
}

id *TSUFormatStructRetain(id *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result == 266 || v1 == 261)
  {
    unint64_t v2 = result + 2;
  }
  else
  {
    if ((v1 - 270) > 2) {
      return result;
    }
    unint64_t v2 = result + 1;
    id v3 = result[2];
  }
  unint64_t v4 = *v2;
  return (id *)v4;
}

uint64_t TSUFormatStructCustomEqualKeys(void **a1, void **a2)
{
  unint64_t v2 = *a1;
  if (v2 == *a2) {
    return 1;
  }
  if (*a2) {
    return objc_msgSend(v2, "isEqual:");
  }
  return 0;
}

unint64_t TSUFormatStructHash(unsigned int *a1)
{
  unint64_t v1 = *a1;
  if ((v1 & 0xFFFFFFFC) == 0x100)
  {
    uint64x2_t v2 = (uint64x2_t)vdupq_n_s64(a1[2]);
    int8x16_t v3 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_238EDB2D0), (int8x16_t)xmmword_238EDB300), vandq_s8((int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_238EDB2E0), (int8x16_t)xmmword_238EDB2F0));
    uint64_t v4 = (uint64_t)vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
    unint64_t v5 = (unsigned __int16)a1[2] ^ v1;
    return v5 ^ v4;
  }
  switch((int)v1)
  {
    case 261:
      uint64_t v7 = __rbit32(a1[2]) >> 30;
      return [*((id *)a1 + 2) hash] ^ 0x105 ^ v7;
    case 262:
      unint64_t v5 = *((char *)a1 + 8);
      uint64_t v4 = 262;
      return v5 ^ v4;
    case 268:
      unint64_t v5 = (4 * (a1[3] | *((void *)a1 + 2))) | HIDWORD(*((void *)a1 + 2));
      uint64_t v4 = 268;
      return v5 ^ v4;
    case 269:
      return ((*((unsigned __int16 *)a1 + 4) << 9) & 0x1FFFE | (*((unsigned __int16 *)a1 + 4) >> 7) & 0x1FFFEu | (unint64_t)(*((unsigned char *)a1 + 10) & 1)) ^ 0x10D;
    default:
      if ((v1 - 270) <= 2)
      {
        unint64_t v8 = [*((id *)a1 + 1) hash];
LABEL_14:
        v1 ^= v8;
        return v1;
      }
      if ((v1 - 264) < 2)
      {
        long long v9 = *(_OWORD *)(a1 + 6);
        v12[0] = *(_OWORD *)(a1 + 2);
        v12[1] = v9;
        unint64_t v8 = TSUFormatStructControlHash((uint64_t)v12);
        goto LABEL_14;
      }
      if (v1 != 266) {
        return v1;
      }
      unint64_t v10 = *((void *)a1 + 1);
      uint64_t v11 = objc_msgSend((id)objc_msgSend(*((id *)a1 + 2), "choices"), "hash");
      unint64_t v5 = v10 ^ HIDWORD(v10);
      uint64_t v4 = v11 ^ 0x10A;
      return v5 ^ v4;
  }
}

unint64_t TSUFormatStructControlHash(uint64_t a1)
{
  uint64_t v2 = TSUHash((char *)a1, 8);
  uint64_t v3 = TSUHash((char *)(a1 + 8), 8) ^ v2;
  return v3 ^ TSUHash((char *)(a1 + 16), 8) ^ *(unsigned int *)(a1 + 24) ^ (((unint64_t)*(unsigned __int8 *)(a1 + 28) >> 2) & 3 | (4 * (*(unsigned char *)(a1 + 28) & 3)));
}

void sub_238CDF588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_238CDF8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

os_log_t TSULogCreateCategory(char *category)
{
  os_log_t v1 = os_log_create("com.apple.iwork", category);
  return v1;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void tsuSaObjectPage::~tsuSaObjectPage(tsuSaObjectPage *this)
{
  *(void *)this = &unk_26EBD5490;
  for (uint64_t i = 8; i != 2056; i += 8)
  {
    uint64_t v3 = *(void **)((char *)this + i);
    *(void *)((char *)this + i) = 0;
  }
  uint64_t v4 = 2048;
  do
  {

    v4 -= 8;
  }
  while (v4);
}

{
  uint64_t vars8;

  tsuSaObjectPage::~tsuSaObjectPage(this);
  JUMPOUT(0x23EC997B0);
}

void tsuSaObjectPage::foreach(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = 0;
  unint64_t v10 = a2;
  uint64_t v8 = a1 + 8;
  do
  {
    if (*a4) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 8 * v7);
    if (v9) {
      v10[2](v10, v9, a3 + v7, a4);
    }
    ++v7;
  }
  while (v7 != 256);
}

void sub_238CE0E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void tsuSaObjectPage::deepCopy(tsuSaObjectPage *this)
{
}

void tsuSaIndexPage::~tsuSaIndexPage(tsuSaIndexPage *this)
{
  *(void *)this = &unk_26EBD54C0;
  for (uint64_t i = 8; i != 2056; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      *(void *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t vars8;

  tsuSaIndexPage::~tsuSaIndexPage(this);
  JUMPOUT(0x23EC997B0);
}

void tsuSaIndexPage::deepCopy(tsuSaIndexPage *this)
{
}

void tsuSaIndexPage::foreach(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v11 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = a3 << 8;
  uint64_t v9 = a1 + 8;
  do
  {
    if (*a4) {
      break;
    }
    uint64_t v10 = *(void *)(v9 + v7);
    if (v10) {
      (*(void (**)(uint64_t, id, uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v11, v8, a4);
    }
    v8 += 256;
    v7 += 8;
  }
  while (v7 != 2048);
}

void sub_238CE10E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238CE12BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_238CE137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238CE1450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE16D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE18D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t tsuSaObjectPage::setObjectAtIndex(tsuSaObjectPage *this, objc_object *a2, uint64_t a3)
{
  uint64_t v4 = (char *)this + 8 * a3;
  uint64_t v7 = *((void *)v4 + 1);
  unint64_t v5 = (id *)(v4 + 8);
  uint64_t v6 = v7;
  if (a2) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = -1;
  }
  if (v6) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = a2 != 0;
  }
  objc_storeStrong(v5, a2);

  return v9;
}

void sub_238CE19EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE1AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE1C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE4DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void sub_238CE5768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_238CE6C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE70E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE735C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE76A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CE84C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE8568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE8608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE8718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_238CE898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_238CE8A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id TSU::UUIDData<TSP::UUIDData>::NSStringValue(const unsigned __int8 *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  memset(v3, 0, sizeof(v3));
  uuid_unparse_upper(a1, v3);
  uint64_t v1 = [NSString stringWithUTF8String:v3];
  return v1;
}

void sub_238CE8C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_238CE8D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_238CE8EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_238CE8FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE9028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE90A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE9120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE91A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE9220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE92A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE95D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238CE9684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__erase_unique<TSU::UUIDData<TSP::UUIDData>>(void *a1, void *a2)
{
  __n128 result = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::find<TSU::UUIDData<TSP::UUIDData>>(a1, a2);
  if (result)
  {
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::find<TSU::UUIDData<TSP::UUIDData>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v4 = v3 ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3 ^ *a2;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  __n128 result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1CsString::CsString((CsString *)this + 1) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_unique_key_args<TSU::UUIDData<TSP::UUIDData>,TSU::UUIDData<TSP::UUIDData> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 ^ *a2;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + CsString::CsString((CsString *)this + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_42:
    void *v21 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_238CE9B6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v1CsString::CsString((CsString *)this + 2) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v1CsString::CsString((CsString *)this + 2) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<TSU::UUIDData<TSP::UUIDData>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + CsString::CsString((CsString *)this + 1) = *((_OWORD *)a2 + 1);
      uint8x8_t v9 = (void *)*v8;
      unint64_t v10 = v8[3] ^ v8[2];
      v8[1] = v10;
      inserted = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare((uint64_t)a1, v10, v8 + 2);
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_multi<TSU::UUIDData<TSP::UUIDData> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_238CE9EAC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_238CE9ECC(_Unwind_Exception *a1)
{
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  BOOL v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    __n128 result = v16;
    BOOL v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    if (v19 == a2)
    {
      BOOL v21 = v16[2] == *a3 && v16[3] == a3[1];
      BOOL v22 = v21;
    }
    else
    {
      BOOL v22 = 0;
    }
    int v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
              if (!v13) {
                break;
              }
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v1CsString::CsString((CsString *)this + 2) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v1CsString::CsString((CsString *)this + 2) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__emplace_multi<TSU::UUIDData<TSP::UUIDData> const&>(void *a1, _OWORD *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + CsString::CsString((CsString *)this + 1) = *a2;
  unint64_t v5 = v4[3] ^ v4[2];
  *int8x8_t v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_238CEA3F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<TSU::UUIDData<TSP::UUIDData>>::__init_with_size[abi:ne180100]<TSU::UUIDData<TSP::UUIDData>*,TSU::UUIDData<TSP::UUIDData>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_238CEA46C(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__hash_table<TSU::UUIDData<TSP::UUIDData>,std::hash<TSU::UUIDData<TSP::UUIDData>>,std::equal_to<TSU::UUIDData<TSP::UUIDData>>,std::allocator<TSU::UUIDData<TSP::UUIDData>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        __n128 result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void sub_238CEAE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void sub_238CEB9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_238CEBD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CECCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CEF8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CF2F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_238CF3378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void sub_238CF376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238CF47F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

void sub_238CF5164(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t (*sfu_pbkdf2(uint64_t (*result)(uint64_t, uint64_t, char *, uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, void *__src, size_t __n, unsigned int a7, char *a8, unsigned int a9, char *a10))(uint64_t, uint64_t, char *, uint64_t, char *)
{
  BOOL v16 = result;
  uint64_t v17 = a9 / a2;
  unint64_t v18 = &a10[a2];
  size_t v24 = a9 % a2;
  if (a2 <= a9)
  {
    uint64_t v25 = a2;
    unsigned int v19 = 1;
    do
    {
      CGRect v26 = a8;
      int v23 = a8;
      uint64_t v20 = a2;
      BOOL v21 = v18;
      uint64_t v22 = v17;
      __n128 result = (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))F(v16, a2, a3, a4, __src, __n, a7, v19, v23, v18);
      uint64_t v17 = v22;
      unint64_t v18 = v21;
      a2 = v20;
      a8 = &v26[v25];
      ++v19;
    }
    while (v19 <= v17);
  }
  else
  {
    unsigned int v19 = 1;
  }
  if (v24)
  {
    F(v16, a2, a3, a4, __src, __n, a7, v19, a10, v18);
    return (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))memcpy(a8, a10, v24);
  }
  return result;
}

void *F(uint64_t (*a1)(uint64_t, uint64_t, char *, uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, void *__src, size_t __n, unsigned int a7, int a8, void *a9, char *a10)
{
  int v11 = __n;
  size_t v16 = a2;
  uint64_t v17 = a10;
  unint64_t v18 = &a10[a2];
  memcpy(v18, __src, __n);
  v18[v11] = HIBYTE(a8);
  v18[v11 + 1] = BYTE2(a8);
  v18[v11 + 2] = BYTE1(a8);
  v18[v11 + 3] = a8;
  a1(a3, a4, v18, (v11 + 4), a10);
  size_t v19 = v16;
  __n128 result = memcpy(a9, a10, v16);
  if (a7 >= 2)
  {
    unsigned int v21 = 2;
    do
    {
      uint64_t v22 = v18;
      __n128 result = (void *)a1(a3, a4, v17, a2, v18);
      if (a2)
      {
        size_t v23 = v19;
        size_t v24 = a9;
        uint64_t v25 = v18;
        do
        {
          char v26 = *v25++;
          *v24++ ^= v26;
          --v23;
        }
        while (v23);
      }
      ++v21;
      unint64_t v18 = v17;
      uint64_t v17 = v22;
    }
    while (v21 <= a7);
  }
  return result;
}

id p_currencyCodeStore()
{
  if (p_currencyCodeStore_onceToken != -1) {
    dispatch_once(&p_currencyCodeStore_onceToken, &__block_literal_global_29);
  }
  uint64_t v0 = (void *)sCurrencyCodeStore;
  return v0;
}

void __p_currencyCodeStore_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)sCurrencyCodeStore;
  sCurrencyCodeStore = v0;
}

id TSUCurrencyCodeForIndex(unsigned int a1)
{
  uint64_t v2 = p_currencyCodeStore();
  uint64_t v3 = [v2 stringForIndex:a1];

  return v3;
}

void sub_238CF7078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_238CF901C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_238CF9F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_238CFC308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void sub_238CFCFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void sub_238CFD8F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_238CFEE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 144), 8);
  _Block_object_dispose((const void *)(v12 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

BOOL TSUEncodedBlockInfoAreEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 encodedLength];
  if (v5 == [v4 encodedLength])
  {
    uint64_t v6 = [v3 decodedLength];
    BOOL v7 = v6 == [v4 decodedLength];
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_238D03B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

uint64_t TSUIOUtilsCGDataProviderGetBytes(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 readToBuffer:a2 size:a3];

  return v6;
}

uint64_t TSUIOUtilsCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 offset];
  [v3 seekToOffset:v4 + a2];
  uint64_t v5 = [v3 offset] - v4;

  return v5;
}

void TSUIOUtilsCGDataProviderRewind(void *a1)
{
  id v1 = a1;
  [v1 seekToOffset:0];
}

void TSUIOUtilsCGDataProviderReleaseInfo(void *a1)
{
  id cf = a1;
  [cf close];
  CFRelease(cf);
}

void __TSUIOUtilsCGDataProviderGetBytes_block_invoke()
{
  uint64_t v0 = TSULogCreateCategory("TSUDefaultCat");
  id v1 = (void *)TSUDefaultCat_log_t;
  TSUDefaultCat_log_t = v0;
}

void __TSUIOUtilsCGDataProviderSkipForward_block_invoke()
{
  uint64_t v0 = TSULogCreateCategory("TSUDefaultCat");
  id v1 = (void *)TSUDefaultCat_log_t;
  TSUDefaultCat_log_t = v0;
}

void __TSUIOUtilsCGDataProviderRewind_block_invoke()
{
  uint64_t v0 = TSULogCreateCategory("TSUDefaultCat");
  id v1 = (void *)TSUDefaultCat_log_t;
  TSUDefaultCat_log_t = v0;
}

void __TSUIOUtilsCGDataProviderReleaseInfo_block_invoke()
{
  uint64_t v0 = TSULogCreateCategory("TSUDefaultCat");
  id v1 = (void *)TSUDefaultCat_log_t;
  TSUDefaultCat_log_t = v0;
}

void sub_238D044D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238D04A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
}

void sub_238D05074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D051AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void sub_238D05328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D053B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D05558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D05640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D056B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_238D0573C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_238D058CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_238D05A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D05ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);

  _Unwind_Resume(a1);
}

void sub_238D05BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D05CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238D05DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, ...)
{
  va_start(va, a8);

  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_238D05E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D05ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSULocker::~TSULocker((id *)va);

  _Unwind_Resume(a1);
}

void sub_238D05FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);

  TSULocker::~TSULocker((id *)va);
  _Unwind_Resume(a1);
}

void sub_238D06108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238D06248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D06380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D06568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TSULocker::TSULocker(TSULocker *this, NSLock *a2)
{
  id v3 = a2;
  *(void *)this = v3;
  [(NSLock *)v3 lock];
}

void sub_238D0666C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TSULocker::~TSULocker(id *this)
{
}

char *std::vector<TSU::UUIDData<TSP::UUIDData>>::__assign_with_size[abi:ne180100]<TSU::UUIDData<TSP::UUIDData>*,TSU::UUIDData<TSP::UUIDData>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  BOOL v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + CsString::CsString((CsString *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](v7, v11);
    size_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      size_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    size_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_238D06828(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void sub_238D06FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void sub_238D07160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238D07324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238D0844C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238D0852C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0866C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D087C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D08910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D08BB0()
{
  objc_end_catch();
  JUMPOUT(0x238D08AB0);
}

void sub_238D08C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D08D68(_Unwind_Exception *a1)
{
  objc_sync_exit(v4);

  _Unwind_Resume(a1);
}

void sub_238D08E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D08EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCBundleResourcePackageEntry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D0A90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0A9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0AAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0ABC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0AC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCDumpReadUI8(FILE *__stream)
{
  unsigned __int8 __ptr = 0;
  if (fread(&__ptr, 1uLL, 1uLL, __stream) != 1)
  {
    id v1 = [NSString stringWithUTF8String:"UInt8 TCDumpReadUI8(FILE *)"];
    uint64_t v2 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCDump.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v1 file:v2 lineNumber:132 isFatal:0 description:"Unexpected number of bytes read"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return __ptr;
}

void sub_238D0ADB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCDumpReadLEUI32(FILE *a1)
{
  int UI8 = TCDumpReadUI8(a1);
  unsigned int v3 = UI8 | (TCDumpReadUI8(a1) << 8);
  int v4 = TCDumpReadUI8(a1);
  return (v4 << 16) | (TCDumpReadUI8(a1) << 24) | v3;
}

void writeIntToXml(xmlNode *a1, uint64_t a2, int a3, int a4, void *a5, void *a6)
{
  id v23 = a5;
  id v11 = a6;
  if (v23)
  {
    uint64_t v12 = [v23 typeName];

    if (v12)
    {
      size_t v13 = [v23 typeName];
      sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"enumType", v13);
    }
    uint64_t v14 = [v23 nameForValue:a2];
    if (v14) {
      sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"enumValue", v14);
    }
  }
  uint64_t v15 = 117;
  if (a4) {
    uint64_t v15 = 115;
  }
  uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%ci%d", v15, (8 * a3));
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"type", v16);
  uint64_t v17 = (int)a2;
  uint64_t v18 = objc_msgSend(NSString, "stringWithFormat:", @"%ld", (int)a2);
  if ((a4 & 1) == 0)
  {
    uint64_t v19 = objc_msgSend(NSString, "stringWithFormat:", @"%lu", v17);

    uint64_t v18 = (void *)v19;
  }
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"dec", v18);
  uint64_t v20 = objc_msgSend(NSString, "stringWithFormat:", @"%08lX", v17);
  unsigned int v21 = [v20 substringFromIndex:8 - 2 * a3];

  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"hex", v21);
  uint64_t v22 = [NSNumber numberWithLong:v17];
  [v11 cacheValueforCurrentField:v22];
}

void sub_238D0B04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void writeRealToXml(xmlNode *a1, int a2, double a3)
{
  objc_msgSend(NSString, "stringWithFormat:", @"f%d", (8 * a2));
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  sfaxmlSetNSStringNoNsProp(a1, (const xmlChar *)"type", v5);
  sfaxmlSetDoubleNoNsProp(a1, (const xmlChar *)"real", a3);
}

void sub_238D0B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0B1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0B3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0B564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0B848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0B9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0BBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id readIntegerFromBinaryToXml(TCDumpNumeric *a1, NSString *a2, __sFILE *a3, _xmlNode *a4)
{
  BOOL v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = xmlNewNode(0, (const xmlChar *)[(NSString *)v8 UTF8String]);
  xmlAddChild(a4, v9);
  uint64_t v10 = objc_alloc_init(TCDumpBinaryToXmlState);
  [(TCDumpBinaryToXmlState *)v10 setCurrentField:v8];
  [(TCDumpNumeric *)v7 fromBinary:a3 toXml:v9 state:v10];
  id v11 = [(TCDumpBinaryToXmlState *)v10 valueForCurrentField];

  return v11;
}

void sub_238D0BD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D0C1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0C52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0C660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0C890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL CXOptionalStringAttribute(_xmlNode *a1, void *a2, xmlChar *a3, void *a4)
{
  BOOL v7 = a2;
  uint64_t v8 = CXFindAttribute(a1, v7, a3);
  if (v8) {
    *a4 = (id)objc_msgSend([NSString alloc], "tc_initWithValueOfXmlAttribute:", v8);
  }

  return v8 != 0;
}

void sub_238D0C998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCEnumerationMapApplier(const void *a1, const void *a2, uint64_t (**a3)(void, void, void))
{
  return ((uint64_t (**)(void, const void *, const void *))a3)[2](a3, a1, a2);
}

void sub_238D0CE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0CEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0D108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0D22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0D2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0D388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0D40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0D514(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D0D638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

TCMessageEntry *createEntryForException(NSException *a1, ...)
{
  va_start(va, a1);
  id v1 = a1;
  if (!v1)
  {
    uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "TCMessageEntry *createEntryForException(NSException *__strong, ...)");
    unsigned int v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCMessageContext.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:437 isFatal:0 description:"All exceptions passed to TCMessageContext should be non-nil."];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v4 = [(NSException *)v1 getEntry];
  }
  else
  {
    id v5 = (id)TCUnknownProblemMessage;
    uint64_t v6 = [(NSException *)v1 name];
    int v7 = [v6 isEqualToString:*MEMORY[0x263EFF570]];

    if (v7)
    {
      id v8 = (id)TCOutOfMemoryMessage;

      id v5 = v8;
    }
    uint64_t v9 = [TCMessageEntry alloc];
    uint64_t v10 = [v5 messageTag];
    id v11 = [v5 messageText];
    int v4 = [(TCMessageEntry *)v9 initWithTag:v10 affectedObject:0 text:v11 parameters:va];
  }
  return v4;
}

void sub_238D0D830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0D914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0D9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D0DA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0DB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0DC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0DCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0DDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11 = v10;

  _Unwind_Resume(a1);
}

void sub_238D0DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0DFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11 = v10;

  _Unwind_Resume(a1);
}

void sub_238D0E084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0E1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0E558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0E9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0EA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0ED1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0EF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0F070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0F30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0F424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCVerifyInputMeetsCondition(uint64_t result)
{
  if ((result & 1) == 0) {
    return +[TCMessageException raise:TCInvalidFileFormatMessage];
  }
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void sub_238D0F698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0F914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0FB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D0FD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D0FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1017C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D10220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  size_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D105F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D106AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D10830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D108C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1096C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D10A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D10CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D10D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D10E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D10F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D10F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D110D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D111B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1161C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_238D116BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1178C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D119C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id TCInvalidXmlCharacterSet(void)
{
  if (TCInvalidXmlCharacterSet(void)::onceToken != -1) {
    dispatch_once(&TCInvalidXmlCharacterSet(void)::onceToken, &__block_literal_global_39);
  }
  uint64_t v0 = (void *)TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet;
  return v0;
}

void ___Z24TCInvalidXmlCharacterSetv_block_invoke()
{
  id v3 = (id)objc_opt_new();
  [v3 addCharactersInString:@"\t\r\n"];
  objc_msgSend(v3, "addCharactersInRange:", 32, 55264);
  objc_msgSend(v3, "addCharactersInRange:", 57344, 8190);
  objc_msgSend(v3, "addCharactersInRange:", 0x10000, 0x100000);
  uint64_t v0 = [v3 invertedSet];
  uint64_t v1 = [v0 copy];
  uint64_t v2 = (void *)TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet;
  TCInvalidXmlCharacterSet(void)::invalidXmlCharacterSet = v1;
}

void sub_238D11AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D11C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D11E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1200C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D12088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D12148(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_238D121CC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void sub_238D127C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D12A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D12F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D131A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPNumberFromArabicString(_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v2 = this;
  id v3 = [MEMORY[0x263F08B08] scannerWithString:v2];
  int v14 = 0;
  if ([v3 scanInt:&v14]
    && ((int v4 = [v3 isAtEnd], v5 = v14, v14 >= 0) ? (v6 = v4) : (v6 = 0), v6 == 1))
  {
    int v7 = v3;
  }
  else
  {
    float v13 = 0.0;
    int v7 = [MEMORY[0x263F08B08] scannerWithString:v2];

    if ([v7 scanFloat:&v13])
    {
      int v8 = [v7 isAtEnd];
      if (v13 >= 0.0) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      BOOL v10 = v9 == 1;
      unint64_t v11 = vcvtas_u32_f32(v13);
      if (v10) {
        uint64_t v5 = v11;
      }
      else {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  return v5;
}

void sub_238D13328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPNumberFromRomanUpperLabel(_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v2 = this;
  id v3 = (char *)[(_anonymous_namespace_ *)v2 UTF8String];
  LOBYTE(v4) = *v3;
  if (*v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263EF8318];
    while (1)
    {
      if ((v4 & 0x80) != 0) {
        int v7 = __maskrune((char)v4, 0x100uLL);
      }
      else {
        int v7 = *(_DWORD *)(v6 + 4 * (char)v4 + 60) & 0x100;
      }
      if (!v7 || (unint64_t v8 = (*v3 & 0xFFFFFFFFFFFFFFDFLL) - 65, ((0x34FE4F3uLL >> v8) & 1) != 0))
      {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_17;
      }
      if (!v3[1]) {
        break;
      }
      if (v10 <= v9)
      {
        int v4 = v3[1];
      }
      else
      {
        uint64_t v9 = v10 - v9;
        int v4 = v3[2];
        ++v3;
      }
      v5 += v9;
      ++v3;
      if (!v4) {
        goto LABEL_17;
      }
    }
    v5 += v9;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_17:

  return v5;
}

void sub_238D13454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPNumberFromRomanLowerLabel(_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v2 = [(_anonymous_namespace_ *)this uppercaseString];

  return v4;
}

void sub_238D134A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPNumberFromAlphaUpperLabel(_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = [(_anonymous_namespace_ *)v2 length];
  uint64_t v4 = v2;
  uint64_t v5 = (char *)[(_anonymous_namespace_ *)v4 UTF8String];
  char v6 = *v5;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263EF8318];
    while (v6 < 0 ? __maskrune(v6, 0x100uLL) : *(_DWORD *)(v8 + 4 * v6 + 60) & 0x100)
    {
      char v6 = *v5;
      if (((v5[v7] ^ *v5) & 0xDF) != 0) {
        break;
      }
      if (v3 == ++v7) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_9:
    uint64_t v10 = 26 * v3 + (char)(v6 & 0xDF) - 90;
  }

  return v10;
}

void sub_238D13594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPNumberFromAlphaLowerLabel(_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v2 = [(_anonymous_namespace_ *)this uppercaseString];

  return v4;
}

void sub_238D135E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D13798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D14984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TSWPArabicLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1 = this;
  if (!this)
  {
    uint64_t v2 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPArabicLabelFromNumber"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:425 isFatal:0 description:"Illegal value for arabic numeral topic label <= 0"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (v1 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v1;
  }
  return objc_msgSend(NSString, "stringWithFormat:", @"%d", v4);
}

void sub_238D14C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPRomanUpperLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1 = this;
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_238A75000);
  }
  if (!v1)
  {
    uint64_t v2 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPRomanUpperLabelFromNumber"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:528 isFatal:0 description:"Illegal value for roman numeral topic label <= 0"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (v1 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v1;
  }
  uint64_t v5 = [MEMORY[0x263F089D8] string];
  uint64_t v6 = 12;
  do
  {
    if (v4 >= *(_DWORD *)v7)
    {
      uint64_t v8 = *((void *)v7 + 1);
      do
      {
        [v5 appendString:v8];
        v4 -= *(_DWORD *)v7;
      }
      while (v4 >= *(_DWORD *)v7);
    }
    BOOL v10 = v6-- != 0;
  }
  while (v4 && v10);
  return v5;
}

void sub_238D14E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPRomanLowerLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1 = ;
  uint64_t v2 = [v1 lowercaseString];

  return v2;
}

void sub_238D14E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPAlphaLowerLabelFromNumber(_anonymous_namespace_ *this)
{
  unsigned int v1 = ;
  uint64_t v2 = [v1 lowercaseString];

  return v2;
}

void sub_238D14EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPFootnoteSymbolFromNumber(_anonymous_namespace_ *this)
{
  int v1 = (int)this;
  uint64_t v2 = [MEMORY[0x263F089D8] string];
  unint64_t v4 = ((unint64_t)(v1 - 1) >> 2) + 1;
  do
  {
    objc_msgSend(v2, "appendFormat:", @"%C", v3);
    --v4;
  }
  while (v4);
  return v2;
}

void sub_238D14F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::ideographicNumberStringForValue(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = [MEMORY[0x263F089D8] string];
  uint64_t v5 = v4;
  uint64_t v6 = a2;
  if (a1)
  {
    id v9 = v4;
    id v23 = v9;
    unsigned int v24 = a2;
    char v25 = 1;
    unint64_t v11 = v26 = v8;
    [v9 appendString:v11];

    uint64_t v12 = [NSString stringWithCharacters:&v22 length:1];
    if (a2 && a2 != 3)
    {
      uint64_t v17 = (void *)MEMORY[0x263EFF980];
      uint64_t v18 = [v9 componentsSeparatedByString:v12];
      float v13 = [v17 arrayWithArray:v18];

      [v13 removeObject:&stru_26EBF24D8];
      uint64_t v19 = [v13 componentsJoinedByString:v12];
      int v14 = (void *)[v19 mutableCopy];

      if ((unint64_t)[v14 length] >= 2)
      {
        int v20 = [v14 characterAtIndex:0];
        int v21 = [v14 characterAtIndex:1];
          && (v21 == *((unsigned __int16 *)v7 + 2)
        {
          objc_msgSend(v14, "deleteCharactersInRange:", 0, 1);
        }
      }
    }
    else
    {
      float v13 = [v9 stringByReplacingOccurrencesOfString:v12 withString:&stru_26EBF24D8];
      int v14 = (void *)[v13 mutableCopy];
    }
    id v15 = v14;
  }
  else
  {
    id v15 = v5;
  }

  return v15;
}

void sub_238D15214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPCircledNumberLabelFromNumber(_anonymous_namespace_ *this)
{
  if (!this)
  {
    uint64_t v2 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPCircledNumberLabelFromNumber"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:825 isFatal:0 description:"Illegal value for circled number numeral topic label <= 0"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v4 = 0;
  while (1)
  {
      break;
    if (++v4 == 3) {
      goto LABEL_7;
    }
  }
  uint64_t v6 = [NSString stringWithCharacters:&v8 length:1];
  if (!v6)
  {
    uint64_t v6 = LABEL_7:;
  }
  return v6;
}

void sub_238D153B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPArabicLabelFromNumberAndLocale(_anonymous_namespace_ *this, void *a2, NSString *a3)
{
  unsigned int v3 = this;
  id v4 = a2;
  if (!v3)
  {
    unsigned int v5 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::TSWPArabicLabelFromNumberAndLocale(unsigned int, NSString *__strong)");
    uint64_t v6 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:437 isFatal:0 description:"Illegal value for arabic numeral topic label <= 0"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (v3 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v3;
  }
  id v8 = objc_alloc_init(MEMORY[0x263F08A30]);
  id v9 = (void *)[objc_alloc(MEMORY[0x263EFF960]) initWithLocaleIdentifier:v4];
  [v8 setLocale:v9];

  uint64_t v10 = [NSNumber numberWithUnsignedInt:v7];
  unint64_t v11 = [v8 stringFromNumber:v10];

  return v11;
}

void sub_238D15508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPArabianAbjadLabelFromNumber(_anonymous_namespace_ *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (this < 0xF4240)
  {
    uint64_t v6 = this;
    if (this)
    {
      if (this >= 0x3E8)
      {
        unsigned int v8 = this / 0x3E8;
        int v7 = v9 + 1;
        __b[v9] = 39;
        uint64_t v6 = (_anonymous_namespace_ *)(v6 - 1000 * v8);
      }
      else
      {
        int v7 = 0;
      }
      if (v10 >= 0xC)
      {
        unint64_t v11 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPArabianAbjadLabelFromNumber(uint)"];
        uint64_t v12 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
        +[OITSUAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:778 isFatal:0 description:"string out of bounds"];

        +[OITSUAssertionHandler logBacktraceThrottled];
      }
      unsigned int v5 = [NSString stringWithCharacters:__b length:v10];
    }
    else {
      unsigned int v5 = {;
    }
    }
  }
  else
  {
    unsigned int v3 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPArabianAbjadLabelFromNumber(uint)"];
    id v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:754 isFatal:0 description:"number out of bounds for algorithm"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    unsigned int v5 = 0;
  }
  return v5;
}

void sub_238D15754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::TSWPHebrewBiblicalLabelFromNumber(_anonymous_namespace_ *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (this < 0xF4240)
  {
    uint64_t v6 = this;
    if (this)
    {
      if (this >= 0x3E8)
      {
        unsigned int v8 = this / 0x3E8;
        int v7 = v9 + 1;
        __b[v9] = 1523;
        uint64_t v6 = (_anonymous_namespace_ *)(v6 - 1000 * v8);
      }
      else
      {
        int v7 = 0;
      }
      if (v10 >= 0xE)
      {
        unint64_t v11 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPHebrewBiblicalLabelFromNumber(uint)"];
        uint64_t v12 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
        +[OITSUAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:715 isFatal:0 description:"string out of bounds"];

        +[OITSUAssertionHandler logBacktraceThrottled];
      }
      unsigned int v5 = [NSString stringWithCharacters:__b length:v10];
    }
    else {
      unsigned int v5 = {;
    }
    }
  }
  else
  {
    unsigned int v3 = [NSString stringWithUTF8String:"NSString *(anonymous namespace)::TSWPHebrewBiblicalLabelFromNumber(uint)"];
    id v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:693 isFatal:0 description:"Hebrew number out of bounds for algorithm"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    unsigned int v5 = 0;
  }
  return v5;
}

void sub_238D15990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D15A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D15C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D16040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D16338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D16460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D16514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::alphabeticLabelStringForValue(_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  int v5 = (int)this;
  uint64_t v6 = [MEMORY[0x263F089D8] string];
  if (v5)
  {
    unint64_t v7 = (v5 - 1);
    uint64_t v8 = *(unsigned __int16 *)(a2 + 2 * (v7 % a3));
    if ((int)(v7 / a3 + 1) < 100) {
      int v9 = v7 / a3 + 1;
    }
    else {
      int v9 = 100;
    }
    while (1)
    {
      BOOL v10 = __OFSUB__(v9--, 1);
      if (v9 < 0 != v10) {
        break;
      }
      objc_msgSend(v6, "tsu_appendCharacter:", v8);
    }
  }
  return v6;
}

void sub_238D165CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendIdeographicDigit(void *a1, unsigned int a2, int a3)
{
  id v7 = a1;
  if (a2 >= 0xA)
  {
    int v5 = objc_msgSend(NSString, "stringWithUTF8String:", "void (anonymous namespace)::appendIdeographicDigit(NSMutableString *__strong, unsigned int, TSWPListIdeographicType)");
    uint64_t v6 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:198 isFatal:0 description:"inDigit is larger than single digit"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
}

void sub_238D166C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::accumulate[abi:ne180100]<anonymous namespace'::IdeographicNumber const*,unsigned int,anonymous namespace'::BinderConvertIdeographicPowerOfTen<void (*)(NSMutableString *,unsigned int)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    do
    {
      int v8 = *(_DWORD *)(a4 + 8);
      int v9 = *(unsigned __int8 *)(a4 + 12);
      BOOL v10 = *(void (**)(id, void))(a4 + 16);
      id v11 = *(id *)a4;
      uint64_t v12 = v11;
      unsigned int v13 = *(_DWORD *)v7;
      unsigned int v14 = a3 / *(_DWORD *)v7;
      if ((a3 || !v13) && (v9 || v14 != 1 || v8 && v8 != 3)) {
        v10(v11, a3 / v13);
      }
      if (v13 <= a3) {
        objc_msgSend(v12, "tsu_appendCharacter:", *(unsigned __int16 *)(v7 + 4));
      }
      unsigned int v15 = *(_DWORD *)v7;
      v7 += 8;
      a3 = a3 - v15 * v14;
    }
    while (v7 != a2);
  }

  return a3;
}

void sub_238D167C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::ideographicNumberStringForSmallValue(uint64_t a1, unsigned int a2)
{
  if (a1 >> 4 >= 0x271)
  {
    id v4 = objc_msgSend(NSString, "stringWithUTF8String:", "NSMutableString *(anonymous namespace)::ideographicNumberStringForSmallValue(unsigned int, TSWPListIdeographicType, BOOL)");
    int v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:311 isFatal:0 description:"inValue too large for ideographicNumberStringForSmallValue"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  uint64_t v6 = [MEMORY[0x263F089D8] string];
  id v8 = v6;
  id v11 = v8;
  unsigned int v12 = a2;
  char v13 = 0;
  unsigned int v14 = v7;
  if (v9) {
  return v8;
  }
}

void sub_238D16910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D169A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D16A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D16ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsFormalJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D16B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsFormalSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D16C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendMultipleIdeographicDigitsFormalTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
  v3 = id v4 = this;
  [(_anonymous_namespace_ *)v4 appendString:v3];
}

void sub_238D16CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendIdeographicDigitJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void anonymous namespace'::appendIdeographicDigitSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void anonymous namespace'::appendIdeographicDigitTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void anonymous namespace'::appendIdeographicDigitFormalJapanese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void anonymous namespace'::appendIdeographicDigitFormalSimplifiedChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

void anonymous namespace'::appendIdeographicDigitFormalTraditionalChinese(_anonymous_namespace_ *this, NSMutableString *a2)
{
}

id anonymous namespace'::cjkLabelStringForValue(_anonymous_namespace_ *this, uint64_t a2, unint64_t a3, int a4)
{
  LODWORD(v7) = this;
  id v8 = [MEMORY[0x263F089D8] string];
  if (v7)
  {
    unsigned int v9 = 0;
    do
    {
      unint64_t v10 = (v7 - 1);
      if (a4) {
        unsigned __int16 v11 = *(_WORD *)(a2 + 2 * (v10 % a3)) + 96;
      }
      else {
        unsigned __int16 v11 = *(_WORD *)(a2 + 2 * (v10 % a3));
      }
      objc_msgSend(v8, "tsu_insertCharacter:atIndex:", v11, 0);
      unint64_t v7 = (v10 - (v10 % a3)) / a3;
      if (!v7) {
        break;
      }
    }
    while (v9++ < 0x64);
  }
  return v8;
}

void sub_238D16DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::toAbjadUnder1000(_anonymous_namespace_ *this, void *__b, unsigned __int16 *a3)
{
  unsigned int v4 = this;
  if (this >= 0x190)
  {
    unint64_t v5 = this / 0x190uLL;
    memset_pattern16(__b, &unk_238EDB950, (2 * v5));
  }
  else
  {
    unint64_t v5 = 0;
  }
  if (v4 % 0x190 >= 0x64)
  {
    unint64_t v5 = (v5 + 1);
  }
  unsigned int v6 = v4 % 0x190 % 0x64;
  if (v6 - 15 <= 1)
  {
    *((_WORD *)__b + v5) = 1610;
    unint64_t v7 = (v5 + 2);
    uint64_t v8 = v6 - 11;
    LODWORD(v5) = v5 + 1;
LABEL_12:
    unint64_t v5 = v7;
    goto LABEL_13;
  }
  if (v6 >= 0xA)
  {
    unint64_t v5 = (v5 + 1);
  }
  if (v4 % 0x190 % 0x64 % 0xA)
  {
    uint64_t v8 = v4 % 0x190 % 0x64 % 0xA - 1;
    unint64_t v7 = (v5 + 1);
    goto LABEL_12;
  }
LABEL_13:
  if (v5 >= 6)
  {
    unsigned int v9 = objc_msgSend(NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)");
    unint64_t v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:748 isFatal:0 description:"string out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return v5;
}

void sub_238D16FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::toHebrewUnder1000(_anonymous_namespace_ *this, void *__b, unsigned __int16 *a3)
{
  unsigned int v4 = this;
  if (this >= 0x190)
  {
    unint64_t v5 = this / 0x190uLL;
    memset_pattern16(__b, &unk_238EDB960, (2 * v5));
  }
  else
  {
    unint64_t v5 = 0;
  }
  if (v4 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v5) = v4 % 0x190 / 0x64 + 1510;
    unint64_t v5 = (v5 + 1);
  }
  unsigned __int16 v6 = v4 % 0x190 % 0x64;
  if (v6 - 15 <= 1)
  {
    unsigned int v7 = v5 + 1;
    *((_WORD *)__b + v5) = 1496;
    LODWORD(v5) = v5 + 2;
    *((_WORD *)__b + v7) = v6 + 1478;
LABEL_13:
    unsigned int v8 = v5;
    *((_WORD *)__b + v5) = *((_WORD *)__b + (v5 - 1));
    *((_WORD *)__b + (v5 - 1)) = 1524;
    unint64_t v5 = (v5 + 1);
    if (v8 >= 6)
    {
      unsigned int v9 = objc_msgSend(NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)");
      unint64_t v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/TSNSStringAdditions.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:687 isFatal:0 description:"string out of range"];

      +[OITSUAssertionHandler logBacktraceThrottled];
    }
    return v5;
  }
  if (v4 % 0x190 % 0x64 >= 0xA)
  {
    unint64_t v5 = (v5 + 1);
  }
  if (v4 % 0x190 % 0x64 % 0xA)
  {
    *((_WORD *)__b + v5) = v4 % 0x190 % 0x64 % 0xA + 1487;
    unint64_t v5 = (v5 + 1);
  }
  if (v5 >= 2) {
    goto LABEL_13;
  }
  return v5;
}

void sub_238D171BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t pTCXmlCheckName(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  if (!a1) {
    return objc_msgSend(MEMORY[0x263EFF940], "raise:format:", @"TCXmlException", @"Could not find node: %s", str2);
  }
  if (!xmlStrEqual(a1->name, str2)) {
    return objc_msgSend(MEMORY[0x263EFF940], "raise:format:", @"TCXmlException", @"Could not find node: %s", str2);
  }
  uint64_t result = [(CXNamespace *)a2 containsNode:a1];
  if ((result & 1) == 0) {
    return objc_msgSend(MEMORY[0x263EFF940], "raise:format:", @"TCXmlException", @"Could not find node: %s", str2);
  }
  return result;
}

xmlNodePtr CXGetRootElement(const unsigned __int8 *a1, unsigned int a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263F089D8]) initWithBytes:a1 length:a2 encoding:4];
  Doc = xmlReadDoc((const xmlChar *)objc_msgSend(v2, "tc_xmlString"), 0, 0, 97);

  return xmlDocGetRootElement(Doc);
}

_xmlNode *CXRequiredLongChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, int a4)
{
  uint64_t result = pCXFindChild(a1, a2, a3);
  if (result)
  {
    Content = (char *)xmlNodeGetContent(result);
    uint64_t v7 = CXLongValueFromString((int)Content, Content, a4);
    ((void (*)(char *))*MEMORY[0x263F8C880])(Content);
    return (_xmlNode *)v7;
  }
  return result;
}

uint64_t CXLongValueFromString(int a1, char *__str, int a3)
{
  double v9 = 0.0;
  int v8 = 0;
  CXSplitValueAndUnitXML(__str, &v9, &v8);
  if (v8)
  {
    if (a3)
    {
      double v5 = CXUnitToPoint(v8);
      return (uint64_t)(v9 * (v5 / CXUnitToPoint(a3)));
    }
    else
    {
      return (uint64_t)v9;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (__str)
    {
      sfaxmlXmlCharToLong(__str, &v10);
      return v10;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t CXLongValue(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3 || *(void *)(v3 + 48) || (*(_DWORD *)(v3 + 8) - 3) > 1)
  {
    String = (char *)xmlNodeListGetString(*(xmlDocPtr *)(a1 + 64), (const xmlNode *)v3, 1);
    uint64_t v7 = CXLongValueFromString((int)String, String, a2);
    ((void (*)(char *))*MEMORY[0x263F8C880])(String);
    return v7;
  }
  else
  {
    unsigned int v4 = *(char **)(v3 + 80);
    return CXLongValueFromString(a1, v4, a2);
  }
}

void CXSplitValueAndUnitXML(char *__str, double *a2, _DWORD *a3)
{
  *a2 = 0.0;
  *a3 = 0;
  unsigned int v4 = *__str;
  if (*__str)
  {
    uint64_t v6 = 1;
    while ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v4 + 60) & 0x400) != 0)
    {
      unsigned int v4 = __str[v6++];
      if (!v4) {
        goto LABEL_5;
      }
    }
    id v7 = (id)objc_msgSend([NSString alloc], "tc_initWithXmlString:", __str);
    CXSplitValueAndUnit(v7, a2, a3);
  }
  else
  {
LABEL_5:
    *a2 = (double)strtol(__str, 0, 10);
  }
}

uint64_t CXSplitValueAndUnit(void *a1, void *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t result = [a1 length];
  int v7 = result;
  if (!result) {
    return result;
  }
  uint64_t result = [MEMORY[0x263F08708] whitespaceCharacterSet];
  int v8 = (void *)result;
  if (v7 < 1)
  {
    int v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t result = objc_msgSend(v8, "characterIsMember:", objc_msgSend(a1, "characterAtIndex:", v9));
      if (!result) {
        break;
      }
      if (v7 == ++v9)
      {
        int v10 = v7;
        goto LABEL_9;
      }
    }
    int v10 = v9;
  }
LABEL_9:
  uint64_t v11 = v7;
  uint64_t v12 = v10;
  if (v10 >= v7) {
    int v13 = v7;
  }
  else {
    int v13 = v10;
  }
  int v14 = v7 + 1;
  while (v11 > v12)
  {
    uint64_t result = objc_msgSend(v8, "characterIsMember:", objc_msgSend(a1, "characterAtIndex:", --v11));
    --v14;
    if ((result & 1) == 0) {
      goto LABEL_17;
    }
  }
  int v14 = v13;
LABEL_17:
  if (v14 == v12) {
    return result;
  }
  int v15 = 0;
  uint64_t v16 = (v14 - v12);
  uint64_t v17 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v18 = [a1 characterAtIndex:v14 + v15 - 1];
    unsigned int v19 = v18;
    if (v18 <= 0x7F) {
      break;
    }
    if (!__maskrune(v18, 0x100uLL)) {
      goto LABEL_23;
    }
LABEL_28:
    --v15;
    if (!--v16) {
      goto LABEL_29;
    }
  }
  if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_23:
  if (v19 == 37 || v19 == 0) {
    goto LABEL_28;
  }
LABEL_29:
  if (v12 || v14 != v7 || v15)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v12, v14 - (int)v12 + v15), "doubleValue");
    *a2 = v21;
    if (v15)
    {
      uint64_t result = CXUnitWithName((NSString *)objc_msgSend(a1, "substringWithRange:", v14 + v15, -v15));
      *a3 = result;
    }
  }
  else
  {
    uint64_t result = [a1 doubleValue];
    *a2 = v22;
  }
  return result;
}

double CXUnitToPoint(int a1)
{
  int v1 = a1 - 6;
  if (a1 - 6) < 0xB && ((0x77Fu >> v1)) {
    return dbl_238EDB988[v1];
  }
  uint64_t v2 = [NSString stringWithUTF8String:"double CXUnitToPoint(CXUnit)"];
  +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"], 973, 0, "Unhandled attribute value unit");
  +[OITSUAssertionHandler logBacktraceThrottled];
  return 1.0;
}

_xmlAttr *CXRequiredLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, int a4)
{
  uint64_t result = CXFindAttribute(a1, a2, a3);
  if (result)
  {
    return (_xmlAttr *)CXLongValue((uint64_t)result, a4);
  }
  return result;
}

BOOL CXOptionalLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t *a4, int a5)
{
  int v7 = CXFindAttribute(a1, a2, a3);
  int v8 = v7;
  if (v7) {
    *a4 = CXLongValue((uint64_t)v7, a5);
  }
  return v8 != 0;
}

uint64_t CXDefaultLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4, int a5)
{
  int v7 = CXFindAttribute(a1, a2, a3);
  if (!v7) {
    return a4;
  }
  return CXLongValue((uint64_t)v7, a5);
}

uint64_t CXOptionalUnsignedAttributeFromHex8X(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, unsigned int *a4)
{
  int v7 = 0;
  uint64_t result = CXOptionalStringAttribute(a1, a2, a3, &v7);
  if (result)
  {
    unsigned int v6 = 0;
    uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x263F08B08], "scannerWithString:", v7), "scanHexInt:", &v6);
    if (result) {
      *a4 = v6;
    }
  }
  return result;
}

double CXFraction(NSString *a1)
{
  double v5 = 0.0;
  int v4 = 0;
  CXSplitValueAndUnit(a1, &v5, &v4);
  if (v4 == 13)
  {
    double v2 = v5;
    double v3 = 100.0;
  }
  else
  {
    double result = 0.0;
    if (v4) {
      return result;
    }
    double v2 = v5;
    double v3 = 100000.0;
  }
  return v2 / v3;
}

void CXRequiredFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  double v3 = CXFindAttribute(a1, a2, a3);
  if (v3)
  {
    int v4 = v3;
    children = v3->children;
    if (!children || children->next || children->type != XML_TEXT_NODE || strcmp((const char *)children->content, "0"))
    {
      unsigned int v6 = (NSString *)objc_msgSend([NSString alloc], "tc_initWithValueOfXmlAttribute:", v4);
      if (v6)
      {
        int v7 = v6;
        CXFraction(v6);
      }
    }
  }
}

BOOL CXOptionalFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double *a4)
{
  int v7 = 0;
  CXOptionalStringAttribute(a1, a2, a3, &v7);
  double v5 = v7;
  if (v7) {
    *a4 = CXFraction(v7);
  }
  return v5 != 0;
}

double CXDefaultFractionAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, double a4)
{
  int v7 = 0;
  CXOptionalStringAttribute(a1, a2, a3, &v7);
  double v5 = v7;
  if (!v7) {
    return a4;
  }
  return CXFraction(v5);
}

double CXRequiredDoubleAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  double v3 = CXFindAttribute(a1, a2, a3);
  if (!v3) {
    return 0.0;
  }
  return CXDoubleValue(v3);
}

BOOL CXOptionalBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, BOOL *a4)
{
  double v5 = CXFindAttribute(a1, a2, a3);
  unsigned int v6 = v5;
  if (v5) {
    *a4 = CXBoolValue(v5);
  }
  return v6 != 0;
}

uint64_t CXDefaultBoolAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  double v5 = CXFindAttribute(a1, a2, a3);
  if (!v5) {
    return a4;
  }
  return CXBoolValue(v5);
}

NSString *CXRequiredBase64DecodedDataAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  double result = (NSString *)CXRequiredStringAttribute(a1, a2, a3);
  if (result)
  {
    return (NSString *)decodeBase64(result);
  }
  return result;
}

uint64_t decodeBase64(NSString *a1)
{
  if (([removeCRs(a1) length] & 3) == 0) {
    operator new[]();
  }
  return 0;
}

NSString *CXChildDefaultStringContent(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString *a4)
{
  double v5 = pCXFindChild(a1, a2, a3);
  if (!v5) {
    return a4;
  }
  unsigned int v6 = v5;
  id v7 = [NSString alloc];
  return (NSString *)objc_msgSend(v7, "tc_initWithContentOfXmlNode:", v6);
}

NSString *CXDefaultStringContent(_xmlNode *a1, NSString *a2)
{
  if (!a1) {
    return a2;
  }
  id v3 = [NSString alloc];
  return (NSString *)objc_msgSend(v3, "tc_initWithContentOfXmlNode:", a1);
}

uint64_t CXDateForISO8601WithString(NSString *a1)
{
  int v1 = a1;
  if ([(NSString *)a1 hasSuffix:@"Z"]) {
    int v1 = [(NSString *)v1 substringToIndex:[(NSString *)v1 length] - 1];
  }
  id v2 = objc_alloc_init(MEMORY[0x263F08790]);
  [v2 setTimeStyle:4];
  [v2 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS"];
  uint64_t result = [v2 dateFromString:v1];
  if (!result)
  {
    [v2 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZ"];
    uint64_t result = [v2 dateFromString:v1];
    if (!result)
    {
      [v2 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss ZZZ"];
      uint64_t result = [v2 dateFromString:v1];
      if (!result)
      {
        [v2 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
        uint64_t result = [v2 dateFromString:v1];
        if (!result)
        {
          [v2 setDateFormat:@"EEE, dd MMM yyyy HH:mm:ss z"];
          uint64_t result = [v2 dateFromString:v1];
          if (!result)
          {
            [v2 setDateFormat:@"EEEE, dd-MMM-yy HH:mm:ss z"];
            uint64_t result = [v2 dateFromString:v1];
            if (!result)
            {
              [v2 setDateFormat:@"EEE MMM d HH:mm:ss yyyy"];
              uint64_t result = [v2 dateFromString:v1];
              if (!result)
              {
                [v2 setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"];
                uint64_t result = [v2 dateFromString:v1];
                if (!result)
                {
                  [v2 setDateFormat:&stru_26EBF24D8];
                  return [v2 dateFromString:v1];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t decodeBase64Char(int a1)
{
  unsigned int v1 = a1 - 65;
  if (a1 == 47) {
    char v2 = 63;
  }
  else {
    char v2 = -1;
  }
  if (a1 == 61) {
    char v3 = 64;
  }
  else {
    char v3 = v2;
  }
  if (a1 == 43) {
    char v4 = 62;
  }
  else {
    char v4 = v3;
  }
  if ((a1 - 48) <= 9) {
    char v5 = a1 + 4;
  }
  else {
    char v5 = v4;
  }
  if ((a1 - 97) <= 0x19) {
    char v6 = a1 - 71;
  }
  else {
    char v6 = v5;
  }
  if (v1 > 0x19) {
    LOBYTE(vCsString::CsString((CsString *)this + 1) = v6;
  }
  return v1;
}

void *removeCRs(NSString *a1)
{
  NSUInteger v2 = [(NSString *)a1 length];
  char v3 = (void *)[MEMORY[0x263F089D8] stringWithCapacity:v2];
  char v4 = [(NSString *)a1 componentsSeparatedByString:@"\n"];
  uint64_t v5 = [(NSArray *)v4 count];
  if (v5)
  {
    uint64_t v6 = v5;
    for (uint64_t i = 0; i != v6; ++i)
      objc_msgSend(v3, "appendString:", -[NSArray objectAtIndex:](v4, "objectAtIndex:", i));
  }
  return v3;
}

uint64_t CXUnitWithName(NSString *a1)
{
  NSUInteger v2 = (void *)CXUnitWithName(NSString *)::unitNameToUnitMap;
  if (!CXUnitWithName(NSString *)::unitNameToUnitMap)
  {
    id v18 = objc_alloc(NSDictionary);
    uint64_t v17 = [NSNumber numberWithInt:1];
    uint64_t v16 = [NSNumber numberWithInt:2];
    uint64_t v15 = [NSNumber numberWithInt:3];
    uint64_t v14 = [NSNumber numberWithInt:5];
    uint64_t v13 = [NSNumber numberWithInt:4];
    uint64_t v3 = [NSNumber numberWithInt:6];
    uint64_t v4 = [NSNumber numberWithInt:7];
    uint64_t v5 = [NSNumber numberWithInt:8];
    uint64_t v6 = [NSNumber numberWithInt:9];
    uint64_t v7 = [NSNumber numberWithInt:10];
    uint64_t v8 = [NSNumber numberWithInt:11];
    uint64_t v9 = [NSNumber numberWithInt:11];
    uint64_t v10 = [NSNumber numberWithInt:12];
    NSUInteger v2 = objc_msgSend(v18, "initWithObjectsAndKeys:", v17, @"f", v16, @"fd", v15, @"deg", v14, @"rad", v13, @"grad", v3, @"pt", v4, @"in", v5, @"cm", v6,
                   @"mm",
                   v7,
                   @"px",
                   v8,
                   @"pc",
                   v9,
                   @"pi",
                   v10,
                   @"emu",
                   [NSNumber numberWithInt:13],
                   @"%",
                   0);
    CXUnitWithName(NSString *)::unitNameToUnitMap = (uint64_t)v2;
  }
  uint64_t v11 = objc_msgSend(v2, "objectForKey:", -[NSString lowercaseString](a1, "lowercaseString"));
  return [v11 intValue];
}

CXNamespace *CXXmlStrEqualToNsUriOrFallbackNsUri(const unsigned __int8 *a1, CXNamespace *a2)
{
  NSUInteger v2 = a2;
  for (i = a2; !xmlStrEqual(a1, (const xmlChar *)[(CXNamespace *)i uri]); NSUInteger v2 = i)
  {
    uint64_t result = [(CXNamespace *)v2 fallbackNamespace];
    if (!result) {
      return result;
    }
    uint64_t i = [(CXNamespace *)v2 fallbackNamespace];
  }
  return (CXNamespace *)1;
}

xmlAttrPtr CXXmlHasNsPropWithFallbackNs(_xmlNode *a1, const unsigned __int8 *a2, CXNamespace *a3)
{
  uint64_t v3 = a3;
  for (i = a3; ; uint64_t v3 = i)
  {
    xmlAttrPtr result = xmlHasNsProp(a1, a2, (const xmlChar *)[(CXNamespace *)i uri]);
    if (result) {
      break;
    }
    xmlAttrPtr result = [(CXNamespace *)v3 fallbackNamespace];
    if (!result) {
      break;
    }
    uint64_t i = [(CXNamespace *)v3 fallbackNamespace];
  }
  return result;
}

xmlNsPtr CXXmlSearchNsByHrefWithFallbackNs(_xmlDoc *a1, _xmlNode *a2, CXNamespace *a3)
{
  uint64_t v3 = a3;
  for (i = a3; ; uint64_t v3 = i)
  {
    xmlNsPtr result = xmlSearchNsByHref(a1, a2, (const xmlChar *)[(CXNamespace *)i uri]);
    if (result) {
      break;
    }
    xmlNsPtr result = [(CXNamespace *)v3 fallbackNamespace];
    if (!result) {
      break;
    }
    uint64_t i = [(CXNamespace *)v3 fallbackNamespace];
  }
  return result;
}

__CFString *TCXmlStringForBool(int a1)
{
  if (a1) {
    return @"1";
  }
  else {
    return @"0";
  }
}

uint64_t TCXmlStringForInt(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%ld", a1);
}

uint64_t TCXmlStringForUnsignedLong(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%lu", a1);
}

id TCXmlStringForEnum(uint64_t a1, TCEnumerationMap *a2)
{
  return [(TCEnumerationMap *)a2 stringForValue:a1];
}

uint64_t TCXmlStringForDouble(double a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%g", *(void *)&a1);
}

void sub_238D18808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D18990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D18A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D18D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D19158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sfaxmlNSMutableDataWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

id sfaxmlDumpNodeToRetainedNSData(xmlNode *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x263EFF990]);
  if (a1)
  {
    int v3 = xmlKeepBlanksDefault(0);
    IO = xmlOutputBufferCreateIO((xmlOutputWriteCallback)sfaxmlNSMutableDataWriteCallback, 0, v2, 0);
    xmlNodeDumpOutput(IO, a1->doc, a1, 0, 1, 0);
    xmlOutputBufferClose(IO);
    xmlKeepBlanksDefault(v3);
  }
  return v2;
}

__CFString *sfaxmlNodeDescription(xmlNode *a1)
{
  if (!a1) {
    return @"null node";
  }
  id v1 = sfaxmlDumpNodeToRetainedNSData(a1);
  char v4 = 0;
  [v1 appendBytes:&v4 length:1];
  uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", objc_msgSend(v1, "bytes"));

  return (__CFString *)v2;
}

uint64_t sfaPopZLibFileReadHandlers_libxml(int a1)
{
  uint64_t result = xmlPopInputCallbacks();
  if (result != a1)
  {
    uint64_t v3 = [NSString stringWithUTF8String:"void sfaPopZLibFileReadHandlers_libxml(int)"];
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFArchivingUtils.mm"], 172, 0, "Unbalanced calls to Push/PopZLibFileReadHandlers_libxml");
    return +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return result;
}

dispatch_queue_t __sfaxmlSAXParseFile_block_invoke()
{
  if (sfaxmlInitMultiThreadedLibXMLUse::once != -1) {
    dispatch_once(&sfaxmlInitMultiThreadedLibXMLUse::once, &__block_literal_global_41);
  }
  dispatch_queue_t result = dispatch_queue_create("SFArchivingUtils parsing queue", 0);
  sfaxmlSAXParseFile::parsingQueue = (uint64_t)result;
  return result;
}

uint64_t __sfaxmlSAXParseFile_block_invoke_2(uint64_t a1)
{
  int v2 = xmlSubstituteEntitiesDefault(*(unsigned __int8 *)(a1 + 60));
  int v3 = xmlRegisterInputCallbacks((xmlInputMatchCallback)sfagzfileMatch_libxml, (xmlInputOpenCallback)sfagzfileOpen_libxml, (xmlInputReadCallback)sfagzfileRead_libxml, (xmlInputCloseCallback)sfagzfileClose_libxml);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xmlSAXParseFile(*(xmlSAXHandlerPtr *)(a1 + 40), *(const char **)(a1 + 48), *(_DWORD *)(a1 + 56));
  sfaPopZLibFileReadHandlers_libxml(v3);
  return xmlSubstituteEntitiesDefault(v2);
}

void sub_238D195D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D19650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D19754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TCStringEncodingToNSString(uint64_t a1)
{
  int v2 = TCStringEncodingEnumMap();
  int v3 = [v2 stringForValue:a1];

  return v3;
}

void sub_238D197DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TCMacLanguageEnumMap(void)
{
  uint64_t v0 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
  if (!TCMacLanguageEnumMap(void)::theEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1785, 0, &dword_238A75000);
    }
    id v1 = [[TCEnumerationMap alloc] initWithStructs:&TCMacLanguageEnumMap(void)::theEnumStructs count:120 caseSensitive:1];
    int v2 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
    TCMacLanguageEnumMap(void)::theEnumMap = (uint64_t)v1;

    uint64_t v0 = (void *)TCMacLanguageEnumMap(void)::theEnumMap;
  }
  return v0;
}

id TCFontStyling::equivalentDictionary(TCFontStyling *this)
{
  int v2 = NSDictionary;
  uint64_t fontClass = this->fontClass;
  char v4 = TCFontClassEnumMap();
  uint64_t v5 = [v4 stringForValue:fontClass];

  uint64_t v6 = TCStringEncodingToNSString(this->stringEncoding);
  uint64_t v7 = [NSNumber numberWithChar:this->weight];
  uint64_t v8 = [NSNumber numberWithBool:this->italic];
  uint64_t width = this->width;
  uint64_t v10 = TCFontWidthEnumMap();
  uint64_t v11 = [v10 stringForValue:width];

  uint64_t v12 = objc_msgSend(v2, "dictionaryWithObjectsAndKeys:", v5, @"class", v6, @"string-encoding", v7, @"weight", v8, @"italic", v11, @"width", 0);

  return v12;
}

void sub_238D199E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D19A2C()
{
}

void sub_238D19A34()
{
}

unint64_t TCFontStyling::createWithDictionary(TCFontStyling *this, NSDictionary *a2)
{
  int v2 = this;
  id v13 = [(TCFontStyling *)v2 objectForKeyedSubscript:@"class"];
  int v3 = TCFontClassEnumMap();
  unsigned int v4 = [v3 valueForString:v13];

  id v12 = [(TCFontStyling *)v2 objectForKeyedSubscript:@"string-encoding"];
  uint64_t v5 = TCStringEncodingEnumMap();
  unsigned int v6 = [v5 valueForString:v12];

  uint64_t v7 = [(TCFontStyling *)v2 objectForKeyedSubscript:@"weight"];
  [v7 intValue];
  uint64_t v8 = [(TCFontStyling *)v2 objectForKeyedSubscript:@"italic"];
  [v8 BOOLValue];
  id v9 = [(TCFontStyling *)v2 objectForKeyedSubscript:@"width"];
  uint64_t v10 = TCFontWidthEnumMap();
  [v10 valueForString:v9];

  return v4 | ((unint64_t)v6 << 32);
}

void sub_238D19BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D19D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D19E40(_Unwind_Exception *a1)
{
  if (v1) {
  _Unwind_Resume(a1);
  }
}

void sub_238D19EFC(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D19F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TCFontMacLanguageIDToNSString(unsigned __int16 a1)
{
  id v1 = [NSNumber numberWithUnsignedShort:a1];
  int v2 = [v1 stringValue];

  return v2;
}

void sub_238D1A384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t TCFontMacLanguageIDFromNSString(NSString *a1)
{
  id v1 = a1;
  int v2 = TCMacLanguageEnumMap();
  uint64_t v3 = [v2 valueForString:v1];

  if (v3 == -130883970) {
    uint64_t v3 = [(NSString *)v1 intValue];
  }

  return v3;
}

void sub_238D1A6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1A900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_238D1AFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1B140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D1BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_238D1BD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1C06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1C2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1C914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1CBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1CCC4(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D1CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D1D074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCFontFamilyIsPi(NSString *a1)
{
  id v1 = a1;
  int v2 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
  if (!TCFontFamilyIsPi(NSString *)::piFontFamilies)
  {
    uint64_t v3 = objc_msgSend(objc_alloc(MEMORY[0x263EFFA08]), "initWithObjects:", @"Bookshelf Symbol 7", @"Monotype Sorts", @"MS Outlook", @"MS Reference Specialty", @"MT Extra", @"Marlett", @"Webdings", @"Wingdings", @"Wingdings 2", @"Wingdings 3", 0);
    unsigned int v4 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
    TCFontFamilyIsPi(NSString *)::piFontFamilies = v3;

    int v2 = (void *)TCFontFamilyIsPi(NSString *)::piFontFamilies;
  }
  uint64_t v5 = [v2 containsObject:v1];

  return v5;
}

void sub_238D1D1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCFontFamilyHasCodePointsInPiRange(NSString *a1)
{
  id v1 = a1;
  int v2 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
  if (!TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange)
  {
    uint64_t v3 = objc_msgSend(objc_alloc(MEMORY[0x263EFFA08]), "initWithObjects:", @"Apple Chancery", @"Hoefler Text Ornaments", @"Type Embellishments One LET", 0);
    unsigned int v4 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
    TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange = v3;

    int v2 = (void *)TCFontFamilyHasCodePointsInPiRange(NSString *)::fontFamiliesWithCodePointsInPiRange;
  }
  uint64_t v5 = [v2 containsObject:v1];

  return v5;
}

void sub_238D1D244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TCUnicodeCharForZapfDingbatsCodePoint(int a1)
{
  if ((a1 - 32) > 0xDE) {
    return 0;
  }
  else {
    return word_238EDB9E0[(__int16)(a1 - 32)];
  }
}

uint64_t TCUnicodeCharForWingdingsCodePoint(int a1)
{
  if ((a1 - 32) > 0xDE) {
    return 0;
  }
  else {
    return word_238EDBB9E[(__int16)(a1 - 32)];
  }
}

uint64_t TCUnicodeCharForWingdings2CodePoint(int a1)
{
  if ((a1 - 37) > 0xD4) {
    return 0;
  }
  else {
    return word_238EDBD5C[(__int16)(a1 - 37)];
  }
}

uint64_t TCUnicodeCharForSymbolCodePoint(int a1)
{
  unsigned __int8 v1 = a1;
  if ((a1 - 32) >= 0xE0)
  {
    int v2 = [NSString stringWithUTF8String:"unichar TCUnicodeCharForSymbolCodePoint(UInt16)"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCFontUtils.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:4958 isFatal:0 description:"Symbol code point out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  unsigned __int8 v8 = v1;
  unsigned int v4 = (void *)[[NSString alloc] initWithBytesNoCopy:&v8 length:1 encoding:6 freeWhenDone:0];
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 characterAtIndex:0];
  }
  else
  {
    NSLog((NSString *)@"Could not encode byte 0x%02X as symbol character", v8);
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_238D1D3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t (*TCCodePointMapperForFontFamilyName(NSString *a1))(int a1)
{
  unsigned __int8 v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = [(NSString *)v1 caseInsensitiveCompare:@"Symbol"];
    unsigned int v4 = TCUnicodeCharForSymbolCodePoint;
    if (!v3) {
      goto LABEL_10;
    }
    uint64_t v5 = [(NSString *)v2 caseInsensitiveCompare:@"Zapf Dingbats"];
    unsigned int v4 = TCUnicodeCharForZapfDingbatsCodePoint;
    if (!v5) {
      goto LABEL_10;
    }
    uint64_t v6 = [(NSString *)v2 caseInsensitiveCompare:@"ZapfDingbats"];
    unsigned int v4 = TCUnicodeCharForZapfDingbatsCodePoint;
    if (v6
      && (uint64_t v7 = [(NSString *)v2 caseInsensitiveCompare:@"Wingdings"],
          unsigned int v4 = TCUnicodeCharForWingdingsCodePoint,
          v7)
      && (uint64_t v8 = [(NSString *)v2 caseInsensitiveCompare:@"Wingdings 2"],
          unsigned int v4 = TCUnicodeCharForWingdings2CodePoint,
          v8))
    {
      if ([(NSString *)v2 caseInsensitiveCompare:@"Wingdings2"]) {
        id v9 = 0;
      }
      else {
        id v9 = TCUnicodeCharForWingdings2CodePoint;
      }
    }
    else
    {
LABEL_10:
      id v9 = v4;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_238D1D508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1D774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id TCFontFamilyNames(void)
{
  v21[1] = *MEMORY[0x263EF8340];
  uint64_t v0 = (void *)TCFontFamilyNames(void)::fontNames;
  if (!TCFontFamilyNames(void)::fontNames)
  {
    id v1 = objc_alloc_init(MEMORY[0x263EFF980]);
    int v2 = (void *)TCFontFamilyNames(void)::fontNames;
    TCFontFamilyNames(void)::fontNames = (uint64_t)v1;

    uint64_t v20 = *MEMORY[0x263F039B8];
    v21[0] = MEMORY[0x263EFFA88];
    CFDictionaryRef v3 = [NSDictionary dictionaryWithObjects:v21 forKeys:&v20 count:1];
    unsigned int v4 = CTFontCollectionCreateFromAvailableFonts(v3);
    uint64_t v5 = v4;
    if (v4)
    {
      CFArrayRef MatchingFontDescriptors = CTFontCollectionCreateMatchingFontDescriptors(v4);
      CFArrayRef v7 = MatchingFontDescriptors;
      if (MatchingFontDescriptors)
      {
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        CFArrayRef v8 = MatchingFontDescriptors;
        uint64_t v9 = [(__CFArray *)v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v16;
          CFStringRef v11 = (const __CFString *)*MEMORY[0x263F03A80];
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v16 != v10) {
                objc_enumerationMutation(v8);
              }
              id v13 = (void *)CTFontDescriptorCopyAttribute(*(CTFontDescriptorRef *)(*((void *)&v15 + 1) + 8 * v12), v11);
              if (v13) {
                objc_msgSend((id)TCFontFamilyNames(void)::fontNames, "addObject:", v13, (void)v15);
              }

              ++v12;
            }
            while (v9 != v12);
            uint64_t v9 = [(__CFArray *)v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
          }
          while (v9);
        }
      }
      CFRelease(v5);
    }
    objc_msgSend((id)TCFontFamilyNames(void)::fontNames, "sortUsingSelector:", sel_compare_, (void)v15);

    uint64_t v0 = (void *)TCFontFamilyNames(void)::fontNames;
  }
  return v0;
}

void sub_238D1D9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CTFontRef TCCreateFontWithFamilyName(NSString *a1, int a2, unsigned int a3, CGFloat a4)
{
  v17[2] = *MEMORY[0x263EF8340];
  CFArrayRef v7 = a1;
  CFArrayRef v8 = v7;
  if (a2) {
    int v9 = 2;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = *MEMORY[0x263F03A70];
  v16[0] = *MEMORY[0x263F03A80];
  v16[1] = v10;
  v17[0] = v7;
  v17[1] = MEMORY[0x263EFFA88];
  CFDictionaryRef v11 = [NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
  uint64_t v12 = CTFontDescriptorCreateWithAttributes(v11);

  id v13 = CTFontCreateWithFontDescriptorAndOptions(v12, a4, 0, 1uLL);
  CFRelease(v12);
  if ((CTFontGetSymbolicTraits(v13) & 3) == (v9 | a3)) {
    goto LABEL_5;
  }
  if (!v13)
  {
    CTFontRef CopyWithSymbolicTraits = 0;
    goto LABEL_10;
  }
  CTFontRef CopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits(v13, a4, 0, v9 | a3, 3u);
  if (!CopyWithSymbolicTraits) {
LABEL_5:
  }
    CTFontRef CopyWithSymbolicTraits = v13;
  else {
    CFRelease(v13);
  }
LABEL_10:

  return CopyWithSymbolicTraits;
}

void sub_238D1DB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TCStringEncodingEnumMap(void)
{
  uint64_t v0 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
  if (!TCStringEncodingEnumMap(void)::stringEncodingEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1658, 0, &dword_238A75000);
    }
    id v1 = [[TCEnumerationMap alloc] initWithStructs:&TCStringEncodingEnumMap(void)::stringEncodingEnumStructs count:142 caseSensitive:1];
    int v2 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
    TCStringEncodingEnumMap(void)::stringEncodingEnumMap = (uint64_t)v1;

    uint64_t v0 = (void *)TCStringEncodingEnumMap(void)::stringEncodingEnumMap;
  }
  return v0;
}

id TCFontClassEnumMap(void)
{
  uint64_t v0 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
  if (!TCFontClassEnumMap(void)::fontClassEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1821, 0, &dword_238A75000);
    }
    id v1 = [[TCEnumerationMap alloc] initWithStructs:&TCFontClassEnumMap(void)::fontClassEnumStructs count:7 caseSensitive:1];
    int v2 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
    TCFontClassEnumMap(void)::fontClassEnumMap = (uint64_t)v1;

    uint64_t v0 = (void *)TCFontClassEnumMap(void)::fontClassEnumMap;
  }
  return v0;
}

id TCFontWidthEnumMap(void)
{
  uint64_t v0 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
  if (!TCFontWidthEnumMap(void)::fontWidthEnumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1828, 0, &dword_238A75000);
    }
    id v1 = [[TCEnumerationMap alloc] initWithStructs:&TCFontWidthEnumMap(void)::fontWidthEnumStructs count:3 caseSensitive:1];
    int v2 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
    TCFontWidthEnumMap(void)::fontWidthEnumMap = (uint64_t)v1;

    uint64_t v0 = (void *)TCFontWidthEnumMap(void)::fontWidthEnumMap;
  }
  return v0;
}

void __cxx_global_array_dtor_1658()
{
  for (uint64_t i = 0x8D8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_1785()
{
  for (uint64_t i = 0x778u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_1821()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_1828()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238D1E46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlPrefixStreamWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D1E55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D1E5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1E9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1ECB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1ED4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlTextWriterProvider;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D1F0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TCXmlStreamWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D1F6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1F9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D1FF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2007C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D201BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2026C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2036C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D20614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D206C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D208E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TCImportFontCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D20974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D20CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TCFloatEqual(float a1, float a2)
{
  float v2 = fabsf(a1) * 0.0000001;
  return vabds_f32(a1, a2) <= v2;
}

uint64_t TCObjectEqual(objc_object *a1, objc_object *a2)
{
  CFDictionaryRef v3 = a1;
  unsigned int v4 = a2;
  uint64_t v5 = v4;
  if (v3 == v4)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    if (v3 && v4) {
      uint64_t v6 = [(objc_object *)v3 isEqual:v4];
    }
  }

  return v6;
}

void sub_238D20DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TCBundle()
{
  if (TCBundle::onceToken != -1) {
    dispatch_once(&TCBundle::onceToken, &__block_literal_global_43);
  }
  uint64_t v0 = (void *)TCBundle::sTCBundle;
  return v0;
}

void __TCBundle_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  id v1 = (void *)TCBundle::sTCBundle;
  TCBundle::sTCBundle = v0;
}

uint64_t TCRemoveFileSecurely(NSString *a1)
{
  id v1 = a1;
  float v2 = v1;
  if (v1 && [(NSString *)v1 length])
  {
    CFDictionaryRef v3 = [MEMORY[0x263F08850] defaultManager];
    uint64_t v6 = 0;
    uint64_t v4 = [v3 removeItemAtPath:v2 error:&v6];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_238D20EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef xmlStringCreateDescribe(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"(xmlChar*)%s", a1);
}

void getScaleFactorBetweenLengths(double a1, float a2)
{
  if (*(float *)&a1 == 0.0)
  {
    LODWORD(aCsString::CsString((CsString *)this + 1) = 1.0;
    if (a2 != 0.0)
    {
      float v2 = objc_msgSend(NSString, "stringWithUTF8String:", "float getScaleFactorBetweenLengths(float, float)", a1);
      CFDictionaryRef v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:30 isFatal:0 description:"Trying to map a zero-length segment onto a nonzero-length one"];

      +[OITSUAssertionHandler logBacktraceThrottled];
    }
  }
}

void sub_238D21010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double getScaleFactorsBetweenRects(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat v11 = a5;
  float Width = CGRectGetWidth(*(CGRect *)&a1);
  v25.origin.x = v11;
  v25.origin.y = a6;
  v25.size.uint64_t width = a7;
  v25.size.height = a8;
  double v16 = CGRectGetWidth(v25);
  float v17 = v16;
  *(float *)&double v16 = Width;
  getScaleFactorBetweenLengths(v16, v17);
  double v19 = v18;
  v26.origin.x = a1;
  v26.origin.y = a2;
  v26.size.uint64_t width = a3;
  v26.size.height = a4;
  *(float *)&CGFloat v11 = CGRectGetHeight(v26);
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.uint64_t width = a7;
  v27.size.height = a8;
  double Height = CGRectGetHeight(v27);
  float v21 = Height;
  LODWORD(Height) = LODWORD(v11);
  getScaleFactorBetweenLengths(Height, v21);
  return v19;
}

CGFloat mapSrcRectOntoDstRect@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  double ScaleFactorsBetweenRects = getScaleFactorsBetweenRects(a2, a3, a4, a5, a6, a7, a8, a9);
  CGFloat v31 = v18;
  CGFloat v32 = ScaleFactorsBetweenRects;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3CsString::CsString((CsString *)this + 2) = 0u;
  v37.origin.x = a6;
  v37.origin.y = a7;
  v37.size.uint64_t width = a8;
  v37.size.height = a9;
  CGFloat MidX = CGRectGetMidX(v37);
  v38.origin.x = a6;
  v38.origin.y = a7;
  v38.size.uint64_t width = a8;
  v38.size.height = a9;
  CGFloat MidY = CGRectGetMidY(v38);
  CGAffineTransformMakeTranslation((CGAffineTransform *)a1, MidX, MidY);
  long long v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.a = *(_OWORD *)a1;
  *(_OWORD *)&v35.c = v21;
  *(_OWORD *)&v35.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v36, &v35, v32, v31);
  long long v22 = *(_OWORD *)&v36.c;
  *(_OWORD *)a1 = *(_OWORD *)&v36.a;
  *(_OWORD *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 3CsString::CsString((CsString *)this + 2) = *(_OWORD *)&v36.tx;
  long long v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v34.a = *(_OWORD *)a1;
  *(_OWORD *)&v34.c = v23;
  *(_OWORD *)&v34.tx = *(_OWORD *)(a1 + 32);
  CGFloat v24 = a2;
  *(CGFloat *)&long long v23 = a3;
  CGFloat v25 = a4;
  CGFloat v26 = a5;
  CGFloat v27 = -CGRectGetMidX(*(CGRect *)((char *)&v23 - 8));
  v39.origin.x = a2;
  v39.origin.y = a3;
  v39.size.uint64_t width = a4;
  v39.size.height = a5;
  CGFloat v28 = CGRectGetMidY(v39);
  CGAffineTransformTranslate(&v36, &v34, v27, -v28);
  long long v29 = *(_OWORD *)&v36.c;
  *(_OWORD *)a1 = *(_OWORD *)&v36.a;
  *(_OWORD *)(a1 + 16) = v29;
  CGFloat result = v36.tx;
  *(_OWORD *)(a1 + 3CsString::CsString((CsString *)this + 2) = *(_OWORD *)&v36.tx;
  return result;
}

double transformRect(double *a1, double a2, double a3)
{
  if (a1[1] != 0.0)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect transformRect(CGRect, CGAffineTransform)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:63 isFatal:0 description:""];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  double v8 = a1[2];
  if (v8 != 0.0)
  {
    int v9 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect transformRect(CGRect, CGAffineTransform)");
    uint64_t v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCAffineTransformUtils.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:64 isFatal:0 description:""];

    +[OITSUAssertionHandler logBacktraceThrottled];
    double v8 = a1[2];
  }
  return a1[4] + a3 * v8 + *a1 * a2;
}

void sub_238D213B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sfaxmlBoolToXmlChar(int a1, char *__str, size_t __size)
{
  CFDictionaryRef v3 = "false";
  if (a1) {
    CFDictionaryRef v3 = "true";
  }
  return snprintf(__str, __size, "%s", v3);
}

uint64_t sfaxmlLongToXmlChar(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "%ld", a1);
}

uint64_t sfaxmlDoubleToXmlChar(char *a1, size_t __n, double a3)
{
  if (fabs(a3) != INFINITY) {
    return snprintf(a1, __n, "%.*g", 17, a3);
  }
  if (a3 >= 0.0)
  {
    strncpy(a1, "INF", __n);
    return 3;
  }
  else
  {
    strncpy(a1, "-INF", __n);
    return 4;
  }
}

uint64_t xmlIgnoreExternalEntity(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  uint64_t v6 = [NSString stringWithUTF8String:a1];
  CFArrayRef v7 = TCBundle();
  double v8 = [v7 bundlePath];

  if ([v6 rangeOfString:v8]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = pDefaultExternalEntityLoader(a1, a2, a3);
  }

  return v9;
}

void sub_238D215B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D22438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlSetBoolNoNsProp(xmlNode *a1, const xmlChar *a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v5 = sfaxmlBoolToXmlChar(a3, (char *)value, 0x40uLL);
  if (!v5)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetBoolNoNsProp(xmlNodePtr, const xmlChar *, BOOL)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:81 isFatal:0 description:"snprintf printed zero characters? in sfaxmlSetBoolProp"];
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetBoolNoNsProp(xmlNodePtr, const xmlChar *, BOOL)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:82 isFatal:0 description:"buffer to small for snprintf in sfaxmlSetBoolProp"];
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_238D2265C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlSetLongNoNsProp(xmlNode *a1, const xmlChar *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v5 = sfaxmlLongToXmlChar(a3, (char *)value, 0x40uLL);
  if (!v5)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetLongNoNsProp(xmlNodePtr, const xmlChar *, long)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:333 isFatal:0 description:"snprintf printed zero characters? in sfaxmlSetLongProp"];
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetLongNoNsProp(xmlNodePtr, const xmlChar *, long)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:334 isFatal:0 description:"buffer to small for snprintf in sfaxmlSetLongProp"];
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_238D227FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlSetDoubleNoNsProp(xmlNode *a1, const xmlChar *a2, double a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v5 = sfaxmlDoubleToXmlChar((char *)value, 0x40uLL, a3);
  if (!v5)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetDoubleNoNsProp(xmlNodePtr, const xmlChar *, double)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:1420 isFatal:0 description:"snprintf printed zero characters? in sfaxmlSetDoubleProp"];
    goto LABEL_5;
  }
  if (v5 >= 0x40)
  {
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL sfaxmlSetDoubleNoNsProp(xmlNodePtr, const xmlChar *, double)");
    CFArrayRef v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/SFArchiving/SFAPropertyFunctions.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:1421 isFatal:0 description:"buffer to small for snprintf in sfaxmlSetDoubleProp"];
LABEL_5:

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return xmlSetProp(a1, a2, value) != 0;
}

void sub_238D22998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sfaxmlSetNSStringNoNsProp(xmlNode *a1, const xmlChar *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CUTF8Converter<64>::CUTF8Converter((uint64_t)v7, a3);
  xmlAttrPtr v5 = xmlSetProp(a1, a2, value);
  if (v8) {
    free(v8);
  }
  return v5 != 0;
}

void sub_238D22A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CUTF8Converter<64>::CUTF8Converter(uint64_t a1, void *a2)
{
  CFStringRef v3 = a2;
  uint64_t v4 = (__CFString *)v3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7CsString::CsString((CsString *)this + 2) = 0;
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    *(void *)(a1 + 7CsString::CsString((CsString *)this + 2) = CStringPtr;
    if (!CStringPtr)
    {
      uint64_t Length = CFStringGetLength(v4);
      CFIndex maxBufLen = 0;
      if (Length <= 14
        && (v11.location = 0,
            v11.CFIndex length = Length,
            CFStringGetBytes(v4, v11, 0x8000100u, 0, 0, (UInt8 *)a1, 63, &maxBufLen) == Length))
      {
        *(unsigned char *)(a1 + maxBufLen) = 0;
        *(void *)(a1 + 7CsString::CsString((CsString *)this + 2) = a1;
      }
      else if (!*(void *)(a1 + 72))
      {
        CFIndex maxBufLen = 0;
        v12.location = 0;
        v12.CFIndex length = Length;
        if (CFStringGetBytes(v4, v12, 0x8000100u, 0, 0, 0, 2147483646, &maxBufLen) == Length)
        {
          CFArrayRef v7 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0xAE889FE9uLL);
          *(void *)(a1 + 64) = v7;
          if (v7)
          {
            CFIndex usedBufLen = 0;
            v13.location = 0;
            v13.CFIndex length = Length;
            CFStringGetBytes(v4, v13, 0x8000100u, 0, 0, v7, maxBufLen, &usedBufLen);
            if (usedBufLen == maxBufLen)
            {
              *(unsigned char *)(*(void *)(a1 + 64) + usedBufLen) = 0;
              *(void *)(a1 + 7CsString::CsString((CsString *)this + 2) = *(void *)(a1 + 64);
            }
          }
        }
      }
    }
  }

  return a1;
}

void sub_238D22BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double NSScaleRect(double a1, double a2, double a3, double a4, float a5)
{
  return a1 * a5;
}

double NSScaleRect2(double a1, double a2, double a3, double a4, float a5)
{
  return a1 * a5;
}

CGContext *TCBitmapContextCreate(double a1)
{
  double v1 = TSUCeilSize(a1);
  double v3 = v2;
  size_t v4 = (unint64_t)v1;
  size_t v5 = (unint64_t)v2;
  uint64_t v6 = (CGColorSpace *)TSUDeviceRGBColorSpace();
  size_t AlignedBytesPerRow = TSUBitmapGetAlignedBytesPerRow(4 * v4);
  double v8 = CGBitmapContextCreate(0, v4, v5, 8uLL, AlignedBytesPerRow, v6, 0x2002u);
  CGContextTranslateCTM(v8, 0.0, (double)(unint64_t)v3);
  CGContextScaleCTM(v8, 1.0, -1.0);
  return v8;
}

uint64_t OAConvertCsException(unsigned int *a1)
{
  if (*a1 - 7000 >= 0xA && *a1 - 7013 > 1) {
    return OCConvertCsException(a1);
  }
  else {
    return +[TCMessageException raise:TCInvalidFileFormatMessage];
  }
}

void sub_238D22E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D230E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D236B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D23840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D238DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D23954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D23A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D23BA8(_Unwind_Exception *a1)
{
  size_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D23CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D23DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D23EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D240EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D24220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238D24340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D2445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D24588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D24680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D24828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D24C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_720()
{
  for (uint64_t i = 0x1D8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_771()
{
  for (uint64_t i = 0x108u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_1194()
{
  for (uint64_t i = 0xBE8u; i != -8; i -= 16)
}

void sub_238D24DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D24F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D25214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D255F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D257AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2582C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D258B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D259C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D25AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D25BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D25CAC(_Unwind_Exception *a1)
{
  size_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D25D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D25DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D262C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D268E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D26A30(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238D26BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D26E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D26FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D2708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D273F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D27990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D27B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D27C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D27E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D28524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D287F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D28F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D29144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_76()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ47__OAXFill_Private__pathGradientFillTypeEnumMap_EUb_E31pathGradientFillTypeEnumStructs
                       + i));
}

void __cxx_global_array_dtor_239()
{
  for (uint64_t i = 0x358u; i != -8; i -= 16)
}

void sub_238D29468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D295DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D296BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D29800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D29940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D29A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D29BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2A0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D2A390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2A574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_238D2AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2ADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_238D2B7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2B8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_784()
{
  for (uint64_t i = 0x108u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_787()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&_ZZZ45__OAXGeometry_Private__formulaKeywordEnumMap_EUb1_E25formulaKeywordEnumStructs
                       + i));
}

void __cxx_global_array_dtor_808()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void sub_238D2BE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2BFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30OAXDateTimeIdentityToFormatMapv_block_invoke()
{
  id v6 = (id)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:14];
  uint64_t v0 = 0;
  double v1 = off_264D62528;
  do
  {
    double v2 = [NSNumber numberWithInt:v0];
    double v3 = +[OAXTextFieldIdentity identityWithGuid:*(v1 - 1) type:*v1];
    [v6 setObject:v2 forKeyedSubscript:v3];

    ++v0;
    v1 += 2;
  }
  while (v0 != 14);
  uint64_t v4 = [v6 copy];
  size_t v5 = (void *)OAXDateTimeIdentityToFormatMap(void)::theMap;
  OAXDateTimeIdentityToFormatMap(void)::theMap = v4;
}

void sub_238D2C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2C278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2C520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2C774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2C930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2CAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2CC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2CE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2CEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2D35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v15 = v14;

  _Unwind_Resume(a1);
}

void sub_238D2D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D2D7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_265()
{
  for (uint64_t i = 0x1A8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_293()
{
  for (uint64_t i = 0x88u; i != -8; i -= 16)
}

void sub_238D2DA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2DD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2DF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D2E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2E3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRange v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D2E4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_79()
{
  for (uint64_t i = 0xE8u; i != -8; i -= 16)
}

void sub_238D2E6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2ECE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2ED40()
{
}

void sub_238D2EE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_73()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_85()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_88()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_124()
{
  for (uint64_t i = 0xA8u; i != -8; i -= 16)
}

void sub_238D2F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2F3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D2F778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2F8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2F9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id numberBulletSchemeEnumMap(void)
{
  if (numberBulletSchemeEnumMap(void)::once != -1) {
    dispatch_once(&numberBulletSchemeEnumMap(void)::once, &__block_literal_global_53);
  }
  uint64_t v0 = (void *)numberBulletSchemeEnumMap(void)::theEnumMap;
  return v0;
}

void sub_238D2FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D2FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZL25numberBulletSchemeEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_14, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL25numberBulletSchemeEnumMapvEUb_E14theEnumStructs count:41 caseSensitive:1];
  double v1 = (void *)numberBulletSchemeEnumMap(void)::theEnumMap;
  numberBulletSchemeEnumMap(void)::theEnumMap = (uint64_t)v0;
}

void ___ZL19tabStopAlignEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_200, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL19tabStopAlignEnumMapvEUb0_E14theEnumStructs count:4 caseSensitive:1];
  double v1 = (void *)tabStopAlignEnumMap(void)::theEnumMap;
  tabStopAlignEnumMap(void)::theEnumMap = (uint64_t)v0;
}

void ___ZL16textAlignEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_215, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL16textAlignEnumMapvEUb1_E14theEnumStructs);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL16textAlignEnumMapvEUb1_E14theEnumStructs count:7 caseSensitive:1];
  double v1 = (void *)textAlignEnumMap(void)::theEnumMap;
  textAlignEnumMap(void)::theEnumMap = (uint64_t)v0;
}

void ___ZL16fontAlignEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_233, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL16fontAlignEnumMapvEUb2_E14theEnumStructs);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL16fontAlignEnumMapvEUb2_E14theEnumStructs count:5 caseSensitive:1];
  double v1 = (void *)fontAlignEnumMap(void)::theEnumMap;
  fontAlignEnumMap(void)::theEnumMap = (uint64_t)v0;
}

void __cxx_global_array_dtor_200()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_215()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_233()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void sub_238D30278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D30364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D305D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3080C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D30B60(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v3, 0x10B1C40AF934621);

  _Unwind_Resume(a1);
}

void sub_238D30D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D30EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D31000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D310D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D311FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D31538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3173C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D318D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D31B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D31DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D320B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    if (a2 == 2)
    {

      objc_end_catch();
      JUMPOUT(0x238D320A0);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_238D322D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D327B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D32AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D32D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D331CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  long long v23 = v19;

  _Unwind_Resume(a1);
}

void sub_238D333E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D33448()
{
}

void sub_238D336E4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238D33664);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238D33784(uint64_t a1, ...)
{
  va_start(va, a1);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  JUMPOUT(0x238D33794);
}

void sub_238D337F0(void *exc_buf, int a2)
{
  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238D33668);
  }
  JUMPOUT(0x238D33758);
}

void sub_238D338C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D339E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D33C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D34158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D342F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D34580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D34724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::append(uint64_t *a1, void *a2)
{
  uint64_t v3 = (void *)a1[2];
  if ((unint64_t)v3 >= a1[3])
  {
    uint64_t result = std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__push_back_slow_path<EshComputedPoint const&>(a1 + 1, a2);
  }
  else
  {
    for (uint64_t i = 0; i != 2; ++i)
    {
      size_t v5 = &v3[i];
      *(unsigned char *)size_t v5 = 0;
      *((_DWORD *)v5 + CsString::CsString((CsString *)this + 1) = 0;
    }
    void *v3 = *a2;
    v3[1] = a2[1];
    uint64_t result = (uint64_t)(v3 + 2);
  }
  a1[2] = result;
  return result;
}

void sub_238D3488C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedValue>::append(void *a1, void *a2)
{
  unint64_t v6 = a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = v6;
  CFArrayRef v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    float v17 = &v14[v10 & 0x7FFFFFFF8];
    double v18 = &v14[8 * v16];
    *(void *)float v17 = *a2;
    double v8 = v17 + 8;
    uint64_t v20 = (char *)a1[1];
    double v19 = (char *)a1[2];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - CsString::CsString((CsString *)this + 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      double v19 = (char *)a1[1];
    }
    a1[1] = v17;
    a1[2] = v8;
    a1[3] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *CFArrayRef v7 = *a2;
    double v8 = v7 + 1;
  }
  a1[2] = v8;
}

void sub_238D34D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D35000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshFormula>::append(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = (_DWORD *)a1[2];
  if ((unint64_t)v3 >= a1[3])
  {
    uint64_t result = std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(a1 + 1, a2);
    uint64_t v4 = (_DWORD *)result;
  }
  else
  {
    uint64_t v4 = v3 + 7;
    uint64_t v5 = 1;
    do
    {
      unint64_t v6 = &v3[v5];
      *unint64_t v6 = 0;
      *((_WORD *)v6 + CsString::CsString((CsString *)this + 2) = 0;
      v5 += 2;
    }
    while (v6 + 2 != v4);
    uint64_t result = (uint64_t)EshFormula::operator=(v3, a2);
    a1[2] = (uint64_t)v4;
  }
  a1[2] = (uint64_t)v4;
  return result;
}

void sub_238D350B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_238D35230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedRect>::append(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[2];
  if (v3 >= a1[3])
  {
    uint64_t result = std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(a1 + 1, a2);
  }
  else
  {
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v5 = v3 + i;
      *(unsigned char *)uint64_t v5 = 0;
      *(_DWORD *)(v5 + 4) = 0;
    }
    for (uint64_t j = 0; j != 32; j += 8)
      *(void *)(v3 + j) = *(void *)(a2 + j);
    uint64_t result = v3 + 32;
  }
  a1[2] = result;
  return result;
}

void sub_238D35448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshComputedValue>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshComputedValue>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedValue>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve((void **)(a1 + 8), (*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  if (a1 != a2) {
    std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__assign_with_size[abi:ne180100]<EshComputedValue*,EshComputedValue*>(v4, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v3, a2);
    CFArrayRef v7 = &v6[v5 & 0x7FFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - CsString::CsString((CsString *)this + 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

char *std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__assign_with_size[abi:ne180100]<EshComputedValue*,EshComputedValue*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (((v8 - (unint64_t)result) >> 3) >= a4)
  {
    uint64_t v21 = *(char **)(a1 + 8);
    double v19 = (char **)(a1 + 8);
    uint64_t v20 = v21;
    unint64_t v22 = v21 - result;
    unint64_t v23 = (unint64_t)(v21 - result) >> 3;
    if (v23 >= a4)
    {
      CGFloat v31 = result;
      if (a2 != a3)
      {
        CGFloat v32 = result;
        do
        {
          uint64_t v33 = *v6++;
          *(void *)CGFloat v32 = v33;
          v32 += 8;
          v31 += 8;
        }
        while (v6 != a3);
      }
      int64_t v18 = v31 - result;
    }
    else
    {
      uint64_t v24 = (v22 >> 3);
      CGFloat v25 = &a2[v23];
      if (v24)
      {
        uint64_t v26 = 8 * v24;
        do
        {
          uint64_t v27 = *v6++;
          *(void *)uint64_t result = v27;
          result += 8;
          v26 -= 8;
        }
        while (v26);
        uint64_t v20 = *v19;
      }
      uint64_t result = v20;
      CGFloat v28 = v20;
      if (v25 != a3)
      {
        CGFloat v28 = v20;
        long long v29 = v20;
        do
        {
          uint64_t v30 = *v25++;
          *(void *)long long v29 = v30;
          v29 += 8;
          v28 += 8;
        }
        while (v25 != a3);
      }
      int64_t v18 = v28 - v20;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      unint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v11 = v8 >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v9, v13);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[8 * v14];
    unsigned int v15 = result;
    if (v6 != a3)
    {
      unsigned int v15 = result;
      uint64_t v16 = result;
      do
      {
        uint64_t v17 = *v6++;
        *(void *)uint64_t v16 = v17;
        v16 += 8;
        v15 += 8;
      }
      while (v6 != a3);
    }
    int64_t v18 = v15 - result;
    double v19 = (char **)(a1 + 8);
  }
  *double v19 = &result[v18];
  return result;
}

BOOL EshBasicTablePropVal<EshComputedValue>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 3) != ((*(void *)(a2 + 16) - (void)v4) >> 3)) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    BOOL result = *v3 == *v4 && *((_DWORD *)v3 + 1) == *((_DWORD *)v4 + 1);
    v3 += 8;
    v4 += 8;
  }
  while (result && v3 != v2);
  return result;
}

void *EshTablePropVal<EshComputedPoint>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6250;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshTablePropVal<EshComputedPoint>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD61E8;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedPoint>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238D35944(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshComputedPoint>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshComputedPoint>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::reserve((uint64_t *)(a1 + 8), (*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  if (a1 != a2) {
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__assign_with_size[abi:ne180100]<EshComputedPoint*,EshComputedPoint*>(v4, *(void **)(a2 + 8), *(void **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  }
  return a1;
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - *a1) >> 4) < a2)
  {
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v3, a2);
    unint64_t v8 = (char *)__p + (v5 & 0xFFFFFFFF0);
    uint64_t v9 = v8;
    unint64_t v10 = (char *)__p + 16 * v6;
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D35B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 == *result)
  {
    uint64_t v6 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 - 16;
      do
      {
        uint64_t v7 = v4 + v5;
        *(unsigned char *)(v7 - 16) = 0;
        *(_DWORD *)(v7 - 1CsString::CsString((CsString *)this + 2) = 0;
        v5 += 8;
      }
      while (v5 != 16);
      uint64_t v8 = *(void *)(v2 - 16);
      v2 -= 16;
      *(void *)(v4 - 16) = v8;
      *(void *)(v4 - 8) = *(void *)(v2 + 8);
      v4 -= 16;
    }
    while (v2 != v3);
  }
  a2[1] = v6;
  uint64_t v9 = *result;
  *BOOL result = v6;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__assign_with_size[abi:ne180100]<EshComputedPoint*,EshComputedPoint*>(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  BOOL result = *(void **)a1;
  if (((v8 - (unint64_t)result) >> 4) < a4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      unint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v11 = v8 >> 4;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v9, v13);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v14[16 * v15];
    uint64_t v16 = a1;
    uint64_t v17 = v6;
    a3 = v5;
LABEL_14:
    return (void *)std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__construct_at_end<EshComputedPoint*,EshComputedPoint*>(v16, v17, a3);
  }
  unint64_t v18 = *(void *)(a1 + 8) - (void)result;
  if ((v18 >> 4) < a4)
  {
    uint64_t v17 = &a2[2 * (v18 >> 4)];
    if ((v18 >> 4))
    {
      do
      {
        *BOOL result = *v6;
        result[1] = v6[1];
        v6 += 2;
        result += 2;
      }
      while (v6 != v17);
    }
    uint64_t v16 = a1;
    goto LABEL_14;
  }
  if (a2 == a3)
  {
    double v19 = result;
  }
  else
  {
    double v19 = result;
    do
    {
      *BOOL result = *v6;
      result[1] = v6[1];
      v19 += 2;
      v6 += 2;
      result += 2;
    }
    while (v6 != a3);
  }
  *(void *)(a1 + 8) = v19;
  return result;
}

uint64_t std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__construct_at_end<EshComputedPoint*,EshComputedPoint*>(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 8);
  while (a2 != a3)
  {
    for (uint64_t i = 0; i != 2; ++i)
    {
      uint64_t v5 = &v3[i];
      *(unsigned char *)uint64_t v5 = 0;
      *((_DWORD *)v5 + CsString::CsString((CsString *)this + 1) = 0;
    }
    void *v3 = *a2;
    v3[1] = a2[1];
    a2 += 2;
    v3 += 2;
  }
  *(void *)(result + 8) = v3;
  return result;
}

BOOL EshBasicTablePropVal<EshComputedPoint>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 4) != ((unint64_t)(*(void *)(a2 + 16) - v4) >> 4)) {
    return 0;
  }
  if (v3 != v2)
  {
LABEL_3:
    char v5 = 0;
    uint64_t v6 = 0;
    while (*(unsigned __int8 *)(v3 + 8 * v6) == *(unsigned __int8 *)(v4 + 8 * v6))
    {
      int v7 = *(_DWORD *)(v3 + 8 * v6 + 4);
      int v8 = *(_DWORD *)(v4 + 8 * v6 + 4);
      uint64_t v6 = 1;
      char v9 = (v7 == v8) & ~v5;
      char v5 = 1;
      if ((v9 & 1) == 0)
      {
        v3 += 16;
        v4 += 16;
        if (v7 != v8 || v3 == v2) {
          return v7 == v8;
        }
        goto LABEL_3;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__push_back_slow_path<EshComputedPoint const&>(uint64_t *a1, void *a2)
{
  uint64_t v5 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v6 = a1[1] - *a1;
  unint64_t v7 = (unint64_t)(v5 - *a1) >> 4;
  if (2 * (int)v7 <= (v6 >> 4) + 1) {
    unsigned int v8 = (v6 >> 4) + 1;
  }
  else {
    unsigned int v8 = 2 * v7;
  }
  if (v7 >= 0x7FFFFFFF) {
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v22 = v4;
  if (v9)
  {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v9);
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = &v10[v6 & 0xFFFFFFFF0];
  __p = v10;
  double v19 = v14;
  uint64_t v21 = &v10[16 * v12];
  do
  {
    uint64_t v15 = &v14[v13];
    char *v15 = 0;
    *((_DWORD *)v15 + CsString::CsString((CsString *)this + 1) = 0;
    v13 += 8;
  }
  while (v13 != 16);
  *(void *)uint64_t v14 = *a2;
  *((void *)v14 + CsString::CsString((CsString *)this + 1) = a2[1];
  uint64_t v20 = v14 + 16;
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v16 = a1[1];
  if (v20 != v19) {
    v20 += (v19 - v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_238D35F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *EshTablePropVal<EshPathCommand>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD62F0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshPathCommand>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshPathCommand>::operator==(a1, (uint64_t)result);
  }
  return result;
}

BOOL EshBasicTablePropVal<EshPathCommand>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int16 **)(a1 + 8);
  uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
  uint64_t v4 = *(unsigned __int16 **)(a2 + 8);
  if (((unint64_t)((char *)v2 - (char *)v3) >> 3) != ((*(void *)(a2 + 16)
                                                                                         - (void)v4) >> 3))
    return 0;
  if (v3 == v2) {
    return 1;
  }
  do
  {
    BOOL result = *v3 == *v4 && *((_DWORD *)v3 + 1) == *((_DWORD *)v4 + 1);
    v3 += 4;
    v4 += 4;
  }
  while (result && v3 != v2);
  return result;
}

void *EshTablePropVal<EshFormula>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6390;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshFormula>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshFormula>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshFormula>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::vector<EshFormula,ChAllocator<EshFormula>>::reserve((uint64_t *)(a1 + 8), -1227133513 * ((*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  if (a1 != a2) {
    std::vector<EshFormula,ChAllocator<EshFormula>>::__assign_with_size[abi:ne180100]<EshFormula*,EshFormula*>(v4, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), -1227133513 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  }
  return a1;
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (-1227133513 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x24924925) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v5 = -1227133513 * ((unint64_t)(a1[1] - *a1) >> 2);
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v3, a2);
    unsigned int v8 = (char *)__p + 28 * v5;
    unint64_t v9 = v8;
    uint64_t v10 = (char *)__p + 28 * v6;
    std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      unint64_t v9 = &v8[(v9 - v8 - 28) % 0x1CuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D36314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v5 = (_DWORD *)*result;
  uint64_t v4 = (_DWORD *)result[1];
  unsigned int v6 = (_DWORD *)a2[1];
  while (v4 != v5)
  {
    uint64_t v7 = 0x3FFFFFFFFFFFFFFALL;
    do
    {
      unsigned int v8 = &v6[v7];
      *unsigned int v8 = 0;
      *((_WORD *)v8 + CsString::CsString((CsString *)this + 2) = 0;
      v7 += 2;
    }
    while (v8 + 2 != v6);
    v6 -= 7;
    v4 -= 7;
    BOOL result = (uint64_t *)EshFormula::operator=(v6, v4);
  }
  a2[1] = v6;
  uint64_t v9 = *v3;
  uint64_t *v3 = (uint64_t)v6;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a2);
}

_DWORD *std::vector<EshFormula,ChAllocator<EshFormula>>::__assign_with_size[abi:ne180100]<EshFormula*,EshFormula*>(void *a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v8 = a1[2];
  uint64_t v9 = (_DWORD *)*a1;
  if (-1227133513 * ((v8 - *a1) >> 2) >= a4)
  {
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - (void)v9) >> 2);
    if (v16 >= a4)
    {
      BOOL result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(a2, a3, v9);
      a1[1] = v19;
      return result;
    }
    uint64_t v17 = &a2[7 * v16];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(a2, v17, v9);
    uint64_t v13 = (uint64_t)a1;
    uint64_t v14 = v17;
    uint64_t v15 = a3;
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x24924924) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -1227133513 * (v8 >> 2);
    int v11 = 2 * v10;
    if (2 * v10 <= a4) {
      int v11 = a4;
    }
    if (v10 >= 0x12492492) {
      unsigned int v12 = 613566756;
    }
    else {
      unsigned int v12 = v11;
    }
    std::vector<EshFormula,ChAllocator<EshFormula>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = (uint64_t)a1;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
  }
  return (_DWORD *)std::vector<EshFormula,ChAllocator<EshFormula>>::__construct_at_end<EshFormula*,EshFormula*>(v13, v14, v15);
}

uint64_t std::vector<EshFormula,ChAllocator<EshFormula>>::__construct_at_end<EshFormula*,EshFormula*>(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = result;
  if (a2 == a3)
  {
    uint64_t v6 = *(void *)(result + 8);
  }
  else
  {
    unsigned int v5 = a2;
    BOOL result = *(void *)(result + 8);
    do
    {
      uint64_t v6 = result + 28;
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = result + v7;
        *(_DWORD *)uint64_t v8 = 0;
        *(_WORD *)(v8 + 4) = 0;
        v7 += 8;
      }
      while (v8 + 8 != v6);
      EshFormula::operator=((_DWORD *)result, v5);
      v5 += 7;
      BOOL result = v6;
    }
    while (v5 != a3);
  }
  *(void *)(v3 + 8) = v6;
  return result;
}

void sub_238D36670(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<EshFormula,ChAllocator<EshFormula>>::__vallocate[abi:ne180100](void *a1, unsigned int a2)
{
  if (a2 >= 0x24924925) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshFormula *,EshFormula *,EshFormula *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EshFormula::operator=(a3, v4);
      v4 += 7;
      a3 += 7;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL EshBasicTablePropVal<EshFormula>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  if (-1227133513 * ((unint64_t)(v3 - v2) >> 2) != -1227133513
                                                                       * ((unint64_t)(*(void *)(a2 + 16) - v4) >> 2))
    return 0;
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = EshFormula::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 28;
    v4 += 28;
  }
  while (v2 != v3);
  return result;
}

BOOL EshFormula::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24);
}

uint64_t std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unsigned int v5 = v4 + 1;
  if ((v4 + 1) > 0x24924924) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unsigned int v8 = -1227133513 * ((unint64_t)(a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unsigned int v5 = 2 * v8;
  }
  if (v8 >= 0x12492492) {
    unint64_t v9 = 613566756;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v21 = a1 + 2;
  if (v9)
  {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v7, v9);
    int v12 = v11;
  }
  else
  {
    unsigned int v10 = 0;
    int v12 = 0;
  }
  uint64_t v13 = &v10[28 * v4];
  __p = v10;
  unint64_t v18 = v13;
  uint64_t v19 = v13;
  uint64_t v20 = &v10[28 * v12];
  uint64_t v14 = v13 + 4;
  do
  {
    *(_DWORD *)uint64_t v14 = 0;
    *((_WORD *)v14 + CsString::CsString((CsString *)this + 2) = 0;
    v14 += 8;
  }
  while (v14 != v13 + 28);
  EshFormula::operator=(v13, a2);
  v19 += 28;
  std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    uint64_t v19 = &v18[(v19 - v18 - 28) % 0x1CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_238D369A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *EshTablePropVal<EshComputedRect>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD6430;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshBasicTablePropVal<EshComputedRect>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshComputedRect>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshComputedRect>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve((uint64_t *)(a1 + 8), (*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  if (a1 != a2) {
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__assign_with_size[abi:ne180100]<EshComputedRect*,EshComputedRect*>(v4, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  }
  return a1;
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - *a1) >> 5) < a2)
  {
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v3, a2);
    unsigned int v8 = (char *)__p + (v5 & 0x1FFFFFFFE0);
    unint64_t v9 = v8;
    unsigned int v10 = (char *)__p + 32 * v6;
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D36BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v6 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 - 32;
      do
      {
        uint64_t v7 = v4 + v5;
        *(unsigned char *)(v7 - 3CsString::CsString((CsString *)this + 2) = 0;
        *(_DWORD *)(v7 - 28) = 0;
        v5 += 8;
      }
      while (v5 != 32);
      uint64_t v8 = v3 - 32;
      uint64_t v9 = -32;
      do
      {
        *(void *)(v4 + v9) = *(void *)(v3 + v9);
        v9 += 8;
      }
      while (v9);
      v3 -= 32;
      v4 -= 32;
    }
    while (v8 != v2);
  }
  a2[1] = v6;
  uint64_t v10 = *result;
  *BOOL result = v6;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

char *std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__assign_with_size[abi:ne180100]<EshComputedRect*,EshComputedRect*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  BOOL result = *(char **)a1;
  if (((v8 - (unint64_t)result) >> 5) < a4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      unint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v11 = v8 >> 5;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v9, v13);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v14[32 * v15];
    uint64_t v16 = a1;
    uint64_t v17 = v6;
    a3 = v5;
LABEL_16:
    return (char *)std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__construct_at_end<EshComputedRect*,EshComputedRect*>(v16, v17, a3);
  }
  unint64_t v18 = *(void *)(a1 + 8) - (void)result;
  if ((v18 >> 5) < a4)
  {
    uint64_t v19 = (v18 >> 5);
    uint64_t v17 = a2 + 32 * v19;
    if (v19)
    {
      do
      {
        for (uint64_t i = 0; i != 32; i += 8)
          *(void *)&result[i] = *(void *)(v6 + i);
        v6 += 32;
        result += 32;
      }
      while (v6 != v17);
    }
    uint64_t v16 = a1;
    goto LABEL_16;
  }
  while (v6 != a3)
  {
    for (uint64_t j = 0; j != 32; j += 8)
      *(void *)&result[j] = *(void *)(v6 + j);
    v6 += 32;
    result += 32;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__construct_at_end<EshComputedRect*,EshComputedRect*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  while (a2 != a3)
  {
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v5 = v3 + i;
      *(unsigned char *)uint64_t v5 = 0;
      *(_DWORD *)(v5 + 4) = 0;
    }
    for (uint64_t j = 0; j != 32; j += 8)
      *(void *)(v3 + j) = *(void *)(a2 + j);
    a2 += 32;
    v3 += 32;
  }
  *(void *)(result + 8) = v3;
  return result;
}

BOOL EshBasicTablePropVal<EshComputedRect>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  if (((unint64_t)(v3 - v2) >> 5) != ((*(void *)(a2 + 16) - (void)v4) >> 5)) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<EshComputedRect,EshComputedRect>((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 32;
    v4 += 32;
  }
  while (v2 != v3);
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<EshComputedRect,EshComputedRect>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a2 != *a3 || *((_DWORD *)a2 + 1) != *((_DWORD *)a3 + 1)) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = (int *)(a3 + 12);
  uint64_t v5 = (int *)(a2 + 12);
  do
  {
    unint64_t v6 = v3;
    if (v3 == 3) {
      break;
    }
    if (*((unsigned __int8 *)v5 - 4) != *((unsigned __int8 *)v4 - 4)) {
      break;
    }
    int v8 = *v5;
    v5 += 2;
    int v7 = v8;
    int v9 = *v4;
    v4 += 2;
    ++v3;
  }
  while (v7 == v9);
  return v6 > 2;
}

uint64_t std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v6 = a1[1] - *a1;
  unint64_t v7 = (unint64_t)(v5 - *a1) >> 5;
  if (2 * (int)v7 <= (v6 >> 5) + 1) {
    unsigned int v8 = (v6 >> 5) + 1;
  }
  else {
    unsigned int v8 = 2 * v7;
  }
  if (v7 >= 0x7FFFFFFF) {
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v23 = v4;
  if (v9)
  {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v9);
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = &v10[v6 & 0x1FFFFFFFE0];
  __p = v10;
  uint64_t v20 = v14;
  uint64_t v22 = &v10[32 * v12];
  do
  {
    uint64_t v15 = &v14[v13];
    char *v15 = 0;
    *((_DWORD *)v15 + CsString::CsString((CsString *)this + 1) = 0;
    v13 += 8;
  }
  while (v13 != 32);
  for (uint64_t i = 0; i != 32; i += 8)
    *(void *)&v14[i] = *(void *)(a2 + i);
  uint64_t v21 = v14 + 32;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v17 = a1[1];
  if (v21 != v20) {
    v21 += (v20 - v21 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v17;
}

void sub_238D37080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_238D37244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D377D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D37B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D37D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D37E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<OABTableCell>::~OABTable2DArray(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 24;
      uint64_t v6 = 24 * v4;
      do
      {

        v6 -= 24;
      }
      while (v6);
    }
    MEMORY[0x23EC99790](v3, 0x1080C80F1FA62F8);
  }
  return a1;
}

void sub_238D38174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D382CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D38420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D387A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D389A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D38B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D38F18(_Unwind_Exception *a1)
{
  *(void *)(v3 - 104) = v1;

  _Unwind_Resume(a1);
}

void sub_238D393AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3982C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D39DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D39F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3A04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3A28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3A368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3BB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3C504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3C5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3C88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3C91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3CFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3D0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3D1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3D49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3D55C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3DB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3DCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3DE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3E5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3E9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3EC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3F068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3F0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3F2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3F43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D3F658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3F7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3FA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D3FCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D40240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D406A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D407B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D40968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D409D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D40AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D40D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D40F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D413A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D41660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D41DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D42148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4225C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D42560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D42640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D426E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D428F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D42A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D42E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D43250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D43678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D437C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D43954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D43AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D43C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D43D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D43EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D44004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fontCollectionEnumMap(void)
{
  if (fontCollectionEnumMap(void)::once != -1) {
    dispatch_once(&fontCollectionEnumMap(void)::once, &__block_literal_global_56);
  }
  uint64_t v0 = (void *)fontCollectionEnumMap(void)::theMap;
  return v0;
}

id baseFontEnumMap(void)
{
  if (baseFontEnumMap(void)::once != -1) {
    dispatch_once(&baseFontEnumMap(void)::once, &__block_literal_global_90_2);
  }
  uint64_t v0 = (void *)baseFontEnumMap(void)::theMap;
  return v0;
}

unint64_t OADSchemeFontReference::schemeFontReferenceWithString(OADSchemeFontReference *this, NSString *a2)
{
  uint64_t v2 = this;
  if ([(OADSchemeFontReference *)v2 length] == 6
    && [(OADSchemeFontReference *)v2 characterAtIndex:0] == 43
    && [(OADSchemeFontReference *)v2 characterAtIndex:3] == 45)
  {
    uint64_t v3 = -[OADSchemeFontReference substringWithRange:](v2, "substringWithRange:", 1, 2);
    uint64_t v4 = fontCollectionEnumMap();
    uint64_t v5 = [v4 valueForString:v3];

    uint64_t v6 = -[OADSchemeFontReference substringWithRange:](v2, "substringWithRange:", 4, 2);
    unint64_t v7 = baseFontEnumMap();
    uint64_t v8 = [v7 valueForString:v6];

    unint64_t v9 = 0xFFFFFFFF00000000;
    uint64_t v10 = 0xFFFFFFFFLL;
    if (v5 != -130883970 && v8 != -130883970)
    {
      unint64_t v9 = v8 << 32;
      uint64_t v10 = v5;
    }
  }
  else
  {
    unint64_t v9 = 0xFFFFFFFF00000000;
    uint64_t v10 = 0xFFFFFFFFLL;
  }

  return v10 | v9;
}

void sub_238D44290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D44358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D443EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4455C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *OADAbsoluteFontNameWithPossiblyRelativeFontNameAndFontScheme(NSString *a1, OADFontScheme *a2)
{
  uint64_t v3 = a1;
  uint64_t v5 = a2;
  if (!v5
    || (unint64_t v6 = OADSchemeFontReference::schemeFontReferenceWithString((OADSchemeFontReference *)v3, v4), v6 == -1)
    || (unint64_t v7 = HIDWORD(v6), HIDWORD(v6) == -1))
  {
    unint64_t v9 = v3;
  }
  else
  {
    uint64_t v8 = -[OADFontScheme fontForId:](v5, "fontForId:");
    unint64_t v9 = [v8 baseFontForId:v7];
  }
  return v9;
}

void sub_238D44678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL21fontCollectionEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_15, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL21fontCollectionEnumMapvEUb_E14theStructArray);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL21fontCollectionEnumMapvEUb_E14theStructArray count:2 caseSensitive:1];
  uint64_t v1 = (void *)fontCollectionEnumMap(void)::theMap;
  fontCollectionEnumMap(void)::theMap = (uint64_t)v0;
}

void ___ZL15baseFontEnumMapv_block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray))
  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_100, 0, &dword_238A75000);
    __cxa_guard_release(&_ZGVZZL15baseFontEnumMapvEUb0_E14theStructArray);
  }
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&_ZZZL15baseFontEnumMapvEUb0_E14theStructArray count:3 caseSensitive:1];
  uint64_t v1 = (void *)baseFontEnumMap(void)::theMap;
  baseFontEnumMap(void)::theMap = (uint64_t)v0;
}

void __cxx_global_array_dtor_100()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238D449F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D44B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D45314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D454F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D45800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D459EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D45A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D45BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D45CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D45D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D46308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D46610(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_238D467BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D468EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D46BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D46D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D47658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D476D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D47F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D48014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D48164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D4834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4848C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D485D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4953C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D49994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D49B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D49D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D49DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D49F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4A56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4A63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4A7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4A880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4A9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4AB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4ACB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4AE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4AF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4B138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D4B234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4B2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4B4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4B5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4B85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4BA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4BBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4BC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4BE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4BF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4C080(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238D4C1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4C42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4C698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4C86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4CA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4CBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4CCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4CF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4CFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D4D01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4D20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4D330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4D4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4DE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4E9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4EA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4EB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4EC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D4EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D4EF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4F040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D4F8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D4F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4FB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4FC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D4FECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D50098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D50134(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238D50218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v11 = v10;

  _Unwind_Resume(a1);
}

void sub_238D503EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D504E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5059C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D506BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5081C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D508C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D509C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D50D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D50F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D50FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D51358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D51434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5155C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D518A4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADTableCell * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    uint64_t v4 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADTableCell *>::operator[](OADTMatrixPos) [E = OADTableCell *]"];
    uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:36 isFatal:0 description:"Row index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (a2 < 0 || (int v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    unint64_t v7 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADTableCell *>::operator[](OADTMatrixPos) [E = OADTableCell *]"];
    uint64_t v8 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:37 isFatal:0 description:"Column index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    int v6 = *(_DWORD *)(a1 + 4);
  }
  return *(void *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_238D51A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D51BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADTablePartStyle * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    uint64_t v4 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADTablePartStyle *>::operator[](OADTMatrixPos) [E = OADTablePartStyle *]"];
    uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:36 isFatal:0 description:"Row index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (a2 < 0 || (int v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    unint64_t v7 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADTablePartStyle *>::operator[](OADTMatrixPos) [E = OADTablePartStyle *]"];
    uint64_t v8 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:37 isFatal:0 description:"Column index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    int v6 = *(_DWORD *)(a1 + 4);
  }
  return *(void *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_238D51D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D52248(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

uint64_t OADTFTemplateMatrix<OADStroke * {__strong}>::operator[](uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (int)a2)
  {
    uint64_t v4 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADStroke *>::operator[](OADTMatrixPos) [E = OADStroke *]"];
    uint64_t v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:36 isFatal:0 description:"Row index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  if (a2 < 0 || (int v6 = *(_DWORD *)(a1 + 4), v6 <= SHIDWORD(a2)))
  {
    unint64_t v7 = [NSString stringWithUTF8String:"E &OADTFTemplateMatrix<OADStroke *>::operator[](OADTMatrixPos) [E = OADStroke *]"];
    uint64_t v8 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTableStyleFlattener.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:37 isFatal:0 description:"Column index out of range"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    int v6 = *(_DWORD *)(a1 + 4);
  }
  return *(void *)(a1 + 8) + 8 * (HIDWORD(a2) + v6 * (int)a2);
}

void sub_238D52538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D525CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D52724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D52918(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1080C409938AC02);
  _Unwind_Resume(a1);
}

void sub_238D52A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_238D5330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D53534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D53640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D537E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238D53A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D53D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D53F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v18 = v16;

  _Unwind_Resume(a1);
}

void sub_238D54010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D540B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D542BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D543B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D544F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D547C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238D54B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D54C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D54DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v12;

  _Unwind_Resume(a1);
}

void sub_238D54F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *OADTMatrixPos::OADTMatrixPos(_DWORD *a1, int a2, int a3, unsigned int a4)
{
  if (a4) {
    int v5 = a3;
  }
  else {
    int v5 = a2;
  }
  if (a4) {
    int v6 = a2;
  }
  else {
    int v6 = a3;
  }
  *a1 = v5;
  a1[1] = v6;
  if (a4 >= 2)
  {
    unint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "OADTMatrixPos::OADTMatrixPos(SInt32, SInt32, OADTDir)");
    uint64_t v8 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Dom/OADTable.h"];
    +[OITSUAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:190 isFatal:0 description:"Unexpected matrix direction"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  return a1;
}

void sub_238D55108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int *OADTFTemplateMatrix<OADTableCell * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((void *)a1 + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)a1 + CsString::CsString((CsString *)this + 2) = 0;
  *((void *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((void *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_238D551D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void std::vector<OADTableCell * {__strong}>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = (v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(void **)(v3 - 8);
        v3 -= 8;
      }
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<OADTableCell * {__strong}>::__append((char **)a1, v5);
  }
}

void std::vector<OADTableCell * {__strong}>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v25 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    uint64_t v24 = v15;
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    v23.i64[1] = (uint64_t)v16;
    unint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v14 - CsString::CsString((CsString *)this + 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v16 = (char *)v23.i64[1];
      uint64_t v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    int64x2_t v23 = v20;
    uint64_t v21 = a1[2];
    a1[2] = v15;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    std::__split_buffer<OADTableCell * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
}

uint64_t std::__split_buffer<OADTableCell * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

int *OADTFTemplateMatrix<OADTablePartStyle * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((void *)a1 + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)a1 + CsString::CsString((CsString *)this + 2) = 0;
  *((void *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((void *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_238D554AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

int *OADTFTemplateMatrix<OADStroke * {__strong}>::OADTFTemplateMatrix(int *a1, int a2, int a3, void *a4)
{
  id v8 = a4;
  *a1 = a2;
  a1[1] = a3;
  *((void *)a1 + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)a1 + CsString::CsString((CsString *)this + 2) = 0;
  *((void *)a1 + 3) = 0;
  std::vector<OADTableCell * {__strong}>::resize((uint64_t)(a1 + 2), a3 * a2);
  if (a1[1] * *a1 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      objc_storeStrong((id *)(*((void *)a1 + 1) + v9), a4);
      ++v10;
      v9 += 8;
    }
    while (v10 < a1[1] * (uint64_t)*a1);
  }

  return a1;
}

void sub_238D5557C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_238D55620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D55734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D557F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D55890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D55A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D55AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D55B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D55C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D55CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D55E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D55F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D56068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D562CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D56378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D565C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D570FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D57908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D57B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D57BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D57CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D57DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D57F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5818C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5831C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D589E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58AC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238D58B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D58CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D58E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D58FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D59068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D590D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D59178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5938C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5941C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D595BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5961C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D59704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D597AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D598A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D599D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D59AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D59C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v17 = v14;

  _Unwind_Resume(a1);
}

void sub_238D59C84()
{
  JUMPOUT(0x238D59C68);
}

void sub_238D59C90()
{
}

void sub_238D59C98()
{
}

void sub_238D5A174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48)
{
  unint64_t v49 = *(void **)(v48 - 144);
  __int16 v50 = *(void **)(v48 - 136);

  _Unwind_Resume(a1);
}

void sub_238D5A6E4(_Unwind_Exception *a1)
{
  *(void *)(v3 - 120) = v1;

  _Unwind_Resume(a1);
}

void sub_238D5AFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_238D5B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v16 = v14;

  _Unwind_Resume(a1);
}

void sub_238D5B468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5B5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5B7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5B8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5BA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5BB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5BC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5BDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5BE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5C35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_66()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_76_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_83()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_93()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_56()
{
  for (uint64_t i = 0x98u; i != -8; i -= 16)
}

id OAVReadLengthArray(NSString *a1)
{
  uint64_t v16 = a1;
  uint64_t v1 = [MEMORY[0x263EFF980] array];
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v16];
  if (!OAVReadLengthArray(NSString *)::startOfRealNumberCharSet)
  {
    uint64_t v3 = [MEMORY[0x263F08708] characterSetWithCharactersInString:@".+-0123456789"];
    uint64_t v4 = (void *)OAVReadLengthArray(NSString *)::startOfRealNumberCharSet;
    OAVReadLengthArray(NSString *)::startOfRealNumberCharSet = v3;
  }
  objc_msgSend(v2, "scanUpToCharactersFromSet:intoString:");
  while (([v2 isAtEnd] & 1) == 0)
  {
    double v18 = 0.0;
    if (([v2 scanDouble:&v18] & 1) == 0) {
      break;
    }
    id v17 = 0;
    [v2 scanUpToCharactersFromSet:OAVReadLengthArray(NSString *)::startOfRealNumberCharSet intoString:&v17];
    unint64_t v5 = (NSString *)v17;
    for (unint64_t i = 0; i < [(NSString *)v5 length]; ++i)
    {
      unint64_t v7 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
      int v8 = objc_msgSend(v7, "characterIsMember:", -[NSString characterAtIndex:](v5, "characterAtIndex:", i));

      if (!v8) {
        break;
      }
    }
    for (uint64_t j = 0; i + j < [(NSString *)v5 length]; ++j)
    {
      uint64_t v10 = [MEMORY[0x263F08708] letterCharacterSet];
      int v11 = objc_msgSend(v10, "characterIsMember:", -[NSString characterAtIndex:](v5, "characterAtIndex:", i + j));

      if (!v11) {
        break;
      }
    }
    if (j && (i + j < -[NSString length](v5, "length") || [v2 isAtEnd]))
    {
      -[NSString substringWithRange:](v5, "substringWithRange:", i, j);
      unint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();

      int v13 = CXUnitWithName(v12);
      double v18 = CXUnitToPoint(v13) * v18;
      unint64_t v5 = v12;
    }
    uint64_t v14 = [NSNumber numberWithDouble:v18];
    [v1 addObject:v14];
  }
  return v1;
}

void sub_238D5C7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5C914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5CA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5CDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5CEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5CFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5D094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5D248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5D2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5D76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5DABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5DC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5DD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5DDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5DFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5E30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5E508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5E610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5EB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5EBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5ED3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5EE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5F764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5F9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D5FCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5FE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D5FF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6021C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D60530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D60898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D60A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D60C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ODIRegularPolygonBounds(unint64_t a1, float a2, float a3)
{
  float v4 = -a2;
  if (a1)
  {
    LODWORD(v6) = 0;
    double v7 = 6.28318531 / (double)a1;
    float v8 = a2;
    float v9 = a2;
    double v10 = a3 * 3.14159265 / 180.0;
    float v11 = -a2;
    do
    {
      float v12 = v10 + (double)v6 * v7;
      __float2 v13 = __sincosf_stret(v12);
      float v14 = v13.__sinval * a2;
      if (v8 >= (float)(v13.__cosval * a2)) {
        float v8 = v13.__cosval * a2;
      }
      if (v4 < (float)(v13.__cosval * a2)) {
        float v4 = v13.__cosval * a2;
      }
      if (v9 >= v14) {
        float v9 = v13.__sinval * a2;
      }
      if (v11 < v14) {
        float v11 = v13.__sinval * a2;
      }
      unint64_t v6 = (v6 + 1);
    }
    while (v6 < a1);
  }
  else
  {
    return a2;
  }
  return v8;
}

void sub_238D60F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D612BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D61350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D614D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6155C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D616B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D61C58(_Unwind_Exception *a1)
{
  unint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_238D61E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D61E90()
{
}

void sub_238D61F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D620A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D621C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D62354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D624C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D625DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D62708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D62898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D629D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D62A28()
{
}

void sub_238D62AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D62BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D62CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D62DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D62E20(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D634EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D639F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238D63B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D63F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D640AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D642A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D64358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Unwind_Resume(a1);
}

void sub_238D64A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D64E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

void sub_238D64EBC()
{
  JUMPOUT(0x238D64EA0);
}

void sub_238D64EC8()
{
}

void sub_238D64ED0()
{
}

void sub_238D65058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D651CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D65288(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D653A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D65498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D65628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D65814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __float2 v13 = v11;

  _Unwind_Resume(a1);
}

void sub_238D6594C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D65C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D65E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __float2 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D65EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D660B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D663AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238D664FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D665EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D666C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6675C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D668D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __float2 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D66984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D66A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __float2 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D66BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D66CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D66EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D67310(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *exc_buf, uint64_t a10)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {

    if (TSUDefaultCat_init_token != -1) {
      dispatch_once(&TSUDefaultCat_init_token, &__block_literal_global_67);
    }
    objc_end_catch();
    JUMPOUT(0x238D672B8);
  }
  objc_exception_rethrow();
}

void sub_238D67394(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238D67720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D677D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D67998(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D67AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D67B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D67C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D685F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_238D688A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6898C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D68F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_238D690C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ODIHRange,ChAllocator<ODIHRange>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t v3 = a3;
  float v4 = (uint64_t *)__src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = (unint64_t)&__src[-*(void *)a1];
    unint64_t v14 = (unint64_t)&v6[-*(void *)a1] >> 3;
    unint64_t v15 = (v7 - *(void *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1)) {
      unsigned int v16 = v14 + 1;
    }
    else {
      unsigned int v16 = 2 * v15;
    }
    if (v15 >= 0x7FFFFFFF) {
      unint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v30 = a1 + 16;
    if (v17)
    {
      double v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      uint64_t v20 = v19;
    }
    else
    {
      double v18 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    uint64_t v27 = v21;
    CGFloat v28 = v21;
    long long v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        uint64_t v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = (v13 >> 2);
        }
        int64x2_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        uint64_t v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v21;
        long long v29 = &v23[8 * v24];
        if (v18) {
          operator delete(v18);
        }
      }
    }
    *(void *)uint64_t v21 = *v3;
    CGFloat v28 = v21 + 8;
    float v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    float v9 = __src + 8;
    double v10 = v6 - 8;
    float v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += *(void *)(a1 + 8) > (unint64_t)v3;
    }
    *float v4 = *v3;
  }
  return v4;
}

void sub_238D692DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer(uint64_t **a1, void *a2, uint64_t *a3)
{
  BOOL result = (uint64_t *)a2[1];
  unint64_t v5 = *a1;
  unint64_t v6 = result;
  if (*a1 != a3)
  {
    unint64_t v7 = a3;
    unint64_t v6 = (uint64_t *)a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *--unint64_t v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  float v9 = a1[1];
  double v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      uint64_t v11 = *a3++;
      *v10++ = v11;
    }
    while (a3 != v9);
    unint64_t v6 = (uint64_t *)a2[1];
  }
  a2[2] = v10;
  uint64_t v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  unint64_t v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  unint64_t v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void sub_238D69538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D695D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D698C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D69AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D69C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D69C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D69D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D69E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D69F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_238D6A024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6A330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6A4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6B610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6B744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6B8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6BA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6BE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238D6C2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6C9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6CAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6CD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D6D054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6D134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6D354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6D440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6D5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238D6D7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6D8B4(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D6D9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6DCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6DF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6E228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D6E3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6E624(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238D6E724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6EA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6EC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238D6ED94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6EF04(_Unwind_Exception *a1)
{
  unint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_238D6F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D6F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6F258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6F764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

OADPointTextSpacing *OADTextSpacingWithCachedSpacing(int a1)
{
  if (a1 < 0)
  {
    float v4 = [[OADPointTextSpacing alloc] initWithPoints:(int)(float)((float)-a1 * 0.125)];
  }
  else
  {
    uint64_t v2 = [OADPercentTextSpacing alloc];
    *(float *)&double v3 = (float)a1;
    float v4 = [(OADPercentTextSpacing *)v2 initWithPercent:v3];
  }
  return v4;
}

void sub_238D6F99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D6FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_238D6FFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D70118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D701E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void EshAlignRule::EshAlignRule(EshAlignRule *this)
{
  EshAtom::EshAtom(this, 0xF013u, 0);
  void *v1 = &unk_26EBD68C0;
  v1[7] = 0;
  v1[8] = 0;
  v1[6] = 0;
  *(void *)((char *)v1 + 28) = 0;
  *(void *)((char *)v1 + 33) = 0;
}

uint64_t EshAlignRule::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshAlignRule::~EshAlignRule(EshAlignRule *this)
{
  *(void *)this = &unk_26EBD68C0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD68C0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

EshObject *EshObject::setType(EshObject *this, unsigned __int16 a2)
{
  this->unsigned int var1 = a2;
  return this;
}

uint64_t EshObject::getNumChildren(EshObject *this)
{
  return 0;
}

void EshObject::getChildType(EshObject *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1005;
}

void EshObject::getChildVersion(EshObject *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1005;
}

void EshObject::getChildInstance(EshObject *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1005;
}

uint64_t EshRecord::getChildHeader(EshRecord *this)
{
  return 0;
}

uint64_t EshAtom::hasUnreadBinaryData(EshAtom *this)
{
  return 0;
}

uint64_t EshAtom::operator=(uint64_t a1, uint64_t a2)
{
  EshRecord::operator=(a1, a2);
  return a1;
}

void EshAtom::~EshAtom(EshAtom *this)
{
}

void EshBlipT<EshBitmapBlipInfo>::~EshBlipT(uint64_t a1)
{
  *(void *)a1 = &unk_26EBD6B90;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26EBD6B90;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
  JUMPOUT(0x23EC997B0);
}

uint64_t EshBlip::getBlipType(EshBlip *this)
{
  return EshRecord::getRecordType((EshRecord *)this) - 61464;
}

void EshClientDataModelVisitor::~EshClientDataModelVisitor(EshClientDataModelVisitor *this)
{
  *(void *)this = &unk_26EBD6EC0;
}

{
  *(void *)this = &unk_26EBD6EC0;
  JUMPOUT(0x23EC997B0);
}

void EshColor::EshColor(EshColor *this, const EshColor *a2)
{
  this->var0.unsigned int var0 = a2->var0.var0;
  switch(a2->var0.var0)
  {
    case 0:
    case 2:
    case 4:
      unsigned __int16 var1 = a2->var0.var1.var1;
      this->var0.var1.var0.var2 = a2->var0.var1.var0.var2;
      goto LABEL_6;
    case 1:
    case 8:
      unsigned __int16 var1 = a2->var0.var1.var1;
LABEL_6:
      this->var0.var1.unsigned __int16 var1 = var1;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    default:
      if ((a2->var0.var0 - 33) < 2) {
        this->var0.unsigned __int16 var1 = a2->var0.var1;
      }
      break;
  }
}

uint64_t EshColor::RGB::create(uint64_t this, char a2, char a3, unsigned char *a4, RGB *a5)
{
  *a4 = this;
  a4[1] = a2;
  a4[2] = a3;
  return this;
}

uint64_t EshColorScheme::getHostSchemeColor(EshColorScheme *this)
{
  uint64_t v1 = *(void *)this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7014;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);
  return v2();
}

uint64_t EshColorScheme::getSystemSchemeColor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7014;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);
  return v2();
}

uint64_t *EshContainer::insertChild(EshContainer *this, EshObject *a2, unsigned int a3)
{
  if (EshObject::isEscher(a2))
  {
    unint64_t v7 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v7, (uint64_t)v6 + 12);
  }
  else
  {
    unint64_t v7 = (EshHeader *)operator new(0x10uLL);
    unsigned __int16 v8 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v7, 0, 0, v8, 0, 0);
  }
  double v10 = v7;
  return std::vector<EshHeader *,ChAllocator<EshHeader *>>::insert((uint64_t)this + 32, (char *)(*((void *)this + 4) + 8 * a3), (uint64_t *)&v10);
}

void sub_238D70A90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

EshContainer *EshContainer::operator=(EshContainer *a1, uint64_t a2)
{
  EshContainer::removeChildren((uint64_t)a1);
  EshRecord::operator=((uint64_t)a1, a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2))
  {
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = (const EshHeader *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, v4);
      EshContainer::addChild(a1, v5);
      uint64_t v4 = (v4 + 1);
    }
    while (v4 < (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2));
  }
  return a1;
}

uint64_t *std::vector<EshHeader *,ChAllocator<EshHeader *>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  double v3 = a3;
  uint64_t v4 = (uint64_t *)__src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = (unint64_t)&__src[-*(void *)a1];
    unint64_t v14 = (unint64_t)&v6[-*(void *)a1] >> 3;
    unint64_t v15 = (v7 - *(void *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1)) {
      unsigned int v16 = v14 + 1;
    }
    else {
      unsigned int v16 = 2 * v15;
    }
    if (v15 >= 0x7FFFFFFF) {
      unint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v30 = a1 + 16;
    if (v17)
    {
      double v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      uint64_t v20 = v19;
    }
    else
    {
      double v18 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    uint64_t v27 = v21;
    CGFloat v28 = v21;
    long long v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        uint64_t v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = (v13 >> 2);
        }
        int64x2_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        uint64_t v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v21;
        long long v29 = &v23[8 * v24];
        if (v18) {
          operator delete(v18);
        }
      }
    }
    *(void *)uint64_t v21 = *v3;
    CGFloat v28 = v21 + 8;
    uint64_t v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    float v9 = __src + 8;
    double v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += *(void *)(a1 + 8) > (unint64_t)v3;
    }
    *uint64_t v4 = *v3;
  }
  return v4;
}

void sub_238D70DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EshDeletedPspl::EshDeletedPspl(EshDeletedPspl *this)
{
  EshAtom::EshAtom(this, 0xF11Du, 0);
  *(void *)uint64_t v1 = &unk_26EBD71D0;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 3CsString::CsString((CsString *)this + 2) = 0;
}

uint64_t EshDeletedPspl::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshDeletedPspl::~EshDeletedPspl(EshDeletedPspl *this)
{
}

void EshBlipT<EshDibBlipInfo>::~EshBlipT(EshBlip *a1)
{
  a1->unsigned int var0 = (void **)&unk_26EBD7488;
  uint64_t v2 = (EshDibBlipInfo *)&a1[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&a1[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(a1);
}

{
  EshDibBlipInfo *v2;
  uint64_t vars8;

  a1->unsigned int var0 = (void **)&unk_26EBD7488;
  uint64_t v2 = (EshDibBlipInfo *)&a1[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&a1[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(a1);
  JUMPOUT(0x23EC997B0);
}

uint64_t EshGeometryProperties::setSimpleProperty(EshGeometryProperties *this, unsigned int a2, int a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0x140u:
      *((_DWORD *)this + 3) = a3;
      goto LABEL_3;
    case 0x141u:
      *((_DWORD *)this + 4) = a3;
      goto LABEL_3;
    case 0x142u:
      *((_DWORD *)this + 5) = a3;
      goto LABEL_3;
    case 0x143u:
      *((_DWORD *)this + 6) = a3;
      goto LABEL_3;
    case 0x144u:
      *((_DWORD *)this + 34) = a3;
      goto LABEL_3;
    case 0x147u:
    case 0x148u:
    case 0x149u:
    case 0x14Au:
    case 0x14Bu:
    case 0x14Cu:
    case 0x14Du:
    case 0x14Eu:
    case 0x14Fu:
    case 0x150u:
      *((_DWORD *)this + a2 - 315) = a3;
      goto LABEL_3;
    case 0x153u:
      *((_DWORD *)this + 3CsString::CsString((CsString *)this + 2) = a3;
      goto LABEL_3;
    case 0x154u:
      *((_DWORD *)this + 33) = a3;
LABEL_3:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t EshGeometryProperties::setComplexProperty(void *a1, int a2, uint64_t a3)
{
  uint64_t v3 = 0;
  switch(a2)
  {
    case 337:
      uint64_t v4 = a1 + 11;
      goto LABEL_11;
    case 338:
      uint64_t v4 = a1 + 12;
      goto LABEL_11;
    case 339:
    case 340:
      return v3;
    case 341:
      uint64_t v4 = a1 + 13;
      goto LABEL_11;
    case 342:
      uint64_t v4 = a1 + 14;
      goto LABEL_11;
    case 343:
      uint64_t v4 = a1 + 15;
      goto LABEL_11;
    default:
      if (a2 == 326)
      {
        uint64_t v4 = a1 + 5;
      }
      else
      {
        if (a2 != 325) {
          return v3;
        }
        uint64_t v4 = a1 + 4;
      }
LABEL_11:
      *uint64_t v4 = a3;
      return 1;
  }
}

uint64_t EshGeometryProperties::setFlag(EshGeometryProperties *this, int a2, char a3)
{
  switch(a2)
  {
    case 378:
      *((unsigned char *)this + 140) = a3;
      goto LABEL_9;
    case 379:
      *((unsigned char *)this + 14CsString::CsString((CsString *)this + 1) = a3;
      goto LABEL_9;
    case 380:
      *((unsigned char *)this + 14CsString::CsString((CsString *)this + 2) = a3;
      goto LABEL_9;
    case 381:
      *((unsigned char *)this + 143) = a3;
      goto LABEL_9;
    case 382:
      *((unsigned char *)this + 144) = a3;
      goto LABEL_9;
    case 383:
      *((unsigned char *)this + 145) = a3;
LABEL_9:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
  }
}

void std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::__append(void **a1, unsigned int a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_DWORD **)(v4 - 8);
  if (((unint64_t)(v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v15 = &v7[2 * a2];
      do
      {
        *(_WORD *)unint64_t v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      unint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unsigned int v9 = (v8 >> 3) + a2;
    unint64_t v10 = (unint64_t)(v5 - (unsigned char *)*a1) >> 3;
    if (2 * (int)v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    unsigned int v16 = &v12[v8 & 0x7FFFFFFF8];
    unint64_t v17 = &v16[8 * a2];
    double v18 = v16;
    do
    {
      *(_WORD *)double v18 = 0;
      *((_DWORD *)v18 + CsString::CsString((CsString *)this + 1) = 0;
      v18 += 8;
    }
    while (v18 != v17);
    unsigned int v19 = &v12[8 * v14];
    uint64_t v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v16 - CsString::CsString((CsString *)this + 1) = v22;
        v16 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

BOOL EshHandleValuePair::operator==(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return v2 == v3 && HIDWORD(v2) == HIDWORD(v3);
}

void EshBlipT<EshMetafileBlipInfo>::~EshBlipT(uint64_t a1)
{
  *(void *)a1 = &unk_26EBD7648;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 192));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26EBD7648;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 192));
  OcBinaryData::~OcBinaryData((OcBinaryData *)(a1 + 72));
  EshBlip::~EshBlip((EshBlip *)a1);
  JUMPOUT(0x23EC997B0);
}

EshOpt *EshOpt::operator=(EshOpt *a1, const EshOpt *a2)
{
  return a1;
}

uint64_t **EshOpt::copy(uint64_t **this, const EshOpt *a2)
{
  uint64_t v2 = (uint64_t **)((char *)a2 + 32);
  uint64_t v3 = (char *)*((void *)a2 + 4);
  uint64_t v4 = (char *)a2 + 40;
  if (v3 != (char *)a2 + 40)
  {
    unint64_t v5 = this + 4;
    do
    {
      unint64_t v6 = v3;
      unint64_t v7 = (char *)*((void *)v3 + 1);
      unint64_t v8 = v3;
      if (v7)
      {
        do
        {
          uint64_t v3 = v7;
          unint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v3 = (char *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v3 == (void)v8;
          unint64_t v8 = v3;
        }
        while (!v9);
      }
      int v10 = *((_DWORD *)v6 + 8);
      Propertyint Type = EshOpt::getPropertyType(v10);
      unsigned int v16 = v10;
      unint64_t v17 = &v16;
      uint64_t v12 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v16, (uint64_t)&std::piecewise_construct, &v17);
      unsigned int v13 = (CsString *)v12[5];
      uint64_t v14 = v12[6];
      if (PropertyType > 9)
      {
        if (PropertyType == 10)
        {
          if (!v13) {
            goto LABEL_19;
          }
          unint64_t v15 = (CsData *)(*((uint64_t (**)(uint64_t *))v13->var0 + 2))(v12[5]);
        }
        else
        {
          if (PropertyType != 11)
          {
LABEL_20:
            unint64_t v15 = (CsData *)v12[5];
            goto LABEL_21;
          }
          if (!v13)
          {
LABEL_19:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
          unint64_t v15 = (CsData *)operator new(0x10uLL);
          CsData::CsData(v15);
          CsData::operator=((const void **)v15, (const void **)&v13->var0);
        }
      }
      else
      {
        if (!PropertyType) {
          goto LABEL_19;
        }
        if (PropertyType != 9) {
          goto LABEL_20;
        }
        if (!v13) {
          goto LABEL_19;
        }
        unint64_t v15 = (CsData *)operator new(0x18uLL);
        CsString::CsString((CsString *)v15);
        v15[1].unsigned int var0 = 0;
        bzero(v15->var1, 2 * *(&v15[1].var0 + 1));
        CsString::append((CsString *)v15, v13);
      }
LABEL_21:
      unsigned int v16 = v10;
      unint64_t v17 = &v16;
      this = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v16, (uint64_t)&std::piecewise_construct, &v17);
      this[5] = (uint64_t *)v15;
      this[6] = v14;
    }
    while (v3 != v4);
  }
  return this;
}

void sub_238D7177C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t EshOpt::deleteProperty(uint64_t a1, unsigned int a2)
{
  EshOpt::deleteComplexPropertyValue(a1, a2);
  unsigned int v5 = a2;
  return std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__erase_unique<unsigned int>(a1 + 32, &v5);
}

void *EshDataTablePropVal<unsigned char>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshDataTablePropVal<unsigned char>::operator==(a1, (uint64_t)result);
  }
  return result;
}

BOOL EshDataTablePropVal<unsigned char>::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unsigned int v5 = 0;
  do
  {
    int v6 = *(unsigned __int8 *)EshDataTablePropVal<unsigned char>::operator[](a1, v5);
    int v7 = *(unsigned __int8 *)EshDataTablePropVal<unsigned char>::operator[](a2, v5);
    BOOL result = v6 == v7;
    if (v6 != v7) {
      break;
    }
    ++v5;
  }
  while (v5 < *(_DWORD *)(a1 + 16));
  return result;
}

uint64_t EshDataTablePropVal<unsigned char>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 16) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(void *)(a1 + 8) + a2;
}

uint64_t **std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void EshAsciiPropVal::~EshAsciiPropVal(EshAsciiPropVal *this)
{
  *(void *)this = &unk_26EBD7838;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD7838;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

_DWORD *EshAsciiPropVal::clone(EshAsciiPropVal *this)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[4] = 0;
  *(void *)uint64_t v2 = &unk_26EBD77D0;
  *((void *)v2 + CsString::CsString((CsString *)this + 1) = 0;
  EshDataTablePropVal<char>::init((uint64_t)v2, *((_DWORD *)this + 4), *((void *)this + 1));
  return v2;
}

void sub_238D71C14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t EshAsciiPropVal::accept(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
  }
  else {
    return 1;
  }
}

void *EshDataTablePropVal<char>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshDataTablePropVal<unsigned char>::operator==(a1, (uint64_t)result);
  }
  return result;
}

void *EshDataTablePropVal<char>::init(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = a2;
  BOOL result = *(void **)(a1 + 8);
  if (result) {
    BOOL result = (void *)MEMORY[0x23EC997B0](result, 0x1000C4077774924);
  }
  *(void *)(a1 + 8) = 0;
  if (a2)
  {
    BOOL result = operator new[](a2);
    uint64_t v7 = 0;
    *(void *)(a1 + 8) = result;
    do
    {
      *(unsigned char *)(*(void *)(a1 + 8) + v7) = *(unsigned char *)(a3 + v7);
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

_DWORD *EshRawPropVal::clone(EshRawPropVal *this)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[4] = 0;
  *(void *)uint64_t v2 = &unk_26EBD7870;
  *((void *)v2 + CsString::CsString((CsString *)this + 1) = 0;
  EshDataTablePropVal<char>::init((uint64_t)v2, *((_DWORD *)this + 4), *((void *)this + 1));
  return v2;
}

void sub_238D71E60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshTablePropVal<float>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7928;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshTablePropVal<float>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD78C0;
  v2[1] = 0;
  EshBasicTablePropVal<float>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238D71F40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<float>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<float>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::vector<float,ChAllocator<float>>::reserve((void **)(a1 + 8), (*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  if (a1 != a2) {
    std::vector<float,ChAllocator<float>>::__assign_with_size[abi:ne180100]<float *,float *>(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

void std::vector<float,ChAllocator<float>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0x3FFFFFFFCLL];
    BOOL v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - CsString::CsString((CsString *)this + 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::vector<float,ChAllocator<float>>::__assign_with_size[abi:ne180100]<float *,float *>(void *result, char *__src, char *a3, unsigned int a4)
{
  BOOL v6 = __src;
  uint64_t v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  unint64_t v8 = result[2];
  unsigned int v10 = (char *)*result;
  if (((v8 - *result) >> 2) >= a4)
  {
    unsigned int v19 = (void **)(result + 1);
    uint64_t v20 = (char *)result[1];
    unint64_t v21 = (unint64_t)(v20 - v10) >> 2;
    if (v21 >= a4)
    {
      size_t v18 = a3 - __src;
      if (a3 != __src) {
        BOOL result = memmove((void *)*result, __src, v18);
      }
    }
    else
    {
      uint64_t v22 = &__src[4 * v21];
      if (((unint64_t)(v20 - v10) >> 2))
      {
        BOOL result = memmove((void *)*result, __src, 4 * ((unint64_t)(v20 - v10) >> 2));
        uint64_t v20 = (char *)*v19;
      }
      unsigned int v10 = v20;
      int64x2_t v23 = v20;
      if (v22 != a3)
      {
        int64x2_t v23 = v20;
        int v24 = v20;
        do
        {
          int v25 = *(_DWORD *)v22;
          v22 += 4;
          *(_DWORD *)int v24 = v25;
          v24 += 4;
          v23 += 4;
        }
        while (v22 != a3);
      }
      size_t v18 = v23 - v20;
    }
  }
  else
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    unint64_t v11 = v8 >> 2;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v9, v13);
    unsigned int v10 = (char *)result;
    *uint64_t v7 = result;
    unsigned __int16 v7[2] = (char *)result + 4 * v14;
    unint64_t v15 = (char *)result;
    if (v6 != a3)
    {
      unint64_t v15 = (char *)result;
      unsigned int v16 = result;
      do
      {
        int v17 = *(_DWORD *)v6;
        v6 += 4;
        *v16++ = v17;
        v15 += 4;
      }
      while (v6 != a3);
    }
    size_t v18 = v15 - (char *)result;
    unsigned int v19 = (void **)(v7 + 1);
  }
  *unsigned int v19 = &v10[v18];
  return result;
}

BOOL EshBasicTablePropVal<float>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(float **)(a2 + 8);
  if (((unint64_t)(v2 - v3) >> 2) != ((*(void *)(a2 + 16) - (void)v4) >> 2)) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 4;
  do
  {
    float v6 = *v4++;
    BOOL result = *(float *)(v5 - 4) == v6;
    BOOL v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

void *EshTablePropVal<EshHandle>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD79C8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshTablePropVal<EshHandle>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD7960;
  v2[1] = 0;
  EshBasicTablePropVal<EshHandle>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238D723B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshHandle>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshHandle>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshHandle>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::vector<EshHandle,ChAllocator<EshHandle>>::reserve((uint64_t *)(a1 + 8), -252645135 * ((*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  if (a1 != a2) {
    std::vector<EshHandle,ChAllocator<EshHandle>>::__assign_with_size[abi:ne180100]<EshHandle*,EshHandle*>(v4, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), -252645135 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  }
  return a1;
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (-252645135 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xC3C3C3C4) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v5 = -252645135 * ((unint64_t)(a1[1] - *a1) >> 2);
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(v3, a2);
    BOOL v8 = (char *)__p + 68 * v5;
    uint64_t v9 = v8;
    unsigned int v10 = (char *)__p + 68 * v6;
    std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      uint64_t v9 = &v8[(v9 - v8 - 68) % 0x44uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D725DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    uint64_t v7 = v2;
    int v8 = *(_DWORD *)(v2 - 68);
    v2 -= 68;
    *(_DWORD *)(v4 - 68) = v8;
    v4 -= 68;
    do
    {
      uint64_t v9 = v6 + v5;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 64) = *(void *)(v7 + v5 - 64);
      *(void *)(v9 - 56) = *(void *)(v7 + v5 - 56);
      v5 += 16;
    }
    while (v5 != 64);
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *BOOL result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x3C3C3C3C3C3C3C4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(68 * a2);
}

_DWORD *std::vector<EshHandle,ChAllocator<EshHandle>>::__assign_with_size[abi:ne180100]<EshHandle*,EshHandle*>(void *a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v8 = a1[2];
  uint64_t v9 = (_DWORD *)*a1;
  if (-252645135 * ((v8 - *a1) >> 2) >= a4)
  {
    unint64_t v16 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a1[1] - (void)v9) >> 2);
    if (v16 >= a4)
    {
      BOOL result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(a2, a3, v9);
      a1[1] = v19;
      return result;
    }
    int v17 = &a2[17 * v16];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(a2, v17, v9);
    uint64_t v13 = (uint64_t)a1;
    uint64_t v14 = v17;
    unint64_t v15 = a3;
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xC3C3C3C3) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -252645135 * (v8 >> 2);
    int v11 = 2 * v10;
    if (2 * v10 <= a4) {
      int v11 = a4;
    }
    if (v10 >= 0x61E1E1E1) {
      unsigned int v12 = -1010580541;
    }
    else {
      unsigned int v12 = v11;
    }
    std::vector<EshHandle,ChAllocator<EshHandle>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = (uint64_t)a1;
    uint64_t v14 = a2;
    unint64_t v15 = a3;
  }
  return (_DWORD *)std::vector<EshHandle,ChAllocator<EshHandle>>::__construct_at_end<EshHandle*,EshHandle*>(v13, v14, v15);
}

uint64_t std::vector<EshHandle,ChAllocator<EshHandle>>::__construct_at_end<EshHandle*,EshHandle*>(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(_DWORD **)(result + 8);
  while (a2 != a3)
  {
    uint64_t v4 = 0;
    _DWORD *v3 = *a2;
    do
    {
      uint64_t v5 = &v3[v4];
      *(void *)(v5 + 3) = 0;
      *(void *)(v5 + CsString::CsString((CsString *)this + 1) = 0;
      *(void *)(v5 + CsString::CsString((CsString *)this + 1) = *(void *)&a2[v4 + 1];
      *(void *)(v5 + 3) = *(void *)&a2[v4 + 3];
      v4 += 4;
    }
    while (v4 != 16);
    a2 += 17;
    v3 += 17;
  }
  *(void *)(result + 8) = v3;
  return result;
}

char *std::vector<EshHandle,ChAllocator<EshHandle>>::__vallocate[abi:ne180100](void *a1, unsigned int a2)
{
  if (a2 >= 0xC3C3C3C4) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[68 * v4];
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshHandle *,EshHandle *,EshHandle *,0>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = *result;
      for (uint64_t i = 3; i != 19; i += 4)
      {
        uint64_t v4 = &a3[i];
        *(v4 - CsString::CsString((CsString *)this + 1) = *(void *)&result[i - 2];
        *uint64_t v4 = *(void *)&result[i];
      }
      result += 17;
      a3 += 17;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

BOOL EshBasicTablePropVal<EshHandle>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  if (-252645135 * ((unint64_t)(v3 - v2) >> 2) != -252645135
                                                                      * ((*(void *)(a2 + 16) - (void)v4) >> 2))
    return 0;
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = EshHandle::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 68;
    v4 += 68;
  }
  while (v2 != v3);
  return result;
}

BOOL EshHandle::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2
    || a1[1] != a2[1]
    || a1[2] != a2[2]
    || a1[3] != a2[3]
    || !EshHandleValuePair::operator==(a1 + 4, a2 + 4)
    || !EshHandleValuePair::operator==(a1 + 20, a2 + 20)
    || !EshHandleValuePair::operator==(a1 + 36, a2 + 36))
  {
    return 0;
  }
  return EshHandleValuePair::operator==(a1 + 4, a2 + 4);
}

void *EshTablePropVal<EshGradientStop>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7A68;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshTablePropVal<EshGradientStop>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD7A00;
  v2[1] = 0;
  EshBasicTablePropVal<EshGradientStop>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238D72B68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<EshGradientStop>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<EshGradientStop>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshGradientStop>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a1 + 8);
  std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::reserve((uint64_t *)(a1 + 8), -1431655765 * ((*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  if (a1 != a2) {
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__assign_with_size[abi:ne180100]<EshGradientStop*,EshGradientStop*>(v4, *(void *)(a2 + 8), *(void *)(a2 + 16), -1431655765 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  }
  return a1;
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::reserve(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (-1431655765 * ((unint64_t)(v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x55555556) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(v3, a2);
    unint64_t v8 = (char *)__p + 12 * v5;
    uint64_t v9 = v8;
    unsigned int v10 = (char *)__p + 12 * v6;
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      uint64_t v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D72D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 12);
    v2 -= 12;
    *(void *)(v4 - 1CsString::CsString((CsString *)this + 2) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *BOOL result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

uint64_t std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__assign_with_size[abi:ne180100]<EshGradientStop*,EshGradientStop*>(void **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v9 = *a1;
  if (-1431655765 * ((v8 - (unint64_t)*a1) >> 2) < a4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x55555555) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -1431655765 * (v8 >> 2);
    int v11 = 2 * v10;
    if (2 * v10 <= a4) {
      int v11 = a4;
    }
    if (v10 >= 0x2AAAAAAA) {
      unsigned int v12 = 1431655765;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t result = (uint64_t)std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v14 = a1[1];
    while (v6 != a3)
    {
      *(void *)uint64_t v14 = *(void *)v6;
      v14[2] = *(_DWORD *)(v6 + 8);
      v14 += 3;
      v6 += 12;
    }
LABEL_17:
    a1[1] = v14;
    return result;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)v9) >> 2);
  if (v15 < a4)
  {
    uint64_t v16 = a2 + 12 * v15;
    uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(a2, v16, (uint64_t)v9);
    uint64_t v14 = a1[1];
    if (v16 != a3)
    {
      int v17 = a1[1];
      do
      {
        *(void *)int v17 = *(void *)v16;
        v17[2] = *(_DWORD *)(v16 + 8);
        v14 += 3;
        v16 += 12;
        v17 += 3;
      }
      while (v16 != a3);
    }
    goto LABEL_17;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(a2, a3, (uint64_t)v9);
  a1[1] = v18;
  return result;
}

char *std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__vallocate[abi:ne180100](void *a1, unsigned int a2)
{
  if (a2 >= 0x55555556) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EshGradientStop *,EshGradientStop *,EshGradientStop *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
    a3 += 12;
    a1 += 12;
  }
  while (a1 != a2);
  return a2;
}

BOOL EshBasicTablePropVal<EshGradientStop>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(float **)(a1 + 8);
  uint64_t v3 = *(float **)(a1 + 16);
  uint64_t v4 = *(float **)(a2 + 8);
  if (-1431655765 * ((unint64_t)((char *)v3 - (char *)v2) >> 2) != -1431655765
                                                                                       * ((*(void *)(a2 + 16) - (void)v4) >> 2))
    return 0;
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = EshGradientStop::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 3;
    v4 += 3;
  }
  while (v2 != v3);
  return result;
}

BOOL EshGradientStop::operator==(float *a1, float *a2)
{
  return *(unsigned __int16 *)a1 == *(unsigned __int16 *)a2
      && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
      && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2)
      && *((unsigned __int16 *)a1 + 3) == *((unsigned __int16 *)a2 + 3)
      && a1[2] == a2[2];
}

void *EshTablePropVal<int>::~EshTablePropVal(void *a1)
{
  *a1 = &unk_26EBD7B08;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *EshTablePropVal<int>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  void *v2 = &unk_26EBD7AA0;
  v2[1] = 0;
  EshBasicTablePropVal<int>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_238D73214(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *EshBasicTablePropVal<int>::equals(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)EshBasicTablePropVal<int>::operator==(a1, (uint64_t)result);
  }
  return result;
}

uint64_t EshBasicTablePropVal<int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::vector<int,ChAllocator<int>>::reserve((void **)(a1 + 8), (*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  if (a1 != a2) {
    std::vector<int,ChAllocator<int>>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

void std::vector<int,ChAllocator<int>>::reserve(void **a1, unsigned int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (((unint64_t)(v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0x3FFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    int v11 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v11 != *a1)
    {
      unsigned int v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - CsString::CsString((CsString *)this + 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::vector<int,ChAllocator<int>>::__assign_with_size[abi:ne180100]<int *,int *>(void *result, char *__src, char *a3, unsigned int a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  unint64_t v8 = result[2];
  unsigned int v10 = (char *)*result;
  if (((v8 - *result) >> 2) >= a4)
  {
    uint64_t v19 = (void **)(result + 1);
    uint64_t v20 = (char *)result[1];
    unint64_t v21 = (unint64_t)(v20 - v10) >> 2;
    if (v21 >= a4)
    {
      size_t v18 = a3 - __src;
      if (a3 != __src) {
        BOOL result = memmove((void *)*result, __src, v18);
      }
    }
    else
    {
      uint64_t v22 = &__src[4 * v21];
      if (((unint64_t)(v20 - v10) >> 2))
      {
        BOOL result = memmove((void *)*result, __src, 4 * ((unint64_t)(v20 - v10) >> 2));
        uint64_t v20 = (char *)*v19;
      }
      unsigned int v10 = v20;
      int64x2_t v23 = v20;
      if (v22 != a3)
      {
        int64x2_t v23 = v20;
        int v24 = v20;
        do
        {
          int v25 = *(_DWORD *)v22;
          v22 += 4;
          *(_DWORD *)int v24 = v25;
          v24 += 4;
          v23 += 4;
        }
        while (v22 != a3);
      }
      size_t v18 = v23 - v20;
    }
  }
  else
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    unint64_t v11 = v8 >> 2;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v9, v13);
    unsigned int v10 = (char *)result;
    *uint64_t v7 = result;
    unsigned __int16 v7[2] = (char *)result + 4 * v14;
    unint64_t v15 = (char *)result;
    if (v6 != a3)
    {
      unint64_t v15 = (char *)result;
      uint64_t v16 = result;
      do
      {
        int v17 = *(_DWORD *)v6;
        v6 += 4;
        *v16++ = v17;
        v15 += 4;
      }
      while (v6 != a3);
    }
    size_t v18 = v15 - (char *)result;
    uint64_t v19 = (void **)(v7 + 1);
  }
  *uint64_t v19 = &v10[v18];
  return result;
}

BOOL EshBasicTablePropVal<int>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(const void **)(a1 + 8);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 8;
  int64_t v5 = *(const void **)(a2 + 8);
  return (v4 >> 2) == ((*(void *)(v6 + 8) - (void)v5) >> 2) && memcmp(v2, v5, v4) == 0;
}

void EshRawAtom::EshRawAtom(EshRawAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  EshAtom::EshAtom(this, a2, a3);
  *(void *)uint64_t v3 = &unk_26EBD7B40;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 32));
}

uint64_t EshRawAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshRawAtom::~EshRawAtom(EshRawAtom *this)
{
  *(void *)this = &unk_26EBD7B40;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD7B40;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  JUMPOUT(0x23EC997B0);
}

uint64_t EshRecord::setVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  return this;
}

uint64_t EshRecord::setInstance(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 20) = a2;
  return this;
}

uint64_t EshRecord::setRecordType(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 2CsString::CsString((CsString *)this + 2) = a2;
  return this;
}

uint64_t EshRecord::getEndOffset(EshRecord *this)
{
  return (*((_DWORD *)this + 4) + *((_DWORD *)this + 3) + 8);
}

BOOL EshRecord::isEscherRecord(EshRecord *this)
{
  return (unsigned __int16)(*((_WORD *)this + 11) + 4096) < 0x123u;
}

uint64_t EshRecord::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    EshHeader::operator=(a1 + 12, a2 + 12);
  }
  return a1;
}

void EshRectAtom::~EshRectAtom(EshRectAtom *this)
{
}

void EshRegroupItems::EshRegroupItems(EshRegroupItems *this)
{
  EshAtom::EshAtom(this, 0xF118u, 0);
  void *v1 = &unk_26EBD7D18;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshRegroupItems::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshRegroupItems::~EshRegroupItems(EshRegroupItems *this)
{
  *(void *)this = &unk_26EBD7D18;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD7D18;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshSelection::EshSelection(EshSelection *this)
{
  EshAtom::EshAtom(this, 0xF119u, 0);
  *(void *)uint64_t v1 = &unk_26EBD7DC0;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 3CsString::CsString((CsString *)this + 2) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 40) = 0;
}

uint64_t EshSelection::accept(int a1, void *lpsrc)
{
  return v2();
}

void EshSelection::~EshSelection(EshSelection *this)
{
  *(void *)this = &unk_26EBD7DC0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD7DC0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void EshBackground::resolveColor(EshBackground *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4)
{
  unint64_t v8 = (EshFill *)operator new(8uLL);
  LODWORD(v8->var0) = 255;
  if (a3->var0.var0 != 33)
  {
    EshContentBase::resolveColor(this, a2, a3, a4);
    goto LABEL_18;
  }
  int Red = EshColor::getRed(a3);
  switch(Red)
  {
    case 240:
      unsigned int v10 = (EshFill *)((char *)this + 304);
      if ((EshFill::isColorSet((EshFill *)((char *)this + 304)) & 1) == 0)
      {
LABEL_16:
        EshFill::getDefaultColor(v8, v13);
        goto LABEL_17;
      }
      break;
    case 245:
      if (!EshFill::isColor2Set((EshFill *)((char *)this + 304))) {
        goto LABEL_21;
      }
      uint64_t Color2 = EshFill::getColor2((EshFill *)((char *)this + 304));
      goto LABEL_13;
    case 247:
      unsigned int v10 = (EshFill *)((char *)this + 304);
      unint64_t v11 = (EshContentProperties *)EshFill::isOnSet((EshFill *)((char *)this + 304));
      if (v11)
      {
        if ((EshFill::getOn((EshFill *)((char *)this + 304)) & 1) == 0)
        {
LABEL_21:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 1009;
        }
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v11))
      {
        goto LABEL_21;
      }
      if (!EshFill::isColorSet((EshFill *)((char *)this + 304))) {
        goto LABEL_16;
      }
      break;
    default:
      goto LABEL_21;
  }
  uint64_t Color2 = EshFill::getColor(v10);
LABEL_13:
  EshColor::operator=((uint64_t)v8, Color2);
LABEL_17:
  (*(void (**)(EshBackground *, CsColour *, EshFill *, const EshColorScheme *))(*(void *)this + 112))(this, a2, v8, a4);
  Adjustmentint Type = EshColor::getAdjustmentType(a3);
  unsigned int Green = EshColor::getGreen(a3);
  EshContentBase::adjustColour(a2, AdjustmentType, Green, v16);
LABEL_18:
  JUMPOUT(0x23EC997B0);
}

void sub_238D74AD0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t EshBackground::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 184))(a2, a1);
}

void EshBackground::~EshBackground(EshBackground *this)
{
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x23EC997B0);
}

void EshFill::~EshFill(EshFill *this)
{
}

uint64_t EshBackgroundPropertiesImpl::isBWModeSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x304u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::isBWModeSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x304u);
}

uint64_t EshBackgroundPropertiesImpl::getBWMode(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x304u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::getBWMode(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x304u);
}

double EshBackgroundPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshBackgroundPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshBackgroundPropertiesImpl::isBWPureSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x305u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::isBWPureSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x305u);
}

uint64_t EshBackgroundPropertiesImpl::getBWPure(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x305u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::getBWPure(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x305u);
}

double EshBackgroundPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshBackgroundPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshBackgroundPropertiesImpl::isBWNormalSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x306u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::isBWNormalSet(EshBackgroundPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x306u);
}

uint64_t EshBackgroundPropertiesImpl::getBWNormal(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x306u);
}

uint64_t non-virtual thunk to'EshBackgroundPropertiesImpl::getBWNormal(EshBackgroundPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x306u);
}

double EshBackgroundPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshBackgroundPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

void EshBackgroundPropertiesImpl::~EshBackgroundPropertiesImpl(EshBackgroundPropertiesImpl *this)
{
}

void non-virtual thunk to'EshBackgroundPropertiesImpl::~EshBackgroundPropertiesImpl(EshBackgroundPropertiesImpl *this)
{
}

uint64_t EshContentBase::copy(EshContentBase *this, const EshContentBase *a2)
{
  return EshContentData::operator=((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t EshContentData::operator=(uint64_t a1, uint64_t a2)
{
  EshOpt::operator=((EshOpt *)a1, (const EshOpt *)a2);
  EshOpt::operator=((EshOpt *)(a1 + 64), (const EshOpt *)(a2 + 64));
  EshOpt::operator=((EshOpt *)(a1 + 128), (const EshOpt *)(a2 + 128));
  EshAtom::operator=(a1 + 192, a2 + 192);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 25CsString::CsString((CsString *)this + 2) = *(_DWORD *)(a2 + 252);
  return a1;
}

_WORD *EshContentBase::adjustColour(_WORD *result, int a2, unsigned int a3, double a4)
{
  switch(a2)
  {
    case 0:
      LOWORD(v4) = result[1];
      goto LABEL_10;
    case 1:
      LOWORD(a4) = result[1];
      *(double *)&unint64_t v5 = (double)a3 * (double)*(unint64_t *)&a4 / 255.0;
      int v4 = (int)*(double *)&v5;
      result[1] = (int)*(double *)&v5;
      LOWORD(v5) = result[2];
      *(double *)&unint64_t v6 = (double)a3 * (double)v5 / 255.0;
      result[2] = (int)*(double *)&v6;
      LOWORD(v6) = result[3];
      double v7 = (double)a3 * (double)v6 / 255.0;
      goto LABEL_5;
    case 2:
      int v4 = (int)(255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[1]) / 255.0);
      int v8 = (int)(255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[2]) / 255.0);
      result[1] = v4;
      result[2] = v8;
      double v7 = 255.0 - (double)a3 * (double)(255 - (unsigned __int16)result[3]) / 255.0;
LABEL_5:
      int v9 = (int)v7;
      goto LABEL_9;
    case 3:
      LOWORD(v4) = result[1] + a3;
      result[1] = v4;
      result[2] += a3;
      LOWORD(v9) = result[3] + a3;
      goto LABEL_9;
    case 4:
      LOWORD(v4) = result[1] - a3;
      result[1] = v4;
      result[2] -= a3;
      LOWORD(v9) = result[3] - a3;
      goto LABEL_9;
    case 5:
      LOWORD(v4) = a3 - result[1];
      result[1] = v4;
      result[2] = a3 - result[2];
      LOWORD(v9) = a3 - result[3];
LABEL_9:
      result[3] = v9;
LABEL_10:
      if ((unsigned __int16)v4 >= 0x100u) {
        result[1] = 255;
      }
      break;
    case 6:
      if ((unsigned __int16)result[1] >= a3) {
        __int16 v10 = 255;
      }
      else {
        __int16 v10 = 0;
      }
      result[1] = v10;
      if ((unsigned __int16)result[2] >= a3) {
        __int16 v11 = 255;
      }
      else {
        __int16 v11 = 0;
      }
      result[2] = v11;
      if ((unsigned __int16)result[3] >= a3) {
        __int16 v12 = 255;
      }
      else {
        __int16 v12 = 0;
      }
      result[3] = v12;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
  }
  if ((unsigned __int16)result[2] >= 0x100u) {
    result[2] = 255;
  }
  if ((unsigned __int16)result[3] >= 0x100u) {
    result[3] = 255;
  }
  return result;
}

CsColour *EshContentBase::resolveColor(EshContentBase *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4)
{
  int var0 = a3->var0.var0;
  if (a3->var0.var0 == 34)
  {
    double result = (CsColour *)EshColorScheme::getSystemSchemeColor((uint64_t)a4);
    CsColour v9 = v11;
LABEL_7:
    *a2 = v9;
    return result;
  }
  if (var0 == 8)
  {
    EshColor::getSchemeIndex(a3);
    double result = (CsColour *)EshColorScheme::getHostSchemeColor(a4);
    CsColour v9 = *result;
    goto LABEL_7;
  }
  if (var0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  a2->unsigned __int16 var1 = EshColor::getRed(a3);
  a2->var2 = EshColor::getGreen(a3);
  double result = (CsColour *)EshColor::getBlue(a3);
  a2->int var3 = (unsigned __int16)result;
  return result;
}

uint64_t EshContentProperties::isXmlEquivalentSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x3A9u);
}

uint64_t *EshContentProperties::getXmlEquivalent(EshContentProperties *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2 + 128, 0x3A9u);
}

void non-virtual thunk to'EshGroup::~EshGroup(EshGroup *this)
{
}

{
  uint64_t vars8;

  EshGroup::~EshGroup((EshGroup *)((char *)this - 272));
  JUMPOUT(0x23EC997B0);
}

uint64_t EshGroup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, a1);
}

uint64_t EshGroup::isAtom(EshGroup *this)
{
  return 1;
}

uint64_t EshGroup::getContentProperties(EshGroup *this)
{
  return (uint64_t)this + 288;
}

uint64_t EshGroup::getContentLocks(EshGroup *this)
{
  return (uint64_t)this + 320;
}

uint64_t EshGroup::getContentLocksReference(EshGroup *this)
{
  return (uint64_t)this + 320;
}

uint64_t non-virtual thunk to'EshGroup::getContentProperties(EshGroup *this)
{
  return (uint64_t)this + 16;
}

uint64_t non-virtual thunk to'EshGroup::getContentPropertiesReference(EshGroup *this)
{
  return (uint64_t)this + 16;
}

uint64_t non-virtual thunk to'EshGroup::getContentLocks(EshGroup *this)
{
  return (uint64_t)this + 48;
}

uint64_t non-virtual thunk to'EshGroup::getContentLocksReference(EshGroup *this)
{
  return (uint64_t)this + 48;
}

void EshGroupProperties::~EshGroupProperties(EshGroupProperties *this)
{
}

void EshGroupLocks::~EshGroupLocks(EshGroupLocks *this)
{
}

void EshDiagram::~EshDiagram(EshDiagram *this)
{
}

uint64_t EshObject::getChildIndex(EshObject *this, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = a2;
  while (v6 < (*((unsigned int (**)(EshObject *))this->var0 + 5))(this))
  {
    if ((*((unsigned int (**)(EshObject *, uint64_t))this->var0 + 6))(this, v6) == a3)
    {
      if (a4 == -1) {
        return v6;
      }
      int v8 = (*((uint64_t (**)(EshObject *, uint64_t))this->var0 + 8))(this, v6);
      uint64_t v9 = v8 == a4 ? v6 : (v6 + 1);
      if (v8 == a4) {
        return v6;
      }
      uint64_t v6 = v9;
    }
    else
    {
      uint64_t v6 = (v6 + 1);
    }
  }
  return 0xFFFFFFFFLL;
}

void EshObject::accept()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 7004;
}

void EshObject::~EshObject(EshObject *this)
{
}

uint64_t EshObjectFactory::isClientObject(EshObjectFactory *this)
{
  return ((unsigned __int16)((_WORD)this + 4083) < 9u) & (0x119u >> ((_BYTE)this - 13));
}

void EshObjectFactory::~EshObjectFactory(EshObjectFactory *this)
{
}

uint64_t **EshPath::takeConnectLocs(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x151u, a2);
}

uint64_t **EshPath::takeConnectAngles(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x152u, a2);
}

double EshPath::setLimoX(EshPath *this, unsigned int a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x153u, 2, &v4).n128_u64[0];
  return result;
}

double EshPath::setLimoY(EshPath *this, unsigned int a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x154u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t **EshPath::takeHandles(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(void *)(a1 + 16), 0x155u, a2);
}

uint64_t EshPath::getShadowOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Au);
}

uint64_t EshPatriarch::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 200))(a2, a1);
}

void std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
  }
}

void EshRoot::appendChild(EshRoot *this, EshObject *a2)
{
  if (EshObject::isEscher(a2))
  {
    unint64_t v5 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v5, (uint64_t)v4 + 12);
  }
  else
  {
    unint64_t v5 = (EshHeader *)operator new(0x10uLL);
    unsigned __int16 v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v5, 0, 0, v6, 0, 0);
  }
  unint64_t v7 = *((void *)this + 4);
  int v8 = (EshHeader **)*((void *)this + 3);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *((void *)this + 2);
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v7 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    size_t v18 = (EshHeader **)&v15[v11 & 0x7FFFFFFF8];
    uint64_t v19 = &v15[8 * v17];
    *size_t v18 = v5;
    uint64_t v9 = v18 + 1;
    unint64_t v21 = (char *)*((void *)this + 2);
    uint64_t v20 = (char *)*((void *)this + 3);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = (EshHeader *)*((void *)v20 - 1);
        v20 -= 8;
        *--size_t v18 = v22;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*((void *)this + 2);
    }
    *((void *)this + CsString::CsString((CsString *)this + 2) = v18;
    *((void *)this + 3) = v9;
    *((void *)this + 4) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *int v8 = v5;
    uint64_t v9 = v8 + 1;
  }
  *((void *)this + 3) = v9;
}

void sub_238D7596C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EshRoot::isAtom(EshRoot *this)
{
  return 0;
}

void std::vector<EshHeader *,ChAllocator<EshHeader *>>::__append(void **a1, unsigned int a2)
{
  unsigned __int16 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = (unint64_t)(v5 - (unsigned char *)*a1) >> 3;
    unsigned int v10 = 2 * v9;
    if (2 * (int)v9 <= (v8 >> 3) + a2) {
      unsigned int v10 = (v8 >> 3) + a2;
    }
    if (v9 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v12[v8 & 0x7FFFFFFF8];
    unsigned int v16 = &v12[8 * v14];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    uint64_t v19 = (char *)*a1;
    size_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v15 - CsString::CsString((CsString *)this + 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      size_t v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t EshShadow::getDefaultColor2(EshShadow *this, EshColor *a2)
{
  return EshColor::rgb(203, 203, 203, (uint64_t)this);
}

uint64_t EshShape::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 208))(a2, a1);
}

void EshShape::~EshShape(EshShape *this)
{
  EshContentBase::~EshContentBase((EshContentBase *)this);
  JUMPOUT(0x23EC997B0);
}

uint64_t EshShape::getShapeDefaultsProperties(EshShape *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShape::getShapeDefaultsPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShape::getShapeDefaultsImageData(EshShape *this)
{
  return (uint64_t)this + 480;
}

uint64_t EshShape::getShapeDefaultsImageDataReference(EshShape *this)
{
  return (uint64_t)this + 480;
}

uint64_t EshShape::getContentLocks(EshShape *this)
{
  return (uint64_t)this + 456;
}

uint64_t EshShape::getContentLocksReference(EshShape *this)
{
  return (uint64_t)this + 456;
}

void non-virtual thunk to'EshShape::~EshShape(EshShape *this)
{
}

{
  uint64_t vars8;

  EshContentBase::~EshContentBase((EshContentBase *)((char *)this - 416));
  JUMPOUT(0x23EC997B0);
}

uint64_t non-virtual thunk to'EshShape::getContentProperties(EshShape *this)
{
  return (uint64_t)this + 8;
}

uint64_t non-virtual thunk to'EshShape::getContentPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 8;
}

uint64_t non-virtual thunk to'EshShape::getContentLocks(EshShape *this)
{
  return (uint64_t)this + 40;
}

uint64_t non-virtual thunk to'EshShape::getContentLocksReference(EshShape *this)
{
  return (uint64_t)this + 40;
}

void EshTextBox::~EshTextBox(EshTextBox *this)
{
}

void EshStroke::~EshStroke(EshStroke *this)
{
}

void EshShadow::~EshShadow(EshShadow *this)
{
}

void EshExtrusion::~EshExtrusion(EshExtrusion *this)
{
}

void EshCallout::~EshCallout(EshCallout *this)
{
}

void EshShapeLocks::~EshShapeLocks(EshShapeLocks *this)
{
}

void EshShapeImageData::~EshShapeImageData(EshShapeImageData *this)
{
}

void EshTextPath::~EshTextPath(EshTextPath *this)
{
}

void EshPath::~EshPath(EshPath *this)
{
}

void EshSkew::~EshSkew(EshSkew *this)
{
}

void EshShapeBase::resolveColor(EshShapeBase *this, CsColour *a2, EshColor *a3, const EshColorScheme *a4, EshFill *a5)
{
  unsigned int v10 = (EshFill *)operator new(8uLL);
  LODWORD(v10->var0) = 255;
  if (a5) {
    unint64_t v11 = a5;
  }
  else {
    unint64_t v11 = (EshFill *)((char *)this + 296);
  }
  if (a3->var0.var0 != 33)
  {
    EshContentBase::resolveColor(this, a2, a3, a4);
    goto LABEL_36;
  }
  switch(EshColor::getRed(a3))
  {
    case 0xF0u:
      goto LABEL_11;
    case 0xF1u:
      uint64_t v14 = (EshContentProperties *)EshStroke::isOnSet((EshStroke *)((char *)this + 320));
      if (v14)
      {
        if ((EshStroke::getOn((EshStroke *)((char *)this + 320)) & 1) == 0) {
          goto LABEL_11;
        }
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v14))
      {
LABEL_11:
        if (EshFill::isColorSet(v11))
        {
LABEL_12:
          uint64_t Color = EshFill::getColor(v11);
          goto LABEL_19;
        }
LABEL_32:
        EshFill::getDefaultColor(v10, v15);
        goto LABEL_35;
      }
      if (EshStroke::isColorSet((EshStroke *)((char *)this + 320)))
      {
        uint64_t v21 = EshStroke::getColor((EshStroke *)((char *)this + 320));
        EshColor::operator=((uint64_t)v10, v21);
      }
      else
      {
        EshStroke::getDefaultColor((EshStroke *)v10, v20);
      }
      a5 = 0;
      goto LABEL_35;
    case 0xF2u:
      unsigned int v16 = (EshStroke *)((char *)this + 320);
      if (EshStroke::isColorSet((EshStroke *)((char *)this + 320))) {
        goto LABEL_16;
      }
      goto LABEL_23;
    case 0xF3u:
      if (!EshShadow::isColorSet((EshShapeBase *)((char *)this + 344)))
      {
        EshShadow::getDefaultColor((EshShadow *)v10, v18);
        goto LABEL_35;
      }
      uint64_t Color = EshShadow::getColor((EshShapeBase *)((char *)this + 344));
      goto LABEL_19;
    case 0xF5u:
      if (!EshFill::isColor2Set(v11))
      {
        EshShadow::getDefaultColor2((EshShadow *)v10, v12);
        goto LABEL_35;
      }
      uint64_t Color = EshFill::getColor2(v11);
      goto LABEL_19;
    case 0xF6u:
      if (!EshStroke::isColor2Set((EshStroke *)((char *)this + 320))) {
        goto LABEL_32;
      }
      uint64_t Color = EshStroke::getColor2((EshStroke *)((char *)this + 320));
      goto LABEL_19;
    case 0xF7u:
      uint64_t v19 = (EshContentProperties *)EshFill::isOnSet(v11);
      if (v19)
      {
        if ((EshFill::getOn(v11) & 1) == 0)
        {
LABEL_22:
          unsigned int v16 = (EshStroke *)((char *)this + 320);
          if (!EshStroke::isColorSet((EshStroke *)((char *)this + 320)))
          {
LABEL_23:
            EshStroke::getDefaultColor((EshStroke *)v10, v17);
            goto LABEL_35;
          }
LABEL_16:
          uint64_t Color = EshStroke::getColor(v16);
LABEL_19:
          EshColor::operator=((uint64_t)v10, Color);
LABEL_35:
          (*(void (**)(EshShapeBase *, CsColour *, EshFill *, const EshColorScheme *, EshFill *))(*(void *)this + 152))(this, a2, v10, a4, a5);
          Adjustmentint Type = EshColor::getAdjustmentType(a3);
          unsigned int Green = EshColor::getGreen(a3);
          EshContentBase::adjustColour(a2, AdjustmentType, Green, v24);
LABEL_36:
          JUMPOUT(0x23EC997B0);
        }
      }
      else if (!EshContentProperties::getDefaultAllowOverlap(v19))
      {
        goto LABEL_22;
      }
      if (EshFill::isColorSet(v11)) {
        goto LABEL_12;
      }
      goto LABEL_32;
    default:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1009;
  }
}

void sub_238D75FB4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t EshShapeDefaults::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, a1);
}

uint64_t EshShapeDefaults::getShapeDefaultsProperties(EshShapeDefaults *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShapeDefaults::getShapeDefaultsPropertiesReference(EshShapeDefaults *this)
{
  return (uint64_t)this + 448;
}

uint64_t EshShapeDefaults::getShapeDefaultsImageData(EshShapeDefaults *this)
{
  return (uint64_t)this + 456;
}

uint64_t EshShapeDefaults::getShapeDefaultsImageDataReference(EshShapeDefaults *this)
{
  return (uint64_t)this + 456;
}

void EshShapeDefaultsImageData::~EshShapeDefaultsImageData(EshShapeDefaultsImageData *this)
{
}

uint64_t EshShapeDefaultsPropertiesImpl::reset(EshShapeDefaultsPropertiesImpl *this)
{
  EshOpt::deleteProperty(*((void *)this + 2), 0x304u);
  EshOpt::deleteProperty(*((void *)this + 2), 0x305u);
  EshOpt::deleteProperty(*((void *)this + 2), 0x306u);
  EshOpt::deleteProperty(*((void *)this + 2), 0x39Bu);
  EshOpt::deleteProperty(*((void *)this + 2), 0x39Cu);
  EshOpt::deleteProperty(*((void *)this + 2), 0x39Du);
  uint64_t v2 = *((void *)this + 2);
  return EshOpt::deleteProperty(v2, 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::reset(EshShapeDefaultsPropertiesImpl *this)
{
  return EshShapeDefaultsPropertiesImpl::reset((EshShapeDefaultsPropertiesImpl *)((char *)this - 32));
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWModeSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x304u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWModeSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x304u);
}

{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x304u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWMode(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x304u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWMode(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x304u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 2), 0x304u);
}

double EshShapeDefaultsPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  uint64_t v2 = *(void *)(a1 - 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWPureSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x305u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWPureSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x305u);
}

{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x305u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWPure(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x305u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWPure(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x305u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 2), 0x305u);
}

double EshShapeDefaultsPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  uint64_t v2 = *(void *)(a1 - 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBWNormalSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x306u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBWNormalSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 1), 0x306u);
}

{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x306u);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBWNormal(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this + 2), 0x306u);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBWNormal(EshShapeDefaultsPropertiesImpl *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 1), 0x306u);
}

{
  return *(unsigned int *)EshOpt::getProperty(*((void *)this - 2), 0x306u);
}

double EshShapeDefaultsPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

{
  uint64_t v2;
  double result;
  __n128 v4;

  uint64_t v2 = *(void *)(a1 - 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderTopColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x39Bu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderTopColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x39Bu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderTopColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x39Bu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderTopColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this - 2), 0x39Bu);
}

double EshShapeDefaultsPropertiesImpl::setBorderTopColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this + 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderTopColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this - 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderLeftColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x39Cu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderLeftColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x39Cu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderLeftColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x39Cu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderLeftColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this - 2), 0x39Cu);
}

double EshShapeDefaultsPropertiesImpl::setBorderLeftColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this + 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderLeftColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this - 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderBottomColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x39Du);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderBottomColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x39Du);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderBottomColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x39Du);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderBottomColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this - 2), 0x39Du);
}

double EshShapeDefaultsPropertiesImpl::setBorderBottomColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this + 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderBottomColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this - 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeDefaultsPropertiesImpl::isBorderRightColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::isBorderRightColorSet(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::isPropertySet(*((void *)this - 2), 0x39Eu);
}

uint64_t EshShapeDefaultsPropertiesImpl::getBorderRightColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this + 2), 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeDefaultsPropertiesImpl::getBorderRightColor(EshShapeDefaultsPropertiesImpl *this)
{
  return EshOpt::getColorProperty(*((void *)this - 2), 0x39Eu);
}

double EshShapeDefaultsPropertiesImpl::setBorderRightColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this + 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeDefaultsPropertiesImpl::setBorderRightColor(EshShapeDefaultsPropertiesImpl *this, const EshColor *a2)
{
  uint64_t v2 = *((void *)this - 2);
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

void EshShapeDefaultsPropertiesImpl::~EshShapeDefaultsPropertiesImpl(EshShapeDefaultsPropertiesImpl *this)
{
}

void non-virtual thunk to'EshShapeDefaultsPropertiesImpl::~EshShapeDefaultsPropertiesImpl(EshShapeDefaultsPropertiesImpl *this)
{
}

{
  JUMPOUT(0x23EC997B0);
}

uint64_t EshShapeProperties::reset(EshShapeProperties *this)
{
  EshOpt::deleteProperty((uint64_t)this->var2, 0x304u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x305u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x306u);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Bu);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Cu);
  EshOpt::deleteProperty((uint64_t)this->var2, 0x39Du);
  var2 = this->var2;
  return EshOpt::deleteProperty((uint64_t)var2, 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeProperties::reset(EshShapeProperties *this)
{
  return EshShapeProperties::reset((EshShapeProperties *)((char *)this - 24));
}

uint64_t EshShapeProperties::isBWModeSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x304u);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBWModeSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x304u);
}

uint64_t EshShapeProperties::getBWMode(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x304u);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBWMode(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x304u);
}

double EshShapeProperties::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBWMode(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x304u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBWPureSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x305u);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBWPureSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x305u);
}

uint64_t EshShapeProperties::getBWPure(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x305u);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBWPure(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x305u);
}

double EshShapeProperties::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBWPure(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x305u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBWNormalSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x306u);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBWNormalSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x306u);
}

uint64_t EshShapeProperties::getBWNormal(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x306u);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBWNormal(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this[-1].var3, 0x306u);
}

double EshShapeProperties::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBWNormal(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x306u, 2, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderTopColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Bu);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBorderTopColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Bu);
}

uint64_t EshShapeProperties::getBorderTopColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Bu);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBorderTopColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Bu);
}

double EshShapeProperties::setBorderTopColor(EshShapeProperties *this, const EshColor *a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBorderTopColor(EshShapeProperties *this, const EshColor *a2)
{
  int var3 = this[-1].var3;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var3, 0x39Bu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderLeftColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Cu);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBorderLeftColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Cu);
}

uint64_t EshShapeProperties::getBorderLeftColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Cu);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBorderLeftColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Cu);
}

double EshShapeProperties::setBorderLeftColor(EshShapeProperties *this, const EshColor *a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBorderLeftColor(EshShapeProperties *this, const EshColor *a2)
{
  int var3 = this[-1].var3;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var3, 0x39Cu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderBottomColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Du);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBorderBottomColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Du);
}

uint64_t EshShapeProperties::getBorderBottomColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Du);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBorderBottomColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Du);
}

double EshShapeProperties::setBorderBottomColor(EshShapeProperties *this, const EshColor *a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBorderBottomColor(EshShapeProperties *this, const EshColor *a2)
{
  int var3 = this[-1].var3;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var3, 0x39Du, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::isBorderRightColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeProperties::isBorderRightColorSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this[-1].var3, 0x39Eu);
}

uint64_t EshShapeProperties::getBorderRightColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x39Eu);
}

uint64_t non-virtual thunk to'EshShapeProperties::getBorderRightColor(EshShapeProperties *this)
{
  return EshOpt::getColorProperty((uint64_t)this[-1].var3, 0x39Eu);
}

double EshShapeProperties::setBorderRightColor(EshShapeProperties *this, const EshColor *a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

double non-virtual thunk to'EshShapeProperties::setBorderRightColor(EshShapeProperties *this, const EshColor *a2)
{
  int var3 = this[-1].var3;
  __n128 v4 = (__n128)*a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var3, 0x39Eu, 4, &v4).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::getDefaultCoordRight(EshShapeProperties *this)
{
  return 21600;
}

uint64_t EshShapeProperties::setShapeType(uint64_t a1, __int16 a2)
{
  return EshRecord::setInstance(*(void *)(a1 + 16) + 192, a2);
}

EshShapeProperties *EshShapeProperties::setHasShapeType(EshShapeProperties *this, char a2)
{
  *((unsigned char *)this->var2 + 235) = a2;
  return this;
}

uint64_t EshShapeProperties::isAltSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x381u);
}

uint64_t *EshShapeProperties::getAlt(EshShapeProperties *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x381u);
}

double EshShapeProperties::setHidden(EshShapeProperties *this, unsigned __int8 a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0x3BEu, 1, &v4).n128_u64[0];
  return result;
}

void EshShapeProperties::~EshShapeProperties(EshShapeProperties *this)
{
}

void non-virtual thunk to'EshShapeProperties::~EshShapeProperties(EshShapeProperties *this)
{
}

uint64_t EshStroke::isBlipId(EshStroke *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1C5u);
}

uint64_t *EshStroke::getBlipRecordReference(EshStroke *this)
{
  return EshOpt::getProperty((uint64_t)this->var2, 0x1C5u)[1];
}

uint64_t *EshStroke::getBlipName(EshStroke *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x1C6u);
}

double EshStroke::setPredefDashStyle(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x1CEu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setWrapStyle(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x85u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setAnchor(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x87u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFlow(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x88u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setRotate(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x89u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setDirection(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty(v2, 0x8Bu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setColumnCount(EshTextBox *this, unsigned int a2)
{
  uint64_t v2 = (char *)this->var2 + 128;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)v2, 0x8Cu, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setColumnMargin(EshTextBox *this, unsigned int a2)
{
  uint64_t v2 = (char *)this->var2 + 128;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)v2, 0x8Du, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setAutoInset(EshTextBox *this, unsigned __int8 a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0xBCu, 1, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFitShapeToText(EshTextBox *this, unsigned __int8 a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0xBEu, 1, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setFitTextToShape(EshTextBox *this, unsigned __int8 a2)
{
  var2 = this->var2;
  __n128 v4 = (__n128)a2;
  *(void *)&double result = EshOpt::setProperty((uint64_t)var2, 0xBFu, 1, &v4).n128_u64[0];
  return result;
}

uint64_t EshTextPath::isUnderlineSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xFCu);
}

uint64_t EshTextPath::isStrikethroughSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((void *)this + 2), 0xFFu);
}

uint64_t EshTextPath::getUnderline(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xFCu);
}

uint64_t EshTextPath::getStrikethrough(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((void *)this + 2), 0xFFu);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshAtom *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  (*(void (**)(void, void, void))(**((void **)this + 3) + 16))(*((void *)this + 3), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshAlignRule *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 8) = v6 & 0xF;
  *((_DWORD *)a2 + 9) = v6 >> 4;
  *((unsigned char *)a2 + 40) = (v6 & 0x200) != 0;
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  int v9 = *((_DWORD *)a2 + 3);
  int v8 = *((_DWORD *)a2 + 4);
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (v7 >> 30
    || ((unsigned int v11 = v8 + v9 + 8, v13 = v11 >= v10, v12 = v11 - v10, v13) ? (v13 = v12 >= 4 * v7) : (v13 = 0), !v13))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  for (; v7; --v7)
  {
    int v14 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    EshAlignRule::addShapeId(a2, v14);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshAlignRule::addShapeId(EshAlignRule *this, int a2)
{
  uint64_t v4 = (char *)this + 64;
  unint64_t v5 = *((void *)this + 8);
  __int16 v6 = (char *)*((void *)this + 7);
  if ((unint64_t)v6 >= v5)
  {
    int v8 = (char *)*((void *)this + 6);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 2;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      int v8 = (char *)*((void *)this + 6);
      __int16 v6 = (char *)*((void *)this + 7);
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v9 & 0x3FFFFFFFCLL];
    size_t v18 = &v14[4 * v16];
    *(_DWORD *)uint64_t v17 = a2;
    unsigned int v7 = v17 + 4;
    while (v6 != v8)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - CsString::CsString((CsString *)this + 1) = v19;
      v17 -= 4;
    }
    *((void *)this + 6) = v17;
    *((void *)this + 7) = v7;
    *((void *)this + 8) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)__int16 v6 = a2;
    unsigned int v7 = v6 + 4;
  }
  *((void *)this + 7) = v7;
}

uint64_t EshColorMRU::addColor(EshColorMRU *this, const EshColor *a2)
{
  unint64_t v3 = *((void *)this + 5);
  if (v3 >= *((void *)this + 6))
  {
    uint64_t result = std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>((uint64_t)this + 32, a2);
  }
  else
  {
    EshColor::EshColor(*((EshColor **)this + 5), a2);
    uint64_t result = v3 + 8;
    *((void *)this + 5) = v3 + 8;
  }
  *((void *)this + 5) = result;
  return result;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshDeletedPspl *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 7) = v6 & 0x3FFFFFFF;
  *((unsigned char *)a2 + 3CsString::CsString((CsString *)this + 2) = (v6 & 0x40000000) != 0;
  *((unsigned char *)a2 + 33) = v6 < 0;
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshDgg::addIdCluster(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[8];
  uint64_t v4 = (uint64_t)(a1 + 8);
  unint64_t v5 = v6;
  unsigned int v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[6];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    size_t v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int v8 = v17 + 8;
    uint64_t v20 = (char *)a1[6];
    int v19 = (char *)a1[7];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - CsString::CsString((CsString *)this + 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)a1[6];
    }
    a1[6] = v17;
    a1[7] = v8;
    a1[8] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    int v8 = v7 + 1;
  }
  a1[7] = v8;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshRegroupItems *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  int Instance = EshRecord::getInstance(a2);
  unsigned int v7 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (v7 < v8 || v7 - v8 < 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  if (Instance)
  {
    int v9 = 0;
    do
    {
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 3) + 80))(*((void *)this + 3));
      EshRegroupItems::addItem(a2, v10, v11);
      ++v9;
    }
    while ((unsigned __int16)v9 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshRegroupItems::addItem(EshRegroupItems *this, int a2, int a3)
{
  unint64_t v8 = *((void *)this + 6);
  unint64_t v6 = (char *)this + 48;
  unint64_t v7 = v8;
  int v9 = (int *)*((void *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *((void *)this + 4);
    unint64_t v12 = (unint64_t)v9 - v11;
    unint64_t v13 = (v7 - v11) >> 2;
    unsigned int v14 = 2 * v13;
    if (2 * (int)v13 <= (v12 >> 2) + 1) {
      unsigned int v14 = (v12 >> 2) + 1;
    }
    if (v13 >= 0x7FFFFFFF) {
      unint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v6, v15);
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v18 = 0;
    }
    int v19 = (int *)&v16[v12 & 0x3FFFFFFFCLL];
    uint64_t v20 = &v16[4 * v18];
    *int v19 = a2 | (a3 << 16);
    int v10 = v19 + 1;
    uint64_t v22 = (char *)*((void *)this + 4);
    uint64_t v21 = (char *)*((void *)this + 5);
    if (v21 != v22)
    {
      do
      {
        int v23 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *--int v19 = v23;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v19;
    *((void *)this + 5) = v10;
    *((void *)this + 6) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    int *v9 = a2 | (a3 << 16);
    int v10 = v9 + 1;
  }
  *((void *)this + 5) = v10;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshSelection *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
  int v8 = *((_DWORD *)a2 + 3);
  int v7 = *((_DWORD *)a2 + 4);
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if (v6 >> 30 || ((unsigned int v10 = v7 + v8 + 8, v12 = v10 >= v9, v11 = v10 - v9, v12) ? (v12 = v11 >= 4 * v6) : (v12 = 0), !v12))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  for (; v6; --v6)
  {
    int v13 = (*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    EshSelection::addShapeId(a2, v13);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void EshSelection::addShapeId(EshSelection *this, int a2)
{
  uint64_t v4 = (char *)this + 56;
  unint64_t v5 = *((void *)this + 7);
  unsigned int v6 = (char *)*((void *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    int v8 = (char *)*((void *)this + 5);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 2;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      int v8 = (char *)*((void *)this + 5);
      unsigned int v6 = (char *)*((void *)this + 6);
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v9 & 0x3FFFFFFFCLL];
    uint64_t v18 = &v14[4 * v16];
    *(_DWORD *)unsigned int v17 = a2;
    int v7 = v17 + 4;
    while (v6 != v8)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - CsString::CsString((CsString *)this + 1) = v19;
      v17 -= 4;
    }
    *((void *)this + 5) = v17;
    *((void *)this + 6) = v7;
    *((void *)this + 7) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v6 = a2;
    int v7 = v6 + 4;
  }
  *((void *)this + 6) = v7;
}

uint64_t EshSplitMenuColors::addColor(EshSplitMenuColors *this, const EshColor *a2)
{
  unint64_t v3 = *((void *)this + 5);
  if (v3 >= *((void *)this + 6))
  {
    uint64_t result = std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>((uint64_t)this + 32, a2);
  }
  else
  {
    EshColor::EshColor(*((EshColor **)this + 5), a2);
    uint64_t result = v3 + 8;
    *((void *)this + 5) = v3 + 8;
  }
  *((void *)this + 5) = result;
  return result;
}

void sub_238D77BF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshRawAtom *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, (Offset + 8), 0);
  unsigned int DataLength = EshRecord::getDataLength(a2);
  EshParserVisitor::readData(this, (OcBinaryData *)((char *)a2 + 32), DataLength);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::readData(EshParserVisitor *this, OcBinaryData *a2, unsigned int a3)
{
  unsigned int v8 = a3;
  OcBinaryData::allocBuffer(a2, a3);
  OcBinaryData::setMinimumCapacity(a2, a3);
  a2->int var3 = a3;
  uint64_t result = (*(uint64_t (**)(void, char *, unsigned int *))(**((void **)this + 3) + 56))(*((void *)this + 3), a2->var5, &v8);
  if (v8 != a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  return result;
}

uint64_t std::vector<EshColor,ChAllocator<EshColor>>::__push_back_slow_path<EshColor const&>(uint64_t a1, const EshColor *a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v7 = (unint64_t)(v5 - *(void *)a1) >> 3;
  if (2 * (int)v7 <= (v6 >> 3) + 1) {
    unsigned int v8 = (v6 >> 3) + 1;
  }
  else {
    unsigned int v8 = 2 * v7;
  }
  if (v7 >= 0x7FFFFFFF) {
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v19 = v4;
  if (v9)
  {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v9);
    uint64_t v12 = v11;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  __p = v10;
  uint64_t v16 = (EshColor *)&v10[v6 & 0x7FFFFFFF8];
  uint64_t v18 = &v10[8 * v12];
  EshColor::EshColor(v16, a2);
  unsigned int v17 = v16 + 1;
  std::vector<EshColor,ChAllocator<EshColor>>::__swap_out_circular_buffer((EshColor **)a1, &__p);
  uint64_t v13 = *(void *)(a1 + 8);
  if (v17 != v16) {
    unsigned int v17 = (EshColor *)((char *)v17 + (((char *)v16 - (char *)v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_238D77E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

EshColor *std::vector<EshColor,ChAllocator<EshColor>>::__swap_out_circular_buffer(EshColor **a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = (EshColor *)a2[1];
  while (v4 != v5)
    uint64_t result = EshColor::EshColor(result - 1, --v4);
  a2[1] = result;
  unint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  unsigned int v8 = a1[1];
  a1[1] = (EshColor *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (EshColor *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t EshPropValParserVisitor::parseTableHeader(EshPropValParserVisitor *this, EshTablePropValHeader *a2)
{
  *(_WORD *)a2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  *((_WORD *)a2 + CsString::CsString((CsString *)this + 1) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  *((_WORD *)a2 + CsString::CsString((CsString *)this + 2) = result;
  return result;
}

uint64_t EshPropValParserVisitor::visit()
{
  return 1;
}

uint64_t EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshAsciiPropVal *a2)
{
  EshDataTablePropVal<unsigned char>::resize((uint64_t)a2, *((_DWORD *)this + 4));
  int v6 = *((_DWORD *)this + 4);
  (*(void (**)(void, void, int *))(**((void **)this + 1) + 56))(*((void *)this + 1), *((void *)a2 + 1), &v6);
  if (v6 != *((_DWORD *)this + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 7005;
  }
  return 1;
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
  }
}

void std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::__append(void **a1, unsigned int a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(_DWORD **)(v4 - 8);
  if (((unint64_t)(v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      unsigned int v15 = &v7[2 * a2];
      do
      {
        *(unsigned char *)unint64_t v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      unint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unsigned int v9 = (v8 >> 3) + a2;
    unint64_t v10 = (unint64_t)(v5 - (unsigned char *)*a1) >> 3;
    if (2 * (int)v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v16 = &v12[v8 & 0x7FFFFFFF8];
    unsigned int v17 = &v16[8 * a2];
    uint64_t v18 = v16;
    do
    {
      *uint64_t v18 = 0;
      *((_DWORD *)v18 + CsString::CsString((CsString *)this + 1) = 0;
      v18 += 8;
    }
    while (v18 != v17);
    uint64_t v19 = &v12[8 * v14];
    uint64_t v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v16 - CsString::CsString((CsString *)this + 1) = v22;
        v16 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)(a1[1] - *a1) >> 5;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 32 * a2;
  }
}

void std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          uint64_t v17 = v7 + i;
          *(unsigned char *)uint64_t v17 = 0;
          *(_DWORD *)(v17 + 4) = 0;
        }
        v7 += 32;
      }
      while (v7 != v15);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = v7 - *a1;
    unsigned int v9 = (v8 >> 5) + a2;
    unint64_t v10 = (unint64_t)(v5 - *a1) >> 5;
    if (2 * (int)v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v26 = v4;
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v18 = &v12[v8 & 0x1FFFFFFFE0];
    __p = v12;
    int v23 = v18;
    int v25 = &v12[32 * v14];
    uint64_t v19 = &v18[32 * a2];
    do
    {
      for (uint64_t j = 0; j != 32; j += 8)
      {
        uint64_t v21 = &v18[j];
        char *v21 = 0;
        *((_DWORD *)v21 + CsString::CsString((CsString *)this + 1) = 0;
      }
      v18 += 32;
    }
    while (v18 != v19);
    double v24 = v19;
    std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__swap_out_circular_buffer(a1, &__p);
    if (v24 != v23) {
      v24 += (v23 - v24 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D7839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)(a1[1] - *a1) >> 4;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

void std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (((unint64_t)(v6 - (void)v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v7[2 * a2];
      do
      {
        for (uint64_t i = 0; i != 2; ++i)
        {
          uint64_t v17 = &v7[i];
          *(unsigned char *)uint64_t v17 = 0;
          *((_DWORD *)v17 + CsString::CsString((CsString *)this + 1) = 0;
        }
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v15);
      uint64_t v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = (unint64_t)v7 - *a1;
    unsigned int v9 = (v8 >> 4) + a2;
    unint64_t v10 = (unint64_t)(v5 - *a1) >> 4;
    if (2 * (int)v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v26 = v4;
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v18 = &v12[v8 & 0xFFFFFFFF0];
    __p = v12;
    int v23 = v18;
    int v25 = &v12[16 * v14];
    uint64_t v19 = &v18[16 * a2];
    do
    {
      for (uint64_t j = 0; j != 16; j += 8)
      {
        uint64_t v21 = &v18[j];
        char *v21 = 0;
        *((_DWORD *)v21 + CsString::CsString((CsString *)this + 1) = 0;
      }
      *(void *)uint64_t v18 = 0;
      *((void *)v18 + CsString::CsString((CsString *)this + 1) = 0;
      v18 += 16;
    }
    while (v18 != v19);
    double v24 = v19;
    std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::__swap_out_circular_buffer(a1, &__p);
    if (v24 != v23) {
      v24 += (v23 - v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D78550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = -1227133513 * ((unint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshFormula,ChAllocator<EshFormula>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 28 * a2;
  }
}

void std::vector<EshFormula,ChAllocator<EshFormula>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if (-1227133513 * ((unint64_t)(v6 - (void)v7) >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v7[7 * a2];
      do
      {
        uint64_t v16 = v7;
        *uint64_t v7 = 0;
        v7 += 7;
        uint64_t v17 = 1;
        do
        {
          uint64_t v18 = &v16[v17];
          *uint64_t v18 = 0;
          *((_WORD *)v18 + CsString::CsString((CsString *)this + 2) = 0;
          v17 += 2;
        }
        while (v18 + 2 != v7);
      }
      while (v7 != v15);
      uint64_t v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 2);
    unsigned int v9 = v8 + a2;
    if (v8 + a2 > 0x24924924) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -1227133513 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x12492492) {
      unint64_t v11 = 613566756;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v28 = v4;
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshFormula>>(v4, v11);
      int v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      int v14 = 0;
    }
    uint64_t v19 = &v12[28 * v8];
    __p = v12;
    int v25 = v19;
    uint64_t v27 = &v12[28 * v14];
    uint64_t v20 = &v19[28 * a2];
    do
    {
      uint64_t v21 = v19;
      *(_DWORD *)uint64_t v19 = 0;
      v19 += 28;
      uint64_t v22 = 4;
      do
      {
        int v23 = &v21[v22];
        *(_DWORD *)int v23 = 0;
        *((_WORD *)v23 + CsString::CsString((CsString *)this + 2) = 0;
        v22 += 8;
      }
      while (v23 + 8 != v19);
    }
    while (v19 != v20);
    uint64_t v26 = v20;
    std::vector<EshFormula,ChAllocator<EshFormula>>::__swap_out_circular_buffer(a1, &__p);
    if (v26 != v25) {
      uint64_t v26 = &v25[(v26 - v25 - 28) % 0x1CuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D78794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = -252645135 * ((unint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshHandle,ChAllocator<EshHandle>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 68 * a2;
  }
}

void std::vector<EshHandle,ChAllocator<EshHandle>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (-252645135 * ((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v15 = 68 * ((68 * (unint64_t)a2 - 68) / 0x44) + 68;
      bzero(*(void **)(v4 - 8), v15);
      v7 += v15;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 2);
    unsigned int v9 = v8 + a2;
    if (v8 + a2 > 0xC3C3C3C3) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -252645135 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x61E1E1E1) {
      unint64_t v11 = 3284386755;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshHandle>>(v4, v11);
      int v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      int v14 = 0;
    }
    __p = v12;
    uint64_t v18 = &v12[68 * v8];
    uint64_t v20 = &v12[68 * v14];
    size_t v16 = 68 * ((68 * (unint64_t)a2 - 68) / 0x44) + 68;
    bzero(v18, v16);
    uint64_t v19 = &v18[v16];
    std::vector<EshHandle,ChAllocator<EshHandle>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18) {
      uint64_t v19 = &v18[(v19 - v18 - 68) % 0x44uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D789D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::resize(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__append(uint64_t *a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (-1431655765 * ((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v15 = 12 * ((12 * (unint64_t)a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v15);
      v7 += v15;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unsigned int v9 = v8 + a2;
    if (v8 + a2 > 0x55555555) {
      std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = -1431655765 * ((unint64_t)(v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAA) {
      unint64_t v11 = 1431655765;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshGradientStop>>(v4, v11);
      int v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      int v14 = 0;
    }
    __p = v12;
    uint64_t v18 = &v12[12 * v8];
    uint64_t v20 = &v12[12 * v14];
    size_t v16 = 12 * ((12 * (unint64_t)a2 - 12) / 0xC) + 12;
    bzero(v18, v16);
    uint64_t v19 = &v18[v16];
    std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18) {
      uint64_t v19 = &v18[(v19 - v18 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_238D78C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int,ChAllocator<int>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int,ChAllocator<int>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
  }
}

void std::vector<int,ChAllocator<int>>::__append(char **a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = v7 - *a1;
    unsigned int v10 = (v9 >> 2) + a2;
    unint64_t v11 = (unint64_t)(v5 - *a1) >> 2;
    if (2 * (int)v11 > v10) {
      unsigned int v10 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v12);
      uint64_t v15 = v14;
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v13 = 0;
      uint64_t v15 = 0;
    }
    size_t v16 = &v13[v9 & 0x3FFFFFFFCLL];
    uint64_t v17 = &v13[4 * v15];
    bzero(v16, 4 * a2);
    uint64_t v18 = &v16[4 * a2];
    while (v7 != v8)
    {
      int v19 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - CsString::CsString((CsString *)this + 1) = v19;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v17;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<float,ChAllocator<float>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<float,ChAllocator<float>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
  }
}

void std::vector<float,ChAllocator<float>>::__append(char **a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = v7 - *a1;
    unsigned int v10 = (v9 >> 2) + a2;
    unint64_t v11 = (unint64_t)(v5 - *a1) >> 2;
    if (2 * (int)v11 > v10) {
      unsigned int v10 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v12);
      uint64_t v15 = v14;
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v13 = 0;
      uint64_t v15 = 0;
    }
    size_t v16 = &v13[v9 & 0x3FFFFFFFCLL];
    uint64_t v17 = &v13[4 * v15];
    bzero(v16, 4 * a2);
    uint64_t v18 = &v16[4 * a2];
    while (v7 != v8)
    {
      int v19 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - CsString::CsString((CsString *)this + 1) = v19;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v17;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

BOOL EshBinaryReader::isStarted(EshBinaryReader *this)
{
  return *((void *)this + 1) != 0;
}

void EshBinaryReader::mark(EshBinaryReader *this, EshMark *a2)
{
  ChStack<EshHeader>::operator=((uint64_t)a2, (uint64_t)this + 40);
  *((_DWORD *)a2 + 8) = *((_DWORD *)this + 18);
}

void EshBinaryReader::seek(EshBinaryReader *this, const EshMark *a2)
{
  ChStack<EshHeader>::operator=((uint64_t)this + 40, (uint64_t)a2);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 8);
}

void ChStack<EshHeader>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > *(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 20) = v4;
    uint64_t v5 = 16 * v4;
    uint64_t v6 = operator new[](16 * v4 + 16);
    unint64_t v7 = 0;
    *uint64_t v6 = 16;
    v6[1] = v4;
    unint64_t v8 = v6 + 2;
    do
    {
      EshHeader::makeDefault((EshHeader *)&v6[v7 / 8 + 2]);
      v7 += 16;
    }
    while (v5 != v7);
    *(void *)(a1 + 8) = v8;
    if (*(void *)a1)
    {
      MEMORY[0x23EC99790](*(void *)a1 - 16, 0x1000C808B6DE1C6);
      unint64_t v8 = *(void **)(a1 + 8);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = 0;
  }
  LODWORD(v9) = *(_DWORD *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      EshHeader::operator=(*(void *)a1 + v10, *(void *)a2 + v10);
      ++v11;
      unint64_t v9 = *(unsigned int *)(a2 + 16);
      v10 += 16;
    }
    while (v11 < v9);
  }
  *(_DWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
}

void sub_238D79064(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t EshBinaryReader::seek(EshBinaryReader *this, const EshContainer *a2, uint64_t a3)
{
  if (*(_DWORD *)(ChStack<EshHeader>::top((uint64_t)this + 40) + 4) != *((_DWORD *)a2 + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t result = (*(uint64_t (**)(const EshContainer *, uint64_t))(*(void *)a2 + 104))(a2, a3);
  *((_DWORD *)this + 18) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t EshBinaryReader::seek(EshBinaryReader *this, const EshRoot *a2, uint64_t a3)
{
  if (*((_DWORD *)this + 14)) {
    *((_DWORD *)this + 14) = 0;
  }
  uint64_t result = (*(uint64_t (**)(const EshRoot *, uint64_t))(*(void *)a2 + 112))(a2, a3);
  *((_DWORD *)this + 18) = *(_DWORD *)(result + 4);
  return result;
}

uint64_t EshBinaryReader::seekToEnd(EshBinaryReader *this, const EshRoot *a2)
{
  if (*((_DWORD *)this + 14)) {
    *((_DWORD *)this + 14) = 0;
  }
  *((_DWORD *)this + 18) = *((_DWORD *)this + 9);
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void EshMark::EshMark(EshMark *this)
{
  *(void *)this = 0;
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  *((_DWORD *)this + 6) = 10;
}

void sub_238D793B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D79480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OCDLanguageFromOfficeOrTangierString(NSString *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  if (v1)
  {
    uint64_t v2 = [MEMORY[0x263EFF9D0] null];
    if ([(NSString *)v1 isEqual:v2])
    {
    }
    else
    {
      unint64_t v3 = [(NSString *)v1 length];

      if (v3 >= 2)
      {
        if (!OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage)
        {
          OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage = (uint64_t)&unk_26EC80A38;
        }
        unsigned int v4 = [(NSString *)v1 characterAtIndex:0];
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v5 = (id)OCDLanguageFromOfficeOrTangierString(NSString *)::languageStringToWDLanguage;
        uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v6)
        {
          uint64_t v7 = *(void *)v18;
LABEL_9:
          uint64_t v8 = 0;
          while (1)
          {
            if (*(void *)v18 != v7) {
              objc_enumerationMutation(v5);
            }
            unint64_t v9 = *(void **)(*((void *)&v17 + 1) + 8 * v8);
            uint64_t v10 = objc_msgSend(v9, "objectAtIndexedSubscript:", 0, (void)v17);
            unsigned int v11 = [v10 characterAtIndex:0];

            if (v4 < v11) {
              break;
            }
            if (v4 == v11)
            {
              unint64_t v12 = [v9 objectAtIndexedSubscript:0];
              BOOL v13 = [(NSString *)v1 tc_startsWithString:v12];

              if (v13)
              {
                size_t v16 = [v9 objectAtIndexedSubscript:1];
                uint64_t v14 = [v16 intValue];

                goto LABEL_19;
              }
            }
            if (v6 == ++v8)
            {
              uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
              if (v6) {
                goto LABEL_9;
              }
              break;
            }
          }
        }
      }
    }
  }
  uint64_t v14 = 0xFFFFLL;
LABEL_19:

  return v14;
}

void sub_238D796BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *OCDOfficeStringFromLanguage(int a1)
{
  if (a1 > 2051)
  {
    if (a1 > 3080)
    {
      if (a1 > 4104)
      {
        if (a1 == 4105) {
          return @"en-CA";
        }
        if (a1 == 5124) {
          return @"zh-MO";
        }
      }
      else
      {
        if (a1 == 3081) {
          return @"en-AU";
        }
        if (a1 == 4100) {
          return @"zh-SG";
        }
      }
    }
    else if (a1 > 2069)
    {
      if (a1 == 2070) {
        return @"pt-PT";
      }
      if (a1 == 3076) {
        return @"zh-HK";
      }
    }
    else
    {
      if (a1 == 2052) {
        return @"zh-CN";
      }
      if (a1 == 2057) {
        return @"en-GB";
      }
    }
    return &stru_26EBF24D8;
  }
  else
  {
    int v1 = a1 - 1025;
    uint64_t result = @"ar-SA";
    switch(v1)
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 4:
      case 7:
      case 10:
      case 13:
      case 14:
      case 19:
      case 20:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
        return &stru_26EBF24D8;
      case 3:
        goto LABEL_20;
      case 5:
        return @"da-DK";
      case 6:
        return @"de-DE";
      case 8:
        return @"en-US";
      case 9:
        return @"es-ES_tradnl";
      case 11:
        return @"fr-FR";
      case 12:
        return @"he-IL";
      case 15:
        return @"it-IT";
      case 16:
        return @"ja-JP";
      case 17:
        return @"ko-KR";
      case 18:
        return @"nl-NL";
      case 21:
        return @"pt-BR";
      case 24:
        return @"ru-RU";
      case 28:
        return @"sv-SE";
      default:
        if (@"ar-SA" != 4) {
          return &stru_26EBF24D8;
        }
LABEL_20:
        uint64_t result = @"zh-TW";
        break;
    }
  }
  return result;
}

unint64_t OCNsStringEncodingForWindowsCharSet(int a1)
{
  if (a1 <= 253)
  {
    if (a1 != 1)
    {
      if (a1 == 2) {
        return 6;
      }
      goto LABEL_8;
    }
    return 12;
  }
  if (a1 == 254) {
    return CFStringConvertWindowsCodepageToEncoding(0x410u);
  }
  if (a1 == 255) {
    return 12;
  }
LABEL_8:
  UInt32 v2 = ChMapCharsetToCharacterEncoding(a1);
  return OCNsEncodingForOcEncoding(v2);
}

void sub_238D79A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7A4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7A898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7A9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7AAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7AC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7AEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7AFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7B08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7B14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7B420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7B4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7B598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t parsePoint(uint64_t result, int a2, int *a3, int *a4, int a5)
{
  if (!a5) {
    return parsePoint32(result, a2, a3, a4);
  }
  uint64_t v5 = 4 * a2;
  int v6 = *(unsigned __int8 *)(result + v5);
  uint64_t v7 = (unsigned __int8 *)(result + (int)v5);
  *a3 = (__int16)(v7[1] << 8) | v6;
  *a4 = (__int16)(v7[3] << 8) | v7[2];
  return result;
}

void sub_238D7C764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7C94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7CB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7CDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7D7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7DBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,void *a37)
{
  CGRect v39 = *(void **)(v38 - 160);

  _Unwind_Resume(a1);
}

void sub_238D7DCCC()
{
}

void sub_238D7DCD4()
{
}

void sub_238D7DCDC()
{
}

void sub_238D7DCE4()
{
}

void sub_238D7DCEC()
{
}

void sub_238D7DCF4()
{
}

void sub_238D7DCFC()
{
}

void sub_238D7DD04()
{
}

void sub_238D7DD0C()
{
}

void sub_238D7DD14()
{
}

void sub_238D7DD1C()
{
}

void sub_238D7DD24()
{
}

void sub_238D7DD2C()
{
}

void sub_238D7DD34()
{
}

void sub_238D7DD3C()
{
}

void sub_238D7DD44()
{
}

void sub_238D7DD4C()
{
}

void sub_238D7DD54()
{
  *(void *)(v2 - 168) = v0;

  JUMPOUT(0x238D7DCBCLL);
}

void sub_238D7DD64()
{
}

void sub_238D7DF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double readPoint(const unsigned __int8 *a1, __int16 a2)
{
  if ((a2 & 0x4000) != 0) {
    return (double)*(__int16 *)a1;
  }
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:0];
  double v4 = v3;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:4];
  return v4;
}

void sub_238D7E470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double readAffineTransform@<D0>(const unsigned __int8 *a1@<X0>, double *a2@<X8>)
{
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:0];
  double v5 = v4;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:4];
  double v7 = v6;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:8];
  double v9 = v8;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:12];
  double v11 = v10;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:16];
  double v13 = v12;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:20];
  double result = v14;
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v11;
  a2[4] = v13;
  a2[5] = result;
  return result;
}

void sub_238D7EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

double readFloat32Rect(const unsigned __int8 *a1)
{
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:0];
  double v3 = v2;
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:4];
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:8];
  +[MFByteUtils readFloat32FromByteArray:a1 in_offset:12];
  return v3;
}

void sub_238D7ED20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7F8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double readRect(const unsigned __int8 *a1, __int16 a2)
{
  if ((a2 & 0x4000) != 0) {
    return (double)*(__int16 *)a1;
  }
  else {
    return readFloat32Rect(a1);
  }
}

void sub_238D7FD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D7FF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D80098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D80198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8029C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D803C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D804EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D806B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D80924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D80BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D80E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D80F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8102C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D81110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D81364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D81460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D824CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  CGFloat v31 = *(void **)(v29 - 184);
  if (v31)
  {
    *(void *)(v29 - 176) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

void EMFPlusDrawStringLine::addWord(EMFPlusDrawStringLine *this, float a2, float a3, const unsigned __int16 *a4)
{
}

void sub_238D82768(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1010C40ABD0C285);
  _Unwind_Resume(a1);
}

uint64_t *destroyPointerVectorElements<EMFPlusDrawStringLine>(uint64_t *result)
{
  uint64_t v1 = *result;
  if (result[1] != *result)
  {
    float v2 = result;
    unint64_t v3 = 0;
    do
    {
      double result = *(uint64_t **)(v1 + 8 * v3);
      if (result)
      {
        EMFPlusDrawStringLine::~EMFPlusDrawStringLine((EMFPlusDrawStringLine *)result);
        double result = (uint64_t *)MEMORY[0x23EC997B0]();
        uint64_t v1 = *v2;
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = *v2;
    }
    while (v3 < (v2[1] - *v2) >> 3);
  }
  return result;
}

void sub_238D82CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  long long v20 = *(void **)(v18 + 56);
  if (v20)
  {
    *(void *)(v18 + 64) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_238D82F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D82F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8302C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D830F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D831C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D83280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8331C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D833B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D83424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D834CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D83A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_238D84304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D84E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11)
{
  for (uint64_t i = 936; i != -8; i -= 16)
  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    double result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_238D84F6C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EMFPlusDrawStringLine::~EMFPlusDrawStringLine(EMFPlusDrawStringLine *this)
{
  destroyPointerVectorElements<EMFPlusDrawStringWord>((uint64_t *)this);
  float v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + CsString::CsString((CsString *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t *destroyPointerVectorElements<EMFPlusDrawStringWord>(uint64_t *result)
{
  uint64_t v1 = *result;
  if (result[1] != *result)
  {
    float v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3);
      if (v4)
      {
        double v5 = *(void **)(v4 + 8);
        if (v5)
        {
          *(void *)(v4 + 16) = v5;
          operator delete(v5);
        }
        double result = (uint64_t *)MEMORY[0x23EC997B0](v4, 0x1010C40ABD0C285);
        uint64_t v1 = *v2;
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = *v2;
    }
    while (v3 < (v2[1] - *v2) >> 3);
  }
  return result;
}

void *std::vector<CGPoint>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_238D850A0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGRect>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGRect>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_238D85118(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGRect>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_238D852D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D855F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D85768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D857DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D858E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D859EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D85D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MFWriteUInt16ToByteArray(uint64_t result, __int16 a2, unsigned int a3)
{
  *(_WORD *)(result + a3) = a2;
  return result;
}

void sub_238D85F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D85FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  double v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238D86084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D862EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D8648C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D865E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D866CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D867F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D868BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D869B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D86BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238D86E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D86F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D86FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D870E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D87218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D872F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D87658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8784C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8794C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D879D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D87B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D87CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D87D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D87EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D882C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D884F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8858C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8862C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D886A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D887FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D888C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8898C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D889F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D88FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D891A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D893AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D895A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89890(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238D89870);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238D899B4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238D89990);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238D89B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D89F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D89FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8A160(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_238D8A5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8A740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MFPGradientBrush;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D8A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8AAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8ACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8ADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void evaluateGradient(void *a1, double *a2, double *a3)
{
  double v4 = *a2;
  *(float *)&double v4 = *a2;
  id v9 = [a1 colorAtPosition:v4];
  [v9 redComponent];
  *(void *)a3 = v5;
  [v9 greenComponent];
  *((void *)a3 + CsString::CsString((CsString *)this + 1) = v6;
  [v9 blueComponent];
  *((void *)a3 + CsString::CsString((CsString *)this + 2) = v7;
  [v9 alphaComponent];
  *((void *)a3 + 3) = v8;
}

void sub_238D8AF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8AFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8BAB4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x20C40960023A9);

  _Unwind_Resume(a1);
}

void *std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<CGRect>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_238D8BC4C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_238D8BCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8BE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8C0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8C93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8CA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8D4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_238D8D6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8D80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8D92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DD6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8DF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8E938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8EB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8EEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8F15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8F1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8F280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8F334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *OCXFirstChildNamed(_xmlNode *a1, xmlChar *a2)
{
  uint64_t v2 = CXFirstChildNamed(a1, a2);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v2);
  return v2;
}

uint64_t pOCXReplaceAlternateContentChildrenOfNode(uint64_t result)
{
  long long v20 = (_xmlNode *)result;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
    {
      long long v19 = **(void ***)(result + 64);
      uint64_t v1 = (_xmlNode *)CXFindChild((_xmlNode *)result, (CXNamespace *)OCXMarkupCompatibilityNamespace, "AlternateContent");
      double result = pOCXReplaceAlternateContentChildrenOfNode(v1);
      if (v1)
      {
        uint64_t v2 = (void (**)(xmlChar *))MEMORY[0x263F8C880];
        for (uint64_t i = TSUZipWriterEntry.superclass; ; uint64_t i = (__objc2_class **)(TSUZipWriterEntry
                                                                                     + 8))
        {
          double v4 = CXFirstChild(v1);
          pOCXReplaceAlternateContentChildrenOfNode(v4);
          if (v4) {
            break;
          }
          uint64_t v6 = 0;
          uint64_t v5 = 0;
LABEL_23:
          if (v6) {
            float v10 = v6;
          }
          else {
            float v10 = v5;
          }
          if (v10)
          {
            double v11 = CXFirstChild(v10);
            pOCXReplaceAlternateContentChildrenOfNode(v11);
            if (v11)
            {
              float v12 = xmlCopyNode(v11, 1);
              if (v12)
              {
                uint64_t v13 = 0;
                float v14 = 0;
                while (1)
                {
                  uint64_t v15 = v13;
                  size_t v16 = v12;
                  if (!xmlAddPrevSibling(v1, v12)) {
                    break;
                  }
                  double v11 = CXNextSibling(v11);
                  pOCXReplaceAlternateContentChildrenOfNode(v11);
                  if (v11)
                  {
                    float v12 = xmlCopyNode(v11, 1);
                    uint64_t v13 = v15 + 1;
                    float v14 = v16;
                    if (v12) {
                      continue;
                    }
                  }
                  ++v15;
                  goto LABEL_36;
                }
                size_t v16 = v14;
              }
              else
              {
                uint64_t v15 = 0;
                size_t v16 = 0;
              }
LABEL_36:
              if (v19)
              {
                if (v15 == 1 && v10 == v6)
                {
                  if (v5)
                  {
                    long long v17 = CXFirstChild(v5);
                    pOCXReplaceAlternateContentChildrenOfNode(v17);
                    if (v17)
                    {
                      xmlNodePtr v18 = xmlCopyNode(v17, 1);
                      if (v18) {
                        [v19 setFallbackNode:v18 forChoiceNode:v16];
                      }
                    }
                  }
                }
              }
            }
          }
          xmlUnlinkNode(v1);
          xmlFreeNode(v1);
          uint64_t v1 = (_xmlNode *)CXFindChild(v20, (CXNamespace *)OCXMarkupCompatibilityNamespace, "AlternateContent");
          double result = pOCXReplaceAlternateContentChildrenOfNode(v1);
          if (!v1) {
            return result;
          }
        }
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        while (1)
        {
          name = v4->name;
          size_t v8 = CXFindAttribute(v4, (xmlChar *)"Requires");
          if (v8)
          {
            String = xmlNodeListGetString(v8->doc, v8->children, 1);
            if (name) {
              goto LABEL_11;
            }
          }
          else
          {
            String = 0;
            if (name)
            {
LABEL_11:
              if (xmlStrEqual(name, (const xmlChar *)"Choice")
                && ([i + 504 isPrefixSupportedFromNodeContext:v4 prefix:String] & 1) != 0)
              {
                uint64_t v6 = v4;
              }
              else if (xmlStrEqual(name, (const xmlChar *)"Fallback"))
              {
                uint64_t v5 = v4;
              }
            }
          }
          if (String) {
            (*v2)(String);
          }
          if (!v6 || !v5)
          {
            double v4 = CXNextSibling(v4);
            pOCXReplaceAlternateContentChildrenOfNode(v4);
            if (v4) {
              continue;
            }
          }
          goto LABEL_23;
        }
      }
    }
  }
  return result;
}

_xmlNode *OCXNextSiblingNamed(_xmlNode *a1, xmlChar *a2)
{
  uint64_t v2 = CXNextSiblingNamed(a1, a2);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v2);
  return v2;
}

uint64_t OCXFindChild(_xmlNode *a1, CXNamespace *a2, const char *a3)
{
  uint64_t v3 = CXFindChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode(v3);
  return v3;
}

_xmlNode *OCXFindRequiredChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  uint64_t v3 = CXFindRequiredChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

_xmlNode *OCXFirstChild(_xmlNode *a1)
{
  uint64_t v1 = CXFirstChild(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXNextSibling(_xmlNode *a1)
{
  uint64_t v1 = CXNextSibling(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXFirstChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  uint64_t v3 = CXFirstChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

_xmlNode *OCXNextSibling(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  uint64_t v3 = CXNextSibling(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v3);
  return v3;
}

xmlNodePtr OCXGetRootElement(_xmlDoc *a1)
{
  xmlNodePtr v1 = CXGetRootElement(a1);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)v1);
  return v1;
}

_xmlNode *OCXFindNextChild(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  Child = CXFindNextChild(a1, a2, a3);
  pOCXReplaceAlternateContentChildrenOfNode((uint64_t)Child);
  return Child;
}

xmlNode *OCXReplaceChoiceWithFallback(_xmlNode *a1)
{
  uint64_t v2 = a1->doc->_private;
  uint64_t v3 = (xmlNode *)[v2 fallbackNodeForChoiceNode:a1];
  if (v3)
  {
    if (xmlAddPrevSibling(a1, v3))
    {
      xmlUnlinkNode(a1);
      ((void (*)(_xmlNode *))*MEMORY[0x263F8C880])(a1);
      [v2 setFallbackNode:0 forChoiceNode:a1];
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t OCXValidateST_PositiveCoordinate(uint64_t a1)
{
  if ((a1 & (unint64_t)~(a1 >> 63)) >= 0x1499700) {
    return 21600000;
  }
  else {
    return a1 & ~(a1 >> 63);
  }
}

void sub_238D8F8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8FAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8FCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D8FEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D8FFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D90174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D9033C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D90444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D904F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D905F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D90744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D90988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D90E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238D90F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D90F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9102C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D913C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D91448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D914E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D91918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D91AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D91B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D91BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D91CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D91DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D92C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D92D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D92F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D930C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9316C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D93260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D933A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238D94154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9434C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9444C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D944F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9474C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D94F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D95040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D950C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D951BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D95238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D952E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D954C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D95618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D95784(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a2 == 1)
  {
    id v12 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }

  _Unwind_Resume(exc_buf);
}

void sub_238D95850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D958F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

OCPZipPackage *OCPNewZipPackageWithBytes(const void *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    if (v3)
    {
      uint64_t v2 = [[OCPZipPackage alloc] initWithData:v3];
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  return v2;
}

void sub_238D9625C(void *a1, int a2)
{
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x238D96220);
  }
  objc_exception_rethrow();
}

void sub_238D96284(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

const CsData *OCPNewZipPackageWithCsData(CsData *a1)
{
  if (a1)
  {
    OCPNewZipPackageWithBytes(a1->var1, a1->var0);
    a1 = (CsData *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

const OcBinaryData *OCPNewZipPackageWithOcBinaryData(OcBinaryData *a1)
{
  if (a1)
  {
    OCPNewZipPackageWithBytes(a1->var5, a1->var3);
    a1 = (OcBinaryData *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t storageBufferReallocFunction(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 - 8) resizeStorageBuffer:a2];
}

uint64_t StgModeFromSTStgMode(uint64_t result)
{
  if (result >= 3)
  {
    uint64_t v1 = [NSString stringWithUTF8String:"StgMode StgModeFromSTStgMode(STStgMode)"];
    uint64_t v2 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeCommon/StructuredStorage/ObjcInterface/STStgInfo.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v1 file:v2 lineNumber:30 isFatal:0 description:"Illegal access mode found in structured storage library"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    return 2;
  }
  return result;
}

uint64_t STStgModeFromStgMode(uint64_t result)
{
  if (result >= 3)
  {
    uint64_t v1 = [NSString stringWithUTF8String:"STStgMode STStgModeFromStgMode(StgMode)"];
    uint64_t v2 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeCommon/StructuredStorage/ObjcInterface/STStgInfo.m"];
    +[OITSUAssertionHandler handleFailureInFunction:v1 file:v2 lineNumber:42 isFatal:0 description:"Illegal access mode found in structured storage library"];

    +[OITSUAssertionHandler logBacktraceThrottled];
    return 2;
  }
  return result;
}

void sub_238D99354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9943C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D995B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OCLanguageTypeForCharacter(unsigned int a1, BOOL *a2)
{
  *a2 = a1 < 0x21;
  if (a1 < 0x590) {
    return 0;
  }
  if (a1 >> 5 < 0x85) {
    return 2;
  }
  unsigned int v3 = a1 >> 8;
  if (a1 >> 8 < 0x11) {
    return 0;
  }
  if (a1 >> 9 < 9) {
    return 1;
  }
  if (a1 >> 7 < 0x2F) {
    return 0;
  }
  if (a1 < 0x2000) {
    return 2;
  }
  if (a1 >> 2 < 0x803) {
    return 0;
  }
  unsigned int v4 = a1 >> 4;
  if (a1 >> 4 < 0x201) {
    return 2;
  }
  if (a1 < 0x202A) {
    return 0;
  }
  if (v4 < 0x203) {
    return 2;
  }
  if (v4 < 0x267) {
    return 0;
  }
  if (a1 >> 6 < 0x9F) {
    return 2;
  }
  uint64_t v2 = 0;
  if (a1 >> 7 >= 0x5D && a1 != 55349)
  {
    if (a1 < 0xE000) {
      return 1;
    }
    if (a1 >= 0xF000)
    {
      if (v3 < 0xF1) {
        return 3;
      }
      if (v3 >= 0xF9)
      {
        if (v3 < 0xFB) {
          return 1;
        }
        if (a1 >= 0xFB1D)
        {
          if (v4 < 0xFE5) {
            return 2;
          }
          if (v4 >= 0xFE7) {
            return v4 < 0xFFF;
          }
        }
      }
    }
    return 0;
  }
  return v2;
}

void sub_238D9983C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D998AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D99A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D99AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D99B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D99C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D99C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCImporter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D9A0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D9A318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9A928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9AA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D9ABEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9AC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OCCAgileCryptoKey::~OCCAgileCryptoKey(OCCCryptoKey *this)
{
  this->int var0 = (void **)&unk_26EBD9928;
  int var0 = this[1].var0;
  if (var0)
  {
    OCCAgileMetaKey::~OCCAgileMetaKey((OCCAgileMetaKey *)var0);
    MEMORY[0x23EC997B0]();
  }
  unsigned __int16 var1 = this[1].var1;
  if (var1)
  {
    OCCAgileMetaKey::~OCCAgileMetaKey((OCCAgileMetaKey *)var1);
    MEMORY[0x23EC997B0]();
  }
  var2 = this[1].var2;
  if (var2) {
    MEMORY[0x23EC99790](var2, 0x1000C8077774924);
  }
  uint64_t v5 = *(void *)&this[1].var4;
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  uint64_t v6 = this[2].var0;
  if (v6) {
    MEMORY[0x23EC99790](v6, 0x1000C8077774924);
  }
  uint64_t v7 = this[2].var2;
  if (v7) {
    MEMORY[0x23EC99790](v7, 0x1000C8077774924);
  }
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  uint64_t vars8;

  OCCAgileCryptoKey::~OCCAgileCryptoKey(this);
  JUMPOUT(0x23EC997B0);
}

xmlDoc *OCCAgileCryptoKey::create(OCCAgileCryptoKey *this, const void *a2)
{
  unint64_t v2 = (a2 - 8);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  else {
    return OCCAgileCryptoKey::createFromXmlDescriptor((OCCAgileCryptoKey *)((char *)this + 8), (const void *)v2);
  }
}

xmlDoc *OCCAgileCryptoKey::createFromXmlDescriptor(OCCAgileCryptoKey *this, const void *a2)
{
  Memory = xmlReadMemory((const char *)this, (int)a2, 0, 0, 0);
  unsigned int v3 = (xmlDoc *)Memory;
  if (Memory)
  {
    xmlNodePtr RootElement = xmlDocGetRootElement(Memory);
    if (RootElement)
    {
      uint64_t v5 = RootElement;
      if (xmlStrEqual(RootElement->name, (const xmlChar *)"encryption"))
      {
        uint64_t v7 = OCCAgileMetaKey::createByReadingRootNode(v5, v6);
        if (v7)
        {
          id v9 = (OCCAgileMetaKey *)v7;
          *(_xmlNode **)((char *)&v15.last + 4) = 0;
          LODWORD(v15.last) = 0;
          *(const xmlChar **)((char *)&v15.name + 4) = 0;
          LODWORD(v15.name) = 0;
          if (OCCAgileCryptoKey::readDataIntegrityNode(v5, (_xmlNode *)((char *)&v15.last + 4), (unsigned __int8 **)&v15.last, (unsigned int *)&v15.name + 1, (unsigned __int8 **)&v15.name, v8))
          {
            *(void **)((char *)&v15._private + 4) = 0;
            LODWORD(v15._private) = 0;
            *(unsigned __int8 **)((char *)v14 + 4) = 0;
            LODWORD(v14[0]) = 0;
            *(unsigned __int8 **)((char *)v13 + 4) = 0;
            LODWORD(v13[0]) = 0;
            *(unsigned __int8 **)((char *)v12 + 4) = 0;
            LODWORD(v12[0]) = 0;
            if (OCCAgileCryptoKey::readPasswordKeyEncryptorNode(v5, (_xmlNode *)((char *)&v15._private + 4), (OCCAgileMetaKey **)&v15, (unsigned int *)v14 + 1, v14, (unsigned int *)v13 + 1, v13, (unsigned int *)v12 + 1, v12, v11))
            {
              xmlFreeDoc(v3);
              operator new();
            }
            if (*(void **)((char *)&v15._private + 4))
            {
              OCCAgileMetaKey::~OCCAgileMetaKey(*(OCCAgileMetaKey **)((char *)&v15._private + 4));
              MEMORY[0x23EC997B0]();
            }
          }
          if (*(_xmlNode **)((char *)&v15.last + 4)) {
            MEMORY[0x23EC99790](*(_xmlNode **)((char *)&v15.last + 4), 0x1000C8077774924);
          }
          if (*(const xmlChar **)((char *)&v15.name + 4)) {
            MEMORY[0x23EC99790](*(const xmlChar **)((char *)&v15.name + 4), 0x1000C8077774924);
          }
          OCCAgileMetaKey::~OCCAgileMetaKey(v9);
          MEMORY[0x23EC997B0]();
        }
      }
    }
    xmlFreeDoc(v3);
    return 0;
  }
  return v3;
}

void sub_238D9B218(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C402D55F061);
  _Unwind_Resume(a1);
}

uint64_t OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(const void *a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t a5, int a6, void *a7, unsigned int a8)
{
  __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unsigned int v16 = a4 + a2;
  if (v16)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v16);
    long long v17 = __p;
  }
  else
  {
    long long v17 = 0;
  }
  memcpy(v17, a3, a4);
  memcpy((char *)__p + a4, a1, a2);
  __src = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 24))(a5);
  if (v18)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__src, v18);
    long long v19 = __src;
  }
  else
  {
    long long v19 = 0;
  }
  (*(void (**)(uint64_t, void *, void, void *))(*(void *)a5 + 16))(a5, __p, (v29 - __p), v19);
  unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 24))(a5) + 4;
  if (v20 <= (int)v29 - (int)__p)
  {
    if (v20 < (int)v29 - (int)__p) {
      uint64_t v29 = (char *)__p + v20;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v20 - (v29 - __p));
  }
  if (a6)
  {
    int v21 = 0;
    do
    {
      *(_DWORD *)__p = v21;
      memcpy((char *)__p + 4, __src, (v26 - __src));
      (*(void (**)(uint64_t, void *, void, void *))(*(void *)a5 + 16))(a5, __p, (v29 - __p), __src);
      ++v21;
    }
    while (a6 != v21);
  }
  bzero(a7, a8);
  uint64_t v22 = __src;
  unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 24))(a5);
  memcpy(a7, v22, v23);
  if (__src)
  {
    uint64_t v26 = __src;
    operator delete(__src);
  }
  if (__p)
  {
    uint64_t v29 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_238D9B48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::getDataBlockSize(OCCAgileCryptoKey *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 8))();
  }
  else {
    return 0;
  }
}

uint64_t OCCAgileCryptoKey::deriveDecryptionKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v4 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 24))(this);
  uint64_t v5 = (const void *)*((void *)this + 14);
  if (!v5) {
    operator new[]();
  }
  memcpy(a2, v5, v4);
  return 1;
}

void OCCAgileCryptoKey::generateEncryptionMessageAuthentication(OCCAgileCryptoKey *this, SsrwOOStream *a2)
{
  unsigned int v3 = (OCCHmac *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 24) + 32))(*(void *)(*((void *)this + 7) + 24));
  uint64_t v5 = OCCHmac::createFromName(v3, v4);
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 16) + 8))(*(void *)(*((void *)this + 7)
                                                                                                 + 16));
  operator new[]();
}

uint64_t OCCAgileCryptoKey::encryptionInfo(OCCAgileCryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if (*((void *)this + 6) && *((void *)this + 8) && *((void *)this + 10) && *((void *)this + 12))
  {
    *a3 = 1057;
    operator new[]();
  }
  return 0;
}

void sub_238D9C440(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL OCCAgileCryptoKey::isVersionValid(OCCAgileCryptoKey *this, int a2)
{
  return this == 4 && a2 == 4;
}

const void *OCCAgileCryptoKey::isAgile(const void *this, const OCCCryptoKey *a2)
{
  if (this) {
  return this;
  }
}

uint64_t OCCAgileCryptoKey::getSeedSize(OCCAgileCryptoKey *this)
{
  uint64_t v1 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 88))(this);
  return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 24))(v1) + 8;
}

uint64_t OCCAgileCryptoKey::computeKeySeed(OCCAgileCryptoKey *this, const void *a2, unsigned int a3, void *a4)
{
  uint64_t v8 = *((void *)this + 6);
  id v9 = *(const void **)v8;
  unsigned int v10 = *(_DWORD *)(v8 + 8);
  uint64_t v11 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 88))(this);
  int v12 = *((_DWORD *)this + 11);
  unsigned int v13 = (**(uint64_t (***)(OCCAgileCryptoKey *))this)(this);
  OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(a2, a3, v9, v10, v11, v12, a4, v13);
  return 1;
}

uint64_t OCCAgileCryptoKey::decryptVerificationInfo(OCCAgileCryptoKey *this, const void *a2, const void *a3, void *a4, void *a5)
{
  uint64_t result = OCCCryptor::decrypt(*(OCCCryptor **)(*((void *)this + 6) + 16), a2, *(const void **)(*((void *)this + 6) + 32), *((const void **)this + 2), *((_DWORD *)this + 8), a4, *((_DWORD *)this + 10));
  if (result)
  {
    uint64_t v9 = *((void *)this + 6);
    unsigned int v10 = *(OCCCryptor **)(v9 + 16);
    uint64_t v11 = *(const void **)(v9 + 32);
    int v12 = (const void *)*((void *)this + 3);
    unsigned int v13 = *((_DWORD *)this + 9);
    uint64_t v14 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 88))(this);
    unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    return OCCCryptor::decrypt(v10, a3, v11, v12, v13, a5, v15);
  }
  return result;
}

uint64_t OCCAgileCryptoKey::getCipherKeySize(OCCAgileCryptoKey *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 16) + 16))();
}

uint64_t OCCAgileCryptoKey::getBlockKeySize(OCCAgileCryptoKey *this)
{
  return 8;
}

uint64_t OCCAgileCryptoKey::computeVerifierBlockKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 32))(this);
  memcpy(a2, &OCCAgileCryptoKey::VerifierBlockKey, v3);
  return 1;
}

uint64_t OCCAgileCryptoKey::computeVerifierHashBlockKey(OCCAgileCryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 32))(this);
  memcpy(a2, &OCCAgileCryptoKey::VerifierHashBlockKey, v3);
  return 1;
}

uint64_t OCCAgileCryptoKey::deriveKey(OCCAgileCryptoKey *this, void *a2, unsigned char *a3)
{
  uint64_t v5 = *((void *)this + 1);
  *(void *)(v5 + (**(unsigned int (***)(OCCAgileCryptoKey *))this)(this) - 8) = *a2;
  __p = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 88))(this);
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  if (v7) {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v7);
  }
  uint64_t v8 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 88))(this);
  uint64_t v9 = *((void *)this + 1);
  uint64_t v10 = (**(uint64_t (***)(OCCAgileCryptoKey *))this)(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 16))(v8, v9, v10, __p);
  uint64_t v11 = (char *)__p;
  LODWORD(v9) = v16;
  unsigned int v12 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 24))(this);
  OCCUtilities::resizeData(v11, (char *)(v9 - v11), v12, 0x36uLL, a3, v13);
  if (__p)
  {
    unsigned int v16 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_238D9C9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::decryptWithPasswordMetaKey(OCCAgileCryptoKey *this, const void *a2, unsigned int a3, const void *a4, void *a5, unsigned int a6)
{
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v12 = (*(uint64_t (**)(OCCAgileCryptoKey *))(*(void *)this + 24))(this);
  if (v12)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v12);
    unsigned int v13 = __p;
  }
  else
  {
    unsigned int v13 = 0;
  }
  if ((*(uint64_t (**)(OCCAgileCryptoKey *, const void *, void *))(*(void *)this + 56))(this, a4, v13)) {
    uint64_t v14 = OCCCryptor::decrypt(*(OCCCryptor **)(*((void *)this + 6) + 16), __p, *(const void **)(*((void *)this + 6) + 32), a2, a3, a5, a6);
  }
  else {
    uint64_t v14 = 0;
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_238D9CAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCAgileCryptoKey::deriveDecryptionKey(OCCAgileCryptoKey *this, int a2, void *a3, unsigned __int8 **a4)
{
  int v7 = a2;
  uint64_t v5 = OCCAgileCryptoKey::deriveDecryptionKey(this, a3);
  if (v5)
  {
    (***(void (****)(void))(*((void *)this + 7) + 16))(*(void *)(*((void *)this + 7) + 16));
    operator new[]();
  }
  return v5;
}

uint64_t OCCAgileCryptoKey::decryptBlockUsingDecryptionKey(OCCAgileCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt(*(OCCCryptor **)(*((void *)this + 7) + 16), a2, a3, a4, a5, a6, a5);
}

uint64_t OCCAgileCryptoKey::encryptBlockUsingEncryptionKey(OCCAgileCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt(*(OCCCryptor **)(*((void *)this + 7) + 16), a2, a3, a4, a5, a6, a5);
}

uint64_t OCCAgileCryptoKey::getHashAlgorithm(OCCAgileCryptoKey *this)
{
  return *(void *)(*((void *)this + 6) + 24);
}

void OCCAgileCryptoKey::createXmlSegmenter(OCCAgileCryptoKey *this)
{
}

void sub_238D9CC20(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

unint64_t OCCAgileCryptoKey::readDataIntegrityNode(_xmlNode *this, _xmlNode *a2, unsigned __int8 **a3, unsigned int *a4, unsigned __int8 **a5, unsigned int *a6)
{
  unint64_t v6 = (unint64_t)this;
  if (this)
  {
    uint64_t v8 = +[OCCDecryptor agileDescriptorNamespace];
    unint64_t v6 = OCXFindChild((_xmlNode *)v6, v8, "dataIntegrity");

    if (v6)
    {
      uint64_t v9 = CXRequiredBase64DecodedDataAttribute((_xmlNode *)v6, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedHmacKey");
      if (v9)
      {
        uint64_t v10 = CXRequiredBase64DecodedDataAttribute((_xmlNode *)v6, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedHmacValue");
        unint64_t v6 = v10 != 0;
        if (v10)
        {
          *(_DWORD *)a3 = [v9 length];
          operator new[]();
        }
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  return v6;
}

void sub_238D9CDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OCCAgileCryptoKey::readPasswordKeyEncryptorNode(_xmlNode *this, _xmlNode *a2, OCCAgileMetaKey **a3, unsigned int *a4, unsigned __int8 **a5, unsigned int *a6, unsigned __int8 **a7, unsigned int *a8, unsigned __int8 **a9, unsigned int *a10)
{
  if (this)
  {
    uint64_t v14 = +[OCCDecryptor agileDescriptorNamespace];
    unsigned int v15 = (_xmlNode *)OCXFindChild(this, v14, "keyEncryptors");

    if (v15)
    {
      unsigned int v16 = +[OCCDecryptor agileDescriptorNamespace];
      uint64_t v17 = (_xmlNode *)OCXFindChild(v15, v16, "keyEncryptor");

      if (v17)
      {
        uint64_t v18 = +[OCCDecryptor agilePasswordKeyEncryptorNamespace];
        long long v19 = (_xmlNode *)OCXFindChild(v17, v18, "encryptedKey");

        if (v19)
        {
          unsigned int v20 = CXRequiredBase64DecodedDataAttribute(v19, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedVerifierHashInput");
          if (v20)
          {
            int v21 = CXRequiredBase64DecodedDataAttribute(v19, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedVerifierHashValue");
            if (v21)
            {
              id v29 = v21;
              CXRequiredBase64DecodedDataAttribute(v19, (CXNamespace *)CXNoNamespace, (xmlChar *)"encryptedKeyValue");
              id v28 = (id)objc_claimAutoreleasedReturnValue();
              if (v28)
              {
                unsigned int v22 = CXRequiredUnsignedLongAttribute(v19, (CXNamespace *)CXNoNamespace, (xmlChar *)"spinCount");
                *(_DWORD *)a3 = v22;
                if (v22)
                {
                  uint64_t v26 = OCCAgileMetaKey::createByReadingKeyDataNode(v19, v23, v24, v25);
                  a2->_private = v26;
                  if (v26)
                  {
                    *(_DWORD *)a5 = objc_msgSend(v20, "length", v28);
                    operator new[]();
                  }
                }
              }

              int v21 = v29;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_238D9D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t OCCSegmenterWithIncreasingSegmentNumbers::getNextSegmentNumber(OCCSegmenterWithIncreasingSegmentNumbers *this, int a2)
{
  return (a2 + 1);
}

void OCCSegmenterWithIncreasingSegmentNumbers::~OCCSegmenterWithIncreasingSegmentNumbers(OCCSegmenterWithIncreasingSegmentNumbers *this)
{
}

void std::vector<unsigned char,ChAllocator<unsigned char>>::__append(char **a1, unsigned int a2)
{
  uint64_t v5 = a1[1];
  unsigned int v4 = a1[2];
  if ((int)v4 - (int)v5 >= a2)
  {
    if (a2)
    {
      bzero(a1[1], a2);
      v5 += a2;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = (char *)(v5 - *a1);
    unsigned int v8 = v7 + a2;
    unsigned int v9 = v4 - *a1;
    if (2 * v9 > v7 + a2) {
      unsigned int v8 = 2 * v9;
    }
    if (v9 >= 0x7FFFFFFF) {
      size_t v10 = 0xFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = (char *)operator new(v10);
    }
    else
    {
      uint64_t v11 = 0;
      size_t v10 = 0;
    }
    unsigned int v12 = &v11[v7];
    unsigned int v13 = &v11[v10];
    size_t v14 = a2;
    unsigned int v15 = &v12[a2];
    bzero(v12, v14);
    if (v5 != v6)
    {
      do
      {
        char v16 = *--v5;
        *--unsigned int v12 = v16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void OCCAgileMetaKey::~OCCAgileMetaKey(OCCAgileMetaKey *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
}

void OCCAgileMetaKey::OCCAgileMetaKey(uint64_t a1, uint64_t a2, int a3, void (***a4)(void), uint64_t a5)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  (**a4)(a4);
  operator new[]();
}

_xmlNode *OCCAgileMetaKey::createByReadingRootNode(_xmlNode *this, _xmlNode *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = +[OCCDecryptor agileDescriptorNamespace];
    uint64_t v4 = (_xmlNode *)OCXFindChild(v2, v3, "keyData");

    return OCCAgileMetaKey::createByReadingKeyDataNode(v4, v5, v6, v7);
  }
  return this;
}

void sub_238D9D3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *OCCAgileMetaKey::createByReadingKeyDataNode(_xmlNode *this, _xmlNode *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = this;
  if (this)
  {
    uint64_t v11 = 0;
    int v10 = 0;
    if (OCCAgileMetaKey::readSaltFromNode(this, (_xmlNode *)&v11, (unsigned __int8 **)&v10, a4))
    {
      uint64_t v9 = 0;
      if (OCCAgileMetaKey::readCipherAlgorithmFromNode(v4, (_xmlNode *)&v9, v5))
      {
        uint64_t v8 = 0;
        if (OCCAgileMetaKey::readHashAlgorithmFromNode(v4, (_xmlNode *)&v8, v6)) {
          operator new();
        }
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    if (v11) {
      MEMORY[0x23EC99790](v11, 0x1000C8077774924);
    }
    return 0;
  }
  return v4;
}

void sub_238D9D518(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1030C40E917E955);
  _Unwind_Resume(a1);
}

uint64_t OCCAgileMetaKey::readSaltFromNode(_xmlNode *this, _xmlNode *a2, unsigned __int8 **a3, unsigned int *a4)
{
  if (this)
  {
    unsigned int v6 = CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"saltSize");
    *(_DWORD *)a3 = v6;
    if (v6)
    {
      int v7 = CXRequiredBase64DecodedDataAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"saltValue");
      uint64_t v8 = v7;
      if (v7)
      {
        uint64_t v9 = *(unsigned int *)a3;
        if ([v7 length] == v9) {
          operator new[]();
        }
      }
    }
  }
  return 0;
}

void sub_238D9D61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_xmlNode *OCCAgileMetaKey::readCipherAlgorithmFromNode(_xmlNode *this, _xmlNode *a2, OCCCryptor **a3)
{
  uint64_t v3 = this;
  if (this)
  {
    unsigned int v5 = CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"keyBits");
    if (v5) {
      BOOL v6 = (v5 & 7) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      int v7 = CXRequiredStringAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"cipherAlgorithm");
      uint64_t v8 = v7;
      if (v7 && ([v7 isEqualToString:@"RC4"] & 1) == 0)
      {
        uint64_t v9 = CXRequiredStringAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"cipherChaining");
        if (v9
          && (int v10 = (void *)OCCCryptor::create((OCCCryptor *)[v8 UTF8String], (const char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"), (const char *)(v5 >> 3)), (a2->_private = v10) != 0))
        {
          unsigned int v11 = CXRequiredUnsignedLongAttribute(v3, (CXNamespace *)CXNoNamespace, (xmlChar *)"blockSize");
          if (v11 && (*(unsigned int (**)(void))(*(void *)a2->_private + 8))() == v11)
          {
            uint64_t v3 = (_xmlNode *)1;
          }
          else
          {
            if (a2->_private) {
              (*(void (**)(void *))(*(void *)a2->_private + 40))(a2->_private);
            }
            uint64_t v3 = 0;
            a2->_private = 0;
          }
        }
        else
        {
          uint64_t v3 = 0;
        }
      }
      else
      {
        uint64_t v3 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_238D9D7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OCCAgileMetaKey::readHashAlgorithmFromNode(_xmlNode *this, _xmlNode *a2, OCCHash **a3)
{
  if (!this) {
    return 0;
  }
  uint64_t v5 = (uint64_t)CXRequiredUnsignedLongAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"hashSize");
  if (v5)
  {
    BOOL v6 = CXRequiredStringAttribute(this, (CXNamespace *)CXNoNamespace, (xmlChar *)"hashAlgorithm");
    int v7 = v6;
    if (v6)
    {
      uint64_t v8 = (OCCHash *)[v6 UTF8String];
      int v10 = (void *)OCCHash::createFromName(v8, v9);
      a2->_private = v10;
      if (v10)
      {
        if ((*(unsigned int (**)(void *))(*(void *)v10 + 24))(v10) == v5)
        {
          uint64_t v5 = 1;
LABEL_12:

          return v5;
        }
        if (a2->_private) {
          (*(void (**)(void *))(*(void *)a2->_private + 8))(a2->_private);
        }
      }
      uint64_t v5 = 0;
      a2->_private = 0;
      goto LABEL_12;
    }
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  return v5;
}

void sub_238D9D900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OCCAgileMetaKey::computeInitializationVectorWithBlockKey(OCCAgileMetaKey *this, const void *a2, unsigned int a3, unsigned char *a4)
{
  long long v19 = 0;
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 + a3)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v19, v8 + a3);
    uint64_t v9 = v19;
    unsigned int v8 = *((_DWORD *)this + 2);
  }
  else
  {
    uint64_t v9 = 0;
  }
  memcpy(v9, *(const void **)this, v8);
  memcpy((char *)v19 + *((unsigned int *)this + 2), a2, a3);
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    unsigned int v11 = __p;
  }
  else
  {
    unsigned int v11 = 0;
  }
  (*(void (**)(void, void *, void, void *))(**((void **)this + 3) + 16))(*((void *)this + 3), v19, (v20 - v19), v11);
  unsigned int v12 = (char *)__p;
  int v13 = (int)v17;
  unsigned int v14 = (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
  OCCUtilities::resizeData(v12, (char *)(v13 - v12), v14, 0x36uLL, a4, v15);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    unsigned int v20 = v19;
    operator delete(v19);
  }
}

void sub_238D9DA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_238D9DB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCCDecryptor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238D9DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9DC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9DDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9DE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9E130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9E39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9E5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9E6AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238D9E878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9EB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9EDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9EEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D9F0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9F374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9F49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238D9F81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9F87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9FA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9FBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9FC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238D9FDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238D9FFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA00A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA0208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA04E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  for (uint64_t i = 112; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_238DA07CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA0984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA0A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA0AD8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238DA0C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA0EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DA1080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA1168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA1214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA1320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DA144C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA15E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DA16D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OCXPartRelationshipsByTypeWithFallback(OCPPackagePart *a1, OCXState *a2, objc_selector *a3)
{
  uint64_t v5 = a1;
  BOOL v6 = a2;
  int v7 = [(OCPPackagePart *)v5 relationshipsByType:[(OCXState *)v6 performSelector:a3]];
  if (![v7 count] && -[OCXState xmlFormat](v6, "xmlFormat") == 1)
  {
    [(OCXState *)v6 setXmlFormat:0];
    uint64_t v8 = [(OCPPackagePart *)v5 relationshipsByType:[(OCXState *)v6 performSelector:a3]];

    int v7 = (void *)v8;
    [(OCXState *)v6 setXmlFormat:1];
  }

  return v7;
}

void sub_238DA1BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OCXFirstPartWithRelationshipOfTypeToPartWithFallback(OCPPackagePart *a1, OCXState *a2, objc_selector *a3)
{
  uint64_t v5 = a1;
  BOOL v6 = a2;
  int v7 = [(OCPPackagePart *)v5 firstPartWithRelationshipOfType:[(OCXState *)v6 performSelector:a3]];
  if (!v7)
  {
    if ([(OCXState *)v6 xmlFormat] == 1)
    {
      [(OCXState *)v6 setXmlFormat:0];
      int v7 = [(OCPPackagePart *)v5 firstPartWithRelationshipOfType:[(OCXState *)v6 performSelector:a3]];
      [(OCXState *)v6 setXmlFormat:1];
    }
    else
    {
      int v7 = 0;
    }
  }

  return v7;
}

void sub_238DA1CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDateWithCsDateTime(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x263EFF8F0]);
  uint64_t v3 = (void *)[v2 initWithCalendarIdentifier:*MEMORY[0x263EFF3F8]];
  id v4 = objc_alloc_init(MEMORY[0x263EFF918]);
  [v4 setYear:(unsigned __int16)a1];
  [v4 setMonth:BYTE2(a1)];
  [v4 setDay:BYTE3(a1)];
  [v4 setHour:BYTE4(a1)];
  [v4 setMinute:BYTE5(a1)];
  [v4 setSecond:BYTE6(a1)];
  uint64_t v5 = [v3 dateFromComponents:v4];

  return v5;
}

void sub_238DA1D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CsLeReadUInt64(uint64_t a1)
{
  return *(void *)a1;
}

double *CsLeWriteFloat64(double *result, double a2)
{
  *uint64_t result = a2;
  return result;
}

double CsGetFloat64FromPackedLocation(uint64_t a1)
{
  if (a1) {
    return *(double *)a1;
  }
  else {
    return 0.0;
  }
}

uint64_t ChValueIsValidCharSet(int a1)
{
  uint64_t result = 1;
  if (a1 <= 159)
  {
    if (((a1 - 77) > 0x3B || ((1 << (a1 - 77)) & 0xA38000000001003) == 0)
      && a1 >= 3)
    {
      return 0;
    }
  }
  else if ((a1 - 160) > 0x3E || ((1 << (a1 + 96)) & 0x400010000406000FLL) == 0)
  {
    unsigned int v3 = a1 - 238;
    if (v3 > 0x11 || ((1 << v3) & 0x30001) == 0) {
      return 0;
    }
  }
  return result;
}

_WORD *ChConvertANSICharactersToUnicode(_WORD *result, unsigned int a2)
{
  if (result && a2)
  {
    uint64_t v2 = a2;
    do
    {
      unsigned int v3 = (unsigned __int16)*result;
      BOOL v4 = v3 >= 0x80;
      unsigned __int16 v5 = v3 - 128;
      if (v4 && v5 <= 0x1Fu) {
        *uint64_t result = word_238EDE6C4[(__int16)v5];
      }
      ++result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t ChMapCharsetToCharacterEncoding(int a1)
{
  uint64_t result = 1252;
  if (a1 > 161)
  {
    if (a1 == 255) {
      int v3 = 4;
    }
    else {
      int v3 = 1252;
    }
    if (a1 == 238) {
      int v4 = 1250;
    }
    else {
      int v4 = v3;
    }
    if (a1 == 222) {
      unsigned int v5 = 874;
    }
    else {
      unsigned int v5 = v4;
    }
    if (a1 == 204) {
      int v6 = 1251;
    }
    else {
      int v6 = 1252;
    }
    if (a1 == 186) {
      int v7 = 1257;
    }
    else {
      int v7 = v6;
    }
    if (a1 <= 221) {
      unsigned int v5 = v7;
    }
    if (a1 == 178) {
      int v8 = 1256;
    }
    else {
      int v8 = 1252;
    }
    if (a1 == 177) {
      unsigned int v9 = 1255;
    }
    else {
      unsigned int v9 = v8;
    }
    if (a1 == 163) {
      int v10 = 1258;
    }
    else {
      int v10 = 1252;
    }
    if (a1 == 162) {
      int v11 = 1254;
    }
    else {
      int v11 = v10;
    }
    if (a1 <= 176) {
      unsigned int v9 = v11;
    }
    if (a1 <= 185) {
      return v9;
    }
    else {
      return v5;
    }
  }
  else if (a1 <= 127)
  {
    if (a1 == 77) {
      int v12 = 10000;
    }
    else {
      int v12 = 1252;
    }
    if (a1 == 2) {
      unsigned int v13 = 100;
    }
    else {
      unsigned int v13 = v12;
    }
    if (a1 == 1) {
      return 3;
    }
    else {
      return v13;
    }
  }
  else
  {
    switch(a1)
    {
      case 128:
        uint64_t result = 932;
        break;
      case 129:
        uint64_t result = 949;
        break;
      case 130:
        uint64_t result = 1361;
        break;
      case 131:
      case 132:
      case 133:
      case 135:
        return result;
      case 134:
        uint64_t result = 936;
        break;
      case 136:
        uint64_t result = 950;
        break;
      default:
        if (a1 == 161) {
          uint64_t result = 1253;
        }
        else {
          uint64_t result = 1252;
        }
        break;
    }
  }
  return result;
}

const char *ChLogFunction(const char *result, int a2, int a3, char *a4, int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v5 = (FILE *)g_pFile;
  if (g_pFile)
  {
    __int16 v8 = a3;
    unsigned int v9 = result;
    if ((a3 & 1) != 0 || a2 && a3)
    {
      time_t v16 = 0;
      time(&v16);
      int v10 = localtime(&v16);
      snprintf(__str, 0x1FuLL, "%02d/%02d/%04d-%02d:%02d:%02d; ",
        v10->tm_mday,
        v10->tm_mon,
        v10->tm_year + 1900,
        v10->tm_hour,
        v10->tm_min,
        v10->tm_sec);
      size_t v11 = strlen(__str);
      fwrite(__str, 1uLL, v11, v5);
      if (a4)
      {
        if (strchr(a4, 92)) {
          a4 = strrchr(a4, 92) + 1;
        }
        size_t v12 = strlen(a4);
        fwrite(a4, 1uLL, v12, v5);
        snprintf(__str, 0x1FuLL, "(%d):\n", a5);
        size_t v13 = strlen(__str);
        fwrite(__str, 1uLL, v13, v5);
      }
      if ((unsigned __int16)(v8 - 1) > 7u) {
        unsigned int v14 = "MESSAGE: ";
      }
      else {
        unsigned int v14 = off_264D675E8[(__int16)(v8 - 1)];
      }
      fwrite(v14, 1uLL, 9uLL, v5);
      if (v9)
      {
        size_t v15 = strlen(v9);
        fwrite(v9, 1uLL, v15, v5);
      }
      fwrite("\n", 1uLL, 1uLL, v5);
      return (const char *)fflush(v5);
    }
  }
  return result;
}

uint64_t OCXReadBool(const unsigned __int8 *a1)
{
  if (xmlStrEqual(a1, (const xmlChar *)"true") || xmlStrEqual(a1, (const xmlChar *)"1")) {
    return 1;
  }
  if (!xmlStrEqual(a1, (const xmlChar *)"false") && !xmlStrEqual(a1, (const xmlChar *)"0")) {
    objc_msgSend(MEMORY[0x263EFF940], "raise:format:", @"OCXException", @"Bad BOOLean string: %s", a1);
  }
  return 0;
}

uint64_t OCXReadBool(_xmlNode *a1, xmlChar *nameSpace, xmlChar *name, uint64_t a4)
{
  NsProp = xmlGetNsProp(a1, name, nameSpace);
  if (NsProp)
  {
    int v6 = NsProp;
    a4 = OCXReadBool(NsProp);
    ((void (*)(xmlChar *))*MEMORY[0x263F8C880])(v6);
  }
  return a4;
}

xmlChar *OCXIsStrictXmlFile(_xmlTextReader *a1)
{
  uint64_t v2 = xmlTextReaderConstNamespaceUri(a1);
  uint64_t result = xmlTextReaderGetAttributeNs(a1, (const xmlChar *)"conformance", v2);
  if (result) {
    return (xmlChar *)(xmlStrEqual(result, (const xmlChar *)"strict") != 0);
  }
  return result;
}

uint64_t _ChMbstowcs(unsigned __int16 *a1, const char *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  while (1)
  {
    a1[result] = a2[result];
    if (!a2[result]) {
      break;
    }
    if (a3 == ++result) {
      return a3;
    }
  }
  return result;
}

uint64_t CsUTF8CharFromWideChar(uint64_t result, void *__dst, int *a3)
{
  __int16 v6 = 0;
  int __src = 0;
  if (result > 0x7F)
  {
    if (result > 0x7FF)
    {
      LOBYTE(__src) = (result >> 12) | 0xE0;
      BYTE1(__src) = (result >> 6) & 0x3F | 0x80;
      BYTE2(__src) = result & 0x3F | 0x80;
      int v4 = 3;
    }
    else
    {
      LOBYTE(__src) = (result >> 6) | 0xC0;
      BYTE1(__src) = result & 0x3F | 0x80;
      int v4 = 2;
    }
  }
  else
  {
    LOBYTE(__src) = result;
    int v4 = 1;
  }
  if (v4 <= *a3)
  {
    uint64_t result = (uint64_t)memcpy(__dst, &__src, v4);
    *a3 = v4;
  }
  return result;
}

const void **CsData::operator=(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    int v4 = a1[1];
    if (v4) {
      MEMORY[0x23EC99790](v4, 0x1000C8077774924);
    }
    a1[1] = 0;
    size_t v5 = *(unsigned int *)a2;
    *(_DWORD *)a1 = v5;
    if (v5)
    {
      __int16 v6 = operator new[](v5);
      a1[1] = v6;
      memcpy(v6, a2[1], *(unsigned int *)a1);
    }
  }
  return a1;
}

CsString *CsString::append(CsString *this, const char *a2, int a3)
{
  if (a2)
  {
    int v3 = a2;
    int v4 = this;
    unsigned int var2 = this->var2;
    uint64_t v6 = var2 + a3;
    this = CsString::reserve(this, var2 + a3);
    uint64_t v7 = v4->var2;
    unsigned __int16 var1 = v4->var1;
    if (v7 < v6)
    {
      do
      {
        unsigned __int16 v9 = *(unsigned __int8 *)v3++;
        var1[v7++] = v9;
        v4->unsigned int var2 = v7;
      }
      while (v6 != v7);
      uint64_t v7 = v6;
    }
    var1[v7] = 0;
  }
  return this;
}

CsString *CsString::append(CsString *this, const unsigned int *a2, int a3)
{
  if (a2)
  {
    int v3 = a2;
    int v4 = this;
    unsigned int var2 = this->var2;
    uint64_t v6 = var2 + a3;
    this = CsString::reserve(this, var2 + a3);
    uint64_t v7 = v4->var2;
    unsigned __int16 var1 = v4->var1;
    if (v7 < v6)
    {
      do
      {
        int v9 = *v3++;
        var1[v7++] = v9;
        v4->unsigned int var2 = v7;
      }
      while (v6 != v7);
      uint64_t v7 = v6;
    }
    var1[v7] = 0;
  }
  return this;
}

CsString *CsString::append(CsString *result, const unsigned int *a2)
{
  if (a2)
  {
    unsigned int v2 = -1;
    do
      ++v2;
    while (a2[v2]);
    return CsString::append(result, a2, v2);
  }
  return result;
}

BOOL CsString::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 16);
  if (v2 != *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  int v3 = *(unsigned __int16 **)(a1 + 8);
  int v4 = *(unsigned __int16 **)(a2 + 8);
  uint64_t v5 = v2 - 1;
  do
  {
    int v7 = *v3++;
    int v6 = v7;
    int v9 = *v4++;
    int v8 = v9;
    BOOL v11 = v5-- != 0;
    BOOL result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

OcBinaryData *OcBinaryData::operator=(OcBinaryData *this, uint64_t a2)
{
  if ((OcBinaryData *)a2 != this)
  {
    this->unsigned int var7 = *(SsrwOOStream **)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&this->unsigned __int16 var1 = v4;
    if (HIDWORD(v4))
    {
      OcBinaryData::allocBuffer(this, HIDWORD(v4));
      memcpy(this->var5, *(const void **)(a2 + 24), this->var4);
    }
  }
  return this;
}

void *OcBinaryData::copyBuffer(OcBinaryData *this, const unsigned __int8 *a2, unsigned int a3)
{
  OcBinaryData::allocBuffer(this, a3);
  this->int var3 = a3;
  var5 = this->var5;
  return memcpy(var5, a2, a3);
}

BOOL OcBinaryData::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(unsigned int *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  BOOL v4 = v2 == v3;
  if (v2) {
    BOOL v5 = v2 == v3;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
  }
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v2) == 0;
  return v4;
}

BOOL OcBinaryReader::parsePropTypeInsideHyperlink(OcBinaryReader *this, unsigned int **a2, unsigned int *a3, int a4)
{
  if (!a2) {
    return 0;
  }
  BOOL v5 = *a2;
  if (*a2) {
    BOOL v6 = v5 >= a3;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || (unint64_t)((char *)a3 - (char *)*a2) < 4) {
    return 0;
  }
  int SInt32 = CsLeReadSInt32(v5);
  ++*a2;
  return SInt32 == a4;
}

uint64_t OcBinaryReader::parseLongPropInsideHyperlink(OcBinaryReader *this, unsigned int **a2, unsigned int *a3)
{
  BOOL v5 = OcBinaryReader::parsePropTypeInsideHyperlink(this, a2, a3, 3);
  if (!a2) {
    return 0;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a2;
  if (!*a2 || v6 >= a3 || (char *)a3 - (char *)v6 < 4) {
    return 0;
  }
  uint64_t result = CsLeReadSInt32(v6);
  ++*a2;
  return result;
}

void OcBinaryReader::parseStringPropInsideHyperlink(OcBinaryReader *this, unsigned __int16 **a2, unsigned __int8 *a3, CsString *a4)
{
  if (a2)
  {
    BOOL v6 = *a2;
    BOOL v7 = !*a2 || v6 >= (unsigned __int16 *)a3;
    if (!v7 && (unint64_t)(a3 - (unsigned __int8 *)*a2) >= 4)
    {
      int SInt32 = CsLeReadSInt32((unsigned int *)v6);
      BOOL v11 = (unsigned __int8 *)(*a2 + 2);
      *a2 = (unsigned __int16 *)v11;
      if (SInt32 == 31 && v11 < a3)
      {
        unsigned int v13 = a3 - v11 - 4;
        if ((a3 - v11) >= 4)
        {
          int v14 = CsLeReadSInt32((unsigned int *)v11);
          size_t v15 = (unsigned __int8 *)(*a2 + 2);
          *a2 = (unsigned __int16 *)v15;
          if (v14 >= 1)
          {
            unsigned int v16 = 2 * v14;
            if (v14)
            {
              if (v14 == 0x7FFFFFFF) {
                return;
              }
              v16 += 2;
            }
            if (v16 <= v13)
            {
              int v17 = v14 - 1;
              if (v14 == 1)
              {
                CsLeReadUInt16((unsigned __int16 *)v15);
                long long v19 = (unsigned __int8 *)(*a2 + 1);
                *a2 = (unsigned __int16 *)v19;
              }
              else
              {
                do
                {
                  unsigned __int16 UInt16 = CsLeReadUInt16(*a2);
                  ++*a2;
                  CsString::append(a4, UInt16);
                  --v17;
                }
                while (v17);
                CsLeReadUInt16(*a2);
                long long v19 = (unsigned __int8 *)(*a2 + 1);
                *a2 = (unsigned __int16 *)v19;
                if ((v14 & 1) == 0) {
                  return;
                }
              }
              CsLeReadUInt16((unsigned __int16 *)v19);
              ++*a2;
            }
          }
        }
      }
    }
  }
}

SsrwOOStorage **OcBinaryReader::readCustomProperties(OcBinaryReader *this, OcCustomProperties *a2)
{
  BOOL v4 = (SsrwOOStorage *)(*((uint64_t (**)(OcBinaryReader *))this->var0 + 11))(this);
  uint64_t v21 = 0;
  BOOL v5 = (const unsigned __int16 *)(*((uint64_t (**)(OcBinaryReader *))this->var0 + 12))(this);
  if (v5 && SsrwOOStorage::hasChild(v4, v5))
  {
    BOOL v6 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v4, v5);
    ChAutoPtr<SsrwOOStorage>::setValue(&v21, v6);
    BOOL v4 = v21;
  }
  FMTIDForStreamint Type = (_SsrwOO_GUID *)SsrwOOPropertyStorage::getFMTIDForStreamType(3);
  int v8 = (uint64_t **)SsrwOOStorage::openPropertyStorage(v4, FMTIDForStreamType);
  if (v8)
  {
    SsrwOOPropVariant::SsrwOOPropVariant((SsrwOOPropVariant *)v20);
    if (SsrwOOPropertyStorage::getPropertyValue(v8, 1, (SsrwOOPropVariant *)v20)) {
      *((_WORD *)a2 + 4) = SsrwOOPropVariant::getSInt2Value((SsrwOOPropVariant *)v20);
    }
    int NumberOfProperties = SsrwOOPropertyStorage::getNumberOfProperties(v8);
    if (NumberOfProperties)
    {
      for (unsigned int i = 0; i != NumberOfProperties; ++i)
      {
        unsigned int v19 = 0;
        __s1 = 0;
        SsrwOOPropertyStorage::getPropertyNameAndIDByIndex(v8, i, &__s1, &v19);
        BOOL v11 = __s1;
        if (__s1)
        {
          if (!strncmp(__s1, "_PID_", 5uLL))
          {
            SsrwOOPropertyStorage::freePropertyName((SsrwOOPropertyStorage *)v11, v12);
          }
          else
          {
            unsigned int v13 = (char *)operator new(0x18uLL);
            *(void *)unsigned int v13 = 0;
            SsrwOOPropVariant::SsrwOOPropVariant((SsrwOOPropVariant *)(v13 + 8));
            int v17 = (OcCustomProperty *)v13;
            if (SsrwOOPropertyStorage::getPropertyValue(v8, v19, (SsrwOOPropVariant *)(v13 + 8)))
            {
              OcCustomProperty::setName(v17, __s1);
              SsrwOOPropertyStorage::freePropertyName((SsrwOOPropertyStorage *)__s1, v14);
              size_t v15 = v17;
              int v17 = 0;
              OcCustomProperties::appendProperty(a2, v15);
            }
            else
            {
              __s1 = 0;
            }
            ChAutoPtr<OcCustomProperty>::~ChAutoPtr(&v17);
          }
        }
      }
    }
    SsrwOOPropertyStorage::close((uint64_t)v8);
    SsrwOOPropVariant::~SsrwOOPropVariant((SsrwOOPropVariant *)v20);
  }
  if (v21) {
    SsrwOOStorage::close(v21, 0);
  }
  if (v8) {
    ((void (*)(uint64_t **))(*v8)[1])(v8);
  }
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v21);
}

void sub_238DA2BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  _Unwind_Resume(a1);
}

void OcBinaryReader::readMacros(OcBinaryReader *a1, uint64_t a2, SsrwOOStorage *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_26EBD9B48;
  CsString::CsString((CsString *)(v6 + 8));
  *(void *)uint64_t v6 = &unk_26EBD9AF0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 4) = 0;
  OcBinaryReader::readMacroStorage(a1, (OcMacros::OcStorage *)v6, a3);
  *(void *)(a2 + 8) = v6;
}

void sub_238DA2D18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void OcBinaryReader::readMacroStorage(OcBinaryReader *this, OcMacros::OcStorage *a2, SsrwOOStorage *a3)
{
  unsigned int v23 = 0;
  int v22 = 0;
  SsrwOOStorage::getChildrenInfo(a3, &v23, &v22);
  if (v22 >= 1)
  {
    uint64_t v6 = 0;
    for (uint64_t i = 0; i < v22; ++i)
    {
      int v8 = (SsrwOOStgInfo *)((char *)v23 + v6);
      WcsName = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)v23 + v6));
      CsString::CsString(&v21);
      CsString::append(&v21, WcsName);
      int Type = SsrwOOStgInfo::getType(v8);
      if (Type == 1)
      {
        v19.int var0 = (void **)SsrwOOStorage::openStorage(a3, WcsName);
        int v14 = (char *)operator new(0x38uLL);
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 24) = 0u;
        *(_OWORD *)(v14 + 8) = 0u;
        *(void *)int v14 = &unk_26EBD9B48;
        CsString::CsString((CsString *)(v14 + 8));
        *(void *)int v14 = &unk_26EBD9AF0;
        *((void *)v14 + 5) = 0;
        *((void *)v14 + 6) = 0;
        *((void *)v14 + 4) = 0;
        *((_DWORD *)v14 + 6) = 0;
        bzero(*((void **)v14 + 2), 2 * *((unsigned int *)v14 + 7));
        CsString::append((CsString *)(v14 + 8), &v21);
        OcMacros::OcStorage::addChild(a2, (uint64_t)v14);
        OcBinaryReader::readMacroStorage(this, (OcMacros::OcStorage *)v14, (SsrwOOStorage *)v19.var0);
        ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)&v19);
      }
      else if (Type == 2)
      {
        BOOL v11 = SsrwOOStorage::openStream(a3, WcsName);
        unsigned int Size = 0;
        unsigned int Size = SsrwOOStgInfo::getSize(v8);
        OcBinaryData::OcBinaryData(&v19);
        OcBinaryData::allocBuffer(&v19, Size);
        (*(void (**)(SsrwOOStgStream *, char *, unsigned int *))(*(void *)v11 + 56))(v11, v19.var5, &Size);
        unsigned int v12 = Size;
        OcBinaryData::setMinimumCapacity(&v19, Size);
        v19.int var3 = v12;
        unsigned int v13 = (unsigned int *)operator new(0x50uLL);
        OcMacros::OcStream::OcStream((OcMacros::OcStream *)v13);
        v13[6] = 0;
        bzero(*((void **)v13 + 2), 2 * v13[7]);
        CsString::append((CsString *)(v13 + 2), &v21);
        OcBinaryData::operator=((OcBinaryData *)(v13 + 8), (uint64_t)&v19);
        OcMacros::OcStorage::addChild(a2, (uint64_t)v13);
        OcBinaryData::~OcBinaryData(&v19);
        (*(void (**)(SsrwOOStgStream *))(*(void *)v11 + 8))(v11);
      }
      CsString::~CsString(&v21);
      v6 += 184;
    }
  }
  if (v23)
  {
    size_t v15 = (char *)v23 - 16;
    uint64_t v16 = *((void *)v23 - 1);
    if (v16)
    {
      uint64_t v17 = 184 * v16;
      uint64_t v18 = (char *)v23 - 184;
      do
      {
        TSURectWithOriginAndSize(&v18[v17]);
        v17 -= 184;
      }
      while (v17);
    }
    MEMORY[0x23EC99790](v15, 0x1020C80285AA8CALL);
  }
}

void sub_238DA3034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CsString *a16)
{
  operator delete(v16);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)&a9);
  CsString::~CsString((CsString *)&a16);
  _Unwind_Resume(a1);
}

void OcMacros::OcStorage::addChild(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[6];
  uint64_t v4 = (uint64_t)(a1 + 6);
  unint64_t v5 = v6;
  BOOL v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[4];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    uint64_t v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int v8 = v17 + 8;
    unsigned int v20 = (char *)a1[4];
    OcBinaryData v19 = (char *)a1[5];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - CsString::CsString((CsString *)this + 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      OcBinaryData v19 = (char *)a1[4];
    }
    a1[4] = v17;
    a1[5] = v8;
    a1[6] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *BOOL v7 = a2;
    int v8 = v7 + 1;
  }
  a1[5] = v8;
}

void OcMacros::OcStorage::~OcStorage(OcMacros::OcStorage *this)
{
  OcMacros::OcStorage::~OcStorage(this);
  JUMPOUT(0x23EC997B0);
}

{
  void *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_26EBD9AF0;
  int v3 = (char *)this + 32;
  size_t v2 = (void *)*((void *)this + 4);
  if (((*((void *)v3 + 1) - (void)v2) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(void))(*(void *)v5 + 8))(v2[v4]);
        size_t v2 = (void *)*((void *)this + 4);
      }
      v2[v4++] = 0;
      size_t v2 = (void *)*((void *)this + 4);
    }
    while (v4 < ((*((void *)this + 5) - (void)v2) >> 3));
  }
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26EBD9B48;
  CsString::~CsString((CsString *)((char *)this + 8));
}

uint64_t OcMacros::OcStorage::getType(OcMacros::OcStorage *this)
{
  return 0;
}

OcMacros::OcStream *OcMacros::OcStream::OcStream(OcMacros::OcStream *this)
{
  *(void *)this = &unk_26EBD9B48;
  CsString::CsString((CsString *)((char *)this + 8));
  *(void *)this = &unk_26EBD9B70;
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 32));
  return this;
}

void sub_238DA339C(_Unwind_Exception *a1)
{
  void *v1 = v2;
  CsString::~CsString(v3);
  _Unwind_Resume(a1);
}

void OcMacros::OcStream::~OcStream(OcMacros::OcStream *this)
{
  *(void *)this = &unk_26EBD9B70;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  *(void *)this = &unk_26EBD9B48;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBD9B70;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 32));
  *(void *)this = &unk_26EBD9B48;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t OcMacros::OcStream::getType(OcMacros::OcStream *this)
{
  return 1;
}

OcCustomProperty **ChAutoPtr<OcCustomProperty>::~ChAutoPtr(OcCustomProperty **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    OcCustomProperty::~OcCustomProperty(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

SsrwOOStorage **OcBinaryWriter::copyStorageUsingTempVariables(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, SsrwOOStgInfo **a4, char **a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v39 = 0;
  CGRect v37 = 0;
  uint64_t v38 = 0;
  SsrwOOStorage::getChildrenInfo(a2, (SsrwOOStgInfo **)a3, &v39);
  if (v39 >= 1)
  {
    uint64_t v9 = 0;
    for (uint64_t i = 0; i < v39; ++i)
    {
      int Type = SsrwOOStgInfo::getType((SsrwOOStgInfo *)((char *)a3->var0 + v9));
      unsigned int v12 = (SsrwOOStgInfo *)((char *)a3->var0 + v9);
      if (Type != 2)
      {
        WcsName = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v12);
        Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(this, WcsName);
        ChAutoPtr<SsrwOOStorage>::setValue(&v38, Storage);
        uint64_t v24 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)a3->var0 + v9));
        int v25 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a2, v24);
        ChAutoPtr<SsrwOOStorage>::setValue(&v37, v25);
        uint64_t v27 = v38;
        if (v38)
        {
          id v28 = v37;
          if (v37)
          {
            int var0 = a3->var0;
            a3->int var0 = 0;
            OcBinaryWriter::copyStorageUsingTempVariables((OcBinaryWriter *)v27, v28, a3, a4, v26);
            a3->int var0 = var0;
            Info = SsrwOOStorage::getInfo(v37);
            SsrwOOStgInfo::getCLSID(Info, &v40);
            SsrwOOStorage::setClass(v38, &v40);
            SsrwOOStorage::close(v38, 0);
            SsrwOOStorage::close(v37, 0);
            ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(&Info);
          }
        }
        ChAutoPtr<SsrwOOStorage>::setValue(&v38, 0);
        ChAutoPtr<SsrwOOStorage>::setValue(&v37, 0);
        goto LABEL_14;
      }
      unint64_t v13 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v12);
      Stream = SsrwOOStorage::createStream(this, v13);
      unsigned int v15 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName((SsrwOOStgInfo *)((char *)a3->var0 + v9));
      uint64_t v16 = SsrwOOStorage::openStream(a2, v15);
      uint64_t v17 = (SsrwOOStream *)v16;
      if (Stream)
      {
        if (!v16) {
          goto LABEL_13;
        }
        uint64_t v18 = (SsrwOOStream *)(*(uint64_t (**)(SsrwOOStgStream *))(*(void *)v16 + 176))(v16);
        OcBinaryWriter::copyStreamUsingTempBuffer(Stream, v17, v18, a4, v19);
        unsigned int v20 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))v17->var0 + 21))(v17);
        __n128 CLSID = SsrwOOStgInfo::getCLSID(v20, &v40);
        (*(void (**)(SsrwOOStgStream *, _SsrwOO_GUID *, __n128))(*(void *)Stream + 160))(Stream, &v40, CLSID);
        (*(void (**)(SsrwOOStgStream *, void))(*(void *)Stream + 152))(Stream, 0);
        (*((void (**)(SsrwOOStream *, void))v17->var0 + 19))(v17, 0);
      }
      else if (!v16)
      {
        goto LABEL_14;
      }
      (*((void (**)(SsrwOOStream *))v17->var0 + 1))(v17);
      if (Stream) {
LABEL_13:
      }
        (*(void (**)(SsrwOOStgStream *))(*(void *)Stream + 8))(Stream);
LABEL_14:
      v9 += 184;
    }
  }
  Info = SsrwOOStorage::getInfo(a2);
  SsrwOOStgInfo::getCLSID(Info, &v40);
  SsrwOOStorage::setClass(this, &v40);
  uint64_t v30 = a3->var0;
  if (a3->var0)
  {
    CGFloat v31 = (char *)v30 - 16;
    uint64_t v32 = *((void *)v30 - 1);
    if (v32)
    {
      uint64_t v33 = 184 * v32;
      CGAffineTransform v34 = (char *)v30 - 184;
      do
      {
        TSURectWithOriginAndSize(&v34[v33]);
        v33 -= 184;
      }
      while (v33);
    }
    MEMORY[0x23EC99790](v31, 0x1020C80285AA8CALL);
  }
  a3->int var0 = 0;
  ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(&Info);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v37);
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v38);
}

void sub_238DA38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, SsrwOOStorage *);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va1);
  _Unwind_Resume(a1);
}

uint64_t OcBinaryWriter::copyStreamUsingTempBuffer(OcBinaryWriter *this, SsrwOOStream *a2, SsrwOOStream *a3, void *a4, char **a5)
{
  unsigned int v6 = a3;
  int v11 = 4000;
  unsigned int v12 = a3;
  uint64_t v9 = operator new[](0xFA0uLL);
  *a4 = v9;
  if (v6 >= 0xFA1)
  {
    do
    {
      int v11 = 4000;
      (*((void (**)(SsrwOOStream *, void, int *))a2->var0 + 7))(a2, *a4, &v11);
      (*(void (**)(OcBinaryWriter *, void, int *))(*(void *)this + 184))(this, *a4, &v11);
      v6 -= 4000;
      unsigned int v12 = v6;
    }
    while (v6 > 0xFA0);
    uint64_t v9 = (void *)*a4;
  }
  (*((void (**)(SsrwOOStream *, void *, unsigned int *))a2->var0 + 7))(a2, v9, &v12);
  (*(void (**)(OcBinaryWriter *, void, unsigned int *))(*(void *)this + 184))(this, *a4, &v12);
  uint64_t result = *a4;
  if (*a4) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *a4 = 0;
  return result;
}

uint64_t OcBinaryWriter::copyStreamWithName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *__s, const char *a4)
{
  unsigned int v6 = (SsrwOOStream *)SsrwOOStorage::openStream(a2, (const char *)__s);
  if (!v6) {
    return 0;
  }
  Stream = SsrwOOStorage::createStream(this, (const char *)__s);
  uint64_t v9 = Stream;
  if (Stream) {
    uint64_t v10 = OcBinaryWriter::copyStream(Stream, v6, v8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*((void (**)(SsrwOOStream *))v6->var0 + 1))(v6);
  uint64_t v11 = v10;
  if (v9) {
    (*(void (**)(SsrwOOStgStream *))(*(void *)v9 + 8))(v9);
  }
  return v11;
}

void sub_238DA3BFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x238DA3BB8);
  }
  JUMPOUT(0x238DA3B88);
}

uint64_t OcBinaryWriter::copyStream(OcBinaryWriter *this, SsrwOOStream *a2, SsrwOOStream *a3)
{
  uint64_t v5 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  uint64_t v6 = (*(uint64_t (**)(OcBinaryWriter *))(*(void *)this + 40))(this);
  (*((void (**)(SsrwOOStream *, void, void))a2->var0 + 2))(a2, 0, 0);
  (*(void (**)(OcBinaryWriter *, void, void))(*(void *)this + 16))(this, 0, 0);
  uint64_t v11 = 0;
  BOOL v7 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))a2->var0 + 21))(a2);
  unsigned int Size = (SsrwOOStream *)SsrwOOStgInfo::getSize(v7);
  OcBinaryWriter::copyStreamUsingTempBuffer(this, a2, Size, &v11, v9);
  (*((void (**)(SsrwOOStream *, uint64_t, void))a2->var0 + 2))(a2, v5, 0);
  (*(void (**)(OcBinaryWriter *, uint64_t, void))(*(void *)this + 16))(this, v6, 0);
  return 1;
}

void sub_238DA3DB4(void *a1)
{
}

uint64_t OcBinaryWriter::copyStreamWithName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, const unsigned __int16 *a4)
{
  uint64_t v6 = (SsrwOOStream *)SsrwOOStorage::openStream(a2, (const unsigned __int16 *)a3);
  if (!v6) {
    return 0;
  }
  Stream = SsrwOOStorage::createStream(this, (unsigned __int16 *)a3);
  uint64_t v9 = Stream;
  if (Stream) {
    uint64_t v10 = OcBinaryWriter::copyStream(Stream, v6, v8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*((void (**)(SsrwOOStream *))v6->var0 + 1))(v6);
  uint64_t v11 = v10;
  if (v9) {
    (*(void (**)(SsrwOOStgStream *))(*(void *)v9 + 8))(v9);
  }
  return v11;
}

void sub_238DA3EC0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x238DA3E7CLL);
  }
  JUMPOUT(0x238DA3E4CLL);
}

uint64_t OcBinaryWriter::copyMissingChildStorageWithUnicodeName(SsrwOOStorage *this, SsrwOOStorage *a2, SsrwOOStorage *a3, const unsigned __int16 *a4)
{
  if (!SsrwOOStorage::hasChild(a2, (const unsigned __int16 *)a3)
    || (SsrwOOStorage::hasChild(this, (const unsigned __int16 *)a3) & 1) != 0)
  {
    return 1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(this, (unsigned __int16 *)a3);
  uint64_t v10 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a2, (const unsigned __int16 *)a3);
  unsigned int v12 = v10;
  if (Storage && v10)
  {
    OcBinaryWriter::copyStorageUsingTempVariables(Storage, v10, (SsrwOOStorage *)&v19, &v18, v11);
    uint64_t v13 = 1;
LABEL_9:
    SsrwOOStorage::~SsrwOOStorage(v12);
    MEMORY[0x23EC997B0]();
    uint64_t v7 = v13;
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  uint64_t v7 = 0;
  if (v10) {
    goto LABEL_9;
  }
LABEL_10:
  if (Storage)
  {
    SsrwOOStorage::~SsrwOOStorage(Storage);
    MEMORY[0x23EC997B0]();
  }
  if (v19)
  {
    uint64_t v14 = v19 - 16;
    uint64_t v15 = *(void *)(v19 - 8);
    if (v15)
    {
      uint64_t v16 = 184 * v15;
      uint64_t v17 = v19 - 184;
      do
      {
        TSURectWithOriginAndSize(v17 + v16);
        v16 -= 184;
      }
      while (v16);
    }
    MEMORY[0x23EC99790](v14, 0x1020C80285AA8CALL);
  }
  uint64_t v19 = 0;
  if (v18) {
    MEMORY[0x23EC99790](v18, 0x1000C8077774924);
  }
  return v7;
}

uint64_t *OcContact::clear(uint64_t *this)
{
  uint64_t v1 = *this;
  if (((this[1] - *this) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = *(uint64_t **)(v1 + 8 * v3);
      if (this)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
        uint64_t v1 = *v2;
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = *v2;
    }
    while (v3 < ((unint64_t)(v2[1] - *v2) >> 3));
  }
  return this;
}

void OcContact::~OcContact(OcContact *this)
{
  OcContact::clear((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + CsString::CsString((CsString *)this + 1) = v2;
    operator delete(v2);
  }
}

void OcContactCollection::addContact(OcContactCollection *this, OcContact *a2)
{
  unint64_t v6 = *((void *)this + 2);
  uint64_t v4 = (char *)this + 16;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (unint64_t)v7 - *(void *)this;
    unint64_t v10 = (v5 - *(void *)this) >> 3;
    unsigned int v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1) {
      unsigned int v11 = (v9 >> 3) + 1;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v12);
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v13[v9 & 0x7FFFFFFF8];
    uint64_t v17 = &v13[8 * v15];
    *(void *)uint64_t v16 = a2;
    int v8 = v16 + 8;
    uint64_t v19 = *(char **)this;
    uint64_t v18 = (char *)*((void *)this + 1);
    if (v18 != *(char **)this)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - CsString::CsString((CsString *)this + 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = *(char **)this;
    }
    *(void *)this = v16;
    *((void *)this + CsString::CsString((CsString *)this + 1) = v8;
    *((void *)this + CsString::CsString((CsString *)this + 2) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + CsString::CsString((CsString *)this + 1) = v8;
}

void OcCustomProperty::~OcCustomProperty(OcCustomProperty *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
  }
  *(void *)this = 0;
  SsrwOOPropVariant::~SsrwOOPropVariant((OcCustomProperty *)((char *)this + 8));
}

void *OcCustomProperty::setName(OcCustomProperty *this, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  unint64_t v5 = operator new[](v4);
  *(void *)this = v5;
  return memcpy(v5, __s, v4);
}

void XmlBufferOutputStream::XmlBufferOutputStream(XmlBufferOutputStream *this, char *a2, int a3)
{
  *(void *)this = &unk_26EBD9BB0;
  *((void *)this + CsString::CsString((CsString *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5100;
  }
}

void XmlBufferOutputStream::~XmlBufferOutputStream(XmlBufferOutputStream *this)
{
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  *(void *)this = &unk_26EBD9BB0;
}

{
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  *(void *)this = &unk_26EBD9BB0;
  JUMPOUT(0x23EC997B0);
}

void *XmlBufferOutputStream::write(XmlBufferOutputStream *this, const char *a2, int a3)
{
  uint64_t v5 = *((int *)this + 5);
  int v6 = *((_DWORD *)this + 4) - v5;
  if (v6 >= a3) {
    int v7 = a3;
  }
  else {
    int v7 = *((_DWORD *)this + 4) - v5;
  }
  uint64_t result = memmove((void *)(*((void *)this + 1) + v5), a2, v7);
  *((_DWORD *)this + 5) += v7;
  if (v6 < a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5100;
  }
  return result;
}

uint64_t XmlBufferOutputStream::write(XmlBufferOutputStream *this, const unsigned __int16 *a2, int a3)
{
  return (*(uint64_t (**)(XmlBufferOutputStream *, const unsigned __int16 *, void))(*(void *)this + 16))(this, a2, (2 * a3));
}

uint64_t XmlBufferOutputStream::write(XmlBufferOutputStream *this, __int16 a2)
{
  __int16 v3 = a2;
  return (*(uint64_t (**)(XmlBufferOutputStream *, __int16 *, uint64_t))(*(void *)this + 24))(this, &v3, 1);
}

void *OcMailRecord::makeMailRecord(OcMailRecord *this, int a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  switch(v2)
  {
    case 2:
      if (a2 == 12299)
      {
        uint64_t result = operator new(0x18uLL);
        uint64_t v5 = &unk_26EBD9DD0;
      }
      else
      {
        uint64_t result = operator new(0x20uLL);
        uint64_t v5 = &unk_26EBD9E18;
      }
      goto LABEL_13;
    case 3:
    case 10:
      uint64_t result = operator new(0x18uLL);
      size_t v4 = &unk_26EBD9D40;
      goto LABEL_10;
    case 4:
      uint64_t result = operator new(0x30uLL);
      size_t v4 = &unk_26EBD9CF8;
      goto LABEL_10;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 11:
      uint64_t result = operator new(0x10uLL);
      size_t v4 = &unk_26EBD9C58;
      goto LABEL_10;
    default:
      if (v2 == 31)
      {
        uint64_t result = operator new(0x18uLL);
        uint64_t v5 = &unk_26EBD9D88;
LABEL_13:
        *uint64_t result = v5;
        result[2] = 0;
      }
      else
      {
        if (v2 != 64) {
          return result;
        }
        uint64_t result = operator new(0x18uLL);
        size_t v4 = &unk_26EBD9CB0;
LABEL_10:
        *uint64_t result = v4;
      }
      *((unsigned char *)result + 8) = v2;
      return result;
  }
}

void MR_3::~MR_3(MR_3 *this)
{
}

uint64_t MR_3::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

void MR_2::~MR_2(MR_2 *this)
{
}

uint64_t MR_2::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

void MR_4::~MR_4(MR_4 *this)
{
}

uint64_t MR_4::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void MR_1::~MR_1(MR_1 *this)
{
}

uint64_t MR_1::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

void MR_Unicode::~MR_Unicode(MR_Unicode *this)
{
  *(void *)this = &unk_26EBD9D88;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C40BDFB0063);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD9D88;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C40BDFB0063);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
  JUMPOUT(0x23EC997B0);
}

uint64_t MR_Unicode::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

void MR_Ascii::~MR_Ascii(MR_Ascii *this)
{
  *(void *)this = &unk_26EBD9DD0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD9DD0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
  JUMPOUT(0x23EC997B0);
}

uint64_t MR_Ascii::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

void MR_Blob::~MR_Blob(MR_Blob *this)
{
  *(void *)this = &unk_26EBD9E18;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBD9E18;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
    *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  }
  JUMPOUT(0x23EC997B0);
}

uint64_t MR_Blob::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
}

uint64_t OcMailRecordParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  int v6 = 12;
  (*(void (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2 + 13, &v6);
  int v5 = 16;
  return (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2 + 25, &v5);
}

{
  uint64_t result;
  int v5;

  int v5 = 16;
  (*(void (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2 + 13, &v5);
  (*(void (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2 + 29, &v5);
  (*(void (**)(void, uint64_t, int *))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2 + 45, &v5);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  *(unsigned char *)(a2 + 6CsString::CsString((CsString *)this + 1) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  *(_WORD *)(a2 + 14) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

{
  uint64_t result;

  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Ascii *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  int v5 = operator new[]((v4 + 1));
  *((void *)a2 + CsString::CsString((CsString *)this + 2) = v5;
  int v7 = v4;
  return (*(uint64_t (**)(void, int *, void *))(**((void **)this + 1) + 144))(*((void *)this + 1), &v7, v5);
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Unicode *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  unsigned int v7 = v4 >> 1;
  int v5 = operator new[]((v4 & 0xFFFFFFFE) + 2);
  *((void *)a2 + CsString::CsString((CsString *)this + 2) = v5;
  return (*(uint64_t (**)(void, unsigned int *, void *))(**((void **)this + 1) + 136))(*((void *)this + 1), &v7, v5);
}

uint64_t OcMailRecordParserVisitor::visit(OcMailRecordParserVisitor *this, MR_Blob *a2)
{
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 1CsString::CsString((CsString *)this + 2) = v4;
  int v5 = operator new[](v4);
  *((void *)a2 + CsString::CsString((CsString *)this + 2) = v5;
  int v7 = *((unsigned __int16 *)a2 + 12);
  return (*(uint64_t (**)(void, void *, int *))(**((void **)this + 1) + 56))(*((void *)this + 1), v5, &v7);
}

void OcMailRecordParserVisitor::~OcMailRecordParserVisitor(OcMailRecordParserVisitor *this)
{
}

void *OcMsoEnvelope::reserveExtraData(OcMsoEnvelope *this, unsigned int a2)
{
  uint64_t result = operator new[](a2);
  *((void *)this + 4CsString::CsString((CsString *)this + 1) = result;
  return result;
}

void OCChRectI4WithCGRect(CGRect a1@<0:D0, 8:D1, 16:D2, 24:D3>, _DWORD *a2@<X8>)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  int v7 = llround(CGRectGetMinX(a1));
  v11.origin.CGFloat x = x;
  v11.origin.CGFloat y = y;
  v11.size.CGFloat width = width;
  v11.size.CGFloat height = height;
  int v8 = llround(CGRectGetMinY(v11));
  v12.origin.CGFloat x = x;
  v12.origin.CGFloat y = y;
  v12.size.CGFloat width = width;
  v12.size.CGFloat height = height;
  int v9 = llround(CGRectGetMaxX(v12));
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  double MaxY = CGRectGetMaxY(v13);
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  a2[3] = llround(MaxY);
}

void OcParser::~OcParser(OcParser *this)
{
  *(void *)this = &unk_26EBD9EE8;
}

{
  *(void *)this = &unk_26EBD9EE8;
  JUMPOUT(0x23EC997B0);
}

CsString *OcParser::makeStringFromStream(OcParser *this, CsString *a2, SsrwOOStream *a3, int a4, int a5)
{
  int v6 = a4;
  if (a4
    || (result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 10))(a3), (int v6 = (int)result) != 0))
  {
    CsString::reserve(a2, v6);
    v11[0] = v6;
    if (a5)
    {
      unint64_t v10 = (const char *)operator new[]((v6 + 1));
      (*((void (**)(SsrwOOStream *, unsigned int *, const char *))a3->var0 + 18))(a3, v11, v10);
      uint64_t result = (CsString *)_ChMbstowcs(a2->var1, v10, (int)v11[0]);
      if (v10) {
        return (CsString *)MEMORY[0x23EC99790](v10, 0x1000C8077774924);
      }
    }
    else
    {
      (*((void (**)(SsrwOOStream *, unsigned int *, unsigned __int16 *))a3->var0 + 17))(a3, v11, a2->var1);
      return CsString::setCount(a2, v11[0]);
    }
  }
  return result;
}

CsString *OcParser::parseFromRecord(OcParser *this, int a2, FromRecord *a3, SsrwOOStream *a4)
{
  (*((void (**)(SsrwOOStream *))a4->var0 + 12))(a4);
  int v13 = 16;
  (*((void (**)(SsrwOOStream *, char *, int *))a4->var0 + 7))(a4, (char *)a3 + 4, &v13);
  *(_WORD *)a3 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  int v7 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  __int16 v8 = (__int16)v7;
  *((_WORD *)a3 + CsString::CsString((CsString *)this + 1) = (_WORD)v7;
  if (*(unsigned char *)a3)
  {
    int v7 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 12))(a4);
    int v9 = -28;
  }
  else
  {
    int v9 = -24;
  }
  unsigned int v10 = v9 + a2;
  if ((v8 & 0x1000) != 0)
  {
    if (v10 >= 0x20000) {
      goto LABEL_12;
    }
    v10 >>= 1;
  }
  else if (v10 >= 0x10000)
  {
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8001;
  }
  OcParser::makeStringFromStream(v7, (CsString *)a3 + 1, a4, (unsigned __int16)v10, (v8 & 0x1000) == 0);
  uint64_t result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))a4->var0 + 9))(a4);
  if (result) {
    return OcParser::makeStringFromStream((OcParser *)result, (CsString *)a3 + 2, a4, (unsigned __int16)result, 0);
  }
  return result;
}

OcParser *OcParser::parse(OcParser *this, OcMsoEnvelope *a2, SsrwOOStream *a3, uint64_t a4, int a5)
{
  if (a5)
  {
    int v7 = a4;
    int v9 = this;
    *(unsigned char *)a2 = 1;
    (*((void (**)(SsrwOOStream *, uint64_t, void))a3->var0 + 2))(a3, a4, 0);
    if ((*((unsigned int (**)(SsrwOOStream *))a3->var0 + 9))(a3) != -4070)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 8010;
    }
    (*((void (**)(SsrwOOStream *, void, void))a3->var0 + 2))(a3, (v7 + 20), 0);
    *((_DWORD *)a2 + CsString::CsString((CsString *)this + 1) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    unsigned int v10 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + 4) = v10;
    OcParser::makeStringFromStream(v10, (CsString *)a2 + 1, a3, 0, 0);
    CGRect v11 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    if (v11) {
      OcParser::parseFromRecord(v11, (int)v11, (OcMsoEnvelope *)((char *)a2 + 48), a3);
    }
    else {
      (*((void (**)(SsrwOOStream *))a3->var0 + 9))(a3);
    }
    if (!(*((unsigned int (**)(SsrwOOStream *))a3->var0 + 9))(a3)) {
      (*((void (**)(SsrwOOStream *))a3->var0 + 9))(a3);
    }
    *((_DWORD *)a2 + 3) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + CsString::CsString((CsString *)this + 2) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_WORD *)a2 + 60) = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    CGRect v12 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_WORD *)a2 + 6CsString::CsString((CsString *)this + 1) = (_WORD)v12;
    OcParser::makeStringFromStream(v12, (CsString *)((char *)a2 + 128), a3, 0, 0);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    int v13 = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    *((_DWORD *)a2 + 38) = v13;
    StringFromStream = OcParser::makeStringFromStream(v13, (CsString *)((char *)a2 + 160), a3, 0, 0);
    OcParser::makeStringFromStream((OcParser *)StringFromStream, (CsString *)((char *)a2 + 184), a3, 0, 1);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 208), a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 256), a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    OcParser::parseContactCollection(v9, (OcMsoEnvelope *)((char *)a2 + 232), a3);
    unsigned int v15 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    if (v15 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3))
    {
      unsigned int v23 = __cxa_allocate_exception(4uLL);
      *unsigned int v23 = 8001;
    }
    for (; v15; --v15)
    {
      (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      uint64_t v16 = OcMsoEnvelope::addAttachment(a2);
      int v17 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 8))(a3);
      uint64_t v18 = CsString::reserve(v16, v17);
      OcParser::makeStringFromStream((OcParser *)v18, v16, a3, v17, 0);
      unsigned int v19 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      LODWORD(v16[1].var0) = v19;
      if (v19 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3))
      {
        uint64_t v21 = __cxa_allocate_exception(4uLL);
        _DWORD *v21 = 8001;
      }
      (*((void (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      v16[1].unsigned __int16 var1 = (unsigned __int16 *)operator new[](LODWORD(v16[1].var0));
      (*((void (**)(SsrwOOStream *))a3->var0 + 7))(a3);
    }
    unsigned int v25 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
    CsString::reserve((CsString *)((char *)a2 + 280), v25);
    (*((void (**)(SsrwOOStream *, void, unsigned int *))a3->var0 + 7))(a3, *((void *)a2 + 36), &v25);
    CsString::setCount((CsString *)((char *)a2 + 280), v25);
    this = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 5))(a3);
    signed int v20 = this - (a5 + v7);
    if (v20 >= 1)
    {
      int v24 = this - (a5 + v7);
      OcMsoEnvelope::reserveExtraData(a2, v20);
      return (OcParser *)(*((uint64_t (**)(SsrwOOStream *, void, int *))a3->var0 + 7))(a3, *((void *)a2 + 41), &v24);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return this;
}

void sub_238DA5CC8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x238DA5C40);
  }
  _Unwind_Resume(a1);
}

OcParser *OcParser::parseContactCollection(OcParser *this, OcContactCollection *a2, SsrwOOStream *a3)
{
  unsigned int v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
  uint64_t result = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 6))(a3);
  if (v5 > result) {
    goto LABEL_9;
  }
  if (v5)
  {
    int v7 = 0;
    while (1)
    {
      __int16 v8 = (OcContact *)operator new(0x18uLL);
      OcContact::OcContact(v8);
      OcContactCollection::addContact(a2, v8);
      unsigned int v9 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3);
      if (v9 > (*((unsigned int (**)(SsrwOOStream *))a3->var0 + 6))(a3)) {
        break;
      }
      for (uint64_t result = (OcParser *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 12))(a3); v9; --v9)
        uint64_t result = (OcParser *)OcParser::parseMailRecord(result, v8, a3);
      if (++v7 == v5) {
        return result;
      }
    }
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8001;
  }
  return result;
}

void sub_238DA5E9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CsString *OcMsoEnvelope::addAttachment(OcMsoEnvelope *this)
{
  uint64_t v2 = (CsString *)operator new(0x28uLL);
  CsString::CsString(v2);
  v2[1].unsigned __int16 var1 = 0;
  unsigned __int16 v4 = (CsString **)*((void *)this + 39);
  unint64_t v3 = *((void *)this + 40);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *((void *)this + 38);
    unint64_t v7 = (unint64_t)v4 - v6;
    unint64_t v8 = (v3 - v6) >> 3;
    unsigned int v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1) {
      unsigned int v9 = (v7 >> 3) + 1;
    }
    if (v8 >= 0x7FFFFFFF) {
      unint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      CGRect v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 320, v10);
      uint64_t v13 = v12;
    }
    else
    {
      CGRect v11 = 0;
      uint64_t v13 = 0;
    }
    unsigned int v14 = (CsString **)&v11[v7 & 0x7FFFFFFF8];
    unsigned int v15 = &v11[8 * v13];
    *unsigned int v14 = v2;
    unsigned int v5 = v14 + 1;
    int v17 = (char *)*((void *)this + 38);
    uint64_t v16 = (char *)*((void *)this + 39);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = (CsString *)*((void *)v16 - 1);
        v16 -= 8;
        *--unsigned int v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*((void *)this + 38);
    }
    *((void *)this + 38) = v14;
    *((void *)this + 39) = v5;
    *((void *)this + 40) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unsigned __int16 v4 = v2;
    unsigned int v5 = v4 + 1;
  }
  *((void *)this + 39) = v5;
  return v2;
}

void sub_238DA5FA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OcParser::parseMailRecord(OcParser *this, OcContact *a2, SsrwOOStream *a3)
{
  unsigned int v5 = (OcMailRecord *)(*((uint64_t (**)(SsrwOOStream *))a3->var0 + 8))(a3);
  (*((void (**)(SsrwOOStream *))a3->var0 + 8))(a3);
  unsigned __int16 v6 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  MailRecord = (OcContact *)OcMailRecord::makeMailRecord(v5, v6);
  OcContactCollection::addContact(a2, MailRecord);
  if (v5)
  {
    *((_WORD *)MailRecord + 5) = v6;
    v10[0] = &unk_26EBD9E60;
    v10[1] = a3;
    return (*(uint64_t (**)(OcContact *, void *))(*(void *)MailRecord + 16))(MailRecord, v10);
  }
  else
  {
    unsigned int v9 = (uint64_t (*)(SsrwOOStream *))*((void *)a3->var0 + 9);
    return v9(a3);
  }
}

uint64_t OcParser::parsePointI4FromStream@<X0>(OcParser *this@<X0>, SsrwOOStream *a2@<X1>, _DWORD *a3@<X8>)
{
  int v5 = (*(uint64_t (**)(OcParser *, SsrwOOStream *))(*(void *)this + 96))(this, a2);
  uint64_t result = (*(uint64_t (**)(OcParser *))(*(void *)this + 96))(this);
  *a3 = v5;
  a3[1] = result;
  return result;
}

unint64_t OcParser::parseSystemTimeFromStream(OcParser *this, SsrwOOStream *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OcParser *, SsrwOOStream *))(*(void *)this + 80))(this, a2);
  unsigned __int8 v4 = (*(uint64_t (**)(OcParser *))(*(void *)this + 80))(this);
  (*(void (**)(OcParser *))(*(void *)this + 80))(this);
  unsigned __int8 v5 = (*(uint64_t (**)(OcParser *))(*(void *)this + 80))(this);
  unsigned __int8 v6 = (*(uint64_t (**)(OcParser *))(*(void *)this + 80))(this);
  unsigned __int8 v7 = (*(uint64_t (**)(OcParser *))(*(void *)this + 80))(this);
  unsigned __int8 v8 = (*(uint64_t (**)(OcParser *))(*(void *)this + 80))(this);
  (*(void (**)(OcParser *))(*(void *)this + 80))(this);
  return ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48) | ((unint64_t)v6 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | v3;
}

EshObjectFactory *OcReader::getEscherObjectFactory(OcReader *this)
{
  return this->var1;
}

void OcText::remove(OcText *this, int a2, int a3)
{
  if (!a3 || (unsigned int var3 = this->var3, a3 + a2 > var3))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (a2 || var3 != a3)
  {
    char isSingleByteEncoding = OcText::isSingleByteEncoding(this->var1);
    memmove(&this->var5[(a2 << (isSingleByteEncoding ^ 1)) + this->var2], &this->var5[(a2 << (isSingleByteEncoding ^ 1)) + this->var2 + (a3 << (isSingleByteEncoding ^ 1))], (var3 << (isSingleByteEncoding ^ 1)) - ((a3 << (isSingleByteEncoding ^ 1)) + (a2 << (isSingleByteEncoding ^ 1))));
    this->var3 -= a3;
  }
  else
  {
    var5 = this->var5;
    if (var5)
    {
      size_t var4 = this->var4;
      bzero(var5, var4);
    }
  }
}

unsigned int *OcText::convert(unsigned int *result, int a2)
{
  int v2 = result[2];
  if (v2 != a2)
  {
    unsigned __int8 v4 = result;
    uint64_t v5 = result[4];
    if (!v5) {
      goto LABEL_14;
    }
    if (v2)
    {
      unsigned __int8 v6 = (const void **)(result + 8);
      uint64_t result = (unsigned int *)OcText::convert((unsigned __int16 **)result + 4, *((char **)result + 3), a2, v2, v5);
      if (result != -1)
      {
        unsigned int v7 = result;
        if (*((unsigned char *)v4 + 40))
        {
          uint64_t result = (unsigned int *)v4[3];
          if (v7 <= *((_DWORD *)v4 + 5))
          {
            memcpy(result, *v6, v7);
            uint64_t result = (unsigned int *)*v6;
            if (*v6) {
              uint64_t result = (unsigned int *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
            }
            *unsigned __int8 v6 = 0;
            goto LABEL_14;
          }
          if (result) {
            uint64_t result = (unsigned int *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
          }
        }
        else
        {
          *((unsigned char *)v4 + 40) = 1;
        }
        v4[3] = v4[4];
        v4[4] = 0;
        *((_DWORD *)v4 + 5) = v7;
LABEL_14:
        *((_DWORD *)v4 + CsString::CsString((CsString *)this + 2) = a2;
        return result;
      }
      exception = __cxa_allocate_exception(4uLL);
      int v9 = 1009;
    }
    else
    {
      exception = __cxa_allocate_exception(4uLL);
      int v9 = 1003;
    }
    _DWORD *exception = v9;
  }
  return result;
}

uint64_t XmlBase64EncoderStream::XmlBase64EncoderStream(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26EBDA048;
  *(void *)(result + 8) = a2;
  *(unsigned char *)(result + 20) = 0;
  return result;
}

void XmlBase64EncoderStream::~XmlBase64EncoderStream(XmlBase64EncoderStream *this)
{
  *(void *)this = &unk_26EBDA048;
  XmlBase64EncoderStream::Terminate(this);
}

{
  uint64_t vars8;

  XmlBase64EncoderStream::~XmlBase64EncoderStream(this);
  JUMPOUT(0x23EC997B0);
}

XmlBase64EncoderStream *XmlBase64EncoderStream::write(XmlBase64EncoderStream *this, char *a2, int a3)
{
  if (a3 >= 1)
  {
    unsigned __int8 v4 = this;
    uint64_t v5 = a3;
    LOBYTE(v6) = *((unsigned char *)this + 20);
    do
    {
      char v7 = *a2++;
      *((unsigned char *)v4 + v6 + 16) = v7;
      int v6 = (*((unsigned char *)v4 + 20))++ + 1;
      if (v6 == 3)
      {
        this = (XmlBase64EncoderStream *)XmlBase64EncoderStream::flush(v4, 4);
        LOBYTE(v6) = 0;
        *((unsigned char *)v4 + 20) = 0;
      }
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlBase64EncoderStream::flush(XmlBase64EncoderStream *this, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v2 = *((unsigned __int8 *)this + 16);
  v6[0] = XmlBase64EncoderStream::flush(char)::base64Table[v2 >> 2];
  unint64_t v3 = *((unsigned __int8 *)this + 17);
  v6[1] = XmlBase64EncoderStream::flush(char)::base64Table[(v3 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v2 & 3))];
  unint64_t v4 = *((unsigned __int8 *)this + 18);
  CGFloat v6[2] = XmlBase64EncoderStream::flush(char)::base64Table[(v4 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v3 & 0xF))];
  void v6[3] = XmlBase64EncoderStream::flush(char)::base64Table[v4 & 0x3F];
  return (*(uint64_t (**)(void, _WORD *, uint64_t))(**((void **)this + 1) + 24))(*((void *)this + 1), v6, a2);
}

unsigned char *XmlBase64EncoderStream::Terminate(unsigned char *this)
{
  uint64_t v1 = this;
  int v2 = (char)this[20];
  if (this[20])
  {
    if (v2 == 2)
    {
      this[18] = 0;
      XmlBase64EncoderStream::flush((XmlBase64EncoderStream *)this, 3);
      unint64_t v3 = v1 + 8;
    }
    else
    {
      if (v2 != 1)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 5100;
      }
      this[17] = 0;
      XmlBase64EncoderStream::flush((XmlBase64EncoderStream *)this, 2);
      unint64_t v3 = v1 + 8;
      (*(void (**)(void, uint64_t))(**((void **)v1 + 1) + 32))(*((void *)v1 + 1), 61);
    }
    this = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v3 + 32))(*v3, 61);
  }
  v1[20] = 0;
  return this;
}

uint64_t XmlHexEncoderStream::XmlHexEncoderStream(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EBDA0A0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = operator new[](0x40uLL);
  return a1;
}

void XmlHexEncoderStream::~XmlHexEncoderStream(XmlHexEncoderStream *this)
{
  *(void *)this = &unk_26EBDA0A0;
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDA0A0;
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XmlHexEncoderStream::write(uint64_t this, const char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v5 = this;
    int v6 = 0;
    int v7 = *(_DWORD *)(this + 16);
    do
    {
      if (v7 >= 0) {
        int v8 = v7;
      }
      else {
        int v8 = v7 + 15;
      }
      if ((v7 & 0xF) == 0)
      {
        if (a3 > 0x10 || v7)
        {
          (*(void (**)(void, uint64_t))(**(void **)(v5 + 8) + 32))(*(void *)(v5 + 8), 13);
          (*(void (**)(void, uint64_t))(**(void **)(v5 + 8) + 32))(*(void *)(v5 + 8), 10);
          (*(void (**)(void, uint64_t))(**(void **)(v5 + 8) + 32))(*(void *)(v5 + 8), 9);
          int v7 = *(_DWORD *)(v5 + 16);
        }
        snprintf(*(char **)(v5 + 24), 0x40uLL, "0x%08X  - ", v7);
        (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 8) + 16))(*(void *)(v5 + 8), *(void *)(v5 + 24), 14);
        int v7 = *(_DWORD *)(v5 + 16);
      }
      signed int v9 = (v8 & 0xFFFFFFF0) - v7 + 16;
      if (a3 - v6 >= v9) {
        int v10 = v9;
      }
      else {
        int v10 = a3 - v6;
      }
      this = XmlHexEncoderStream::flushChunk((XmlHexEncoderStream *)v5, a2, v6, v10);
      v6 += v10;
      int v7 = *(_DWORD *)(v5 + 16) + v10;
      *(_DWORD *)(v5 + 16) = v7;
    }
    while (v6 < a3);
  }
  return this;
}

uint64_t XmlHexEncoderStream::flushChunk(XmlHexEncoderStream *this, const char *a2, int a3, int a4)
{
  uint64_t v5 = (char *)*((void *)this + 3);
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = &a2[a3];
    uint64_t v8 = a4;
    do
    {
      int v9 = v7[v6];
      uint64_t v10 = *((void *)this + 3);
      if (v6 == 8)
      {
        v5 += snprintf(v5, v10 - (void)v5 + 64, " ");
        uint64_t v10 = *((void *)this + 3);
      }
      v5 += snprintf(v5, v10 - (void)v5 + 64, " %02X", v9);
      ++v6;
    }
    while (v8 != v6);
  }
  CGRect v11 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v11();
}

uint64_t XmlHexEncoderStream::flush(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

XmlBufferOutputStream *XmlOutputStream::createBufferStream(XmlOutputStream *this, char *a2)
{
  int v2 = (int)a2;
  unint64_t v4 = (XmlBufferOutputStream *)operator new(0x18uLL);
  XmlBufferOutputStream::XmlBufferOutputStream(v4, (char *)this, v2);
  return v4;
}

void sub_238DA6CD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

XmlUTF8EncoderStream *XmlOutputStream::createStreamOfType(int a1, XmlOutputStream *a2)
{
  if (a1 == 3)
  {
    unint64_t v3 = (XmlUTF8EncoderStream *)operator new(0x20uLL);
    XmlHexEncoderStream::XmlHexEncoderStream((uint64_t)v3, (uint64_t)a2);
  }
  else if (a1 == 1)
  {
    unint64_t v3 = (XmlUTF8EncoderStream *)operator new(0x10uLL);
    XmlUTF8EncoderStream::XmlUTF8EncoderStream(v3, a2);
  }
  else if (a1)
  {
    return 0;
  }
  else
  {
    unint64_t v3 = (XmlUTF8EncoderStream *)operator new(0x18uLL);
    XmlBase64EncoderStream::XmlBase64EncoderStream((uint64_t)v3, (uint64_t)a2);
  }
  return v3;
}

void sub_238DA6D80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XmlUTF8EncoderStream::XmlUTF8EncoderStream(XmlUTF8EncoderStream *this, XmlOutputStream *a2)
{
  *(void *)this = &unk_26EBDA0F8;
  *((void *)this + CsString::CsString((CsString *)this + 1) = a2;
}

void XmlUTF8EncoderStream::~XmlUTF8EncoderStream(XmlUTF8EncoderStream *this)
{
}

uint64_t XmlUTF8EncoderStream::write(uint64_t this, const char *a2, int a3)
{
  __int16 v10 = 0;
  int v8 = 6;
  int __dst = 0;
  if (a3 >= 1)
  {
    uint64_t v4 = this;
    uint64_t v5 = a3;
    do
    {
      unsigned __int16 v6 = *a2++;
      CsUTF8CharFromWideChar(v6, &__dst, &v8);
      if (v8 <= 0)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 5100;
      }
      this = (*(uint64_t (**)(void, int *))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), &__dst);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlUTF8EncoderStream::write(uint64_t this, const unsigned __int16 *a2, int a3)
{
  __int16 v10 = 0;
  int __dst = 0;
  if (a3 >= 1)
  {
    uint64_t v4 = this;
    uint64_t v5 = a3;
    do
    {
      int v8 = 6;
      unsigned int v6 = *a2++;
      CsUTF8CharFromWideChar(v6, &__dst, &v8);
      if (v8 <= 0)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 5100;
      }
      this = (*(uint64_t (**)(void, int *))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), &__dst);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t XmlUTF8EncoderStream::write(XmlUTF8EncoderStream *this, uint64_t a2)
{
  __int16 v7 = 0;
  int v5 = 6;
  int __dst = 0;
  CsUTF8CharFromWideChar(a2, &__dst, &v5);
  if (v5 <= 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5100;
  }
  return (*(uint64_t (**)(void, int *))(**((void **)this + 1) + 16))(*((void *)this + 1), &__dst);
}

uint64_t XmlUTF8EncoderStream::flush(XmlUTF8EncoderStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void XmlWriter::XmlWriter(XmlWriter *this, XmlOutputStream *a2, int a3)
{
  *(void *)this = &unk_26EBDA150;
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((_OWORD *)this + CsString::CsString((CsString *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 10;
  *((void *)this + 1CsString::CsString((CsString *)this + 1) = 0;
  CsString::CsString((CsString *)this + 4);
  *((_DWORD *)this + 30) = 0;
  *((unsigned char *)this + 124) = 0;
  if (a3) {
    int v5 = 3;
  }
  else {
    int v5 = 0;
  }
  *((void *)this + CsString::CsString((CsString *)this + 1) = XmlOutputStream::createStreamOfType(v5, *((XmlOutputStream **)this + 3));
  XmlWriter::setIDPrefix(this, "_id");
  unsigned int v6 = operator new[](0x100uLL);
  *((void *)this + 1CsString::CsString((CsString *)this + 1) = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
}

void sub_238DA70FC(_Unwind_Exception *a1)
{
  ChStack<CsString>::~ChStack((uint64_t *)(v1 + 48));
  _Unwind_Resume(a1);
}

char *XmlWriter::setIDPrefix(XmlWriter *this, const char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  uint64_t v6 = (v4 << 32) + 0x100000000;
  size_t v7 = v6 >> 32;
  if (v6 < 0) {
    size_t v8 = -1;
  }
  else {
    size_t v8 = v6 >> 32;
  }
  int v9 = operator new[](v8);
  *((void *)this + 4) = v9;
  bzero(v9, v7);
  uint64_t result = (char *)*((void *)this + 4);
  if (result)
  {
    return strncpy(result, __s, (int)v4);
  }
  return result;
}

void XmlWriter::~XmlWriter(XmlWriter *this)
{
  *(void *)this = &unk_26EBDA150;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *((void *)this + 1CsString::CsString((CsString *)this + 1) = 0;
  CsString::~CsString((CsString *)this + 4);
  ChStack<CsString>::~ChStack((uint64_t *)this + 6);
}

{
  uint64_t vars8;

  XmlWriter::~XmlWriter(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XmlWriter::openNode(XmlWriter *this, const char *a2, uint64_t a3)
{
  if (*((_DWORD *)this + 30) == 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5101;
  }
  XmlWriter::closeCurrentElement(this, 1);
  XmlWriter::writeIndent((uint64_t)this, *((_DWORD *)this + 16));
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), 60);
  uint64_t result = (*(uint64_t (**)(void, const char *, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), a2, a3);
  if ((int)a3 >= 1 && *a2 == 63)
  {
    int v7 = 2;
  }
  else
  {
    uint64_t result = strcmp(a2, "!DOCTYPE");
    if (result)
    {
      *((_DWORD *)this + 28) = 0;
      bzero(*((void **)this + 13), 2 * *((unsigned int *)this + 29));
      CsString::append((CsString *)this + 4, a2, a3);
      uint64_t result = (uint64_t)ChStack<CsString>::push((uint64_t *)this + 6, (const CsString *)this + 4);
      int v7 = 3;
    }
    else
    {
      int v7 = 1;
    }
  }
  *((_DWORD *)this + 30) = v7;
  return result;
}

uint64_t XmlWriter::addAttribute(char **a1, const char *a2, int a3, int a4)
{
  switch(a4)
  {
    case 2:
      dwordToBinary(a1[11], a3);
      break;
    case 1:
      snprintf(a1[11], 0x100uLL, "0x%08X");
      break;
    case 0:
      snprintf(a1[11], 0x100uLL, "%u");
      break;
  }
  uint64_t v6 = a1[11];
  if (v6) {
    size_t v7 = strlen(a1[11]);
  }
  else {
    size_t v7 = 0;
  }
  return XmlWriter::addAttribute((XmlWriter *)a1, a2, v6, v7, 0);
}

uint64_t dwordToBinary(char *a1, int a2)
{
  byteToBinary((uint64_t)a1, SHIBYTE(a2));
  byteToBinary((uint64_t)(a1 + 8), SBYTE2(a2));
  byteToBinary((uint64_t)(a1 + 16), SBYTE1(a2));
  return byteToBinary((uint64_t)(a1 + 24), a2);
}

uint64_t byteToBinary(uint64_t result, char a2)
{
  if (result)
  {
    if (a2 >= 0) {
      char v2 = 48;
    }
    else {
      char v2 = 49;
    }
    *(unsigned char *)uint64_t result = v2;
    int16x8_t v3 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a2), (int8x16_t)xmmword_238EDE890));
    *(int8x8_t *)v3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x30003000300030, (int8x8_t)0x31003100310031);
    *(_DWORD *)(result + CsString::CsString((CsString *)this + 1) = vmovn_s16(v3).u32[0];
    if ((a2 & 4) != 0) {
      char v4 = 49;
    }
    else {
      char v4 = 48;
    }
    *(unsigned char *)(result + 5) = v4;
    if ((a2 & 2) != 0) {
      char v5 = 49;
    }
    else {
      char v5 = 48;
    }
    *(unsigned char *)(result + 6) = v5;
    if (a2) {
      char v6 = 49;
    }
    else {
      char v6 = 48;
    }
    *(unsigned char *)(result + 7) = v6;
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t XmlWriter::addAttribute(XmlWriter *this, const char *a2, const char *a3, uint64_t a4, int a5)
{
  if (a2) {
    char v5 = a2;
  }
  else {
    char v5 = "NULL";
  }
  if (a3) {
    char v6 = a3;
  }
  else {
    char v6 = "NULL";
  }
  int v7 = *((_DWORD *)this + 30);
  if (!v7)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5103;
  }
  size_t v11 = strlen(v5);
  if (v7 == 5) {
    XmlWriter::closeAttribute(this);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), 32);
  if (v11)
  {
    (*(void (**)(void, const char *, size_t))(**((void **)this + 3) + 16))(*((void *)this + 3), v5, v11);
    (*(void (**)(void, const char *, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), "=\"", 2);
  }
  if (a5)
  {
    uint64_t result = XmlWriter::escapeText(this, v6, a4, 1, 1);
    if (!v11) {
      return result;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, const char *, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), v6, a4);
    if (!v11) {
      return result;
    }
  }
  uint64_t v13 = *(uint64_t (**)(void))(**((void **)this + 3) + 32);
  return v13();
}

uint64_t XmlWriter::closeAttribute(XmlWriter *this)
{
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5106;
  }
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), 34);
  *((_DWORD *)this + 30) = 3;
  return result;
}

uint64_t XmlWriter::escapeText(XmlWriter *this, const char *a2, int a3, char a4, char a5)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    size_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v8();
  }
  else if (a3 >= 1)
  {
    uint64_t v11 = a3;
    do
    {
      int v12 = *(unsigned __int8 *)a2++;
      uint64_t result = XmlWriter::escapeCharacter(this, v12, a4, a5);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t XmlWriter::writeIndent(uint64_t this, int a2)
{
  if (!*(unsigned char *)(this + 124))
  {
    uint64_t v2 = this;
    int v3 = *(_DWORD *)(this + 40) + a2;
    if (v3 >= 1)
    {
      do
      {
        this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 24) + 32))(*(void *)(v2 + 24), 9);
        --v3;
      }
      while (v3);
    }
  }
  return this;
}

uint64_t XmlWriter::escapeText(XmlWriter *this, const unsigned __int16 *a2, int a3, char a4, char a5)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    size_t v8 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v8();
  }
  else if (a3 >= 1)
  {
    uint64_t v11 = a3;
    do
    {
      int v12 = *a2++;
      uint64_t result = XmlWriter::escapeCharacter(this, v12, a4, a5);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t XmlWriter::escapeCharacter(XmlWriter *this, int a2, char a3, char a4)
{
  if (a2 <= 37)
  {
    if (a2 == 10 || a2 == 13)
    {
      if ((a3 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    if (a2 == 34)
    {
      if (a4) {
        goto LABEL_20;
      }
      goto LABEL_15;
    }
LABEL_14:
    if ((unsigned __int16)(a2 - 127) > 0xFFA0u) {
      goto LABEL_15;
    }
LABEL_19:
    snprintf(XmlWriter::escapeCharacter(unsigned short,BOOL,BOOL)::code, 0xFuLL, "&#%d;", a2);
LABEL_20:
    int v7 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
    return v7();
  }
  if (a2 > 59)
  {
    if (a2 == 60 || a2 == 62) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (a2 == 38) {
    goto LABEL_19;
  }
  if (a2 != 39) {
    goto LABEL_14;
  }
  if (a4) {
    goto LABEL_20;
  }
LABEL_15:
  char v5 = *(uint64_t (**)(void))(**((void **)this + 3) + 32);
  return v5();
}

_DWORD *XmlWriter::closeCurrentElement(_DWORD *this, int a2)
{
  uint64_t v2 = this;
  int v3 = this[30];
  if (v3) {
    BOOL v4 = v3 == 4;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (v3 == 5)
    {
      XmlWriter::closeAttribute((XmlWriter *)this);
      int v3 = v2[30];
    }
    if (v3 == 2) {
      (*(void (**)(void, uint64_t))(**((void **)v2 + 3) + 32))(*((void *)v2 + 3), 63);
    }
    this = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**((void **)v2 + 3) + 32))(*((void *)v2 + 3), 62);
    if (a2 && !*((unsigned char *)v2 + 124)) {
      this = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**((void **)v2 + 3) + 32))(*((void *)v2 + 3), 10);
    }
  }
  v2[30] = 0;
  return this;
}

uint64_t XmlWriter::closeNode(CsString *this)
{
  return XmlWriter::closeNode(this, 0, 0);
}

uint64_t XmlWriter::closeNode(CsString *this, unsigned __int16 *a2, int a3)
{
  (*(void (**)(unsigned __int16 *))(*(void *)this->var1 + 40))(this->var1);
  int var0 = (int)this[5].var0;
  if (var0 == 5)
  {
    XmlWriter::closeAttribute((XmlWriter *)this);
    int var0 = (int)this[5].var0;
  }
  switch(var0)
  {
    case 0:
      unsigned int var2 = this[2].var2;
      if (!var2) {
        goto LABEL_29;
      }
      XmlWriter::writeIndent((uint64_t)this, var2 - 1);
      goto LABEL_7;
    case 1:
      (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 62);
      goto LABEL_13;
    case 2:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "?>", 2);
LABEL_13:
      int v10 = 0;
      goto LABEL_16;
    case 3:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "/>", 2);
      break;
    case 4:
      if (!this[2].var2)
      {
LABEL_29:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 5102;
      }
LABEL_7:
      (*((void (**)(void **, const char *, uint64_t))*this[1].var0 + 2))(this[1].var0, "</", 2);
      size_t v8 = (const CsString *)ChStack<CsString>::top((uint64_t)&this[2]);
      this[4].unsigned int var2 = 0;
      bzero(this[4].var1, 2 * this[4].var3);
      CsString::append(this + 4, v8);
      if (this[4].var1) {
        unsigned __int16 var1 = this[4].var1;
      }
      else {
        unsigned __int16 var1 = (unsigned __int16 *)&unk_238EDE8C0;
      }
      (*((void (**)(void **, unsigned __int16 *, void))*this[1].var0 + 3))(this[1].var0, var1, this[4].var2);
      (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 62);
      break;
    default:
      break;
  }
  int v10 = 1;
LABEL_16:
  if (!BYTE4(this[5].var0)) {
    (*((void (**)(void **, uint64_t))*this[1].var0 + 4))(this[1].var0, 10);
  }
  uint64_t result = 0;
  LODWORD(this[5].var0) = 0;
  if (v10)
  {
    XmlWriter::popLevel((XmlWriter *)this, this + 4);
    uint64_t result = 0;
    if (a2)
    {
      if (a3 >= 1)
      {
        int v12 = (__int16)this[4].var2;
        if (v12 >= (unsigned __int16)a3 || (LOWORD(a3) = this[4].var2, v12 >= 1))
        {
          if (this[4].var1) {
            uint64_t v13 = this[4].var1;
          }
          else {
            uint64_t v13 = (const unsigned __int16 *)&unk_238EDE8C0;
          }
          _ChWcsncpy(a2, v13, (unsigned __int16)a3);
          a2[(unsigned __int16)a3 - 1] = 0;
        }
        return 1;
      }
    }
  }
  return result;
}

CsString *XmlWriter::popLevel(XmlWriter *this, CsString *a2)
{
  BOOL v4 = (const CsString *)ChStack<CsString>::top((uint64_t)this + 48);
  a2->unsigned int var2 = 0;
  bzero(a2->var1, 2 * a2->var3);
  uint64_t result = CsString::append(a2, v4);
  --*((_DWORD *)this + 16);
  return result;
}

uint64_t XmlWriter::openAttribute(XmlWriter *this, const char *a2, uint64_t a3)
{
  if (*((_DWORD *)this + 30) != 3 || !a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5104;
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), 32);
  (*(void (**)(void, const char *, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), a2, a3);
  uint64_t result = (*(uint64_t (**)(void, const char *, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), "=\"", 2);
  *((_DWORD *)this + 30) = 5;
  return result;
}

uint64_t XmlWriter::appendAttribute(XmlWriter *this, const unsigned __int16 *a2, int a3, int a4)
{
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5105;
  }
  if (a4)
  {
    return XmlWriter::escapeText(this, a2, a3, 1, 1);
  }
  else
  {
    char v5 = *(uint64_t (**)(void))(**((void **)this + 3) + 24);
    return v5();
  }
}

XmlWriter *XmlWriter::appendAttribute(XmlWriter *this, const char *a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    int v7 = this;
    for (int i = 0; i < a3; i += v9)
    {
      if (a3 - i >= 35) {
        int v9 = 35;
      }
      else {
        int v9 = a3 - i;
      }
      if (a3 - i >= 1)
      {
        if (v9 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v9;
        }
        uint64_t v11 = &a2[i];
        int v12 = (__int16 *)XmlWriter::appendAttribute(char const*,int,BOOL)::wideString;
        do
        {
          __int16 v13 = *v11++;
          *v12++ = v13;
          --v10;
        }
        while (v10);
      }
      this = (XmlWriter *)XmlWriter::appendAttribute(v7, XmlWriter::appendAttribute(char const*,int,BOOL)::wideString, v9, a4);
    }
  }
  return this;
}

uint64_t XmlWriter::appendAttributeBase64(XmlWriter *this, const unsigned __int16 *a2)
{
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5105;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v2();
}

uint64_t XmlWriter::appendAttributeBase64(XmlWriter *this, const unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5105;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v2();
}

XmlWriter *XmlWriter::appendAttributeHex(XmlWriter *this, const unsigned __int8 *a2, int a3)
{
  uint64_t v27 = this;
  if (*((_DWORD *)this + 30) != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 5105;
  }
  if (a3 < 17)
  {
    if (a3 < 1) {
      return this;
    }
  }
  else
  {
    XmlWriter::appendAttribute(this, "\n", 1, 0);
  }
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = a3;
  do
  {
    int v28 = v6 - 16;
    if (v6 >= 16) {
      int v7 = 16;
    }
    else {
      int v7 = v6;
    }
    if (a3 - 16 * v5 >= 16) {
      int v8 = 16;
    }
    else {
      int v8 = a3 - 16 * v5;
    }
    int v9 = a3 - v4;
    if (a3 - (int)v4 >= 16) {
      int v10 = 16;
    }
    else {
      int v10 = a3 - v4;
    }
    uint64_t v11 = &XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer;
    if (a3 >= 17)
    {
      int v26 = v10;
      int v12 = v5;
      int v13 = v8;
      snprintf((char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, 0x50uLL, "%04lX", v4);
      size_t v14 = strlen((const char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer);
      int v8 = v13;
      int v5 = v12;
      int v10 = v26;
      unsigned int v15 = (char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer + v14;
      *(_WORD *)unsigned int v15 = 8224;
      v15[2] = 32;
      uint64_t v11 = (__int16 *)((char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer + v14 + 3);
    }
    if (v9 < 1)
    {
      uint64_t v18 = v11;
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        unint64_t v17 = a2[v16];
        *(unsigned char *)uint64_t v11 = sHexConversions[v17 >> 4];
        *((unsigned char *)v11 + CsString::CsString((CsString *)this + 1) = sHexConversions[v17 & 0xF];
        uint64_t v18 = (__int16 *)((char *)v11 + 3);
        *((unsigned char *)v11 + CsString::CsString((CsString *)this + 2) = 32;
        ++v16;
        uint64_t v11 = (__int16 *)((char *)v11 + 3);
      }
      while (v16 < v10);
    }
    if (a3 >= 17 && v9 <= 15)
    {
      uint64_t v19 = 3 * (15 - v7);
      int v20 = v10;
      memset(v18, 32, 3 * (15 - v8) + 3);
      int v10 = v20;
      uint64_t v18 = (__int16 *)((char *)v18 + v19 + 3);
    }
    *uint64_t v18 = 8224;
    uint64_t v21 = v18 + 1;
    if (v9 < 1)
    {
      int v23 = v28;
    }
    else
    {
      uint64_t v22 = 0;
      int v23 = v28;
      do
      {
        int v24 = a2[v22];
        if ((v24 - 32) >= 0x5F) {
          LOBYTE(v24) = 46;
        }
        *((unsigned char *)v21 + v22++) = v24;
      }
      while (v22 < v10);
      LODWORD(v2CsString::CsString((CsString *)this + 1) = v21 + v22;
    }
    this = XmlWriter::appendAttribute(v27, (const char *)&XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, v21 - &XmlWriter::appendAttributeHex(unsigned char const*,unsigned int)::buffer, 1);
    if (a3 > 16) {
      this = XmlWriter::appendAttribute(v27, "\n", 1, 0);
    }
    v4 += 16;
    ++v5;
    a2 += 16;
    int v6 = v23;
  }
  while ((int)v4 < a3);
  return this;
}

CsString *ChStack<CsString>::push(uint64_t *a1, const CsString *a2)
{
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  unsigned int v5 = *((_DWORD *)a1 + 5);
  if ((int)v4 + 1 <= v5)
  {
    uint64_t v19 = *a1;
  }
  else
  {
    uint64_t v6 = *((_DWORD *)a1 + 6) + v5;
    *((_DWORD *)a1 + 5) = v6;
    int v7 = operator new[](24 * v6 + 16);
    *int v7 = 24;
    v7[1] = v6;
    if (v6)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 24 * v6;
      do
      {
        CsString::CsString((CsString *)&v7[v8 / 8 + 2]);
        v8 += 24;
      }
      while (v9 != v8);
    }
    a1[1] = (uint64_t)(v7 + 2);
    LODWORD(v4) = *((_DWORD *)a1 + 4);
    if (v4)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        int v12 = (const CsString *)(*a1 + v10);
        int v13 = (CsString *)(a1[1] + v10);
        v13->unsigned int var2 = 0;
        bzero(v13->var1, 2 * v13->var3);
        CsString::append(v13, v12);
        ++v11;
        unint64_t v4 = *((unsigned int *)a1 + 4);
        v10 += 24;
      }
      while (v11 < v4);
    }
    uint64_t v14 = *a1;
    if (*a1)
    {
      uint64_t v15 = v14 - 16;
      uint64_t v16 = *(void *)(v14 - 8);
      if (v16)
      {
        uint64_t v17 = 24 * v16;
        uint64_t v18 = v14 - 24;
        do
        {
          CsString::~CsString((CsString *)(v18 + v17));
          v17 -= 24;
        }
        while (v17);
      }
      MEMORY[0x23EC99790](v15, 0x1091C803BDA009ALL);
      LODWORD(v4) = *((_DWORD *)a1 + 4);
    }
    uint64_t v19 = a1[1];
    *a1 = v19;
    a1[1] = 0;
  }
  int v20 = (CsString *)(v19 + 24 * v4);
  v20->unsigned int var2 = 0;
  bzero(v20->var1, 2 * v20->var3);
  uint64_t result = CsString::append(v20, a2);
  ++*((_DWORD *)a1 + 4);
  return result;
}

void sub_238DA86E0(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 24)
    CsString::~CsString((CsString *)&v1[v2 - 8]);
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t ChStack<CsString>::top(uint64_t a1)
{
  if (!*(void *)a1 || (int v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1000;
  }
  return *(void *)a1 + 24 * (v1 - 1);
}

uint64_t *ChStack<CsString>::~ChStack(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = v2 - 24;
      do
      {
        CsString::~CsString((CsString *)(v6 + v5));
        v5 -= 24;
      }
      while (v5);
    }
    MEMORY[0x23EC99790](v3, 0x1091C803BDA009ALL);
  }
  *a1 = 0;
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = v7 - 16;
    uint64_t v9 = *(void *)(v7 - 8);
    if (v9)
    {
      uint64_t v10 = 24 * v9;
      uint64_t v11 = v7 - 24;
      do
      {
        CsString::~CsString((CsString *)(v11 + v10));
        v10 -= 24;
      }
      while (v10);
    }
    MEMORY[0x23EC99790](v8, 0x1091C803BDA009ALL);
  }
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 6) = 0;
  a1[2] = 0;
  return a1;
}

void OCCCommonHmac::~OCCCommonHmac(OCCCommonHmac *this)
{
}

uint64_t OCCCommonHmac::getOutputSize(OCCCommonHmac *this)
{
  if (*((_DWORD *)this + 2) == 1) {
    return 16;
  }
  else {
    return 20;
  }
}

char *OCCCommonHmac::getName(OCCCommonHmac *this)
{
  return OCCCommonHmac::getName(void)const::kHmacNames[*((unsigned int *)this + 2)];
}

void OCCCommonHmac::initHmac(OCCCommonHmac *this, const void *key, size_t keyLength)
{
}

void OCCCommonHmac::updateHmac(OCCCommonHmac *this, const void *a2, size_t dataLength)
{
}

void OCCCommonHmac::finalHmac(OCCCommonHmac *this, void *a2)
{
}

void OCCCommonHmac::computeHmac(OCCCommonHmac *this, const void *a2, size_t keyLength, const void *a4, size_t dataLength, void *a6)
{
}

uint64_t OCCHmac::createFromName(OCCHmac *this, const char *a2)
{
  if (!strcmp((const char *)this, "SHA1") || !strcmp((const char *)this, "SHA-1")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA256") || !strcmp((const char *)this, "SHA-256")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA384") || !strcmp((const char *)this, "SHA-384")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA512") || !strcmp((const char *)this, "SHA-512")) {
    operator new();
  }
  if (!strcmp((const char *)this, "MD5")) {
    operator new();
  }
  return 0;
}

uint64_t SsrwStrToStr2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a3)
  {
    while (*(unsigned char *)(a2 + v3))
    {
      *(_WORD *)(result + 2 * v3) = *(char *)(a2 + v3);
      if (a3 == ++v3)
      {
        uint64_t v3 = a3;
        break;
      }
    }
  }
  *(_WORD *)(result + 2 * v3) = 0;
  return result;
}

FILE *SsrwFalseWFopen(uint64_t a1, uint64_t a2)
{
  size_t v4 = 0;
  while (*(unsigned __int16 *)(a1 + 2 * v4++))
    ;
  uint64_t v6 = 0;
  while (*(unsigned __int16 *)(a2 + 2 * v6++))
    ;
  uint64_t v8 = malloc_type_malloc(v4, 0xC8B0443CuLL);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (const char *)malloc_type_malloc(v4, 0xF8DC27D1uLL);
  if (!v10)
  {
    free(v9);
    return 0;
  }
  uint64_t v11 = (char *)v10;
  size_t v12 = 0;
  if (v4)
  {
    while (1)
    {
      __int16 v13 = *(_WORD *)(a1 + 2 * v12);
      if (!(_BYTE)v13) {
        break;
      }
      *((unsigned char *)v9 + v12++) = v13;
      if (v4 == v12)
      {
        size_t v12 = v4;
        break;
      }
    }
  }
  *((unsigned char *)v9 + v1CsString::CsString((CsString *)this + 2) = 0;
  uint64_t v14 = 0;
  if (v6)
  {
    while (1)
    {
      __int16 v15 = *(_WORD *)(a2 + 2 * v14);
      if (!(_BYTE)v15) {
        break;
      }
      v10[v14++] = v15;
      if (v6 == v14)
      {
        uint64_t v14 = v6;
        break;
      }
    }
  }
  v10[v14] = 0;
  uint64_t v16 = fopen((const char *)v9, v10);
  free(v9);
  free(v11);
  return v16;
}

void sub_238DA8DF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  size_t v12 = v10;

  if (a2 == 3)
  {
    uint64_t v14 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    __int16 v15 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      [v15 raise];
    }
    else {
      +[TCMessageException raise:TCUnknownProblemMessage];
    }
    __cxa_end_catch();
  }
  JUMPOUT(0x238DA8D94);
}

void sub_238DA8EAC(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  if (!v1) {
    JUMPOUT(0x238DA8DC4);
  }
  JUMPOUT(0x238DA8D9CLL);
}

uint64_t SsrwOOMemStream::readUInt64(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 7)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadUInt64(**((void **)this + 1) + v1);
  *((_DWORD *)this + 5) += 8;
  return result;
}

uint64_t SsrwOOMemStream::readUInt32(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  uint64_t result = CsLeReadSInt32((unsigned int *)(**((void **)this + 1) + v1));
  *((_DWORD *)this + 5) += 4;
  return result;
}

void SsrwOOMemStream::readFloat32(SsrwOOMemStream *this)
{
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 15;
  }
  CsLeReadFloat32(**((void **)this + 1) + v1);
  *((_DWORD *)this + 5) += 4;
}

uint64_t SsrwOOMemStream::readString8(uint64_t this, unsigned int *a2, char *a3)
{
  uint64_t v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
      a3[v7] = this;
      if (!this) {
        break;
      }
      if (v4 == ++v7)
      {
        a3[v4] = 0;
        goto LABEL_8;
      }
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

__n128 SsrwOOMemStream::setClass(SsrwOOMemStream *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 24) = *a2;
  return result;
}

uint64_t SsrwOOMemStream::seek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, a4);
}

uint64_t SsrwOOMemStream::getID(SsrwOOMemStream *this)
{
  return 0;
}

uint64_t SsrwOOPropertyStorage::getNumberOfProperties(uint64_t **this)
{
  unsigned int v5 = 0;
  int NumberOfProperties = propertyStorageGetNumberOfProperties(this[1], &v5);
  if (NumberOfProperties)
  {
    int v3 = NumberOfProperties;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

BOOL SsrwOOPropertyStorage::getPropertyNameAndIDByIndex(uint64_t **this, unsigned int a2, char **a3, unsigned int *a4)
{
  PropertyNameAndIDByIndeCGFloat x = propertyStorageGetPropertyNameAndIDByIndex(this[1], a2, a3, (int *)a4);
  if (PropertyNameAndIDByIndex) {
    BOOL v5 = PropertyNameAndIDByIndex == 13;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v7 = PropertyNameAndIDByIndex;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v7;
  }
  return PropertyNameAndIDByIndex != 13;
}

uint64_t SsrwOOPropertyStorage::freePropertyName(SsrwOOPropertyStorage *this, unsigned __int8 *a2)
{
  BOOL v5 = this;
  uint64_t result = freeDocumentPropertyName(&v5);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOPropVariant::getSInt2Value(SsrwOOPropVariant *this)
{
  return *(__int16 *)(*((void *)this + 1) + 8);
}

uint64_t SsrwOORootStorage::open(void *a1, const char *a2, int a3)
{
  BOOL v5 = a1 + 10;
  if (a3)
  {
    LODWORD(result) = createStructuredStorage(a2, 1, v5);
    if (result)
    {
LABEL_6:
      int v7 = result;
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v7;
    }
  }
  else
  {
    LODWORD(result) = openStructuredStorage(a2, 0, v5);
    if (result) {
      goto LABEL_6;
    }
  }
  uint64_t result = getStorageFromRoot(a1[10], a1);
  if (result) {
    goto LABEL_6;
  }
  return result;
}

uint64_t SsrwOORootStorage::openInStream(void *a1, uint64_t a2, int a3)
{
  LODWORD(result) = openStructuredStorageInStream(a2, a3, a1 + 10);
  if (result || (uint64_t result = getStorageFromRoot(a1[10], a1), result))
  {
    int v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  return result;
}

uint64_t SsrwOORootStorage::createInStream(SsrwOORootStorage *this, __sFILE *a2, int8x8_t a3)
{
  LODWORD(result) = createStructuredStorageInStream((uint64_t)a2, 1, (uint64_t *)this + 10, a3);
  if (result || (uint64_t result = getStorageFromRoot(*((void *)this + 10), this), result))
  {
    int v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  return result;
}

uint64_t SsrwOORootStorage::createRWStorageInStream(SsrwOORootStorage *this, __sFILE *a2, int8x8_t a3)
{
  LODWORD(result) = createStructuredStorageInStream((uint64_t)a2, 2, (uint64_t *)this + 10, a3);
  if (result || (uint64_t result = getStorageFromRoot(*((void *)this + 10), this), result))
  {
    int v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  return result;
}

void SsrwOOStgInfo::SsrwOOStgInfo(SsrwOOStgInfo *this, const _StgInfo *a2)
{
  if (a2)
  {
    if (a2->var0)
    {
      *((_OWORD *)this + CsString::CsString((CsString *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + CsString::CsString((CsString *)this + 1) = 0u;
      *((void *)this + 8) = this;
      *((unsigned char *)this + 7CsString::CsString((CsString *)this + 2) = 0;
      long long v2 = *(_OWORD *)&a2->var7.var1;
      long long v4 = *(_OWORD *)&a2->var0;
      long long v3 = *(_OWORD *)&a2->var3;
      *((_OWORD *)this + CsString::CsString((CsString *)this + 2) = *(_OWORD *)&a2->var5;
      *((_OWORD *)this + 3) = v2;
      *(_OWORD *)this = v4;
      *((_OWORD *)this + CsString::CsString((CsString *)this + 1) = v3;
      *(void *)this = (char *)this + 108;
      SsrwOOStgInfo::setNamePrivate<unsigned short>((uint64_t)this, (uint64_t)a2->var0);
    }
  }
}

uint64_t SsrwOOStgInfo::setNamePrivate<unsigned short>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(unsigned char *)(result + 7CsString::CsString((CsString *)this + 2) = 0;
  while (*(unsigned __int16 *)(a2 + 2 * v2++))
    ;
  if ((unint64_t)(v2 - 1) > 0x23)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 18;
  }
  uint64_t v4 = 0;
  uint64_t v5 = **(void **)(result + 64);
  do
  {
    *(_WORD *)(v5 + 2 * v4) = *(_WORD *)(a2 + 2 * v4);
    ++v4;
  }
  while (v2 != v4);
  return result;
}

uint64_t SsrwOOStgInfo::getWcsName(SsrwOOStgInfo *this)
{
  return **((void **)this + 8);
}

uint64_t SsrwOOStgInfo::getType(SsrwOOStgInfo *this)
{
  return *(unsigned int *)(*((void *)this + 8) + 8);
}

uint64_t SsrwOOStgInfo::getSize(SsrwOOStgInfo *this)
{
  return *(unsigned int *)(*((void *)this + 8) + 16);
}

__n128 SsrwOOStgInfo::getCLSID(SsrwOOStgInfo *this, _SsrwOO_GUID *a2)
{
  __n128 result = *(__n128 *)(*((void *)this + 8) + 44);
  *a2 = (_SsrwOO_GUID)result;
  return result;
}

uint64_t SsrwOOStgStream::readUInt64(SsrwOOStgStream *this)
{
  uint64_t v5 = 0;
  int v1 = readUInt64(*((void *)this + 24), &v5);
  if (v1)
  {
    int v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return v5;
}

uint64_t SsrwOOStgStream::getInfo(SsrwOOStgStream *this)
{
  return (uint64_t)this + 8;
}

uint64_t SsrwOOStgStream::getCStream(SsrwOOStgStream *this)
{
  return *((void *)this + 24);
}

uint64_t SsrwOOStgStream::writeByte(SsrwOOStgStream *this, char a2)
{
  char v6 = a2;
  unsigned int v5 = 1;
  uint64_t result = streamWrite(*((void *)this + 24), (uint64_t)&v6, &v5);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeSInt16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result = writeSInt16(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeUInt16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result = writeSInt16(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeSInt32(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result = writeSInt32(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeUInt32(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result = writeSInt32(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeFloat32(SsrwOOStgStream *this, float a2)
{
  uint64_t result = writeFloat32(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeFloat64(SsrwOOStgStream *this, double a2)
{
  uint64_t result = writeFloat64(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeChar16(SsrwOOStgStream *this, uint64_t a2)
{
  uint64_t result = writeSInt16(*((void *)this + 24), a2);
  if (result)
  {
    int v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  return result;
}

uint64_t SsrwOOStgStream::writeString16(SsrwOOStgStream *this, unsigned __int16 *a2, unsigned int *a3)
{
  int v7 = *a3;
  uint64_t result = writeString16(*((void *)this + 24), a2, (unsigned int *)&v7);
  if (result)
  {
    int v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v5;
  }
  *a3 = v7;
  return result;
}

void *SsrwOOStorage::createStorage(SsrwOOStorage *this, const char *__s)
{
  size_t v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::createStorage(this, this->var1);
}

SsrwOOStgStream *SsrwOOStorage::createStream(SsrwOOStorage *this, const char *__s)
{
  size_t v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::createStream(this, this->var1);
}

void sub_238DA9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CsString *SsrwOOStream::readCsString(SsrwOOStream *this, CsString *a2)
{
  unsigned int v4 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 10))(this);
  uint64_t result = CsString::setCount(a2, v4);
  if (v4)
  {
    unsigned int v7 = v4;
    uint64_t result = (CsString *)(*((uint64_t (**)(SsrwOOStream *, unsigned int *, unsigned __int16 *))this->var0 + 17))(this, &v7, a2->var1);
    if (v7 != v4)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 17;
    }
  }
  return result;
}

uint64_t SsrwOOStream::getSize(SsrwOOStream *this)
{
  uint64_t v2 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 5))(this);
  (*((void (**)(SsrwOOStream *, void, uint64_t))this->var0 + 2))(this, 0, 2);
  uint64_t v3 = (*((uint64_t (**)(SsrwOOStream *))this->var0 + 5))(this);
  (*((void (**)(SsrwOOStream *, uint64_t, void))this->var0 + 2))(this, v2, 0);
  return v3;
}

uint64_t directoryInvalidate(uint64_t a1)
{
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 9CsString::CsString((CsString *)this + 2) = -1;
  *(_DWORD *)(a1 + 100) = -1;
  *(_DWORD *)(a1 + 84) = 0;
  return 0;
}

uint64_t propertyStorageGetNumberOfProperties(uint64_t *a1, _DWORD *a2)
{
  if (a1 && a2 && (uint64_t v2 = *a1) != 0) {
    return propertySetGetNumberOfProperties(v2, a2);
  }
  else {
    return 6;
  }
}

uint64_t setDocumentProperty(uint64_t a1, int a2, uint64_t a3, int a4, char *__s)
{
  uint64_t v30 = 0;
  CGFloat v31 = 0;
  if (!a1) {
    return 6;
  }
  uint64_t v6 = 6;
  if ((a2 - 4) >= 0xFFFFFFFD && __s)
  {
    uint64_t v27 = 0;
    int v28 = 0;
    id v29 = 0;
    switch(a4)
    {
      case 0:
        __int16 v10 = 2;
        goto LABEL_18;
      case 1:
        LOWORD(v27) = 3;
        LODWORD(v28) = *(_DWORD *)__s;
        goto LABEL_22;
      case 2:
        LOWORD(v27) = 30;
        size_t v11 = strlen(__s);
        uint64_t v6 = 5;
        if (HIDWORD(v11)) {
          return v6;
        }
        size_t v12 = (v11 + 1);
        if (!v12) {
          return v6;
        }
        __int16 v13 = malloc_type_malloc(v12, 0xF0BB0765uLL);
        int v28 = v13;
        if (!v13) {
          return v6;
        }
        strcpy((char *)v13, __s);
        goto LABEL_22;
      case 3:
        LOWORD(v27) = 64;
        uint64_t v6 = WinFileTimeFromTime_t(*(void *)__s, (unsigned int *)&v28);
        if (!v6) {
          goto LABEL_22;
        }
        return v6;
      case 4:
        LOWORD(v27) = 71;
        unsigned int SInt32 = CsLeReadSInt32((unsigned int *)__s);
        int v15 = CsLeReadSInt32((unsigned int *)__s + 1);
        if (SInt32 < 5) {
          return 5;
        }
        int v16 = v15;
        uint64_t v17 = malloc_type_malloc(0x10uLL, 0x1010040466105CCuLL);
        int v28 = v17;
        if (!v17) {
          return 5;
        }
        v17[1] = malloc_type_malloc(SInt32, 0xB0440E18uLL);
        if (!*((void *)v28 + 1))
        {
          free(v28);
          return 5;
        }
        *(_DWORD *)int v28 = SInt32;
        *((_DWORD *)v28 + CsString::CsString((CsString *)this + 1) = v16;
        uint64_t v18 = (void *)*((void *)v28 + 1);
        uint64_t v19 = __s + 8;
        size_t v20 = SInt32 - 4;
LABEL_21:
        memcpy(v18, v19, v20);
LABEL_22:
        if ((a2 - 1) > 2) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(&off_264D67758 + a2 - 1);
        }
        uint64_t StorageFromRoot = getStorageFromRoot(a1, &v30);
        if (StorageFromRoot || (uint64_t StorageFromRoot = propertyStorageOpen(v30, v22, &v31), StorageFromRoot))
        {
          uint64_t v6 = StorageFromRoot;
          propVariantCleanup((uint64_t)&v27);
          return v6;
        }
        int v24 = v31;
        uint64_t v25 = propertyStorageSetPropertyValueWithID(v31, a3, (unsigned __int16 *)&v27);
        if (v25)
        {
          uint64_t v6 = v25;
          propVariantCleanup((uint64_t)&v27);
          if (v24) {
            free(v24);
          }
          return v6;
        }
        if (v24)
        {
          free(v24);
          return propVariantCleanup((uint64_t)&v27);
        }
        propVariantCleanup((uint64_t)&v27);
        break;
      case 5:
        __int16 v10 = 11;
LABEL_18:
        LOWORD(v27) = v10;
        LOWORD(v28) = *(_WORD *)__s;
        goto LABEL_22;
      case 6:
        LOWORD(v27) = 65;
        unsigned int v21 = CsLeReadSInt32((unsigned int *)__s);
        uint64_t v18 = malloc_type_malloc(v21, 0x4C970AF9uLL);
        id v29 = v18;
        if (!v18) {
          return 5;
        }
        LODWORD(v28) = v21;
        uint64_t v19 = __s + 4;
        size_t v20 = v21;
        goto LABEL_21;
      default:
        return v6;
    }
    return 6;
  }
  return v6;
}

uint64_t propertyStorageSetPropertyValueWithID(uint64_t *a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a3)
    {
      uint64_t result = rootStorageSetDirty(a1[1]);
      if (!result)
      {
        uint64_t v7 = *a1;
        return propertySetPut(v7, a2, a3);
      }
    }
  }
  return result;
}

uint64_t propertyStorageGetPropertyID(uint64_t *a1, char *a2, _DWORD *a3)
{
  if (a1 && a3 && (uint64_t v3 = *a1) != 0) {
    return propertySetGetPropertyID(v3, a2, a3);
  }
  else {
    return 6;
  }
}

uint64_t freeDocumentPropertyName(void **a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

uint64_t setDefaultDocumentProperties(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  strcpy(v13, "No title");
  strcpy(v12, " Auto-generated");
  uint64_t v11 = 0x6E776F6E6B6E75;
  strcpy(v10, "SchemaSoft Structured Storage Library v 3.0");
  int v2 = SsrwTime(0);
  if (!a1) {
    return 6;
  }
  int v3 = v2;
  uint64_t result = rootStorageSetDirty(a1);
  if (result) {
    return result;
  }
  uint64_t v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  DocProperties = (uint64_t *)rootStorageGetDocProperties(a1);
  if (*DocProperties) {
    return 6;
  }
  uint64_t v6 = DocProperties;
  if (DocProperties[1]) {
    return 6;
  }
  uint64_t result = getStorageFromRoot(a1, &v9);
  if (!result)
  {
    uint64_t result = createStream(v9, SUMMARY_INFO_NAME, v6 + 3);
    if (!result)
    {
      uint64_t result = propertySetConstruct(SSRW_FMTID_SummaryInformation, 1, v6);
      if (!result)
      {
        LOWORD(v7) = 30;
        v8[0] = v13;
        propertySetPut(*v6, 2, (unsigned __int16 *)&v7);
        v8[0] = v12;
        propertySetPut(*v6, 4, (unsigned __int16 *)&v7);
        v8[0] = &v11;
        propertySetPut(*v6, 3, (unsigned __int16 *)&v7);
        v8[0] = v10;
        propertySetPut(*v6, 18, (unsigned __int16 *)&v7);
        LOWORD(v7) = 3;
        LODWORD(v8[0]) = 0;
        propertySetPut(*v6, 19, (unsigned __int16 *)&v7);
        LOWORD(v7) = 64;
        WinFileTimeFromTime_t(v3, (unsigned int *)v8);
        return propertySetPut(*v6, 12, (unsigned __int16 *)&v7);
      }
    }
  }
  return result;
}

uint64_t propertyStorageGetPropertyNameAndIDByIndex(uint64_t *a1, unsigned int a2, char **a3, int *a4)
{
  if (a1 && a3 && (uint64_t v4 = *a1) != 0) {
    return propertySetGetPropertyNameAndID(v4, a2, a3, a4);
  }
  else {
    return 6;
  }
}

uint64_t fatCompareSectors(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t fatAddFreeSectors(uint64_t a1, void **a2, unsigned int *a3)
{
  if (!a1) {
    return 6;
  }
  int v5 = (unsigned int *)*a2;
  unsigned int v6 = *a3;
  if (*a3) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5) {
      free(*a2);
    }
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  qsort(*a2, *a3, 4uLL, (int (__cdecl *)(const void *, const void *))fatCompareSectors);
  uint64_t v9 = v6 - 1;
  unsigned int v10 = *((_DWORD *)*a2 + v9) + 1;
  uint64_t result = fatEnsureMinSize(a1, v10);
  if (result) {
    return result;
  }
  if (*(_DWORD *)(a1 + 16) < v10) {
    *(_DWORD *)(a1 + 16) = v10;
  }
  size_t v12 = (_DWORD *)(a1 + 40);
  unint64_t v13 = *(unsigned int *)(a1 + 40);
  unint64_t v14 = *v5;
  if (v13 == -2)
  {
    *(_DWORD *)(a1 + 40) = v14;
    uint64_t v15 = *(void *)(a1 + 8);
    if (v6 != 1)
    {
      int v16 = v5 + 1;
      uint64_t v17 = v6 - 1;
      do
      {
        *(_DWORD *)(v15 + 4 * *(v16 - 1)) = *v16;
        ++v16;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(v15 + 4 * v5[v9]) = -2;
    goto LABEL_32;
  }
  unsigned int v18 = 0;
  while (1)
  {
    if (v13 >= v14)
    {
      ++v18;
      unint64_t v22 = v14;
      if (v18 < v6) {
        unint64_t v22 = v5[v18];
      }
      _DWORD *v12 = v14;
      size_t v12 = (_DWORD *)(*(void *)(a1 + 8) + 4 * v14);
      unint64_t v14 = v22;
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    size_t v20 = (_DWORD *)(v19 + 4 * v13);
    unint64_t v21 = *v20;
    _DWORD *v12 = v13;
    if (v21 == -2) {
      break;
    }
    size_t v12 = (_DWORD *)(v19 + 4 * v13);
    unint64_t v13 = v21;
LABEL_26:
    if (v18 >= v6)
    {
      _DWORD *v12 = v13;
      goto LABEL_32;
    }
  }
  *size_t v20 = v5[v18];
  if (v18 < v9)
  {
    int v23 = &v5[v18 + 1];
    uint64_t v24 = v9 - v18;
    do
    {
      *(_DWORD *)(v19 + 4 * *(v23 - 1)) = *v23;
      ++v23;
      --v24;
    }
    while (v24);
  }
  *(_DWORD *)(v19 + 4 * v5[v9]) = -2;
LABEL_32:
  free(*a2);
  uint64_t result = 0;
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t fatAddFatToFreeSectors(uint64_t a1, uint64_t a2)
{
  return fatAddFreeSectors(a1, (void **)a2, (unsigned int *)(a2 + 24));
}

uint64_t headerEnsureV4(uint64_t a1)
{
  *(_WORD *)(a1 + 26) = 4;
  return 0;
}

float *leWriteFloat32(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t propertySetSaveNameList(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 2440);
  CsLeWriteUInt32(v6, a2);
  if (v6)
  {
    uint64_t v7 = a1 + 1640;
    unsigned int v8 = 4;
    do
    {
      CsLeWriteUInt32(*(unsigned int *)(v7 + 8), (_DWORD *)((char *)a2 + v8));
      size_t v9 = strlen(*(const char **)v7) + 1;
      CsLeWriteUInt32(v9, (_DWORD *)((char *)a2 + v8 + 4));
      uint64_t v10 = v8 + 8;
      uint64_t v11 = *(const char **)v7;
      v7 += 16;
      memcpy((char *)a2 + v10, v11, v9);
      unsigned int v8 = v9 + v10;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned int v8 = 4;
  }
  *a3 = v8 + (-v8 & 3);
  return 0;
}

uint64_t propertySetGetNumberOfProperties(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 1600);
  return 0;
}

uint64_t propertySetGetPropertyNameAndID(uint64_t a1, unsigned int a2, char **a3, int *a4)
{
  if (*(_DWORD *)(a1 + 1600) <= a2) {
    return 13;
  }
  *a4 = -1;
  *a3 = 0;
  int v4 = *(_DWORD *)(a1 + 1600);
  if (!v4 || v4 - 1 < a2) {
    return 13;
  }
  int v6 = *(_DWORD *)(a1 + 32 * a2);
  if ((v6 + 1) < 2) {
    return 13;
  }
  *a4 = v6;
  return propertySetGetPropertyName(a1, v6, a3);
}

uint64_t propertySetGetPropertyName(uint64_t a1, int a2, char **a3)
{
  *a3 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 2440);
  if (!v3) {
    return 0;
  }
  for (int i = (_DWORD *)(a1 + 1648); *i != a2; i += 4)
  {
    if (!--v3) {
      return 0;
    }
  }
  int v6 = (const char *)*((void *)i - 1);
  int v7 = strlen(v6);
  unsigned int v8 = (char *)malloc_type_malloc((v7 + 1), 0x3536DD16uLL);
  *a3 = v8;
  if (v8)
  {
    strcpy(v8, v6);
    return 0;
  }
  return 5;
}

uint64_t propertySetGetPropertyID(uint64_t a1, char *__s2, _DWORD *a3)
{
  *a3 = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 2440);
  if (v3)
  {
    for (int i = (const char **)(a1 + 1648); strcmp(*(i - 1), __s2); i += 2)
    {
      if (!--v3) {
        return 0;
      }
    }
    *a3 = *(_DWORD *)i;
  }
  return 0;
}

uint64_t propertySetWrite(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v90[1] = *MEMORY[0x263EF8340];
  v89[1] = 0;
  v90[0] = 0;
  int v86 = 0;
  v89[0] = 0;
  if (!a1) {
    return 6;
  }
  uint64_t v3 = a3;
  *(void *)(*(void *)a3 + 1624) = a1;
  uint64_t result = streamSeek(*(void *)(*(void *)a3 + 1624), 0, 0);
  if (result) {
    return result;
  }
  uint64_t v81 = a1;
  uint64_t v7 = 0;
  uint64_t v80 = a2;
  unint64_t v8 = *a2 ^ 0x101B2E9CD5CDD502 | a2[1] ^ 0xAEF92C2B00089793;
  BOOL v79 = v8 != 0;
  if (v8) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 2;
  }
  uint64_t v85 = v3;
  uint64_t v82 = v9;
  do
  {
    *((_DWORD *)v89 + v7) = 0;
    uint64_t v10 = *(void *)(v3 + 8 * v7);
    if (!v10) {
      goto LABEL_67;
    }
    unint64_t v11 = 0xAEF92C2B00089793;
    unsigned int v13 = *(void *)(v10 + 1608) == 0x101B2E9CD5CDD505
       && *(void *)(v10 + 1616) == 0xAEF92C2B00089793
       && *(_DWORD *)(v10 + 2440) != 0;
    LODWORD(v14) = *(_DWORD *)(v10 + 1600);
    if (v13 < v14)
    {
      do
      {
        unint64_t v15 = v13;
        uint64_t v16 = v10 + 32 * v13;
        int v19 = *(unsigned __int16 *)(v16 + 8);
        uint64_t v18 = v16 + 8;
        int v17 = v19;
        if (v19 == 10 || v17 == 0)
        {
          unint64_t v21 = *(unsigned int *)(v10 + 2440);
          if (v21)
          {
            unint64_t v22 = 0;
            int v23 = (_OWORD *)(v10 + 1656);
            uint64_t v24 = (_DWORD *)(v10 + 1648);
            while (*v24 != *(_DWORD *)(v10 + 32 * v13))
            {
              ++v22;
              v24 += 4;
              ++v23;
              if (v21 == v22) {
                goto LABEL_30;
              }
            }
            uint64_t v25 = (void *)*((void *)v24 - 1);
            if (v25)
            {
              free(v25);
              LODWORD(v2CsString::CsString((CsString *)this + 1) = *(_DWORD *)(v10 + 2440);
            }
            LODWORD(v2CsString::CsString((CsString *)this + 1) = v21 - 1;
            if (v21 > v22)
            {
              do
              {
                ++v22;
                *(v23 - CsString::CsString((CsString *)this + 1) = *v23;
                unint64_t v21 = (*(_DWORD *)(v10 + 2440) - 1);
                ++v23;
              }
              while (v22 < v21);
            }
            *(_DWORD *)(v10 + 2440) = v21;
          }
LABEL_30:
          propVariantCleanup(v18);
          LODWORD(v14) = *(_DWORD *)(v10 + 1600) - 1;
          if (v13 < v14)
          {
            int v26 = (_OWORD *)(v10 + 32 + 32 * v13);
            do
            {
              ++v15;
              long long v27 = v26[1];
              *(v26 - CsString::CsString((CsString *)this + 2) = *v26;
              *(v26 - CsString::CsString((CsString *)this + 1) = v27;
              unint64_t v14 = (*(_DWORD *)(v10 + 1600) - 1);
              v26 += 2;
            }
            while (v15 < v14);
          }
          *(_DWORD *)(v10 + 1600) = v14;
          --v13;
        }
        ++v13;
      }
      while (v13 < v14);
      uint64_t v3 = v85;
      uint64_t v10 = *(void *)(v85 + 8 * v7);
      LODWORD(v14) = *(_DWORD *)(v10 + 1600);
      unint64_t v11 = 0xAEF92C2B00089793;
    }
    if (!v14) {
      goto LABEL_66;
    }
    uint64_t v28 = 0;
    int v29 = 8 * v14 + 8;
    uint64_t v83 = v7;
    uint64_t v30 = v14;
    do
    {
      if (v28
        || (*(void *)(v10 + 1608) == 0x101B2E9CD5CDD505 ? (BOOL v31 = *(void *)(v10 + 1616) == v11) : (BOOL v31 = 0), !v31))
      {
        int v32 = 0;
        unsigned int v33 = *(unsigned __int16 *)(v10 + 32 * v28 + 8);
        if (v33 <= 0x1D)
        {
          switch(*(_WORD *)(v10 + 32 * v28 + 8))
          {
            case 2:
            case 0xB:
              int v32 = 2;
              break;
            case 3:
              int v32 = 4;
              break;
            case 5:
              int v32 = 8;
              break;
            default:
              goto LABEL_63;
          }
          goto LABEL_63;
        }
        if (*(unsigned __int16 *)(v10 + 32 * v28 + 8) <= 0x40u)
        {
          if (v33 == 30)
          {
            int v32 = strlen(*(const char **)(v10 + 32 * v28 + 16)) + 5;
          }
          else if (v33 == 64)
          {
            int v32 = 8;
          }
          else
          {
            int v32 = 0;
          }
          goto LABEL_63;
        }
        if (v33 == 65)
        {
          int v34 = *(_DWORD *)(v10 + 32 * v28 + 16);
        }
        else
        {
          if (v33 != 71)
          {
LABEL_63:
            v29 += v32 + (-v32 & 3) + 4;
            goto LABEL_64;
          }
          int v34 = **(_DWORD **)(v10 + 32 * v28 + 16);
        }
        int v32 = v34 + 4;
        goto LABEL_63;
      }
      uint64_t v35 = v3;
      unint64_t v36 = v11;
      uint64_t v37 = *(unsigned int *)(v10 + 2440);
      int v38 = (8 * v37) | 4;
      if (v37)
      {
        int v39 = (const char **)(v10 + 1640);
        do
        {
          _SsrwOO_GUID v40 = *v39;
          v39 += 2;
          v38 += strlen(v40) + 1;
          --v37;
        }
        while (v37);
      }
      v29 += v38 + (-v38 & 3);
      unint64_t v11 = v36;
      uint64_t v3 = v35;
LABEL_64:
      ++v28;
    }
    while (v28 != v30);
    LODWORD(v14) = (-v29 & 3) + v29;
    uint64_t v7 = v83;
LABEL_66:
    *((_DWORD *)v89 + v7) = v14;
    uint64_t v9 = v82;
LABEL_67:
    ++v7;
  }
  while (v7 != v9);
  LODWORD(v4CsString::CsString((CsString *)this + 1) = 28;
  id v42 = v89;
  uint64_t v43 = v9;
  do
  {
    if (*v42++) {
      uint64_t v41 = (v41 + 20);
    }
    else {
      uint64_t v41 = v41;
    }
    --v43;
  }
  while (v43);
  uint64_t v45 = v81;
  writeSInt16(v81, 4294967294);
  writeSInt16(v81, 0);
  writeSInt32(v81, 131077);
  writeSInt32(v81, 0);
  writeSInt16(v81, 0);
  writeSInt16(v81, 0);
  unsigned int v87 = 8;
  streamWrite(v81, (uint64_t)v90, &v87);
  BOOL v46 = *v80 == 0x101B2E9CD5CDD502 && v80[1] == 0xAEF92C2B00089793;
  if (!v46 || (uint64_t v78 = *(void *)(v3 + 8)) != 0 && *(_DWORD *)(v78 + 1600))
  {
    writeSInt32(v81, v9);
  }
  else
  {
    uint64_t v9 = (v9 - 1);
    writeSInt32(v81, v9);
    if (v79) {
      return 0;
    }
  }
  unsigned int v47 = v9;
  uint64_t v48 = 0;
  uint64_t v84 = v47;
  do
  {
    if (*((_DWORD *)v89 + v48))
    {
      if (v80[1] == 0xAEF92C2B00089793 && *v80 == 0x101B2E9CD5CDD502 && v48 == 1) {
        double v51 = &SSRW_FMTID_UserDefinedProperties;
      }
      else {
        double v51 = v80;
      }
      unsigned int v87 = 16;
      if (!writeSInt32(v81, *(unsigned int *)v51)
        && !writeSInt16(v81, *((unsigned __int16 *)v51 + 2))
        && !writeSInt16(v81, *((unsigned __int16 *)v51 + 3)))
      {
        unsigned int v88 = 8;
        streamWrite(v81, (uint64_t)(v51 + 1), &v88);
      }
      writeSInt32(v81, v41);
      uint64_t v41 = (*((_DWORD *)v89 + v48) + v41);
    }
    ++v48;
  }
  while (v84 != v48);
  uint64_t v52 = 0;
  while (2)
  {
    uint64_t v53 = *(void *)(v3 + 8 * v52);
    if (!v53 || !*(_DWORD *)(v53 + 1600))
    {
LABEL_135:
      if (++v52 == v84) {
        return 0;
      }
      continue;
    }
    break;
  }
  unsigned int v54 = *((_DWORD *)v89 + v52);
  uint64_t result = writeSInt32(v45, v54);
  if (result) {
    return result;
  }
  uint64_t result = writeSInt32(v45, *(unsigned int *)(*(void *)(v3 + 8 * v52) + 1600));
  if (result) {
    return result;
  }
  size_t v55 = v54 - 8;
  unint64_t v56 = malloc_type_malloc(v55, 0x5BF6F05BuLL);
  if (v56)
  {
    uint64_t v57 = v56;
    bzero(v56, v55);
    uint64_t v58 = *(unsigned int *)(*(void *)(v3 + 8 * v52) + 1600);
    unsigned int v59 = 8 * v58;
    if ((int)v58 >= 1)
    {
      uint64_t v60 = 0;
      uint64_t v61 = v57;
      do
      {
        uint64_t v62 = *(void *)(v3 + 8 * v52);
        if (!v60
          && (*(void *)(v62 + 1608) == 0x101B2E9CD5CDD505
            ? (BOOL v63 = *(void *)(v62 + 1616) == 0xAEF92C2B00089793)
            : (BOOL v63 = 0),
              v63))
        {
          CsLeWriteUInt32(0, v61);
          CsLeWriteUInt32(v59 + 8, v61 + 1);
          propertySetSaveNameList(*(void *)(v3 + 8 * v52), (_DWORD *)((char *)v57 + v59), &v87);
          v59 += v87;
        }
        else
        {
          uint64_t v64 = (unsigned int *)(v62 + 32 * v60);
          CsLeWriteUInt32(*v64, v61);
          CsLeWriteUInt32(v59 + 8, v61 + 1);
          unsigned int v66 = *((unsigned __int16 *)v64 + 4);
          unint64_t v65 = (unsigned __int16 *)(v64 + 2);
          CsLeWriteUInt32(v66, (_DWORD *)((char *)v57 + v59));
          uint64_t v67 = v59 + 4;
          uint64_t v68 = (char *)v57 + v67;
          unsigned int v69 = *v65;
          if (v69 > 0x1D)
          {
            if (*v65 > 0x40u)
            {
              if (v69 == 65)
              {
                uint64_t v75 = v62 + 32 * v60;
                uint64_t v76 = *(unsigned int *)(v75 + 16);
                LODWORD(v70) = v76 + 4;
                CsLeWriteUInt32(v76, (_DWORD *)((char *)v57 + v67));
                memcpy(v68 + 4, *(const void **)(v75 + 24), *(unsigned int *)(v75 + 16));
              }
              else
              {
                if (v69 != 71) {
                  return 12;
                }
                uint64_t v71 = v62 + 32 * v60;
                uint64_t v72 = **(unsigned int **)(v71 + 16);
                size_t v70 = (v72 + 4);
                CsLeWriteUInt32(v72, (_DWORD *)((char *)v57 + v67));
                CsLeWriteUInt32(*(unsigned int *)(*(void *)(v71 + 16) + 4), (_DWORD *)v68 + 1);
                memcpy(v68 + 8, *(const void **)(*(void *)(v71 + 16) + 8), v70 - 8);
              }
            }
            else if (v69 == 30)
            {
              uint64_t v73 = v62 + 32 * v60;
              int v74 = strlen(*(const char **)(v73 + 16));
              size_t v70 = (v74 + 5);
              bzero((char *)v57 + v67, v70);
              CsLeWriteUInt32((v74 + 1), (_DWORD *)((char *)v57 + v67));
              strcpy(v68 + 4, *(const char **)(v73 + 16));
            }
            else
            {
              if (v69 != 64) {
                return 12;
              }
              CsLeWriteUInt32(*(unsigned int *)(v62 + 32 * v60 + 16), (_DWORD *)((char *)v57 + v67));
              CsLeWriteUInt32(*((unsigned int *)v65 + 3), (_DWORD *)v68 + 1);
LABEL_122:
              LODWORD(v70) = 8;
            }
          }
          else
          {
            switch(*v65)
            {
              case 2u:
              case 0xBu:
                CsLeWriteUInt16(*(__int16 *)(v62 + 32 * v60 + 16), (_DWORD *)((char *)v57 + v67));
                LODWORD(v70) = 2;
                goto LABEL_125;
              case 3u:
                break;
              case 4u:
              case 6u:
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                return 12;
              case 5u:
                CsLeWriteFloat64((double *)((char *)v57 + v67), *(double *)(v62 + 32 * v60 + 16));
                goto LABEL_122;
              default:
                if (v69 != 22) {
                  return 12;
                }
                break;
            }
            CsLeWriteUInt32(*(unsigned int *)(v62 + 32 * v60 + 16), (_DWORD *)((char *)v57 + v67));
            LODWORD(v70) = 4;
          }
LABEL_125:
          unsigned int v87 = v70;
          unsigned int v59 = v70 + v67;
          if (((v70 + v67) & 3) != 0)
          {
            uint64_t v3 = v85;
            do
              *((unsigned char *)v57 + v59++) = 0;
            while ((v59 & 3) != 0);
          }
          else
          {
            uint64_t v3 = v85;
          }
        }
        v61 += 2;
        ++v60;
      }
      while (v60 != v58);
    }
    while ((v59 & 3) != 0)
      *((unsigned char *)v57 + v59++) = 0;
    int v77 = *((_DWORD *)v89 + v52) - 8;
    *((_DWORD *)v89 + v5CsString::CsString((CsString *)this + 2) = v77;
    int v86 = v77;
    uint64_t v45 = v81;
    streamWrite(v81, (uint64_t)v57, (unsigned int *)&v86);
    free(v57);
    goto LABEL_135;
  }
  return 5;
}

uint64_t propertySetPut(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6 = (unint64_t *)(a1 + 1608);
  Info = propertyGetInfo((void *)(a1 + 1608), a2);
  if (Info && (int v8 = Info[7], v8 != 10))
  {
    if (v8 != *a3) {
      return 14;
    }
  }
  else if (*a3 == 10)
  {
    return 12;
  }
  int RealID = propertyGetRealID(a1, a2);
  unsigned int v11 = *(_DWORD *)(a1 + 1600);
  if (v11)
  {
    size_t v12 = (int *)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 1600);
    while (1)
    {
      int v14 = *v12;
      v12 += 8;
      if (v14 == RealID) {
        break;
      }
      if (!--v13)
      {
        if (v11 > 0x31) {
          return 12;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    unint64_t v15 = bswap64(*v6);
    unint64_t v16 = bswap64(0x101B2E9CD5CDD505uLL);
    if (v15 == v16 && (unint64_t v15 = bswap64(v6[1]), v16 = bswap64(0xAEF92C2B00089793), v15 == v16))
    {
      int v17 = 0;
    }
    else if (v15 < v16)
    {
      int v17 = -1;
    }
    else
    {
      int v17 = 1;
    }
    if (!(v17 | v11))
    {
      unsigned int v11 = 1;
      *(_DWORD *)(a1 + 1600) = 1;
    }
    unsigned int v18 = v11;
    int v19 = a2;
    if ((a2 & 0xFFFFFFFE) == 0x1000)
    {
      size_t v20 = propertyGetInfo(v6, a2);
      if (!v20) {
        return 13;
      }
      if (v11)
      {
        uint64_t v21 = v11;
        unsigned int v22 = 2;
        int v23 = (unsigned int *)a1;
        do
        {
          unsigned int v25 = *v23;
          v23 += 8;
          unsigned int v24 = v25;
          if (v25 > v22) {
            unsigned int v22 = v24;
          }
          --v21;
        }
        while (v21);
        int v19 = v22 + 1;
      }
      else
      {
        int v19 = 3;
      }
      uint64_t result = propertySetAddNamePair(a1, v19, *((char **)v20 + 1));
      if (result) {
        return result;
      }
      unsigned int v18 = *(_DWORD *)(a1 + 1600);
    }
    uint64_t v26 = a1 + 32 * v11;
    *(_DWORD *)uint64_t v26 = v19;
    *(_WORD *)(v26 + 8) = 0;
    unsigned int v11 = v18 + 1;
    *(_DWORD *)(a1 + 1600) = v18 + 1;
  }
  int v27 = propertyGetRealID(a1, a2);
  if (!v11) {
    return 13;
  }
  uint64_t v28 = v11;
  for (uint64_t i = a1 + 8; *(_DWORD *)(i - 8) != v27; i += 32)
  {
    if (!--v28) {
      return 13;
    }
  }
  uint64_t result = propVariantCleanup(i);
  if (!result)
  {
    return propVariantCopyContents(a3, i);
  }
  return result;
}

uint64_t propertySetAddNamePair(uint64_t a1, int a2, char *__s)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (char *)malloc_type_malloc(v6 + 1, 0xEF5E705BuLL);
  if (!v7) {
    return 5;
  }
  int v8 = strcpy(v7, __s);
  unsigned int v9 = *(_DWORD *)(a1 + 2440);
  if (v9)
  {
    unsigned int v10 = 0;
    unsigned int v11 = (_DWORD *)(a1 + 1648);
    while (*v11)
    {
      ++v10;
      v11 += 4;
      if (v9 == v10)
      {
        if (v9 < 0x32) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
    }
    if (v10 > 0x31)
    {
LABEL_10:
      free(v8);
      return 12;
    }
    uint64_t v12 = 0;
    _DWORD *v11 = a2;
    *((void *)v11 - CsString::CsString((CsString *)this + 1) = v8;
  }
  else
  {
LABEL_7:
    uint64_t v12 = 0;
    uint64_t v13 = a1 + 1640 + 16 * v9;
    *(_DWORD *)(v13 + 8) = a2;
    *(void *)uint64_t v13 = v8;
    *(_DWORD *)(a1 + 2440) = v9 + 1;
  }
  return v12;
}

uint64_t readGUID(uint64_t a1, uint64_t a2)
{
  uint64_t result = readSInt32(a1, (_DWORD *)a2);
  if (!result)
  {
    uint64_t result = readUInt16(a1, (_WORD *)(a2 + 4));
    if (!result)
    {
      uint64_t result = readUInt16(a1, (_WORD *)(a2 + 6));
      if (!result)
      {
        unsigned int v5 = 8;
        return streamRead(a1, a2 + 8, &v5);
      }
    }
  }
  return result;
}

uint64_t propertySetReadSizePrefixedBlob(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t result = readSInt32(*(void *)(a1 + 1624), a2);
  if (!result)
  {
    size_t v7 = *a2;
    size_t v9 = 0;
    if ((int)v7 < 1) {
      return 14;
    }
    uint64_t result = streamGetBytesAvailableToRead64(*(void *)(a1 + 1624), &v9);
    if (result) {
      return result;
    }
    if (v9 >= v7)
    {
      int v8 = malloc_type_malloc(v7, 0x2C4A3CC6uLL);
      *a3 = (uint64_t)v8;
      if (v8)
      {
        bzero(v8, v7);
        unsigned int v10 = v7;
        uint64_t result = streamRead(*(void *)(a1 + 1624), *a3, &v10);
        if (!result)
        {
          if (v10 >= v7) {
            return 0;
          }
          else {
            return 14;
          }
        }
      }
      else
      {
        return 5;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

uint64_t openStructuredStorage(const char *a1, int a2, uint64_t *a3)
{
  size_t v6 = strlen(a1);
  uint64_t v7 = v6 + 1;
  if (v6 == -1) {
    return 5;
  }
  if (v7 < 0) {
    return 5;
  }
  if (!(2 * v7)) {
    return 5;
  }
  size_t v9 = malloc_type_malloc(2 * v7, 0xBF89B1ADuLL);
  if (!v9) {
    return 5;
  }
  unsigned int v10 = v9;
  SsrwStrToStr2((uint64_t)v9, (uint64_t)a1, v7);
  uint64_t v11 = openStructuredStorageEx(v10, a2, a3);
  free(v10);
  return v11;
}

uint64_t openStructuredStorageEx(_WORD *a1, int a2, uint64_t *a3)
{
  if (!a1) {
    return 6;
  }
  uint64_t v4 = 6;
  if (a3 && *a1)
  {
    if (a2)
    {
      if (a2 != 2) {
        return 2;
      }
      size_t v6 = (const __int16 *)"r";
    }
    else
    {
      size_t v6 = L"rb";
    }
    uint64_t v7 = SsrwOpenFile((uint64_t)a1, (uint64_t)v6);
    if (v7)
    {
      int v8 = v7;
      uint64_t v4 = openStructuredStorageInternal((uint64_t)v7, a3, 1, a2);
      if (v4) {
        SsrwFclose(v8);
      }
    }
    else
    {
      return 1;
    }
  }
  return v4;
}

uint64_t openStructuredStorageInStream(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = 6;
  if (a1 && a3)
  {
    if ((a2 & 0xFFFFFFFD) != 0)
    {
      return 2;
    }
    else
    {
      SsrwConnectToExternalFile(a1);
      if (v7)
      {
        int v8 = (void *)v7;
        uint64_t v3 = openStructuredStorageInternal(v7, a3, 0, a2);
        if (v3) {
          SsrwDisconnect(v8);
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return v3;
}

uint64_t rootStorageGetDocProperties(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 48)) != 0) {
    return rootStorageGetTOC(v1);
  }
  else {
    return 0;
  }
}

uint64_t createStructuredStorage(const char *a1, int a2, uint64_t *a3)
{
  size_t v6 = strlen(a1);
  uint64_t v7 = v6 + 1;
  if (v6 == -1) {
    return 5;
  }
  if (v7 < 0) {
    return 5;
  }
  if (!(2 * v7)) {
    return 5;
  }
  size_t v9 = malloc_type_malloc(2 * v7, 0xBF89B1ADuLL);
  if (!v9) {
    return 5;
  }
  unsigned int v10 = v9;
  SsrwStrToStr2((uint64_t)v9, (uint64_t)a1, v7);
  uint64_t StructuredStorage = createStructuredStorageEx(v10, a2, a3, 0, v11);
  free(v10);
  return StructuredStorage;
}

uint64_t createStructuredStorageEx(_WORD *a1, int a2, uint64_t *a3, unsigned int a4, int8x8_t a5)
{
  if (!a1) {
    return 6;
  }
  uint64_t StructuredStorageInternal = 6;
  if (a3)
  {
    a5.i32[0] = a4;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(a5);
    v8.i16[0] = vaddlv_u8(v8);
    if (*a1 && v8.i32[0] <= 1u)
    {
      if ((a2 - 1) > 1)
      {
        return 2;
      }
      else
      {
        int8x8_t v11 = SsrwOpenFile((uint64_t)a1, (uint64_t)"w");
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t StructuredStorageInternal = createStructuredStorageInternal((uint64_t)v11, a2, a3, 1, a4);
          if (StructuredStorageInternal) {
            SsrwFclose(v12);
          }
        }
        else
        {
          return 4;
        }
      }
    }
  }
  return StructuredStorageInternal;
}

uint64_t createStructuredStorageInStream(uint64_t a1, int a2, uint64_t *a3, int8x8_t a4)
{
  return createStructuredStorageInStreamEx(a1, a2, a3, 0, a4);
}

uint64_t createStructuredStorageInStreamEx(uint64_t a1, int a2, uint64_t *a3, unsigned int a4, int8x8_t a5)
{
  uint64_t StructuredStorageInternal = 6;
  if (a1)
  {
    if (a3)
    {
      a5.i32[0] = a4;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(a5);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.i32[0] <= 1u)
      {
        if ((a2 - 1) > 1)
        {
          return 2;
        }
        else
        {
          SsrwConnectToExternalFile(a1);
          if (v10)
          {
            int8x8_t v11 = (void *)v10;
            uint64_t StructuredStorageInternal = createStructuredStorageInternal(v10, a2, a3, 0, a4);
            if (StructuredStorageInternal) {
              SsrwDisconnect(v11);
            }
          }
          else
          {
            return 4;
          }
        }
      }
    }
  }
  return StructuredStorageInternal;
}

uint64_t readFatSectorsFromXFat(uint64_t a1, uint64_t a2, int *a3)
{
  XFatunsigned int Size = headerGetXFatSize(*(void *)(a1 + 16));
  unsigned int SectorShift = headerGetSectorShift(*(void *)(a1 + 16));
  if (SectorShift < 2) {
    return 8;
  }
  char v9 = SectorShift;
  int XFatStartSector = headerGetXFatStartSector(*(void *)(a1 + 16));
  uint64_t result = readSector(a1, XFatStartSector);
  if (!result)
  {
    if (!a3) {
      return 8;
    }
    *a3 = XFatStartSector;
    int8x8_t v11 = *(unsigned int **)(a1 + 80);
    if (headerGetFatSize(*(void *)(a1 + 16)) >= 0x6E)
    {
      unsigned int v12 = 1 << v9 >> 2;
      unsigned int v13 = 109;
      unsigned int v14 = 1;
      unsigned int v15 = 1;
      do
      {
        int SInt32 = CsLeReadSInt32(v11);
        int v17 = SInt32;
        if (v14 % v12)
        {
          *(_DWORD *)(a2 + 4 * v13++) = SInt32;
          ++v11;
        }
        else
        {
          uint64_t result = readSector(a1, SInt32);
          if (result) {
            return result;
          }
          if (v15 >= XFatSize) {
            return 8;
          }
          int8x8_t v11 = *(unsigned int **)(a1 + 80);
          a3[v15++] = v17;
        }
        ++v14;
      }
      while (v13 < headerGetFatSize(*(void *)(a1 + 16)));
    }
    return 0;
  }
  return result;
}

uint64_t initializeSmallFat(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v10 = 0;
  Smallunsigned int SectorShift = headerGetSmallSectorShift(v2);
  uint64_t v4 = (void ***)(a1 + 4);
  uint64_t Chain = fatConstruct((uint64_t)a1, a1 + 4, 1 << SmallSectorShift);
  if (!Chain)
  {
    SmallFatunsigned int Size = headerGetSmallFatSize(v2);
    uint64_t v6 = a1[3];
    unsigned int SmallFatStartSector = headerGetSmallFatStartSector(v2);
    uint64_t Chain = fatGetChain(v6, SmallFatStartSector, (unsigned int *)&SmallFatSize, &v10);
    if (Chain
      || (headerSetSmallFatSize(v2, SmallFatSize),
          fatSetFatSectors((uint64_t)*v4, v10, SmallFatSize),
          uint64_t Chain = fatReadFat((unsigned int **)*v4),
          Chain))
    {
      fatDestroy(v4);
      *uint64_t v4 = 0;
    }
  }
  return Chain;
}

uint64_t rootStorageInitWrite(uint64_t *a1)
{
  int v5 = -1;
  uint64_t v2 = headerWrite(*a1, a1[2]);
  if (!v2)
  {
    if (SsrwFseek(*a1))
    {
      return 4;
    }
    else
    {
      int v3 = 109;
      while (1)
      {
        uint64_t v2 = 4;
        if (SsrwFwrite((uint64_t)&v5, 4, 1, *a1) != 1) {
          break;
        }
        if (!--v3) {
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t SsrwDisconnect(void *a1)
{
  return 0;
}

size_t SsrwFileFread(void *a1, size_t a2, size_t a3, FILE **a4)
{
  if (a4 && a1 && (uint64_t v4 = *a4) != 0) {
    return fread(a1, a2, a3, v4);
  }
  else {
    return 0;
  }
}

size_t SsrwFileFwrite(const void *a1, size_t a2, size_t a3, FILE **a4)
{
  if (a4 && a1 && (uint64_t v4 = *a4) != 0) {
    return fwrite(a1, a2, a3, v4);
  }
  else {
    return 0;
  }
}

uint64_t SsrwFileFclose(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(FILE **)a1) != 0 && (*(unsigned char *)(a1 + 8) & 1) != 0) {
    return fclose(v2);
  }
  else {
    return 0;
  }
}

uint64_t SsrwFileFseek(FILE **a1, uint64_t a2, int a3)
{
  if (a1 && (int v3 = *a1) != 0) {
    return fseek(v3, a2, a3);
  }
  else {
    return 0;
  }
}

off_t SsrwFileFtell(FILE **a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return ftello(v1);
  }
  else {
    return 0;
  }
}

uint64_t SsrwFileFtruncate(void *a1)
{
  if (a1 && *a1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

FILE **SsrwOpenFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (FILE **)malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  int v5 = v4;
  if (v4)
  {
    *((_OWORD *)v4 + CsString::CsString((CsString *)this + 1) = 0u;
    *((_OWORD *)v4 + CsString::CsString((CsString *)this + 2) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    v4[6] = (FILE *)SsrwFileFread;
    v4[7] = (FILE *)SsrwFileFwrite;
    v4[8] = (FILE *)SsrwFileFclose;
    v4[9] = (FILE *)SsrwFileFseek;
    v4[10] = (FILE *)SsrwFileFtell;
    v4[11] = (FILE *)SsrwFileFtruncate;
    *((unsigned char *)v4 + 8) = 1;
    uint64_t v6 = SsrwFalseWFopen(a1, a2);
    *int v5 = v6;
    if (!v6)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

double SsrwConnectToExternalFile(uint64_t a1)
{
  uint64_t v2 = (char *)malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (v2)
  {
    *((void *)v2 + 5) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 25) = 0u;
    *(_OWORD *)(v2 + 9) = 0u;
    *((void *)v2 + 6) = SsrwFileFread;
    *((void *)v2 + 7) = SsrwFileFwrite;
    *((void *)v2 + 8) = SsrwFileFclose;
    *((void *)v2 + 9) = SsrwFileFseek;
    *((void *)v2 + 10) = SsrwFileFtell;
    *((void *)v2 + 1CsString::CsString((CsString *)this + 1) = SsrwFileFtruncate;
    v2[8] = 0;
    *(void *)uint64_t v2 = a1;
  }
  return result;
}

uint64_t streamUpgradeMiniToRegular(uint64_t *a1)
{
  if (!streamShouldBeMini((uint64_t)a1)) {
    return 0;
  }
  uint64_t v2 = (unsigned int *)a1[7];
  if (v2[9] > 1) {
    return 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v6 = malloc_type_malloc(*v2, 0xF9C4A8ACuLL);
  if (!v6) {
    return 5;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)a1[7];
  unsigned int v18 = v8;
  unsigned int v9 = streamRead((uint64_t)a1, (uint64_t)v6, &v18);
  if (v9) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v18 == v8;
  }
  if (v10)
  {
    uint64_t v11 = a1[7];
    *(_WORD *)(v11 + 3CsString::CsString((CsString *)this + 2) = 1;
    int v12 = *(_DWORD *)(v11 + 16);
    if (v12) {
      uint64_t v13 = **(unsigned int **)(v11 + 8);
    }
    else {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    *(_DWORD *)(v11 + 16) = 0;
    *(void *)uint64_t v11 = 0;
    a1[3] = 0;
    uint64_t v3 = streamWrite((uint64_t)a1, (uint64_t)v7, &v18);
    free(v7);
    if (v3) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v18 == v8;
    }
    if (v14)
    {
      uint64_t v15 = streamFlushToDisk((uint64_t)a1);
      if (!v15)
      {
        if (v13 != -1)
        {
          uint64_t SmallFat = rootStorageGetSmallFat(*a1);
          fatFreeChain(SmallFat, v13);
        }
        streamDestroy((void **)(a1[7] + 24));
        uint64_t v3 = 0;
        goto LABEL_26;
      }
      uint64_t v3 = v15;
    }
    uint64_t v16 = a1[7];
    *(unsigned char *)(v16 + 3CsString::CsString((CsString *)this + 2) = 0;
    *(_DWORD *)(v16 + 16) = v12;
    *(void *)uint64_t v16 = v8;
LABEL_26:
    a1[3] = v5;
    return v3;
  }
  if (v9) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = 15;
  }
  free(v7);
  return v3;
}

uint64_t convertToSmallStream(uint64_t a1)
{
  unsigned int v18 = 0;
  if (!**(void **)(a1 + 56)) {
    return 0;
  }
  TOC = (uint64_t *)rootStorageGetTOC(*(void *)a1);
  uint64_t Fat = rootStorageGetFat(*(void *)a1);
  uint64_t SmallFat = rootStorageGetSmallFat(*(void *)a1);
  uint64_t Header = rootStorageGetHeader(*(void *)a1);
  EntryAtIndeCGFloat x = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
  char SectorShift = headerGetSectorShift(Header);
  Smallchar SectorShift = headerGetSmallSectorShift(Header);
  Startuint64_t Sector = directoryGetStartSector(EntryAtIndex);
  unint64_t v7 = **(void **)(a1 + 56);
  if (!v7) {
    return fatFreeChain(Fat, StartSector);
  }
  uint64_t Sector = 0;
  unsigned int v9 = 0;
  unsigned int v16 = (1 << SectorShift) >> SmallSectorShift;
  unsigned int v10 = v16 - 1;
  unsigned int v11 = -1;
  while (1)
  {
    unsigned int v12 = v7 >= (1 << SmallSectorShift) ? 1 << SmallSectorShift : v7;
    if ((v9 & v10) == 0) {
      uint64_t Sector = rootStorageReadSector(*(void *)a1, *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 4 * (v9 / v16)));
    }
    uint64_t result = rootStorageWriteMiniSector(*(void *)a1, Sector + ((v9 & v10) << SmallSectorShift), &v18);
    if (result) {
      break;
    }
    if (v11 == -1)
    {
      uint64_t result = directorySetStartSector(EntryAtIndex, v18);
      if (result) {
        return result;
      }
      uint64_t result = fatTerminateChain(SmallFat, v18);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = fatUpdate(SmallFat, v11, v18);
      if (result) {
        return result;
      }
    }
    unsigned int v11 = v18;
    v7 -= v12;
    ++v9;
    if (!v7) {
      return fatFreeChain(Fat, StartSector);
    }
  }
  return result;
}

uint64_t readUInt64(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v5 = 8;
  uint64_t v2 = 6;
  if (a1 && a2)
  {
    uint64_t v2 = streamRead(a1, (uint64_t)&v6, &v5);
    *a2 = CsLeReadSInt32(&v6);
  }
  return v2;
}

uint64_t writeSInt16(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = 2;
  if (!a1) {
    return 6;
  }
  CsLeWriteUInt16(a2, &v4);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeSInt32(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = 4;
  if (!a1) {
    return 6;
  }
  CsLeWriteUInt32(a2, &v4);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeFloat32(uint64_t a1, float a2)
{
  unsigned int v5 = 4;
  if (!a1) {
    return 6;
  }
  leWriteFloat32(&v4, a2);
  return streamWrite(a1, (uint64_t)&v4, &v5);
}

uint64_t writeFloat64(uint64_t a1, double a2)
{
  v5[1] = *(double *)MEMORY[0x263EF8340];
  unsigned int v4 = 8;
  if (!a1) {
    return 6;
  }
  CsLeWriteFloat64(v5, a2);
  return streamWrite(a1, (uint64_t)v5, &v4);
}

uint64_t writeString16(uint64_t a1, unsigned __int16 *a2, unsigned int *a3)
{
  uint64_t result = 6;
  if (a1 && a2 && a3)
  {
    unsigned int v7 = *a3;
    if (*a3 || (v8 = _ChWcslen(a2), unsigned int v7 = v8 + 1, v8 != -1))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v7;
      while (1)
      {
        uint64_t result = writeSInt16(a1, a2[v9]);
        if (result) {
          break;
        }
        if (v10 == ++v9)
        {
          uint64_t result = 0;
          LODWORD(v9) = v10;
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
      uint64_t result = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t tocInvalidateEntry(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 6;
  }
  uint64_t v3 = *(void *)a1;
  if (!v3 || *(_DWORD *)(a1 + 8) <= a2) {
    return 6;
  }
  uint64_t v5 = directoryGetAtIndex(v3, a2);
  if (!v5) {
    return 11;
  }
  if (*(_DWORD *)(a1 + 8) - 1 == a2) {
    *(_DWORD *)(a1 + 8) = a2;
  }
  return directoryInvalidate(v5);
}

void OCCBinaryStreamer::OCCBinaryStreamer(OCCBinaryStreamer *this, OCCCryptoKey *a2, const char *a3)
{
  OCCStreamer::OCCStreamer((OCCStreamer *)this, a2, a3);
  void *v3 = &unk_26EBDA518;
}

void OCCBinaryStreamer::replaceGarbledBytes(OCCBinaryStreamer *this, SsrwOOStream *a2, SsrwOOStream *a3, uint64_t a4)
{
  SsrwOOStream::seekFromStart(a2, a4);
  unsigned int v7 = (OCCBinaryStreamer *)SsrwOOStream::seekFromStart(a3, a4);
  OCCBinaryStreamer::replaceGarbledBytes(v7, a2, a3);
}

uint64_t sub_238DAC3F4(void *a1)
{
  return 0;
}

void OCCBinaryStreamer::replaceGarbledBytes(OCCBinaryStreamer *this, SsrwOOStream *a2, SsrwOOStream *a3)
{
}

BOOL OCCBinaryStreamer::cryptoAPI_decryptStreamOrStorage(OCCBinaryStreamer *this, const unsigned __int16 *a2, SsrwOOStream *a3, SsrwOOStorage *a4, unsigned int *a5)
{
  uint64_t v9 = *(unsigned int *)a2;
  uint64_t v8 = *((unsigned int *)a2 + 1);
  uint64_t v10 = a2[4];
  int v11 = *((unsigned __int8 *)a2 + 11);
  unsigned int v12 = (unsigned __int16 *)(a2 + 8);
  *a5 = 2 * *((unsigned __int8 *)a2 + 10) + 18;
  if (!OCCBinaryStreamer::cryptoAPI_isThisStreamOrStorageNeeded(this, a2 + 8)) {
    return 1;
  }
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v8)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v8);
    uint64_t v13 = __p;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v15 = OCCCryptoKey::decryptBlock(this->var1, a3, v9, v8, v10, v13);
  BOOL v14 = v15;
  if (v11) {
    char v16 = v15;
  }
  else {
    char v16 = 0;
  }
  if (v16)
  {
    int v19 = 0;
    if (OCCStreamer::openOutputStream((OCCStreamer *)this, a4, &v19, v12))
    {
      int v18 = v8;
      (*((void (**)(SsrwOOStream *, void *, int *))v19->var0 + 23))(v19, __p, &v18);
      (*((void (**)(SsrwOOStream *, uint64_t))v19->var0 + 19))(v19, 1);
      if (v19) {
        (*((void (**)(SsrwOOStream *))v19->var0 + 1))(v19);
      }
      BOOL v14 = v18 == v8;
    }
    else
    {
      BOOL v14 = 0;
    }
  }
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_238DAC69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL OCCBinaryStreamer::cryptoAPI_isThisStreamOrStorageNeeded(OCCBinaryStreamer *this, const unsigned __int16 *a2)
{
  return !_ChWcscmp(a2, (const unsigned __int16 *)&OCCBinaryStreamer::DocumentSummaryInformationStreamName)|| _ChWcscmp(a2, (const unsigned __int16 *)&OCCBinaryStreamer::SummaryInformationStreamName) == 0;
}

BOOL OCCBinaryStreamer::cryptoAPI_decryptEncryptedSummaryStream(OCCBinaryStreamer *this, SsrwOOStorage *a2)
{
  int v23 = 0;
  unsigned int v4 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  uint64_t v5 = (SsrwOOStream **)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 10))(this);
  if (!OCCStreamer::openInputStream(v4, (SsrwOOStorage *)&v23, v5, v6)) {
    return 1;
  }
  unsigned int v22 = 0;
  BOOL v7 = 0;
  if (OCCCryptoKey::decryptBlock(this->var1, v23, 0, 4, 0, &v22))
  {
    uint64_t v8 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))v23->var0 + 21))(v23);
    int Size = SsrwOOStgInfo::getSize(v8);
    uint64_t v10 = v22;
    __p = 0;
    size_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v11 = Size - v22;
    if (Size == v22)
    {
      unsigned int v12 = 0;
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v11);
      uint64_t v10 = v22;
      unsigned int v12 = __p;
    }
    int v13 = OCCCryptoKey::decryptBlock(this->var1, v23, v10, v11, 0, v12);
    BOOL v14 = __p;
    if (v13)
    {
      int v15 = *(_DWORD *)__p;
      if (*(_DWORD *)__p)
      {
        unsigned int v16 = 4;
        do
        {
          unsigned int v18 = 0;
          BOOL v7 = OCCBinaryStreamer::cryptoAPI_decryptStreamOrStorage(this, (const unsigned __int16 *)((char *)__p + v16), v23, a2, &v18);
          if (!v7) {
            break;
          }
          v16 += v18;
          --v15;
        }
        while (v15);
        BOOL v14 = __p;
        if (!__p) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v7 = 1;
      }
      goto LABEL_17;
    }
    BOOL v7 = 0;
    if (__p)
    {
LABEL_17:
      size_t v20 = v14;
      operator delete(v14);
    }
  }
LABEL_18:
  if (v23) {
    (*((void (**)(SsrwOOStream *))v23->var0 + 1))(v23);
  }
  return v7;
}

void sub_238DAC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCBinaryStreamer::cryptoAPI_encryptSummaryStream(OCCBinaryStreamer *this, SsrwOOStorage *a2)
{
  *(void *)v47.unsigned __int16 var1 = 0;
  unsigned int v4 = (const char *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 10))(this);
  uint64_t v5 = OCCStreamer::openOutputStream((OCCStreamer *)this, a2, (SsrwOOStream **)v47.var1, v4);
  if (!v5) {
    return v5;
  }
  (*(void (**)(void, void))(**(void **)v47.var1 + 224))(*(void *)v47.var1, 0);
  (*(void (**)(void, void))(**(void **)v47.var1 + 224))(*(void *)v47.var1, 0);
  uint64_t v46 = 0;
  v47.int var0 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v43 = 0;
  int v6 = (*(uint64_t (**)(void))(**(void **)v47.var1 + 40))(*(void *)v47.var1);
  BOOL v7 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  if (OCCStreamer::openInputStream(v7, &v47, (SsrwOOStream **)&OCCBinaryStreamer::SummaryInformationStreamName, v8))
  {
    uint64_t v9 = (SsrwOOStgInfo *)(*(uint64_t (**)(_Storage *))(*(void *)v47.var0 + 168))(v47.var0);
    uint64_t Size = SsrwOOStgInfo::getSize(v9);
    uint64_t v11 = Size;
    unsigned int v12 = v44;
    if (Size <= (int)v45 - (int)v44)
    {
      if (Size < (int)v45 - (int)v44) {
        uint64_t v45 = (char *)v44 + Size;
      }
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v44, Size - (v45 - v44));
      unsigned int v12 = v44;
    }
    if (OCCCryptoKey::encryptBlock(this->var1, (SsrwOOStream *)v47.var0, 0, v11, 0, v12))
    {
      int v43 = v11;
      (*(void (**)(void, void *, int *))(**(void **)v47.var1 + 184))(*(void *)v47.var1, v44, &v43);
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
    (*(void (**)(_Storage *, uint64_t))(*(void *)v47.var0 + 152))(v47.var0, 1);
    if (v47.var0) {
      (*(void (**)(_Storage *))(*(void *)v47.var0 + 8))(v47.var0);
    }
    v47.int var0 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    LODWORD(v1CsString::CsString((CsString *)this + 1) = 0;
  }
  int v14 = (*(uint64_t (**)(void))(**(void **)v47.var1 + 40))(*(void *)v47.var1);
  int v15 = (OCCStreamer *)(*((uint64_t (**)(OCCBinaryStreamer *))this->var0 + 3))(this);
  unsigned int v38 = v5;
  if (OCCStreamer::openInputStream(v15, &v47, (SsrwOOStream **)&OCCBinaryStreamer::DocumentSummaryInformationStreamName, v16))
  {
    int v17 = (SsrwOOStgInfo *)(*(uint64_t (**)(_Storage *))(*(void *)v47.var0 + 168))(v47.var0);
    uint64_t v18 = SsrwOOStgInfo::getSize(v17);
    uint64_t v19 = v18;
    size_t v20 = v44;
    if (v18 <= (int)v45 - (int)v44)
    {
      if (v18 < (int)v45 - (int)v44) {
        uint64_t v45 = (char *)v44 + v18;
      }
    }
    else
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v44, v18 - (v45 - v44));
      size_t v20 = v44;
    }
    if (OCCCryptoKey::encryptBlock(this->var1, (SsrwOOStream *)v47.var0, 0, v19, v13, v20))
    {
      int v43 = v19;
      (*(void (**)(void, void *, int *))(**(void **)v47.var1 + 184))(*(void *)v47.var1, v44, &v43);
    }
    (*(void (**)(_Storage *, uint64_t))(*(void *)v47.var0 + 152))(v47.var0, 1);
    int v21 = v14;
    if (v47.var0) {
      (*(void (**)(_Storage *))(*(void *)v47.var0 + 8))(v47.var0);
    }
    __int16 v22 = v13;
    int v23 = v6;
    v47.int var0 = 0;
  }
  else
  {
    int v21 = v14;
    __int16 v22 = v13;
    int v23 = v6;
    LODWORD(v19) = 0;
  }
  if (v11) {
    unsigned int v24 = 60;
  }
  else {
    unsigned int v24 = 4;
  }
  if (v11) {
    int v25 = 2;
  }
  else {
    int v25 = 1;
  }
  if (v19) {
    uint64_t v26 = v24 + 72;
  }
  else {
    uint64_t v26 = v24;
  }
  if (v19) {
    BOOL v27 = v25;
  }
  else {
    BOOL v27 = v11 != 0;
  }
  int v39 = (*(uint64_t (**)(void))(**(void **)v47.var1 + 40))(*(void *)v47.var1);
  __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v26);
  uint64_t v28 = (char *)__p;
  *(_DWORD *)__p = v27;
  if (!v11)
  {
    uint64_t v29 = 4;
    if (!v19) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  *((_DWORD *)v28 + CsString::CsString((CsString *)this + 1) = v23;
  *((_DWORD *)v28 + CsString::CsString((CsString *)this + 2) = v11;
  *(void *)(v28 + 1CsString::CsString((CsString *)this + 2) = 18022400;
  *(void *)(v28 + 5CsString::CsString((CsString *)this + 2) = 0x6E006F0069;
  *(_OWORD *)(v28 + 20) = OCCBinaryStreamer::SummaryInformationStreamName;
  *(_OWORD *)(v28 + 36) = *(_OWORD *)L"Information";
  uint64_t v29 = 60;
  if (v19)
  {
LABEL_39:
    uint64_t v30 = &v28[v29];
    *(_DWORD *)uint64_t v30 = v21;
    *((_DWORD *)v30 + CsString::CsString((CsString *)this + 1) = v19;
    *((_WORD *)v30 + 4) = v22;
    v30[10] = 27;
    *((unsigned char *)__p + v29 + 1CsString::CsString((CsString *)this + 1) = 1;
    uint64_t v28 = (char *)__p;
    BOOL v31 = (char *)__p + v29;
    *((_DWORD *)v31 + 3) = 0;
    *((void *)v31 + 8) = 0x6E006F0069;
    *((_OWORD *)v31 + CsString::CsString((CsString *)this + 1) = OCCBinaryStreamer::DocumentSummaryInformationStreamName;
    *((_OWORD *)v31 + CsString::CsString((CsString *)this + 2) = *(_OWORD *)aTsummary;
    *((_OWORD *)v31 + 3) = xmmword_238EDEA8C;
  }
LABEL_40:
  int v32 = v44;
  if (v26 <= (int)v45 - (int)v44)
  {
    if (v26 < (int)v45 - (int)v44) {
      uint64_t v45 = (char *)v44 + v26;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v44, v26 - (v45 - v44));
    uint64_t v28 = (char *)__p;
    int v32 = v44;
  }
  if (OCCCryptoKey::encryptBlock(this->var1, v28, v26, 0, v32))
  {
    int v43 = v26;
    (*(void (**)(void, void *, int *))(**(void **)v47.var1 + 184))(*(void *)v47.var1, v44, &v43);
  }
  (*(void (**)(void, void, void))(**(void **)v47.var1 + 16))(*(void *)v47.var1, 0, 0);
  unsigned int v33 = __p;
  int v34 = v41 - __p;
  if ((v41 - __p) > 7)
  {
    if (v34 != 8) {
      uint64_t v41 = (char *)__p + 8;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, 8 - v34);
    unsigned int v33 = __p;
  }
  *unsigned int v33 = v39;
  v33[1] = v26;
  uint64_t v35 = v44;
  int v36 = v45 - v44;
  if ((v45 - v44) > 7)
  {
    if (v36 != 8) {
      uint64_t v45 = (char *)v44 + 8;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v44, 8 - v36);
    unsigned int v33 = __p;
    uint64_t v35 = v44;
  }
  if (OCCCryptoKey::encryptBlock(this->var1, v33, 8, 0, v35))
  {
    int v43 = 8;
    (*(void (**)(void, void *, int *))(**(void **)v47.var1 + 184))(*(void *)v47.var1, v44, &v43);
  }
  (*(void (**)(void, uint64_t))(**(void **)v47.var1 + 152))(*(void *)v47.var1, 1);
  if (*(void *)v47.var1) {
    (*(void (**)(void))(**(void **)v47.var1 + 8))(*(void *)v47.var1);
  }
  uint64_t v5 = v38;
  if (__p)
  {
    uint64_t v41 = (char *)__p;
    operator delete(__p);
  }
  if (v44)
  {
    uint64_t v45 = (char *)v44;
    operator delete(v44);
  }
  return v5;
}

void sub_238DAD048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCBinaryStreamer::decryptIntoFile(OCCBinaryStreamer *this, __sFILE *a2)
{
  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v8);
  if (OCCStreamer::openOutputRootStorage((OCCStreamer *)this, a2, (SsrwOORootStorage *)&v8, v4))
  {
    if ((*((unsigned int (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 8))(this, &v8)
      && (!OCCCryptoAPICryptoKey::isCryptoAPI(this->var1, v5)
       || OCCBinaryStreamer::cryptoAPI_decryptEncryptedSummaryStream(this, &v8)))
    {
      uint64_t v6 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 6))(this, &v8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    SsrwOORootStorage::close((SsrwOORootStorage *)&v8, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v8);
  return v6;
}

void sub_238DAD178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCBinaryStreamer::encryptIntoFile(OCCBinaryStreamer *this, __sFILE *a2)
{
  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v9);
  if (OCCStreamer::openOutputRootStorage((OCCStreamer *)this, a2, (SsrwOORootStorage *)&v9, v4))
  {
    if ((*((unsigned int (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 9))(this, &v9)
      && (!OCCCryptoAPICryptoKey::isCryptoAPI(this->var1, v5)
       || (!OCCCryptoAPICryptoKey::isDocPropertyInfoEncrypted((OCCCryptoAPICryptoKey *)this->var1)
         ? (int v6 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 7))(this, &v9))
         : (int v6 = OCCBinaryStreamer::cryptoAPI_encryptSummaryStream(this, &v9)),
           v6)))
    {
      uint64_t v7 = (*((uint64_t (**)(OCCBinaryStreamer *, SsrwOOStorage *))this->var0 + 6))(this, &v9);
    }
    else
    {
      uint64_t v7 = 0;
    }
    SsrwOORootStorage::close((SsrwOORootStorage *)&v9, 1);
  }
  else
  {
    uint64_t v7 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v9);
  return v7;
}

void sub_238DAD2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::getDefaultPassphraseInUTF8(OCCStreamer *this)
{
  return 0;
}

uint64_t OCCBinaryStreamer::copyUnencryptedIntoRootStorage(OCCBinaryStreamer *this, SsrwOORootStorage *a2)
{
  return 1;
}

void OCCCryptoAPICryptoKey::~OCCCryptoAPICryptoKey(OCCCryptoKey *this)
{
  this->int var0 = (void **)&unk_26EBDA598;
  int var0 = this[1].var0;
  if (var0) {
    MEMORY[0x23EC99790](var0, 0x1000C8077774924);
  }
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  uint64_t vars8;

  OCCCryptoAPICryptoKey::~OCCCryptoAPICryptoKey(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t OCCCryptoAPICryptoKey::create(OCCCryptoAPICryptoKey *this, const void *a2)
{
  unsigned int v2 = a2;
  OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v8, this, a2);
  if ((v8[20] & 7) == 0)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    if (OCCEncryptionHeader::getNewEncryptionVerifier((OCCEncryptionHeader *)v8, (char *)this, v2, 0x14u, &v7, &v6, &v5))operator new(); {
  }
    }
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)v8);
  return 0;
}

void sub_238DAD478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)va);
  _Unwind_Resume(a1);
}

void OCCCryptoAPICryptoKey::OCCCryptoAPICryptoKey(OCCCryptoAPICryptoKey *this, unsigned __int8 *a2, char *a3, char *a4, int a5, char a6)
{
  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, 0x14u, 0x10u);
  *(void *)uint64_t v10 = &unk_26EBDA598;
  *(void *)(v10 + 48) = a2;
  *(_DWORD *)(v10 + 56) = a5;
  *(void *)(v10 + 64) = &unk_26EBDA8A8;
  uint64_t v11 = (OCCRC4Cryptor *)(v10 + 72);
  if (a5 == 5) {
    int v12 = 16;
  }
  else {
    int v12 = a5;
  }
  OCCRC4Cryptor::OCCRC4Cryptor(v11, v12);
  *((unsigned char *)this + 96) = a6;
}

void sub_238DAD564(_Unwind_Exception *a1)
{
  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

uint64_t OCCCryptoAPICryptoKey::encryptionInfo(OCCCryptoAPICryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if (*((void *)this + 6) && *((void *)this + 2) && *((void *)this + 3))
  {
    OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v4);
    OCCEncryptionHeader::initializeForDefaultCryptioAPI((OCCEncryptionHeader *)v4);
  }
  return 0;
}

void sub_238DAD6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OCCCryptoAPICryptoKey::isDocPropertyInfoEncrypted(OCCCryptoAPICryptoKey *this)
{
  return *((unsigned __int8 *)this + 96);
}

BOOL OCCCryptoAPICryptoKey::isVersionValid(OCCCryptoAPICryptoKey *this, int a2)
{
  return (this - 2) < 3 && a2 == 2;
}

const void *OCCCryptoAPICryptoKey::isCryptoAPI(const void *this, const OCCCryptoKey *a2)
{
  if (this) {
  return this;
  }
}

uint64_t OCCCryptoAPICryptoKey::getSeedSize(OCCCryptoAPICryptoKey *this)
{
  return (*(unsigned int (**)(OCCCryptoAPICryptoKey *))(*(void *)this + 32))(this) + 20;
}

uint64_t OCCCryptoAPICryptoKey::computeKeySeed(OCCCryptoAPICryptoKey *this, const void *a2, unsigned int a3, void *a4)
{
  __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a3 + 16);
  *(_OWORD *)__p = *(_OWORD *)*((void *)this + 6);
  memcpy((char *)__p + 16, a2, a3);
  unsigned int v8 = (**(uint64_t (***)(OCCCryptoAPICryptoKey *))this)(this);
  bzero(a4, v8);
  OCCSHA1Hash::computeHash((OCCCryptoAPICryptoKey *)((char *)this + 64), __p, v11 - __p, (unsigned __int8 *)a4);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_238DAD85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double OCCCryptoAPICryptoKey::decryptVerificationInfo(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, _OWORD *a4, _DWORD *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v7 = *((void *)this + 3);
  v14[0] = *(_OWORD *)*((void *)this + 2);
  int v8 = *(_DWORD *)(v7 + 16);
  v14[1] = *(_OWORD *)v7;
  int v15 = v8;
  if (OCCCryptor::decrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, v14, 0x24u, &v11, 0x24u))
  {
    double result = *(double *)&v11;
    long long v10 = v12;
    *a4 = v11;
    a5[4] = v13;
    *(_OWORD *)a5 = v10;
  }
  return result;
}

uint64_t OCCCryptoAPICryptoKey::getCipherKeySize(OCCCryptoAPICryptoKey *this)
{
  return OCCRC4Cryptor::getKeySizeInBytes((OCCCryptoAPICryptoKey *)((char *)this + 72));
}

uint64_t OCCCryptoAPICryptoKey::getBlockKeySize(OCCCryptoAPICryptoKey *this)
{
  return 4;
}

uint64_t OCCCryptoAPICryptoKey::computeVerifierBlockKey(OCCCryptoAPICryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCCryptoAPICryptoKey::computeVerifierHashBlockKey(OCCCryptoAPICryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

BOOL OCCCryptoAPICryptoKey::deriveKey(OCCCryptoAPICryptoKey *this, const void *a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return 0;
  }
  uint64_t v7 = (OCCCryptoAPICryptoKey *)((char *)this + 64);
  int v8 = (void *)(v3 + OCCSHA1Hash::getOutputSize((OCCCryptoAPICryptoKey *)((char *)this + 64)));
  unsigned int v9 = (*(uint64_t (**)(OCCCryptoAPICryptoKey *))(*(void *)this + 32))(this);
  memcpy(v8, a2, v9);
  v18[0] = 0;
  v18[1] = 0;
  int v19 = 0;
  long long v10 = (const void *)*((void *)this + 1);
  CC_LONG v11 = (**(uint64_t (***)(OCCCryptoAPICryptoKey *))this)(this);
  OCCSHA1Hash::computeHash(v7, v10, v11, (unsigned __int8 *)v18);
  unsigned int v12 = *((_DWORD *)this + 14);
  if (v12 == 5) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = v12;
  }
  BOOL v14 = v13 >= v12;
  if (v13 >= v12)
  {
    if (v13 >= 0x14) {
      size_t v15 = 20;
    }
    else {
      size_t v15 = v13;
    }
    if (v13 <= 0x14) {
      size_t v16 = 0;
    }
    else {
      size_t v16 = v13 - v15;
    }
    bzero(&a3[v15], v16);
    memcpy(a3, v18, v15);
  }
  return v14;
}

uint64_t OCCCryptoAPICryptoKey::deriveDecryptionKey(OCCCryptoAPICryptoKey *this, int a2, void *a3, unsigned __int8 **a4)
{
  int v5 = a2;
  *a4 = 0;
  return (*(uint64_t (**)(OCCCryptoAPICryptoKey *, int *, void *))(*(void *)this + 56))(this, &v5, a3);
}

uint64_t OCCCryptoAPICryptoKey::decryptBlockUsingDecryptionKey(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCCryptoAPICryptoKey::encryptBlockUsingEncryptionKey(OCCCryptoAPICryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt((OCCCryptoAPICryptoKey *)((char *)this + 72), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCCryptoAPICryptoKey::getHashAlgorithm(OCCCryptoAPICryptoKey *this)
{
  return (uint64_t)this + 64;
}

uint64_t OCCCryptoAPICryptoKey::createXmlSegmenter(OCCCryptoAPICryptoKey *this)
{
  return 0;
}

void OCCCryptoKey::~OCCCryptoKey(OCCCryptoKey *this)
{
  this->int var0 = (void **)&unk_26EBDA640;
  unsigned __int16 var1 = this->var1;
  if (var1) {
    MEMORY[0x23EC99790](var1, 0x1000C8077774924);
  }
  unsigned int var2 = this->var2;
  if (var2) {
    MEMORY[0x23EC99790](var2, 0x1000C8077774924);
  }
  unsigned int var3 = this->var3;
  if (var3) {
    MEMORY[0x23EC99790](var3, 0x1000C8077774924);
  }
}

void OCCCryptoKey::OCCCryptoKey(OCCCryptoKey *this, char *a2, char *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  this->int var0 = (void **)&unk_26EBDA640;
  this->unsigned __int16 var1 = 0;
  this->unsigned int var2 = a2;
  this->unsigned int var3 = a3;
  this->size_t var4 = a4;
  this->var5 = a5;
  this->var6 = a6;
}

xmlDoc *OCCCryptoKey::createUsingEncryptionInfoStream(OCCCryptoKey *this, SsrwOOStream *a2, SsrwOOStream *a3, const void *a4)
{
  uint64_t v8 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (a4) {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  }
  SsrwOOStream::seekFromStart(a2, (uint64_t)a3);
  int v11 = (int)a4;
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v11);
  if (v11 == a4) {
    UsingEncryptionInfoBuffer = OCCCryptoKey::createUsingEncryptionInfoBuffer(this, (unsigned __int16 *)__p, a4);
  }
  else {
    UsingEncryptionInfoBuffer = 0;
  }
  SsrwOOStream::seekFromStart(a2, v8);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  return UsingEncryptionInfoBuffer;
}

void sub_238DADDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xmlDoc *OCCCryptoKey::createUsingEncryptionInfoBuffer(OCCCryptoKey *this, unsigned __int16 *a2, const void *a3)
{
  if (a3 >= 4)
  {
    int v5 = (OCCCryptoAPICryptoKey *)*a2;
    int v6 = a2[1];
    if (!this)
    {
LABEL_3:
      if (!OCCRC4CryptoKey::isVersionValid(v5, v6))
      {
        if (OCCCryptoAPICryptoKey::isVersionValid(v5, v6))
        {
          return (xmlDoc *)OCCCryptoAPICryptoKey::create((OCCCryptoAPICryptoKey *)a2, a3);
        }
        return 0;
      }
      goto LABEL_18;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    if (!this) {
      goto LABEL_3;
    }
  }
  if (OCCAgileCryptoKey::isVersionValid(v5, v6))
  {
    return OCCAgileCryptoKey::create((OCCAgileCryptoKey *)a2, a3);
  }
  else
  {
    if (!OCCStandardCryptoKey::isVersionValid(v5, v6))
    {
      if (!OCCRC4CryptoKey::isVersionValid(v5, v6)) {
        return 0;
      }
LABEL_18:
      return (xmlDoc *)OCCRC4CryptoKey::create((OCCRC4CryptoKey *)a2, a3);
    }
    return (xmlDoc *)OCCStandardCryptoKey::create((OCCStandardCryptoKey *)a2, a3);
  }
}

BOOL OCCCryptoKey::verifyPassphrase(OCCCryptoKey *this, const void *a2, uint64_t a3)
{
  uint64_t v6 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 11))(this);
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  unsigned __int16 var1 = this->var1;
  if (!var1)
  {
    ((void (*)(OCCCryptoKey *))*this->var0)(this);
    operator new[]();
  }
  if (!(*((unsigned int (**)(OCCCryptoKey *, const void *, uint64_t, char *))this->var0 + 1))(this, a2, a3, var1))return 0; {
  BOOL v31 = 0;
  }
  int v32 = 0;
  uint64_t v33 = 0;
  unsigned int v9 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  long long v10 = 0;
  if (v9)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append(&v31, v9);
    long long v10 = v31;
  }
  if (OCCCryptoKey::deriveVerifierKey(this, v10))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unsigned int v12 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
    uint64_t v13 = 0;
    if (v12)
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v28, v12);
      uint64_t v13 = v28;
    }
    else if (v29 != v28)
    {
      uint64_t v29 = v28;
    }
    if (OCCCryptoKey::deriveVerifierHashKey(this, v13))
    {
      __p = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      unsigned int var6 = this->var6;
      if (var6) {
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, var6);
      }
      __s1 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      if (v7)
      {
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__s1, v7);
        size_t v15 = __s1;
      }
      else
      {
        size_t v15 = 0;
      }
      if ((*((uint64_t (**)(OCCCryptoKey *, char *, void *, void *, void *))this->var0 + 2))(this, v31, v28, __p, v15))
      {
        __s2 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        if (v7) {
          std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__s2, v7);
        }
        uint64_t v16 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 11))(this);
        (*(void (**)(uint64_t, void *, void, void *))(*(void *)v16 + 16))(v16, __p, this->var6, __s2);
        int v17 = __s2;
        BOOL v11 = memcmp(__s1, __s2, v7) == 0;
        if (v17)
        {
          uint64_t v20 = v17;
          operator delete(v17);
        }
      }
      else
      {
        BOOL v11 = 0;
      }
      if (__s1)
      {
        int v23 = __s1;
        operator delete(__s1);
      }
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
    }
    else
    {
      BOOL v11 = 0;
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  return v11;
}

void sub_238DAE268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  __int16 v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::deriveVerifierKey(OCCCryptoKey *this, void *a2)
{
  __p = 0;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v4 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 4))(this);
  if (v4)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v4);
    int v5 = __p;
  }
  else
  {
    int v5 = 0;
  }
  if ((*((uint64_t (**)(OCCCryptoKey *, void *))this->var0 + 5))(this, v5)) {
    uint64_t v6 = (*((uint64_t (**)(OCCCryptoKey *, void *, void *))this->var0 + 7))(this, __p, a2);
  }
  else {
    uint64_t v6 = 0;
  }
  if (__p)
  {
    unsigned int v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_238DAE3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::deriveVerifierHashKey(OCCCryptoKey *this, void *a2)
{
  __p = 0;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v4 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 4))(this);
  if (v4)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v4);
    int v5 = __p;
  }
  else
  {
    int v5 = 0;
  }
  if ((*((uint64_t (**)(OCCCryptoKey *, void *))this->var0 + 6))(this, v5)) {
    uint64_t v6 = (*((uint64_t (**)(OCCCryptoKey *, void *, void *))this->var0 + 7))(this, __p, a2);
  }
  else {
    uint64_t v6 = 0;
  }
  if (__p)
  {
    unsigned int v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_238DAE4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::decryptBlock(OCCCryptoKey *this, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v10 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    BOOL v11 = __p;
  }
  else
  {
    BOOL v11 = 0;
  }
  uint64_t v14 = 0;
  if ((*((unsigned int (**)(OCCCryptoKey *, uint64_t, void *, uint64_t *))this->var0 + 8))(this, a4, v11, &v14))
  {
    uint64_t v12 = (*((uint64_t (**)(OCCCryptoKey *, void *, uint64_t, const void *, uint64_t, void *))this->var0 + 9))(this, __p, v14, a2, a3, a5);
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v14) {
    MEMORY[0x23EC99790](v14, 0x1000C8077774924);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_238DAE638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::decryptBlock(OCCCryptoKey *this, SsrwOOStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (a4) {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  }
  int v14 = a4;
  SsrwOOStream::seekFromStart(a2, a3);
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v14);
  if (v14 == a4) {
    uint64_t v12 = OCCCryptoKey::decryptBlock(this, __p, a4, a5, a6);
  }
  else {
    uint64_t v12 = 0;
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_238DAE740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::encryptBlock(OCCCryptoKey *this, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v10 = (*((uint64_t (**)(OCCCryptoKey *))this->var0 + 3))(this);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v10);
    BOOL v11 = __p;
  }
  else
  {
    BOOL v11 = 0;
  }
  uint64_t v14 = 0;
  if ((*((unsigned int (**)(OCCCryptoKey *, uint64_t, void *, uint64_t *))this->var0 + 8))(this, a4, v11, &v14))
  {
    uint64_t v12 = (*((uint64_t (**)(OCCCryptoKey *, void *, uint64_t, const void *, uint64_t, void *))this->var0 + 10))(this, __p, v14, a2, a3, a5);
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v14) {
    MEMORY[0x23EC99790](v14, 0x1000C8077774924);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_238DAE89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptoKey::encryptBlock(OCCCryptoKey *this, SsrwOOStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (a4) {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a4);
  }
  int v14 = a4;
  SsrwOOStream::seekFromStart(a2, a3);
  (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, __p, &v14);
  if (v14 == a4) {
    uint64_t v12 = OCCCryptoKey::encryptBlock(this, __p, a4, a5, a6);
  }
  else {
    uint64_t v12 = 0;
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_238DAE9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptor::create(OCCCryptor *this, const char *__s1, const char *a3)
{
  unsigned int v3 = a3;
  if (!strcmp(__s1, "ChainingModeECB"))
  {
    char v6 = 0;
  }
  else if (!strcmp(__s1, "ChainingModeCBC"))
  {
    char v6 = 0;
  }
  else
  {
    if (!strcmp(__s1, "ChainingModeCFB")) {
      return 0;
    }
    char v6 = 1;
  }
  if (!strcmp((const char *)this, "AES"))
  {
    if (v3 <= 0x20 && ((1 << v3) & 0x101010000) != 0) {
      operator new();
    }
  }
  else if (!strcmp((const char *)this, "DES"))
  {
    if (v3 == 8) {
      operator new();
    }
  }
  else if (!strcmp((const char *)this, "3DES"))
  {
    if (v3 == 24) {
      operator new();
    }
  }
  else if (!strcmp((const char *)this, "RC4"))
  {
    char v8 = v6 ^ 1;
    if (v3 - 1 > 0x1FF) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0) {
      operator new();
    }
  }
  else
  {
    int v7 = strcmp((const char *)this, "RC2");
    if (v3 - 1 <= 0x7F && !v7) {
      operator new();
    }
  }
  return 0;
}

void sub_238DAEC54(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void OCCRC4Cryptor::OCCRC4Cryptor(OCCRC4Cryptor *this, int a2)
{
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0x300000004;
  *(void *)this = &unk_26EBDA720;
  *((_DWORD *)this + 4) = a2;
}

uint64_t OCCCryptor::decrypt(OCCCryptor *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6, unsigned int a7)
{
  uint64_t result = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 8))(this);
  if (!a3 || result)
  {
    int v15 = *((_DWORD *)this + 3);
    if (v15 != 2)
    {
      if (v15) {
        CCOptions v16 = 0;
      }
      else {
        CCOptions v16 = 2;
      }
      size_t v28 = 0;
      if ((*(unsigned int (**)(OCCCryptor *))(*(void *)this + 8))(this))
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        __p = 0;
        int v17 = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 8))(this);
        uint64_t v18 = v17 + a7;
        if (v17 + a7) {
          std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v18);
        }
        CCAlgorithm v19 = *((_DWORD *)this + 2);
        unsigned int v20 = (*(uint64_t (**)(OCCCryptor *, uint64_t))(*(void *)this + 16))(this, v18);
        CCCryptorStatus v21 = CCCrypt(1u, v19, v16, a2, v20, a3, a4, a5, __p, (v26 - __p), &v28);
        __int16 v22 = __p;
        if (v21)
        {
          if (__p)
          {
            uint64_t v26 = __p;
            operator delete(__p);
          }
          return 0;
        }
        memcpy(a6, __p, a7);
        if (v22)
        {
          uint64_t v26 = v22;
          operator delete(v22);
        }
        return 1;
      }
      CCAlgorithm v23 = *((_DWORD *)this + 2);
      unsigned int v24 = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 16))(this);
      if (!CCCrypt(1u, v23, v16, a2, v24, a3, a4, a5, a6, a7, &v28)) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_238DAEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCCryptor::encrypt(OCCCryptor *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6, unsigned int a7)
{
  uint64_t result = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 8))(this);
  if (!a3 || result)
  {
    int v15 = *((_DWORD *)this + 3);
    if (v15 == 2) {
      return 0;
    }
    if (v15) {
      CCOptions v16 = 0;
    }
    else {
      CCOptions v16 = 2;
    }
    size_t v29 = 0;
    if ((*(unsigned int (**)(OCCCryptor *))(*(void *)this + 8))(this))
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      __p = 0;
      int v17 = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 8))(this);
      uint64_t v18 = v17 + a7;
      if (v17 + a7) {
        std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v18);
      }
      CCAlgorithm v19 = *((_DWORD *)this + 2);
      unsigned int v20 = (*(uint64_t (**)(OCCCryptor *, uint64_t))(*(void *)this + 16))(this, v18);
      CCCryptorStatus v21 = CCCrypt(0, v19, v16, a2, v20, a3, a4, a5, __p, (v27 - __p), &v29);
      __int16 v22 = __p;
      if (v21)
      {
        if (__p)
        {
          uint64_t v27 = __p;
          operator delete(__p);
        }
        return 0;
      }
      memcpy(a6, __p, a7);
      if (v22)
      {
        uint64_t v27 = v22;
        operator delete(v22);
      }
    }
    else
    {
      CCAlgorithm v23 = *((_DWORD *)this + 2);
      unsigned int v24 = (*(uint64_t (**)(OCCCryptor *))(*(void *)this + 16))(this);
      CCCryptorStatus v25 = CCCrypt(0, v23, v16, a2, v24, a3, a4, a5, a6, a7, &v29);
      uint64_t result = 0;
      if (v25) {
        return result;
      }
    }
    return 1;
  }
  return result;
}

void sub_238DAF120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCAESCryptor::OCCAESCryptor(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 1CsString::CsString((CsString *)this + 2) = a3;
  *(void *)uint64_t result = &unk_26EBDA6E0;
  *(_DWORD *)(result + 16) = a2;
  if (a2 > 0x20 || ((1 << a2) & 0x101010000) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  return result;
}

uint64_t OCCAESCryptor::getKeySizeInBytes(OCCAESCryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCAESCryptor::getBlockSize(OCCAESCryptor *this)
{
  return 16;
}

uint64_t OCCRC4Cryptor::getKeySizeInBytes(OCCRC4Cryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCRC4Cryptor::getBlockSize(OCCRC4Cryptor *this)
{
  return 0;
}

uint64_t OCCRC2Cryptor::getKeySizeInBytes(OCCRC2Cryptor *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t OCCRC2Cryptor::getBlockSize(OCCRC2Cryptor *this)
{
  return 8;
}

uint64_t OCCDESCryptor::getKeySizeInBytes(OCCDESCryptor *this)
{
  return 8;
}

uint64_t OCCDESCryptor::getBlockSize(OCCDESCryptor *this)
{
  return 8;
}

uint64_t OCC3DESCryptor::getKeySizeInBytes(OCC3DESCryptor *this)
{
  return 24;
}

uint64_t OCC3DESCryptor::getBlockSize(OCC3DESCryptor *this)
{
  return 8;
}

uint64_t OCCCryptor::getInitializationVectorSize(OCCCryptor *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 8))();
}

const char *OCCAESCryptor::getName(OCCAESCryptor *this)
{
  return "AES";
}

void OCCAESCryptor::~OCCAESCryptor(OCCAESCryptor *this)
{
}

const char *OCCRC4Cryptor::getName(OCCRC4Cryptor *this)
{
  return "RC4";
}

void OCCRC4Cryptor::~OCCRC4Cryptor(OCCRC4Cryptor *this)
{
}

const char *OCCRC2Cryptor::getName(OCCRC2Cryptor *this)
{
  return "RC2";
}

void OCCRC2Cryptor::~OCCRC2Cryptor(OCCRC2Cryptor *this)
{
}

const char *OCCDESCryptor::getName(OCCDESCryptor *this)
{
  return "DES";
}

void OCCDESCryptor::~OCCDESCryptor(OCCDESCryptor *this)
{
}

const char *OCC3DESCryptor::getName(OCC3DESCryptor *this)
{
  return "3DES";
}

void OCC3DESCryptor::~OCC3DESCryptor(OCC3DESCryptor *this)
{
}

void OCCEncryptionHeader::~OCCEncryptionHeader(OCCEncryptionHeader *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    MEMORY[0x23EC99790](v1, 0x1000C8077774924);
  }
}

void OCCEncryptionHeader::OCCEncryptionHeader(OCCEncryptionHeader *this, _DWORD *a2, unsigned int a3)
{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  if (a3 <= 0x23)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  int v3 = a2[2];
  *(_DWORD *)this = v3;
  *((_DWORD *)this + CsString::CsString((CsString *)this + 1) = a2[3];
  *((_DWORD *)this + CsString::CsString((CsString *)this + 2) = a2[4];
  *((_DWORD *)this + 3) = a2[5];
  *((_DWORD *)this + 4) = a2[6];
  *((_DWORD *)this + 5) = a2[7];
  *((_DWORD *)this + 6) = a2[8];
  if ((v3 - 45) <= 0xFFFFFFC6 && a3 >= 0x2C && v3 - 32 < a3 - 44) {
    operator new[]();
  }
}

void OCCEncryptionHeader::OCCEncryptionHeader(OCCEncryptionHeader *this)
{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 1) = 0;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
}

uint64_t OCCEncryptionHeader::getEncryptionVerifier(OCCEncryptionHeader *this, char *a2, unsigned int a3, unsigned int *a4, const void **a5, const void **a6, unsigned int *a7, const void **a8)
{
  unsigned int v8 = *(_DWORD *)this;
  if ((*(_DWORD *)this + 12) > 0xFFFFFFFB) {
    return 0;
  }
  uint64_t v9 = v8 + 16;
  if (v8 > 0xFFFFFFF3 || v9 >= a3) {
    return 0;
  }
  uint64_t v11 = *(unsigned int *)&a2[*(_DWORD *)this + 12];
  *a4 = v11;
  unint64_t v12 = v11 + v9;
  if ((v12 + 16) > 0xFFFFFFFB) {
    return 0;
  }
  unint64_t v13 = (v11 + v9);
  uint64_t v14 = (v12 + 20);
  BOOL v15 = HIDWORD(v12) || v13 > 0xFFFFFFEF;
  if (v15 || v14 >= a3) {
    return 0;
  }
  uint64_t v17 = *(unsigned int *)&a2[(v12 + 16)];
  *a7 = v17;
  unint64_t v18 = v17 + v14;
  if (HIDWORD(v18) || v18 > a3) {
    return 0;
  }
  *a5 = &a2[v9];
  *a6 = &a2[v13];
  *a8 = &a2[v14];
  return 1;
}

uint64_t OCCEncryptionHeader::getNewEncryptionVerifier(OCCEncryptionHeader *this, char *a2, unsigned int a3, unsigned int a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned __int8 **a7)
{
  unsigned int v16 = 0;
  uint64_t v14 = 0;
  BOOL v15 = 0;
  unint64_t v13 = 0;
  unsigned int v12 = 0;
  int EncryptionVerifier = OCCEncryptionHeader::getEncryptionVerifier(this, a2, a3, &v16, (const void **)&v15, (const void **)&v14, &v12, (const void **)&v13);
  uint64_t result = 0;
  if (EncryptionVerifier)
  {
    if ((unint64_t)v13 + a4 - (void)a2 <= a3)
    {
      uint64_t result = 0;
      if (v16 >= 0x10 && v12 >= 0x10) {
        operator new[]();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void OCCEncryptionHeader::initializeForDefaultCryptioAPI(OCCEncryptionHeader *this)
{
  *(_OWORD *)this = xmmword_238EDEB70;
  *((void *)this + CsString::CsString((CsString *)this + 2) = 0x2800008004;
  *((_DWORD *)this + 6) = 1;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((_DWORD *)this + 10) = 86;
  operator new[]();
}

const void **OCCEncryptionHeader::writeHeader(const void **this, _DWORD *a2)
{
  *a2 = *((_DWORD *)this + 1);
  a2[1] = *((_DWORD *)this + 2);
  a2[2] = *((_DWORD *)this + 3);
  a2[3] = *((_DWORD *)this + 4);
  a2[4] = *((_DWORD *)this + 5);
  unsigned int v2 = *((_DWORD *)this + 6);
  *((void *)a2 + 3) = 0;
  a2[5] = v2;
  size_t v3 = *((unsigned int *)this + 10);
  if (v3) {
    return (const void **)memcpy(a2 + 8, this[4], v3);
  }
  return this;
}

BOOL OCCEncryptionHeader::isDocPropInfoEncrypted(OCCEncryptionHeader *this)
{
  return (*((unsigned char *)this + 4) & 8) == 0;
}

uint64_t OCCHash::createFromName(OCCHash *this, const char *a2)
{
  if (!strcmp((const char *)this, "SHA1") || !strcmp((const char *)this, "SHA-1")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA256") || !strcmp((const char *)this, "SHA-256")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA384") || !strcmp((const char *)this, "SHA-384")) {
    operator new();
  }
  if (!strcmp((const char *)this, "SHA512") || !strcmp((const char *)this, "SHA-512")) {
    operator new();
  }
  if (!strcmp((const char *)this, "MD5")) {
    operator new();
  }
  if (!strcmp((const char *)this, "MD4")) {
    operator new();
  }
  if (!strcmp((const char *)this, "MD2")) {
    operator new();
  }
  return 0;
}

BOOL OCCSHA1Hash::computeHash(OCCSHA1Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA1(data, len, md) != 0;
}

uint64_t OCCSHA1Hash::getOutputSize(OCCSHA1Hash *this)
{
  return 20;
}

BOOL OCCSHA256Hash::computeHash(OCCSHA256Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA256(data, len, md) != 0;
}

uint64_t OCCSHA256Hash::getOutputSize(OCCSHA256Hash *this)
{
  return 32;
}

BOOL OCCSHA384Hash::computeHash(OCCSHA384Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA384(data, len, md) != 0;
}

uint64_t OCCSHA384Hash::getOutputSize(OCCSHA384Hash *this)
{
  return 48;
}

BOOL OCCSHA512Hash::computeHash(OCCSHA512Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_SHA512(data, len, md) != 0;
}

uint64_t OCCSHA512Hash::getOutputSize(OCCSHA512Hash *this)
{
  return 64;
}

BOOL OCCMD5Hash::computeHash(OCCMD5Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD5(data, len, md) != 0;
}

uint64_t OCCMD5Hash::getOutputSize(OCCMD5Hash *this)
{
  return 16;
}

BOOL OCCMD4Hash::computeHash(OCCMD4Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD4(data, len, md) != 0;
}

uint64_t OCCMD4Hash::getOutputSize(OCCMD4Hash *this)
{
  return 16;
}

BOOL OCCMD2Hash::computeHash(OCCMD2Hash *this, const void *data, CC_LONG len, unsigned __int8 *md)
{
  return CC_MD2(data, len, md) != 0;
}

uint64_t OCCMD2Hash::getOutputSize(OCCMD2Hash *this)
{
  return 16;
}

void OCCSHA1Hash::~OCCSHA1Hash(OCCSHA1Hash *this)
{
}

const char *OCCSHA1Hash::getName(OCCSHA1Hash *this)
{
  return "SHA1";
}

void OCCSHA256Hash::~OCCSHA256Hash(OCCSHA256Hash *this)
{
}

const char *OCCSHA256Hash::getName(OCCSHA256Hash *this)
{
  return "SHA-256";
}

void OCCSHA384Hash::~OCCSHA384Hash(OCCSHA384Hash *this)
{
}

const char *OCCSHA384Hash::getName(OCCSHA384Hash *this)
{
  return "SHA-384";
}

void OCCSHA512Hash::~OCCSHA512Hash(OCCSHA512Hash *this)
{
}

const char *OCCSHA512Hash::getName(OCCSHA512Hash *this)
{
  return "SHA-512";
}

void OCCMD5Hash::~OCCMD5Hash(OCCMD5Hash *this)
{
}

const char *OCCMD5Hash::getName(OCCMD5Hash *this)
{
  return "MD5";
}

void OCCMD4Hash::~OCCMD4Hash(OCCMD4Hash *this)
{
}

const char *OCCMD4Hash::getName(OCCMD4Hash *this)
{
  return "MD4";
}

void OCCMD2Hash::~OCCMD2Hash(OCCMD2Hash *this)
{
}

const char *OCCMD2Hash::getName(OCCMD2Hash *this)
{
  return "MD2";
}

void OCCRC4CryptoKey::~OCCRC4CryptoKey(OCCCryptoKey *this)
{
  this->int var0 = (void **)&unk_26EBDAAE8;
  int var0 = this[1].var0;
  if (var0) {
    MEMORY[0x23EC99790](var0, 0x1000C8077774924);
  }
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  uint64_t vars8;

  OCCRC4CryptoKey::~OCCRC4CryptoKey(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t OCCRC4CryptoKey::create(OCCRC4CryptoKey *this, const void *a2)
{
  if (a2 >= 0x34) {
    operator new[]();
  }
  return 0;
}

void sub_238DAFD48(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1091C40001E8824);
  _Unwind_Resume(a1);
}

void OCCRC4CryptoKey::OCCRC4CryptoKey(OCCRC4CryptoKey *this, unsigned __int8 *a2, char *a3, char *a4)
{
  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, 0x10u, 0x10u);
  *int v5 = &unk_26EBDAAE8;
  v5[6] = a2;
  v5[7] = &unk_26EBDA9F8;
  OCCRC4Cryptor::OCCRC4Cryptor((OCCRC4Cryptor *)(v5 + 8), 16);
}

void sub_238DAFDF4(_Unwind_Exception *a1)
{
  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

uint64_t OCCRC4CryptoKey::encryptionInfo(OCCRC4CryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if (*((void *)this + 6) && *((void *)this + 2) && *((void *)this + 3))
  {
    *a3 = 52;
    operator new[]();
  }
  return 0;
}

BOOL OCCRC4CryptoKey::isVersionValid(OCCRC4CryptoKey *this, int a2)
{
  return this == 1 && a2 == 1;
}

uint64_t OCCRC4CryptoKey::getSeedSize(OCCRC4CryptoKey *this)
{
  return 9;
}

uint64_t OCCRC4CryptoKey::computeKeySeed(OCCRC4CryptoKey *this, const void *a2, CC_LONG a3, char *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)md = 0;
  uint64_t v16 = 0;
  char v6 = (OCCRC4CryptoKey *)((char *)this + 56);
  OCCMD5Hash::computeHash((OCCRC4CryptoKey *)((char *)this + 56), a2, a3, md);
  uint64_t v7 = 0;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)md;
  v14[4] = md[4];
  *(_OWORD *)&v14[5] = *(_OWORD *)*((void *)this + 6);
  memset(data, 0, sizeof(data));
  do
  {
    unsigned int v8 = (char *)data + v7;
    *(_OWORD *)unsigned int v8 = *(_OWORD *)v14;
    *(void *)(v8 + 13) = *(void *)&v14[13];
    v7 += 21;
  }
  while (v7 != 336);
  v12[0] = 0;
  v12[1] = 0;
  OCCMD5Hash::computeHash(v6, data, 0x150u, (unsigned __int8 *)v12);
  unsigned int v9 = (**(uint64_t (***)(OCCRC4CryptoKey *))this)(this);
  if (v9 >= 6) {
    size_t v10 = v9 - 5;
  }
  else {
    size_t v10 = 0;
  }
  bzero(a4 + 5, v10);
  *(_DWORD *)a4 = v12[0];
  a4[4] = BYTE4(v12[0]);
  return 1;
}

double OCCRC4CryptoKey::decryptVerificationInfo(OCCRC4CryptoKey *this, const void *a2, const void *a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v7 = (_OWORD *)*((void *)this + 3);
  v12[0] = *(_OWORD *)*((void *)this + 2);
  v12[1] = *v7;
  if (OCCCryptor::decrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, v12, 0x20u, &v10, 0x20u))
  {
    double result = *(double *)&v10;
    long long v9 = v11;
    *a4 = v10;
    *a5 = v9;
  }
  return result;
}

uint64_t OCCRC4CryptoKey::getCipherKeySize(OCCRC4CryptoKey *this)
{
  return 16;
}

uint64_t OCCRC4CryptoKey::getBlockKeySize(OCCRC4CryptoKey *this)
{
  return 4;
}

uint64_t OCCRC4CryptoKey::computeVerifierBlockKey(OCCRC4CryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCRC4CryptoKey::computeVerifierHashBlockKey(OCCRC4CryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

BOOL OCCRC4CryptoKey::deriveKey(OCCRC4CryptoKey *this, const void *a2, _OWORD *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unsigned int v7 = (*(uint64_t (**)(OCCRC4CryptoKey *))(*(void *)this + 32))(this);
    memcpy((void *)(v3 + 5), a2, v7);
    memset(md, 0, sizeof(md));
    OCCMD5Hash::computeHash((OCCRC4CryptoKey *)((char *)this + 56), *((const void **)this + 1), 9u, md);
    *a3 = *(_OWORD *)md;
  }
  return v3 != 0;
}

uint64_t OCCRC4CryptoKey::deriveDecryptionKey(OCCRC4CryptoKey *this, int a2, void *a3, unsigned __int8 **a4)
{
  int v5 = a2;
  *a4 = 0;
  return (*(uint64_t (**)(OCCRC4CryptoKey *, int *, void *))(*(void *)this + 56))(this, &v5, a3);
}

uint64_t OCCRC4CryptoKey::decryptBlockUsingDecryptionKey(OCCRC4CryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  if (a6) {
    return OCCCryptor::decrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, a4, a5, a6, a5);
  }
  else {
    return 0;
  }
}

uint64_t OCCRC4CryptoKey::encryptBlockUsingEncryptionKey(OCCRC4CryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  if (a6) {
    return OCCCryptor::encrypt((OCCRC4CryptoKey *)((char *)this + 64), a2, 0, a4, a5, a6, a5);
  }
  else {
    return 0;
  }
}

uint64_t OCCRC4CryptoKey::getHashAlgorithm(OCCRC4CryptoKey *this)
{
  return (uint64_t)this + 56;
}

void OCCRC4CryptoKey::createXmlSegmenter(OCCRC4CryptoKey *this)
{
}

void sub_238DB0348(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void OCCSegmenter::OCCSegmenter(OCCSegmenter *this, int a2)
{
  *(void *)this = &unk_26EBDAB90;
  *((_DWORD *)this + CsString::CsString((CsString *)this + 2) = a2;
}

BOOL OCCSegmenter::writeIntoStream(OCCSegmenter *this, const void *a2, uint64_t a3, void *a4)
{
  int v4 = (int)a2;
  int v6 = (int)a2;
  (*(void (**)(uint64_t, OCCSegmenter *, int *, void *))(*(void *)a3 + 184))(a3, this, &v6, a4);
  return v6 == v4;
}

BOOL OCCSegmenter::writeIntoFileHandle(OCCSegmenter *this, size_t __nitems, FILE *__stream, void *a4)
{
  return fwrite(this, 1uLL, __nitems, __stream) == __nitems;
}

uint64_t OCCSegmenter::processSegmentsIntoGenericTarget(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, int a5, unsigned int a6, void *a7, unsigned int (*a8)(void *, uint64_t, void *))
{
  int v10 = a3;
  SsrwOOStream::seekFromStart(a2, a3);
  unsigned int v13 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 6))(a2) - v10;
  if (v13 < a6) {
    return 0;
  }
  unsigned int v14 = *((_DWORD *)this + 2);
  if (v14 + a6 <= v13) {
    return 0;
  }
  BOOL v31 = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  if (v14)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&v31, v14);
    unsigned int v15 = *((_DWORD *)this + 2);
    __p = 0;
    size_t v29 = 0;
    uint64_t v30 = 0;
    if (v15) {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v15);
    }
  }
  else
  {
    __p = 0;
    size_t v29 = 0;
    uint64_t v30 = 0;
  }
  if (v13 >= a6) {
    unsigned int v18 = a6;
  }
  else {
    unsigned int v18 = v13;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    LODWORD(v2CsString::CsString((CsString *)this + 1) = *((_DWORD *)this + 2);
    LODWORD(v2CsString::CsString((CsString *)this + 2) = v21;
    while (1)
    {
      unsigned int v23 = *((_DWORD *)this + 2) + v20;
      uint64_t v22 = v23 >= v13 ? v13 - v20 : v22;
      uint64_t v21 = v23 >= a6 ? a6 - v20 : v21;
      int v27 = v22;
      (*((void (**)(SsrwOOStream *, void *, int *))a2->var0 + 7))(a2, v31, &v27);
      if (v27 != v22) {
        break;
      }
      if (a5)
      {
        if ((OCCCryptoKey::decryptBlock(a4, v31, v22, v19, __p) & 1) == 0) {
          break;
        }
      }
      else if (!OCCCryptoKey::encryptBlock(a4, v31, v22, v19, __p))
      {
        break;
      }
      if (!a8(__p, v21, a7)) {
        break;
      }
      uint64_t v19 = (**(uint64_t (***)(OCCSegmenter *, uint64_t))this)(this, v19);
      v20 += v22;
      if (v20 >= v18) {
        goto LABEL_27;
      }
    }
    uint64_t v16 = 0;
  }
  else
  {
LABEL_27:
    uint64_t v16 = 1;
  }
  if (__p)
  {
    size_t v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  return v16;
}

void sub_238DB065C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCSegmenter::encryptSegmentsFromFileHandleIntoStream(OCCSegmenter *this, __sFILE *a2, unsigned int a3, OCCCryptoKey *a4, SsrwOOStream *a5)
{
  if (!a3) {
    return 0;
  }
  unsigned __int8 __ptr = 0;
  CCCryptorStatus v25 = 0;
  uint64_t v26 = 0;
  unsigned int v10 = *((_DWORD *)this + 2);
  if (v10)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__ptr, v10);
    unsigned int v11 = *((_DWORD *)this + 2);
    __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (v11)
    {
      std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v11);
      LODWORD(v1CsString::CsString((CsString *)this + 2) = *((_DWORD *)this + 2);
    }
    else
    {
      LODWORD(v1CsString::CsString((CsString *)this + 2) = 0;
    }
  }
  else
  {
    LODWORD(v1CsString::CsString((CsString *)this + 2) = 0;
    __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  while (1)
  {
    size_t v12 = *((_DWORD *)this + 2) + v15 >= a3 ? a3 - v15 : v12;
    if (!fread(__ptr, v12, 1uLL, a2)) {
      break;
    }
    uint64_t v17 = v12;
    if (v12 < *((_DWORD *)this + 2))
    {
      uint64_t v17 = v12;
      if (OCCAgileCryptoKey::isAgile(a4, v16))
      {
        DataBlockuint64_t Size = OCCAgileCryptoKey::getDataBlockSize((OCCAgileCryptoKey *)a4);
        uint64_t v17 = v12;
        if (DataBlockSize)
        {
          float v19 = (float)v12 / (float)DataBlockSize;
          if (v19 <= (float)v19) {
            uint64_t v17 = v12;
          }
          else {
            uint64_t v17 = DataBlockSize + DataBlockSize * v19;
          }
        }
      }
    }
    if (!OCCCryptoKey::encryptBlock(a4, __ptr, v17, v14, __p)) {
      break;
    }
    int v27 = v17;
    (*((void (**)(SsrwOOStream *, void *, int *))a5->var0 + 23))(a5, __p, &v27);
    if (v27 != v17) {
      break;
    }
    uint64_t v14 = (**(uint64_t (***)(OCCSegmenter *, uint64_t))this)(this, v14);
    v15 += v12;
    if (v15 >= a3)
    {
      uint64_t v13 = 1;
      goto LABEL_24;
    }
  }
  uint64_t v13 = 0;
LABEL_24:
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  if (__ptr)
  {
    CCCryptorStatus v25 = __ptr;
    operator delete(__ptr);
  }
  return v13;
}

void sub_238DB0894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCSegmenter::decryptSegmentsIntoFileHandle(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, __sFILE *a6)
{
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 1, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoFileHandle);
}

uint64_t OCCSegmenter::decryptSegmentsIntoStream(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, SsrwOOStream *a6)
{
  SsrwOOStream::seekFromStart(a6, 0);
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 1, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoStream);
}

uint64_t OCCSegmenter::encryptSegmentsIntoStream(OCCSegmenter *this, SsrwOOStream *a2, uint64_t a3, OCCCryptoKey *a4, unsigned int a5, SsrwOOStream *a6)
{
  SsrwOOStream::seekFromStart(a6, 0);
  return OCCSegmenter::processSegmentsIntoGenericTarget(this, a2, a3, a4, 0, a5, a6, (unsigned int (*)(void *, uint64_t, void *))OCCSegmenter::writeIntoStream);
}

void OCCStandardCryptoKey::~OCCStandardCryptoKey(OCCCryptoKey *this)
{
  this->int var0 = (void **)&unk_26EBDABB8;
  int var0 = this[1].var0;
  if (var0) {
    MEMORY[0x23EC99790](var0, 0x1000C8077774924);
  }
  uint64_t v3 = *(void *)&this[1].var6;
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  OCCCryptoKey::~OCCCryptoKey(this);
}

{
  uint64_t vars8;

  OCCStandardCryptoKey::~OCCStandardCryptoKey(this);
  JUMPOUT(0x23EC997B0);
}

void OCCStandardCryptoKey::OCCStandardCryptoKey(OCCStandardCryptoKey *this, unsigned __int8 *a2, char *a3, char *a4, unsigned int a5, uint64_t a6)
{
  OCCCryptoKey::OCCCryptoKey((OCCCryptoKey *)this, a3, a4, 0x10u, a5, 0x10u);
  void *v9 = &unk_26EBDABB8;
  v9[6] = a2;
  OCCAESCryptor::OCCAESCryptor(v9 + 7, a6, 0);
  *((void *)this + 10) = &unk_26EBDA8A8;
  *((void *)this + 1CsString::CsString((CsString *)this + 1) = 0;
  if (a6 > 0x20 || ((1 << a6) & 0x101010000) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
}

void sub_238DB0BAC(_Unwind_Exception *a1)
{
  OCCCryptoKey::~OCCCryptoKey(v1);
  _Unwind_Resume(a1);
}

uint64_t OCCStandardCryptoKey::create(OCCStandardCryptoKey *this, const void *a2)
{
  unsigned int v2 = a2;
  OCCEncryptionHeader::OCCEncryptionHeader((OCCEncryptionHeader *)v8, this, a2);
  if ((v8[20] & 7) == 0)
  {
    int v6 = 0;
    unsigned int v7 = 0;
    int v5 = 0;
    if (OCCEncryptionHeader::getNewEncryptionVerifier((OCCEncryptionHeader *)v8, (char *)this, v2, 0x20u, &v7, &v6, &v5))operator new(); {
  }
    }
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)v8);
  return 0;
}

void sub_238DB0C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEMORY[0x23EC997B0](v5, 0x1091C40A2FA867FLL);
  OCCEncryptionHeader::~OCCEncryptionHeader((OCCEncryptionHeader *)va);
  _Unwind_Resume(a1);
}

BOOL OCCStandardCryptoKey::isVersionValid(OCCStandardCryptoKey *this, int a2)
{
  return (this - 3) < 2 && a2 == 2;
}

uint64_t OCCStandardCryptoKey::getSeedSize(OCCStandardCryptoKey *this)
{
  return OCCSHA1Hash::getOutputSize((OCCStandardCryptoKey *)((char *)this + 80));
}

BOOL OCCStandardCryptoKey::computeKeySeed(OCCStandardCryptoKey *this, const void *a2, unsigned int a3, unsigned __int8 *a4)
{
  __p = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  int v8 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(void *)this + 32))(this);
  uint64_t v9 = (v8 + 20);
  if (v8 != -20) {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v9);
  }
  unsigned int v10 = (const void *)*((void *)this + 6);
  uint64_t v11 = (*(uint64_t (**)(OCCStandardCryptoKey *, uint64_t))(*(void *)this + 88))(this, v9);
  BOOL v12 = (OCCAgileCryptoKey::computeInputForHashFinalWithZeroBlockKey(a2, a3, v10, 0x10u, v11, 50000, __p, (int)v15 - (int)__p) & 1) != 0&& OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), __p, v15 - __p, a4);
  if (__p)
  {
    unsigned int v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_238DB0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCStandardCryptoKey::decryptVerificationInfo(OCCStandardCryptoKey *this, const void *a2, const void *a3, void *a4, void *a5)
{
  int v8 = (OCCStandardCryptoKey *)((char *)this + 56);
  uint64_t result = OCCCryptor::decrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, *((const void **)this + 2), *((_DWORD *)this + 8), a4, *((_DWORD *)this + 10));
  if (result)
  {
    unsigned int v10 = (const void *)*((void *)this + 3);
    unsigned int v11 = *((_DWORD *)this + 9);
    Outputuint64_t Size = OCCSHA1Hash::getOutputSize((OCCStandardCryptoKey *)((char *)this + 80));
    return OCCCryptor::decrypt(v8, a3, 0, v10, v11, a5, OutputSize);
  }
  return result;
}

uint64_t OCCStandardCryptoKey::getCipherKeySize(OCCStandardCryptoKey *this)
{
  return OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
}

uint64_t OCCStandardCryptoKey::getBlockKeySize(OCCStandardCryptoKey *this)
{
  return 4;
}

uint64_t OCCStandardCryptoKey::computeVerifierBlockKey(OCCStandardCryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCStandardCryptoKey::computeVerifierHashBlockKey(OCCStandardCryptoKey *this, void *a2)
{
  unsigned int v3 = (*(uint64_t (**)(OCCStandardCryptoKey *))(*(void *)this + 32))(this);
  bzero(a2, v3);
  return 1;
}

uint64_t OCCStandardCryptoKey::deriveKey(OCCStandardCryptoKey *this, const void *a2, void *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unsigned int v6 = (**(uint64_t (***)(OCCStandardCryptoKey *, const void *))this)(this, a2);
    unsigned int v7 = (const void *)*((void *)this + 11);
    if (v7)
    {
      unsigned int KeySizeInBytes = OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
      memcpy(a3, v7, KeySizeInBytes);
    }
    data = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&data, 0x40u);
    memset(v12, 0, sizeof(v12));
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)v12, 0x40u);
    for (uint64_t i = 0; i != 20; ++i)
    {
      *((unsigned char *)data + i) = *(unsigned char *)(v3 + i) ^ 0x36;
      *((unsigned char *)v12[0] + i) = *(unsigned char *)(v3 + i) ^ 0x5C;
    }
    memset((char *)data + v6, 54, 64 - v6);
    memset((char *)v12[0] + v6, 92, 64 - v6);
    memset(__p, 0, sizeof(__p));
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)__p, 0x28u);
    OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), data, v14 - data, (unsigned __int8 *)__p[0]);
    OCCSHA1Hash::computeHash((OCCStandardCryptoKey *)((char *)this + 80), data, v14 - data, (unsigned __int8 *)__p[0] + 20);
    OCCAESCryptor::getKeySizeInBytes((OCCStandardCryptoKey *)((char *)this + 56));
    operator new[]();
  }
  return 0;
}

void sub_238DB1160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OCCStandardCryptoKey::deriveDecryptionKey(OCCStandardCryptoKey *this, unsigned int a2, void *a3, unsigned __int8 **a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(OCCStandardCryptoKey *, void, void *))(*(void *)this + 56))(this, 0, a3);
}

uint64_t OCCStandardCryptoKey::decryptBlockUsingDecryptionKey(OCCStandardCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::decrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCStandardCryptoKey::encryptBlockUsingEncryptionKey(OCCStandardCryptoKey *this, const void *a2, const void *a3, const void *a4, unsigned int a5, void *a6)
{
  return OCCCryptor::encrypt((OCCStandardCryptoKey *)((char *)this + 56), a2, 0, a4, a5, a6, a5);
}

uint64_t OCCStandardCryptoKey::getHashAlgorithm(OCCStandardCryptoKey *this)
{
  return (uint64_t)this + 80;
}

void OCCStandardCryptoKey::createXmlSegmenter(OCCStandardCryptoKey *this)
{
}

void sub_238DB1264(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t OCCStandardCryptoKey::encryptionInfo(OCCStandardCryptoKey *this, unsigned __int8 **a2, unsigned int *a3)
{
  return 0;
}

uint64_t OCCStandardDecryptionSegmenter::getNextSegmentNumber(OCCStandardDecryptionSegmenter *this)
{
  return 0;
}

void OCCStandardDecryptionSegmenter::~OCCStandardDecryptionSegmenter(OCCStandardDecryptionSegmenter *this)
{
}

void OCCStreamer::OCCStreamer(OCCStreamer *this, OCCCryptoKey *a2, const char *__s)
{
  this->int var0 = (void **)&unk_26EBDACA0;
  this->unsigned __int16 var1 = a2;
  this->unsigned int var2 = 0;
  OCCStreamer::setBaseStringForOutputFilename(this, __s);
}

char *OCCStreamer::setBaseStringForOutputFilename(OCCStreamer *this, const char *__s)
{
  uint64_t result = this->var2;
  if (result) {
    uint64_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  this->unsigned int var2 = 0;
  if (__s)
  {
    strlen(__s);
    operator new[]();
  }
  return result;
}

void OCCStreamer::~OCCStreamer(OCCStreamer *this)
{
  this->int var0 = (void **)&unk_26EBDACA0;
  unsigned __int16 var1 = this->var1;
  if (var1) {
    (*((void (**)(OCCCryptoKey *))var1->var0 + 13))(var1);
  }
  unsigned int var2 = this->var2;
  if (var2) {
    MEMORY[0x23EC99790](var2, 0x1000C8077774924);
  }
}

void OCCStreamer::openInputBuf(OCCStreamer *this, const void **a2, unsigned int a3, SsrwOORootStorage **a4)
{
}

void sub_238DB1480(void *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1020C400B9F2F10);
  __cxa_begin_catch(a1);
  if (*v1)
  {
    SsrwOORootStorage::~SsrwOORootStorage(*v1);
    MEMORY[0x23EC997B0]();
  }
  OCCCryptoKey *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x238DB1470);
}

uint64_t OCCStreamer::openInputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **__s, const char *a4)
{
  a2->int var0 = (_Storage *)SsrwOOStorage::openStream((SsrwOOStorage *)this, (const char *)__s);
  return 1;
}

void sub_238DB150C(void *a1)
{
}

uint64_t OCCStreamer::openInputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, const unsigned __int16 *a4)
{
  a2->int var0 = (_Storage *)SsrwOOStorage::openStream((SsrwOOStorage *)this, (const unsigned __int16 *)a3);
  return 1;
}

void sub_238DB154C(void *a1)
{
}

uint64_t OCCStreamer::openOutputRootStorage(OCCStreamer *this, __sFILE *a2, SsrwOORootStorage *a3, int8x8_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  SsrwOORootStorage::createInStream(a3, a2, a4);
  unsigned int v6 = (SsrwOOStorage *)(*((uint64_t (**)(OCCStreamer *))this->var0 + 3))(this);
  Info = SsrwOOStorage::getInfo(v6);
  SsrwOOStgInfo::getCLSID(Info, &v9);
  SsrwOOStorage::setClass((SsrwOOStorage *)a3, &v9);
  return 1;
}

void sub_238DB1600(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x238DB15D4);
  }
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::openOutputRootStorageWithCLSID(OCCStreamer *this, __sFILE *a2, _SsrwOO_GUID a3, SsrwOORootStorage *a4, int8x8_t a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  _SsrwOO_GUID v7 = a3;
  SsrwOORootStorage::createRWStorageInStream(a4, a2, a5);
  SsrwOOStorage::setClass((SsrwOOStorage *)a4, &v7);
  return 1;
}

void sub_238DB1690(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x238DB1664);
  }
  _Unwind_Resume(a1);
}

uint64_t OCCStreamer::openOutputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, const char *__s)
{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, __s);
  return 1;
}

{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, __s);
  return 1;
}

void sub_238DB16DC(void *a1)
{
}

void sub_238DB1720(void *a1)
{
}

uint64_t OCCStreamer::openOutputStream(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStream **a3, unsigned __int16 *a4)
{
  *a3 = (SsrwOOStream *)SsrwOOStorage::createStream(a2, a4);
  return 1;
}

void sub_238DB1764(void *a1)
{
}

uint64_t OCCStreamer::openOutputStorage(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStorage **a3, const char *__s)
{
  *a3 = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, __s);
  return 1;
}

void sub_238DB17A8(void *a1)
{
}

uint64_t OCCStreamer::openOutputStorage(OCCStreamer *this, SsrwOOStorage *a2, SsrwOOStorage **a3, unsigned __int16 *a4)
{
  *a3 = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, a4);
  return 1;
}

void sub_238DB17EC(void *a1)
{
}

char *OCCUtilities::resizeData(char *this, char *a2, unint64_t a3, unint64_t __c, unsigned char *a5, void *a6)
{
  if ((unint64_t)a2 >= a3) {
    unsigned int v6 = (char *)a3;
  }
  else {
    unsigned int v6 = a2;
  }
  if (v6)
  {
    _SsrwOO_GUID v7 = a5;
    do
    {
      char v8 = *this++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  BOOL v9 = a3 > (unint64_t)a2;
  size_t v10 = a3 - (void)a2;
  if (v9) {
    return (char *)memset(&a2[(void)a5], __c, v10);
  }
  return this;
}

unsigned char *OCCUtilities::randomizeData(unsigned char *this, unsigned __int8 *a2)
{
  if (this)
  {
    uint64_t v2 = a2;
    if (a2)
    {
      uint64_t v3 = this;
      this = (unsigned char *)random();
      uint64_t v4 = 0;
      int v5 = (int)this;
      do
      {
        unsigned char *v3 = *((unsigned char *)&v5 + v4++);
        if (v4 == 4)
        {
          this = (unsigned char *)random();
          uint64_t v4 = 0;
          int v5 = (int)this;
        }
        ++v3;
        --v2;
      }
      while (v2);
    }
  }
  return this;
}

void OCCXmlStreamer::~OCCXmlStreamer(OCCStreamer *this)
{
  this->int var0 = (void **)&unk_26EBDACF0;
  int var0 = this[1].var0;
  if (var0) {
    (*((void (**)(void **))*var0 + 2))(var0);
  }
  unsigned __int16 var1 = this[1].var1;
  if (var1)
  {
    SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)var1);
    MEMORY[0x23EC997B0]();
  }
  uint64_t v4 = this[2].var0;
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  unsigned int var2 = this[1].var2;
  if (var2) {
    fclose((FILE *)var2);
  }
  OCCStreamer::~OCCStreamer(this);
}

{
  uint64_t vars8;

  OCCXmlStreamer::~OCCXmlStreamer(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t OCCXmlStreamer::getInputStorage(OCCXmlStreamer *this)
{
  return *((void *)this + 4);
}

uint64_t OCCXmlStreamer::createUsingRootStorage(OCCStreamer *a1, _DWORD *a2, uint64_t a3, const char *a4)
{
  *a2 = 8011;
  BOOL v9 = 0;
  if (OCCStreamer::openInputStream(a1, (SsrwOOStorage *)&v9, (SsrwOOStream **)"EncryptionInfo", a4))
  {
    *a2 = 8003;
    int v5 = (const void *)(*((uint64_t (**)(SsrwOOStream *))v9->var0 + 6))(v9);
    UsingEncryptionInfoStream = OCCCryptoKey::createUsingEncryptionInfoStream((OCCCryptoKey *)1, v9, 0, v5);
    if (UsingEncryptionInfoStream)
    {
      _SsrwOO_GUID v7 = UsingEncryptionInfoStream;
      if ((*((uint64_t (**)(xmlDoc *))UsingEncryptionInfoStream->_private + 14))(UsingEncryptionInfoStream))
      {
        if (v9) {
          (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
        }
        operator new();
      }
      (*((void (**)(xmlDoc *))v7->_private + 13))(v7);
    }
  }
  if (v9) {
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  }
  return 0;
}

void sub_238DB1B5C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0xB1C40F6989E03);
  _Unwind_Resume(a1);
}

void OCCXmlStreamer::createUsingInputBuffer(OCCStreamer *a1, const void **a2, _DWORD *a3, SsrwOORootStorage **a4)
{
  uint64_t v4 = 0;
  *a3 = 8001;
  OCCStreamer::openInputBuf(a1, a2, &v4, a4);
}

uint64_t OCCXmlStreamer::setDefaultPassphrase(OCCXmlStreamer *this, const char *__s)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
  if (__s)
  {
    strlen(__s);
    operator new[]();
  }
  return result;
}

uint64_t OCCXmlStreamer::decryptIntoFile(OCCXmlStreamer *this, __sFILE *a2, uint64_t a3, const char *a4)
{
  BOOL v9 = 0;
  if (OCCStreamer::openInputStream(*((OCCStreamer **)this + 4), (SsrwOOStorage *)&v9, (SsrwOOStream **)"EncryptedPackage", a4)&& (unint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))v9->var0 + 11))(v9), !HIDWORD(v6)))
  {
    uint64_t v7 = OCCSegmenter::decryptSegmentsIntoFileHandle(*((OCCSegmenter **)this + 3), v9, 8, *((OCCCryptoKey **)this + 1), v6, a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v9) {
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  }
  return v7;
}

uint64_t OCCXmlStreamer::encryptIntoFile(OCCAgileCryptoKey **this, __sFILE *a2)
{
  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v7);
  *(void *)&v8.int var0 = 0;
  *(void *)v8.unsigned int var3 = 0;
  if (OCCStreamer::openOutputRootStorageWithCLSID((OCCStreamer *)this, a2, v8, (SsrwOORootStorage *)&v7, v4))
  {
    uint64_t v5 = OCCXmlStreamer::encryptIntoRootStorage(this, &v7);
    SsrwOORootStorage::close((SsrwOORootStorage *)&v7, 1);
  }
  else
  {
    uint64_t v5 = 0;
  }
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v7);
  return v5;
}

void sub_238DB1DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  _Unwind_Resume(a1);
}

uint64_t OCCXmlStreamer::encryptIntoRootStorage(OCCAgileCryptoKey **this, SsrwOOStorage *a2)
{
  if (OCCAgileCryptoKey::isAgile(this[1], (const OCCCryptoKey *)a2))
  {
    uint64_t v5 = 0;
    if (OCCStreamer::openOutputStream((OCCStreamer *)this, a2, &v5, "EncryptedPackage"))
    {
      if (OCCXmlStreamer::encryptPackageStream((OCCXmlStreamer *)this, v5)) {
        OCCAgileCryptoKey::generateEncryptionMessageAuthentication(this[1], v5);
      }
      (*((void (**)(SsrwOOStream *, uint64_t))v5->var0 + 19))(v5, 1);
      if (v5) {
        (*((void (**)(SsrwOOStream *))v5->var0 + 1))(v5);
      }
    }
  }
  return 0;
}

FILE *OCCXmlStreamer::encryptPackageStream(OCCXmlStreamer *this, SsrwOOStream *a2)
{
  uint64_t result = (FILE *)*((void *)this + 5);
  if (result)
  {
    fseek(result, 0, 2);
    unint64_t v5 = ftello(*((FILE **)this + 5));
    fseek(*((FILE **)this + 5), 0, 0);
    uint64_t result = 0;
    if (!HIDWORD(v5))
    {
      (*((void (**)(SsrwOOStream *, unint64_t))a2->var0 + 28))(a2, v5);
      (*((void (**)(SsrwOOStream *, void))a2->var0 + 28))(a2, 0);
      if (OCCSegmenter::encryptSegmentsFromFileHandleIntoStream(*((OCCSegmenter **)this + 3), *((__sFILE **)this + 5), v5, *((OCCCryptoKey **)this + 1), a2))return (FILE *)1; {
    }
      }
  }
  return result;
}

uint64_t OCCXmlStreamer::writeEncryptionInfoStream(OCCXmlStreamer *this, SsrwOOStream *a2)
{
  uint64_t v6 = 0;
  int v5 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t *, int *))(**((void **)this + 1) + 120))(*((void *)this + 1), &v6, &v5);
  if (v3) {
    (*((void (**)(SsrwOOStream *, uint64_t, int *))a2->var0 + 23))(a2, v6, &v5);
  }
  return v3;
}

uint64_t OCCXmlStreamer::writeDataSpacesStorage(OCCStreamer *this, SsrwOOStorage *a2)
{
  BOOL v9 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v9, "Version")) {
    return 0;
  }
  int v8 = 76;
  (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &versionStreamData, &v8);
  (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
  if (v9) {
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  }
  BOOL v9 = 0;
  int v8 = 0;
  uint64_t v4 = 0;
  if (OCCStreamer::openOutputStream(this, a2, &v9, "DataSpaceMap"))
  {
    int v8 = 112;
    (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &dataSpaceMapStreamData, &v8);
    (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
    if (v9) {
      (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
    }
    BOOL v9 = 0;
    int v8 = 0;
    SsrwOOStorage v7 = 0;
    uint64_t v4 = 0;
    if (OCCStreamer::openOutputStorage(this, a2, &v7, "DataSpaceInfo"))
    {
      uint64_t v4 = OCCStreamer::openOutputStream(this, v7, &v9, "StrongEncryptionDataSpace");
      if (v4)
      {
        int v8 = 64;
        (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &strongEncryptionDataSpaceStreamData, &v8);
        (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
        if (v9) {
          (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
        }
        BOOL v9 = 0;
        int v8 = 0;
      }
      SsrwOOStorage::close(v7, 1);
      if (v7)
      {
        SsrwOOStorage::~SsrwOOStorage(v7);
        MEMORY[0x23EC997B0]();
      }
      SsrwOOStorage v7 = 0;
      if (v4)
      {
        if (OCCStreamer::openOutputStorage(this, a2, &v7, "TransformInfo"))
        {
          uint64_t v6 = 0;
          if (OCCStreamer::openOutputStorage(this, v7, &v6, "StrongEncryptionTransform"))
          {
            uint64_t v4 = OCCStreamer::openOutputStream(this, v6, &v9, "Primary");
            if (v4)
            {
              int v8 = 200;
              (*((void (**)(SsrwOOStream *, void *, int *))v9->var0 + 23))(v9, &primaryStreamData, &v8);
              (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
              if (v9) {
                (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
              }
              BOOL v9 = 0;
              int v8 = 0;
            }
            SsrwOOStorage::close(v6, 1);
            if (v6)
            {
              SsrwOOStorage::~SsrwOOStorage(v6);
              MEMORY[0x23EC997B0]();
            }
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v4 = 0;
          }
          SsrwOOStorage::close(v7, 1);
          if (v7)
          {
            SsrwOOStorage::~SsrwOOStorage(v7);
            MEMORY[0x23EC997B0]();
          }
          return v4;
        }
        return 0;
      }
    }
  }
  return v4;
}

uint64_t OCCXmlStreamer::getDefaultPassphraseInUTF8(OCCXmlStreamer *this)
{
  return *((void *)this + 6);
}

uint64_t OCCXmlStreamer::getCryptoKey(OCCXmlStreamer *this)
{
  return *((void *)this + 1);
}

void sub_238DB25B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB2690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB29C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB2B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB2CC4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1081C4063F6A4DALL);

  _Unwind_Resume(a1);
}

void XlChartTitle::~XlChartTitle(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238DB2E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB2E68(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40A426D8F7);
  _Unwind_Resume(a1);
}

void XlChartDefaultTextFrame::~XlChartDefaultTextFrame(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238DB2FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB310C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB31CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB32F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlChartPlotFrame::~XlChartPlotFrame(XlChartFrameType *this)
{
  XlChartFrameType::~XlChartFrameType(this);
  JUMPOUT(0x23EC997B0);
}

void XlChartLegendFrame::~XlChartLegendFrame(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238DB3440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB35EC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1081C4063F6A4DALL);

  _Unwind_Resume(a1);
}

void sub_238DB39D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB3B94(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1081C409FBAB9B8);

  _Unwind_Resume(a1);
}

void sub_238DB3CE0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1081C40EC8FBF4ALL);

  _Unwind_Resume(a1);
}

void sub_238DB3DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB3E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB40F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB4A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB4AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB4C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB4FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB50B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB51C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB52DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB53A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB54EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB57E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB5AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB5CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB609C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB6204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB6364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB64CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238DB66D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB6868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB69F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB6AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB6CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB7090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB72B4(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  _Unwind_Resume(a1);
}

void sub_238DB751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB79B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB7C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB7D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB7E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB82E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB8CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB9010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB9290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DB9A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB9B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB9BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DB9E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238DB9FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238DBA2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBA560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBA690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBA79C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238DBA8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBAE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBB114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBB264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBB424(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238DBB534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBB8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBBA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBBB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBBC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBBF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBC0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBC304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBC4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBC720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v15 = v14;

  _Unwind_Resume(a1);
}

void sub_238DBC84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBC8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBC9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBCBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBCE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBD02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBD4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238DBD6C8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238DBD77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBD8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBDBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBDC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBDCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBDD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBDF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBE0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBE280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBE364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBE43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DBE53C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1000C40C36A4E17);

  _Unwind_Resume(a1);
}

void sub_238DBE5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void XlCellFormatTable::~XlCellFormatTable(void **this)
{
  *this = &unk_26EBDAEE8;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAEE8;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlCollection::~XlCollection(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlColumnTable::~XlColumnTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void sub_238DBE9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EBConvertCsException(unsigned int *a1)
{
  if (*a1 == 8003) {
    return +[TCMessageException raise:ECUnsupportedVersion];
  }
  else {
    return OCConvertCsException(a1);
  }
}

void sub_238DBEB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBEC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBED30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBF028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XlFontTable::~XlFontTable(void **this)
{
  *this = &unk_26EBDB030;
  uint64_t v1 = (OcText *)(this + 1);
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(this + 8);
  OcText::~OcText(v1);
}

{
  OcText *v1;
  uint64_t vars8;

  *this = &unk_26EBDB030;
  uint64_t v1 = (OcText *)(this + 1);
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(this + 8);
  OcText::~OcText(v1);
  JUMPOUT(0x23EC997B0);
}

void sub_238DBF250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBF3B0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v3, 0x10B1C40B04403CELL);

  _Unwind_Resume(a1);
}

void sub_238DBF58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DBF8F0(_Unwind_Exception *a1, XlPtg *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  XlPtg::~XlPtg((XlPtg *)&a10);

  _Unwind_Resume(a1);
}

void XlFormulaProcessor::XLFormulaInfoStream::~XLFormulaInfoStream(XlFormulaProcessor::XLFormulaInfoStream *this)
{
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::Skip(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) += a2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteByte(uint64_t this)
{
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteWord(uint64_t this)
{
  *(_DWORD *)(this + 8) += 2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteDWord(uint64_t this)
{
  *(_DWORD *)(this + 8) += 4;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::WriteDouble(uint64_t this, double a2)
{
  *(_DWORD *)(this + 8) += 8;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::Write(uint64_t this, unsigned __int8 *a2, int a3)
{
  *(_DWORD *)(this + 8) += a3;
  return this;
}

_DWORD *XlFormulaProcessor::XLFormulaInfoStream::Clone(XlFormulaProcessor::XLFormulaInfoStream *this)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26EBDB068;
  result[2] = 0;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaInfoStream::PosShift(XlFormulaProcessor::XLFormulaInfoStream *this, XLFormulaStream *a2)
{
  return 0;
}

uint64_t XlFormulaProcessor::XLFormulaStream::WriteString(XlFormulaProcessor::XLFormulaStream *this, unsigned __int8 *a2, int a3)
{
  int v5 = *(unsigned __int16 *)a2;
  uint64_t v6 = a2[3];
  if (a3) {
    (*(void (**)(XlFormulaProcessor::XLFormulaStream *, void))(*(void *)this + 32))(this, *(unsigned __int16 *)a2);
  }
  else {
    (*(void (**)(XlFormulaProcessor::XLFormulaStream *, void))(*(void *)this + 24))(this, *(_WORD *)a2);
  }
  uint64_t result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, uint64_t))(*(void *)this + 24))(this, v6);
  int v8 = a2 + 4;
  if (v6)
  {
    if (v5)
    {
      do
      {
        --v5;
        unsigned int v10 = *(unsigned __int16 *)v8;
        v8 += 2;
        uint64_t result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, void))(*(void *)this + 32))(this, v10);
      }
      while ((_WORD)v5);
    }
  }
  else if (v5)
  {
    do
    {
      --v5;
      unsigned int v9 = *v8++;
      uint64_t result = (*(uint64_t (**)(XlFormulaProcessor::XLFormulaStream *, void))(*(void *)this + 24))(this, v9);
    }
    while ((_WORD)v5);
  }
  return result;
}

void XlFormulaProcessor::XLFormulaWriteStream::~XLFormulaWriteStream(XlFormulaProcessor::XLFormulaWriteStream *this)
{
}

void XlFormulaProcessor::XLFormulaWriteStream::Skip(void **this, unsigned int a2)
{
  this[1] = (char *)this[1] + a2;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteByte(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned char **)(this + 8);
  *(void *)(this + ++*(_DWORD *)(this + 8) = v2 + 1;
  unsigned char *v2 = a2;
  return this;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteWord(XlFormulaProcessor::XLFormulaWriteStream *this, uint64_t a2)
{
  uint64_t result = CsLeWriteUInt16(a2, *((_WORD **)this + 1));
  *((void *)this + 1) += 2;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::WriteDWord(XlFormulaProcessor::XLFormulaWriteStream *this, uint64_t a2)
{
  uint64_t result = CsLeWriteUInt32(a2, *((_DWORD **)this + 1));
  *((void *)this + 1) += 4;
  return result;
}

double *XlFormulaProcessor::XLFormulaWriteStream::WriteDouble(double **this, double a2)
{
  return CsLeWriteFloat64(this[1]++, a2);
}

void *XlFormulaProcessor::XLFormulaWriteStream::Write(void **this, unsigned __int8 *a2, size_t __n)
{
  unsigned int v3 = __n;
  uint64_t result = memcpy(this[1], a2, __n);
  this[1] = (char *)this[1] + v3;
  return result;
}

void *XlFormulaProcessor::XLFormulaWriteStream::Clone(XlFormulaProcessor::XLFormulaWriteStream *this)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *((void *)this + 1);
  *uint64_t result = &unk_26EBDB100;
  result[1] = v3;
  return result;
}

uint64_t XlFormulaProcessor::XLFormulaWriteStream::PosShift(XlFormulaProcessor::XLFormulaWriteStream *this, XlFormulaProcessor::XLFormulaStream *a2)
{
  return (*((_DWORD *)a2 + 2) - *((_DWORD *)this + 2));
}

void XlNoteTable::~XlNoteTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlHyperlinkTable::~XlHyperlinkTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void sub_238DC0228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238DC0434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC0610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC07D8(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238DC0964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC0BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC0D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC0F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC1124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC123C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC12A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC1330(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1000C40BDFB0063);

  _Unwind_Resume(a1);
}

void sub_238DC1468(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x23EC997B0](v4, 0x10B1C40C6ED1AFELL);

  _Unwind_Resume(a1);
}

void sub_238DC1530(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C402A17B6B6);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  SsrwOOStorage v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        SsrwOOStorage v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        SsrwOOStorage v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_238DC1784(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238DC18BC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);

  _Unwind_Resume(a1);
}

uint64_t XlCellRow::getNextCell(XlCellRow *this)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = v3;
  uint64_t v4 = *((unsigned int *)v1 + 6);
  *((_DWORD *)v1 + 6) = v4 + 1;
  if (v4 >= ((unint64_t)(*((void *)v1 + 1) - v3) >> 3)) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * v4);
}

uint64_t XlRowBlock::getNextRow(XlRowBlock *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = v3;
  uint64_t v4 = *((unsigned __int16 *)v1 + 12);
  *((_WORD *)v1 + 1CsString::CsString((CsString *)this + 2) = v4 + 1;
  if (((unint64_t)(*((void *)v1 + 1) - v3) >> 3) <= v4) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * v4);
}

void sub_238DC19FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<OcText,ChAllocator<OcText>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 48;
      SsrwOOStorage v7 = v4 - 48;
      int v8 = v4 - 48;
      do
      {
        unsigned int v9 = *(void (***)(char *))v8;
        v8 -= 48;
        (*v9)(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        SsrwOOStorage v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_238DC1F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OcText *a5, OcText *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  OcText::~OcText((OcText *)&a13);
  OcText::~OcText((OcText *)&a19);

  _Unwind_Resume(a1);
}

void sub_238DC2064(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40B84AEDEBLL);
  _Unwind_Resume(a1);
}

void sub_238DC21AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC2278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<OcText,ChAllocator<OcText>>::__push_back_slow_path<OcText const&>(uint64_t *a1, const OcText *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unsigned int v5 = v4 + 1;
  if ((v4 + 1) > 0x55555555) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unsigned int v8 = -1431655765 * ((unint64_t)(a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unsigned int v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAA) {
    unint64_t v9 = 1431655765;
  }
  else {
    unint64_t v9 = v5;
  }
  float v19 = a1 + 2;
  if (v9)
  {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<OcText>>(v7, v9);
    int v12 = v11;
  }
  else
  {
    BOOL v10 = 0;
    int v12 = 0;
  }
  uint64_t v15 = v10;
  uint64_t v16 = (OcText *)&v10[48 * v4];
  unsigned int v18 = &v10[48 * v12];
  OcText::OcText(v16, a2);
  uint64_t v17 = v16 + 1;
  std::vector<OcText,ChAllocator<OcText>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_238DC238C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OcText,ChAllocator<OcText>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<ChAllocator<OcText>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<OcText>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<ChAllocator<OcText>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; OcText::OcText((OcText *)(i + a7), (const OcText *)(i + a3)))
    i -= 48;
  return a6;
}

uint64_t std::__split_buffer<OcText,ChAllocator<OcText> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 48);
    *(void *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_238DC2774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC298C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC2A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC4510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  for (uint64_t i = 1096; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_238DC464C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC4764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC48A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC4BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC4D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC4E60(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C409D6E66E7);
  _Unwind_Resume(a1);
}

void sub_238DC4FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC50A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  BOOL v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ECMappingContext;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238DC5258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + ++*(_DWORD *)(this + 8) = v11;
  OcText::~OcText((OcText *)&a9);

  _Unwind_Resume(a1);
}

void sub_238DC5328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_238DC5690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC56F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC581C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC59B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC5D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC60A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238DC6208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC62FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC64A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC6670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id formulaForEDCell(const EDCellHeader *a1, EDRowBlocks *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = v3;
  if (a1 && (a1->var0 & 0x10000000) != 0 && (uint64_t var0 = a1[1].var0, var0 != -1))
  {
    uint64_t v6 = [(EDRowBlocks *)v3 formulas];
    uint64_t v7 = [v6 objectAtIndex:var0];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_238DC67B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL BOOLValueForEDCell(BOOL result)
{
  if (result)
  {
    if (*(_DWORD *)result >> 29 == 1)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0) {
        int v1 = *(unsigned __int8 *)(result + 12);
      }
      else {
        int v1 = *(unsigned __int8 *)(result + 8);
      }
      return v1 != 0;
    }
    else
    {
      uint64_t v2 = [NSString stringWithUTF8String:"BOOL BOOLValueForEDCell(const EDCellHeader *)"];
      uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v2 file:v3 lineNumber:181 isFatal:0 description:"Invalid Cell Type!"];

      +[OITSUAssertionHandler logBacktraceThrottled];
      return 0;
    }
  }
  return result;
}

void sub_238DC6898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setInlineNSStringValueForEDCell(EDCellHeader *a1, NSString *a2, EDResources *a3)
{
  unint64_t v8 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = [[EDString alloc] initWithString:v8];
  uint64_t v7 = [(EDResources *)v5 strings];
  setStringIndexValueForEDCell(a1, [v7 addObject:v6]);
}

void sub_238DC6954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t edCellHasRef(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 3) >> 3) & 1;
  }
  return result;
}

void sub_238DC6A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC6A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC6D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC6E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC6EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC719C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC74C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC7B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DC7C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC7E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC805C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC82B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC85C8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1010C405C145AC1);
  _Unwind_Resume(a1);
}

void sub_238DC8810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC894C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC8A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC8DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_238DC903C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC932C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC94EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC95A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC97F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC98C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC99C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DC9FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCA1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}