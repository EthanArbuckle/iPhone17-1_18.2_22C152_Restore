void sub_238DCA2BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_238DCA364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCA420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCA4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCA588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCA764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCA80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCAC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCAD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCADBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCAF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCAFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCB094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCB138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCB1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCB430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCB4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCB560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCB79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCBEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCBFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCC574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCC6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCC740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCC9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCCAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD4B0(void *exc_buf)
{
}

void sub_238DCD594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCD994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCDAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCDD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCE000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCE4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCE894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCE940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCEA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCEAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCEBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCECC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCEDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCEE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCEED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCEF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCF950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCF9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCFBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCFC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCFCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCFD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCFDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DCFE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DCFF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD01D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL EDValue::isStringType(EDValue *this)
{
  return this->type == 3 || this->type == 6;
}

id EDValue::resolvedEDStringValue(EDValue *this, EDResources *a2)
{
  v3 = a2;
  v4 = v3;
  if (this->type == 6)
  {
    v6 = [(EDResources *)v3 strings];
    v5 = [v6 objectAtIndex:this->var0.stringIndex];
  }
  else if (this->type == 3)
  {
    v5 = EDValue::edStringValue(this);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_238DD060C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EDValue::edStringValue(EDValue *this)
{
  v1 = EDValue::nsStringValue(this);
  if (v1)
  {
    v2 = +[EDString edStringWithString:v1];
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_238DD068C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EDValue::nsStringValue(EDValue *this)
{
  if (this->type == 3 && this->var0.stringIndex) {
    v1 = (void *)[[NSString alloc] initWithUTF8String:this->var0.stringIndex];
  }
  else {
    v1 = 0;
  }
  return v1;
}

void EDValue::makeFromCell(EDValue *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unsigned int v5 = typeForEDCell(this);
  *(_DWORD *)a2 = v5;
  switch(v5)
  {
    case 0u:
      *(void *)(a2 + 8) = 0;
      break;
    case 1u:
      *(unsigned char *)(a2 + 8) = BOOLValueForEDCell((BOOL)this);
      break;
    case 2u:
      *(double *)(a2 + 8) = numberValueForEDCell((const EDCellHeader *)this);
      break;
    case 3u:
      *(_DWORD *)a2 = 6;
      *(void *)(a2 + 8) = stringIndexValueForEDCell((const EDCellHeader *)this);
      break;
    case 5u:
      *(_DWORD *)(a2 + 8) = errorValueForEDCell(this);
      break;
    default:
      return;
  }
}

void EDValue::makeWithNumber(EDValue *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 2;
  *(double *)(a3 + 8) = a2;
}

void EDValue::makeWithNSString(EDValue *this@<X0>, uint64_t a2@<X8>)
{
  v4 = this;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 3;
  if (v4)
  {
    v6 = v4;
    unsigned int v5 = (const char *)[(EDValue *)v4 UTF8String];
    if (v5)
    {
      *(void *)(a2 + 8) = strdup(v5);
    }
    else
    {
      *(_DWORD *)a2 = 5;
      *(_DWORD *)(a2 + 8) = 2;
    }
    v4 = v6;
  }
  else
  {
    *(void *)(a2 + 8) = 0;
  }
}

void sub_238DD0858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD0974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD0BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD0C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD0D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD0F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD117C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD1464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD1534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD15E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD1658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD16F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD176C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_238DD1948(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    size_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    size_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        size_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void sub_238DD1E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238DD1FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD2560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_238DD27EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD28F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD2C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238DD2DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD2E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD2F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD300C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD31F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD3620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238DD3714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD3DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD3E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD3F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD4110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238DD4918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD4A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD4E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD50F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD5208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD5830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD5E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD63B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238DD6870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    std::string::size_type v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<unsigned int>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          v16 = v15;
          if (v15) {
            v15 = std::__tree<unsigned int>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_238DD6A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  char v3 = a1 + 1;
  size_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        char v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        size_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      size_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void *std::__tree<unsigned int>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  result = *(void **)(a1 + 16);
  if (result)
  {
    char v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        size_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          result = v4;
          size_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; char v3 = (void *)result[1])
      {
        do
        {
          result = v3;
          char v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<unsigned int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    char v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        char v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  size_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  int v6 = a1 + 1;
  std::string::size_type v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        std::string::size_type v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      std::string::size_type v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        unsigned int v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unsigned int v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void __cxx_global_array_dtor_26_0()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void sub_238DD70F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v17 = v15;

  _Unwind_Resume(a1);
}

void sub_238DD7148()
{
}

void sub_238DD7150()
{
}

void sub_238DD7158()
{
}

void sub_238DD73C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD7824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD7A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238DD7BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD7D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DD7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238DD8910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_238DD8A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD8B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD8BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_68_0()
{
  for (uint64_t i = 0xC8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_116_0()
{
  for (uint64_t i = 0x128u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[EXConditionalFormattingRule conditionalFormattingRuleTypeEnumMap]::sConditionalFormattingRuleTypeStructs
                       + i));
}

void sub_238DD8D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD8EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD92D4(_Unwind_Exception *a1)
{
  unsigned int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238DD9398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DD9558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_62_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void sub_238DD96FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238DD9F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_23_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238DDA11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238DDA1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDA290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDA3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_11_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_20_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238DDAA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238DDAFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDB28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDB50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDB774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDBA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDBC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDBE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDBF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDBFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDC0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDC2CC(_Unwind_Exception *a1)
{
  unsigned int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238DDC374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDC494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDC5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDC9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<OADTableCell * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void *std::vector<EDReference * {__strong}>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<EDReference * {__strong}>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_238DDCAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<EDReference * {__strong}>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_238DDCC28(_Unwind_Exception *a1)
{
  char v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238DDCD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDCDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDCF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DDD360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238DDD5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v13) {

  }
  _Unwind_Resume(a1);
}

void sub_238DDD6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDD81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDD984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDDA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDDC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDE56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_238DDEA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238DDEBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DDECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DDEE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDFB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDFC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DDFC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDCellIterator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238DDFE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE0080(_Unwind_Exception *exception_object)
{
  if (v1) {
    -[EDBuildableFormula stringFromStringTokenAtIndex:](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_238DE0150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE034C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE0580(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE0B10(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE0E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE0F5C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE10D8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE120C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void sub_238DE12BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE1330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE141C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x10B1C40D583828BLL);

  _Unwind_Resume(a1);
}

void sub_238DE15B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE16C0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

uint64_t childCountForToken(int a1)
{
  int v2 = categoryForType(a1);
  uint64_t result = 0;
  if (!v2 || v2 == 3) {
    return result;
  }
  if (a1 > 64)
  {
    if (a1 > 96)
    {
      if (a1 != 97 && a1 != 98) {
        return 0;
      }
    }
    else if (a1 != 65 && a1 != 66)
    {
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 2;
  switch(a1)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return result;
    case 18:
    case 19:
    case 20:
    case 21:
      uint64_t result = 1;
      break;
    case 25:
    case 33:
    case 34:
      return 0xFFFFFFFFLL;
    default:
      return 0;
  }
  return result;
}

_WORD *copyStringToExtendedData(const unsigned __int16 *a1, unsigned __int8 *a2, int a3)
{
  *(_WORD *)a2 = a3;
  *((_WORD *)a2 + 1) = 265;
  uint64_t result = _ChWcsncpy((_WORD *)a2 + 2, a1, a3);
  *(_WORD *)&a2[2 * a3 + 4] = 0;
  return result;
}

uint64_t refTypeOf(char a1)
{
  int v1 = a1 & 0x60;
  if (v1 == 64) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = -1;
  }
  if (v1 == 96) {
    unsigned int v2 = 2;
  }
  if (v1 == 32) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t convertValueReference(uint64_t result, unsigned int a2)
{
  int v2 = 32 * a2 + 32;
  if (a2 >= 3) {
    int v2 = 0;
  }
  if ((result & 0x60) != 0)
  {
    unsigned int v3 = result & 0xFFFFFF9F;
    if ((result & 0x60) != v2 && v3 <= 0x1B)
    {
      if (((1 << v3) & 0xC000036) != 0) {
        return v3 | v2;
      }
      if (!v3)
      {
        if (!a2) {
          int v2 = 96;
        }
        return v3 | v2;
      }
    }
  }
  return result;
}

uint64_t addOperator(void *a1, uint64_t a2)
{
  id v3 = a1;
  [v3 addToken:a2 extendedDataLength:0 numArgs:childCountForToken(a2)];

  return 1;
}

void sub_238DE1C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addFunction(void *a1, __int16 a2, uint64_t a3)
{
  uint64_t v4 = (_WORD *)[a1 addToken:65 extendedDataLength:2 numArgs:a3];
  if (v4) {
    _WORD *v4 = a2;
  }
  return v4 != 0;
}

BOOL addVariableFunction(void *a1, __int16 a2, uint64_t a3)
{
  __int16 v3 = a3;
  unsigned int v5 = (_WORD *)[a1 addToken:66 extendedDataLength:8 numArgs:a3];
  if (v5)
  {
    _WORD *v5 = v3;
    v5[1] = 0;
    v5[2] = a2;
    v5[3] = 0;
  }
  return v5 != 0;
}

BOOL addStringOperand(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = [v4 length];
  __int16 v6 = v5;
  unsigned int v7 = (_WORD *)[v3 addToken:23 extendedDataLength:(2 * v5 + 8)];
  if (v7)
  {
    uint64_t v8 = (const unsigned __int16 *)[v4 cStringUsingEncoding:10];
    *unsigned int v7 = v6;
    v7[1] = 265;
    _ChWcsncpy(v7 + 2, v8, v6);
    v7[v6 + 2] = 0;
  }

  return v7 != 0;
}

void sub_238DE1D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addNumberOperand(void *a1, double a2)
{
  id v3 = a1;
  id v4 = v3;
  if (a2 <= 65535.0 && ((double v5 = trunc(a2), a2 >= 0.0) ? (v6 = v5 == a2) : (v6 = 0), v6))
  {
    unsigned int v7 = (_WORD *)objc_msgSend(v3, "addToken:extendedDataLength:", 30, 2, v5);
    if (v7)
    {
      *unsigned int v7 = (int)a2;
      BOOL v8 = 1;
    }
    else
    {
      BOOL v8 = 0;
    }
  }
  else
  {
    BOOL v8 = addFloatOperand(v3, a2);
  }

  return v8;
}

void sub_238DE1E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addFloatOperand(void *a1, double a2)
{
  id v3 = a1;
  id v4 = (double *)[v3 addToken:31 extendedDataLength:8];
  double v5 = v4;
  if (v4) {
    CsCopyFloat64ToPackedLocation(v4, a2);
  }

  return v5 != 0;
}

void sub_238DE1EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addIntOperand(void *a1, __int16 a2)
{
  id v3 = (_WORD *)[a1 addToken:30 extendedDataLength:2];
  if (v3) {
    _WORD *v3 = a2;
  }
  return v3 != 0;
}

BOOL addBoolOperand(void *a1, char a2)
{
  id v3 = (unsigned char *)[a1 addToken:29 extendedDataLength:1];
  if (v3) {
    unsigned char *v3 = a2;
  }
  return v3 != 0;
}

BOOL addRef3DOperandWithSheet(void *a1, int a2, __int16 a3, __int16 a4, __int16 a5, int a6)
{
  id v11 = a1;
  v12 = v11;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v13 = 90;
    }
    else if (a2 == 2)
    {
      uint64_t v13 = 122;
    }
    else
    {
      uint64_t v13 = 26;
    }
  }
  else
  {
    uint64_t v13 = 58;
  }
  v14 = (_WORD *)[v11 addToken:v13 extendedDataLength:6];
  v15 = v14;
  if (v14)
  {
    _WORD *v14 = a3;
    v14[1] = a4;
    v14[2] = a5;
    if (a6) {
      [v12 markLastTokenAsDuration];
    }
  }

  return v15 != 0;
}

void sub_238DE1FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addArea3DOperandWithSheet(void *a1, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7)
{
  id v13 = a1;
  v14 = v13;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v15 = 91;
    }
    else if (a2 == 2)
    {
      uint64_t v15 = 123;
    }
    else
    {
      uint64_t v15 = 27;
    }
  }
  else
  {
    uint64_t v15 = 59;
  }
  v16 = (_WORD *)[v13 addToken:v15 extendedDataLength:10];
  if (v16)
  {
    _WORD *v16 = a3;
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    v16[4] = a7;
  }
  BOOL v17 = v16 != 0;

  return v17;
}

void sub_238DE20A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t addNumberToArray(void *a1, int a2, double a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 setExtendedDataForLastTokenAtIndex:(a2 + 2) length:10];
  *(unsigned char *)uint64_t v6 = 1;
  CsCopyFloat64ToPackedLocation((double *)(v6 + 2), a3);

  return 1;
}

void sub_238DE210C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addUnicodeStringToArray(void *a1, const unsigned __int16 *a2, unint64_t a3, int a4)
{
  id v7 = a1;
  BOOL v8 = v7;
  if (a3 <= 0x7FFE)
  {
    uint64_t v9 = [v7 setExtendedDataForLastTokenAtIndex:(a4 + 2) length:2 * (unsigned __int16)a3 + 8];
    *(unsigned char *)uint64_t v9 = 2;
    *(_WORD *)(v9 + 2) = a3;
    uint64_t v10 = v9 + 2;
    *(_WORD *)(v9 + 4) = 265;
    _ChWcsncpy((_WORD *)(v9 + 6), a2, a3);
    *(_WORD *)(v10 + 2 * a3 + 4) = 0;
  }

  return a3 < 0x7FFF;
}

void sub_238DE21B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t addBoolToArray(void *a1, char a2, int a3)
{
  id v4 = (unsigned char *)[a1 setExtendedDataForLastTokenAtIndex:(a3 + 2) length:2];
  unsigned char *v4 = 4;
  v4[1] = a2;
  return 1;
}

uint64_t addErrorToArrayAtIndex(void *a1, int a2)
{
  *(_WORD *)[a1 setExtendedDataForLastTokenAtIndex:(a2 + 2) length:2] = 3856;
  return 1;
}

BOOL addErrorToken(void *a1, __int16 a2)
{
  id v3 = (_WORD *)[a1 addToken:28 extendedDataLength:2];
  if (v3) {
    _WORD *v3 = a2;
  }
  return v3 != 0;
}

BOOL addAreaOperandFromRefExtendedData(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  id v5 = a1;
  *(void *)BOOL v17 = 0;
  *(void *)v18 = 0;
  *(_WORD *)v16 = 0;
  *(_WORD *)uint64_t v15 = 0;
  extractDataFromPtgRefBuffer(a3, v18, &v15[1], v17, v15);
  extractDataFromPtgRefBuffer(a2, &v18[1], &v16[1], &v17[1], v16);
  int v7 = v18[0];
  __int16 v6 = v18[1];
  if (v18[1] <= v18[0])
  {
    __int16 v8 = v18[0];
    LOWORD(v7) = v18[1];
  }
  else
  {
    v18[0] = v18[1];
    v18[1] = v7;
    __int16 v8 = v6;
  }
  int v10 = v17[0];
  int v9 = v17[1];
  if (v17[1] <= v17[0])
  {
    int v11 = v17[0];
    int v10 = v17[1];
  }
  else
  {
    v17[0] = v17[1];
    v17[1] = v10;
    int v11 = v9;
  }
  if (v16[1])
  {
    v10 |= 0x8000u;
    v17[1] = v10;
  }
  if (v16[0])
  {
    v10 |= 0x4000u;
    v17[1] = v10;
  }
  if (v15[1])
  {
    v11 |= 0x8000u;
    v17[0] = v11;
  }
  if (v15[0])
  {
    v11 |= 0x4000u;
    v17[0] = v11;
  }
  v12 = (_WORD *)[v5 addToken:69 extendedDataLength:8];
  if (v12)
  {
    _WORD *v12 = v7;
    v12[1] = v8;
    v12[2] = v10;
    v12[3] = v11;
  }
  BOOL v13 = v12 != 0;

  return v13;
}

void sub_238DE23A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addAreaOperandFromAreaExtendedData(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  id v5 = a1;
  *(void *)v20 = 0;
  *(void *)v21 = 0;
  *(_WORD *)v19 = 0;
  *(_WORD *)v18 = 0;
  *(_WORD *)BOOL v17 = 0;
  *(_WORD *)v16 = 0;
  extractDataFromPtgAreaBuffer(a3, &v21[1], &v17[1], v21, &v16[1], &v20[1], v17, v20, v16);
  int v7 = v20[0];
  int v6 = v20[1];
  int v8 = v21[0];
  LODWORD(a3) = v21[1];
  extractDataFromPtgAreaBuffer(a2, &v21[1], &v19[1], v21, &v18[1], &v20[1], v19, v20, v18);
  v24.origin.int x = (double)v6;
  v24.origin.int y = (double)(int)a3;
  v24.size.width = (double)(v7 - v6);
  v24.size.height = (double)(v8 - (int)a3);
  v22.origin.int x = (double)v20[1];
  v22.origin.int y = (double)v21[1];
  v22.size.width = (double)(v20[0] - v20[1]);
  v22.size.height = (double)(v21[0] - v21[1]);
  CGRect v23 = CGRectUnion(v22, v24);
  int x = (int)v23.origin.x;
  int v10 = (int)(v23.size.width + (double)(int)v23.origin.x);
  v20[0] = v10;
  v20[1] = (int)v23.origin.x;
  int y = (int)v23.origin.y;
  int v12 = (int)(v23.size.height + (double)(int)v23.origin.y);
  v21[0] = v12;
  v21[1] = (int)v23.origin.y;
  if (v19[1])
  {
    x |= 0x8000u;
    v20[1] = x;
  }
  if (v19[0])
  {
    x |= 0x4000u;
    v20[1] = x;
  }
  if (v16[1])
  {
    v10 |= 0x8000u;
    v20[0] = v10;
  }
  if (v16[0])
  {
    v10 |= 0x4000u;
    v20[0] = v10;
  }
  BOOL v13 = (_WORD *)[v5 addToken:69 extendedDataLength:8];
  if (v13)
  {
    _WORD *v13 = y;
    v13[1] = v12;
    v13[2] = x;
    v13[3] = v10;
  }
  BOOL v14 = v13 != 0;

  return v14;
}

void sub_238DE2544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addArea3DOperandFromRef3DExtendedData(void *a1, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  id v7 = a1;
  *(void *)CGRect v22 = 0;
  *(void *)CGRect v23 = 0;
  *(_WORD *)v21 = 0;
  *(_WORD *)v20 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  extractDataFromPtgRef3DBuffer(a4, &v18, v23, &v20[1], v22, v20);
  extractDataFromPtgRef3DBuffer(a3, &v19, &v23[1], &v21[1], &v22[1], v21);
  if (v19 != v18)
  {
    int v8 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL addArea3DOperandFromRef3DExtendedData(__strong id<EDFormulaBuilding>, XL_ARGUMENT_REFERENCE_TYPE, ChUINT2 *, ChUINT2 *)");
    int v9 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDFormulaBuilding.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:417 isFatal:0 description:"sheets are different only the first one will be used"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  int v10 = v23[0];
  __int16 v11 = v23[1];
  if (v23[1] <= v23[0])
  {
    __int16 v12 = v23[0];
    LOWORD(v10) = v23[1];
  }
  else
  {
    v23[0] = v23[1];
    v23[1] = v10;
    __int16 v12 = v11;
  }
  int v13 = v22[0];
  int v14 = v22[1];
  if (v22[1] <= v22[0])
  {
    int v15 = v22[0];
    int v13 = v22[1];
  }
  else
  {
    v22[0] = v22[1];
    v22[1] = v13;
    int v15 = v14;
  }
  if (v21[1])
  {
    v13 |= 0x8000u;
    v22[1] = v13;
  }
  if (v21[0])
  {
    v13 |= 0x4000u;
    v22[1] = v13;
  }
  if (v20[1])
  {
    v15 |= 0x8000u;
    v22[0] = v15;
  }
  if (v20[0])
  {
    v15 |= 0x4000u;
    v22[0] = v15;
  }
  BOOL v16 = addArea3DOperandWithSheet(v7, a2, v19, v10, v12, v13, v15);

  return v16;
}

void sub_238DE2710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL addArea3DOperandFromArea3DExtendedData(void *a1, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  id v23 = a1;
  *(void *)CGRect v24 = 0;
  *(void *)v29 = 0;
  *(void *)v30 = 0;
  *(_WORD *)v28 = 0;
  *(_WORD *)v27 = 0;
  *(_WORD *)v26 = 0;
  *(_WORD *)v25 = 0;
  extractDataFromPtgArea3DBuffer(a4, v24, &v30[1], &v26[1], v30, &v25[1], &v29[1], v26, v29, v25);
  int v8 = v29[0];
  int v7 = v29[1];
  int v9 = v30[1];
  int v21 = a2;
  int v22 = v30[0];
  extractDataFromPtgArea3DBuffer(a3, &v24[1], &v30[1], &v28[1], v30, &v27[1], &v29[1], v28, v29, v27);
  int v11 = v29[0];
  int v10 = v29[1];
  int v12 = v30[0];
  int v13 = v30[1];
  if (v24[1] != v24[0])
  {
    int v14 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL addArea3DOperandFromArea3DExtendedData(__strong id<EDFormulaBuilding>, XL_ARGUMENT_REFERENCE_TYPE, ChUINT2 *, ChUINT2 *)");
    int v15 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDFormulaBuilding.mm"];
    +[OITSUAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:455 isFatal:0 description:"sheets are different only the first one will be used"];

    +[OITSUAssertionHandler logBacktraceThrottled];
  }
  v33.origin.int x = (double)v7;
  v33.origin.int y = (double)v9;
  v33.size.width = (double)(v8 - v7);
  v33.size.height = (double)(v22 - v9);
  v31.origin.int x = (double)v10;
  v31.origin.int y = (double)v13;
  v31.size.width = (double)(v11 - v10);
  v31.size.height = (double)(v12 - v13);
  CGRect v32 = CGRectUnion(v31, v33);
  int x = (int)v32.origin.x;
  int v17 = (int)(v32.size.width + (double)(int)v32.origin.x);
  v29[0] = v17;
  v29[1] = (int)v32.origin.x;
  int v18 = (int)(v32.size.height + (double)(int)v32.origin.y);
  v30[0] = v18;
  v30[1] = (int)v32.origin.y;
  if (v28[1])
  {
    x |= 0x8000u;
    v29[1] = x;
  }
  if (v28[0])
  {
    x |= 0x4000u;
    v29[1] = x;
  }
  if (v25[1])
  {
    v17 |= 0x8000u;
    v29[0] = v17;
  }
  if (v25[0])
  {
    v17 |= 0x4000u;
    v29[0] = v17;
  }
  BOOL v19 = addArea3DOperandWithSheet(v23, v21, v24[1], (int)v32.origin.y, v18, x, v17);

  return v19;
}

void sub_238DE2960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238DE2DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE2EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE2F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE3250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE33AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE34C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE35CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE39C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE3B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE3F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE3FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE41CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE4364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE45CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,unsigned long>,std::__map_value_compare<long,std::__value_type<long,unsigned long>,std::less<long>,true>,std::allocator<std::__value_type<long,unsigned long>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_238DE4948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE4AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE4CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE4F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE4FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE504C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE5264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE544C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE56CC(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238DE5810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238DE5938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238DE5A30(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238DE5B00(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v2, 0x10B1C4028190DF1);

  _Unwind_Resume(a1);
}

void non-virtual thunk to'XlChartScatterPlot::~XlChartScatterPlot(XlChartScatterPlot *this)
{
  int v1 = (XlChartScatterPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartScatterPlot::~XlChartScatterPlot((XlChartScatterPlot *)((char *)this - 144));
}

void sub_238DE5C6C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void EDBuildablePtg::EDBuildablePtg(EDBuildablePtg *this, const EDBuildablePtg *a2)
{
  p_var1 = &this->var1;
  XlPtg::XlPtg((XlPtg *)&this->var1);
  this->var0 = (void **)&unk_26EBDB568;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var7 = 0u;
  this->var9 = 0;
  *(void *)&this->var10 = 0;
  if (a2)
  {
    XlPtg::operator=((uint64_t)p_var1, (uint64_t)&a2->var1);
    long long v5 = *(_OWORD *)&a2->var5;
    long long v6 = *(_OWORD *)&a2->var7;
    *(_OWORD *)((char *)&this->var8 + 4) = *(_OWORD *)((char *)&a2->var8 + 4);
    *(_OWORD *)&this->var5 = v5;
    *(_OWORD *)&this->var7 = v6;
    this->var9 = a2->var9;
    this->var10 = a2->var10;
    *(_DWORD *)&this->var11 = *(_DWORD *)&a2->var11;
  }
}

void sub_238DE5D40(_Unwind_Exception *a1)
{
  XlPtg::~XlPtg(v1);
  _Unwind_Resume(a1);
}

uint64_t EDBuildablePtg::EDBuildablePtg(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26EBDB568;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 68) = 0;
  return a1;
}

uint64_t EDBuildablePtg::EDBuildablePtg(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = &unk_26EBDB568;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 68) = 0;
  return a1;
}

void EDBuildablePtg::~EDBuildablePtg(EDBuildablePtg *this)
{
  this->var0 = (void **)&unk_26EBDB568;
  if (*(_OWORD *)&this->var6 != 0)
  {
    var6 = this;
    if (this->var7) {
      goto LABEL_4;
    }
    while (var6->var6)
    {
      do
      {
        do
        {
LABEL_4:
          id v3 = var6;
          var6 = var6->var7;
        }
        while (var6);
        if (v3->var6) {
          var6 = v3->var6;
        }
        else {
          var6 = v3;
        }
      }
      while (var6->var7);
    }
    for (uint64_t i = var6->var8; ; uint64_t i = i->var8)
    {
      var5 = var6->var5;
      if (!((unint64_t)i | (unint64_t)var5)) {
        break;
      }
      EDBuildablePtg::setSibling(var6, 0);
      var6->var6 = 0;
      (*((void (**)(EDBuildablePtg *))var6->var0 + 1))(var6);
      if (i)
      {
        if (i->var6)
        {
          uint64_t i = i->var6;
          while (i->var7 || i->var6)
          {
            do
            {
              long long v6 = i;
              uint64_t i = i->var7;
            }
            while (i);
            if (v6->var6) {
              uint64_t i = v6->var6;
            }
            else {
              uint64_t i = v6;
            }
          }
        }
      }
      else
      {
        uint64_t i = var5;
        if (!var5) {
          break;
        }
      }
      var6 = i;
    }
  }
  var8 = this->var8;
  if (var8 && var8->var7 == this) {
    var8->var7 = 0;
  }
  XlPtg::~XlPtg((XlPtg *)&this->var1);
}

{
  uint64_t vars8;

  EDBuildablePtg::~EDBuildablePtg(this);
  JUMPOUT(0x23EC997B0);
}

EDBuildablePtg *EDBuildablePtg::setSibling(EDBuildablePtg *this, EDBuildablePtg *a2)
{
  id v3 = this;
  var7 = this->var7;
  if (var7)
  {
    if (var7->var8 != this)
    {
      long long v5 = [NSString stringWithUTF8String:"void EDBuildablePtg::setSibling(EDBuildablePtg *)"];
      long long v6 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDBuildablePtg.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:141 isFatal:0 description:"EDBuildablePtg back pointer corrupt; this will likely crash soon."];

      this = (EDBuildablePtg *)+[OITSUAssertionHandler logBacktraceThrottled];
      var7 = v3->var7;
    }
    var7->var8 = 0;
  }
  v3->var7 = a2;
  if (a2)
  {
    if (a2->var8)
    {
      int v7 = [NSString stringWithUTF8String:"void EDBuildablePtg::setSibling(EDBuildablePtg *)"];
      uint64_t v8 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDBuildablePtg.mm"];
      +[OITSUAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:146 isFatal:0 description:"EDBuildablePtg already has sibling; this will likely crash soon."];

      this = (EDBuildablePtg *)+[OITSUAssertionHandler logBacktraceThrottled];
      a2 = v3->var7;
    }
    a2->var8 = v3;
  }
  return this;
}

void sub_238DE60AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

EDBuildablePtg *EDBuildablePtg::setChild(EDBuildablePtg *this, EDBuildablePtg *a2)
{
  if (a2) {
    a2->var5 = this;
  }
  this->var6 = a2;
  return this;
}

EDBuildablePtg *EDBuildablePtg::sibling(EDBuildablePtg *this)
{
  return this->var7;
}

EDBuildablePtg *EDBuildablePtg::resetSibling(EDBuildablePtg *this)
{
  this->var7 = 0;
  return this;
}

EDBuildablePtg *EDBuildablePtg::resetParent(EDBuildablePtg *this)
{
  this->var5 = 0;
  return this;
}

EDBuildablePtg *EDBuildablePtg::resetPreviousSibling(EDBuildablePtg *this)
{
  this->var8 = 0;
  return this;
}

void EDBuildablePtg::addToEDFormula(EDBuildablePtg *this, EDFormula *a2)
{
  long long v6 = a2;
  if (this)
  {
    while (this->var7 || this->var6)
    {
      do
      {
        id v3 = this;
        this = this->var7;
      }
      while (this);
      if (v3->var6) {
        this = v3->var6;
      }
      else {
        this = v3;
      }
      if (!this) {
        goto LABEL_20;
      }
    }
    do
    {
      while (1)
      {
        (*((void (**)(EDBuildablePtg *, EDFormula *))this->var0 + 2))(this, v6);
        var8 = this->var8;
        if (!var8) {
          break;
        }
        this = this->var8;
        if (var8->var6)
        {
          this = var8->var6;
          while (this->var7 || this->var6)
          {
            do
            {
              long long v5 = this;
              this = this->var7;
            }
            while (this);
            if (v5->var6) {
              this = v5->var6;
            }
            else {
              this = v5;
            }
          }
        }
      }
      this = this->var5;
    }
    while (this);
  }
LABEL_20:
}

void sub_238DE6234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL EDBuildablePtg::addTokenToEDFormula(EDBuildablePtg *this, EDFormula *a2)
{
  return [(EDFormula *)a2 copyTokenFromXlPtg:&this->var1];
}

BOOL EDBuildablePtg::isDuration(EDBuildablePtg *this)
{
  return this->var9;
}

BOOL EDBuildablePtg::isConstant(EDBuildablePtg *this)
{
  return this->var2 == 23;
}

EDBuildablePtg *EDBuildablePtg::setIsDuration(EDBuildablePtg *this, BOOL a2)
{
  this->var9 = a2;
  return this;
}

BOOL EDBuildablePtg::isSpanningRef(EDBuildablePtg *this)
{
  return this->var10 != 0;
}

uint64_t EDBuildablePtg::spanningRef(EDBuildablePtg *this)
{
  return this->var10;
}

uint64_t EDBuildablePtg::setIsSpanningRef(uint64_t result, int a2, __int16 a3, __int16 a4)
{
  *(_DWORD *)(result + 68) = a2;
  *(_WORD *)(result + 72) = a3;
  *(_WORD *)(result + 74) = a4;
  return result;
}

uint64_t EDBuildablePtg::minSpan(EDBuildablePtg *this)
{
  return this->var11;
}

uint64_t EDBuildablePtg::maxSpan(EDBuildablePtg *this)
{
  return this->var12;
}

EDBuildablePtg *EDBuildablePtg::unionize(EDBuildablePtg *this, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 >= 3)
  {
    unint64_t v3 = *a2;
    while (1)
    {
      id v4 = this;
      if (--v3 < 3) {
        break;
      }
      this = this->var7;
      if (!this) {
        goto LABEL_7;
      }
    }
    unint64_t v3 = 2;
LABEL_7:
    *a2 = v3;
    if (v3 < v2)
    {
      if (v4)
      {
        EDBuildablePtg::setSibling(v4, 0);
        operator new();
      }
    }
  }
  return this;
}

void sub_238DE63B4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

EDBuildablePtg *EDBuildablePtg::intersect(EDBuildablePtg *this, unint64_t *a2)
{
  unint64_t v3 = this;
  unint64_t v4 = *a2 - 1;
  *a2 = v4;
  if (v4 >= 3)
  {
    var7 = this->var7;
    if (!var7) {
      goto LABEL_5;
    }
    this = (EDBuildablePtg *)EDBuildablePtg::intersect(var7, a2);
    unint64_t v4 = *a2;
  }
  if (v4 >= 2)
  {
LABEL_5:
    EDBuildablePtg::setSibling(v3, 0);
    operator new();
  }
  *a2 = v4 + 1;
  return this;
}

void sub_238DE64BC(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40D583828BLL);
  _Unwind_Resume(a1);
}

void EDBuildableArrayPtg::EDBuildableArrayPtg(EDBuildableArrayPtg *this, int a2)
{
  *((unsigned char *)this + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(void *)((char *)this + 68) = 0;
  *(void *)this = &unk_26EBDB590;
  *((_DWORD *)this + 19) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 21) = a2;
  *((void *)this + 11) = 0;
}

void EDBuildableArrayPtg::~EDBuildableArrayPtg(EDBuildablePtg *this)
{
  this->var0 = (void **)&unk_26EBDB590;
  var1 = this[1].var1;
  if (var1) {
    (*(void (**)(char *))(*(void *)var1 + 8))(var1);
  }
  EDBuildablePtg::~EDBuildablePtg(this);
}

{
  uint64_t vars8;

  EDBuildableArrayPtg::~EDBuildableArrayPtg(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t EDBuildableArrayPtg::setColRow(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 76) = a2;
  *(_DWORD *)(this + 80) = a3;
  return this;
}

uint64_t EDBuildableArrayPtg::elements(EDBuildableArrayPtg *this)
{
  return *((void *)this + 11);
}

uint64_t EDBuildableArrayPtg::setElements(uint64_t this, EDBuildablePtg *a2)
{
  *(void *)(this + 88) = a2;
  return this;
}

void EDBuildableArrayPtg::addPtgToArray(EDBuildableArrayPtg *this, EDFormula *a2, EDBuildablePtg *a3)
{
  int v3 = (int)a3;
  int v13 = this;
  LastExtendedData = XlPtg::getLastExtendedData((XlPtg *)&a2->mPackedData);
  unsigned int LastExtendedDataLength = XlPtg::getLastExtendedDataLength((XlPtg *)&a2->mPackedData);
  if (LODWORD(a2[1].super.isa) == 30)
  {
    addNumberToArray(v13, v3, (double)*(__int16 *)LastExtendedData);
    int v7 = v13;
  }
  else
  {
    unsigned int v8 = LastExtendedDataLength;
    int v9 = (char *)[(EDBuildableArrayPtg *)v13 setExtendedDataForLastTokenAtIndex:(v3 + 2) length:LastExtendedDataLength + 2];
    int isa = (int)a2[1].super.isa;
    if (isa == 31) {
      char v11 = 1;
    }
    else {
      char v11 = 16;
    }
    if (isa == 29) {
      char v11 = 4;
    }
    if (isa == 23) {
      char v12 = 2;
    }
    else {
      char v12 = v11;
    }
    *int v9 = v12;
    memcpy(v9 + 2, LastExtendedData, v8);
    int v7 = v13;
  }
}

void sub_238DE66FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void EDBuildableArrayPtg::addTokenToEDFormula(EDBuildableArrayPtg *this, EDFormula *a2)
{
  int v9 = a2;
  [(EDFormula *)v9 addToken:*((unsigned int *)this + 4) extendedDataLength:8 extendedDataCount:(*((_DWORD *)this + 21) + 2)];
  int v3 = [(EDFormula *)v9 setExtendedDataForLastTokenAtIndex:0 length:4];
  unint64_t v4 = [(EDFormula *)v9 setExtendedDataForLastTokenAtIndex:1 length:4];
  *(_DWORD *)int v3 = *((_DWORD *)this + 19);
  *(_DWORD *)unint64_t v4 = *((_DWORD *)this + 20);
  if (*((_DWORD *)this + 21))
  {
    int isa = (EDFormula *)*((void *)this + 11);
    if (isa)
    {
      unsigned int v6 = 1;
      do
      {
        EDBuildableArrayPtg::addPtgToArray((EDBuildableArrayPtg *)v9, isa, (EDBuildablePtg *)(v6 - 1));
        int isa = (EDFormula *)isa[3].super.isa;
      }
      while (v6++ < *((_DWORD *)this + 21) && isa != 0);
    }
  }
}

void sub_238DE67EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

XlChart3D *XlChart3D::setPerspectiveFlag(XlChart3D *this, __int16 a2)
{
  this->var8 = this->var8 & 0xFFFE | a2;
  return this;
}

XlChart3D *XlChart3D::setClusterFlag(XlChart3D *this, int a2)
{
  if (a2) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 0;
  }
  this->var8 = this->var8 & 0xFFFD | v2;
  return this;
}

XlChart3D *XlChart3D::set3DScalingFlag(XlChart3D *this, int a2)
{
  if (a2) {
    __int16 v2 = 4;
  }
  else {
    __int16 v2 = 0;
  }
  this->var8 = this->var8 & 0xFFFB | v2;
  return this;
}

uint64_t XlChart3D::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1808))(a2, a1);
}

uint64_t XlChartAI::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1816))(a2, a1);
}

uint64_t XlChartAlRuns::takeRichTextRuns(uint64_t this, unsigned __int8 *a2, int a3, unsigned int a4)
{
  if (a3 != 4 * a4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  *(void *)(this + 16) = a2;
  *(_WORD *)(this + 24) = a4;
  return this;
}

uint64_t XlChartAlRuns::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1824))(a2, a1);
}

void XlChartArea::~XlChartArea(XlChartArea *this)
{
}

uint64_t XlChartArea::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1832))(a2, a1);
}

uint64_t XlChartAreaFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1840))(a2, a1);
}

uint64_t XlChartAttachedLabel::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1848))(a2, a1);
}

void XlChartAxCext::XlChartAxCext(XlChartAxCext *this)
{
  XlRecord::XlRecord(this, 4194, 18, 0);
  *(void *)uint64_t v1 = &unk_26EBDB7A8;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 32) = 239;
}

uint64_t XlChartAxCext::setAutoMinFlag(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFFFE | a2;
  return this;
}

uint64_t XlChartAxCext::setAutoMaxFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFFFD | v2;
  return this;
}

uint64_t XlChartAxCext::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1872))(a2, a1);
}

uint64_t XlChartAxis::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1864))(a2, a1);
}

uint64_t XlChartAxisLineFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1880))(a2, a1);
}

uint64_t XlChartAxisParent::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1888))(a2, a1);
}

void XlChartBar::~XlChartBar(XlChartBar *this)
{
}

uint64_t XlChartBar::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1896))(a2, a1);
}

void XlChartBopPop::XlChartBopPop(XlChartBopPop *this)
{
  XlRecord::XlRecord(this, 4193, 18, 0);
  void *v1 = &unk_26EBDB8E8;
  v1[2] = 0;
  v1[3] = 0;
  *(void *)((char *)v1 + 31) = 0;
}

void XlChartBopPop::~XlChartBopPop(XlChartBopPop *this)
{
}

uint64_t XlChartBopPop::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1912))(a2, a1);
}

void XlChartCatSerRange::XlChartCatSerRange(XlChartCatSerRange *this)
{
  XlRecord::XlRecord(this, 4128, 8, 0);
  void *v1 = &unk_26EBDB928;
  v1[2] = 0x1000100010000;
}

uint64_t XlChartCatSerRange::setBetweenFlag(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 22) = *(_WORD *)(this + 22) & 0xFFFE | a2;
  return this;
}

uint64_t XlChartCatSerRange::setMaxCrossFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 22) = *(_WORD *)(this + 22) & 0xFFFD | v2;
  return this;
}

uint64_t XlChartCatSerRange::setReverseFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 4;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 22) = *(_WORD *)(this + 22) & 0xFFFB | v2;
  return this;
}

uint64_t XlChartCatSerRange::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1928))(a2, a1);
}

uint64_t XlChartChart::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1936))(a2, a1);
}

uint64_t XlChartChartFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1944))(a2, a1);
}

uint64_t XlChartChartLine::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1952))(a2, a1);
}

void XlChartColSel::XlChartColSel(XlChartColSel *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBA28;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

void XlChartColSel::~XlChartColSel(XlChartColSel *this)
{
  *(void *)this = &unk_26EBDBA28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDBA28;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

void XlChartColSel::getSelectedColumnIndices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_WORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 24);
  if (*(_WORD *)(a1 + 24))
  {
    unint64_t v6 = 0;
    int v7 = (void *)(a2 + 16);
    unsigned int v8 = *(unsigned __int16 **)(a1 + 16);
    do
    {
      if (v6)
      {
        unsigned int v9 = v8[2 * v6];
        if (v9 <= v8[2 * (v6 - 1) + 1])
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 1005;
        }
      }
      else
      {
        unsigned int v9 = *v8;
      }
      if (v9 < v8[2 * v6 + 1])
      {
        do
        {
          if ((unint64_t)v2 >= *v7)
          {
            uint64_t v10 = *(_WORD **)a2;
            unint64_t v11 = (unint64_t)v2 - *(void *)a2;
            uint64_t v12 = (*v7 - *(void *)a2) >> 1;
            if (2 * (int)v12 <= (v11 >> 1) + 1) {
              unsigned int v13 = (v11 >> 1) + 1;
            }
            else {
              unsigned int v13 = 2 * v12;
            }
            if (v12 >= 0x7FFFFFFF) {
              uint64_t v14 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v14 = v13;
            }
            if (v14)
            {
              int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v7, v14);
              uint64_t v17 = v16;
              uint64_t v10 = *(_WORD **)a2;
              uint64_t v2 = *(_WORD **)(a2 + 8);
            }
            else
            {
              int v15 = 0;
              uint64_t v17 = 0;
            }
            int v18 = &v15[v11 & 0x1FFFFFFFELL];
            *(_WORD *)int v18 = v9;
            BOOL v19 = v18 + 2;
            while (v2 != v10)
            {
              __int16 v20 = *--v2;
              *((_WORD *)v18 - 1) = v20;
              v18 -= 2;
            }
            *(void *)a2 = v18;
            *(void *)(a2 + 8) = v19;
            *(void *)(a2 + 16) = &v15[2 * v17];
            if (v10) {
              operator delete(v10);
            }
            uint64_t v2 = v19;
          }
          else
          {
            *v2++ = v9;
          }
          *(void *)(a2 + 8) = v2;
          ++v9;
          unsigned int v8 = *(unsigned __int16 **)(a1 + 16);
        }
        while (v9 < v8[2 * v6 + 1]);
        unsigned int v3 = *(unsigned __int16 *)(a1 + 24);
      }
      ++v6;
    }
    while (v6 < v3);
  }
}

uint64_t XlChartColSel::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2344))(a2, a1);
}

uint64_t XlChartCustomLabel::takeSeparatorText(uint64_t this, XlString *a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t XlChartCustomLabel::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2336))(a2, a1);
}

void XlChartDat::XlChartDat(XlChartDat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBAA8;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartDat::~XlChartDat(XlChartDat *this)
{
}

uint64_t XlChartDat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1960))(a2, a1);
}

uint64_t XlChartDataFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1968))(a2, a1);
}

void XlChartDataProp::XlChartDataProp(XlChartDataProp *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDBB28;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartDataProp::~XlChartDataProp(XlChartDataProp *this)
{
}

uint64_t XlChartDataProp::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2368))(a2, a1);
}

uint64_t XlChartDefaultText::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1976))(a2, a1);
}

uint64_t XlChartDTLineFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2072))(a2, a1);
}

uint64_t XlChartFBI::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2000))(a2, a1);
}

uint64_t XlChartFontX::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2008))(a2, a1);
}

uint64_t XlChartFrame::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2016))(a2, a1);
}

uint64_t XlChartGelFrame::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2024))(a2, a1);
}

void XlChartiFmt::~XlChartiFmt(XlChartiFmt *this)
{
}

uint64_t XlChartiFmt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2032))(a2, a1);
}

uint64_t XlChartLegend::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2040))(a2, a1);
}

uint64_t XlChartLegendXn::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2048))(a2, a1);
}

void XlChartLine::~XlChartLine(XlChartLine *this)
{
}

uint64_t XlChartLine::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2056))(a2, a1);
}

uint64_t XlChartLineFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2064))(a2, a1);
}

uint64_t XlChartMarkerFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2080))(a2, a1);
}

uint64_t XlChartObjectLink::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2088))(a2, a1);
}

double XlChartPicF::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  return result;
}

uint64_t XlChartPicF::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2096))(a2, a1);
}

void XlChartPie::~XlChartPie(XlChartPie *this)
{
}

uint64_t XlChartPie::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2104))(a2, a1);
}

uint64_t XlChartPieFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2112))(a2, a1);
}

uint64_t XlChartPlotGrowth::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2144))(a2, a1);
}

uint64_t XlChartPos::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2152))(a2, a1);
}

void XlChartRadar::~XlChartRadar(XlChartRadar *this)
{
}

uint64_t XlChartRadar::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2160))(a2, a1);
}

void XlChartRadarArea::~XlChartRadarArea(XlChartRadarArea *this)
{
}

uint64_t XlChartRadarArea::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2168))(a2, a1);
}

void XlChartRowSel::XlChartRowSel(XlChartRowSel *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDC070;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

void XlChartRowSel::~XlChartRowSel(XlChartRowSel *this)
{
  *(void *)this = &unk_26EBDC070;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDC070;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartRowSel::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2352))(a2, a1);
}

void XlChartScatter::XlChartScatter(XlChartScatter *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDC0B0;
  v2[2] = 0x100000064;
}

void XlChartScatter::~XlChartScatter(XlChartScatter *this)
{
}

uint64_t XlChartScatter::setBubblesFlag(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = *(_WORD *)(this + 18) & 0xFFFE | a2;
  return this;
}

uint64_t XlChartScatter::setShowNegativeBubblesFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 18) = *(_WORD *)(this + 18) & 0xFFFD | v2;
  return this;
}

uint64_t XlChartScatter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2184))(a2, a1);
}

uint64_t XlChartSerAuxErrBar::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2192))(a2, a1);
}

void XlChartSerAuxTrend::~XlChartSerAuxTrend(XlChartSerAuxTrend *this)
{
}

uint64_t XlChartSerAuxTrend::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2200))(a2, a1);
}

uint64_t XlChartSerFmt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2208))(a2, a1);
}

uint64_t XlChartSeries::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2216))(a2, a1);
}

void *XlChartSeriesList::setCountOfSeriesNumbers(XlChartSeriesList *this, unsigned int a2)
{
  *((_WORD *)this + 12) = a2;
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    MEMORY[0x23EC99790](v3, 0x1000C80BDFB0063);
    a2 = *((unsigned __int16 *)this + 12);
  }
  *((void *)this + 2) = 0;
  double result = operator new[](2 * a2);
  *((void *)this + 2) = result;
  return result;
}

uint64_t XlChartSeriesList::setSeriesNumber(uint64_t this, unsigned int a2, __int16 a3)
{
  if (*(unsigned __int16 *)(this + 24) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_WORD *)(*(void *)(this + 16) + 2 * a2) = a3;
  return this;
}

uint64_t XlChartSeriesText::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2232))(a2, a1);
}

uint64_t XlChartSerParent::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2240))(a2, a1);
}

uint64_t XlChartSerToCrt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2248))(a2, a1);
}

void XlChartShape::~XlChartShape(XlChartShape *this)
{
}

uint64_t XlChartShape::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2256))(a2, a1);
}

uint64_t XlChartShtProps::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2264))(a2, a1);
}

uint64_t XlChartSiIndex::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2272))(a2, a1);
}

void XlChartSurface::~XlChartSurface(XlChartSurface *this)
{
}

uint64_t XlChartSurface::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2280))(a2, a1);
}

uint64_t XlChartText::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2288))(a2, a1);
}

uint64_t XlChartTick::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2296))(a2, a1);
}

void XlChartValueRange::XlChartValueRange(XlChartValueRange *this)
{
  XlRecord::XlRecord(this, 4127, 42, 0);
  *(void *)uint64_t v1 = &unk_26EBDC430;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(void *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 31;
}

uint64_t XlChartValueRange::setAutoMinFlag(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFFE | a2;
  return this;
}

uint64_t XlChartValueRange::setAutoMaxFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFFD | v2;
  return this;
}

uint64_t XlChartValueRange::setAutoMajorFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 4;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFFB | v2;
  return this;
}

uint64_t XlChartValueRange::setAutoMinorFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 8;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFF7 | v2;
  return this;
}

uint64_t XlChartValueRange::setAutoCrossFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 16;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFEF | v2;
  return this;
}

uint64_t XlChartValueRange::setLogScaleFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 32;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFDF | v2;
  return this;
}

uint64_t XlChartValueRange::setReverseFlag(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 64;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 56) = *(_WORD *)(this + 56) & 0xFFBF | v2;
  return this;
}

uint64_t XlChartValueRange::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2312))(a2, a1);
}

uint64_t XlChartPlotAxis::getPlotAxis(XlChartPlotAxis *this)
{
  return this->var1;
}

uint64_t XlChartPlotAxis::setPlotAxis(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t XlChartDataSeries::getParentSeriesIndex(XlChartDataSeries *this)
{
  return *((unsigned __int16 *)this + 9);
}

uint64_t XlChartDataSeries::setParentSeriesIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 18) = a2;
  return this;
}

void XlChartDropBarFormat::XlChartDropBarFormat(XlChartDropBarFormat *this)
{
  *(void *)this = &unk_26EBDC558;
  *((_DWORD *)this + 2) = 0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

void XlChartDropBarFormat::~XlChartDropBarFormat(XlChartDropBarFormat *this)
{
  *(void *)this = &unk_26EBDC558;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlChartDropBarFormat::~XlChartDropBarFormat(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t **std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void non-virtual thunk to'XlChartAreaPlot::~XlChartAreaPlot(XlChartAreaPlot *this)
{
  uint64_t v1 = (XlChartAreaPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartAreaPlot::~XlChartAreaPlot((XlChartAreaPlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartBarPlot::~XlChartBarPlot(XlChartBarPlot *this)
{
  uint64_t v1 = (XlChartBarPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartBarPlot::~XlChartBarPlot((XlChartBarPlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartLinePlot::~XlChartLinePlot(XlChartLinePlot *this)
{
  uint64_t v1 = (XlChartLinePlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartLinePlot::~XlChartLinePlot((XlChartLinePlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartPiePlot::~XlChartPiePlot(XlChartPiePlot *this)
{
  uint64_t v1 = (XlChartPiePlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartPiePlot::~XlChartPiePlot((XlChartPiePlot *)((char *)this - 144));
}

void XlChartPieSubPlot::XlChartPieSubPlot(XlChartPieSubPlot *this)
{
  XlChartPlot::XlChartPlot(this);
  XlChartBopPop::XlChartBopPop((XlChartBopPop *)(v2 + 144));
  *(void *)this = &unk_26EBDC9A8;
  *((void *)this + 18) = &unk_26EBDC9D0;
}

void sub_238DE86B8(_Unwind_Exception *a1)
{
  XlChartPlot::~XlChartPlot(v1);
  _Unwind_Resume(a1);
}

void XlChartPieSubPlot::~XlChartPieSubPlot(XlChartPieSubPlot *this)
{
  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
}

{
  uint64_t vars8;

  TSURectWithOriginAndSize((char *)this + 144);
  XlChartPlot::~XlChartPlot(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartPieSubPlot::getChartType(XlChartPieSubPlot *this)
{
  return 3;
}

void non-virtual thunk to'XlChartPieSubPlot::~XlChartPieSubPlot(XlChartPieSubPlot *this)
{
  uint64_t v1 = (XlChartPieSubPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartPieSubPlot::~XlChartPieSubPlot((XlChartPieSubPlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartRadarAreaPlot::~XlChartRadarAreaPlot(XlChartRadarAreaPlot *this)
{
  uint64_t v1 = (XlChartRadarAreaPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartRadarAreaPlot::~XlChartRadarAreaPlot((XlChartRadarAreaPlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartRadarPlot::~XlChartRadarPlot(XlChartRadarPlot *this)
{
  uint64_t v1 = (XlChartRadarPlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartRadarPlot::~XlChartRadarPlot((XlChartRadarPlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartSurfacePlot::~XlChartSurfacePlot(XlChartSurfacePlot *this)
{
  uint64_t v1 = (XlChartSurfacePlot *)((char *)this - 144);
  TSURectWithOriginAndSize(this);
  XlChartPlot::~XlChartPlot(v1);
}

{
  XlChartSurfacePlot::~XlChartSurfacePlot((XlChartSurfacePlot *)((char *)this - 144));
}

void non-virtual thunk to'XlChartTrendLine::~XlChartTrendLine(XlChartTrendLine *this)
{
  uint64_t v1 = (XlChartTrendLine *)((char *)this - 200);
  TSURectWithOriginAndSize(this);
  XlChartDataSeries::~XlChartDataSeries(v1);
}

{
  XlChartTrendLine::~XlChartTrendLine((XlChartTrendLine *)((char *)this - 200));
}

void XlChartDataTable::~XlChartDataTable(XlChartTextFrame *this)
{
  XlChartTextFrame::~XlChartTextFrame(this);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'XlChartParent::~XlChartParent(XlChartParent *this)
{
}

{
  uint64_t vars8;

  XlChartParent::~XlChartParent((XlChartParent *)((char *)this - 88));
  JUMPOUT(0x23EC997B0);
}

XlChartPicF *XlChartPlotAxis::takePictureFormat(XlChartPlotAxis *this, XlChartPicF *a2)
{
  double result = this->var8;
  if (result) {
    double result = (XlChartPicF *)(*((uint64_t (**)(XlChartPicF *))result->var0 + 1))(result);
  }
  this->var8 = a2;
  return result;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartBopPop *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 38) = (*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) == 1;
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartDat *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(uint64_t a1, XlChartGelFrame *a2)
{
  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 12, 1);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  if (v4)
  {
    unsigned int v8 = *((_DWORD *)a2 + 2) - 20;
    if (v4 != v8)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    long long v5 = operator new[](v4);
    *(void *)(a1 + 24) = v5;
    (*(void (**)(void, void *, unsigned int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v5, &v8);
    XlChartGelFrame::setBinaryData(a2, *(unsigned __int8 **)(a1 + 24), v8);
    *(void *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  unsigned int v4;
  void *v5;
  _DWORD *exception;
  unsigned int v8;

  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 12, 1);
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 2, 1);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  if (v4)
  {
    unsigned int v8 = *((_DWORD *)a2 + 2) - 24;
    if (v4 != v8)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    long long v5 = operator new[](v4);
    *(void *)(a1 + 24) = v5;
    (*(void (**)(void, void *, unsigned int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v5, &v8);
    XlChartGelFrame::setBinaryData(a2, *(unsigned __int8 **)(a1 + 24), v8);
    *(void *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  unsigned int v4;
  void *v5;
  _DWORD *exception;
  unsigned int v8;

  XlParserVisitor::beginRead((XlParserVisitor *)a1);
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 12, 1);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  if (v4)
  {
    unsigned int v8 = *((_DWORD *)a2 + 2) - 20;
    if (v4 != v8)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    long long v5 = operator new[](v4);
    *(void *)(a1 + 24) = v5;
    (*(void (**)(void, void *, unsigned int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v5, &v8);
    XlChartGelFrame::setBinaryData(a2, *(unsigned __int8 **)(a1 + 24), v8);
    *(void *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartSeriesList *a2)
{
  XlParserVisitor::beginRead(this);
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  XlChartSeriesList::setCountOfSeriesNumbers(a2, v4);
  if (*((_WORD *)a2 + 12))
  {
    int v5 = 0;
    do
    {
      __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      XlChartSeriesList::setSeriesNumber((uint64_t)a2, (unsigned __int16)v5++, v6);
    }
    while (*((unsigned __int16 *)a2 + 12) > (unsigned __int16)v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartColSel *a2)
{
  XlParserVisitor::beginRead(this);
  size_t v4 = *((unsigned int *)a2 + 2);
  uint64_t v5 = (unsigned __int16)(v4 >> 2);
  if ((unsigned __int16)(v4 >> 2))
  {
    *((_WORD *)a2 + 12) = v4 >> 2;
    if (*((void *)this + 3))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    uint64_t v6 = 0;
    *((void *)this + 3) = operator new[](v4);
    uint64_t v7 = 4 * v5;
    do
    {
      unsigned int v8 = (_WORD *)(*((void *)this + 3) + v6);
      *unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      v8[1] = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      v6 += 4;
    }
    while (v7 != v6);
    *((void *)a2 + 2) = *((void *)this + 3);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartRowSel *a2)
{
  XlParserVisitor::beginRead(this);
  size_t v4 = *((unsigned int *)a2 + 2);
  uint64_t v5 = (unsigned __int16)(v4 >> 2);
  if ((unsigned __int16)(v4 >> 2))
  {
    *((_WORD *)a2 + 12) = v4 >> 2;
    if (*((void *)this + 3))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 3002;
    }
    uint64_t v6 = 0;
    *((void *)this + 3) = operator new[](v4);
    uint64_t v7 = 4 * v5;
    do
    {
      unsigned int v8 = (_WORD *)(*((void *)this + 3) + v6);
      *unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      v8[1] = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      v6 += 4;
    }
    while (v7 != v6);
    *((void *)a2 + 2) = *((void *)this + 3);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartDataProp *a2)
{
  XlParserVisitor::beginRead(this);
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void non-virtual thunk to'XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this)
{
  OcReader::~OcReader((OcReader *)((char *)this + 1992));
}

{
  XlChartBinaryReader::~XlChartBinaryReader((XlChartBinaryReader *)((char *)this - 8));
}

{
  XlChartBinaryReader::~XlChartBinaryReader((XlChartBinaryReader *)((char *)this - 16));
}

void non-virtual thunk to'XlChartBinaryReader::~XlChartBinaryReader(OcReader *this)
{
  OcReader::~OcReader(this + 124);
}

void virtual thunk to'XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this)
{
  uint64_t v2 = v1 + 125;
  OcReader::~OcReader(v2);
}

{
  XlChartBinaryReader::~XlChartBinaryReader((XlChartBinaryReader *)((char *)this + *(void *)(*(void *)this - 24)));
}

int *XlChartBinaryReader::read(int *this, XlChartDataTable *a2)
{
  if (this[401] >= 1)
  {
    uint64_t v3 = (XlChartBinaryReader *)this;
    size_t v4 = (XlHeader *)operator new(8uLL);
    XlHeader::XlHeader(v4);
    uint64_t v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)v3 + 624))(v3);
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, *((unsigned int *)v3 + 401), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v3 + 167), v4, *((unsigned char *)v3 + 444));
    uint64_t v6 = (XlChartDat *)operator new(0x18uLL);
    XlChartDat::XlChartDat(v6, v4);
    (*(void (**)(void, XlChartDat *))(**((void **)v3 + 167) + 1960))(*((void *)v3 + 167), v6);
    *((_WORD *)a2 + 119) = *((_WORD *)v6 + 8);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v3 + 167), v4, *((unsigned char *)v3 + 444));
    if (v4->var1 != 4147) {
      goto LABEL_8;
    }
    while (XlChartBinaryReader::nextSibling(v3, v4))
    {
      if (v4->var1 == 4117)
      {
        int v7 = *((_DWORD *)v3 + 403);
        uint64_t v8 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)v3 + 624))(v3);
        *((_DWORD *)v3 + 403) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
        (*(void (**)(XlChartBinaryReader *, XlChartDataTable *))(*(void *)v3 + 768))(v3, a2);
        *((_DWORD *)v3 + 403) = v7;
      }
    }
    if (v6) {
LABEL_8:
    }
      (*(void (**)(XlChartDat *))(*(void *)v6 + 8))(v6);
    JUMPOUT(0x23EC997B0);
  }
  return this;
}

void sub_238DE9D9C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::read(XlChartBinaryReader *this, uint64_t a2, XlChartDataSeries **a3)
{
  return (*(uint64_t (**)(XlChartBinaryReader *, uint64_t, XlChartDataSeries **, void))(*(void *)this
                                                                                                 + 736))(this, a2, a3, 0);
}

void XlChartTextFrame::pushTextRun(void *a1, _DWORD *a2)
{
  unint64_t v6 = a1[20];
  uint64_t v4 = (uint64_t)(a1 + 20);
  unint64_t v5 = v6;
  int v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[18];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 2;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 2) + 1) {
      unsigned int v12 = (v10 >> 2) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x3FFFFFFFCLL];
    int v18 = &v14[4 * v16];
    *(_DWORD *)uint64_t v17 = *a2;
    uint64_t v8 = v17 + 4;
    __int16 v20 = (char *)a1[18];
    BOOL v19 = (char *)a1[19];
    if (v19 != v20)
    {
      do
      {
        int v21 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v17 - 1) = v21;
        v17 -= 4;
      }
      while (v19 != v20);
      BOOL v19 = (char *)a1[18];
    }
    a1[18] = v17;
    a1[19] = v8;
    a1[20] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *int v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[19] = v8;
}

void XlChartDataSeries::addCustomFormat(XlChartDataSeries *this, int a2)
{
  uint64_t v4 = (char *)this + 112;
  unint64_t v5 = *((void *)this + 14);
  unint64_t v6 = (char *)*((void *)this + 13);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)*((void *)this + 12);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 2;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      uint64_t v8 = (char *)*((void *)this + 12);
      unint64_t v6 = (char *)*((void *)this + 13);
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v9 & 0x3FFFFFFFCLL];
    int v18 = &v14[4 * v16];
    *(_DWORD *)uint64_t v17 = a2;
    int v7 = v17 + 4;
    while (v6 != v8)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *((void *)this + 12) = v17;
    *((void *)this + 13) = v7;
    *((void *)this + 14) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v6 = a2;
    int v7 = v6 + 4;
  }
  *((void *)this + 13) = v7;
}

void XlChartDataSeries::addCustomLabel(XlChartDataSeries *this, int a2)
{
  uint64_t v4 = (char *)this + 136;
  unint64_t v5 = *((void *)this + 17);
  unint64_t v6 = (char *)*((void *)this + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)*((void *)this + 15);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 2;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      uint64_t v8 = (char *)*((void *)this + 15);
      unint64_t v6 = (char *)*((void *)this + 16);
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v9 & 0x3FFFFFFFCLL];
    int v18 = &v14[4 * v16];
    *(_DWORD *)uint64_t v17 = a2;
    int v7 = v17 + 4;
    while (v6 != v8)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *((void *)this + 15) = v17;
    *((void *)this + 16) = v7;
    *((void *)this + 17) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v6 = a2;
    int v7 = v6 + 4;
  }
  *((void *)this + 16) = v7;
}

uint64_t XlChartBinaryReader::read(XlChartBinaryReader *this, XlChartSeriesFormat *a2)
{
  unsigned int var9_low = LOWORD(a2->var9);
  p_unsigned int var9_low = &var9_low;
  uint64_t v4 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 235, &var9_low, (uint64_t)&std::piecewise_construct, &p_var9_low)+ 8);
  uint64_t v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(void *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v4, 0);
  unint64_t v6 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v6);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v6, *((unsigned char *)this + 444));
  int v7 = (char *)operator new(0x18uLL);
  XlChartDataFormat::XlChartDataFormat((XlChartDataFormat *)v7, v6);
  (*(void (**)(void, char *))(**((void **)this + 167) + 1968))(*((void *)this + 167), v7);
  a2->var23 = XlChartCatSerRange::isBetween((XlChartCatSerRange *)v7);
  HIDWORD(v8) = *(_DWORD *)(v7 + 18);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)&a2->var11 = v8 >> 16;
  XlChartBinaryReader::mapSeriesFormat(this, a2);
  (*(void (**)(char *))(*(void *)v7 + 8))(v7);
  return MEMORY[0x23EC997B0](v6, 0x1000C4087442A64);
}

void sub_238DEA388(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4087442A64);
  }
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::mapMSGraphIndex(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  unint64_t v4 = a3[1] - *a3;
  if ((v4 & 0x1FFFFFFFELL) != 0)
  {
    uint64_t v5 = (v4 >> 1) - 1;
    unsigned int v6 = (unsigned __int16)((v4 >> 1) - 1) >> 1;
    unsigned int v7 = *(unsigned __int16 *)(v3 + 2 * v6);
    if (v7 != a2)
    {
      int v8 = 0;
      int v9 = 0;
      do
      {
        if (v6 == v8)
        {
          uint64_t v10 = v5;
          if ((unsigned __int16)v5 == (unsigned __int16)v9) {
            goto LABEL_15;
          }
        }
        else
        {
          if (v7 >= a2) {
            uint64_t v10 = v6;
          }
          else {
            uint64_t v10 = v5;
          }
          if (v7 >= a2) {
            LODWORD(v5) = v9;
          }
          else {
            LODWORD(v5) = v6;
          }
        }
        int v9 = v5;
        int v8 = (unsigned __int16)v5;
        unsigned int v6 = ((unsigned __int16)v10 + (unsigned __int16)v5) >> 1;
        unsigned int v7 = *(unsigned __int16 *)(v3 + 2 * v6);
        uint64_t v5 = v10;
      }
      while (v7 != a2);
    }
  }
  else
  {
LABEL_15:
    LOWORD(v6) = -1;
  }
  return (__int16)v6;
}

void non-virtual thunk to'XlChartBinaryReader::read(XlChartBinaryReader *this, XlEshRoot *a2)
{
}

uint64_t OcBinaryReader::seekToEnd(OcBinaryReader *this, const EshRoot *a2)
{
  uint64_t v3 = (*((uint64_t (**)(OcBinaryReader *))this->var0 + 14))(this);
  unint64_t v4 = *(uint64_t (**)(uint64_t, const EshRoot *))(*(void *)v3 + 80);
  return v4(v3, a2);
}

uint64_t XlBinaryReader::getEshObjectFactory(XlBinaryReader *this)
{
  return *(void *)((char *)this + *(void *)(*(void *)this - 24) + 8);
}

uint64_t XlBinaryReader::handleChartSubstream(XlBinaryReader *this)
{
  return 0;
}

SsrwOOStorage **virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, OcCustomProperties *a2)
{
  return OcBinaryReader::readCustomProperties((OcBinaryReader *)((char *)this + *(void *)(*(void *)this - 64)), a2);
}

uint64_t virtual thunk to'XlBinaryReader::read(void *a1)
{
  return TSURectWithOriginAndSize((char *)a1 + *(void *)(*a1 - 72));
}

uint64_t XlChartPivotTableReference::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2128))(a2, a1);
}

uint64_t XlChartPivotChartAppearance::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2120))(a2, a1);
}

uint64_t XlChartAxisAlignment::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2328))(a2, a1);
}

void XlChartEnteredText::getNumber(XlChartEnteredText *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 3001;
}

uint64_t XlChartEnteredNumber::isText(XlChartEnteredNumber *this)
{
  return 0;
}

void XlChartEnteredNumber::getText(XlChartEnteredNumber *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 3001;
}

void XlChartEnteredNumber::getTextReference(XlChartEnteredNumber *this)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 3001;
}

uint64_t XlChartAxisDisplayUnit::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2320))(a2, a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::__allocate_at_least[abi:ne180100]<ChAllocator<XlChartBinaryReader::SeriesDescriptor>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

uint64_t *ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23EC997B0](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

uint64_t Xl1904::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void Xl1904::~Xl1904(Xl1904 *this)
{
}

void XlAddIn::XlAddIn(XlAddIn *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDEA38;
}

uint64_t XlAddIn::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440))(a2, a1);
}

void XlAddIn::~XlAddIn(XlAddIn *this)
{
}

void XlAddMenu::XlAddMenu(XlAddMenu *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEA78;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0;
}

void XlAddMenu::~XlAddMenu(XlAddMenu *this)
{
  *(void *)this = &unk_26EBDEA78;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 5) = 0;
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 6) = 0;
  uint64_t v6 = *((void *)this + 7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 7) = 0;
}

{
  uint64_t vars8;

  XlAddMenu::~XlAddMenu(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlAddMenu::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 448))(a2, a1);
}

uint64_t XlArray::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 184))(a2, a1);
}

void XlAutoFilter::XlAutoFilter(XlAutoFilter *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  XlAutoFilterData::XlAutoFilterData((XlAutoFilterData *)(v3 + 16));
  *(void *)this = &unk_26EBDEAF8;
  *((void *)this + 2) = &unk_26EBDEB20;
}

uint64_t XlAutoFilter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 456))(a2, a1);
}

void XlAutoFilter::~XlAutoFilter(XlAutoFilter *this)
{
}

{
  uint64_t vars8;

  XlAutoFilterData::~XlAutoFilterData((XlAutoFilter *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'XlAutoFilter::~XlAutoFilter(XlAutoFilter *this)
{
  XlAutoFilterData::~XlAutoFilterData(this);
  JUMPOUT(0x23EC997B0);
}

void XlAutoFilterData::XlAutoFilterData(XlAutoFilterData *this)
{
  *(void *)this = &unk_26EBDEB78;
  *(_DWORD *)((char *)this + 10) = 0;
  *((_WORD *)this + 7) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

void XlAutoFilterData::~XlAutoFilterData(XlAutoFilterData *this)
{
  *(void *)this = &unk_26EBDEB78;
  XlAutoFilterData::setFirstCondDoper(this, 0);
  XlAutoFilterData::setSecondCondDoper(this, 0);
}

{
  *(void *)this = &unk_26EBDEB78;
  XlAutoFilterData::setFirstCondDoper(this, 0);
  XlAutoFilterData::setSecondCondDoper(this, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBDEB78;
  XlAutoFilterData::setFirstCondDoper(this, 0);
  XlAutoFilterData::setSecondCondDoper(this, 0);
  JUMPOUT(0x23EC997B0);
}

XlDoper *XlAutoFilterData::setFirstCondDoper(XlAutoFilterData *this, XlDoper *a2)
{
  double result = (XlDoper *)*((void *)this + 3);
  if (result)
  {
    XlDoper::~XlDoper(result);
    double result = (XlDoper *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 3) = a2;
  return result;
}

XlDoper *XlAutoFilterData::setSecondCondDoper(XlAutoFilterData *this, XlDoper *a2)
{
  double result = (XlDoper *)*((void *)this + 4);
  if (result)
  {
    XlDoper::~XlDoper(result);
    double result = (XlDoper *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 4) = a2;
  return result;
}

void XlBackup::XlBackup(XlBackup *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEBE8;
  *(unsigned char *)(v2 + 16) = 0;
}

uint64_t XlBackup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 472))(a2, a1);
}

void XlBackup::~XlBackup(XlBackup *this)
{
}

uint64_t XlBof::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, a1);
}

uint64_t XlBookBool::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 480))(a2, a1);
}

void XlBookBool::~XlBookBool(XlBookBool *this)
{
}

void XlBoolErr::~XlBoolErr(XlBoolErr *this)
{
}

uint64_t XlBoundSheet::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 208))(a2, a1);
}

uint64_t XlCalcCount::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 496))(a2, a1);
}

void XlCalcCount::~XlCalcCount(XlCalcCount *this)
{
}

uint64_t XlCalcMode::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 504))(a2, a1);
}

void XlCalcMode::~XlCalcMode(XlCalcMode *this)
{
}

uint64_t XlCf::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 512))(a2, a1);
}

uint64_t XlCodeName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1472))(a2, a1);
}

uint64_t XlCodePage::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

void XlCodePage::~XlCodePage(XlCodePage *this)
{
}

uint64_t XlColInfo::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, a1);
}

uint64_t XlCondFmt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 520))(a2, a1);
}

void XlContinue::XlContinue(XlContinue *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDEFA8;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 26) = 1;
}

void XlContinue::~XlContinue(XlContinue *this)
{
  *(void *)this = &unk_26EBDEFA8;
  if (*((unsigned char *)this + 26))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x23EC99790](v2, 0x1000C8077774924);
    }
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((unsigned char *)this + 26) = 0;
}

{
  uint64_t vars8;

  XlContinue::~XlContinue(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlContinue::takeContent(uint64_t this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 26))
  {
    this = *(void *)(this + 16);
    if (this) {
      this = MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
  }
  *(void *)(v5 + 16) = a2;
  *(_WORD *)(v5 + 24) = a3;
  *(unsigned char *)(v5 + 26) = 1;
  return this;
}

uint64_t XlContinue::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

void XlCoordList::XlCoordList(XlCoordList *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDEFE8;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
}

void XlCoordList::~XlCoordList(XlCoordList *this)
{
  *(void *)this = &unk_26EBDEFE8;
  XlCoordList::clearVertices((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlCoordList::~XlCoordList(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlCoordList::clearVertices(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  uint64_t v3 = *(void *)(this + 24);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x23EC997B0](this, 0x1000C4052888210);
        uint64_t v2 = *(void *)(v1 + 16);
        uint64_t v3 = *(void *)(v1 + 24);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(void *)(v1 + 24) = v2;
  return this;
}

uint64_t XlCoordList::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 528))(a2, a1);
}

uint64_t XlCountry::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 224))(a2, a1);
}

void XlCountry::~XlCountry(XlCountry *this)
{
}

void XlCrn::XlCrn(XlCrn *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF068;
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlCrn::~XlCrn(XlCrn *this)
{
  *(void *)this = &unk_26EBDF068;
  XlCrn::clearOperands(this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlCrn::~XlCrn(this);
  JUMPOUT(0x23EC997B0);
}

void *XlCrn::clearOperands(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[3];
  uint64_t v3 = this[4];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        XlOper::~XlOper((XlOper *)this);
        this = (void *)MEMORY[0x23EC997B0]();
        uint64_t v2 = v1[3];
        uint64_t v3 = v1[4];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

uint64_t XlCrn::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 536))(a2, a1);
}

void XlDbCell::XlDbCell(XlDbCell *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF0A8;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
}

uint64_t XlDbCell::takeCellOffsets(XlDbCell *this, unsigned __int16 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = a2;
  *((_WORD *)this + 14) = a3;
  return result;
}

void XlDbCell::~XlDbCell(XlDbCell *this)
{
  *(void *)this = &unk_26EBDF0A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 14) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDF0A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + 14) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlDbCell::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 232))(a2, a1);
}

void XlDCon::XlDCon(XlDCon *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF0E8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 19) = 0;
}

uint64_t XlDCon::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 544))(a2, a1);
}

void XlDCon::~XlDCon(XlDCon *this)
{
}

void XlDConBin::XlDConBin(XlDConBin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF128;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
}

void XlDConBin::~XlDConBin(XlDConBin *this)
{
  *(void *)this = &unk_26EBDF128;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
}

{
  uint64_t vars8;

  XlDConBin::~XlDConBin(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlDConBin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 552))(a2, a1);
}

void XlDConName::XlDConName(XlDConName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF168;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
}

void XlDConName::~XlDConName(XlDConName *this)
{
  *(void *)this = &unk_26EBDF168;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
}

{
  uint64_t vars8;

  XlDConName::~XlDConName(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlDConName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 560))(a2, a1);
}

uint64_t XlDefaultRowHeight::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
}

void XlDefaultRowHeight::~XlDefaultRowHeight(XlDefaultRowHeight *this)
{
}

uint64_t XlDefColWidth::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 240))(a2, a1);
}

void XlDefColWidth::~XlDefColWidth(XlDefColWidth *this)
{
}

void XlDelMenu::XlDelMenu(XlDelMenu *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF268;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 20) = 0;
}

void XlDelMenu::~XlDelMenu(XlDelMenu *this)
{
  *(void *)this = &unk_26EBDF268;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDF268;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlDelMenu::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 576))(a2, a1);
}

uint64_t XlDelta::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 584))(a2, a1);
}

void XlDelta::~XlDelta(XlDelta *this)
{
}

uint64_t XlDimensions::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 248))(a2, a1);
}

void XlDocRoute::XlDocRoute(XlDocRoute *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF328;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 21) = 0;
  *(void *)(v2 + 30) = 0;
  *(_DWORD *)(v2 + 38) = 0;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
}

void XlDocRoute::~XlDocRoute(XlDocRoute *this)
{
  *(void *)this = &unk_26EBDF328;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 7) = 0;
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 8) = 0;
  uint64_t v5 = *((void *)this + 9);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 9) = 0;
  uint64_t v6 = *((void *)this + 10);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 10) = 0;
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 11) = 0;
  uint64_t v8 = *((void *)this + 12);
  if (v8) {
    MEMORY[0x23EC997B0](v8, 0x1000C4077774924);
  }
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 11) = 0;
}

{
  uint64_t vars8;

  XlDocRoute::~XlDocRoute(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlDocRoute::setCustomMessage(XlDocRoute *this, XlString *a2)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = a2;
  return result;
}

uint64_t XlDocRoute::setBookTitle(XlDocRoute *this, XlString *a2)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = a2;
  return result;
}

uint64_t XlDocRoute::setOriginatorName(XlDocRoute *this, XlString *a2)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = a2;
  return result;
}

uint64_t XlDocRoute::setOriginatorAddress(XlDocRoute *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4077774924);
  }
  *((void *)this + 12) = a2;
  *((_DWORD *)this + 11) = a3;
  return result;
}

uint64_t XlDocRoute::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 592))(a2, a1);
}

void XlDoper::XlDoper(XlDoper *this)
{
  *(void *)this = 0x200000000;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
}

void XlDoper::~XlDoper(XlDoper *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
}

void XlDsf::XlDsf(XlDsf *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF368;
  *(unsigned char *)(v2 + 16) = 0;
}

uint64_t XlDsf::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 600))(a2, a1);
}

void XlDsf::~XlDsf(XlDsf *this)
{
}

uint64_t XlDV::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 608))(a2, a1);
}

uint64_t XlDVal::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 616))(a2, a1);
}

XlDXfUserFmt *XlDXf::setFmtChanges(XlDXf *this, XlDXfUserFmt *a2)
{
  uint64_t result = this->var6;
  if (result) {
    uint64_t result = (XlDXfUserFmt *)(*((uint64_t (**)(XlDXfUserFmt *))result->var0 + 1))(result);
  }
  this->var3 |= 2u;
  this->var6 = a2;
  return result;
}

XlDXfAlign *XlDXf::setAlignChanges(XlDXf *this, XlDXfAlign *a2)
{
  uint64_t result = this->var8;
  if (result) {
    uint64_t result = (XlDXfAlign *)MEMORY[0x23EC997B0](result, 0x1000C40C36A4E17);
  }
  this->var3 |= 8u;
  this->var8 = a2;
  return result;
}

XlDXfProtect *XlDXf::setProtectChanges(XlDXf *this, XlDXfProtect *a2)
{
  uint64_t result = this->var11;
  if (result) {
    uint64_t result = (XlDXfProtect *)MEMORY[0x23EC997B0](result, 0x1000C40BDFB0063);
  }
  this->var3 |= 0x40u;
  this->var11 = a2;
  return result;
}

void XlDXfAlign::XlDXfAlign(XlDXfAlign *this)
{
  *(void *)&this->var0 = 0x200000000;
  this->var6 = 0;
  *(_DWORD *)&this->var2 = 0;
  *(_WORD *)&this->var4 = 0;
}

void XlDXfProtect::XlDXfProtect(XlDXfProtect *this)
{
  *this = 0;
}

void XlDXfUserFmt::XlDXfUserFmt(XlDXfUserFmt *this, BOOL a2)
{
  this->var0 = (void **)&unk_26EBDF460;
  this->var1 = a2;
  this->var2 = -1;
  this->var3 = 0;
}

void XlDXfUserFmt::~XlDXfUserFmt(XlDXfUserFmt *this)
{
  this->var0 = (void **)&unk_26EBDF460;
  var3 = this->var3;
  if (var3) {
    (*(void (**)(XlString *))(*(void *)var3 + 8))(var3);
  }
  this->var3 = 0;
}

{
  XlString *var3;
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBDF460;
  var3 = this->var3;
  if (var3) {
    (*(void (**)(XlString *))(*(void *)var3 + 8))(var3);
  }
  this->var3 = 0;
  JUMPOUT(0x23EC997B0);
}

void XlEdg::XlEdg(XlEdg *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF498;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlEdg::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 624))(a2, a1);
}

void XlEdg::~XlEdg(XlEdg *this)
{
}

void XlEof::XlEof(XlEof *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDF4D8;
}

uint64_t XlEof::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

void XlEof::~XlEof(XlEof *this)
{
}

uint64_t XlEshClientTextBox::accept(int a1, void *lpsrc)
{
  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v2);
  return v4();
}

void XlExcel9::XlExcel9(XlExcel9 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDF728;
}

uint64_t XlExcel9::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1424))(a2, a1);
}

void XlExcel9::~XlExcel9(XlExcel9 *this)
{
}

void XlExternCount::XlExternCount(XlExternCount *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF768;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlExternCount::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 632))(a2, a1);
}

void XlExternCount::~XlExternCount(XlExternCount *this)
{
}

void XlExternName::XlExternName(XlExternName *this)
{
  XlRecord::XlRecord(this, 547, 7, 9);
  *(void *)uint64_t v1 = &unk_26EBDF7A8;
  *(_WORD *)(v1 + 22) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 28) = 0;
  *(void *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 20) = 0;
}

uint64_t XlExternName::setContentType(uint64_t result, int a2)
{
  switch(a2)
  {
    case 2:
      *(unsigned char *)(result + 16) = 0;
      *(_WORD *)(result + 19) = 256;
      break;
    case 1:
      *(unsigned char *)(result + 16) = 0;
      *(unsigned char *)(result + 20) = 0;
      break;
    case 0:
      *(_DWORD *)(result + 17) = 0;
      break;
  }
  return result;
}

uint64_t XlExternName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 640))(a2, a1);
}

uint64_t XlExternSheet::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 256))(a2, a1);
}

uint64_t XlExtSst::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 264))(a2, a1);
}

void XlFilePass::~XlFilePass(XlFilePass *this)
{
  *(void *)this = &unk_26EBDF868;
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    MEMORY[0x23EC99790](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26EBDF868;
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    MEMORY[0x23EC99790](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x23EC997B0);
}

void XlFilePass::XlFilePass(XlFilePass *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF868;
  *(_WORD *)(v2 + 16) = -1;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlFilePass::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

void XlFileSharing2::XlFileSharing2(XlFileSharing2 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF8A8;
  *(unsigned char *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 18) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlFileSharing2::~XlFileSharing2(XlFileSharing2 *this)
{
  *(void *)this = &unk_26EBDF8A8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDF8A8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlFileSharing2::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 648))(a2, a1);
}

uint64_t XlFileSharing::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 656))(a2, a1);
}

void XlFilterMode::XlFilterMode(XlFilterMode *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDF928;
}

uint64_t XlFilterMode::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 664))(a2, a1);
}

void XlFilterMode::~XlFilterMode(XlFilterMode *this)
{
}

uint64_t XlFmlaString::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 272))(a2, a1);
}

void XlFnGroupCount::XlFnGroupCount(XlFnGroupCount *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDF9A8;
  *(_WORD *)(v2 + 16) = 14;
}

uint64_t XlFnGroupCount::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 672))(a2, a1);
}

void XlFnGroupCount::~XlFnGroupCount(XlFnGroupCount *this)
{
}

void XlFnGroupName::XlFnGroupName(XlFnGroupName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDF9E8;
  v2[2] = 0;
}

void XlFnGroupName::~XlFnGroupName(XlFnGroupName *this)
{
  *(void *)this = &unk_26EBDF9E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDF9E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlFnGroupName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 680))(a2, a1);
}

void XlFont::XlFont(XlFont *this)
{
  XlRecord::XlRecord((XlRecord *)this, 49, 16, 9);
  *(void *)uint64_t v1 = &unk_26EBDFA28;
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 2147418112;
  *(_WORD *)(v1 + 28) = 400;
  *(_DWORD *)(v1 + 44) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
}

uint64_t XlFont::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, a1);
}

uint64_t XlFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, a1);
}

uint64_t XlFormula::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 296))(a2, a1);
}

void XlGcw::XlGcw(XlGcw *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFB28;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlGcw::setTable(XlGcw *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4077774924);
  }
  *((void *)this + 3) = a2;
  *((_WORD *)this + 8) = a3;
  return result;
}

void XlGcw::~XlGcw(XlGcw *this)
{
  *(void *)this = &unk_26EBDFB28;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDFB28;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C4077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlGcw::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 696))(a2, a1);
}

uint64_t XlGridSet::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 704))(a2, a1);
}

void XlGridSet::~XlGridSet(XlGridSet *this)
{
}

uint64_t XlGuts::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 712))(a2, a1);
}

void XlHdrFooterDrawing::XlHdrFooterDrawing(XlHdrFooterDrawing *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFCA8;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 36) = 0;
}

void XlHdrFooterDrawing::~XlHdrFooterDrawing(XlHdrFooterDrawing *this)
{
  *(void *)this = &unk_26EBDFCA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBDFCA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlHdrFooterDrawing::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1488))(a2, a1);
}

uint64_t XlHideObj::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 736))(a2, a1);
}

void XlHideObj::~XlHideObj(XlHideObj *this)
{
}

uint64_t XlHLink::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 744))(a2, a1);
}

uint64_t XlHLinkToolTip::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1456))(a2, a1);
}

uint64_t XlImData::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a1);
}

uint64_t XlIndex::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 304))(a2, a1);
}

void XlInterfaceEnd::XlInterfaceEnd(XlInterfaceEnd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBDFE68;
}

uint64_t XlInterfaceEnd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 768))(a2, a1);
}

void XlInterfaceEnd::~XlInterfaceEnd(XlInterfaceEnd *this)
{
}

void XlInterfaceHdr::XlInterfaceHdr(XlInterfaceHdr *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFEA8;
  *(_WORD *)(v2 + 16) = 1200;
}

uint64_t XlInterfaceHdr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 760))(a2, a1);
}

void XlInterfaceHdr::~XlInterfaceHdr(XlInterfaceHdr *this)
{
}

uint64_t XlIteration::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 776))(a2, a1);
}

void XlIteration::~XlIteration(XlIteration *this)
{
}

uint64_t XlLabel::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 312))(a2, a1);
}

void XlLabelRanges::XlLabelRanges(XlLabelRanges *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBDFF68;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 257;
}

void XlLabelRanges::~XlLabelRanges(XlLabelRanges *this)
{
  *(void *)this = &unk_26EBDFF68;
  XlLabelRanges::clearRowLabelRanges((uint64_t)this);
  XlLabelRanges::clearColLabelRanges((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  XlLabelRanges::~XlLabelRanges(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlLabelRanges::clearRowLabelRanges(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 64))
  {
    uint64_t v2 = *(void *)(this + 16);
    uint64_t v3 = *(void *)(this + 24);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
          uint64_t v2 = *(void *)(v1 + 16);
          uint64_t v3 = *(void *)(v1 + 24);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 16);
  }
  *(void *)(v1 + 24) = v2;
  return this;
}

uint64_t XlLabelRanges::clearColLabelRanges(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 65))
  {
    uint64_t v2 = *(void *)(this + 40);
    uint64_t v3 = *(void *)(this + 48);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
          uint64_t v2 = *(void *)(v1 + 40);
          uint64_t v3 = *(void *)(v1 + 48);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 40);
  }
  *(void *)(v1 + 48) = v2;
  return this;
}

void XlLabelRanges::appendColLabelRange(XlLabelRanges *this, XlRef *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 7);
  unint64_t v4 = (char *)this + 56;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 5);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    uint64_t v8 = v17 + 8;
    __int16 v20 = (char *)*((void *)this + 5);
    int v19 = (char *)*((void *)this + 6);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 5);
    }
    *((void *)this + 5) = v17;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 6) = v8;
}

uint64_t XlLabelRanges::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1464))(a2, a1);
}

void XlLabelSst::~XlLabelSst(XlLabelSst *this)
{
}

void XlList::XlList(XlList *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v3 = &unk_26EBE0028;
  XlRef::XlRef((XlRef *)(v3 + 16), 0);
  *((unsigned char *)this + 27) = 0;
  XlString::XlString((XlString *)((char *)this + 32));
  XlString::XlString((XlString *)((char *)this + 136));
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
}

void sub_238DEE164(_Unwind_Exception *a1)
{
  XlString::~XlString(v1);
  _Unwind_Resume(a1);
}

void XlList::~XlList(XlList *this)
{
  *(void *)this = &unk_26EBE0028;
  uint64_t v2 = (XlString *)((char *)this + 32);
  CsSimpleHeapVector<XlListColumn>::~CsSimpleHeapVector((void **)this + 30);
  XlString::~XlString((XlString *)((char *)this + 136));
  XlString::~XlString(v2);
}

{
  uint64_t vars8;

  XlList::~XlList(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlList::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 800))(a2, a1);
}

void **CsSimpleHeapVector<XlListColumn>::~CsSimpleHeapVector(void **a1)
{
  CsSimpleHeapVector<XlListColumn>::clear(a1);
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void *CsSimpleHeapVector<XlListColumn>::clear(void *result)
{
  uint64_t v1 = result[1];
  unint64_t v2 = (unint64_t)(v1 - *result) >> 3;
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v1 - 8);
      if (v4)
      {
        XlString::~XlString((XlString *)(v4 + 504));
        XlString::~XlString((XlString *)(v4 + 400));
        XlString::~XlString((XlString *)(v4 + 272));
        XlAutoFilterData::~XlAutoFilterData((XlAutoFilterData *)(v4 + 224));
        XlString::~XlString((XlString *)(v4 + 112));
        XlString::~XlString((XlString *)(v4 + 8));
        uint64_t result = (void *)MEMORY[0x23EC997B0](v4, 0x10B0C405854E9BBLL);
        uint64_t v1 = v3[1];
      }
      *(void *)(v1 - 8) = 0;
      uint64_t v1 = v3[1] - 8;
      v3[1] = v1;
      LODWORD(v2) = v2 - 1;
    }
    while (v2);
  }
  return result;
}

void XlListColumn::XlListColumn(XlListColumn *this)
{
  *(_DWORD *)this = 0;
  unint64_t v2 = (XlString *)((char *)this + 112);
  XlString::XlString((XlString *)((char *)this + 8));
  XlString::XlString(v2);
  *((unsigned char *)this + 216) = 0;
  XlAutoFilterData::XlAutoFilterData((XlListColumn *)((char *)this + 224));
  *((unsigned char *)this + 2XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  XlListXmlMap::XlListXmlMap((XlListColumn *)((char *)this + 272));
  XlListDataFormat::XlListDataFormat((XlListColumn *)((char *)this + 376));
}

void sub_238DEE3A4(_Unwind_Exception *a1)
{
  XlString::~XlString(v4);
  XlAutoFilterData::~XlAutoFilterData(v3);
  XlString::~XlString(v2);
  XlString::~XlString(v1);
  _Unwind_Resume(a1);
}

unsigned int *XlListColumn::setTotalsCalculation(unsigned int *result, unsigned int a2)
{
  if (a2 >= 9)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  XlDXfProtect *result = a2;
  return result;
}

uint64_t XlListColumn::getFilterReference(XlListColumn *this)
{
  if (!*((unsigned char *)this + 216))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return (uint64_t)this + 224;
}

uint64_t XlListColumn::getXmlMapReference(XlListColumn *this)
{
  if (!*((unsigned char *)this + 264))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return (uint64_t)this + 272;
}

void XlListDataFormat::XlListDataFormat(XlListDataFormat *this)
{
  *(_DWORD *)this = 0;
  uint64_t v1 = (XlString *)((char *)this + 128);
  XlString::XlString((XlString *)((char *)this + 24));
  XlString::XlString(v1);
}

void sub_238DEE4F4(_Unwind_Exception *a1)
{
  XlString::~XlString(v1);
  _Unwind_Resume(a1);
}

BOOL XlListDataFormat::isDecimalPlaceCountValid(XlListDataFormat *this)
{
  return (*(_DWORD *)this & 0xFFFFFFFB) == 2;
}

BOOL XlListDataFormat::isShowAsPercentageValid(XlListDataFormat *this)
{
  return *(_DWORD *)this == 2;
}

BOOL XlListDataFormat::isIsRequiredValid(XlListDataFormat *this)
{
  return *(_DWORD *)this != 0;
}

BOOL XlListDataFormat::isHasMaximumBoundValid(XlListDataFormat *this)
{
  return *(_DWORD *)this != 1;
}

uint64_t XlListDataFormat::isHasDefaultValid(XlListDataFormat *this)
{
  return (*(_DWORD *)this < 0xCu) & (0x95Eu >> *(_DWORD *)this);
}

uint64_t XlListDataFormat::isHasFormulaValid(XlListDataFormat *this)
{
  return (*(_DWORD *)this < 7u) & (0x5Eu >> *(_DWORD *)this);
}

uint64_t XlListDataFormat::isDefaultStringValid(XlListDataFormat *this)
{
  if (*(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0) {
    return 0;
  }
  uint64_t result = XlListDataFormat::getHasDefault(this);
  if (result)
  {
    if (*(_DWORD *)this <= 0xBu) {
      return (0x902u >> *(_DWORD *)this) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t XlListDataFormat::isDefaultCheckboxValid(XlListDataFormat *this)
{
  if (*(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0) {
    return 0;
  }
  uint64_t result = XlListDataFormat::getHasDefault(this);
  if (result) {
    return *(_DWORD *)this == 3;
  }
  return result;
}

unsigned int *XlListDataFormat::setType(unsigned int *result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  XlDXfProtect *result = a2;
  return result;
}

_DWORD *XlListDataFormat::setDecimalPlaceCount(_DWORD *this, unsigned int a2)
{
  if ((*this & 0xFFFFFFFB) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v3 = 1010;
    goto LABEL_6;
  }
  if (a2 >= 0x1F)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v3 = 1004;
LABEL_6:
    _DWORD *exception = v3;
  }
  this[1] = a2;
  return this;
}

uint64_t XlListDataFormat::setShowAsPercentage(uint64_t this, char a2)
{
  if (*(_DWORD *)this != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 16) = a2;
  return this;
}

uint64_t XlListDataFormat::setIsRequired(uint64_t this, char a2)
{
  if (!*(_DWORD *)this)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 17) = a2;
  return this;
}

uint64_t XlListDataFormat::setHasMinimumBound(uint64_t this, char a2)
{
  if ((*(_DWORD *)this & 0xFFFFFFFB) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 18) = a2;
  return this;
}

uint64_t XlListDataFormat::setHasMaximumBound(uint64_t this, char a2)
{
  if (*(_DWORD *)this == 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 19) = a2;
  return this;
}

uint64_t XlListDataFormat::getHasDefault(XlListDataFormat *this)
{
  if (*(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return *((unsigned __int8 *)this + 20);
}

uint64_t XlListDataFormat::setHasDefault(uint64_t this, char a2)
{
  if (*(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 20) = a2;
  return this;
}

uint64_t XlListDataFormat::getHasFormula(XlListDataFormat *this)
{
  if ((*(_DWORD *)this - 1) >= 4 && *(_DWORD *)this != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return *((unsigned __int8 *)this + 21);
}

uint64_t XlListDataFormat::setHasFormula(uint64_t this, char a2)
{
  if ((*(_DWORD *)this - 1) >= 4 && *(_DWORD *)this != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *(unsigned char *)(this + 21) = a2;
  return this;
}

uint64_t XlListDataFormat::getFormulaReference(XlListDataFormat *this)
{
  BOOL v1 = (*(_DWORD *)this - 1) < 4 || *(_DWORD *)this == 6;
  if (!v1 || (XlListDataFormat::getHasFormula(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return (uint64_t)this + 24;
}

uint64_t XlListDataFormat::isFormulaValid(XlListDataFormat *this)
{
  if ((*(_DWORD *)this - 1) < 4 || *(_DWORD *)this == 6) {
    return XlListDataFormat::getHasFormula(this);
  }
  else {
    return 0;
  }
}

uint64_t XlListDataFormat::getDefaultStringReference(XlListDataFormat *this)
{
  BOOL v1 = *(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0;
  if (v1
    || !XlListDataFormat::getHasDefault(this)
    || (*(_DWORD *)this <= 0xBu ? (BOOL v3 = ((1 << *(_DWORD *)this) & 0x902) == 0) : (BOOL v3 = 1), v3))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  return (uint64_t)this + 128;
}

uint64_t XlListDataFormat::isDefaultNumberValid(XlListDataFormat *this)
{
  if (*(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0) {
    return 0;
  }
  uint64_t result = XlListDataFormat::getHasDefault(this);
  if (result)
  {
    if (*(_DWORD *)this <= 6u) {
      return (0x54u >> *(_DWORD *)this) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t XlListDataFormat::setDefaultNumber(XlListDataFormat *this, double a2)
{
  BOOL v2 = *(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0;
  if (v2
    || (uint64_t result = XlListDataFormat::getHasDefault(this), !result)
    || (*(_DWORD *)this <= 6u ? (BOOL v6 = ((1 << *(_DWORD *)this) & 0x54) == 0) : (BOOL v6 = 1), v6))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *((double *)this + 1) = a2;
  return result;
}

uint64_t XlListDataFormat::setDefaultCheckbox(XlListDataFormat *this, char a2)
{
  BOOL v2 = *(_DWORD *)this > 0xBu || ((1 << *(_DWORD *)this) & 0x95E) == 0;
  if (v2 || (uint64_t result = XlListDataFormat::getHasDefault(this), !result) || *(_DWORD *)this != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1010;
  }
  *((unsigned char *)this + 232) = a2;
  return result;
}

void XlLpr::XlLpr(XlLpr *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0068;
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 20) = 0;
  *(_WORD *)(v2 + 28) = 0;
}

void XlLpr::~XlLpr(XlLpr *this)
{
  *(void *)this = &unk_26EBE0068;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0068;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlLpr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 792))(a2, a1);
}

uint64_t XlMerge::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96))(a2, a1);
}

void XlMms::XlMms(XlMms *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE00E8;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlMms::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 808))(a2, a1);
}

void XlMms::~XlMms(XlMms *this)
{
}

void XlModify::XlModify(XlModify *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0128;
}

uint64_t XlModify::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1408))(a2, a1);
}

void XlModify::~XlModify(XlModify *this)
{
}

void XlMsoDrawing::XlMsoDrawing(XlMsoDrawing *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0168;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 28) = 0;
}

void XlMsoDrawing::~XlMsoDrawing(XlMsoDrawing *this)
{
  *(void *)this = &unk_26EBE0168;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0168;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlMsoDrawing::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1);
}

void XlMsoDrawingGroup::XlMsoDrawingGroup(XlMsoDrawingGroup *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE01A8;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 28) = 0;
}

void XlMsoDrawingGroup::~XlMsoDrawingGroup(XlMsoDrawingGroup *this)
{
  *(void *)this = &unk_26EBE01A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE01A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlMsoDrawingGroup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 112))(a2, a1);
}

uint64_t XlMsoDrawingSelection::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 816))(a2, a1);
}

void XlName::XlName(XlName *this)
{
  XlRecord::XlRecord((XlRecord *)this, 24, 14, 9);
  *(void *)uint64_t v1 = &unk_26EBE02A8;
  *(_DWORD *)(v1 + 84) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(unsigned char *)(v1 + 80) = 0;
}

uint64_t XlName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 336))(a2, a1);
}

uint64_t XlNote::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a1);
}

uint64_t XlObjBiff8::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a1);
}

void XlChartRichTextPropsStream::XlChartRichTextPropsStream(XlChartRichTextPropsStream *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE03A8;
  v2[2] = 0;
  v2[3] = 0;
}

void XlChartRichTextPropsStream::~XlChartRichTextPropsStream(XlChartRichTextPropsStream *this)
{
  *(void *)this = &unk_26EBE03A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE03A8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartRichTextPropsStream::giveXmlStream(XlChartRichTextPropsStream *this)
{
  uint64_t v1 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  return v1;
}

uint64_t XlChartRichTextPropsStream::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2384))(a2, a1);
}

void XlObjProj::XlObjProj(XlObjProj *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE03E8;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlObjProj::~XlObjProj(XlObjProj *this)
{
  *(void *)this = &unk_26EBE03E8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE03E8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlObjProj::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 824))(a2, a1);
}

uint64_t XlObjProtect::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 832))(a2, a1);
}

void XlObjProtect::~XlObjProtect(XlObjProtect *this)
{
}

uint64_t XlOleSize::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 840))(a2, a1);
}

uint64_t XlOper::getDataSize(XlOper *this)
{
  int v2 = *(_DWORD *)this;
  uint64_t result = 9;
  switch(v2)
  {
    case 1:
    case 4:
    case 8:
      return result;
    case 2:
      uint64_t v4 = (XlString *)*((void *)this + 2);
      if (v4) {
        uint64_t result = XlString::getSizeInStream(v4) + 1;
      }
      else {
        uint64_t result = 4;
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    default:
      if (v2 != 16) {
LABEL_5:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t XlPalette::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a1);
}

uint64_t XlPaletteX::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, a1);
}

void XlPane::XlPane(XlPane *this)
{
  XlRecord::XlRecord((XlRecord *)this, 65, 10, 9);
  *(void *)uint64_t v1 = &unk_26EBE0528;
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
}

uint64_t XlPane::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, a1);
}

void XlParamQry::XlParamQry(XlParamQry *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0568;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 20) = 0;
  *(_WORD *)(v2 + 28) = 0;
}

uint64_t XlParamQry::setRgb(XlParamQry *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 4) = a2;
  *((_WORD *)this + 14) = a3;
  return result;
}

void XlParamQry::~XlParamQry(XlParamQry *this)
{
  *(void *)this = &unk_26EBE0568;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_WORD *)this + 14) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0568;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_WORD *)this + 14) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlParamQry::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 848))(a2, a1);
}

uint64_t XlPassword::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 856))(a2, a1);
}

void XlPassword::~XlPassword(XlPassword *this)
{
}

uint64_t XlPhoneticInfo::getSizeInStream(XlPhoneticInfo *this)
{
  int v1 = *((_DWORD *)this + 10);
  if (v1) {
    int v2 = 2 * v1 + 14;
  }
  else {
    int v2 = 16;
  }
  return (v2 + 6 * (__int16)((*((_DWORD *)this + 20) - *((_DWORD *)this + 18)) >> 3));
}

uint64_t XlPhoneticInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    OcText::clearBuffer((OcText *)(a1 + 24));
    XlPhoneticInfo::clearRuns((void *)a1);
    *(_WORD *)(a1 + 8) = -1;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    OcText::operator=(a1 + 24, a2 + 24);
    *(void *)(a1 + 12) = *(void *)(a2 + 12);
    if (((*(void *)(a2 + 80) - *(void *)(a2 + 72)) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      while (1)
      {
        unint64_t v5 = (XlPhoneticRun *)operator new(0x10uLL);
        XlPhoneticRun::XlPhoneticRun(v5);
        if (!v5) {
          break;
        }
        uint64_t v6 = *(void *)(a2 + 72);
        if (v4 >= ((unint64_t)(*(void *)(a2 + 80) - v6) >> 3)) {
          std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v7 = *(void *)(v6 + 8 * v4);
        if (!v7)
        {
          exception = __cxa_allocate_exception(4uLL);
          int v10 = 1005;
LABEL_12:
          _DWORD *exception = v10;
        }
        *((_DWORD *)v5 + 2) = *(_DWORD *)(v7 + 8);
        *((_WORD *)v5 + 6) = *(_WORD *)(v7 + 12);
        XlPhoneticInfo::appendRun((XlPhoneticInfo *)a1, v5);
        if (++v4 >= ((*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3)) {
          return a1;
        }
      }
      exception = __cxa_allocate_exception(4uLL);
      int v10 = 1001;
      goto LABEL_12;
    }
  }
  return a1;
}

void sub_238DEFD34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlPrecision::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 872))(a2, a1);
}

void XlPrecision::~XlPrecision(XlPrecision *this)
{
}

uint64_t XlPrintGridlines::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 880))(a2, a1);
}

void XlPrintGridlines::~XlPrintGridlines(XlPrintGridlines *this)
{
}

uint64_t XlPrintHeaders::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 888))(a2, a1);
}

void XlPrintHeaders::~XlPrintHeaders(XlPrintHeaders *this)
{
}

uint64_t XlPrintSize::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 896))(a2, a1);
}

uint64_t XlProt4Rev::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 904))(a2, a1);
}

void XlProt4Rev::~XlProt4Rev(XlProt4Rev *this)
{
}

uint64_t XlProt4RevPass::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 912))(a2, a1);
}

void XlProt4RevPass::~XlProt4RevPass(XlProt4RevPass *this)
{
}

uint64_t XlProtect::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 920))(a2, a1);
}

void XlProtect::~XlProtect(XlProtect *this)
{
}

void XlPub::XlPub(XlPub *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0858;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

void XlPub::~XlPub(XlPub *this)
{
  *(void *)this = &unk_26EBE0858;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    MEMORY[0x23EC997B0](v4, 0x1000C408AA14F5FLL);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlPub::~XlPub(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlPub::setAlias(XlPub *this, unsigned __int8 *a2)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 6) = a2;
  return result;
}

uint64_t XlPub::setSection(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C408AA14F5FLL);
  }
  *(void *)(a1 + 32) = a2;
  return result;
}

uint64_t XlPub::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 928))(a2, a1);
}

void XlQsi::XlQsi(XlQsi *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0898;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

void XlQsi::~XlQsi(XlQsi *this)
{
  *(void *)this = &unk_26EBE0898;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0898;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlQsi::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 936))(a2, a1);
}

void XlRangeProtection::XlRangeProtection(XlRangeProtection *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE08D8;
  *(_WORD *)(v2 + 50) = 0;
  *(void *)(v2 + 56) = 0;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
}

void XlRangeProtection::~XlRangeProtection(XlRangeProtection *this)
{
  *(void *)this = &unk_26EBE08D8;
  XlRangeProtection::clearRanges((uint64_t)this);
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  *((_WORD *)this + 25) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  XlRangeProtection::~XlRangeProtection(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRangeProtection::takePermissionContent(XlRangeProtection *this, unsigned __int8 *a2, __int16 a3, __int16 a4)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 7) = a2;
  *((_WORD *)this + 32) = a3;
  *((_WORD *)this + 25) = a4;
  return result;
}

uint64_t XlRangeProtection::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1480))(a2, a1);
}

uint64_t XlRecalcID::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1432))(a2, a1);
}

void XlRecalcID::~XlRecalcID(XlRecalcID *this)
{
}

void XlRecipName::XlRecipName(XlRecipName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0958;
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
}

void XlRecipName::~XlRecipName(XlRecipName *this)
{
  *(void *)this = &unk_26EBE0958;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C4077774924);
  }
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRecipName::~XlRecipName(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRecipName::setRecipientAddress(XlRecipName *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4077774924);
  }
  *((void *)this + 4) = a2;
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t XlRecipName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 944))(a2, a1);
}

void sub_238DF0A40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlRefMode::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 952))(a2, a1);
}

void XlRefMode::~XlRefMode(XlRefMode *this)
{
}

uint64_t XlRefreshAll::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 960))(a2, a1);
}

void XlRefreshAll::~XlRefreshAll(XlRefreshAll *this)
{
}

void XlRevisionAutoFmt::XlRevisionAutoFmt(XlRevisionAutoFmt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0A40;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

void XlRevisionAutoFmt::~XlRevisionAutoFmt(XlRevisionAutoFmt *this)
{
  *(void *)this = &unk_26EBE0A40;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t vars8;

  XlRevisionAutoFmt::~XlRevisionAutoFmt(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionAutoFmt::takeDataHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C40451B5BE8);
  }
  *(void *)(a1 + 16) = a2;
  return result;
}

uint64_t XlRevisionAutoFmt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1728))(a2, a1);
}

void XlRevisionChangeCell::XlRevisionChangeCell(XlRevisionChangeCell *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0A80;
  *(void *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
}

void XlRevisionChangeCell::~XlRevisionChangeCell(XlRevisionChangeCell *this)
{
  *(void *)this = &unk_26EBE0A80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *((void *)this + 7) = 0;
  uint64_t v5 = *((void *)this + 9);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 9) = 0;
  uint64_t v6 = *((void *)this + 10);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 10) = 0;
  uint64_t v7 = (XlDXf *)*((void *)this + 11);
  if (v7)
  {
    XlDXf::~XlDXf(v7);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 11) = 0;
  uint64_t v8 = (XlDXf *)*((void *)this + 12);
  if (v8)
  {
    XlDXf::~XlDXf(v8);
    MEMORY[0x23EC997B0]();
  }
  *((void *)this + 12) = 0;
}

{
  uint64_t vars8;

  XlRevisionChangeCell::~XlRevisionChangeCell(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionChangeCell::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1664))(a2, a1);
}

uint64_t XlRevisionChangeCell::takeNewFormulaDefinition(XlRevisionChangeCell *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 5) = a2;
  *((_WORD *)this + 24) = a3;
  return result;
}

XlDXf *XlRevisionChangeCell::takeNewFormat(XlRevisionChangeCell *this, XlDXf *a2)
{
  uint64_t result = (XlDXf *)*((void *)this + 11);
  if (result)
  {
    XlDXf::~XlDXf(result);
    uint64_t result = (XlDXf *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 11) = a2;
  return result;
}

XlDXf *XlRevisionChangeCell::takeOldFormat(XlRevisionChangeCell *this, XlDXf *a2)
{
  uint64_t result = (XlDXf *)*((void *)this + 12);
  if (result)
  {
    XlDXf::~XlDXf(result);
    uint64_t result = (XlDXf *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 12) = a2;
  return result;
}

void XlRevisionConflict::XlRevisionConflict(XlRevisionConflict *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0AC0;
  v2[2] = 0;
}

void XlRevisionConflict::~XlRevisionConflict(XlRevisionConflict *this)
{
  *(void *)this = &unk_26EBE0AC0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0AC0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionConflict::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1768))(a2, a1);
}

void XlRevisionCopy::XlRevisionCopy(XlRevisionCopy *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0B00;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlRevisionCopy::~XlRevisionCopy(XlRevisionCopy *this)
{
  *(void *)this = &unk_26EBE0B00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0B00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionCopy::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1720))(a2, a1);
}

void XlRevisionDefineName::XlRevisionDefineName(XlRevisionDefineName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0B40;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 36) = 0u;
  *(_OWORD *)(v2 + 52) = 0u;
  *(_OWORD *)(v2 + 68) = 0u;
  *(_OWORD *)(v2 + 84) = 0u;
  *(_OWORD *)(v2 + 100) = 0u;
  *(_OWORD *)(v2 + 113) = 0u;
  *(_DWORD *)(v2 + 132) = 15;
}

void XlRevisionDefineName::~XlRevisionDefineName(XlRevisionDefineName *this)
{
  *(void *)this = &unk_26EBE0B40;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *((void *)this + 10) = 0;
  uint64_t v5 = *((void *)this + 15);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 15) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 11) = 0;
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 7) = 0;
  uint64_t v9 = *((void *)this + 12);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 12) = 0;
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 8) = 0;
  uint64_t v11 = *((void *)this + 13);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 13) = 0;
  uint64_t v12 = *((void *)this + 9);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 9) = 0;
  uint64_t v13 = *((void *)this + 14);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 14) = 0;
}

{
  uint64_t vars8;

  XlRevisionDefineName::~XlRevisionDefineName(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionDefineName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1784))(a2, a1);
}

uint64_t XlRevisionDefineName::takeNewNameDefinition(XlRevisionDefineName *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 10) = a2;
  *((_WORD *)this + 12) = a3;
  return result;
}

uint64_t XlRevisionDefineName::takeOldNameDefinition(XlRevisionDefineName *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 15) = a2;
  *((_WORD *)this + 16) = a3;
  return result;
}

uint64_t XlRevisionDefineName::takeOldDescriptionText(XlRevisionDefineName *this, XlString *a2)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 12) = a2;
  return result;
}

uint64_t XlRevisionDefineName::takeOldHelpTopicText(XlRevisionDefineName *this, XlString *a2)
{
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = a2;
  return result;
}

uint64_t XlRevisionDefineName::takeOldStatusText(XlRevisionDefineName *this, XlString *a2)
{
  uint64_t result = *((void *)this + 14);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 14) = a2;
  return result;
}

void XlRevisionDeleteShape::XlRevisionDeleteShape(XlRevisionDeleteShape *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0B80;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = -1;
  *(void *)(v2 + 32) = 0;
}

void XlRevisionDeleteShape::~XlRevisionDeleteShape(XlRevisionDeleteShape *this)
{
  *(void *)this = &unk_26EBE0B80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRevisionDeleteShape::~XlRevisionDeleteShape(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionDeleteShape::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1744))(a2, a1);
}

void XlRevisionExclusive::XlRevisionExclusive(XlRevisionExclusive *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0BC0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlRevisionExclusive::~XlRevisionExclusive(XlRevisionExclusive *this)
{
  *(void *)this = &unk_26EBE0BC0;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0BC0;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionExclusive::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1632))(a2, a1);
}

void XlRevisionFileLock::XlRevisionFileLock(XlRevisionFileLock *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0C00;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlRevisionFileLock::~XlRevisionFileLock(XlRevisionFileLock *this)
{
  *(void *)this = &unk_26EBE0C00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0C00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionFileLock::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1624))(a2, a1);
}

void XlRevisionFormat::XlRevisionFormat(XlRevisionFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0C40;
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
}

void XlRevisionFormat::~XlRevisionFormat(XlRevisionFormat *this)
{
  *(void *)this = &unk_26EBE0C40;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 3) = 0;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3) {
      MEMORY[0x23EC99790](v3 - 16, 0x1000C800EA6A39BLL);
    }
    *((void *)this + 5) = 0;
    *((_WORD *)this + 17) = 0;
    *((unsigned char *)this + 16) = 1;
  }
  XlRevisionFormat::takeDifferentialFormat(this, 0);
}

{
  uint64_t vars8;

  XlRevisionFormat::~XlRevisionFormat(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionFormat::takeDataHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C40451B5BE8);
  }
  *(void *)(a1 + 24) = a2;
  return result;
}

uint64_t XlRevisionFormat::takeRefTable(uint64_t this, XlRef *a2, __int16 a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *(void *)(this + 40);
  if (v6) {
    this = MEMORY[0x23EC99790](v6 - 16, 0x1000C800EA6A39BLL);
  }
  *(void *)(v5 + 40) = a2;
  *(_WORD *)(v5 + 34) = a3;
  *(unsigned char *)(v5 + 16) = 1;
  return this;
}

XlDXf *XlRevisionFormat::takeDifferentialFormat(XlRevisionFormat *this, XlDXf *a2)
{
  uint64_t result = (XlDXf *)*((void *)this + 6);
  if (result)
  {
    XlDXf::~XlDXf(result);
    uint64_t result = (XlDXf *)MEMORY[0x23EC997B0]();
  }
  *((void *)this + 6) = a2;
  return result;
}

uint64_t XlRevisionFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1672))(a2, a1);
}

void XlRevisionHeader::XlRevisionHeader(XlRevisionHeader *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0C80;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 56) = 0;
}

void XlRevisionHeader::~XlRevisionHeader(XlRevisionHeader *this)
{
  *(void *)this = &unk_26EBE0C80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 5) = 0;
}

{
  uint64_t vars8;

  XlRevisionHeader::~XlRevisionHeader(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionHeader::takeGuid(XlRevisionHeader *this, unsigned __int8 *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 3) = a2;
  return result;
}

uint64_t XlRevisionHeader::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1640))(a2, a1);
}

void XlRevisionInfo::XlRevisionInfo(XlRevisionInfo *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0CC0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

void XlRevisionInfo::~XlRevisionInfo(XlRevisionInfo *this)
{
  *(void *)this = &unk_26EBE0CC0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRevisionInfo::~XlRevisionInfo(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionInfo::takeGuidRoot(XlRevisionInfo *this, unsigned __int8 *a2)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 4) = a2;
  return result;
}

uint64_t XlRevisionInfo::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1616))(a2, a1);
}

void XlRevisionInsertDelete::XlRevisionInsertDelete(XlRevisionInsertDelete *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0D00;
  *(_DWORD *)(v2 + 36) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
}

void XlRevisionInsertDelete::~XlRevisionInsertDelete(XlRevisionInsertDelete *this)
{
  *(void *)this = &unk_26EBE0D00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t vars8;

  XlRevisionInsertDelete::~XlRevisionInsertDelete(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionInsertDelete::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1656))(a2, a1);
}

void XlRevisionInsertDeleteBegin::XlRevisionInsertDeleteBegin(XlRevisionInsertDeleteBegin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0D40;
}

void XlRevisionInsertDeleteBegin::~XlRevisionInsertDeleteBegin(XlRevisionInsertDeleteBegin *this)
{
}

uint64_t XlRevisionInsertDeleteBegin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1752))(a2, a1);
}

void XlRevisionInsertDeleteEnd::XlRevisionInsertDeleteEnd(XlRevisionInsertDeleteEnd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0D80;
}

void XlRevisionInsertDeleteEnd::~XlRevisionInsertDeleteEnd(XlRevisionInsertDeleteEnd *this)
{
}

uint64_t XlRevisionInsertDeleteEnd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1760))(a2, a1);
}

void XlRevisionInsertShape::XlRevisionInsertShape(XlRevisionInsertShape *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0DC0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = -1;
  *(void *)(v2 + 32) = 0;
}

void XlRevisionInsertShape::~XlRevisionInsertShape(XlRevisionInsertShape *this)
{
  *(void *)this = &unk_26EBE0DC0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRevisionInsertShape::~XlRevisionInsertShape(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionInsertShape::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1736))(a2, a1);
}

void XlRevisionLogEntry::XlRevisionLogEntry(XlRevisionLogEntry *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0E00;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlRevisionLogEntry::~XlRevisionLogEntry(XlRevisionLogEntry *this)
{
  *(void *)this = &unk_26EBE0E00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE0E00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionLogEntry::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1608))(a2, a1);
}

void XlRevisionMove::XlRevisionMove(XlRevisionMove *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0E40;
  *(_DWORD *)(v2 + 44) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

void XlRevisionMove::~XlRevisionMove(XlRevisionMove *this)
{
  *(void *)this = &unk_26EBE0E40;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    MEMORY[0x23EC997B0](v4, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRevisionMove::~XlRevisionMove(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionMove::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1688))(a2, a1);
}

uint64_t XlRevisionMove::setSourceTabIndex(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 40) = a2;
  return this;
}

void XlRevisionMoveBegin::XlRevisionMoveBegin(XlRevisionMoveBegin *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0E80;
}

void XlRevisionMoveBegin::~XlRevisionMoveBegin(XlRevisionMoveBegin *this)
{
}

uint64_t XlRevisionMoveBegin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1680))(a2, a1);
}

void XlRevisionMoveEnd::XlRevisionMoveEnd(XlRevisionMoveEnd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0EC0;
}

void XlRevisionMoveEnd::~XlRevisionMoveEnd(XlRevisionMoveEnd *this)
{
}

uint64_t XlRevisionMoveEnd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1696))(a2, a1);
}

void XlRevisionNote::XlRevisionNote(XlRevisionNote *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0F00;
  v2[6] = 0;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
}

void XlRevisionNote::~XlRevisionNote(XlRevisionNote *this)
{
  *(void *)this = &unk_26EBE0F00;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  XlRevisionNote::~XlRevisionNote(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionNote::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1800))(a2, a1);
}

void XlRevisionRenameSheet::XlRevisionRenameSheet(XlRevisionRenameSheet *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE0F40;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
}

void XlRevisionRenameSheet::~XlRevisionRenameSheet(XlRevisionRenameSheet *this)
{
  *(void *)this = &unk_26EBE0F40;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlRevisionRenameSheet::~XlRevisionRenameSheet(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionRenameSheet::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1776))(a2, a1);
}

void XlRevisionSort::XlRevisionSort(XlRevisionSort *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0F80;
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
}

void XlRevisionSort::~XlRevisionSort(XlRevisionSort *this)
{
  *(void *)this = &unk_26EBE0F80;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    MEMORY[0x23EC997B0](v4, 0x1000C4052888210);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t vars8;

  XlRevisionSort::~XlRevisionSort(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionSort::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1712))(a2, a1);
}

uint64_t XlRevisionSort::takeMap(XlRevisionSort *this, int *a2, int a3)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C4052888210);
  }
  *((void *)this + 6) = a2;
  *((_DWORD *)this + 10) = a3;
  return result;
}

void XlRevisionTabId::XlRevisionTabId(XlRevisionTabId *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE0FC0;
  *(unsigned char *)(v2 + 16) = 1;
  *(_WORD *)(v2 + 18) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlRevisionTabId::~XlRevisionTabId(XlRevisionTabId *this)
{
  *(void *)this = &unk_26EBE0FC0;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
    }
    *((void *)this + 3) = 0;
    *((_WORD *)this + 9) = 0;
    *((unsigned char *)this + 16) = 1;
  }
}

{
  uint64_t vars8;

  XlRevisionTabId::~XlRevisionTabId(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionTabId::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1648))(a2, a1);
}

void XlRevisionUserView::XlRevisionUserView(XlRevisionUserView *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1000;
  v2[2] = 0;
  v2[3] = 0;
}

void XlRevisionUserView::~XlRevisionUserView(XlRevisionUserView *this)
{
  *(void *)this = &unk_26EBE1000;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t vars8;

  XlRevisionUserView::~XlRevisionUserView(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRevisionUserView::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1792))(a2, a1);
}

void XlRevisionVersionNumber::XlRevisionVersionNumber(XlRevisionVersionNumber *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1040;
  *(_WORD *)(v2 + 16) = 0;
}

void XlRevisionVersionNumber::~XlRevisionVersionNumber(XlRevisionVersionNumber *this)
{
}

uint64_t XlRevisionVersionNumber::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1704))(a2, a1);
}

uint64_t XlRow::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, a1);
}

void XlRString::XlRString(XlRString *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1140;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
  v2[2] = 0;
  *(void *)((char *)v2 + 22) = 0;
}

void XlRString::~XlRString(XlRString *this)
{
  *(void *)this = &unk_26EBE1140;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  XlRString::clearRuns((uint64_t)this);
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  XlRString::~XlRString(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRString::clearRuns(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 32);
  if (((*(void *)(this + 40) - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void *)(v2 + 8 * v3);
      if (this)
      {
        this = MEMORY[0x23EC99790](this, 0x1000C8077774924);
        uint64_t v2 = *(void *)(v1 + 32);
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = *(void *)(v1 + 32);
    }
    while (v3 < ((unint64_t)(*(void *)(v1 + 40) - v2) >> 3));
  }
  *(void *)(v1 + 40) = v2;
  return this;
}

uint64_t XlRString::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 376))(a2, a1);
}

void XlRubi::XlRubi(XlRubi *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1180;
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 3;
  *(_DWORD *)(v2 + 20) = 1;
  *(_WORD *)(v2 + 24) = 257;
  *(unsigned char *)(v2 + 26) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 1;
}

void XlRubi::~XlRubi(XlRubi *this)
{
  *(void *)this = &unk_26EBE1180;
  XlRubi::clearAreas((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlRubi::~XlRubi(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlRubi::clearAreas(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 56))
  {
    uint64_t v2 = *(void *)(this + 32);
    uint64_t v3 = *(void *)(this + 40);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v4 = 0;
      do
      {
        this = *(void *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x23EC997B0](this, 0x1000C400EA6A39BLL);
          uint64_t v2 = *(void *)(v1 + 32);
          uint64_t v3 = *(void *)(v1 + 40);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    uint64_t v2 = *(void *)(this + 32);
  }
  *(void *)(v1 + 40) = v2;
  return this;
}

uint64_t XlRubi::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1416))(a2, a1);
}

uint64_t XlSaveRecalc::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 976))(a2, a1);
}

void XlSaveRecalc::~XlSaveRecalc(XlSaveRecalc *this)
{
}

uint64_t XlScenario::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 984))(a2, a1);
}

uint64_t XlScenMan::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 992))(a2, a1);
}

uint64_t XlScenProtect::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1000))(a2, a1);
}

void XlScenProtect::~XlScenProtect(XlScenProtect *this)
{
}

uint64_t XlScl::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1008))(a2, a1);
}

void XlSec::XlSec(XlSec *this)
{
  *(unsigned char *)this = 1;
  *(void *)((char *)this + 9) = 0;
  *(void *)((char *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 8) = 0;
}

uint64_t XlSheetProtection::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1448))(a2, a1);
}

void XlSheetProtection::~XlSheetProtection(XlSheetProtection *this)
{
}

uint64_t XlSheetTab::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1440))(a2, a1);
}

void XlSheetTab::~XlSheetTab(XlSheetTab *this)
{
}

uint64_t XlShrFmla::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 392))(a2, a1);
}

uint64_t XlSort::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1024))(a2, a1);
}

void XlSound::XlSound(XlSound *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1480;
  *(void *)(v2 + 16) = 0x100004257;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlSound::setSoundData(XlSound *this, unsigned __int8 *a2, int a3)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 4) = a2;
  *((_DWORD *)this + 6) = a3;
  return result;
}

void XlSound::~XlSound(XlSound *this)
{
  *(void *)this = &unk_26EBE1480;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1480;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSound::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1032))(a2, a1);
}

uint64_t XlSst::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 400))(a2, a1);
}

uint64_t XlStandardWidth::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 160))(a2, a1);
}

void XlStandardWidth::~XlStandardWidth(XlStandardWidth *this)
{
}

void XlString::XlString(XlString *this, const OcText *a2)
{
  *(void *)this = &unk_26EBE1540;
  OcText::OcText((OcText *)((char *)this + 8));
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = -1;
  *((void *)this + 12) = 0;
  OcText::operator=(v4, (uint64_t)a2);
}

void sub_238DF3FEC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = v5;
    operator delete(v5);
  }
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

unint64_t XlString::getSizeInStream(XlString *this)
{
  char isSingleByteEncoding = OcText::isSingleByteEncoding(*((_DWORD *)this + 4));
  int v3 = *((_DWORD *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  uint64_t v6 = (XlPhoneticInfo *)*((void *)this + 10);
  if (v6) {
    LODWORD(v6) = XlPhoneticInfo::getSizeInStream(v6);
  }
  return (v3 << (isSingleByteEncoding ^ 1)) + (((unint64_t)(v4 - v5) >> 1) & 0xFFFFFFFC) + v6 + 3;
}

uint64_t XlStyle::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, a1);
}

void XlSub::XlSub(XlSub *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE15B8;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 46) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 37) = 0;
}

void XlSub::~XlSub(XlSub *this)
{
  *(void *)this = &unk_26EBE15B8;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x23EC997B0](v3, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    MEMORY[0x23EC997B0](v4, 0x1000C408AA14F5FLL);
  }
  *((void *)this + 3) = 0;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    MEMORY[0x23EC99790](v5, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  XlSub::~XlSub(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSub::setSection(XlSub *this, XlSec *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC997B0](result, 0x1000C408AA14F5FLL);
  }
  *((void *)this + 3) = a2;
  return result;
}

uint64_t XlSub::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1040))(a2, a1);
}

uint64_t XlSupBook::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 408))(a2, a1);
}

void XlSxDB::XlSxDB(XlSxDB *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1638;
  *(void *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 23) = 0;
  *(_DWORD *)(v2 + 36) = 1;
}

void XlSxDB::~XlSxDB(XlSxDB *this)
{
  *(void *)this = &unk_26EBE1638;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1638;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxDB::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1048))(a2, a1);
}

void XlSxDBEx::XlSxDBEx(XlSxDBEx *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1678;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlSxDBEx::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1056))(a2, a1);
}

void XlSxDBEx::~XlSxDBEx(XlSxDBEx *this)
{
}

void XlSxDI::XlSxDI(XlSxDI *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE16B8;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 28) = 0;
  *(void *)(v2 + 20) = 0;
}

void XlSxDI::~XlSxDI(XlSxDI *this)
{
  *(void *)this = &unk_26EBE16B8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE16B8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxDI::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1064))(a2, a1);
}

void XlSxEx::XlSxEx(XlSxEx *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE16F8;
  *(void *)(v2 + 16) = -65536;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 31) = 0;
  *(_WORD *)(v2 + 42) = -1;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(_DWORD *)(v2 + 44) = -1;
  *(_OWORD *)(v2 + 80) = 0u;
}

void XlSxEx::~XlSxEx(XlSxEx *this)
{
  *(void *)this = &unk_26EBE16F8;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 7) = 0;
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 8) = 0;
  uint64_t v5 = *((void *)this + 9);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 9) = 0;
  uint64_t v6 = *((void *)this + 10);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 10) = 0;
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 11) = 0;
}

{
  uint64_t vars8;

  XlSxEx::~XlSxEx(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxEx::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1072))(a2, a1);
}

void XlSxExt::XlSxExt(XlSxExt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1738;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 16) = 1;
  *(_WORD *)(v2 + 24) = 0;
}

void XlSxExt::~XlSxExt(XlSxExt *this)
{
  *(void *)this = &unk_26EBE1738;
  XlSxExt::clearParams(this);
  XlSxExt::clearQueries(this);
  XlSxExt::clearWebPosts(this);
  XlSxExt::clearSQLs(this);
  XlSxExt::clearODBCs(this);
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

{
  uint64_t vars8;

  XlSxExt::~XlSxExt(this);
  JUMPOUT(0x23EC997B0);
}

void *XlSxExt::clearParams(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[13];
  uint64_t v3 = this[14];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[13];
        uint64_t v3 = v1[14];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[14] = v2;
  return this;
}

void *XlSxExt::clearQueries(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[4];
  uint64_t v3 = this[5];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[4];
        uint64_t v3 = v1[5];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[5] = v2;
  return this;
}

void *XlSxExt::clearWebPosts(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[10];
  uint64_t v3 = this[11];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[10];
        uint64_t v3 = v1[11];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[11] = v2;
  return this;
}

void *XlSxExt::clearSQLs(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[16];
  uint64_t v3 = this[17];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[16];
        uint64_t v3 = v1[17];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[17] = v2;
  return this;
}

void *XlSxExt::clearODBCs(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[7];
  uint64_t v3 = this[8];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[7];
        uint64_t v3 = v1[8];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[8] = v2;
  return this;
}

void XlSxExt::appendParam(XlSxExt *this, XlParamQry *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = *((void *)this + 15);
  unint64_t v4 = (char *)this + 120;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 13);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    uint64_t v8 = v17 + 8;
    __int16 v20 = (char *)*((void *)this + 13);
    int v19 = (char *)*((void *)this + 14);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 13);
    }
    *((void *)this + 13) = v17;
    *((void *)this + 14) = v8;
    *((void *)this + 15) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 14) = v8;
}

void XlSxExt::appendWebPost(void *a1, uint64_t a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = a1[12];
  uint64_t v4 = (uint64_t)(a1 + 12);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[10];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    uint64_t v8 = v17 + 8;
    __int16 v20 = (char *)a1[10];
    int v19 = (char *)a1[11];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)a1[10];
    }
    a1[10] = v17;
    a1[11] = v8;
    a1[12] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[11] = v8;
}

void XlSxExt::appendSQL(void *a1, uint64_t a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  unint64_t v6 = a1[18];
  uint64_t v4 = (uint64_t)(a1 + 18);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[16];
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    uint64_t v8 = v17 + 8;
    __int16 v20 = (char *)a1[16];
    int v19 = (char *)a1[17];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)a1[16];
    }
    a1[16] = v17;
    a1[17] = v8;
    a1[18] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[17] = v8;
}

uint64_t XlSxExt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1080))(a2, a1);
}

void XlSxFDBType::XlSxFDBType(XlSxFDBType *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1778;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxFDBType::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1088))(a2, a1);
}

void XlSxFDBType::~XlSxFDBType(XlSxFDBType *this)
{
}

void XlSxFilt::XlSxFilt(XlSxFilt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE17B8;
  *(_WORD *)(v2 + 38) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 29) = 0;
}

uint64_t XlSxFilt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1096))(a2, a1);
}

void XlSxFilt::~XlSxFilt(XlSxFilt *this)
{
}

void XlSxFmla::XlSxFmla(XlSxFmla *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE17F8;
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
}

uint64_t XlSxFmla::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1104))(a2, a1);
}

void XlSxFormat::XlSxFormat(XlSxFormat *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1838;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlSxFormat::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1112))(a2, a1);
}

void XlSxFormat::~XlSxFormat(XlSxFormat *this)
{
}

void XlSxFormula::XlSxFormula(XlSxFormula *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1878;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxFormula::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1120))(a2, a1);
}

void XlSxFormula::~XlSxFormula(XlSxFormula *this)
{
}

void XlSxIVd::XlSxIVd(XlSxIVd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE18F8;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxIVd::setFieldIDTable(XlSxIVd *this, __int16 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = a2;
  *((_WORD *)this + 8) = a3;
  return result;
}

void XlSxIVd::~XlSxIVd(XlSxIVd *this)
{
  *(void *)this = &unk_26EBE18F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE18F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxIVd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1136))(a2, a1);
}

void XlSxLi::XlSxLi(XlSxLi *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1938;
  *(_WORD *)(v2 + 16) = -1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlSxLi::~XlSxLi(XlSxLi *this)
{
  *(void *)this = &unk_26EBE1938;
  XlSxLi::clearTable(this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlSxLi::~XlSxLi(this);
  JUMPOUT(0x23EC997B0);
}

void *XlSxLi::clearTable(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[3];
  uint64_t v3 = this[4];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[3];
        uint64_t v3 = v1[4];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

uint64_t XlSxLi::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1144))(a2, a1);
}

void XlSXLineItem::XlSXLineItem(XlSXLineItem *this, __int16 a2)
{
  *(void *)this = &unk_26EBE1978;
  *((unsigned char *)this + 18) = 0;
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_WORD *)this + 12) = 0;
  *((_WORD *)this + 13) = a2;
  *((_WORD *)this + 8) = 0;
}

uint64_t XlSXLineItem::setViewItemIndexTable(XlSXLineItem *this, __int16 *a2, __int16 a3)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x23EC99790](result, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = a2;
  *((_WORD *)this + 13) = a3;
  return result;
}

void XlSXLineItem::~XlSXLineItem(XlSXLineItem *this)
{
  *(void *)this = &unk_26EBE1978;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = 0;
  *((_WORD *)this + 13) = -1;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1978;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 4) = 0;
  *((_WORD *)this + 13) = -1;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSXLineItem::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1152))(a2, a1);
}

void XlSxName::XlSxName(XlSxName *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE19B8;
  *(unsigned char *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 18) = 0;
  *(_DWORD *)(v2 + 20) = 1;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlSxName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1160))(a2, a1);
}

void XlSxName::~XlSxName(XlSxName *this)
{
}

void XlSxPair::XlSxPair(XlSxPair *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE19F8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 19) = 0;
}

uint64_t XlSxPair::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1168))(a2, a1);
}

void XlSxPair::~XlSxPair(XlSxPair *this)
{
}

void XlSxRule::XlSxRule(XlSxRule *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1A38;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlSxRule::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1184))(a2, a1);
}

void XlSxRule::~XlSxRule(XlSxRule *this)
{
}

void XlSxSelect::XlSxSelect(XlSxSelect *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1A78;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlSxSelect::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1192))(a2, a1);
}

void XlSxSelect::~XlSxSelect(XlSxSelect *this)
{
}

void XlSxString::XlSxString(XlSxString *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1AB8;
  v2[2] = 0;
}

void XlSxString::~XlSxString(XlSxString *this)
{
  *(void *)this = &unk_26EBE1AB8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1AB8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxString::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1200))(a2, a1);
}

void XlSxTbl::XlSxTbl(XlSxTbl *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1AF8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 19) = 0;
}

uint64_t XlSxTbl::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1208))(a2, a1);
}

void XlSxTbl::~XlSxTbl(XlSxTbl *this)
{
}

void XlSxTbPg::XlSxTbPg(XlSxTbPg *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1B38;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
}

void XlSxTbPg::~XlSxTbPg(XlSxTbPg *this)
{
  *(void *)this = &unk_26EBE1B38;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1B38;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C80BDFB0063);
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxTbPg::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1216))(a2, a1);
}

void XlSxTbRgiItm::XlSxTbRgiItm(XlSxTbRgiItm *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1B78;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlSxTbRgiItm::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1224))(a2, a1);
}

void XlSxTbRgiItm::~XlSxTbRgiItm(XlSxTbRgiItm *this)
{
}

void XlSxVd::XlSxVd(XlSxVd *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1BB8;
  *(_DWORD *)(v2 + 36) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 31) = 0;
}

void XlSxVd::~XlSxVd(XlSxVd *this)
{
  *(void *)this = &unk_26EBE1BB8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1BB8;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxVd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1232))(a2, a1);
}

void XlSxVdEx::XlSxVdEx(XlSxVdEx *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1BF8;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 0;
}

uint64_t XlSxVdEx::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1240))(a2, a1);
}

void XlSxVdEx::~XlSxVdEx(XlSxVdEx *this)
{
}

void XlSxVi::XlSxVi(XlSxVi *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1C38;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlSxVi::~XlSxVi(XlSxVi *this)
{
  *(void *)this = &unk_26EBE1C38;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE1C38;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxVi::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1248))(a2, a1);
}

void XlSxView::XlSxView(XlSxView *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1C78;
  *(_DWORD *)(v2 + 60) = 0;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 43) = 0u;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
}

void XlSxView::~XlSxView(XlSxView *this)
{
  *(void *)this = &unk_26EBE1C78;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 9) = 0;
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 10) = 0;
}

{
  uint64_t vars8;

  XlSxView::~XlSxView(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlSxView::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1256))(a2, a1);
}

uint64_t XlTabId::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1272))(a2, a1);
}

void XlTabIdConf::XlTabIdConf(XlTabIdConf *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1D38;
  *(_WORD *)(v2 + 16) = 0;
}

uint64_t XlTabIdConf::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1280))(a2, a1);
}

void XlTabIdConf::~XlTabIdConf(XlTabIdConf *this)
{
}

uint64_t XlTable::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1288))(a2, a1);
}

void XlTemplate::XlTemplate(XlTemplate *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1DB8;
}

uint64_t XlTemplate::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1296))(a2, a1);
}

void XlTemplate::~XlTemplate(XlTemplate *this)
{
}

uint64_t XlTxo::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, a1);
}

void XlUnCalced::XlUnCalced(XlUnCalced *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE1E78;
}

uint64_t XlUnCalced::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1312))(a2, a1);
}

void XlUnCalced::~XlUnCalced(XlUnCalced *this)
{
}

void XlUserBView::XlUserBView(XlUserBView *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE1EB8;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 41) = 0u;
  *(void *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 57) = 16842753;
  *(unsigned char *)(v2 + 61) = 0;
}

void XlUserBView::~XlUserBView(XlUserBView *this)
{
  *(void *)this = &unk_26EBE1EB8;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 9) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x23EC99790](v3, 0x1000C8077774924);
  }
  *((void *)this + 3) = 0;
}

{
  uint64_t vars8;

  XlUserBView::~XlUserBView(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlUserBView::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1320))(a2, a1);
}

uint64_t XlUsesElfs::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1344))(a2, a1);
}

void XlUsesElfs::~XlUsesElfs(XlUsesElfs *this)
{
}

void XlVertex::XlVertex(XlVertex *this)
{
  *(_DWORD *)this = 0;
}

void XlWindow1::XlWindow1(XlWindow1 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE2038;
  *(void *)(v2 + 16) = 0x3E58002D00000000;
  *(_WORD *)(v2 + 24) = 14310;
  *(_DWORD *)(v2 + 26) = 16842752;
  *(unsigned char *)(v2 + 30) = 1;
  *(_DWORD *)(v2 + 32) = 0x10000;
  *(_WORD *)(v2 + 36) = 600;
}

uint64_t XlWindow1::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 416))(a2, a1);
}

void XlWindow2::XlWindow2(XlWindow2 *this)
{
  XlRecord::XlRecord((XlRecord *)this, 574, 18, 9);
  void *v1 = &unk_26EBE2078;
  v1[2] = 64;
  v1[3] = 0x100010100010100;
  v1[4] = 65792;
}

uint64_t XlWindow2::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 424))(a2, a1);
}

uint64_t XlWindowProtect::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1368))(a2, a1);
}

void XlWindowProtect::~XlWindowProtect(XlWindowProtect *this)
{
}

uint64_t XlWriteAccess::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1376))(a2, a1);
}

void XlWriteProt::XlWriteProt(XlWriteProt *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE2138;
}

uint64_t XlWriteProt::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1384))(a2, a1);
}

void XlWriteProt::~XlWriteProt(XlWriteProt *this)
{
}

uint64_t XlWsBool::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1392))(a2, a1);
}

void XlXct::XlXct(XlXct *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE21B8;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlXct::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1400))(a2, a1);
}

void XlXct::~XlXct(XlXct *this)
{
}

void XlXf::XlXf(XlXf *this, XlHeader *a2)
{
  XlRecord::XlRecord((XlRecord *)this, a2);
  *(void *)uint64_t v2 = &unk_26EBE21F8;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(void *)(v2 + 24) = 0x200000000;
  *(_WORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 36) = 0u;
  *(_OWORD *)(v2 + 52) = 0u;
  *(void *)(v2 + 67) = 0;
  *(_WORD *)(v2 + 75) = 1;
  *(unsigned char *)(v2 + 77) = 1;
  *(void *)(v2 + 78) = 0;
  *(_DWORD *)(v2 + 86) = 0;
}

uint64_t XlXf::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 432))(a2, a1);
}

void XlChartShapePropsStream::XlChartShapePropsStream(XlChartShapePropsStream *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE2238;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = -1;
}

void XlChartShapePropsStream::~XlChartShapePropsStream(XlChartShapePropsStream *this)
{
  *(void *)this = &unk_26EBE2238;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE2238;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartShapePropsStream::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2392))(a2, a1);
}

void XlAutoFilterTable::XlAutoFilterTable(XlAutoFilterTable *this)
{
  *(void *)this = &unk_26EBE2278;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

void XlAutoFilterTable::~XlAutoFilterTable(XlAutoFilterTable *this)
{
  *(void *)this = &unk_26EBE2278;
  XlObjBiff8::clearSubRecords(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlAutoFilterTable::~XlAutoFilterTable(this);
  JUMPOUT(0x23EC997B0);
}

void XlCalculationProperties::~XlCalculationProperties(XlCalculationProperties *this)
{
}

double XlCalculationProperties::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

uint64_t *std::vector<XlCell *,ChAllocator<XlCell *>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t *)__src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = (unint64_t)&__src[-*(void *)a1];
    unint64_t v14 = (unint64_t)&v6[-*(void *)a1] >> 3;
    unint64_t v15 = (v7 - *(void *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1)) {
      unsigned int v16 = v14 + 1;
    }
    else {
      unsigned int v16 = 2 * v15;
    }
    if (v15 >= 0x7FFFFFFF) {
      unint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v30 = a1 + 16;
    if (v17)
    {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      uint64_t v20 = v19;
    }
    else
    {
      int v18 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    v27 = v21;
    v28 = v21;
    v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = (v13 >> 2);
        }
        id v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        uint64_t v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v21;
        v29 = &v23[8 * v24];
        if (v18) {
          operator delete(v18);
        }
      }
    }
    *(void *)uint64_t v21 = *v3;
    v28 = v21 + 8;
    uint64_t v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += *(void *)(a1 + 8) > (unint64_t)v3;
    }
    uint64_t *v4 = *v3;
  }
  return v4;
}

void sub_238DF705C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XlCellTableInfo::~XlCellTableInfo(XlCellTableInfo *this)
{
}

void XlChangeHistory::XlChangeHistory(XlChangeHistory *this)
{
  *(void *)this = &unk_26EBE23A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void XlChangeHistory::~XlChangeHistory(XlChangeHistory *this)
{
  *(void *)this = &unk_26EBE23A0;
  XlChangeHistory::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlChangeHistory::~XlChangeHistory(this);
  JUMPOUT(0x23EC997B0);
}

void *XlChangeHistory::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  uint64_t v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
        uint64_t v3 = v1[2];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

char *XlContentFormatTable::getBuiltInFmtString(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x31) {
    return 0;
  }
  else {
    return off_264D67E98[a2];
  }
}

void XlDataConsolidationInfo::~XlDataConsolidationInfo(XlDataConsolidationInfo *this)
{
  *(void *)this = &unk_26EBE24B8;
  uint64_t v2 = (void **)((char *)this + 8);
  CsSimpleHeapVector<XlRecord>::clear((void *)this + 1);
  *(void *)this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
}

{
  uint64_t vars8;

  XlDataConsolidationInfo::~XlDataConsolidationInfo(this);
  JUMPOUT(0x23EC997B0);
}

double XlDocumentInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    double result = *(double *)(a2 + 16);
    *(double *)(a1 + 16) = result;
  }
  return result;
}

void XlDocumentInfo::~XlDocumentInfo(XlDocumentInfo *this)
{
}

double XlDocumentPresentation::setDefault(XlDocumentPresentation *this)
{
  *((_DWORD *)this + 2) = 0x10000;
  *((unsigned char *)this + 12) = 1;
  *(void *)((char *)this + 14) = 0x2D000002580000;
  *(_DWORD *)((char *)this + 22) = 937836120;
  *(void *)&double result = 16842752;
  *(_DWORD *)((char *)this + 26) = 16842752;
  return result;
}

double XlDocumentPresentation::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
    double result = *(double *)(a2 + 14);
    *(double *)(a1 + 14) = result;
    *(_DWORD *)(a1 + 22) = *(_DWORD *)(a2 + 22);
    *(_DWORD *)(a1 + 26) = *(_DWORD *)(a2 + 26);
  }
  return result;
}

void XlDocumentPresentationTable::setDefault(XlDocumentPresentationTable *this)
{
  XlDocumentPresentationTable::clear(this);
  uint64_t v2 = (XlDocumentPresentation *)operator new(0x20uLL);
  XlDocumentPresentation::XlDocumentPresentation(v2);
  XlDocumentPresentation::setDefault(v2);
  XlChangeHistory::appendChangeLogEntry(this, v2);
}

void sub_238DF74C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlDocumentProperties::takeThemeData(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = this;
    this = *(void *)(this + 104);
    if (this) {
      this = MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
    *(_DWORD *)(v5 + 112) = a3;
    *(void *)(v5 + 104) = a2;
  }
  return this;
}

uint64_t XlDocumentProtection::operator=(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  }
  return result;
}

void XlDocumentProtection::~XlDocumentProtection(XlDocumentProtection *this)
{
}

void XlEshGhost::XlEshGhost(XlEshGhost *this, char a2)
{
  EshObject::EshObject((EshObject *)this, 0xF33Fu);
  *(void *)uint64_t v3 = &unk_26EBE2648;
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 20) = a2;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 24) = 0;
}

void XlEshGhost::~XlEshGhost(XlEshGhost *this)
{
  *(void *)this = &unk_26EBE2648;
  uint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  if (((v3 - (void)v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      if (v2[v4])
      {
        MEMORY[0x23EC997B0](v2[v4], 0x1000C408B6DE1C6);
        uint64_t v2 = (void *)*((void *)this + 3);
        uint64_t v3 = *((void *)this + 4);
      }
      if (v4 >= ((unint64_t)(v3 - (void)v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      v2[v4++] = 0;
      uint64_t v2 = (void *)*((void *)this + 3);
      uint64_t v3 = *((void *)this + 4);
    }
    while (v4 < ((unint64_t)(v3 - (void)v2) >> 3));
  }
  *((void *)this + 4) = v2;
  if (v2) {
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlEshGhost::~XlEshGhost(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlEshGhost::getNumChildren(XlEshGhost *this)
{
  return (*((void *)this + 4) - *((void *)this + 3)) >> 3;
}

uint64_t XlEshGhost::getChildType(XlEshGhost *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (((unint64_t)(*((void *)this + 4) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int16 *)(v3 + 10);
}

uint64_t XlEshGhost::getChildVersion(XlEshGhost *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (((unint64_t)(*((void *)this + 4) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  return *(unsigned __int8 *)(v3 + 12);
}

void XlEshGhost::setNumChildren(XlEshGhost *this, unsigned int a2)
{
  uint64_t v3 = (char **)((char *)this + 24);
  unint64_t v4 = *((void *)this + 4) - *((void *)this + 3);
  unint64_t v5 = v4 >> 3;
  if ((v4 >> 3) < a2)
  {
    unint64_t v7 = (char *)this + 40;
    unint64_t v8 = v4 >> 3;
    do
    {
      uint64_t v9 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v9);
      unint64_t v11 = (EshHeader **)*((void *)this + 4);
      unint64_t v10 = *((void *)this + 5);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = (char *)v11 - *v3;
        unint64_t v14 = (v10 - (unint64_t)*v3) >> 3;
        unsigned int v15 = 2 * v14;
        if (2 * (int)v14 <= (v13 >> 3) + 1) {
          unsigned int v15 = (v13 >> 3) + 1;
        }
        if (v14 >= 0x7FFFFFFF) {
          unint64_t v16 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v7, v16);
          uint64_t v19 = v18;
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v19 = 0;
        }
        uint64_t v20 = (EshHeader **)&v17[v13 & 0x7FFFFFFF8];
        char *v20 = v9;
        uint64_t v12 = v20 + 1;
        unint64_t v22 = (char *)*((void *)this + 3);
        uint64_t v21 = (char *)*((void *)this + 4);
        if (v21 != v22)
        {
          do
          {
            id v23 = (EshHeader *)*((void *)v21 - 1);
            v21 -= 8;
            *--uint64_t v20 = v23;
          }
          while (v21 != v22);
          uint64_t v21 = *v3;
        }
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v12;
        *((void *)this + 5) = &v17[8 * v19];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        void *v11 = v9;
        uint64_t v12 = v11 + 1;
      }
      *((void *)this + 4) = v12;
      LODWORD(v8) = v8 + 1;
    }
    while (v8 != a2);
  }
  int v24 = v5 - a2;
  if (v5 > a2)
  {
    uint64_t v25 = 8 * a2;
    do
    {
      v26 = *v3;
      uint64_t v27 = *(void *)&(*v3)[v25];
      if (v27)
      {
        MEMORY[0x23EC997B0](v27, 0x1000C408B6DE1C6);
        v26 = *v3;
      }
      *(void *)&v26[v25] = 0;
      v25 += 8;
      --v24;
    }
    while (v24);
  }
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v3, a2);
}

void sub_238DF7968(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlEshGhost::isAtom(XlEshGhost *this)
{
  return 0;
}

uint64_t XlEshGhost::getChildHeader(XlEshGhost *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (((unint64_t)(*((void *)this + 4) - v2) >> 3) <= a2) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * a2);
}

void non-virtual thunk to'XlEshGroup::~XlEshGroup(XlEshGroup *this)
{
  uint64_t v1 = (XlEshGroup *)((char *)this - 272);
  *((void *)this - 34) = &unk_26EBE26E8;
  *(void *)this = &unk_26EBE2798;
  XlEshGroup::cleanup((XlEshGroup *)((char *)this - 272));
  EshGroup::~EshGroup(v1);
}

{
  XlEshGroup::~XlEshGroup((XlEshGroup *)((char *)this - 272));
}

void non-virtual thunk to'XlEshShape::~XlEshShape(XlEshShape *this)
{
  uint64_t v1 = (XlEshShape *)((char *)this - 416);
  *((void *)this - 52) = &unk_26EBE28B8;
  *(void *)this = &unk_26EBE2988;
  XlEshShape::cleanup((XlEshShape *)((char *)this - 416));
  EshContentBase::~EshContentBase(v1);
}

{
  XlEshShape::~XlEshShape((XlEshShape *)((char *)this - 416));
}

uint64_t XlFileProtection::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    OcText::operator=(a1 + 16, a2 + 16);
    OcText::operator=(a1 + 64, a2 + 64);
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    size_t v4 = *(unsigned int *)(a2 + 128);
    *(_DWORD *)(a1 + 128) = v4;
    if (*(void *)(a2 + 120))
    {
      unint64_t v5 = operator new[](v4);
      *(void *)(a1 + 120) = v5;
      memcpy(v5, *(const void **)(a2 + 120), *(unsigned int *)(a1 + 128));
    }
    else
    {
      *(void *)(a1 + 120) = 0;
    }
  }
  return a1;
}

void *XlFileProtection::setEncryptionInfo(XlFileProtection *this, const unsigned __int8 *a2, unsigned int a3)
{
  double result = (void *)*((void *)this + 15);
  if (result) {
    double result = (void *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
  }
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  if (a2 && a3)
  {
    *((_DWORD *)this + 32) = a3;
    unint64_t v7 = operator new[](a3);
    *((void *)this + 15) = v7;
    size_t v8 = *((unsigned int *)this + 32);
    return memcpy(v7, a2, v8);
  }
  return result;
}

XlFont *XlFontTable::setDefault(XlFontTable *this)
{
  uint64_t v2 = (void **)((char *)this + 64);
  CsSimpleHeapVector<XlRecord>::clear((void *)this + 8);
  uint64_t v3 = (XlFont *)operator new(0x38uLL);
  XlFont::XlFont(v3);
  size_t v4 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v4);
  OcText::operator=((uint64_t)v4 + 8, (uint64_t)this + 8);
  XlBoundSheet::setName((XlBoundSheet *)v3, v4);
  v3->var3 = *((_WORD *)this + 28);
  uint64_t v12 = v3;
  CsSimpleHeapVector<XlRecord>::pushBack(v2, (uint64_t *)&v12);
  if (v12) {
    (*((void (**)(XlFont *))v12->var0 + 1))(v12);
  }
  unint64_t v5 = (XlFont *)operator new(0x38uLL);
  XlFont::XlFont(v5);
  unint64_t v6 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v6);
  OcText::operator=((uint64_t)v6 + 8, (uint64_t)this + 8);
  XlBoundSheet::setName((XlBoundSheet *)v5, v6);
  v5->var7 = 1;
  v5->var5 = 700;
  v5->var3 = *((_WORD *)this + 28);
  uint64_t v12 = v5;
  CsSimpleHeapVector<XlRecord>::pushBack(v2, (uint64_t *)&v12);
  if (v12) {
    (*((void (**)(XlFont *))v12->var0 + 1))(v12);
  }
  unint64_t v7 = (XlFont *)operator new(0x38uLL);
  XlFont::XlFont(v7);
  size_t v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  OcText::operator=((uint64_t)v8 + 8, (uint64_t)this + 8);
  XlBoundSheet::setName((XlBoundSheet *)v7, v8);
  v7->var8 = 1;
  v7->var3 = *((_WORD *)this + 28);
  uint64_t v12 = v7;
  CsSimpleHeapVector<XlRecord>::pushBack(v2, (uint64_t *)&v12);
  if (v12) {
    (*((void (**)(XlFont *))v12->var0 + 1))(v12);
  }
  uint64_t v9 = (XlFont *)operator new(0x38uLL);
  XlFont::XlFont(v9);
  unint64_t v10 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v10);
  OcText::operator=((uint64_t)v10 + 8, (uint64_t)this + 8);
  XlBoundSheet::setName((XlBoundSheet *)v9, v10);
  *(_WORD *)&v9->var7 = 257;
  v9->var5 = 700;
  v9->var3 = *((_WORD *)this + 28);
  uint64_t v12 = v9;
  CsSimpleHeapVector<XlRecord>::pushBack(v2, (uint64_t *)&v12);
  double result = v12;
  if (v12) {
    return (XlFont *)(*((uint64_t (**)(XlFont *))v12->var0 + 1))(v12);
  }
  return result;
}

void sub_238DF7FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void XlTheme::XlTheme(XlTheme *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE2A88;
  v2[2] = 0;
  v2[3] = 0xFFFFFFFF00000000;
}

void XlTheme::~XlTheme(XlTheme *this)
{
  *(void *)this = &unk_26EBE2A88;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE2A88;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlTheme::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1600))(a2, a1);
}

void XlLinkOperandTable::~XlLinkOperandTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlLinkTable::getWorkbookFirstSheetTab(XlLinkTable *this, unsigned int a2)
{
  return *(__int16 *)(XlMerge::getMergeRegion((XlLinkTable *)((char *)this + 8), a2) + 2);
}

uint64_t XlLinkTable::getWorkbookLastSheetTab(XlLinkTable *this, unsigned int a2)
{
  return *(__int16 *)(XlMerge::getMergeRegion((XlLinkTable *)((char *)this + 8), a2) + 4);
}

uint64_t XlLinkTable::getRefType(XlLinkTable *this, unsigned int a2)
{
  MergeRegion = (unsigned __int16 *)XlMerge::getMergeRegion((XlLinkTable *)((char *)this + 8), a2);
  return *(__int16 *)(XlLinkTable::getLink(this, *MergeRegion) + 16);
}

char *XlNameTable::getBuiltIn(XlNameTable *this, unsigned int a2)
{
  if (a2 > 0xD) {
    return 0;
  }
  else {
    return off_264D68028[(char)a2];
  }
}

void XlCustomViewInfoTable::~XlCustomViewInfoTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlInterfaceTable::~XlInterfaceTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlPivotTable::~XlPivotTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlRangeProtectionTable::~XlRangeProtectionTable(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlRouting::~XlRouting(void **this)
{
  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26EBDAF88;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x23EC997B0);
}

void XlPhoneticTable::XlPhoneticTable(XlPhoneticTable *this)
{
  *(void *)this = &unk_26EBE2DE8;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = 3;
  *((_DWORD *)this + 3) = 1;
  *((_WORD *)this + 8) = 257;
  *((unsigned char *)this + 18) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
}

void XlPhoneticTable::~XlPhoneticTable(XlPhoneticTable *this)
{
  *(void *)this = &unk_26EBE2DE8;
  XlRangeProtection::clearRanges((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  XlPhoneticTable::~XlPhoneticTable(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t XlPhoneticTable::setDefault(uint64_t this)
{
  *(_WORD *)(this + 16) = 257;
  *(unsigned char *)(this + 18) = 0;
  *(_WORD *)(this + 8) = 0;
  *(unsigned char *)(this + 10) = 3;
  *(_DWORD *)(this + 12) = 1;
  return XlRangeProtection::clearRanges(this);
}

uint64_t *std::vector<XlCellRow *,ChAllocator<XlCellRow *>>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t v3 = a3;
  size_t v4 = (uint64_t *)__src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = (unint64_t)&__src[-*(void *)a1];
    unint64_t v14 = (unint64_t)&v6[-*(void *)a1] >> 3;
    unint64_t v15 = (v7 - *(void *)a1) >> 3;
    if (2 * (int)v15 <= (v14 + 1)) {
      unsigned int v16 = v14 + 1;
    }
    else {
      unsigned int v16 = 2 * v15;
    }
    if (v15 >= 0x7FFFFFFF) {
      unint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v30 = a1 + 16;
    if (v17)
    {
      unsigned int v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 16, v17);
      uint64_t v20 = v19;
    }
    else
    {
      unsigned int v18 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v18[8 * (v13 >> 3)];
    __p = v18;
    uint64_t v27 = v21;
    v28 = v21;
    v29 = &v18[8 * v20];
    if ((v13 >> 3) == v20)
    {
      if (v20)
      {
        v21 -= (4 * v20 + 4) & 0x7FFFFFFF8;
        uint64_t v27 = v21;
      }
      else
      {
        if ((v13 >> 2) <= 1) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = (v13 >> 2);
        }
        id v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v8, v22);
        uint64_t v21 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v21;
        v29 = &v23[8 * v24];
        if (v18) {
          operator delete(v18);
        }
      }
    }
    *(void *)uint64_t v21 = *v3;
    v28 = v21 + 8;
    size_t v4 = std::vector<ODIHRange,ChAllocator<ODIHRange>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += *(void *)(a1 + 8) > (unint64_t)v3;
    }
    uint64_t *v4 = *v3;
  }
  return v4;
}

void sub_238DF8D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XlSheetBackgroundInfo::~XlSheetBackgroundInfo(XlSheetBackgroundInfo *this)
{
}

void XlSheetInfo::~XlSheetInfo(XlSheetInfo *this)
{
}

XlWindow2 *XlSheetPresentation::setDefault(XlSheetPresentation *this)
{
  XlSheetPresentation::reset(this);
  uint64_t v2 = (XlWindow2 *)operator new(0x28uLL);
  double result = XlWindow2::XlWindow2(v2);
  this->var1 = v2;
  return result;
}

void sub_238DF8EA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlSheetPresentationTable::setDefault(XlSheetPresentationTable *this)
{
  XlSheetPresentationTable::reset(this);
  uint64_t v2 = (XlSheetPresentation *)operator new(0x40uLL);
  XlSheetPresentation::XlSheetPresentation(v2);
  XlSheetPresentation::setDefault(v2);
  XlChangeHistory::appendChangeLogEntry(this, (XlRecord *)v2);
}

void sub_238DF8F40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL XlStyleTable::isValidBuiltInStyleID(XlStyleTable *this)
{
  return this < 0xA;
}

void XlWorksheetProtection::~XlWorksheetProtection(XlWorksheetProtection *this)
{
}

uint64_t XlEshParserVisitor::visit(XlEshParserVisitor *this, XlEshClientTextBox *a2)
{
  if ((int)EshRecord::getDataLength(a2) >= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  return 1;
}

uint64_t XlFormatParser::readDigitToken(XlFormatParser *this, XlFmtPtg *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v4 = *((_DWORD *)this + 6);
  *(_DWORD *)a2 = 77;
  unsigned int Character = OcText::getCharacter(*(OcText **)this, v4);
  if (Character <= 0xFF)
  {
    unint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263EF8318];
    uint64_t v9 = Character;
    while (1)
    {
      unint64_t v6 = v7;
      if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x400) == 0 || v7 > 0x3E) {
        break;
      }
      v14[v7] = v9;
      unsigned int v10 = v4 + v7 + 1;
      unint64_t v11 = *(OcText **)this;
      if (!*(void *)this || v11->var3 > v10)
      {
        unsigned int v12 = OcText::getCharacter(v11, v10);
        uint64_t v9 = v12;
        unint64_t v7 = v6 + 1;
        if (v12 <= 0xFF) {
          continue;
        }
      }
      LODWORD(v6) = v6 + 1;
      LOWORD(v4) = v6 + v4;
      goto LABEL_11;
    }
    LOWORD(v4) = v4 + v7;
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_11:
  v14[v6] = 0;
  *((double *)a2 + 2) = atof(v14);
  return (unsigned __int16)(v4 - *((_DWORD *)this + 6));
}

uint64_t XlFormulaParser::normalizeCellRefs(uint64_t this, unsigned __int16 *a2, int a3, int a4)
{
  if (*(unsigned __int8 *)(this + 72) <= 8u)
  {
    int v4 = (__int16)a2[a3];
    if (v4 < 0)
    {
      a2[a4] |= 0x8000u;
      LOWORD(v4) = a2[a3];
      if ((v4 & 0x4000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((v4 & 0x4000) == 0)
    {
LABEL_5:
      a2[a3] = v4;
      return this;
    }
    a2[a4] |= 0x4000u;
    LOWORD(v4) = a2[a3];
    goto LABEL_5;
  }
  return this;
}

uint64_t XlParserVisitor::setStream(XlParserVisitor *this, SsrwOOStream *a2)
{
  uint64_t result = *((void *)this + 2);
  *((void *)this + 2) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return result;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDbCell *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  unsigned int v4 = *((_DWORD *)a2 + 2) + 131068;
  if (*((void *)this + 6)) {
    ChLogFunction("data isn't NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 446);
  }
  int v5 = (unsigned __int16)(v4 >> 1);
  if ((unsigned __int16)(v4 >> 1))
  {
    unint64_t v6 = operator new[](v4 & 0x1FFFE);
    uint64_t v7 = 0;
    *((void *)this + 6) = v6;
    do
    {
      unsigned __int16 v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      uint64_t v9 = (unsigned __int16 *)*((void *)this + 6);
      v9[v7++] = v8;
    }
    while (v5 != v7);
  }
  else
  {
    uint64_t v9 = (unsigned __int16 *)*((void *)this + 6);
  }
  XlDbCell::takeCellOffsets(a2, v9, v5);
  *((void *)this + 6) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRString *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v5 = v4;
  if (v4 >= 1)
  {
    unsigned int v28 = v4;
    unint64_t v6 = operator new[]((v4 + 1));
    *((void *)this + 3) = v6;
    v6[v5] = 0;
    (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3), &v28);
    uint64_t v7 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v7);
    *((void *)this + 4) = v7;
    XlString::takeString((uint64_t)v7, *((char **)this + 3), v28, v5, 0);
    *((void *)this + 3) = 0;
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  XlRString::clearRuns((uint64_t)a2);
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v9 = *((_DWORD *)a2 + 2) - v5 - 9;
  if (v9 >= 2 * v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = v9 >> 1;
  }
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      *((void *)this + 3) = operator new[](2uLL);
      **((unsigned char **)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      *(unsigned char *)(*((void *)this + 3) + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      unint64_t v13 = (void *)*((void *)a2 + 5);
      unint64_t v12 = *((void *)a2 + 6);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = *((void *)a2 + 4);
        unint64_t v16 = (unint64_t)v13 - v15;
        unint64_t v17 = (v12 - v15) >> 3;
        unsigned int v18 = 2 * v17;
        if (2 * (int)v17 <= (v16 >> 3) + 1) {
          unsigned int v18 = (v16 >> 3) + 1;
        }
        if (v17 >= 0x7FFFFFFF) {
          unint64_t v19 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a2 + 48, v19);
          uint64_t v22 = v21;
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v22 = 0;
        }
        id v23 = &v20[v16 & 0x7FFFFFFF8];
        *(void *)id v23 = *((void *)this + 3);
        unint64_t v14 = v23 + 8;
        uint64_t v25 = (char *)*((void *)a2 + 4);
        int v24 = (char *)*((void *)a2 + 5);
        if (v24 != v25)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v23 - 1) = v26;
            v23 -= 8;
          }
          while (v24 != v25);
          int v24 = (char *)*((void *)a2 + 4);
        }
        *((void *)a2 + 4) = v23;
        *((void *)a2 + 5) = v14;
        *((void *)a2 + 6) = &v20[8 * v22];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        void *v13 = *((void *)this + 3);
        unint64_t v14 = v13 + 1;
      }
      *((void *)a2 + 5) = v14;
      *((void *)this + 3) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DF9A08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlContinue *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  size_t v4 = *((unsigned int *)a2 + 2);
  int v8 = v4;
  if (v4)
  {
    unsigned int v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v8);
    __int16 v6 = v8;
  }
  else
  {
    __int16 v6 = 0;
  }
  XlContinue::takeContent((uint64_t)a2, *((unsigned __int8 **)this + 3), v6);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(uint64_t a1, XlChartGelFrame *a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 12, 1);
  size_t v4 = (*((_DWORD *)a2 + 2) - 12);
  unsigned int v8 = v4;
  if (v4 >= 0x2016)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  unsigned int v5 = operator new[](v4);
  *(void *)(a1 + 24) = v5;
  (*(void (**)(void, void *, unsigned int *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), v5, &v8);
  XlChartGelFrame::setBinaryData(a2, *(unsigned __int8 **)(a1 + 24), v8);
  *(void *)(a1 + 24) = 0;
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlEof *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExcel9 *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRubi *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 18) = v4 & 3;
  *((_DWORD *)a2 + 5) = (v4 >> 2) & 3;
  *((unsigned char *)a2 + 24) = (v4 & 0x10) != 0;
  *((unsigned char *)a2 + 25) = (v4 & 0x20) != 0;
  *((unsigned char *)a2 + 26) = (v4 & 0x40) != 0;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v5)
  {
    int v6 = v5;
    do
    {
      uint64_t v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v7);
      XlCondFmt::appendCellRange(a2, v7);
      --v6;
    }
    while (v6);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DF9E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlAddIn *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFilterMode *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlInterfaceEnd *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTemplate *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlWriteProt *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlModify *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlParserVisitor::visit(XlParserVisitor *this, XlFilePass *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v4 = *((_DWORD *)a2 + 2) - 2;
  operator new[]();
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMsoDrawing *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v10 = *((_DWORD *)a2 + 2);
  uint64_t v4 = v10;
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      unsigned int v5 = 0;
      do
      {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 1);
        v5 += v4;
        int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
        uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      }
      while (v6 == 60);
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
      int DataAndContinues = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    }
    else
    {
      int DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v10, 236);
      unsigned int v5 = v10;
    }
    *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
    unsigned int v8 = (unsigned __int8 *)*((void *)this + 3);
  }
  else
  {
    unsigned int v5 = 0;
    unsigned int v8 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, v8, v5);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHdrFooterDrawing *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((void *)this + 3) = 0;
  if (v4 <= 0xD
    || (*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) != 2150)
  {
    goto LABEL_16;
  }
  (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967282, 1);
  LODWORD(v6) = 0;
  uint64_t v7 = v4;
  do
  {
    if (v7 <= 0xD) {
      goto LABEL_16;
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v7, 1);
    if (v6 > 13 - (int)v7) {
      goto LABEL_16;
    }
    size_t v6 = (v7 + v6 - 14);
    int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    uint64_t v7 = v9;
  }
  while (v8 == 2150);
  unsigned int v16 = v9;
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (!*((unsigned char *)a2 + 36) && v6)
  {
    *((void *)this + 3) = operator new[](v6);
    (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v5, 0);
    unsigned int v11 = 0;
    unsigned int v16 = v4;
    while (1)
    {
      (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      v16 -= 14;
      if (v6 < v16 || v11 > v6 - v16) {
        break;
      }
      (*(void (**)(void, void, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), *((void *)this + 3) + v11, &v16);
      v11 += v16;
      int v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      if (v13 != 2150) {
        goto LABEL_15;
      }
    }
LABEL_16:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
LABEL_15:
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
  *((_DWORD *)a2 + 2) = v10 - *((_DWORD *)this + 18) - 4;
  XlGenericRecord::takeContents(a2, *((unsigned __int8 **)this + 3), v6);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMsoDrawingGroup *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v10 = *((_DWORD *)a2 + 2);
  uint64_t v4 = v10;
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      unsigned int v5 = 0;
      do
      {
        do
        {
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 1);
          v5 += v4;
          int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
          uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
        }
        while (v6 == 235);
      }
      while ((unsigned __int16)v6 == 60);
      int DataAndContinues = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    }
    else
    {
      int DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v10, 235);
      unsigned int v5 = v10;
    }
    *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
    int v8 = (unsigned __int8 *)*((void *)this + 3);
  }
  else
  {
    unsigned int v5 = 0;
    int v8 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, v8, v5);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlAddMenu *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1;
  if (v4 != 6)
  {
    unsigned int v7 = 0;
    int v8 = v6 + v5;
    do
    {
      unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      if (v9)
      {
        char v11 = v10;
        unint64_t v12 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v12);
        *((void *)this + 4) = v12;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v11, v8, v12);
        switch(v7)
        {
          case 0u:
            XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
            break;
          case 1u:
            XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
            break;
          case 2u:
            XlAddMenu::setMacro(a2, *((XlString **)this + 4));
            break;
          case 3u:
            XlAddMenu::setStatus(a2, *((XlString **)this + 4));
            break;
          default:
            XlAddMenu::setHelp(a2, *((XlString **)this + 4));
            break;
        }
        *((void *)this + 4) = 0;
      }
    }
    while (v7++ < 4);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFACD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlAutoFilter *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::parse(this, (XlAutoFilter *)((char *)a2 + 16), v4);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlDoper **XlParserVisitor::parse(XlParserVisitor *this, XlAutoFilterData *a2, int a3)
{
  int v6 = (XlDoper *)operator new(0x28uLL);
  XlDoper::XlDoper(v6);
  unint64_t v19 = v6;
  unsigned int v7 = (XlDoper *)operator new(0x28uLL);
  XlDoper::XlDoper(v7);
  unsigned int v18 = v7;
  *((_WORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v8 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 10) = v9 & 1;
  v8.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v9) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 11) = vmovn_s16(v8).u32[0];
  *((unsigned char *)a2 + 15) = (v9 & 0x40) != 0;
  *((_WORD *)a2 + 8) = (unsigned __int16)v9 >> 7;
  (*(void (**)(XlParserVisitor *, XlAddMenu *))(*(void *)this + 1496))(this, v19);
  (*(void (**)(XlParserVisitor *, XlAddMenu *))(*(void *)this + 1496))(this, v18);
  unsigned int v10 = *((unsigned __int8 *)v19 + 16);
  if (*((unsigned char *)v19 + 16))
  {
    char v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    unint64_t v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((void *)this + 4) = v12;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v11, a3, v12);
    XlAddMenu::setMenuItem(v19, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  int v13 = v18;
  unsigned int v14 = *((unsigned __int8 *)v18 + 16);
  if (*((unsigned char *)v18 + 16))
  {
    char v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    unsigned int v16 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v16);
    *((void *)this + 4) = v16;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v14, v15, a3, v16);
    XlAddMenu::setMenuItem(v18, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    int v13 = v18;
  }
  XlAutoFilterData::setSecondCondDoper(a2, v13);
  unsigned int v18 = 0;
  XlAutoFilterData::setFirstCondDoper(a2, v19);
  unint64_t v19 = 0;
  ChAutoPtr<XlDoper>::~ChAutoPtr(&v18);
  return ChAutoPtr<XlDoper>::~ChAutoPtr(&v19);
}

void sub_238DFB044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, XlDoper *a10)
{
  operator delete(v10);
  ChAutoPtr<XlDoper>::~ChAutoPtr((XlDoper **)&a9);
  ChAutoPtr<XlDoper>::~ChAutoPtr(&a10);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBackup *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCoordList *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = (unsigned __int16)(v4 >> 2);
  if ((unsigned __int16)(v4 >> 2))
  {
    do
    {
      int v6 = (XlVertex *)operator new(4uLL);
      XlVertex::XlVertex(v6);
      (*(void (**)(XlParserVisitor *, XlVertex *))(*(void *)this + 1592))(this, v6);
      XlCoordList::appendVertex(a2, v6);
      --v5;
    }
    while (v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFB21C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCrn *a2)
{
  int v4 = *((_DWORD *)a2 + 2) - 4;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  while (v4)
  {
    int v5 = (XlOper *)operator new(0x20uLL);
    XlOper::XlOper(v5);
    unsigned int v7 = v5;
    (*(void (**)(XlParserVisitor *, XlOper *))(*(void *)this + 1584))(this, v5);
    XlCrn::appendOperand(a2, v7);
    v4 -= XlOper::getDataSize(v7);
    unsigned int v7 = 0;
    ChAutoPtr<XlOper>::~ChAutoPtr(&v7);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFB3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDCon *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((unsigned char *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDConBin *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  uint64_t v5 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    unsigned int v6 = (*(uint64_t (**)(void))(v5 + 64))();
  }
  else {
    unsigned int v6 = (*(uint64_t (**)(void))(v5 + 80))();
  }
  unsigned int v7 = v6;
  *((_WORD *)a2 + 10) = v6;
  if (v6)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v8 = 0;
    }
    else {
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    int v9 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8);
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v9 > v4
      && *((_DWORD *)a2 + 2) != 8228)
    {
      int v16 = 2911;
      goto LABEL_28;
    }
    char v11 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v11);
    *((void *)this + 4) = v11;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v11);
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  else
  {
    (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  uint64_t v12 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    unsigned int v13 = (*(uint64_t (**)(void))(v12 + 64))();
  }
  else {
    unsigned int v13 = (*(uint64_t (**)(void))(v12 + 80))();
  }
  unsigned int v14 = v13;
  *((_WORD *)a2 + 16) = v13;
  if (!v13) {
    goto LABEL_29;
  }
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    char v15 = 0;
  }
  else {
    char v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  int v17 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v14, v15);
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) + v17 <= v4
    || *((_DWORD *)a2 + 2) == 8228)
  {
    unint64_t v19 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v19);
    *((void *)this + 4) = v19;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v14, v15, v4, v19);
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
    goto LABEL_29;
  }
  int v16 = 2945;
LABEL_28:
  ChLogFunction("Failure to parse XlDConBin", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", v16);
LABEL_29:
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFB8F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDConName *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  uint64_t v5 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    unsigned int v6 = (*(uint64_t (**)(void))(v5 + 64))();
  }
  else {
    unsigned int v6 = (*(uint64_t (**)(void))(v5 + 80))();
  }
  unsigned int v7 = v6;
  *((_WORD *)a2 + 8) = v6;
  if (v6)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v8 = 0;
    }
    else {
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    int v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v9);
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  uint64_t v10 = **((void **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u) {
    unsigned int v11 = (*(uint64_t (**)(void))(v10 + 64))();
  }
  else {
    unsigned int v11 = (*(uint64_t (**)(void))(v10 + 80))();
  }
  unsigned int v12 = v11;
  *((_WORD *)a2 + 16) = v11;
  if (v11)
  {
    if (*((unsigned __int8 *)a2 + 14) < 9u) {
      char v13 = 0;
    }
    else {
      char v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    }
    unsigned int v14 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v14);
    *((void *)this + 4) = v14;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v12, v13, v4, v14);
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFBB94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDelMenu *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = v5;
  *((unsigned char *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1;
  if (v4 != 5 && v5 == -1)
  {
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    int v10 = v6;
    if (v6)
    {
      unsigned int v7 = operator new[]((v6 + 1));
      *((void *)this + 3) = v7;
      (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v7, &v10);
      char v8 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v8);
      *((void *)this + 4) = v8;
      XlString::takeString((uint64_t)v8, *((char **)this + 3), v10 + 1, v10, 0);
      *((void *)this + 3) = 0;
      XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFBDA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDocRoute *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  char v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 24) = v4 & 1;
  *((unsigned char *)a2 + 25) = (v4 & 2) != 0;
  *((unsigned char *)a2 + 26) = (v4 & 4) != 0;
  *((unsigned char *)a2 + 27) = (v4 & 8) != 0;
  *((unsigned char *)a2 + 28) = v4 < 0;
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  size_t v6 = *((unsigned __int16 *)a2 + 15);
  unsigned int v26 = v6;
  if (v6)
  {
    unsigned int v7 = operator new[](v6);
    *((void *)this + 3) = v7;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v7, &v26);
    char v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    XlString::takeString((uint64_t)v8, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlAddMenu::setStatus(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  size_t v9 = *((unsigned __int16 *)a2 + 16);
  unsigned int v26 = v9;
  if (v9)
  {
    int v10 = operator new[](v9);
    *((void *)this + 3) = v10;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v10, &v26);
    unsigned int v11 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v11);
    *((void *)this + 4) = v11;
    XlString::takeString((uint64_t)v11, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlAddMenu::setHelp(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  size_t v12 = *((unsigned __int16 *)a2 + 17);
  unsigned int v26 = v12;
  if (v12)
  {
    char v13 = operator new[](v12);
    *((void *)this + 3) = v13;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v13, &v26);
    unsigned int v14 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v14);
    *((void *)this + 4) = v14;
    XlString::takeString((uint64_t)v14, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlDocRoute::setRoutingID(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  size_t v15 = *((unsigned __int16 *)a2 + 18);
  unsigned int v26 = v15;
  if (v15)
  {
    int v16 = operator new[](v15);
    *((void *)this + 3) = v16;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v16, &v26);
    int v17 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v17);
    *((void *)this + 4) = v17;
    XlString::takeString((uint64_t)v17, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  size_t v18 = *((unsigned __int16 *)a2 + 19);
  unsigned int v26 = v18;
  if (v18)
  {
    unint64_t v19 = operator new[](v18);
    *((void *)this + 3) = v19;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v19, &v26);
    uint64_t v20 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v20);
    *((void *)this + 4) = v20;
    XlString::takeString((uint64_t)v20, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlDocRoute::setBookTitle(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  size_t v21 = *((unsigned __int16 *)a2 + 20);
  unsigned int v26 = v21;
  if (v21)
  {
    uint64_t v22 = operator new[](v21);
    *((void *)this + 3) = v22;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v22, &v26);
    id v23 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v23);
    *((void *)this + 4) = v23;
    XlString::takeString((uint64_t)v23, *((char **)this + 3), v26, v26 - 1, 2);
    *((void *)this + 3) = 0;
    XlDocRoute::setOriginatorName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  unsigned int v26 = v5;
  if (v5)
  {
    int v24 = operator new[](v5);
    *((void *)this + 3) = v24;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v24, &v26);
    XlDocRoute::setOriginatorAddress(a2, *((unsigned __int8 **)this + 3), v26);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFC3D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDsf *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlEdg *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExternCount *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFileSharing2 *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 1;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = v6;
  if (v6)
  {
    unsigned int v7 = v6;
    char v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFC7E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFnGroupCount *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFnGroupName *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v6)
  {
    unsigned __int16 v7 = v6;
    char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    char v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFC9E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlGcw *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *(_DWORD *)int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v4 = operator new[](*(unsigned int *)v6);
  *((void *)this + 3) = v4;
  (*(void (**)(void, void *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v4, v6);
  XlGcw::setTable(a2, *((unsigned __int8 **)this + 3), v6[0]);
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlInterfaceHdr *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlLpr *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v6 & 1;
  *((unsigned char *)a2 + 17) = (v6 & 2) != 0;
  *((unsigned char *)a2 + 18) = (v6 & 4) != 0;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v7)
  {
    unsigned __int16 v8 = v7;
    char v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v10, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFCDD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlList *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
  (*(void (**)(XlParserVisitor *, char *))(*(void *)this + 1504))(this, (char *)a2 + 16);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 11, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 8, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  *((unsigned char *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) & 1;
  *((unsigned char *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) & 1;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 44, 1);
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v4, (XlString *)((char *)a2 + 32));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v4, (XlString *)((char *)a2 + 136));
  if (v5)
  {
    for (unsigned int i = 0; i < v5; ++i)
      XlParserVisitor::parseListColumn(this, a2, 0, v4);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t *XlParserVisitor::parseListColumn(XlParserVisitor *this, XlList *a2, unsigned __int16 a3, int a4)
{
  int v7 = (XlListColumn *)operator new(0x268uLL);
  XlListColumn::XlListColumn(v7);
  size_t v21 = v7;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  char v10 = (unsigned int *)((char *)v7 + 376);
  XlListDataFormat::setType(v10, v9);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  unsigned int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  XlListColumn::setTotalsCalculation((unsigned int *)v21, v11);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  if (v8) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  char v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  char v13 = v21;
  *((unsigned char *)v21 + 216) = v12 & 1;
  *((unsigned char *)v13 + 2XlPtg::XlPtg((uint64_t)this + 8, 64) = (v12 & 4) != 0;
  uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), a4, (XlString *)((char *)v21 + 8));
  if (*((unsigned char *)a2 + 26)) {
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), a4, (XlString *)((char *)v21 + 112));
  }
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v14, 1);
  if (*((unsigned char *)v21 + 216))
  {
    int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
    if (v15)
    {
      FilterReference = (XlAutoFilterData *)XlListColumn::getFilterReference(v21);
      XlParserVisitor::parse(this, FilterReference, a4);
    }
  }
  if (*v10) {
    XlParserVisitor::parse(this, (XlListDataFormat *)v10, a4);
  }
  int v17 = v21;
  if (*((unsigned char *)v21 + 264))
  {
    XmlMapReference = (XlString *)XlListColumn::getXmlMapReference(v21);
    XlParserVisitor::parse(this, XmlMapReference, a4);
    int v17 = v21;
  }
  uint64_t v20 = 0;
  size_t v21 = 0;
  uint64_t v22 = v17;
  CsSimpleHeapVector<XlRecord>::pushBack((void **)a2 + 30, (uint64_t *)&v22);
  ChAutoPtr<XlListColumn>::~ChAutoPtr((uint64_t *)&v22);
  ChAutoPtr<XlListColumn>::~ChAutoPtr(&v20);
  return ChAutoPtr<XlListColumn>::~ChAutoPtr((uint64_t *)&v21);
}

void sub_238DFD548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  ChAutoPtr<XlListColumn>::~ChAutoPtr((uint64_t *)va2);
  ChAutoPtr<XlListColumn>::~ChAutoPtr((uint64_t *)va);
  ChAutoPtr<XlListColumn>::~ChAutoPtr((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::parse(XlParserVisitor *this, XlListDataFormat *a2, int a3)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (XlListDataFormat::isDecimalPlaceCountValid(a2)) {
    XlListDataFormat::setDecimalPlaceCount(a2, v6);
  }
  if (XlListDataFormat::isHasFormulaValid(a2)) {
    XlListDataFormat::setHasFormula((uint64_t)a2, (v6 & 0x800000) != 0);
  }
  char v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (XlListDataFormat::isShowAsPercentageValid(a2)) {
    XlListDataFormat::setShowAsPercentage((uint64_t)a2, v7 & 1);
  }
  char v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (XlListDataFormat::isIsRequiredValid(a2)) {
    XlListDataFormat::setIsRequired((uint64_t)a2, (v8 & 2) != 0);
  }
  if (XlListDataFormat::isDecimalPlaceCountValid(a2)) {
    XlListDataFormat::setHasMinimumBound((uint64_t)a2, (v8 & 4) != 0);
  }
  if (XlListDataFormat::isHasMaximumBoundValid(a2)) {
    XlListDataFormat::setHasMaximumBound((uint64_t)a2, (v8 & 8) != 0);
  }
  if (XlListDataFormat::isHasDefaultValid(a2)) {
    XlListDataFormat::setHasDefault((uint64_t)a2, (v8 & 0x10) != 0);
  }
  if (XlListDataFormat::isFormulaValid(a2))
  {
    if ((v6 & 0x200) != 0) {
      uint64_t v9 = 13;
    }
    else {
      uint64_t v9 = 7;
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v9, 1);
    char v10 = (SsrwOOStream *)*((void *)this + 2);
    FormulaReference = (XlString *)XlListDataFormat::getFormulaReference(a2);
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v10, a3, FormulaReference);
  }
  if (XlListDataFormat::isHasDefaultValid(a2) && XlListDataFormat::getHasDefault(a2))
  {
    if (XlListDataFormat::isDefaultStringValid(a2))
    {
      char v12 = (SsrwOOStream *)*((void *)this + 2);
      DefaultStringReference = (XlString *)XlListDataFormat::getDefaultStringReference(a2);
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v12, a3, DefaultStringReference);
    }
    else if (XlListDataFormat::isDefaultNumberValid(a2))
    {
      double v14 = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
      XlListDataFormat::setDefaultNumber(a2, v14);
    }
    else if (XlListDataFormat::isDefaultCheckboxValid(a2))
    {
      char v15 = (*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) != 0;
      XlListDataFormat::setDefaultCheckbox(a2, v15);
    }
  }
  int v16 = *(uint64_t (**)(void))(**((void **)this + 2) + 16);
  return v16();
}

uint64_t XlParserVisitor::parse(XlParserVisitor *this, XlString *a2, int a3)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 2, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4, 1);
  int v6 = (SsrwOOStream *)*((void *)this + 2);
  return XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v6, a3, a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMms *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlObjProj *a2)
{
  *(_DWORD *)char v7 = *((_DWORD *)a2 + 2);
  size_t v4 = *(unsigned int *)v7;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (v4)
  {
    uint64_t v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, v7);
    XlObjProj::setVbProj(a2, *((unsigned __int8 **)this + 3), v7[0]);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlParamQry *a2)
{
  *(_DWORD *)char v8 = *((_DWORD *)a2 + 2) - 6;
  size_t v4 = *(unsigned int *)v8;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = v5 & 3;
  *((unsigned char *)a2 + 24) = (v5 & 4) != 0;
  *((unsigned char *)a2 + 25) = (v5 & 8) != 0;
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v4)
  {
    int v6 = operator new[](v4);
    *((void *)this + 3) = v6;
    (*(void (**)(void, void *, unsigned __int16 *))(**((void **)this + 2) + 56))(*((void *)this + 2), v6, v8);
    XlParamQry::setRgb(a2, *((unsigned __int8 **)this + 3), v8[0]);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPub *a2)
{
  size_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  char v5 = (XlSec *)operator new(0x24uLL);
  XlSec::XlSec(v5);
  unsigned int v9 = *((_DWORD *)a2 + 2) - 44;
  size_t v6 = v9;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  char v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v7 & 1;
  *((unsigned char *)a2 + 17) = (v7 & 2) != 0;
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlArray::setCellRange((XlArray *)a2, v4);
  (*(void (**)(XlParserVisitor *, XlSec *))(*(void *)this + 1568))(this, v5);
  XlPub::setSection((uint64_t)a2, (uint64_t)v5);
  *((_WORD *)a2 + 20) = v6;
  *((void *)this + 3) = operator new[](v6);
  (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
  XlPub::setAlias(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFDE5C(_Unwind_Exception *exception_object)
{
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C408AA14F5FLL);
  }
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C400EA6A39BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlQsi *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v6 & 1;
  *((unsigned char *)a2 + 17) = (v6 & 2) != 0;
  *((unsigned char *)a2 + 18) = (v6 & 4) != 0;
  *((unsigned char *)a2 + 19) = (v6 & 0x80) != 0;
  *((unsigned char *)a2 + 20) = HIBYTE(v6) & 1;
  *((unsigned char *)a2 + 21) = (v6 & 0x400) != 0;
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v7)
  {
    unsigned int v8 = v7;
    unsigned int v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v10, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFE0F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRecipName *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v11 = v4;
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  unsigned int v10 = v5;
  if (v4)
  {
    __int16 v6 = operator new[](v4);
    *((void *)this + 3) = v6;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v6, &v11);
    unsigned int v7 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v7);
    *((void *)this + 4) = v7;
    XlString::takeString((uint64_t)v7, *((char **)this + 3), v11, v11 - 1, 2);
    *((void *)this + 3) = 0;
    XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  if (v5)
  {
    unsigned int v8 = operator new[](v5);
    *((void *)this + 3) = v8;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v8, &v10);
    XlRecipName::setRecipientAddress(a2, *((unsigned __int8 **)this + 3), v10);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFE2B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSound *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  if (v5)
  {
    *((_DWORD *)a2 + 2) = XlParserVisitor::getDataAndContinues(this, &v5, -1) - *((_DWORD *)this + 18);
    XlSound::setSoundData(a2, *((unsigned __int8 **)this + 3), v5);
    *((void *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSub *a2)
{
  unsigned int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  unsigned int v5 = (XlSec *)operator new(0x24uLL);
  XlSec::XlSec(v5);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea(a2, v4);
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 44) = ((*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 2) != 0;
  LODWORD(v4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v8 = (int)v4;
  *((_WORD *)a2 + 23) = (_WORD)v4;
  (*(void (**)(XlParserVisitor *, XlSec *))(*(void *)this + 1568))(this, v5);
  XlSub::setSection(a2, v5);
  *((void *)this + 3) = operator new[](v4);
  (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
  XlRevisionInfo::takeGuidRoot(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  int v8 = *((_DWORD *)a2 + 2) - 44 - v8;
  if (v8)
  {
    int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    *((void *)this + 3) = operator new[]((v8 + 1));
    (*(void (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
    __int16 v6 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v6);
    *((void *)this + 4) = v6;
    XlString::takeString((uint64_t)v6, *((char **)this + 3), v8 + 1, v8, 0);
    *((void *)this + 3) = 0;
    XlAddMenu::setStatus(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFE714(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxDB *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 22) = v5 & 1;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 23) = vmovn_s16(v4).u32[0];
  *((unsigned char *)a2 + 27) = (v5 & 0x20) != 0;
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = v6;
  unsigned int v10 = v6;
  if (v6)
  {
    unsigned int v7 = operator new[](v6);
    *((void *)this + 3) = v7;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v7, &v10);
    int v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    XlString::takeString((uint64_t)v8, *((char **)this + 3), v10, v10, 0);
    *((void *)this + 3) = 0;
    XlAddMenu::setStatus(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFEA44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxDBEx *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((double *)a2 + 2) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxDI *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = v6;
  if (v6 >= 1)
  {
    unsigned int v7 = v6;
    int v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFED74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxEx *a2)
{
  unsigned int v26 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 30) = v4 & 1;
  *((unsigned char *)a2 + 31) = (v4 >> 1) & 0xF;
  *((_WORD *)a2 + 16) = 0;
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 34) = v6 & 1;
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 35) = vmovn_s16(v5).u32[0];
  *((unsigned char *)a2 + 39) = (v6 & 0x20) != 0;
  *((unsigned char *)a2 + 40) = (v6 & 0x40) != 0;
  *((unsigned char *)a2 + 41) = (v6 & 0x80) != 0;
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v26 != 24)
  {
    if (*((__int16 *)a2 + 9) >= 1)
    {
      size_t v7 = *((unsigned __int16 *)a2 + 9);
      unsigned int v26 = *((unsigned __int16 *)a2 + 9);
      int v8 = operator new[](v7);
      *((void *)this + 3) = v8;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v8, &v26);
      char v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      *((void *)this + 4) = v9;
      XlString::takeString((uint64_t)v9, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlAddMenu::setStatus(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    if (*((__int16 *)a2 + 10) >= 1)
    {
      size_t v10 = *((unsigned __int16 *)a2 + 10);
      unsigned int v26 = *((unsigned __int16 *)a2 + 10);
      unsigned int v11 = operator new[](v10);
      *((void *)this + 3) = v11;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v11, &v26);
      char v12 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v12);
      *((void *)this + 4) = v12;
      XlString::takeString((uint64_t)v12, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlAddMenu::setHelp(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    if (*((__int16 *)a2 + 11) >= 1)
    {
      size_t v13 = *((unsigned __int16 *)a2 + 11);
      unsigned int v26 = *((unsigned __int16 *)a2 + 11);
      double v14 = operator new[](v13);
      *((void *)this + 3) = v14;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v14, &v26);
      char v15 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v15);
      *((void *)this + 4) = v15;
      XlString::takeString((uint64_t)v15, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlDocRoute::setRoutingID(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    if (*((__int16 *)a2 + 21) >= 1)
    {
      size_t v16 = *((unsigned __int16 *)a2 + 21);
      unsigned int v26 = *((unsigned __int16 *)a2 + 21);
      int v17 = operator new[](v16);
      *((void *)this + 3) = v17;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v17, &v26);
      size_t v18 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v18);
      *((void *)this + 4) = v18;
      XlString::takeString((uint64_t)v18, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    if (*((__int16 *)a2 + 22) >= 1)
    {
      size_t v19 = *((unsigned __int16 *)a2 + 22);
      unsigned int v26 = *((unsigned __int16 *)a2 + 22);
      uint64_t v20 = operator new[](v19);
      *((void *)this + 3) = v20;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v20, &v26);
      size_t v21 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v21);
      *((void *)this + 4) = v21;
      XlString::takeString((uint64_t)v21, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlDocRoute::setBookTitle(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    if (*((__int16 *)a2 + 23) >= 1)
    {
      size_t v22 = *((unsigned __int16 *)a2 + 23);
      unsigned int v26 = *((unsigned __int16 *)a2 + 23);
      id v23 = operator new[](v22);
      *((void *)this + 3) = v23;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v23, &v26);
      int v24 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v24);
      *((void *)this + 4) = v24;
      XlString::takeString((uint64_t)v24, *((char **)this + 3), v26, v26, 0);
      *((void *)this + 3) = 0;
      XlDocRoute::setOriginatorName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238DFF3E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlParserVisitor::visit(XlParserVisitor *this, XlSxExt *a2)
{
  unsigned int v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = v6 & 7;
  *((unsigned char *)a2 + 20) = (v6 & 8) != 0;
  *((unsigned char *)a2 + 21) = (v6 & 0x10) != 0;
  *((unsigned char *)a2 + 22) = (v6 & 0x20) != 0;
  *((unsigned char *)a2 + 23) = (v6 & 0x40) != 0;
  *((unsigned char *)a2 + 24) = (v6 & 0x80) != 0;
  *((unsigned char *)a2 + 25) = HIBYTE(v6) & 1;
  if ((v6 & 7u) >= 5)
  {
    if ((v6 & 0x40) != 0) {
      int v7 = 4;
    }
    else {
      int v7 = 2;
    }
    if ((~v6 & 0x18) != 0) {
      int v8 = v7;
    }
    else {
      int v8 = 1;
    }
    *((_DWORD *)a2 + 4) = v8;
  }
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v27 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  int v26 = v5;
  if (v10)
  {
    int v13 = 0;
    do
    {
      XlParserVisitor::getHeader(this, v4, *((unsigned char *)a2 + 14));
      double v14 = (XlSxString *)operator new(0x18uLL);
      XlSxString::XlSxString(v14, v4);
      (*(void (**)(XlParserVisitor *, XlSxString *))(*(void *)this + 1200))(this, v14);
      XlCondFmt::appendCellRange(a2, (XlRef *)v14);
      ++v13;
    }
    while (v10 > (__int16)v13);
  }
  if (v12)
  {
    int v15 = 0;
    do
    {
      XlParserVisitor::getHeader(this, v4, *((unsigned char *)a2 + 14));
      size_t v16 = (XlSxString *)operator new(0x18uLL);
      XlSxString::XlSxString(v16, v4);
      (*(void (**)(XlParserVisitor *, XlSxString *))(*(void *)this + 1200))(this, v16);
      XlSxExt::appendODBC(a2, v16);
      ++v15;
    }
    while (v12 > (__int16)v15);
  }
  if (v11)
  {
    int v17 = 0;
    do
    {
      XlParserVisitor::getHeader(this, v4, *((unsigned char *)a2 + 14));
      size_t v18 = (XlSxString *)operator new(0x18uLL);
      XlSxString::XlSxString(v18, v4);
      (*(void (**)(XlParserVisitor *, XlSxString *))(*(void *)this + 1200))(this, v18);
      XlSxExt::appendWebPost(a2, (uint64_t)v18);
      ++v17;
    }
    while (v11 > (__int16)v17);
  }
  if (v9)
  {
    int v19 = 0;
    do
    {
      XlParserVisitor::getHeader(this, v4, *((unsigned char *)a2 + 14));
      int var1 = (unsigned __int16)v4->var1;
      if (var1 == 205)
      {
        (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v4->var0, 1);
        --v19;
      }
      else
      {
        if (var1 != 220)
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 3002;
        }
        size_t v21 = (XlParamQry *)operator new(0x28uLL);
        XlParamQry::XlParamQry(v21, v4);
        (*(void (**)(XlParserVisitor *, XlParamQry *))(*(void *)this + 848))(this, v21);
        XlSxExt::appendParam(a2, v21);
      }
      ++v19;
    }
    while (v9 > (__int16)v19);
  }
  if (v27)
  {
    int v22 = 0;
    do
    {
      XlParserVisitor::getHeader(this, v4, *((unsigned char *)a2 + 14));
      id v23 = (XlSxString *)operator new(0x18uLL);
      XlSxString::XlSxString(v23, v4);
      (*(void (**)(XlParserVisitor *, XlSxString *))(*(void *)this + 1200))(this, v23);
      XlSxExt::appendSQL(a2, (uint64_t)v23);
      ++v22;
    }
    while (v27 > (__int16)v22);
  }
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                      - v26;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (v4)
  {
    JUMPOUT(0x23EC997B0);
  }
  return result;
}

void sub_238DFF9E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFDBType *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFilt *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v4 & 1;
  *((unsigned char *)a2 + 17) = (v4 & 2) != 0;
  *((unsigned char *)a2 + 18) = (v4 & 4) != 0;
  *((unsigned char *)a2 + 19) = (v4 & 8) != 0;
  *((_WORD *)a2 + 10) = v4 >> 6;
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 0x3FF;
  int16x8_t v5 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 24) = v6 & 1;
  *(int16x4_t *)v5.i8 = vdup_n_s16(v6);
  *(uint16x4_t *)v7.i8 = vshl_u16(*(uint16x4_t *)v5.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
  v5.i64[0] = *(void *)&vshl_u16((uint16x4_t)(v5.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 25) = vmovn_s16(v5).u32[0];
  *((unsigned char *)a2 + 29) = (v6 & 0x20) != 0;
  *((unsigned char *)a2 + 30) = (v6 & 0x40) != 0;
  *((unsigned char *)a2 + 31) = (v6 & 0x80) != 0;
  v7.i64[0] &= 0xFF01FF01FF01FF01;
  *((_DWORD *)a2 + 8) = vmovn_s16(v7).u32[0];
  *((unsigned char *)a2 + 36) = (v6 & 0x1000) != 0;
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFormat *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2)) & 1;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxFormula *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxIVd *a2)
{
  unint64_t v4 = *((unsigned int *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if ((unsigned __int16)(v4 >> 1))
  {
    uint64_t v5 = 0;
    *((void *)this + 5) = operator new[](v4 & 0x1FFFE);
    do
    {
      __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      int16x8_t v7 = (__int16 *)*((void *)this + 5);
      v7[v5++] = v6;
    }
    while ((unsigned __int16)(v4 >> 1) != v5);
  }
  else
  {
    int16x8_t v7 = (__int16 *)*((void *)this + 5);
  }
  XlSxIVd::setFieldIDTable(a2, v7, v4 >> 1);
  *((void *)this + 5) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxLi *a2)
{
  unsigned __int16 v11 = *((_WORD *)a2 + 4);
  uint64_t v4 = v11;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((__int16 *)a2 + 8);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (!v4) {
    goto LABEL_10;
  }
  if (v6 < 0)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 1);
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    }
    while (v10 == 60);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
    *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                        - v5;
    uint64_t result = XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
LABEL_9:
    if (v6 < 0) {
      return result;
    }
LABEL_10:
    *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
                        - v5;
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  while (1)
  {
    int16x8_t v7 = (XlSXLineItem *)operator new(0x28uLL);
    XlSXLineItem::XlSXLineItem(v7, v6);
    XlParserVisitor::visit(this, v7, &v11);
    XlCrn::appendOperand(a2, v7);
    uint64_t result = v11;
    if (!v11)
    {
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned __int16 v11 = result;
      if (v9 != 60) {
        break;
      }
    }
    if (!(_WORD)result) {
      goto LABEL_9;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  return result;
}

void sub_238E0022C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSXLineItem *a2, unsigned __int16 *a3)
{
  uint64_t v6 = *((unsigned __int16 *)a2 + 13);
  if (!*a3)
  {
    int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *a3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v7 != 60) {
      goto LABEL_21;
    }
  }
  *((_WORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned __int16 v8 = *a3 - 2;
  *a3 = v8;
  if (!v8)
  {
    int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *a3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v9 != 60) {
      goto LABEL_21;
    }
  }
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned __int16 v10 = *a3 - 2;
  *a3 = v10;
  if (!v10)
  {
    int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *a3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v11 != 60) {
      goto LABEL_21;
    }
  }
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned __int16 v12 = *a3 - 2;
  *a3 = v12;
  if (!v12)
  {
    int v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    *a3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    if (v13 != 60) {
      goto LABEL_21;
    }
  }
  __int16 v14 = v6;
  int16x8_t v15 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *a3 -= 2;
  *((unsigned char *)a2 + 18) = v16 & 1;
  *((_WORD *)a2 + 10) = (v16 >> 1) & 0xFB;
  v15.i64[0] = *(void *)&vshl_u16((uint16x4_t)vdup_n_s16(v16), (uint16x4_t)0xFFF4FFF5FFF6FFF7) & 0xFF81FF81FF81FF81;
  *(_DWORD *)((char *)a2 + 22) = vmovn_s16(v15).u32[0];
  *((void *)this + 5) = 0;
  if ((__int16)v6 < 1)
  {
    int v22 = 0;
    goto LABEL_20;
  }
  size_t v17 = 2 * v6;
  unint64_t v18 = 0;
  *((void *)this + 5) = operator new[](v17);
  unsigned __int16 v19 = *a3;
  while (1)
  {
    if (!v19)
    {
      int v20 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      *a3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      if (v20 != 60) {
        break;
      }
    }
    __int16 v21 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
    int v22 = (__int16 *)*((void *)this + 5);
    v22[v18 / 2] = v21;
    unsigned __int16 v19 = *a3 - 2;
    *a3 = v19;
    v18 += 2;
    if (v17 == v18) {
      goto LABEL_20;
    }
  }
  if (v18)
  {
LABEL_21:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3002;
  }
  *a3 = 0;
  uint64_t v23 = *((void *)this + 5);
  if (v23) {
    MEMORY[0x23EC99790](v23, 0x1000C80BDFB0063);
  }
  *((void *)this + 5) = 0;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 4294967292, 1);
  __int16 v14 = 0;
  int v22 = (__int16 *)*((void *)this + 5);
LABEL_20:
  uint64_t result = XlSXLineItem::setViewItemIndexTable(a2, v22, v14);
  *((void *)this + 5) = 0;
  return result;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxName *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = ((*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) & 2) != 0;
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxPair *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  char v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 20) = v4 & 1;
  *((unsigned char *)a2 + 21) = (v4 & 8) != 0;
  *((unsigned char *)a2 + 22) = (v4 & 0x10) != 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxRule *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  int16x8_t v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 18) = v5 & 1;
  *((unsigned char *)a2 + 19) = (v5 & 2) != 0;
  *((unsigned char *)a2 + 20) = (v5 & 4) != 0;
  *((unsigned char *)a2 + 21) = (v5 & 8) != 0;
  *((unsigned char *)a2 + 22) = v5 >> 4;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)vdup_n_s16(v5), (uint16x4_t)0xFFF4FFF5FFF6FFF7) & 0xFF81FF81FF81FF81;
  *(_DWORD *)((char *)a2 + 23) = vmovn_s16(v4).u32[0];
  *((unsigned char *)a2 + 27) = (v5 & 0x2000) != 0;
  *((unsigned char *)a2 + 28) = (v5 & 0x4000) != 0;
  *((unsigned char *)a2 + 29) = (v5 & 0x8000) != 0;
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxSelect *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxString *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v6 >= 1)
  {
    unsigned int v7 = v6;
    unsigned __int16 v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((void *)this + 4) = v8;
    char v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlBoundSheet::setName(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E00F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxTbl *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = v4 & 1;
  *((unsigned char *)a2 + 22) = v4 < 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxTbPg *a2)
{
  unint64_t v4 = *((unsigned int *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if ((unsigned __int16)(v4 >> 1))
  {
    uint64_t v5 = 0;
    *((void *)this + 6) = operator new[](v4 & 0x1FFFE);
    do
    {
      __int16 v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      unsigned int v7 = (__int16 *)*((void *)this + 6);
      v7[v5++] = v6;
    }
    while ((unsigned __int16)(v4 >> 1) != v5);
  }
  else
  {
    unsigned int v7 = (__int16 *)*((void *)this + 6);
  }
  XlSxIVd::setFieldIDTable(a2, v7, v4 >> 1);
  *((void *)this + 6) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxTbRgiItm *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxVd *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v6 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 22) = v7 & 1;
  *((unsigned char *)a2 + 23) = v7 & 1;
  *(int16x4_t *)v6.i8 = vdup_n_s16(v7);
  *(uint16x4_t *)v8.i8 = vshl_u16(*(uint16x4_t *)v6.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
  v6.i64[0] = *(void *)&vshl_u16((uint16x4_t)(v6.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *((_DWORD *)a2 + 6) = vmovn_s16(v6).u32[0];
  *((unsigned char *)a2 + 28) = (v7 & 0x20) != 0;
  *((unsigned char *)a2 + 29) = (v7 & 0x40) != 0;
  *((unsigned char *)a2 + 30) = (v7 & 0x80) != 0;
  v8.i64[0] &= 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 31) = vmovn_s16(v8).u32[0];
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = v9;
  if (v9 >= 1)
  {
    unsigned int v10 = v9;
    int v11 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v11);
    *((void *)this + 4) = v11;
    char v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v12, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMacro(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E0143C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxVdEx *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int16x8_t v4 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((unsigned char *)a2 + 16) = v5 & 1;
  v4.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 17) = vmovn_s16(v4).u32[0];
  *((unsigned char *)a2 + 21) = (v5 & 0x80) != 0;
  int16x8_t v6 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v5), (uint32x4_t)xmmword_238EE0FE0);
  *(int8x8_t *)v6.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v6), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 22) = vmovn_s16(v6).u32[0];
  *((unsigned char *)a2 + 26) = (v5 & 0x2000) != 0;
  if (*((_DWORD *)a2 + 2) >= 0xBu)
  {
    (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    *((unsigned char *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  }
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxVi *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 20) = v6 & 1;
  *((unsigned char *)a2 + 21) = (v6 & 2) != 0;
  *((unsigned char *)a2 + 22) = (v6 & 4) != 0;
  *((unsigned char *)a2 + 23) = (v6 & 8) != 0;
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = v7;
  if (v7 >= 1)
  {
    unsigned int v8 = v7;
    int v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    char v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v10, v5 + v4, *((XlString **)this + 4));
    XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E01814(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSxView *a2)
{
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlDConRef::setConsolidationArea(a2, v4);
  int v7 = v6 + v5;
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v8 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 50) = v9 & 1;
  v8.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v9) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 51) = vmovn_s16(v8).u32[0];
  *((unsigned char *)a2 + 55) = (v9 & 0x40) != 0;
  *((unsigned char *)a2 + 56) = (v9 & 0x80) != 0;
  *((unsigned char *)a2 + 57) = BYTE1(v9) & 1;
  *((unsigned char *)a2 + 58) = (v9 & 0x200) != 0;
  *((_WORD *)a2 + 30) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  signed int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 31) = v10;
  signed int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 32) = v11;
  if (v10 >= 1)
  {
    char v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((void *)this + 4) = v12;
    char v13 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v13, v7, *((XlString **)this + 4));
    XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  if (v11 >= 1)
  {
    __int16 v14 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v14);
    *((void *)this + 4) = v14;
    char v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, v15, v7, *((XlString **)this + 4));
    XlDocRoute::setBookTitle(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E01D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTabIdConf *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlUnCalced *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlUserBView *a2)
{
  int v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  int v11 = 16;
  int v5 = operator new[](0x10uLL);
  *((void *)this + 3) = v5;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v11);
  XlRevisionHeader::takeGuid(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int16x8_t v6 = (int16x8_t)((__n128 (*)(void))*(void *)(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 50) = v7 & 1;
  *(int16x4_t *)v6.i8 = vdup_n_s16(v7);
  *(uint16x4_t *)v8.i8 = vshl_u16(*(uint16x4_t *)v6.i8, (uint16x4_t)0xFFF5FFF6FFF2FFF3);
  v6.i64[0] = *(void *)&vshl_u16((uint16x4_t)(v6.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 51) = vmovn_s16(v6).u32[0];
  *((unsigned char *)a2 + 55) = (v7 & 0x20) != 0;
  *((unsigned char *)a2 + 56) = (v7 & 0x40) != 0;
  *((_DWORD *)a2 + 16) = (v7 >> 7) & 3;
  v8.i64[0] &= 0xFFC1FFC1FFC1FFC1;
  *(_DWORD *)((char *)a2 + 57) = vmovn_s16(v8).u32[0];
  *((unsigned char *)a2 + 61) = (v7 & 0x8000) != 0;
  (*(void (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 34) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 35) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if (v4 - (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) != 2)
  {
    unsigned int v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((void *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v4, v9);
    XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
    *((void *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E02290(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlXct *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlLabelRanges *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v4 >= 1)
  {
    int v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      unsigned int v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v7);
      XlCoordList::appendVertex(a2, (XlVertex *)v7);
      int v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  if (v8 >= 1)
  {
    int v9 = v8;
    LOWORD(v10) = 0;
    do
    {
      int v11 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v11, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v11);
      XlLabelRanges::appendColLabelRange(a2, v11);
      int v10 = (__int16)(v10 + 1);
    }
    while (v10 < v9);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E02520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTheme *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 12, 1);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  unsigned int v6 = *((_DWORD *)a2 + 2) - 16;
  int DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v6, -1);
  XlChartGelFrame::setBinaryData(a2, *((unsigned __int8 **)this + 3), v6);
  *((void *)this + 3) = 0;
  *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRangeProtection *a2)
{
  v22[0] = *((_DWORD *)a2 + 2);
  unsigned int v4 = v22[0];
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  BOOL v7 = v4 >= 0x27
    && (*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) == 2152
    && !(*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2))
    && !(*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2))
    && (*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2)) == 2
    && !(*(unsigned int (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2))
    && (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) == 0;
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (!v7) {
    goto LABEL_17;
  }
  unsigned int v9 = v8;
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2))
    || (*(unsigned int (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2))
    || (*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)))
  {
    goto LABEL_17;
  }
  if (v9)
  {
    for (unsigned int i = 0; i < v9; ++i)
    {
      int v11 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v11, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v11);
      XlCrn::appendOperand(a2, (XlOper *)v11);
    }
  }
  __int16 v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2))
    || (*((_WORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2)),
        (*(unsigned int (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2))))
  {
LABEL_17:
    (*(void (**)(void, void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), *((unsigned int *)this + 18), 0);
    *((unsigned char *)a2 + 66) = 0;
    char v13 = operator new[](v22[0]);
    *((void *)this + 3) = v13;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v13, v22);
    XlRangeProtection::takePermissionContent(a2, *((unsigned __int8 **)this + 3), v22[0], 1);
    *((void *)this + 3) = 0;
  }
  else
  {
    int v15 = v6 + v5;
    unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
    char v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    if (v16)
    {
      char v18 = v17;
      unsigned __int16 v19 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v19);
      *((void *)this + 4) = v19;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v16, v18, v15, v19);
      XlBoundSheet::setName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
    size_t v20 = v15 - (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    v22[0] = v20;
    if ((int)v20 < 1)
    {
      XlRangeProtection::takePermissionContent(a2, 0, 0, v12);
    }
    else
    {
      __int16 v21 = operator new[](v20);
      *((void *)this + 3) = v21;
      (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v21, v22);
      XlRangeProtection::takePermissionContent(a2, *((unsigned __int8 **)this + 3), v22[0], v12);
      *((void *)this + 3) = 0;
    }
    *((unsigned char *)a2 + 66) = 1;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E02C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionLogEntry *a2)
{
  unsigned int v8 = *((_DWORD *)a2 + 2);
  size_t v4 = v8;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  if (v4)
  {
    int v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v8);
    int v6 = v8;
  }
  else
  {
    int v6 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, *((unsigned __int8 **)this + 3), v6);
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionInfo *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v7 = 16;
  size_t v4 = operator new[](0x10uLL);
  *((void *)this + 3) = v4;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v4, &v7);
  XlRevisionHeader::takeGuid(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  int v7 = 16;
  int v5 = operator new[](0x10uLL);
  *((void *)this + 3) = v5;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v7);
  XlRevisionInfo::takeGuidRoot(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionFileLock *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  size_t v4 = *((unsigned int *)a2 + 2);
  int v8 = v4;
  if (v4)
  {
    int v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v8);
    int v6 = v8;
  }
  else
  {
    int v6 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, *((unsigned __int8 **)this + 3), v6);
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionExclusive *a2)
{
  uint64_t v4 = *((_DWORD *)a2 + 2)
     + (*(unsigned int (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  if (v5 - 1 <= 0x95)
  {
    char v7 = v6;
    if (v6 <= 1)
    {
      int v8 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v8);
      *((void *)this + 4) = v8;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5, v7, v4, v8);
      XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
  }
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v4, 0);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E033EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionHeader *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  void *v4 = 0;
  v4[1] = 255;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v4);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v4);
  int v10 = 16;
  char v7 = operator new[](0x10uLL);
  *((void *)this + 3) = v7;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v7, &v10);
  XlRevisionHeader::takeGuid(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  *((void *)this + 4) = v8;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6 + v5, v8);
  XlAddMenu::setMacro(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  while (!(*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)))
    ;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 0xFFFFFFFFLL, 1);
  *((_WORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((unsigned char *)a2 + 50) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 51) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 52) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 53) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 54) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 55) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_WORD *)a2 + 28) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E03754(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionTabId *a2)
{
  return (*(uint64_t (**)(XlParserVisitor *, XlRevisionTabId *))(*(void *)this + 1272))(this, a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionInsertDelete *a2)
{
  uint64_t v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  int v5 = operator new(0x10uLL);
  void *v5 = 0;
  v5[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v5);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v5);
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlArray::setCellRange((XlArray *)a2, v4);
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E03908(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C400EA6A39BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionChangeCell *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = operator new(0x10uLL);
  void *v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  int v7 = *((_DWORD *)a2 + 6);
  if ((v7 & 0x300) == 0x100)
  {
    int v8 = (XlDXf *)operator new(0x38uLL);
    XlDXf::XlDXf(v8);
    uint64_t v23 = v8;
    (*(void (**)(XlParserVisitor *, XlDXf *))(*(void *)this + 1512))(this, v8);
    XlRevisionChangeCell::takeOldFormat(a2, v8);
    uint64_t v23 = 0;
    ChAutoPtr<XlDXf>::~ChAutoPtr(&v23);
    int v7 = *((_DWORD *)a2 + 6);
  }
  if ((v7 & 0x3000) == 0x1000)
  {
    unsigned int v9 = (XlDXf *)operator new(0x38uLL);
    XlDXf::XlDXf(v9);
    uint64_t v23 = v9;
    (*(void (**)(XlParserVisitor *, XlDXf *))(*(void *)this + 1512))(this, v9);
    XlRevisionChangeCell::takeNewFormat(a2, v23);
    uint64_t v23 = 0;
    ChAutoPtr<XlDXf>::~ChAutoPtr(&v23);
  }
  int v10 = v5 + v4;
  if (*((_WORD *)a2 + 16))
  {
    int v11 = (*((_DWORD *)a2 + 6) >> 3) & 7;
    switch(v11)
    {
      case 1:
        __int16 v14 = (XlRk *)(*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
        *((double *)a2 + 13) = XlRk::decode(v14);
        break;
      case 3:
        int v15 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v15);
        *((void *)this + 4) = v15;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v15);
        XlDocRoute::setBookTitle(a2, *((XlString **)this + 4));
        *((void *)this + 4) = 0;
        break;
      case 5:
        unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
        LODWORD(v23) = v12;
        if (v12)
        {
          char v13 = operator new[](v12);
          *((void *)this + 3) = v13;
          (*(void (**)(void, void *, XlDXf **))(**((void **)this + 2) + 56))(*((void *)this + 2), v13, &v23);
          XlName::setFormula((XlName *)a2, *((char **)this + 3), (signed __int16)v23);
          *((void *)this + 3) = 0;
        }
        (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
        break;
      default:
        unsigned int v16 = 0;
        do
        {
          (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
          ++v16;
        }
        while (v16 < *((unsigned __int16 *)a2 + 16));
        break;
    }
  }
  int v17 = *((_DWORD *)a2 + 6) & 7;
  switch(v17)
  {
    case 1:
      unsigned __int16 v19 = (XlRk *)(*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      *((double *)a2 + 14) = XlRk::decode(v19);
      break;
    case 5:
      unsigned int v20 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
      LODWORD(v23) = v20;
      if (v20)
      {
        __int16 v21 = operator new[](v20);
        *((void *)this + 3) = v21;
        (*(void (**)(void, void *, XlDXf **))(**((void **)this + 2) + 56))(*((void *)this + 2), v21, &v23);
        XlRevisionChangeCell::takeNewFormulaDefinition(a2, *((unsigned __int8 **)this + 3), (__int16)v23);
        *((void *)this + 3) = 0;
      }
      (*(void (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      break;
    case 3:
      char v18 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v18);
      *((void *)this + 4) = v18;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v18);
      XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      break;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E03EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

XlDXf **XlParserVisitor::visit(XlParserVisitor *this, XlRevisionFormat *a2)
{
  int v4 = (XlDXf *)operator new(0x38uLL);
  XlDXf::XlDXf(v4);
  __int16 v14 = v4;
  int v5 = operator new(0x10uLL);
  void *v5 = 0;
  v5[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v5);
  XlRevisionFormat::takeDataHeader((uint64_t)a2, (uint64_t)v5);
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  __int16 v7 = v6;
  if (v6)
  {
    uint64_t v8 = (unsigned __int16)v6;
    unsigned int v9 = operator new[](10 * (unsigned __int16)v6 + 16);
    uint64_t v10 = 0;
    *unsigned int v9 = 10;
    v9[1] = v8;
    int v11 = (XlRef *)(v9 + 2);
    do
    {
      XlRef::XlRef((XlRef *)((char *)v9 + v10 + 16));
      v10 += 10;
    }
    while (10 * v8 != v10);
    unsigned int v12 = v9 + 2;
    do
    {
      (*(void (**)(XlParserVisitor *, void *))(*(void *)this + 1504))(this, v12);
      unsigned int v12 = (void *)((char *)v12 + 10);
      --v8;
    }
    while (v8);
    XlRevisionFormat::takeRefTable((uint64_t)a2, v11, v7);
  }
  if ((*((_WORD *)a2 + 16) & 2) == 0)
  {
    (*(void (**)(XlParserVisitor *, XlDXf *))(*(void *)this + 1512))(this, v14);
    XlRevisionFormat::takeDifferentialFormat(a2, v14);
    __int16 v14 = 0;
  }
  XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  return ChAutoPtr<XlDXf>::~ChAutoPtr(&v14);
}

void sub_238E04140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChAutoPtr<XlDXf>::~ChAutoPtr((XlDXf **)va);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionMoveBegin *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E043E4(_Unwind_Exception *exception_object)
{
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C400EA6A39BLL);
  }
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C400EA6A39BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionMoveEnd *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionVersionNumber *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionSort *a2)
{
  int v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  int v5 = operator new(0x10uLL);
  void *v5 = 0;
  v5[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v5);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v5);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(void *)this + 1504))(this, v4);
  XlRevisionMove::takeDestRef(a2, v4);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  int v7 = v6;
  if (v6)
  {
    int v8 = *((_DWORD *)a2 + 2);
    size_t v9 = 4 * v6;
    uint64_t v10 = (int *)operator new[](v9);
    unint64_t v11 = 0;
    int v12 = v8 - 28;
    do
    {
      if (!v12)
      {
        if ((*(unsigned int (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2)) != 60) {
          break;
        }
        int v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      }
      v10[v11 / 4] = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      v12 -= 4;
      v11 += 4;
    }
    while (v9 != v11);
    XlRevisionSort::takeMap(a2, v10, v7);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E047A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C400EA6A39BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionCopy *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  size_t v4 = *((unsigned int *)a2 + 2);
  int v8 = v4;
  if (v4)
  {
    int v5 = operator new[](v4);
    *((void *)this + 3) = v5;
    (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v8);
    int v6 = v8;
  }
  else
  {
    int v6 = 0;
  }
  XlChartGelFrame::setBinaryData(a2, *((unsigned __int8 **)this + 3), v6);
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E04A20(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C400EA6A39BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionInsertShape *a2)
{
  size_t v4 = operator new(0x10uLL);
  void *v4 = 0;
  v4[1] = 255;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v4);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v4);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  int v7 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v7);
  *((void *)this + 4) = v7;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6 + v5, v7);
  XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E04BC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionDeleteShape *a2)
{
  return (*(uint64_t (**)(XlParserVisitor *, XlRevisionDeleteShape *))(*(void *)this + 1736))(this, a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionInsertDeleteBegin *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionInsertDeleteEnd *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionConflict *a2)
{
  size_t v4 = operator new(0x10uLL);
  void *v4 = 0;
  v4[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v4);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v4);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E04D94(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionRenameSheet *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = operator new(0x10uLL);
  void *v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  int v7 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v7);
  int v8 = v5 + v4;
  *((void *)this + 4) = v7;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v7);
  XlAddMenu::setMenuItem(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  while (!(*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)))
    ;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 0xFFFFFFFFLL, 1);
  size_t v9 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v9);
  *((void *)this + 4) = v9;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v9);
  XlAddMenu::setMenuItemBefore(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  while (!(*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)))
    ;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 0xFFFFFFFFLL, 1);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E04FC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionDefineName *a2)
{
  unsigned int v24 = 0;
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = operator new(0x10uLL);
  void *v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  int v7 = v5 + v4;
  (*(void (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) == 1)
  {
    *((unsigned char *)a2 + 128) = 1;
    *((_DWORD *)a2 + 33) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v23 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v23);
  *((void *)this + 4) = v23;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v23);
  XlAddMenu::setMacro(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  if (v8)
  {
LABEL_3:
    unsigned int v24 = v8;
    uint64_t v10 = operator new[](v8);
    *((void *)this + 3) = v10;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v10, &v24);
    XlRevisionDefineName::takeNewNameDefinition(a2, *((unsigned __int8 **)this + 3), v8);
    *((void *)this + 3) = 0;
  }
LABEL_4:
  int v11 = *((_DWORD *)a2 + 7);
  if (v11)
  {
    if ((v11 & 0x20000) != 0)
    {
      int v12 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v12);
      *((void *)this + 4) = v12;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v12);
      XlAddMenu::setStatus(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      int v11 = *((_DWORD *)a2 + 7);
    }
    if ((v11 & 0x40000) != 0)
    {
      char v13 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v13);
      *((void *)this + 4) = v13;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v13);
      XlAddMenu::setHelp(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      int v11 = *((_DWORD *)a2 + 7);
    }
    if ((v11 & 0x80000) != 0)
    {
      __int16 v14 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v14);
      *((void *)this + 4) = v14;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v14);
      XlDocRoute::setRoutingID(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      if ((*((unsigned char *)a2 + 30) & 8) != 0)
      {
        int v15 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v15);
        *((void *)this + 4) = v15;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v15);
        XlDocRoute::setCustomMessage(a2, *((XlString **)this + 4));
        *((void *)this + 4) = 0;
      }
    }
  }
  if (v9)
  {
    unsigned int v24 = v9;
    unsigned int v16 = operator new[](v9);
    *((void *)this + 3) = v16;
    (*(void (**)(void, void *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v16, &v24);
    XlRevisionDefineName::takeOldNameDefinition(a2, *((unsigned __int8 **)this + 3), v8);
    *((void *)this + 3) = 0;
  }
  int v17 = *((_DWORD *)a2 + 9);
  if (v17)
  {
    if ((v17 & 0x20000) != 0)
    {
      char v18 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v18);
      *((void *)this + 4) = v18;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v18);
      XlDocRoute::setOriginatorName(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      int v17 = *((_DWORD *)a2 + 9);
    }
    if ((v17 & 0x40000) != 0)
    {
      unsigned __int16 v19 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v19);
      *((void *)this + 4) = v19;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v19);
      XlRevisionDefineName::takeOldDescriptionText(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      int v17 = *((_DWORD *)a2 + 9);
    }
    if ((v17 & 0x80000) != 0)
    {
      unsigned int v20 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v20);
      *((void *)this + 4) = v20;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v20);
      XlRevisionDefineName::takeOldHelpTopicText(a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
      if ((*((unsigned char *)a2 + 38) & 8) != 0)
      {
        __int16 v21 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v21);
        *((void *)this + 4) = v21;
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v21);
        XlRevisionDefineName::takeOldStatusText(a2, *((XlString **)this + 4));
        *((void *)this + 4) = 0;
      }
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E05550(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionUserView *a2)
{
  int v4 = operator new(0x10uLL);
  void *v4 = 0;
  v4[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v4);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v4);
  int v7 = 16;
  int v5 = operator new[](0x10uLL);
  *((void *)this + 3) = v5;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v5, &v7);
  XlRevisionHeader::takeGuid(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E056B4(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRevisionNote *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = operator new(0x10uLL);
  void *v6 = 0;
  v6[1] = 255;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  XlParserVisitor::visit((uint64_t)this, (uint64_t)v6);
  XlRevisionAutoFmt::takeDataHeader((uint64_t)a2, (uint64_t)v6);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  int v10 = 16;
  int v7 = operator new[](0x10uLL);
  *((void *)this + 3) = v7;
  (*(void (**)(void, void *, int *))(**((void **)this + 2) + 56))(*((void *)this + 2), v7, &v10);
  XlRevisionInfo::takeGuidRoot(a2, *((unsigned __int8 **)this + 3));
  *((void *)this + 3) = 0;
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  unsigned int v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  *((void *)this + 4) = v8;
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v5 + v4, v8);
  XlAddMenu::setStatus(a2, *((XlString **)this + 4));
  *((void *)this + 4) = 0;
  *((_WORD *)a2 + 28) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_238E05974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlParserVisitor::visit(XlParserVisitor *this, XlDoper *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *(_DWORD *)a2 = v4;
  *((_DWORD *)a2 + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  switch(v4)
  {
    case 2:
      int v5 = (XlRk *)(*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
      *((double *)a2 + 1) = XlRk::decode(v5);
      goto LABEL_4;
    case 4:
      *((double *)a2 + 1) = (*(double (**)(void))(**((void **)this + 2) + 120))(*((void *)this + 2));
      return;
    case 6:
      (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      *((unsigned char *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
      int v6 = *(void (**)(void))(**((void **)this + 2) + 64);
      goto LABEL_13;
    case 8:
      *((unsigned char *)a2 + 33) = (*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) != 0;
      *((unsigned char *)a2 + 32) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
      (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      int v6 = *(void (**)(void))(**((void **)this + 2) + 72);
      goto LABEL_13;
    default:
      (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
LABEL_4:
      int v6 = *(void (**)(void))(**((void **)this + 2) + 104);
LABEL_13:
      v6();
      return;
  }
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfUserFmt *a2)
{
  BOOL var1 = a2->var1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  unsigned __int16 v6 = result;
  if (var1)
  {
    if ((int)result >= 4)
    {
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
      unsigned int v8 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v8);
      *((void *)this + 4) = v8;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7 + v6, v8);
      uint64_t result = XlBoundSheet::setName((XlBoundSheet *)a2, *((XlString **)this + 4));
      *((void *)this + 4) = 0;
    }
  }
  else
  {
    a2->var2 = result;
  }
  return result;
}

void sub_238E05DB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfAlign *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  a2->var4 = (v4 & 8) != 0;
  a2->var0 = v4 & 7;
  a2->BOOL var1 = (v4 >> 4) & 7;
  a2->var3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var2 = v5 & 0xF;
  a2->var5 = (v5 & 0x10) != 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  a2->var6 = result;
  return result;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfProtect *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  a2->var0 = result & 1;
  a2->BOOL var1 = (result & 2) != 0;
  return result;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSec *a2)
{
  *(unsigned char *)a2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((unsigned char *)a2 + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2));
  *((_WORD *)a2 + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 72))(*((void *)this + 2));
  *((_DWORD *)a2 + 1) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  *((_DWORD *)a2 + 8) = result;
  return result;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlVertex *a2)
{
  *(_WORD *)a2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 80))(*((void *)this + 2));
  *((_WORD *)a2 + 1) = result;
  return result;
}

uint64_t *ChAutoPtr<XlListColumn>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    XlString::~XlString((XlString *)(v2 + 504));
    XlString::~XlString((XlString *)(v2 + 400));
    XlString::~XlString((XlString *)(v2 + 272));
    XlAutoFilterData::~XlAutoFilterData((XlAutoFilterData *)(v2 + 224));
    XlString::~XlString((XlString *)(v2 + 112));
    XlString::~XlString((XlString *)(v2 + 8));
    MEMORY[0x23EC997B0](v2, 0x10B0C405854E9BBLL);
  }
  *a1 = 0;
  return a1;
}

XlDoper **ChAutoPtr<XlDoper>::~ChAutoPtr(XlDoper **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    XlDoper::~XlDoper(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

void XlPtg::XlPtg(XlPtg *this)
{
  this->var0 = 0;
  *(void *)&this->BOOL var1 = 0;
  this->var3 = 0;
}

uint64_t XlPtg::XlPtg(uint64_t result, int a2)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t XlPtg::XlPtg(uint64_t a1, int a2, int a3)
{
  __int16 v3 = a3;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 16) = 0;
  size_t v5 = (a3 + 2);
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v5;
  unsigned __int16 v6 = operator new[](v5);
  *(void *)a1 = v6;
  _WORD *v6 = v3;
  *(_WORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t XlPtg::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if (*(void *)a1)
    {
      MEMORY[0x23EC99790]();
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 12) = 0;
      *(_WORD *)(a1 + 16) = 0;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    if (*(void *)a2)
    {
      size_t v4 = *(unsigned int *)(a2 + 12);
      *(_DWORD *)(a1 + 12) = v4;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      size_t v5 = operator new[](v4);
      *(void *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a1 + 12));
    }
  }
  return a1;
}

char *XlPtg::clear(XlPtg *this)
{
  uint64_t result = this->var0;
  if (result)
  {
    uint64_t result = (char *)MEMORY[0x23EC99790](result, 0x1000C8077774924);
    this->var0 = 0;
    this->var2 = 0;
    this->var3 = 0;
  }
  return result;
}

char *XlPtg::addDataItem(XlPtg *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (this->var0)
  {
    size_t var2_low = LOWORD(this->var2);
    size_t v5 = (char *)operator new[](var2_low + a2 + 2);
    memcpy(v5, this->var0, var2_low);
    if (this->var0) {
      MEMORY[0x23EC99790](this->var0, 0x1000C8077774924);
    }
    this->var0 = v5;
    unsigned __int16 v6 = &v5[var2_low];
  }
  else
  {
    unsigned __int16 v6 = (char *)operator new[](a2 + 2);
    this->var0 = v6;
  }
  *(_WORD *)unsigned __int16 v6 = a2;
  uint64_t result = v6 + 2;
  this->var2 += a2 + 2;
  ++this->var3;
  return result;
}

XlPtg *XlPtg::addExtendedData(XlPtg *this, unsigned __int8 *a2)
{
  if (a2)
  {
    size_t v3 = *(unsigned __int16 *)a2;
    size_t v4 = XlPtg::addDataItem(this, *(unsigned __int16 *)a2);
    if (v4) {
      memcpy(v4, a2 + 2, v3);
    }
    JUMPOUT(0x23EC99790);
  }
  return this;
}

XlPtg *XlPtg::setExtendedData(XlPtg *this, char *a2, unsigned __int16 a3)
{
  this->var0 = a2;
  this->var3 = a3;
  this->var2 = 0;
  return this;
}

uint64_t XlPtg::getLastExtendedDataLength(XlPtg *this)
{
  var0 = this->var0;
  if (!this->var0) {
    return 0;
  }
  int var3 = this->var3;
  if (!this->var3) {
    return 0;
  }
  for (uint64_t result = *(unsigned __int16 *)var0; --var3; uint64_t result = v5)
  {
    size_t v4 = &var0[result];
    unsigned int v5 = *((unsigned __int16 *)v4 + 1);
    var0 = v4 + 2;
  }
  return result;
}

BOOL isRef3D(BOOL result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 8);
    BOOL v2 = v1 == 122;
    if (v1 == 90) {
      BOOL v2 = 1;
    }
    return v1 == 58 || v2;
  }
  return result;
}

BOOL isRef(BOOL result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 8);
    uint64_t result = 1;
    if ((v1 - 36) > 0x36 || ((1 << (v1 - 36)) & 0x40000100400001) == 0) {
      return v1 == 100 || v1 == 122;
    }
  }
  return result;
}

BOOL isArea3D(BOOL result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 8);
    BOOL v2 = v1 == 123;
    if (v1 == 91) {
      BOOL v2 = 1;
    }
    return v1 == 59 || v2;
  }
  return result;
}

BOOL isArea(BOOL result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 8);
    uint64_t result = 1;
    if ((v1 - 37) > 0x36 || ((1 << (v1 - 37)) & 0x40000100400001) == 0) {
      return v1 == 101 || v1 == 123;
    }
  }
  return result;
}

_WORD *adjustRowAndColumn(_WORD *result, unsigned __int16 *a2, __int16 a3, char a4)
{
  __int16 v5 = *a2;
  __int16 v6 = *a2 & 0xC000;
  if (((*a2 & 0x8000u) != 0) == v4)
  {
    if ((*a2 & 0x4000) == 0) {
      return result;
    }
LABEL_5:
    *a2 = (*a2 - a4) | v6;
    return result;
  }
  *result -= a3;
  if ((v5 & 0x4000) != 0) {
    goto LABEL_5;
  }
  return result;
}

OcText *extractOcTextFromPtgStr(XlPtg *a1)
{
  if (!a1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  LastExtendedData = (unsigned __int8 *)XlPtg::getLastExtendedData(a1);
  return extractOcTextFromPtgStrBuffer(LastExtendedData);
}

OcText *extractOcTextFromPtgStrBuffer(unsigned __int8 *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(__int16 *)a1;
  unsigned int v3 = a1[2];
  unsigned __int8 v4 = a1[3];
  __int16 v5 = (OcText *)operator new(0x30uLL);
  OcText::OcText(v5);
  __int16 v6 = (char *)(a1 + 4);
  if (v3 < 9)
  {
    v5->BOOL var1 = 1252;
    OcText::setBuffer(v5, v6, v2 + 1);
  }
  else
  {
    if (v4)
    {
      v5->BOOL var1 = 1;
      unsigned int v7 = 2 * v2 + 2;
    }
    else
    {
      v5->BOOL var1 = 2;
      unsigned int v7 = v2 + 1;
    }
    OcText::setBuffer(v5, v6, v7);
  }
  v5->int var3 = v2;
  (*((void (**)(OcText *, uint64_t))v5->var0 + 2))(v5, 1);
  return v5;
}

void sub_238E0689C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ***clearXlPtgs(void ***result)
{
  int v1 = *result;
  if (*result)
  {
    unsigned int v2 = result;
    unsigned int v3 = *v1;
    unint64_t v4 = (unsigned char *)v1[1] - (unsigned char *)*v1;
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (v4 >> 3);
      do
      {
        uint64_t result = (void ***)*v2;
        unsigned int v7 = **v2;
        unint64_t v8 = (unsigned char *)(*v2)[1] - v7;
        if (v5 >= (v8 >> 3)) {
          goto LABEL_16;
        }
        if (*(void *)&v7[8 * v5])
        {
          XlPtg::~XlPtg(*(XlPtg **)&v7[8 * v5]);
          MEMORY[0x23EC997B0]();
          uint64_t result = (void ***)*v2;
          unsigned int v7 = **v2;
          unint64_t v8 = (unsigned char *)(*v2)[1] - v7;
        }
        if (v5 >= (v8 >> 3)) {
LABEL_16:
        }
          std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
        *(void *)&v7[8 * v5++] = 0;
      }
      while (v6 != v5);
      int v1 = *v2;
      unsigned int v3 = **v2;
    }
    v1[1] = v3;
    unsigned int v9 = *v2;
    if (*v2)
    {
      int v10 = *v9;
      if (*v9)
      {
        v9[1] = v10;
        operator delete(v10);
      }
      uint64_t result = (void ***)MEMORY[0x23EC997B0](v9, 0x80C40D6874129);
    }
    XlDoper *v2 = 0;
  }
  return result;
}

uint64_t XlStringParser::parseSize(XlStringParser *this, SsrwOOStream *a2, int a3)
{
  int v6 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this) {
    *(unsigned char *)this = 0;
  }
  int v7 = *((unsigned __int8 *)this + 2);
  if (*((unsigned char *)this + 2)) {
    *((unsigned char *)this + 2) = 0;
  }
  int v8 = *((unsigned __int8 *)this + 1);
  if (*((unsigned char *)this + 1)) {
    *((unsigned char *)this + 1) = 0;
  }
  unsigned int v9 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v9);
  uint64_t v10 = XlStringParser::parse(this, a2, a3, v9);
  if (v6) {
    *(unsigned char *)this = 1;
  }
  if (v8) {
    *((unsigned char *)this + 1) = 1;
  }
  if (v7) {
    *((unsigned char *)this + 2) = 1;
  }
  (*(void (**)(XlString *))(*(void *)v9 + 8))(v9);
  return v10;
}

void sub_238E06CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    XlParserVisitor::visit(v1);
  }
  _Unwind_Resume(exception_object);
}

void XlDateTimeFormat::~XlDateTimeFormat(XlDateTimeFormat *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x23EC997B0](v2, 0x1000C40BDFB0063);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = *((void *)this + 27);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 27) = 0;
  XlDateTimeFormat::clearSymbols(this);
  unint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 20);
  if (v5)
  {
    *((void *)this + 21) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)this + 8);
  if (v9)
  {
    *((void *)this + 9) = v9;
    operator delete(v9);
  }
}

void *XlDateTimeFormat::clearSymbols(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[8];
  if (((this[9] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[8];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[8];
    }
    while (v3 < ((unint64_t)(v1[9] - v2) >> 3));
  }
  v1[9] = v2;
  uint64_t v4 = v1[11];
  if (((v1[12] - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      this = *(void **)(v4 + 8 * v5);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v4 = v1[11];
      }
      *(void *)(v4 + 8 * v5++) = 0;
      uint64_t v4 = v1[11];
    }
    while (v5 < ((unint64_t)(v1[12] - v4) >> 3));
  }
  v1[12] = v4;
  uint64_t v6 = v1[14];
  if (((v1[15] - v6) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v7 = 0;
    do
    {
      this = *(void **)(v6 + 8 * v7);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = v1[14];
      }
      *(void *)(v6 + 8 * v7++) = 0;
      uint64_t v6 = v1[14];
    }
    while (v7 < ((unint64_t)(v1[15] - v6) >> 3));
  }
  v1[15] = v6;
  uint64_t v8 = v1[17];
  if (((v1[18] - v8) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v9 = 0;
    do
    {
      this = *(void **)(v8 + 8 * v9);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v8 = v1[17];
      }
      *(void *)(v8 + 8 * v9++) = 0;
      uint64_t v8 = v1[17];
    }
    while (v9 < ((unint64_t)(v1[18] - v8) >> 3));
  }
  v1[18] = v8;
  uint64_t v10 = v1[20];
  if (((v1[21] - v10) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    do
    {
      this = *(void **)(v10 + 8 * v11);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v10 = v1[20];
      }
      *(void *)(v10 + 8 * v11++) = 0;
      uint64_t v10 = v1[20];
    }
    while (v11 < ((unint64_t)(v1[21] - v10) >> 3));
  }
  v1[21] = v10;
  uint64_t v12 = v1[23];
  if (((v1[24] - v12) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v13 = 0;
    do
    {
      this = *(void **)(v12 + 8 * v13);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v12 = v1[23];
      }
      *(void *)(v12 + 8 * v13++) = 0;
      uint64_t v12 = v1[23];
    }
    while (v13 < ((unint64_t)(v1[24] - v12) >> 3));
  }
  v1[24] = v12;
  return this;
}

void XlFormulaProcessor::push(XlFormulaProcessor *this)
{
  int v2 = *((_DWORD *)this + 18);
  int v1 = *((_DWORD *)this + 19);
  unsigned int v3 = v1 + 1;
  *((_DWORD *)this + 19) = v1 + 1;
  if (v1 + 1 == v2)
  {
    int v5 = v1 + 17;
    for (*((_DWORD *)this + 18) = v5; v3 < *((_DWORD *)this + 18); ++v3)
    {
      uint64_t v6 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v6);
      uint64_t v8 = (CsString **)*((void *)this + 4);
      unint64_t v7 = *((void *)this + 5);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = *((void *)this + 3);
        unint64_t v11 = (unint64_t)v8 - v10;
        unint64_t v12 = (v7 - v10) >> 3;
        unsigned int v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1) {
          unsigned int v13 = (v11 >> 3) + 1;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v14);
          uint64_t v17 = v16;
        }
        else
        {
          int v15 = 0;
          uint64_t v17 = 0;
        }
        char v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
        XlString *v18 = v6;
        unint64_t v9 = v18 + 1;
        unsigned int v20 = (char *)*((void *)this + 3);
        unsigned __int16 v19 = (char *)*((void *)this + 4);
        if (v19 != v20)
        {
          do
          {
            __int16 v21 = (CsString *)*((void *)v19 - 1);
            v19 -= 8;
            *--char v18 = v21;
          }
          while (v19 != v20);
          unsigned __int16 v19 = (char *)*((void *)this + 3);
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v9;
        *((void *)this + 5) = &v15[8 * v17];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *uint64_t v8 = v6;
        unint64_t v9 = v8 + 1;
      }
      *((void *)this + 4) = v9;
    }
  }
}

void sub_238E07170(_Unwind_Exception *exception_object)
{
  if (v1) {
    XlFormulaProcessor::init(v1);
  }
  _Unwind_Resume(exception_object);
}

void *XlFormulaProcessor::createErrorToken(XlFormulaProcessor *this)
{
  uint64_t v1 = operator new(0x18uLL);
  XlPtg::XlPtg((uint64_t)v1, 28);
  if (!v1)
  {
    int v2 = (unsigned __int8 *)operator new[](3uLL);
    *(_WORD *)int v2 = 1;
    v2[2] = 42;
    XlPtg::addExtendedData(0, v2);
  }
  return v1;
}

void sub_238E07200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlFormulaProcessor::toString(uint64_t a1, uint64_t *a2, __int16 a3, __int16 a4)
{
  *(_WORD *)(a1 + 168) = a3;
  *(_WORD *)(a1 + 170) = a4;
  uint64_t v5 = *a2;
  if (((a2[1] - *a2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(XlPtg **)(v5 + 8 * v7);
      if (!v8) {
        break;
      }
      int v9 = categoryForType(v8->var1);
      if (v9 == 2)
      {
        int v10 = XlFormulaProcessor::processControl((XlFormulaProcessor *)a1, v8);
      }
      else if (v9 == 1)
      {
        int v10 = XlFormulaProcessor::processOperator((XlFormulaProcessor *)a1, v8);
      }
      else
      {
        if (v9) {
          goto LABEL_13;
        }
        int v10 = XlFormulaProcessor::processOperand((XlFormulaProcessor *)a1, v8);
      }
      *(_DWORD *)(a1 + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = v10;
      if (*(_DWORD *)(a1 + 164) == 3006) {
        break;
      }
      ++v7;
      uint64_t v5 = *a2;
    }
    while (v7 < ((unint64_t)(a2[1] - *a2) >> 3));
  }
  if (*(_DWORD *)(a1 + 164) == 3006)
  {
LABEL_13:
    unint64_t v11 = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 76);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 8 * (v12 - 1));
      uint64_t v14 = *(unsigned int *)(v13 + 16);
      if (*(void *)(a1 + 144))
      {
        ChLogFunction("tempdata already initialized.", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Processor/XlFormulaProcessor.cpp", 828);
        uint64_t v15 = *(void *)(a1 + 144);
        if (v15) {
          MEMORY[0x23EC99790](v15, 0x1000C80BDFB0063);
        }
      }
      int v16 = v14 + 2;
      uint64_t v17 = operator new[](2 * (v14 + 2));
      *(void *)(a1 + 144) = v17;
      unsigned int v18 = v14 + 1;
      v17[(v14 + 1)] = 0;
      _WORD *v17 = 61;
      _ChWcsncpy(v17 + 1, *(const unsigned __int16 **)(v13 + 8), v14);
      *(_DWORD *)(a1 + 76) = 0;
      unint64_t v11 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v11);
      OcText::takeBuffer(v11, *(char **)(a1 + 144), 2 * v16);
      *(void *)(a1 + 144) = 0;
      v11->int var3 = v18;
      v11->BOOL var1 = 1;
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_238E073C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    -[EDBuildableFormula stringFromStringTokenAtIndex:](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlFormulaProcessor::processOperand(XlFormulaProcessor *this, XlPtg *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
  *(_DWORD *)(v4 + 16) = 0;
  bzero(*(void **)(v4 + 8), 2 * *(unsigned int *)(v4 + 20));
  int var1 = a2->var1;
  uint64_t result = 3001;
  uint64_t v7 = 0;
  switch(var1)
  {
    case 22:
      break;
    case 23:
      v34 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
      uint64_t v35 = _ChWcslenA((uint64_t)&unk_238EE1060);
      MEMORY[0x270FA5388](v35);
      v37 = (char *)&v53 - ((v36 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v37, v38);
      v39 = WcharToChCHAR2(v37, (int *)&unk_238EE1060);
      CsString::append(v34, v39);
      OcTextFromPtgStr = extractOcTextFromPtgStr(a2);
      CsString::append(*(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)), *((const unsigned __int16 **)OcTextFromPtgStr + 3), *((_DWORD *)OcTextFromPtgStr + 4));
      v40 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
      uint64_t v41 = _ChWcslenA((uint64_t)&unk_238EE1060);
      MEMORY[0x270FA5388](v41);
      v43 = (char *)&v53 - ((v42 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v43, v44);
      v45 = WcharToChCHAR2(v43, (int *)&unk_238EE1060);
      CsString::append(v40, v45);
      goto LABEL_28;
    case 24:
      if (*((unsigned char *)this + 160))
      {
        int v16 = 940;
        goto LABEL_31;
      }
      LODWORD(v54.var0) = 0;
      if (XlPtg::getNumberOfExtendedDataEntries(a2) >= 3) {
        ChLogFunction("too many extended data entries", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Processor/XlFormulaProcessor.cpp", 934);
      }
      ExtendedData = XlPtg::getExtendedData(a2, 0, (unsigned int *)&v54);
      XlFormulaProcessor::eptgToString((XlFormulaProcessor *)ExtendedData, v51, v52, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      uint64_t v7 = 3006;
      break;
    case 25:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 62:
    case 63:
    case 65:
    case 66:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 97:
    case 98:
    case 104:
    case 105:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      return result;
    case 26:
      goto LABEL_14;
    case 27:
    case 38:
    case 39:
    case 45:
    case 70:
    case 71:
    case 77:
    case 102:
    case 103:
    case 109:
      return 0;
    case 28:
      uint64_t result = (uint64_t)XlPtg::getLastExtendedData(a2);
      int v15 = *(unsigned __int8 *)result;
      uint64_t v14 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
      goto LABEL_7;
    case 29:
      LastExtendedData = XlPtg::getLastExtendedData(a2);
      XlFormulaProcessor::BOOLToString((XlFormulaProcessor *)LastExtendedData, *LastExtendedData != 0, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
    case 30:
      v47 = XlPtg::getLastExtendedData(a2);
      XlFormulaProcessor::intToString(this, *(unsigned __int16 *)v47, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
    case 31:
      v48 = XlPtg::getLastExtendedData(a2);
      double Float64FromPackedLocation = CsGetFloat64FromPackedLocation((uint64_t)v48);
      XlFormulaProcessor::doubleToString(this, Float64FromPackedLocation, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
    case 35:
    case 67:
    case 99:
      if (*((unsigned char *)this + 160))
      {
        int v16 = 983;
LABEL_31:
        ChLogFunction("Lasso syntax", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Processor/XlFormulaProcessor.cpp", v16);
        goto LABEL_36;
      }
      v29 = (XlNameTable *)*((void *)this + 6);
      if (((*((void *)v29 + 2) - *((void *)v29 + 1)) & 0x7FFFFFFF8) == 0)
      {
        uint64_t v23 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
        int v24 = 29;
        goto LABEL_15;
      }
      uint64_t v30 = (unsigned int *)XlPtg::getLastExtendedData(a2);
      XlNameTable::getName(v29, *v30, &v54);
      CGRect v31 = (OcText *)operator new(0x30uLL);
      CGRect v32 = (XlFormulaProcessor *)OcText::OcText(v31, &v54, 1);
      var5 = (const unsigned __int16 *)v31->var5;
      if (var5)
      {
        if (strncmp(v31->var5, "_xlfn.", 6uLL))
        {
          OcText::remove(v31, 0, 6);
          var5 = (const unsigned __int16 *)v31->var5;
        }
        CsString::append(*(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)), var5, v31->var3);
        uint64_t v7 = 0;
      }
      else
      {
        XlFormulaProcessor::errorToString(v32, 29, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
        uint64_t v7 = 3005;
      }
      (*((void (**)(OcText *))v31->var0 + 1))(v31);
      OcText::~OcText(&v54);
      break;
    case 36:
    case 44:
    case 68:
    case 76:
    case 100:
    case 108:
      int v8 = *(unsigned __int16 *)XlPtg::getLastExtendedData(a2);
      __int16 v9 = *((_WORD *)XlPtg::getLastExtendedData(a2) + 1);
      __int16 v10 = *((_WORD *)XlPtg::getLastExtendedData(a2) + 1);
      goto LABEL_4;
    case 37:
    case 69:
    case 101:
      uint64_t v17 = XlPtg::getLastExtendedData(a2);
      XlFormulaProcessor::areaReferenceToString(this, (const unsigned __int16 *)v17, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
    case 42:
    case 43:
    case 74:
    case 75:
    case 106:
    case 107:
      uint64_t v14 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
      int v15 = 23;
LABEL_7:
      XlFormulaProcessor::errorToString((XlFormulaProcessor *)result, v15, v14);
      goto LABEL_36;
    case 57:
    case 89:
    case 121:
      unsigned int v18 = XlPtg::getLastExtendedData(a2);
      unsigned int v19 = *((unsigned __int16 *)v18 + 1);
      MergeRegion = (unsigned __int16 *)XlMerge::getMergeRegion((XlMerge *)(*((void *)this + 8) + 8), *(unsigned __int16 *)v18);
      uint64_t result = XlLinkTable::getLink(*((XlLinkTable **)this + 8), *MergeRegion);
      if (((*(void *)(result + 64) - *(void *)(result + 56)) >> 3) > v19
        && (uint64_t result = XlLink::getExternalName((XlLink *)result, v19), (v21 = *(void *)(result + 32)) != 0))
      {
        OcTextFromPtgStr = operator new(0x30uLL);
        OcText::OcText(OcTextFromPtgStr, v21 + 8, 1);
        CsString::append(*(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)), *((const unsigned __int16 **)OcTextFromPtgStr + 3), *((_DWORD *)OcTextFromPtgStr + 4));
LABEL_28:
        (*(void (**)(void *))(*(void *)OcTextFromPtgStr + 8))(OcTextFromPtgStr);
LABEL_36:
        uint64_t v7 = 0;
      }
      else
      {
LABEL_14:
        uint64_t v23 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
        int v24 = 23;
LABEL_15:
        XlFormulaProcessor::errorToString((XlFormulaProcessor *)result, v24, v23);
        uint64_t v7 = 3005;
      }
      break;
    case 58:
    case 90:
    case 122:
      uint64_t v25 = XlPtg::getLastExtendedData(a2);
      uint64_t v7 = XlFormulaProcessor::externSheetToString(this, *(__int16 *)v25, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      if (v7) {
        break;
      }
      int v8 = *((unsigned __int16 *)XlPtg::getLastExtendedData(a2) + 1);
      __int16 v9 = *((_WORD *)XlPtg::getLastExtendedData(a2) + 2);
      __int16 v10 = *((_WORD *)XlPtg::getLastExtendedData(a2) + 2);
LABEL_4:
      unint64_t v11 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
      __int16 v12 = v10 & 0xC000;
      XlFormulaProcessor::columnReferenceToString(this, v9, v10 & 0xC000, v11);
      XlFormulaProcessor::rowReferenceToString(this, v8, v12, v11);
      goto LABEL_36;
    case 59:
    case 91:
    case 123:
      int v26 = XlPtg::getLastExtendedData(a2);
      uint64_t v7 = XlFormulaProcessor::externSheetToString(this, *(__int16 *)v26, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      int v27 = XlPtg::getLastExtendedData(a2);
      XlFormulaProcessor::areaReferenceToString(this, (const unsigned __int16 *)v27 + 1, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      break;
    case 60:
    case 61:
    case 92:
    case 93:
    case 124:
    case 125:
      uint64_t v13 = XlPtg::getLastExtendedData(a2);
      uint64_t v7 = XlFormulaProcessor::externSheetToString(this, *(__int16 *)v13, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      XlFormulaProcessor::errorToString((XlFormulaProcessor *)v7, 23, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      break;
    case 64:
    case 96:
      XlFormulaProcessor::arrayTokenToString((CsString *)this, a2, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
    default:
      if (var1 != 255) {
        return result;
      }
      unsigned int v28 = XlPtg::getLastExtendedData(a2);
      XlFormulaProcessor::charsToString((XlFormulaProcessor *)v28, v28, *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)));
      goto LABEL_36;
  }
  XlFormulaProcessor::push(this);
  return v7;
}

void sub_238E07A90(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  OcText::~OcText((OcText *)(v2 - 120));
  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::processOperator(XlFormulaProcessor *this, XlPtg *a2)
{
  uint64_t v4 = 0;
  v206[1] = *MEMORY[0x263EF8340];
  int var1 = a2->var1;
  uint64_t result = 3001;
  switch(var1)
  {
    case 3:
      unsigned int v7 = *((_DWORD *)this + 19);
      unsigned int v8 = v7 - 1;
      if (v7 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v8;
      __int16 v9 = (_DWORD *)((char *)this + 76);
      uint64_t v10 = *(void *)(v9 - 13);
      unint64_t v11 = *(const CsString **)(v10 + 8 * v8);
      __int16 v12 = *(CsString **)(v10 + 8 * (v7 - 2));
      uint64_t v13 = _ChWcslenA((uint64_t)&unk_238EE1068);
      MEMORY[0x270FA5388](v13);
      int v15 = (char *)v206 - ((v14 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v16);
      uint64_t v17 = WcharToChCHAR2(v15, (int *)&unk_238EE1068);
      CsString::append(v12, v17);
      CsString::append(*(CsString **)(*(void *)(v9 - 13) + 8 * (*v9 - 1)), v11);
      return 0;
    case 4:
      unsigned int v28 = *((_DWORD *)this + 19);
      unsigned int v29 = v28 - 1;
      if (v28 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v29;
      uint64_t v30 = (_DWORD *)((char *)this + 76);
      uint64_t v31 = *(void *)(v30 - 13);
      CGRect v32 = *(const CsString **)(v31 + 8 * v29);
      CGRect v33 = *(CsString **)(v31 + 8 * (v28 - 2));
      uint64_t v34 = _ChWcslenA((uint64_t)&unk_238EE1070);
      MEMORY[0x270FA5388](v34);
      uint64_t v36 = (char *)v206 - ((v35 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v36, v37);
      size_t v38 = WcharToChCHAR2(v36, (int *)&unk_238EE1070);
      CsString::append(v33, v38);
      CsString::append(*(CsString **)(*(void *)(v30 - 13) + 8 * (*v30 - 1)), v32);
      return 0;
    case 5:
      unsigned int v39 = *((_DWORD *)this + 19);
      unsigned int v40 = v39 - 1;
      if (v39 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v40;
      uint64_t v41 = (_DWORD *)((char *)this + 76);
      uint64_t v42 = *(void *)(v41 - 13);
      v43 = *(const CsString **)(v42 + 8 * v40);
      size_t v44 = *(CsString **)(v42 + 8 * (v39 - 2));
      uint64_t v45 = _ChWcslenA((uint64_t)&unk_238EE1078);
      MEMORY[0x270FA5388](v45);
      v47 = (char *)v206 - ((v46 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v47, v48);
      v49 = WcharToChCHAR2(v47, (int *)&unk_238EE1078);
      CsString::append(v44, v49);
      CsString::append(*(CsString **)(*(void *)(v41 - 13) + 8 * (*v41 - 1)), v43);
      return 0;
    case 6:
      unsigned int v50 = *((_DWORD *)this + 19);
      unsigned int v51 = v50 - 1;
      if (v50 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v51;
      v52 = (_DWORD *)((char *)this + 76);
      uint64_t v53 = *(void *)(v52 - 13);
      OcText v54 = *(const CsString **)(v53 + 8 * v51);
      uint64_t v55 = *(CsString **)(v53 + 8 * (v50 - 2));
      uint64_t v56 = _ChWcslenA((uint64_t)&unk_238EE1080);
      MEMORY[0x270FA5388](v56);
      v58 = (char *)v206 - ((v57 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v58, v59);
      v60 = WcharToChCHAR2(v58, (int *)&unk_238EE1080);
      CsString::append(v55, v60);
      CsString::append(*(CsString **)(*(void *)(v52 - 13) + 8 * (*v52 - 1)), v54);
      return 0;
    case 7:
      unsigned int v61 = *((_DWORD *)this + 19);
      unsigned int v62 = v61 - 1;
      if (v61 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v62;
      v63 = (_DWORD *)((char *)this + 76);
      uint64_t v64 = *(void *)(v63 - 13);
      v65 = *(const CsString **)(v64 + 8 * v62);
      v66 = *(CsString **)(v64 + 8 * (v61 - 2));
      uint64_t v67 = _ChWcslenA((uint64_t)&unk_238EE1088);
      MEMORY[0x270FA5388](v67);
      v69 = (char *)v206 - ((v68 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v69, v70);
      v71 = WcharToChCHAR2(v69, (int *)&unk_238EE1088);
      CsString::append(v66, v71);
      CsString::append(*(CsString **)(*(void *)(v63 - 13) + 8 * (*v63 - 1)), v65);
      return 0;
    case 8:
      unsigned int v72 = *((_DWORD *)this + 19);
      unsigned int v73 = v72 - 1;
      if (v72 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v73;
      v74 = (_DWORD *)((char *)this + 76);
      uint64_t v75 = *(void *)(v74 - 13);
      v76 = *(const CsString **)(v75 + 8 * v73);
      v77 = *(CsString **)(v75 + 8 * (v72 - 2));
      uint64_t v78 = _ChWcslenA((uint64_t)&unk_238EE1090);
      MEMORY[0x270FA5388](v78);
      v80 = (char *)v206 - ((v79 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v80, v81);
      v82 = WcharToChCHAR2(v80, (int *)&unk_238EE1090);
      CsString::append(v77, v82);
      CsString::append(*(CsString **)(*(void *)(v74 - 13) + 8 * (*v74 - 1)), v76);
      return 0;
    case 9:
      unsigned int v83 = *((_DWORD *)this + 19);
      unsigned int v84 = v83 - 1;
      if (v83 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v84;
      v85 = (_DWORD *)((char *)this + 76);
      uint64_t v86 = *(void *)(v85 - 13);
      v87 = *(const CsString **)(v86 + 8 * v84);
      v88 = *(CsString **)(v86 + 8 * (v83 - 2));
      uint64_t v89 = _ChWcslenA((uint64_t)&unk_238EE1098);
      MEMORY[0x270FA5388](v89);
      v91 = (char *)v206 - ((v90 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v91, v92);
      v93 = WcharToChCHAR2(v91, (int *)&unk_238EE1098);
      CsString::append(v88, v93);
      CsString::append(*(CsString **)(*(void *)(v85 - 13) + 8 * (*v85 - 1)), v87);
      return 0;
    case 10:
      unsigned int v94 = *((_DWORD *)this + 19);
      unsigned int v95 = v94 - 1;
      if (v94 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v95;
      v96 = (_DWORD *)((char *)this + 76);
      uint64_t v97 = *(void *)(v96 - 13);
      v98 = *(const CsString **)(v97 + 8 * v95);
      v99 = *(CsString **)(v97 + 8 * (v94 - 2));
      uint64_t v100 = _ChWcslenA((uint64_t)dword_238EE10A0);
      MEMORY[0x270FA5388](v100);
      v102 = (char *)v206 - ((v101 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v102, v103);
      v104 = WcharToChCHAR2(v102, dword_238EE10A0);
      CsString::append(v99, v104);
      CsString::append(*(CsString **)(*(void *)(v96 - 13) + 8 * (*v96 - 1)), v98);
      return 0;
    case 11:
      unsigned int v105 = *((_DWORD *)this + 19);
      unsigned int v106 = v105 - 1;
      if (v105 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v106;
      v107 = (_DWORD *)((char *)this + 76);
      uint64_t v108 = *(void *)(v107 - 13);
      v109 = *(const CsString **)(v108 + 8 * v106);
      v110 = *(CsString **)(v108 + 8 * (v105 - 2));
      uint64_t v111 = _ChWcslenA((uint64_t)&unk_238EE10AC);
      MEMORY[0x270FA5388](v111);
      v113 = (char *)v206 - ((v112 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v113, v114);
      v115 = WcharToChCHAR2(v113, (int *)&unk_238EE10AC);
      CsString::append(v110, v115);
      CsString::append(*(CsString **)(*(void *)(v107 - 13) + 8 * (*v107 - 1)), v109);
      return 0;
    case 12:
      unsigned int v116 = *((_DWORD *)this + 19);
      unsigned int v117 = v116 - 1;
      if (v116 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v117;
      v118 = (_DWORD *)((char *)this + 76);
      uint64_t v119 = *(void *)(v118 - 13);
      v120 = *(const CsString **)(v119 + 8 * v117);
      v121 = *(CsString **)(v119 + 8 * (v116 - 2));
      uint64_t v122 = _ChWcslenA((uint64_t)dword_238EE10B4);
      MEMORY[0x270FA5388](v122);
      v124 = (char *)v206 - ((v123 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v124, v125);
      v126 = WcharToChCHAR2(v124, dword_238EE10B4);
      CsString::append(v121, v126);
      CsString::append(*(CsString **)(*(void *)(v118 - 13) + 8 * (*v118 - 1)), v120);
      return 0;
    case 13:
      unsigned int v127 = *((_DWORD *)this + 19);
      unsigned int v128 = v127 - 1;
      if (v127 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v128;
      v129 = (_DWORD *)((char *)this + 76);
      uint64_t v130 = *(void *)(v129 - 13);
      v131 = *(const CsString **)(v130 + 8 * v128);
      v132 = *(CsString **)(v130 + 8 * (v127 - 2));
      uint64_t v133 = _ChWcslenA((uint64_t)&unk_238EE10C0);
      MEMORY[0x270FA5388](v133);
      v135 = (char *)v206 - ((v134 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v135, v136);
      v137 = WcharToChCHAR2(v135, (int *)&unk_238EE10C0);
      CsString::append(v132, v137);
      CsString::append(*(CsString **)(*(void *)(v129 - 13) + 8 * (*v129 - 1)), v131);
      return 0;
    case 14:
      unsigned int v138 = *((_DWORD *)this + 19);
      unsigned int v139 = v138 - 1;
      if (v138 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v139;
      v140 = (_DWORD *)((char *)this + 76);
      uint64_t v141 = *(void *)(v140 - 13);
      v142 = *(const CsString **)(v141 + 8 * v139);
      v143 = *(CsString **)(v141 + 8 * (v138 - 2));
      uint64_t v144 = _ChWcslenA((uint64_t)dword_238EE10C8);
      MEMORY[0x270FA5388](v144);
      v146 = (char *)v206 - ((v145 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v146, v147);
      v148 = WcharToChCHAR2(v146, dword_238EE10C8);
      CsString::append(v143, v148);
      CsString::append(*(CsString **)(*(void *)(v140 - 13) + 8 * (*v140 - 1)), v142);
      return 0;
    case 15:
      unsigned int v149 = *((_DWORD *)this + 19);
      unsigned int v150 = v149 - 1;
      if (v149 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v150;
      v151 = (_DWORD *)((char *)this + 76);
      uint64_t v152 = *(void *)(v151 - 13);
      v153 = *(const CsString **)(v152 + 8 * v150);
      v154 = *(CsString **)(v152 + 8 * (v149 - 2));
      uint64_t v155 = _ChWcslenA((uint64_t)&unk_238EE10D4);
      MEMORY[0x270FA5388](v155);
      v157 = (char *)v206 - ((v156 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v157, v158);
      v159 = WcharToChCHAR2(v157, (int *)&unk_238EE10D4);
      CsString::append(v154, v159);
      CsString::append(*(CsString **)(*(void *)(v151 - 13) + 8 * (*v151 - 1)), v153);
      return 0;
    case 16:
      unsigned int v160 = *((_DWORD *)this + 19);
      unsigned int v161 = v160 - 1;
      if (v160 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v161;
      v162 = (_DWORD *)((char *)this + 76);
      uint64_t v163 = *(void *)(v162 - 13);
      v164 = *(const CsString **)(v163 + 8 * v161);
      v165 = *(CsString **)(v163 + 8 * (v160 - 2));
      uint64_t v166 = _ChWcslenA((uint64_t)&unk_238EE10DC);
      MEMORY[0x270FA5388](v166);
      v168 = (char *)v206 - ((v167 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v168, v169);
      v170 = WcharToChCHAR2(v168, (int *)&unk_238EE10DC);
      CsString::append(v165, v170);
      CsString::append(*(CsString **)(*(void *)(v162 - 13) + 8 * (*v162 - 1)), v164);
      return 0;
    case 17:
      unsigned int v171 = *((_DWORD *)this + 19);
      unsigned int v172 = v171 - 1;
      if (v171 <= 1) {
        goto LABEL_48;
      }
      *((_DWORD *)this + 19) = v172;
      v173 = (_DWORD *)((char *)this + 76);
      uint64_t v174 = *(void *)(v173 - 13);
      v175 = *(const CsString **)(v174 + 8 * v172);
      v176 = *(CsString **)(v174 + 8 * (v171 - 2));
      uint64_t v177 = _ChWcslenA((uint64_t)&unk_238EE10E4);
      MEMORY[0x270FA5388](v177);
      v179 = (char *)v206 - ((v178 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v179, v180);
      v181 = WcharToChCHAR2(v179, (int *)&unk_238EE10E4);
      CsString::append(v176, v181);
      CsString::append(*(CsString **)(*(void *)(v173 - 13) + 8 * (*v173 - 1)), v175);
      return 0;
    case 18:
      return v4;
    case 19:
      uint64_t v182 = *((unsigned int *)this + 19);
      if (!v182) {
        goto LABEL_48;
      }
      v184 = (void *)((char *)this + 24);
      uint64_t v183 = *((void *)this + 3);
      v185 = *(const CsString **)(v183 + 8 * (v182 - 1));
      uint64_t v186 = *(void *)(v183 + 8 * v182);
      *(_DWORD *)(v186 + 16) = 0;
      bzero(*(void **)(v186 + 8), 2 * *(unsigned int *)(v186 + 20));
      unsigned int v188 = *((_DWORD *)this + 19);
      v187 = (_DWORD *)((char *)this + 76);
      CsString::append(*(CsString **)(*v184 + 8 * v188), v185);
      uint64_t v189 = *v187;
      v190 = *(const CsString **)(*v184 + 8 * v189);
      uint64_t v191 = *(void *)(*v184 + 8 * (v189 - 1));
      *(_DWORD *)(v191 + 16) = 0;
      bzero(*(void **)(v191 + 8), 2 * *(unsigned int *)(v191 + 20));
      v192 = *(CsString **)(*v184 + 8 * (*v187 - 1));
      uint64_t v193 = _ChWcslenA((uint64_t)&unk_238EE1070);
      MEMORY[0x270FA5388](v193);
      v195 = (char *)v206 - ((v194 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v195, v196);
      v197 = WcharToChCHAR2(v195, (int *)&unk_238EE1070);
      CsString::append(v192, v197);
      CsString::append(*(CsString **)(*v184 + 8 * (*v187 - 1)), v190);
      return 0;
    case 20:
      int v198 = *((_DWORD *)this + 19);
      if (!v198)
      {
LABEL_48:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1005;
      }
      v199 = *(CsString **)(*((void *)this + 3) + 8 * (v198 - 1));
      uint64_t v200 = _ChWcslenA((uint64_t)&unk_238EE10EC);
      MEMORY[0x270FA5388](v200);
      v202 = (char *)v206 - ((v201 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v202, v203);
      v204 = WcharToChCHAR2(v202, (int *)&unk_238EE10EC);
      CsString::append(v199, v204, 1u);
      return 0;
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return result;
    case 33:
      goto LABEL_9;
    case 34:
      goto LABEL_10;
    default:
      unsigned int v18 = var1 - 65;
      if (v18 > 0x37) {
        return result;
      }
      if (((1 << v18) & 0x100000001) != 0)
      {
LABEL_9:
        LastExtendedData = XlPtg::getLastExtendedData(a2);
        uint64_t v4 = XlFormulaProcessor::functionToString(this, *(__int16 *)LastExtendedData, -1);
        XlFormulaProcessor::push(this);
      }
      else if (((1 << v18) & 0x200000002) != 0)
      {
LABEL_10:
        int v20 = *((__int16 *)XlPtg::getLastExtendedData(a2) + 2);
        uint64_t v21 = XlPtg::getLastExtendedData(a2);
        uint64_t v4 = XlFormulaProcessor::functionToString(this, v20, *(__int16 *)v21);
        if (*((_WORD *)XlPtg::getLastExtendedData(a2) + 1) == 1)
        {
          int v22 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
          uint64_t v23 = _ChWcslenA((uint64_t)&unk_238EE10F4);
          MEMORY[0x270FA5388](v23);
          uint64_t v25 = (char *)v206 - ((v24 + 17) & 0xFFFFFFFFFFFFFFF0);
          bzero(v25, v26);
          int v27 = WcharToChCHAR2(v25, (int *)&unk_238EE10F4);
          CsString::append(v22, v27);
        }
        XlFormulaProcessor::push(this);
      }
      else if (((1 << v18) & 0x80000000800000) == 0)
      {
        return result;
      }
      return v4;
  }
}

uint64_t XlFormulaProcessor::processControl(XlFormulaProcessor *this, XlPtg *a2)
{
  v29[1] = *MEMORY[0x263EF8340];
  uint64_t var1 = a2->var1;
  if (var1 <= 0x2F)
  {
    if (((1 << var1) & 0xC30000000006) != 0) {
      return 0;
    }
    if (var1 == 21)
    {
      uint64_t v9 = *((unsigned int *)this + 19);
      uint64_t v10 = *((void *)this + 3);
      unint64_t v11 = *(const CsString **)(v10 + 8 * (v9 - 1));
      uint64_t v12 = *(void *)(v10 + 8 * v9);
      *(_DWORD *)(v12 + 16) = 0;
      bzero(*(void **)(v12 + 8), 2 * *(unsigned int *)(v12 + 20));
      CsString::append(*(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19)), v11);
      uint64_t v13 = *((unsigned int *)this + 19);
      uint64_t v14 = *((void *)this + 3);
      int v15 = *(const CsString **)(v14 + 8 * v13);
      uint64_t v16 = *(void *)(v14 + 8 * (v13 - 1));
      *(_DWORD *)(v16 + 16) = 0;
      bzero(*(void **)(v16 + 8), 2 * *(unsigned int *)(v16 + 20));
      uint64_t v17 = *(CsString **)(*((void *)this + 3) + 8 * (*((_DWORD *)this + 19) - 1));
      uint64_t v18 = _ChWcslenA((uint64_t)&unk_238EE10FC);
      MEMORY[0x270FA5388](v18);
      int v20 = (char *)v29 - ((v19 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v20, v21);
      int v22 = WcharToChCHAR2(v20, (int *)&unk_238EE10FC);
      CsString::append(v17, v22);
      CsString::append(*(CsString **)(*((void *)this + 3) + 8 * (*((_DWORD *)this + 19) - 1)), v15);
      uint64_t v23 = *(CsString **)(*((void *)this + 3) + 8 * (*((_DWORD *)this + 19) - 1));
      uint64_t v24 = _ChWcslenA((uint64_t)&unk_238EE1104);
      MEMORY[0x270FA5388](v24);
      size_t v26 = (char *)v29 - ((v25 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v26, v27);
      unsigned int v28 = WcharToChCHAR2(v26, (int *)&unk_238EE1104);
      CsString::append(v23, v28);
      return 0;
    }
    if (var1 == 25)
    {
      if ((*(_WORD *)XlPtg::getLastExtendedData(a2) & 0x10) != 0)
      {
        XlFormulaProcessor::functionToString(this, 4, 1);
        XlFormulaProcessor::push(this);
      }
      return 0;
    }
  }
  unsigned int v4 = var1 - 72;
  BOOL v5 = v4 > 0x27;
  uint64_t v6 = (1 << v4) & 0xC3000000C3;
  if (v5 || v6 == 0) {
    return 3001;
  }
  return 0;
}

uint64_t XlFormulaProcessor::eptgToString(XlFormulaProcessor *this, unsigned __int8 *a2, unsigned __int8 *a3, CsString *a4)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = _ChWcslenA((uint64_t)dword_238EE1180);
  MEMORY[0x270FA5388](v5);
  unsigned int v7 = (char *)v11 - ((v6 + 17) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v8);
  uint64_t v9 = WcharToChCHAR2(v7, dword_238EE1180);
  CsString::append(a4, v9);
  return 3006;
}

uint64_t XlFormulaProcessor::errorToString(XlFormulaProcessor *this, int a2, CsString *a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t result = 3001;
  if (a2 <= 22)
  {
    if (a2)
    {
      if (a2 == 7)
      {
        uint64_t v5 = (int *)&unk_238EE1128;
      }
      else
      {
        if (a2 != 15) {
          return result;
        }
        uint64_t v5 = (int *)&unk_238EE1148;
      }
    }
    else
    {
      uint64_t v5 = (int *)&unk_238EE110C;
    }
  }
  else if (a2 > 35)
  {
    if (a2 == 36)
    {
      uint64_t v5 = (int *)&unk_238EE119C;
    }
    else
    {
      if (a2 != 42) {
        return result;
      }
      uint64_t v5 = (int *)&unk_238EE11B4;
    }
  }
  else if (a2 == 23)
  {
    uint64_t v5 = (int *)&unk_238EE1168;
  }
  else
  {
    if (a2 != 29) {
      return result;
    }
    uint64_t v5 = dword_238EE1180;
  }
  uint64_t v6 = _ChWcslenA((uint64_t)v5);
  MEMORY[0x270FA5388](v6);
  size_t v8 = (char *)v11 - ((v7 + 17) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v9);
  uint64_t v10 = WcharToChCHAR2(v8, v5);
  CsString::append(a3, v10);
  return 0;
}

CsString *XlFormulaProcessor::BOOLToString(XlFormulaProcessor *this, int a2, CsString *a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  if (a2) {
    unsigned int v4 = (int *)&unk_238EE11C8;
  }
  else {
    unsigned int v4 = (int *)&unk_238EE11DC;
  }
  uint64_t v5 = _ChWcslenA((uint64_t)v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - ((v6 + 17) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v8);
  size_t v9 = WcharToChCHAR2(v7, v4);
  return CsString::append(a3, v9);
}

CsString *XlFormulaProcessor::intToString(XlFormulaProcessor *this, int a2, CsString *a3)
{
  unsigned int v4 = (char *)this + 80;
  uint64_t v5 = (XlFormulaProcessor *)snprintf((char *)this + 80, 0x40uLL, "%d", a2);
  return XlFormulaProcessor::charsToString(v5, v4, a3);
}

CsString *XlFormulaProcessor::doubleToString(XlFormulaProcessor *this, double a2, CsString *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  double v6 = fabs(a2);
  if (v6 < 1.0 && v6 >= COERCE_DOUBLE(0xFFFFFFFFFFFFDLL) || vabdd_f64(a2, (double)(int)a2) >= 2.22044605e-16)
  {
    size_t v8 = (char *)this + 80;
    snprintf((char *)this + 80, 0x40uLL, "%.15G", a2);
    int v9 = strlen((const char *)this + 80);
    size_t v7 = (size_t)memchr((char *)this + 80, 69, v9);
    if (v7)
    {
      uint64_t v10 = (unsigned char *)v7;
      size_t v7 = atoi((const char *)(v7 + 1));
      if ((v7 + 19) <= 0x27)
      {
        unsigned int v11 = v7;
        unsigned char *v10 = 0;
        int v12 = strlen((const char *)this + 80);
        size_t v7 = (size_t)memchr((char *)this + 80, 46, v12);
        size_t v13 = v7;
        if ((v11 & 0x80000000) != 0)
        {
          strcpy(__dst, (const char *)this + 80);
          if (__dst[0] == 45)
          {
            *size_t v8 = __dst[0];
            unsigned int v16 = 1;
          }
          else
          {
            unsigned int v16 = 0;
          }
          uint64_t v18 = v16 + 1;
          uint64_t v19 = v16;
          *((unsigned char *)this + v16 + 80) = 48;
          *((unsigned char *)this + v18 + 80) = 46;
          if (v11 == -1)
          {
            unsigned int v21 = v16 | 2;
          }
          else
          {
            uint64_t v20 = -2 - v11;
            memset((char *)this + v16 + 82, 48, v20 + 1);
            unsigned int v21 = v19 + v20 + 3;
          }
          unsigned int v22 = v21 + 1;
          *((unsigned char *)this + v21 + 80) = __dst[v19];
          if (v13)
          {
            int v23 = v12 - v19 - 2;
            memcpy(&v8[v22], &__dst[v18 + 1], v23);
            v22 += v23;
          }
          *((unsigned char *)this + (int)v22 + 80) = 0;
          size_t v24 = strlen((const char *)this + 80);
          uint64_t v25 = (const char *)memchr((char *)this + 80, 46, v24);
          size_t v7 = strlen(v25);
          if (v7 >= 0x15) {
            size_t v7 = snprintf((char *)this + 80, 0x40uLL, "%.15G");
          }
        }
        else
        {
          int v14 = v7 - v8;
          if (v7) {
            int v15 = v14;
          }
          else {
            int v15 = 0;
          }
          if (v7 && (int)(v15 + v11) < v12)
          {
            size_t v7 = (size_t)memmove((void *)v7, (const void *)(v7 + 1), v11);
            *(unsigned char *)(v13 + (int)v11 - 1) = 46;
          }
          else
          {
            if (v7)
            {
              int v17 = ~v14 + v12;
              size_t v7 = (size_t)memmove((void *)v7, (const void *)(v7 + 1), v17);
              int v12 = v14;
            }
            else
            {
              int v17 = 0;
            }
            if (v17 < (int)v11) {
              size_t v7 = (size_t)memset((char *)this + v12 + v17 + 80, 48, v11 + ~v17 + 1);
            }
            *((unsigned char *)this + v12 + (uint64_t)(int)v11 + 80) = 0;
          }
        }
      }
    }
  }
  else
  {
    size_t v7 = snprintf((char *)this + 80, 0x40uLL, "%d");
  }
  return XlFormulaProcessor::charsToString((XlFormulaProcessor *)v7, (char *)this + 80, a3);
}

CsString *XlFormulaProcessor::areaReferenceToString(XlFormulaProcessor *this, const unsigned __int16 *a2, CsString *a3)
{
  v21[1] = *MEMORY[0x263EF8340];
  int v5 = *a2;
  unsigned __int16 v6 = a2[2];
  int v7 = a2[3];
  BOOL v8 = v7 != 255 || a2[2] != 0;
  int v9 = a2[1];
  if (*a2) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v8;
  }
  __int16 v11 = v6 & 0xC000;
  __int16 v12 = a2[3] & 0xC000;
  BOOL v13 = v9 == 0xFFFF && v10;
  if (!v8 || (XlFormulaProcessor::columnReferenceToString(this, a2[2], v6 & 0xC000, a3), !v13)) {
    XlFormulaProcessor::rowReferenceToString(this, v5, v11, a3);
  }
  int v14 = *(CsString **)(*((void *)this + 3) + 8 * *((unsigned int *)this + 19));
  uint64_t v15 = _ChWcslenA((uint64_t)&unk_238EE10E4);
  MEMORY[0x270FA5388](v15);
  int v17 = (char *)v21 - ((v16 + 17) & 0xFFFFFFFFFFFFFFF0);
  bzero(v17, v18);
  uint64_t v19 = WcharToChCHAR2(v17, (int *)&unk_238EE10E4);
  CsString::append(v14, v19);
  if (!v8) {
    return XlFormulaProcessor::rowReferenceToString(this, v9, v12, a3);
  }
  uint64_t result = XlFormulaProcessor::columnReferenceToString(this, v7, v12, a3);
  if (!v13) {
    return XlFormulaProcessor::rowReferenceToString(this, v9, v12, a3);
  }
  return result;
}

uint64_t XlFormulaProcessor::externSheetToString(XlFormulaProcessor *this, unsigned int a2, CsString *a3)
{
  v57[1] = *(CsString **)MEMORY[0x263EF8340];
  int v5 = (XlLinkTable *)*((void *)this + 8);
  if (((*((void *)v5 + 7) - *((void *)v5 + 6)) & 0x7FFFFFFF8) == 0
    || XlLinkTable::getRefType(v5, a2) != 2)
  {
    uint64_t v52 = _ChWcslenA((uint64_t)dword_238EE1168);
    MEMORY[0x270FA5388](v52);
    OcText v54 = (char *)v57 - ((v53 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v54, v55);
    v47 = WcharToChCHAR2(v54, dword_238EE1168);
    uint64_t v19 = 3005;
    goto LABEL_27;
  }
  unsigned int WorkbookFirstSheetTab = XlLinkTable::getWorkbookFirstSheetTab(*((XlLinkTable **)this + 8), a2);
  unsigned int WorkbookLastSheetTab = XlLinkTable::getWorkbookLastSheetTab(*((XlLinkTable **)this + 8), a2);
  if ((WorkbookFirstSheetTab & 0x80000000) != 0
    || (unsigned int v9 = WorkbookLastSheetTab, (WorkbookLastSheetTab & 0x80000000) != 0))
  {
    uint64_t v20 = _ChWcslenA((uint64_t)dword_238EE11F4);
    MEMORY[0x270FA5388](v20);
    unsigned int v22 = (char *)v57 - ((v21 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v22, v23);
    size_t v24 = WcharToChCHAR2(v22, dword_238EE11F4);
    uint64_t v19 = 3005;
  }
  else
  {
    if (!*((unsigned char *)this + 160))
    {
      uint64_t v10 = _ChWcslenA((uint64_t)&unk_238EE1208);
      MEMORY[0x270FA5388](v10);
      __int16 v12 = (char *)v57 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v12, v13);
      int v14 = WcharToChCHAR2(v12, (int *)&unk_238EE1208);
      CsString::append(a3, v14);
    }
    uint64_t v15 = (void *)*((void *)this + 7);
    if (-1431655765 * ((v15[1] - *v15) >> 4) <= WorkbookFirstSheetTab) {
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v16 = *v15 + 48 * WorkbookFirstSheetTab;
    if (*(void *)(v16 + 24))
    {
      int v17 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v17);
      OcText::operator=((uint64_t)v17, v16);
      (*((void (**)(OcText *, uint64_t))v17->var0 + 2))(v17, 1);
      XlFormulaProcessor::escapeString(v17, 39, v57);
      size_t v18 = v57[0];
      CsString::append(a3, v57[0]);
      (*((void (**)(CsString *))v18->var0 + 1))(v18);
      (*((void (**)(OcText *))v17->var0 + 1))(v17);
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v25 = _ChWcslenA((uint64_t)dword_238EE11F4);
      MEMORY[0x270FA5388](v25);
      size_t v27 = (char *)v57 - ((v26 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v27, v28);
      unsigned int v29 = WcharToChCHAR2(v27, dword_238EE11F4);
      CsString::append(a3, v29);
      uint64_t v19 = 3005;
    }
    if (WorkbookFirstSheetTab != v9)
    {
      if (*((unsigned char *)this + 160)) {
        ChLogFunction("wrong syntax", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Processor/XlFormulaProcessor.cpp", 1615);
      }
      uint64_t v30 = _ChWcslenA((uint64_t)&unk_238EE10E4);
      MEMORY[0x270FA5388](v30);
      CGRect v32 = (char *)v57 - ((v31 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v32, v33);
      uint64_t v34 = WcharToChCHAR2(v32, (int *)&unk_238EE10E4);
      CsString::append(a3, v34);
      uint64_t v35 = (void *)*((void *)this + 7);
      if (-1431655765 * ((v35[1] - *v35) >> 4) <= v9) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v36 = *v35 + 48 * v9;
      if (*(void *)(v36 + 24))
      {
        size_t v37 = (OcText *)operator new(0x30uLL);
        OcText::OcText(v37);
        OcText::operator=((uint64_t)v37, v36);
        (*((void (**)(OcText *, uint64_t))v37->var0 + 2))(v37, 1);
        XlFormulaProcessor::escapeString(v37, 39, v57);
        size_t v38 = v57[0];
        CsString::append(a3, v57[0]);
        (*((void (**)(CsString *))v38->var0 + 1))(v38);
        (*((void (**)(OcText *))v37->var0 + 1))(v37);
      }
    }
    if (*((unsigned char *)this + 160)) {
      goto LABEL_21;
    }
    uint64_t v39 = _ChWcslenA((uint64_t)&unk_238EE1208);
    MEMORY[0x270FA5388](v39);
    uint64_t v41 = (char *)v57 - ((v40 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v41, v42);
    size_t v24 = WcharToChCHAR2(v41, (int *)&unk_238EE1208);
  }
  CsString::append(a3, v24);
LABEL_21:
  if (*((unsigned char *)this + 160))
  {
    uint64_t v43 = _ChWcslenA((uint64_t)dword_238EE1210);
    MEMORY[0x270FA5388](v43);
    uint64_t v45 = (char *)v57 - ((v44 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v45, v46);
    v47 = WcharToChCHAR2(v45, dword_238EE1210);
  }
  else
  {
    uint64_t v48 = _ChWcslenA((uint64_t)&unk_238EE1224);
    MEMORY[0x270FA5388](v48);
    unsigned int v50 = (char *)v57 - ((v49 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v50, v51);
    v47 = WcharToChCHAR2(v50, (int *)&unk_238EE1224);
  }
LABEL_27:
  CsString::append(a3, v47);
  return v19;
}

CsString *XlFormulaProcessor::arrayTokenToString(CsString *this, XlPtg *a2, CsString *a3)
{
  uint64_t v53 = this;
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (a2)
  {
    this = (CsString *)XlPtg::getNumberOfExtendedDataEntries(a2);
    if (this >= 2)
    {
      unsigned int v55 = 0;
      OcText v54 = a2;
      int v5 = *(_DWORD *)XlPtg::getExtendedData(a2, 0, &v55);
      int v51 = *(_DWORD *)XlPtg::getExtendedData(a2, 1u, &v55);
      uint64_t v6 = _ChWcslenA((uint64_t)&unk_238EE122C);
      MEMORY[0x270FA5388](v6);
      BOOL v8 = (char *)&v50 - ((v7 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v8, v9);
      uint64_t v10 = WcharToChCHAR2(v8, (int *)&unk_238EE122C);
      CsString::append(a3, v10);
      if ((v51 & 0x80000000) == 0)
      {
        int v52 = 0;
        int v11 = 2;
        do
        {
          if ((v5 & 0x80000000) == 0)
          {
            int v12 = 0;
            do
            {
              ExtendedData = XlPtg::getExtendedData(v54, v11 + v12, &v55);
              int v14 = ExtendedData;
              unsigned int v15 = *ExtendedData;
              if (v15 > 3)
              {
                if (v15 == 4)
                {
                  XlFormulaProcessor::BOOLToString((XlFormulaProcessor *)ExtendedData, ExtendedData[1] != 0, a3);
                }
                else
                {
                  if (v15 != 16)
                  {
LABEL_31:
                    exception = __cxa_allocate_exception(4uLL);
                    _DWORD *exception = 1004;
                  }
                  XlFormulaProcessor::errorToString((XlFormulaProcessor *)ExtendedData, ExtendedData[1], a3);
                }
              }
              else if (v15 == 1)
              {
                double Float64FromPackedLocation = CsGetFloat64FromPackedLocation((uint64_t)(ExtendedData + 2));
                XlFormulaProcessor::doubleToString((XlFormulaProcessor *)v53, Float64FromPackedLocation, a3);
              }
              else
              {
                if (v15 != 2) {
                  goto LABEL_31;
                }
                uint64_t v16 = _ChWcslenA((uint64_t)&unk_238EE1060);
                MEMORY[0x270FA5388](v16);
                size_t v18 = (char *)&v50 - ((v17 + 17) & 0xFFFFFFFFFFFFFFF0);
                bzero(v18, v19);
                uint64_t v20 = WcharToChCHAR2(v18, (int *)&unk_238EE1060);
                CsString::append(a3, v20);
                int v21 = *((__int16 *)v14 + 1);
                char v22 = v14[5];
                unsigned int v23 = v14[4];
                size_t v24 = operator new(0x30uLL);
                OcText::OcText((OcText *)v24);
                uint64_t v25 = v14 + 6;
                if (v23 < 9)
                {
                  *((_DWORD *)v24 + 2) = 1252;
                  OcText::setBuffer((OcText *)v24, v25, v21 + 1);
                }
                else
                {
                  if (v22)
                  {
                    *((_DWORD *)v24 + 2) = 1;
                    unsigned int v26 = 2 * v21 + 2;
                  }
                  else
                  {
                    *((_DWORD *)v24 + 2) = 2;
                    unsigned int v26 = v21 + 1;
                  }
                  OcText::setBuffer((OcText *)v24, v25, v26);
                }
                *((_DWORD *)v24 + 4) = v21;
                (*(void (**)(void *, uint64_t))(*(void *)v24 + 16))(v24, 1);
                CsString::append(a3, *((const unsigned __int16 **)v24 + 3), *((_DWORD *)v24 + 4));
                uint64_t v28 = _ChWcslenA((uint64_t)&unk_238EE1060);
                MEMORY[0x270FA5388](v28);
                uint64_t v30 = (char *)&v50 - ((v29 + 17) & 0xFFFFFFFFFFFFFFF0);
                bzero(v30, v31);
                CGRect v32 = WcharToChCHAR2(v30, (int *)&unk_238EE1060);
                CsString::append(a3, v32);
                (*(void (**)(void *))(*(void *)v24 + 8))(v24);
              }
              if (v12 < v5)
              {
                uint64_t v33 = _ChWcslenA((uint64_t)&unk_238EE10DC);
                MEMORY[0x270FA5388](v33);
                uint64_t v35 = (char *)&v50 - ((v34 + 17) & 0xFFFFFFFFFFFFFFF0);
                bzero(v35, v36);
                size_t v37 = WcharToChCHAR2(v35, (int *)&unk_238EE10DC);
                CsString::append(a3, v37);
              }
              ++v12;
            }
            while (v5 + 1 != v12);
            v11 += v12;
          }
          if (v52 < v51)
          {
            uint64_t v38 = _ChWcslenA((uint64_t)&unk_238EE1234);
            MEMORY[0x270FA5388](v38);
            uint64_t v40 = (char *)&v50 - ((v39 + 17) & 0xFFFFFFFFFFFFFFF0);
            bzero(v40, v41);
            size_t v42 = WcharToChCHAR2(v40, (int *)&unk_238EE1234);
            CsString::append(a3, v42);
          }
          int v43 = v52++;
        }
        while (v43 != v51);
      }
      uint64_t v44 = _ChWcslenA((uint64_t)&unk_238EE123C);
      MEMORY[0x270FA5388](v44);
      size_t v46 = (char *)&v50 - ((v45 + 17) & 0xFFFFFFFFFFFFFFF0);
      bzero(v46, v47);
      uint64_t v48 = WcharToChCHAR2(v46, (int *)&unk_238EE123C);
      return CsString::append(a3, v48);
    }
  }
  return this;
}

void sub_238E09FD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CsString *XlFormulaProcessor::charsToString(XlFormulaProcessor *this, char *__s, CsString *a3)
{
  unsigned int v4 = __s;
  unsigned int v5 = strlen(__s);
  unsigned int var2 = a3->var2;
  unsigned int v7 = var2 + v5;
  CsString::reserve(a3, var2 + v5);
  if (v5)
  {
    uint64_t var1 = a3->var1;
    uint64_t v9 = v5;
    do
    {
      unsigned __int16 v10 = *v4++;
      var1[var2++] = v10;
      --v9;
    }
    while (v9);
  }
  return CsString::setCount(a3, v7);
}

uint64_t XlFormulaProcessor::functionToString(XlFormulaProcessor *this, int a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  __int16 v34 = -1;
  uint64_t v6 = XlFunctionNameForId(a2, &v34);
  if (v6)
  {
    if (a3 < 0)
    {
      LOWORD(a3) = v34;
      if (v34 < 0) {
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v34 = a3;
      if (a2 == 255)
      {
        LOWORD(a3) = a3 - 1;
        __int16 v34 = a3;
        if ((a3 & 0x8000) != 0) {
          goto LABEL_9;
        }
      }
    }
    uint64_t v8 = *((unsigned int *)this + 19);
    if (v8 >= (unsigned __int16)a3)
    {
      uint64_t v9 = *(CsString **)(*((void *)this + 3) + 8 * v8);
      v9->unsigned int var2 = 0;
      bzero(v9->var1, 2 * v9->var3);
      __int16 v10 = v34;
      if (v34 >= 1)
      {
        int v11 = (unsigned __int16)v34;
        int v12 = -(unsigned __int16)v34;
        do
        {
          CsString::append(v9, *(const CsString **)(*((void *)this + 3) + 8 * (v12 + *((_DWORD *)this + 19))));
          if (v11 < 2) {
            break;
          }
          uint64_t v13 = _ChWcslenA((uint64_t)&unk_238EE10DC);
          MEMORY[0x270FA5388](v13);
          unsigned int v15 = &v33[-((v14 + 17) & 0xFFFFFFFFFFFFFFF0)];
          bzero(v15, v16);
          uint64_t v17 = WcharToChCHAR2(v15, (int *)&unk_238EE10DC);
          CsString::append(v9, v17);
          ++v12;
          BOOL v18 = __OFSUB__(v11--, 1);
        }
        while (!((v11 < 0) ^ v18 | (v11 == 0)));
        __int16 v10 = v34;
      }
      unsigned int v19 = *((_DWORD *)this + 19) - v10;
      *((_DWORD *)this + 19) = v19;
      if (a2 == 255)
      {
        unsigned int v20 = v19 - 1;
        *((_DWORD *)this + 19) = v20;
        int v21 = *(CsString **)(*((void *)this + 3) + 8 * v20);
      }
      else
      {
        int v21 = *(CsString **)(*((void *)this + 3) + 8 * v19);
        v21->unsigned int var2 = 0;
        bzero(v21->var1, 2 * v21->var3);
        CsString::append(v21, v6);
      }
      uint64_t v22 = _ChWcslenA((uint64_t)&unk_238EE10FC);
      MEMORY[0x270FA5388](v22);
      size_t v24 = &v33[-((v23 + 17) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v24, v25);
      unsigned int v26 = WcharToChCHAR2(v24, (int *)&unk_238EE10FC);
      CsString::append(v21, v26);
      if (v34 >= 1) {
        CsString::append(v21, v9);
      }
      uint64_t v27 = _ChWcslenA((uint64_t)&unk_238EE1104);
      MEMORY[0x270FA5388](v27);
      uint64_t v29 = &v33[-((v28 + 17) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v29, v30);
      size_t v31 = WcharToChCHAR2(v29, (int *)&unk_238EE1104);
      CsString::append(v21, v31);
      uint64_t v7 = 0;
      goto LABEL_22;
    }
LABEL_9:
    uint64_t v7 = 3002;
LABEL_22:
    (*((void (**)(CsString *))v6->var0 + 1))(v6);
    return v7;
  }
  return 3001;
}

void sub_238E0A39C(_Unwind_Exception *exception_object)
{
}

CsString *XlFormulaProcessor::rowReferenceToString(XlFormulaProcessor *this, int a2, __int16 a3, CsString *a4)
{
  if (a3 < 0)
  {
    uint64_t v6 = 0;
    int v5 = *((unsigned __int16 *)this + 84);
  }
  else
  {
    int v5 = 0;
    *((unsigned char *)this + 80) = 36;
    uint64_t v6 = 1;
  }
  uint64_t v7 = (char *)this + 80;
  uint64_t v8 = (XlFormulaProcessor *)snprintf((char *)this + v6 + 80, 64 - v6, "%d", a2 + v5 + 1);
  return XlFormulaProcessor::charsToString(v8, v7, a4);
}

CsString *XlFormulaProcessor::columnReferenceToString(XlFormulaProcessor *this, unsigned __int8 a2, __int16 a3, CsString *a4)
{
  int v4 = a2;
  if ((a3 & 0x4000) != 0)
  {
    int v4 = (__int16)(*((_WORD *)this + 85) + a2);
    if (v4 > 675)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1005;
    }
    unsigned int v6 = 0;
    unsigned int v5 = ((20165 * v4) >> 19) + ((20165 * v4) >> 31);
  }
  else
  {
    LOBYTE(v5) = a2 / 0x1Au;
    *((unsigned char *)this + 80) = 36;
    unsigned int v6 = 1;
  }
  if (v4 >= 26)
  {
    uint64_t v7 = (char *)this + v6++;
    v7[80] = v5 + 64;
  }
  *((unsigned char *)this + v6 + 80) = v4 - 26 * (((20165 * v4) >> 19) + (20165 * v4 < 0)) + 65;
  *((unsigned char *)this + v6 + 81) = 0;
  return XlFormulaProcessor::charsToString(this, (char *)this + 80, a4);
}

void XlFormulaProcessor::escapeString(OcText *a1@<X1>, int a2@<W2>, CsString **a3@<X8>)
{
  *a3 = 0;
  uint64_t v7 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v7);
  if (v7) {
    *a3 = v7;
  }
  if (a1->var3)
  {
    unsigned int v8 = 0;
    do
    {
      int Character = OcText::getCharacter(a1, v8);
      CsString::append(v7, Character);
      if (Character == a2) {
        CsString::append(v7, a2);
      }
      ++v8;
    }
    while (v8 < a1->var3);
  }
}

void sub_238E0A5E0(_Unwind_Exception *a1)
{
  operator delete(v2);
  void *v1 = 0;
  _Unwind_Resume(a1);
}

CsString *XlFunctionNameForId(__int16 a1, __int16 *a2)
{
  *a2 = -1;
  __key[0] = a1;
  unsigned int v3 = (const unsigned int *)bsearch(__key, &XlFunctionTableById, 0xF9uLL, 0x5CuLL, (int (__cdecl *)(const void *, const void *))_XlFunctionTableItemCompareById);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  *a2 = *((_WORD *)v3 + 42);
  unsigned int v5 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v5);
  CsString::append(v5, v4 + 1);
  return v5;
}

void sub_238E0A6B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    XlFormulaProcessor::externSheetToString(v1);
  }
  _Unwind_Resume(exception_object);
}

void XlBinaryReader::~XlBinaryReader(XlBinaryReader *this)
{
  OcReader::~OcReader((OcReader *)(v1 + 1352));
}

{
  uint64_t v1;
  uint64_t vars8;

  OcReader::~OcReader((OcReader *)(v1 + 1352));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'XlBinaryReader::~XlBinaryReader(OcReader *this)
{
  OcReader::~OcReader(this + 84);
}

void non-virtual thunk to'XlBinaryReader::~XlBinaryReader(XlBinaryReader *this)
{
  OcReader::~OcReader((OcReader *)((char *)this + 1336));
}

{
  XlBinaryReader::~XlBinaryReader((XlBinaryReader *)((char *)this - 8));
}

{
  XlBinaryReader::~XlBinaryReader((XlBinaryReader *)((char *)this - 16));
}

void virtual thunk to'XlBinaryReader::~XlBinaryReader(XlBinaryReader *this)
{
  uint64_t v2 = (OcReader *)(v1 + 1352);
  OcReader::~OcReader(v2);
}

{
  XlBinaryReader::~XlBinaryReader((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t XlBinaryReader::finish(XlBinaryReader *this)
{
  EshBinaryReader::finish((XlBinaryReader *)((char *)this + 40));
  uint64_t v2 = *((void *)this + 164);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = (SsrwOORootStorage *)*((void *)this + 3);
  *((void *)this + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  if (v3)
  {
    SsrwOORootStorage::~SsrwOORootStorage(v3);
    MEMORY[0x23EC997B0]();
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  uint64_t v4 = *((void *)this + 167);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 167) = 0;
  uint64_t v5 = *((void *)this + 163);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 163) = 0;
  uint64_t v6 = *((void *)this + 19);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 19) = 0;
  uint64_t v7 = *((void *)this + 20);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 20) = 0;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *((void *)this + 126) = -1;
  *((_DWORD *)this + 54) = -1;
  *((_DWORD *)this + 110) = -1;
  *(_OWORD *)((char *)this + 168) = v8;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 196) = v8;
  *((unsigned char *)this + 1344) = 0;
  XlDocumentProperties::setDefault((XlBinaryReader *)((char *)this + 1016));
  XlDocumentInfo::setDefault((uint64_t)this + 824);
  XlDocumentProtection::setDefault((uint64_t)this + 848);
  XlFileProtection::setDefault((XlBinaryReader *)((char *)this + 864));
  uint64_t v9 = *(uint64_t (**)(XlBinaryReader *))(*(void *)this + 664);
  return v9(this);
}

uint64_t virtual thunk to'XlBinaryReader::finish(XlBinaryReader *this)
{
  return XlBinaryReader::finish((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 40)));
}

uint64_t XlBinaryReader::getObjectFactory(XlBinaryReader *this)
{
  return *((void *)this + 166);
}

void *XlBinaryReader::clearWaitingCells(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[52];
  uint64_t v3 = this[53];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[52];
        uint64_t v3 = v1[53];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[53] = v2;
  return this;
}

uint64_t XlBinaryReader::start(XlBinaryReader *this, __sFILE *a2)
{
  if (*((void *)this + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 8007;
  }
  XlDocumentProperties::setDefault((XlBinaryReader *)((char *)this + 1016));
  XlDocumentInfo::setDefault((uint64_t)this + 824);
  XlDocumentProtection::setDefault((uint64_t)this + 848);
  XlFileProtection::setDefault((XlBinaryReader *)((char *)this + 864));
  XlWorksheetProperties::setDefault((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::setDefault((XlBinaryReader *)((char *)this + 600));
  XlSortInfo::setDefault((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::setDefault((uint64_t)this + 632);
  XlSubstreamProperties::setDefault((XlBinaryReader *)((char *)this + 1136));
  unint64_t v4 = (SsrwOORootStorage *)operator new(0x58uLL);
  SsrwOORootStorage::SsrwOORootStorage(v4);
  *((void *)this + 3) = v4;
  SsrwOORootStorage::openInStream(v4, (uint64_t)a2, 0);
  *((void *)this + 4) = *((void *)this + 3);
  return XlBinaryReader::start((SsrwOOStorage **)this);
}

void sub_238E0ABB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'XlBinaryReader::start(XlBinaryReader *this, __sFILE *a2)
{
  return XlBinaryReader::start((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 32)), a2);
}

uint64_t XlBinaryReader::isCell(XlBinaryReader *this, XlHeader *a2)
{
  unsigned int var1 = (unsigned __int16)a2->var1;
  uint64_t result = 1;
  if (var1 <= 0x200)
  {
    if ((unsigned __int16)a2->var1 <= 0xBCu)
    {
      if (var1 != 4 && var1 != 6) {
        return 0;
      }
    }
    else if (var1 - 189 >= 2 && var1 != 214 && var1 != 253)
    {
      return 0;
    }
  }
  else
  {
    BOOL v4 = var1 - 513 > 5 || var1 == 514;
    if (v4 && var1 != 638 && var1 != 1030) {
      return 0;
    }
  }
  return result;
}

uint64_t XlBinaryReader::getStorage(XlBinaryReader *this)
{
  return *((void *)this + 4);
}

XlCell *XlBinaryReader::read(XlBinaryReader *this, XlCell *a2)
{
  XlHeader::XlHeader(&v10);
  uint64_t result = (XlCell *)XlCell::reset(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = (XlCell *)XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 98) & 0x80000000) == 0)
  {
    if (*((void *)this + 48))
    {
      return XlBinaryReader::processCompressed(this, a2);
    }
    else
    {
      (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
      *((_DWORD *)this + 98) = -1;
      Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
      while (v10.var1 == 215 || v10.var1 == 520)
        Header = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
      uint64_t result = (XlCell *)XlBinaryReader::isCell(Header, &v10);
      if (result)
      {
        uint64_t v6 = *((void *)this + 164);
        int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 16))(v6, -RecordDataOffset, 1);
        XlBinaryReader::readCell(this, a2);
        long long v8 = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
        while (v10.var1 == 520 || v10.var1 == 215)
          long long v8 = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
        uint64_t result = (XlCell *)XlBinaryReader::isCell(v8, &v10);
        if (result)
        {
          int v9 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
          uint64_t result = (XlCell *)XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          *((_DWORD *)this + 98) = v9 - result;
        }
      }
    }
  }
  return result;
}

XlCell *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCell *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

XlRecord *XlLink::appendOperand(void **this, XlRecord *a2)
{
  uint64_t v3 = a2;
  CsSimpleHeapVector<XlRecord>::pushBack(this + 11, (uint64_t *)&v3);
  uint64_t result = v3;
  if (v3) {
    return (XlRecord *)(*(uint64_t (**)(XlRecord *))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void sub_238E0AFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlLink *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlLinkOperandTable *a2)
{
  XlHeader::XlHeader(&v9);
  int v4 = *((unsigned __int8 *)a2 + 32);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 44) & 0x80000000) == 0 && (!v4 || *((_DWORD *)a2 + 9) != 0))
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    uint64_t result = (void *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((unsigned char *)this + 1320));
    *((_DWORD *)this + 44) = -1;
    if ((unsigned __int16)v9.var1 - 89 <= 1)
    {
      while (1)
      {
        long long v8 = XlRecordFactory::createRecord(&v9, v7);
        *((void *)this + 163) = v8;
        (*(void (**)(XlEof *, void))(*(void *)v8 + 16))(v8, *((void *)this + 167));
        uint64_t v10 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack((void **)a2 + 1, &v10);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        *((void *)this + 163) = 0;
        if (v4)
        {
          if (*((_DWORD *)a2 + 9) == ((*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3)) {
            break;
          }
        }
        uint64_t result = (void *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((unsigned char *)this + 1320));
        if ((unsigned __int16)v9.var1 - 89 >= 2) {
          return result;
        }
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
      *((_DWORD *)this + 44) = result;
    }
  }
  return result;
}

void sub_238E0B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlLinkOperandTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlLinkLookupTable *a2)
{
  XlHeader::XlHeader(&v12);
  uint64_t result = XlLinkLookupTable::reset(a2);
  if ((*((_DWORD *)this + 43) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    for (uint64_t result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
          ;
          uint64_t result = XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320)))
    {
      unsigned int v5 = (unsigned __int16)v12.var1 - 35;
      BOOL v6 = v5 > 0x37;
      uint64_t v7 = (1 << v5) & 0xC0000000000001;
      BOOL v8 = v6 || v7 == 0;
      if (v8 && v12.var1 != 430) {
        break;
      }
    }
    if (v12.var1 == 23)
    {
      XlHeader v9 = (XlExternSheet *)operator new(0x30uLL);
      XlExternSheet::XlExternSheet(v9, &v12);
      *((void *)this + 163) = v9;
      if (v9) {
      (*(void (**)(void, XlExternSheet *))(**((void **)this + 167) + 256))(*((void *)this + 167), v9);
      }
      if (((*((_DWORD *)v9 + 8) - *((_DWORD *)v9 + 6)) & 0x7FFF8) != 0)
      {
        unsigned int v10 = 0;
        do
        {
          ExternRef = (XlVertex *)XlExternSheet::getExternRef(v9, v10);
          XlCoordList::appendVertex(a2, ExternRef);
          ++v10;
        }
        while (v10 < (unsigned __int16)((*((_DWORD *)v9 + 8) - *((_DWORD *)v9 + 6)) >> 3));
      }
      *((unsigned char *)v9 + 16) = 0;
      uint64_t result = *((void *)this + 163);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      *((void *)this + 163) = 0;
    }
  }
  return result;
}

void sub_238E0B3C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlLinkLookupTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlLinkTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

XlFont *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlFontTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlContentFormatTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlNameTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCellFormatTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlSheetInfoTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlStyleTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlStringTable *a2)
{
}

XlStringExtractor *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlString *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlDocumentPresentationTable *a2)
{
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlDocumentProtection *a2)
{
  return XlDocumentProtection::operator=((uint64_t)a2, (uint64_t)this + 848);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlDocumentProtection *a2)
{
  return XlDocumentProtection::operator=((uint64_t)a2, (uint64_t)this + 832);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlFileProtection *a2)
{
  return XlFileProtection::operator=((uint64_t)a2, (uint64_t)this + 864);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlFileProtection *a2)
{
  return XlFileProtection::operator=((uint64_t)a2, (uint64_t)this + 848);
}

double XlBinaryReader::read(XlBinaryReader *this, XlDocumentInfo *a2)
{
  return XlDocumentInfo::operator=((uint64_t)a2, (uint64_t)this + 824);
}

double non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlDocumentInfo *a2)
{
  return XlDocumentInfo::operator=((uint64_t)a2, (uint64_t)this + 808);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlDocumentProperties *a2)
{
  return XlDocumentProperties::operator=((uint64_t)a2, (uint64_t)this + 1000);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlCustomViewInfoTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 54) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v8);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v8.var1 == 425)
    {
      do
      {
        unsigned int v5 = (XlUserBView *)operator new(0x50uLL);
        XlUserBView::XlUserBView(v5, &v8);
        *((void *)this + 163) = v5;
        uint64_t v6 = *((void *)this + 167);
        if (v5) {
        else
        }
          uint64_t v7 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v6 + 1320))(v6, v7);
        uint64_t v9 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v9);
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        *((void *)this + 163) = 0;
        uint64_t result = (void *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
      }
      while (v8.var1 == 425);
    }
    else
    {
      *((_DWORD *)this + 54) = -1;
    }
  }
  return result;
}

void sub_238E0B688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCustomViewInfoTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlInterfaceTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 52) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v10);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v10.var1 == 225)
    {
      do
      {
        uint64_t v6 = XlRecordFactory::createRecord(&v10, v5);
        *((void *)this + 163) = v6;
        (*(void (**)(XlEof *, void))(*(void *)v6 + 16))(v6, *((void *)this + 167));
        uint64_t v11 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v11);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
      }
      while (v10.var1 != 226);
      uint64_t v7 = XlRecordFactory::createRecord(&v10, v5);
      *((void *)this + 163) = v7;
      (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
      uint64_t v11 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v11);
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      *((void *)this + 163) = 0;
      uint64_t v8 = *((void *)this + 164);
      int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 16))(v8, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 52) = -1;
    }
  }
  return result;
}

void sub_238E0B8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlInterfaceTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlColorTable *a2)
{
}

double non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlSheetInfo *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlSortInfo *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

double non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProtection *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProperties *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlMergeTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlPhoneticTable *a2)
{
  uint64_t result = XlPhoneticTable::setDefault((uint64_t)a2);
  if ((*((_DWORD *)this + 67) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v8);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
    uint64_t result = *((void *)this + 163);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v8.var1 == 239)
    {
      unsigned int v5 = (char *)operator new(0x40uLL);
      XlRubi::XlRubi((XlRubi *)v5, &v8);
      *((void *)this + 163) = v5;
      if (v5) {
      (*(void (**)(void, char *))(**((void **)this + 167) + 1416))(*((void *)this + 167), v5);
      }
      *((_WORD *)a2 + 4) = *((_WORD *)v5 + 8);
      *((unsigned char *)a2 + 10) = v5[18];
      *((_DWORD *)a2 + 3) = *((_DWORD *)v5 + 5);
      *((unsigned char *)a2 + 16) = v5[24];
      *(_WORD *)((char *)a2 + 17) = *(_WORD *)(v5 + 25);
      if (((*((void *)v5 + 5) - *((void *)v5 + 4)) & 0x7FFFFFFF8) != 0)
      {
        unsigned int v6 = 0;
        do
        {
          CellRange = (XlOper *)XlCondFmt::getCellRange((XlCondFmt *)v5, v6);
          XlCrn::appendOperand(a2, CellRange);
          ++v6;
        }
        while (v6 < ((*((void *)v5 + 5) - *((void *)v5 + 4)) >> 3));
      }
      v5[56] = 0;
      uint64_t result = *((void *)this + 163);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      *((void *)this + 163) = 0;
    }
    else
    {
      *((_DWORD *)this + 67) = -1;
    }
  }
  return result;
}

void sub_238E0BB4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlPhoneticTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlSheetPresentationTable *a2)
{
}

void *ChDOWNCAST<XlRecord,XlTxo>(void *result)
{
  if (result) {
  return result;
  }
}

uint64_t *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlGraphicsInfo *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlConditionalFormatTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlRangeProtectionTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 62) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v7);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v7, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v7.var1 == 2152)
    {
      do
      {
        unsigned int v6 = XlRecordFactory::createRecord(&v7, v5);
        *((void *)this + 163) = v6;
        (*(void (**)(XlEof *, void))(*(void *)v6 + 16))(v6, *((void *)this + 167));
        uint64_t v8 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v8);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v7, *((unsigned char *)this + 1320));
      }
      while (v7.var1 == 2152);
      return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 4294967292, 1);
    }
    else
    {
      *((_DWORD *)this + 62) = -1;
    }
  }
  return result;
}

void sub_238E0BD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlRangeProtectionTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *XlBinaryReader::read(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)(a2 + 8));
  if ((*(_DWORD *)(a1 + 440) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet((_DWORD *)a1, 0);
  }
  if ((*(_DWORD *)(a1 + 284) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**(void **)(a1 + 1312) + 16))(*(void *)(a1 + 1312));
    XlHeader::XlHeader(&v8);
    while (1)
    {
      XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), &v8, *(unsigned char *)(a1 + 1320));
      if (v8.var1 != 2162) {
        break;
      }
      unsigned int v6 = XlRecordFactory::createRecord(&v8, v5);
      if (v6)
      {
        uint64_t v7 = (uint64_t)v6;
        (*(void (**)(XlEof *, void))(*(void *)v6 + 16))(v6, *(void *)(a1 + 1336));
        uint64_t v9 = v7;
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v9);
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
    }
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 1312) + 16))(*(void *)(a1 + 1312), 4294967292, 1);
  }
  return result;
}

void sub_238E0BEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(uint64_t a1, uint64_t a2)
{
  return XlBinaryReader::read(a1 - 16, a2);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlDataConsolidationInfo *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 61) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v10);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    signed __int16 var1 = v10.var1;
    if (v10.var1 == 80)
    {
      while (var1 == 80 || var1 == 437 || var1 == 82)
      {
        uint64_t v7 = XlRecordFactory::createRecord(&v10, v5);
        *((void *)this + 163) = v7;
        (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
        uint64_t v11 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v11);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((unsigned char *)this + 1320));
        signed __int16 var1 = v10.var1;
      }
      uint64_t v8 = *((void *)this + 164);
      int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 16))(v8, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 61) = -1;
    }
  }
  return result;
}

void sub_238E0C0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlDataConsolidationInfo *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlChartSeriesFormat *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlHyperlinkTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlCalculationProperties *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  int v4 = *(uint64_t (**)(XlCalculationProperties *, char *))(*(void *)a2 + 16);
  return v4(a2, (char *)this + 632);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCalculationProperties *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlCellTableInfo *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    XlBinaryReader::setSheet(this, 0);
  }
  int v4 = *(uint64_t (**)(XlCellTableInfo *, char *))(*(void *)a2 + 16);
  return v4(a2, (char *)this + 1272);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCellTableInfo *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlPageProperties *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlScenarioTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlPivotInfoTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlSheetBackgroundInfo *a2)
{
}

void *XlBinaryReader::read(XlBinaryReader *this, XlAutoFilterTable *a2)
{
  uint64_t result = XlObjBiff8::clearSubRecords(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 68) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v12);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
    uint64_t result = (void *)*((void *)this + 163);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
    }
    *((void *)this + 163) = 0;
    if (v12.var1 == 155)
    {
      *((unsigned char *)a2 + 10) = 1;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
      int var1 = (unsigned __int16)v12.var1;
      if (v12.var1 != 157)
      {
LABEL_16:
        if (var1 == 158)
        {
          do
          {
            uint64_t v9 = (XlAutoFilter *)operator new(0x38uLL);
            XlAutoFilter::XlAutoFilter(v9, &v12);
            *((void *)this + 163) = v9;
            if (v9) {
            (*(void (**)(void, XlAutoFilter *))(**((void **)this + 167) + 456))(*((void *)this + 167), v9);
            }
            XlCoordList::appendVertex(a2, v9);
            *((void *)this + 163) = 0;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
          }
          while (v12.var1 == 158);
        }
        uint64_t v10 = *((void *)this + 164);
        int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
        return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 16))(v10, -RecordDataOffset, 1);
      }
    }
    else if (v12.var1 != 157)
    {
      *((_DWORD *)this + 68) = -1;
      return result;
    }
    unsigned int v6 = (XlAutoFilterInfo *)operator new(0x18uLL);
    XlAutoFilterInfo::XlAutoFilterInfo(v6, &v12);
    *((void *)this + 163) = v6;
    if (v6) {
    else
    }
      uint64_t v7 = 0;
    (*(void (**)(void, _WORD *))(**((void **)this + 167) + 464))(*((void *)this + 167), v7);
    *((_WORD *)a2 + 4) = v7[8];
    uint64_t v8 = *((void *)this + 163);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)this + 163) = 0;
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((unsigned char *)this + 1320));
    int var1 = (unsigned __int16)v12.var1;
    goto LABEL_16;
  }
  return result;
}

void sub_238E0C550(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlAutoFilterTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCustomViewTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlPivotTable *a2)
{
  uint64_t v3 = (void **)((char *)a2 + 8);
  uint64_t result = (uint64_t)CsSimpleHeapVector<XlRecord>::clear((void *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = (uint64_t)XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 58) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    XlHeader::XlHeader(&v18);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v18, *((unsigned char *)this + 1320));
    uint64_t v6 = *((void *)this + 163);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 163) = 0;
    if (v18.var1 != 176) {
      goto LABEL_22;
    }
    uint64_t v7 = XlRecordFactory::createRecord(&v18, v5);
    *((void *)this + 163) = v7;
    (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
    uint64_t v8 = *((void *)this + 163);
    __int16 v9 = *(_WORD *)(v8 + 38);
    __int16 v10 = *(_WORD *)(v8 + 40);
    uint64_t v19 = v8;
    CsSimpleHeapVector<XlRecord>::pushBack(v3, &v19);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    char v11 = 1;
    while (1)
    {
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v18, *((unsigned char *)this + 1320));
      if (v18.var1 == 10 || v18.var1 == 176 || v18.var1 == 574) {
        break;
      }
      uint64_t v13 = XlRecordFactory::createRecord(&v18, v12);
      *((void *)this + 163) = v13;
      if (v18.var1 == 181)
      {
        BOOL v14 = (v11 & 1) == 0;
        char v11 = 0;
        if (v14) {
          __int16 v15 = v10;
        }
        else {
          __int16 v15 = v9;
        }
        *((_WORD *)v13 + 8) = v15;
      }
      (*(void (**)(XlEof *, void))(*(void *)v13 + 16))(v13, *((void *)this + 167));
      uint64_t v19 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v19);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    uint64_t v16 = *((void *)this + 164);
    int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v16 + 16))(v16, -RecordDataOffset, 1);
    if (v18.var1 == 176) {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
    }
    else {
LABEL_22:
    }
      uint64_t result = 0xFFFFFFFFLL;
    *((_DWORD *)this + 58) = result;
  }
  return result;
}

void sub_238E0C81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlPivotTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlNoteTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlColumnTable *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

SsrwOOStgStream *XlBinaryReader::read(XlBinaryReader *this, XlChangeHistory *a2)
{
  XlChangeHistory::clear(a2);
  uint64_t result = (SsrwOOStgStream *)SsrwOOStorage::hasChild(*((SsrwOOStorage **)this + 4), (const unsigned __int16 *)"R");
  if (result)
  {
    uint64_t result = SsrwOOStorage::openStream(*((SsrwOOStorage **)this + 4), (const unsigned __int16 *)"R");
    if (result)
    {
      unsigned int v5 = (SsrwOOStream *)result;
      if ((*(unsigned int (**)(SsrwOOStgStream *))(*(void *)result + 176))(result))
      {
        uint64_t v6 = (SsrwOOStream *)XlParserVisitor::setStream(*((XlParserVisitor **)this + 167), v5);
        XlHeader::XlHeader(&v8);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
        if (*((void *)this + 163)) {
          ChLogFunction("record not NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 2782);
        }
        while (v8.var1 != 10)
        {
          uint64_t v7 = XlRecordFactory::createRecord(&v8, (XlHeader *)2);
          *((void *)this + 163) = v7;
          (*(void (**)(XlEof *, void))(*(void *)v7 + 16))(v7, *((void *)this + 167));
          XlChangeHistory::appendChangeLogEntry(a2, *((XlRecord **)this + 163));
          *((void *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v8, *((unsigned char *)this + 1320));
        }
        XlParserVisitor::setStream(*((XlParserVisitor **)this + 167), v6);
      }
      return (SsrwOOStgStream *)(*((uint64_t (**)(SsrwOOStream *))v5->var0 + 1))(v5);
    }
  }
  return result;
}

void sub_238E0C9EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    int v3 = *(_DWORD *)__cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v3;
  }
  _Unwind_Resume(exception_object);
}

SsrwOOStgStream *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlChangeHistory *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlRouting *a2)
{
  XlHeader::XlHeader(&v14);
  int v4 = (void **)((char *)a2 + 8);
  uint64_t result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 48) & 0x80000000) == 0)
  {
    (*(void (**)(void))(**((void **)this + 164) + 16))(*((void *)this + 164));
    uint64_t result = (void *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
    if (v14.var1 == 184)
    {
      uint64_t v6 = (XlDocRoute *)operator new(0x68uLL);
      XlDocRoute::XlDocRoute(v6, &v14);
      *((void *)this + 163) = v6;
      uint64_t v7 = *((void *)this + 167);
      if (v6) {
      else
      }
        XlHeader v8 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 592))(v7, v8);
      uint64_t v15 = *((void *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v15);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      *((void *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
      while (v14.var1 == 185)
      {
        __int16 v9 = (XlRecipName *)operator new(0x28uLL);
        XlRecipName::XlRecipName(v9, &v14);
        *((void *)this + 163) = v9;
        uint64_t v10 = *((void *)this + 167);
        if (v9) {
        else
        }
          char v11 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v10 + 944))(v10, v11);
        uint64_t v15 = *((void *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v4, &v15);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        *((void *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((unsigned char *)this + 1320));
      }
      uint64_t v12 = *((void *)this + 164);
      int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, -RecordDataOffset, 1);
    }
  }
  return result;
}

void sub_238E0CD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    XlChartBinaryReader::scanChartProperties();
  }
  _Unwind_Resume(exception_object);
}

void *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlRouting *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

_DWORD *XlBinaryReader::createMark(XlBinaryReader *this)
{
  uint64_t v2 = operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26EBE45E0;
  EshMark::EshMark((EshMark *)(v2 + 2));
  *(void *)uint64_t v2 = &unk_26EBE4590;
  v2[12] = 0;
  (*(void (**)(XlBinaryReader *, _DWORD *))(*(void *)this + 32))(this, v2);
  return v2;
}

void sub_238E0CE58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_DWORD *virtual thunk to'XlBinaryReader::createMark(XlBinaryReader *this)
{
  return XlBinaryReader::createMark((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 96)));
}

uint64_t XlBinaryReader::mark(XlBinaryReader *this, OcMark *a2)
{
  OcBinaryReader::mark((uint64_t)this, (uint64_t)a2);
  if (!a2
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v5 = v4;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
  v5[12] = result;
  return result;
}

uint64_t OcBinaryReader::mark(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 48);
  return v2();
}

uint64_t virtual thunk to'XlBinaryReader::mark(XlBinaryReader *this, OcMark *a2)
{
  return XlBinaryReader::mark((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 104)), a2);
}

uint64_t XlBinaryReader::seek(XlBinaryReader *this, const OcMark *a2)
{
  OcBinaryReader::seek((uint64_t)this, (uint64_t)a2);
  if (!a2
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v5 = v4[12];
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, void))(**((void **)this + 164) + 16);
  uint64_t v7 = *((void *)this + 164);
  return v6(v7, v5, 0);
}

uint64_t OcBinaryReader::seek(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 56);
  return v2();
}

uint64_t virtual thunk to'XlBinaryReader::seek(XlBinaryReader *this, const OcMark *a2)
{
  return XlBinaryReader::seek((XlBinaryReader *)((char *)this + *(void *)(*(void *)this - 112)), a2);
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlBinaryData *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlEshRoot *a2)
{
}

void XlBinaryReader::read(XlBinaryReader *this, EshObject *a2)
{
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, EshObject *a2)
{
}

void XlBinaryReader::read(XlBinaryReader *this, EshRoot *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, EshRoot *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void XlBinaryReader::seek(XlBinaryReader *this, const EshContainer *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void virtual thunk to'XlBinaryReader::seek(XlBinaryReader *this, const EshContainer *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void XlBinaryReader::seek(XlBinaryReader *this, const EshRoot *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void virtual thunk to'XlBinaryReader::seek(XlBinaryReader *this, const EshRoot *a2)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

XlParserVisitor *XlBinaryReader::instantiateParser(XlBinaryReader *this, SsrwOOStream *a2)
{
  int v3 = (XlParserVisitor *)operator new(0x68uLL);
  XlParserVisitor::XlParserVisitor(v3, a2);
  return v3;
}

void sub_238E0D338(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlRowBlock *a2)
{
}

XlBinaryReader *XlBinaryReader::read(XlBinaryReader *this, XlCellRow *a2)
{
  XlHeader::XlHeader(&v17);
  uint64_t result = (XlBinaryReader *)XlCellRow::reset(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0) {
    uint64_t result = (XlBinaryReader *)XlBinaryReader::setSheet(this, 0);
  }
  if ((*((_DWORD *)this + 101) & 0x80000000) == 0)
  {
    uint64_t result = (XlBinaryReader *)(*(uint64_t (**)(XlBinaryReader *, void))(*(void *)this + 424))(this, *((void *)a2 + 1));
    int v5 = *(unsigned __int8 *)(*((void *)a2 + 1) + 19);
    *((_DWORD *)this + 101) = -1;
    if (v5)
    {
LABEL_5:
      for (unsigned int i = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v17, *((unsigned char *)this + 1320));
            ;
            unsigned int i = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v17, *((unsigned char *)this + 1320)))
      {
        if (v17.var1 != 215 && v17.var1 != 520)
        {
          uint64_t result = (XlBinaryReader *)XlBinaryReader::isCell(i, &v17);
          if (!result) {
            break;
          }
        }
        unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 164) + 80))(*((void *)this + 164));
        uint64_t result = (XlBinaryReader *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 164) + 16))(*((void *)this + 164), 4294967294, 1);
        if (v17.var1 != 215)
        {
          if (v17.var1 == 520)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              int v8 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
              *((_DWORD *)this + 101) = v8 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
            }
          }
          else
          {
            unsigned int v9 = *(unsigned __int16 *)(*((void *)a2 + 1) + 8);
            if (v7 > v9)
            {
              if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
              {
                while (1)
                {
                  int var1 = (unsigned __int16)v17.var1;
                  if (v17.var1 != 215)
                  {
                    uint64_t result = (XlBinaryReader *)XlBinaryReader::isCell(result, &v17);
                    if (!result) {
                      break;
                    }
                  }
                  uint64_t result = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v17, *((unsigned char *)this + 1320));
                }
                if (var1 == 520)
                {
                  int v15 = (*(uint64_t (**)(void))(**((void **)this + 164) + 40))(*((void *)this + 164));
                  uint64_t result = (XlBinaryReader *)XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                  *((_DWORD *)this + 101) = v15 - result;
                }
              }
              return result;
            }
            if (v7 >= v9)
            {
              uint64_t v10 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
              if (!v10)
              {
                exception = __cxa_allocate_exception(4uLL);
                _DWORD *exception = 1001;
              }
              uint64_t v11 = *((void *)this + 164);
              int RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v11 + 16))(v11, -RecordDataOffset, 1);
              XlBinaryReader::readCell(this, v10);
              XlCellRow::takeCell(a2, v10);
              while (*((void *)this + 48))
              {
                uint64_t v13 = (XlCell *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 166) + 16))(*((void *)this + 166), 3);
                if (v13)
                {
                  XlBinaryReader::processCompressed(this, v13);
                  XlCellRow::takeCell(a2, v13);
                }
              }
              goto LABEL_5;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_238E0D6DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

XlBinaryReader *non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlCellRow *a2)
{
  return XlBinaryReader::read((XlBinaryReader *)((char *)this - 16), a2);
}

uint64_t XlBinaryReader::read(uint64_t this, XlRowProperties *a2)
{
  if ((*(_DWORD *)(this + 404) & 0x80000000) == 0)
  {
    int v3 = (XlBinaryReader *)this;
    (*(void (**)(void))(**(void **)(this + 1312) + 16))(*(void *)(this + 1312));
    this = XlBinaryReader::readRowInfo(v3, a2);
    if (!*((unsigned char *)a2 + 19)) {
      *((_DWORD *)v3 + 101) = -1;
    }
  }
  return this;
}

uint64_t non-virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, XlRowProperties *a2)
{
  return XlBinaryReader::read((uint64_t)this - 16, a2);
}

void XlBinaryReader::read(OcBinaryReader *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v4 = (SsrwOOStorage *)(*((uint64_t (**)(OcBinaryReader *))a1->var0 + 11))(a1);
  v6[0] = XlBinaryReader::VBA_STORAGE;
  v6[1] = unk_238EE6BF6;
  __int16 v7 = 0;
  if (SsrwOOStorage::hasChild(v4, (const unsigned __int16 *)v6))
  {
    int v5 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v4, (const unsigned __int16 *)v6);
    OcBinaryReader::readMacros(a1, a2, v5);
  }
}

void virtual thunk to'XlBinaryReader::read(void *a1, uint64_t a2)
{
}

uint64_t OcBinaryReader::seek(OcBinaryReader *this, const EshContainer *a2, uint64_t a3)
{
  uint64_t v5 = (*((uint64_t (**)(OcBinaryReader *))this->var0 + 14))(this);
  uint64_t v6 = *(uint64_t (**)(uint64_t, const EshContainer *, uint64_t))(*(void *)v5 + 64);
  return v6(v5, a2, a3);
}

uint64_t OcBinaryReader::seek(OcBinaryReader *this, const EshRoot *a2, uint64_t a3)
{
  uint64_t v5 = (*((uint64_t (**)(OcBinaryReader *))this->var0 + 14))(this);
  uint64_t v6 = *(uint64_t (**)(uint64_t, const EshRoot *, uint64_t))(*(void *)v5 + 72);
  return v6(v5, a2, a3);
}

uint64_t OcBinaryReader::read(OcBinaryReader *this, EshRoot *a2)
{
  uint64_t v3 = (*((uint64_t (**)(OcBinaryReader *))this->var0 + 14))(this);
  int v4 = *(uint64_t (**)(uint64_t, EshRoot *))(*(void *)v3 + 32);
  return v4(v3, a2);
}

uint64_t OcBinaryReader::read(OcBinaryReader *this, EshObject *a2)
{
  uint64_t v3 = (*((uint64_t (**)(OcBinaryReader *))this->var0 + 14))(this);
  int v4 = *(uint64_t (**)(uint64_t, EshObject *))(*(void *)v3 + 40);
  return v4(v3, a2);
}

void XlMark::~XlMark(XlMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((XlMark *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((XlMark *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

void OcMark::~OcMark(OcMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((OcMark *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((OcMark *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t XlReadStgStream::readUInt64(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 8;
  __int16 v4 = v2 - 8;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 88);
    return v5();
  }
  else
  {
    int v7 = 8;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadUInt64(*((void *)this + 3));
  }
}

float XlReadStgStream::readFloat32(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 4;
  __int16 v4 = v2 - 4;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    uint64_t v5 = *(void (**)(void))(**((void **)this + 5) + 112);
    v5();
  }
  else
  {
    int v7 = 4;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadFloat32(*((void *)this + 3));
  }
  return result;
}

double XlReadStgStream::readFloat64(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 8;
  __int16 v4 = v2 - 8;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    uint64_t v5 = *(void (**)(void))(**((void **)this + 5) + 120);
    v5();
  }
  else
  {
    int v7 = 8;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadFloat64(*((void *)this + 3));
  }
  return result;
}

uint64_t XlReadStgStream::readChar16(XlReadStgStream *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= 2;
  __int16 v4 = v2 - 2;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 128);
    return v5();
  }
  else
  {
    int v7 = 2;
    (*(void (**)(XlReadStgStream *, void, int *))(*(void *)this + 56))(this, *((void *)this + 3), &v7);
    return CsLeReadUInt16(*((unsigned __int16 **)this + 3));
  }
}

uint64_t XlReadStgStream::readString8(XlReadStgStream *this, int *a2, char *a3)
{
  unint64_t v5 = *((unsigned __int16 *)this + 6);
  if (v5 >= *a2)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 144))(*((void *)this + 5));
    __int16 v9 = *(_WORD *)a2;
  }
  else
  {
    int v6 = *a2;
    do
    {
      unsigned int v11 = (unsigned __int16)v5;
      if ((_WORD)v5)
      {
        (*(void (**)(void, unsigned int *, char *))(**((void **)this + 5) + 144))(*((void *)this + 5), &v11, a3);
        unsigned int v7 = v11;
        LOWORD(v5) = *((_WORD *)this + 6) - v11;
        *((_WORD *)this + 6) = v5;
      }
      else
      {
        XlReadStgStream::readNextHostRecordHeader(this);
        unsigned int v7 = v11;
        LOWORD(v5) = *((_WORD *)this + 6);
      }
      v6 -= v7;
      int v12 = v6;
      a3 += v7;
    }
    while (v6 > (unint64_t)(unsigned __int16)v5);
    uint64_t result = (*(uint64_t (**)(void, int *, char *))(**((void **)this + 5) + 144))(*((void *)this + 5), &v12, a3);
    __int16 v9 = v12;
  }
  *((_WORD *)this + 6) -= v9;
  return result;
}

void std::vector<unsigned int,ChAllocator<unsigned int>>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    unint64_t v9 = (unint64_t)v6 - *(void *)a1;
    unint64_t v10 = (v5 - *(void *)a1) >> 2;
    if (2 * (int)v10 <= (v9 >> 2) + 1) {
      unsigned int v11 = (v9 >> 2) + 1;
    }
    else {
      unsigned int v11 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v12);
      uint64_t v15 = v14;
      uint64_t v8 = *(_DWORD **)a1;
      int v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v13[v9 & 0x3FFFFFFFCLL];
    XlHeader v17 = &v13[4 * v15];
    *(_DWORD *)uint64_t v16 = *a2;
    unsigned int v7 = v16 + 4;
    while (v6 != v8)
    {
      int v18 = *--v6;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v17;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    unsigned int v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t XlReadStgStream::close(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 152))();
}

uint64_t XlReadStgStream::setClass(XlReadStgStream *this, const _SsrwOO_GUID *a2)
{
  return (*(uint64_t (**)(void, const _SsrwOO_GUID *))(**((void **)this + 5) + 160))(*((void *)this + 5), a2);
}

uint64_t XlReadStgStream::getInfo(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 168))();
}

uint64_t XlReadStgStream::writeBytes(XlReadStgStream *this, const void *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, const void *, unsigned int *))(**((void **)this + 5) + 184))(*((void *)this + 5), a2, a3);
}

uint64_t XlReadStgStream::writeByte(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 192))();
}

uint64_t XlReadStgStream::writeSInt16(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 200))();
}

uint64_t XlReadStgStream::writeUInt16(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 208))();
}

uint64_t XlReadStgStream::writeSInt32(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 216))();
}

uint64_t XlReadStgStream::writeUInt32(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 224))();
}

uint64_t XlReadStgStream::writeFloat32(XlReadStgStream *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 5) + 232))(a2);
}

uint64_t XlReadStgStream::writeFloat64(XlReadStgStream *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 5) + 240))(a2);
}

uint64_t XlReadStgStream::writeChar16(XlReadStgStream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 248))();
}

uint64_t XlReadStgStream::writeString16(XlReadStgStream *this, const unsigned __int16 *a2, int *a3)
{
  return (*(uint64_t (**)(void, const unsigned __int16 *, int *))(**((void **)this + 5) + 256))(*((void *)this + 5), a2, a3);
}

uint64_t XlStringExtractor::setStringLocation(uint64_t this, int a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    int v6 = (XlStringParser *)(this + 8);
    uint64_t v7 = *(void *)(this + 24);
    uint64_t v8 = 4 * (a3 + 1) - 4;
    do
    {
      uint64_t v9 = *(void *)(v7 + 16 * v5 + 8);
      if (*(_DWORD *)(v9 + v4 + 4) == -1)
      {
        uint64_t v10 = *(unsigned int *)(v9 + v4);
        int v11 = XlStringExtractor::tableChunkBoundary((XlStringExtractor *)v3, *(_DWORD *)(v9 + v4));
        if (v11 == -1)
        {
          uint64_t v10 = (v10 + 4);
          int v11 = XlStringExtractor::tableChunkBoundary((XlStringExtractor *)v3, v10);
        }
        int v12 = v11;
        (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), v10, 0);
        this = XlStringParser::parseSize(v6, *(SsrwOOStream **)(v3 + 16), v12);
        uint64_t v7 = *(void *)(v3 + 24);
        *(_DWORD *)(*(void *)(v7 + 16 * v5 + 8) + v4 + 4) = this + v10;
      }
      v4 += 4;
    }
    while (v8 != v4);
  }
  return this;
}

uint64_t XlFormatSection::isConditionMet(XlFormatSection *this, double a2)
{
  if (!*((unsigned char *)this + 11)) {
    return 0;
  }
  switch(*((_DWORD *)this + 11))
  {
    case 1:
      if (*((double *)this + 2) <= a2) {
        return 0;
      }
      break;
    case 2:
      if (*((double *)this + 2) != a2) {
        return 0;
      }
      break;
    case 3:
      if (*((double *)this + 2) < a2) {
        return 0;
      }
      break;
    case 4:
      if (*((double *)this + 2) >= a2) {
        return 0;
      }
      break;
    case 5:
      if (*((double *)this + 2) == a2) {
        return 0;
      }
      break;
    case 6:
      if (*((double *)this + 2) > a2) {
        return 0;
      }
      break;
    default:
      return 0;
  }
  return 1;
}

void XlStreamer::XlStreamer(XlStreamer *this, XlBinaryReader *a2, OCCCryptoKey *a3, const char *a4)
{
  OCCBinaryStreamer::OCCBinaryStreamer((OCCBinaryStreamer *)this, a3, a4);
  *(void *)uint64_t v5 = &unk_26EBE4848;
  *(void *)(v5 + 24) = a2;
  *(_DWORD *)(v5 + 32) = 0;
  if (!(*(uint64_t (**)(XlBinaryReader *))(*(void *)a2 + 616))(a2)) {
    ChLogFunction("storage is NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Streamer/XlStreamer.cpp", 30);
  }
}

void sub_238E0E708(_Unwind_Exception *a1)
{
  OCCBinaryStreamer::~OCCBinaryStreamer(v1);
  _Unwind_Resume(a1);
}

const char *XlStreamer::getDefaultPassphraseInUTF8(XlStreamer *this)
{
  return "VelvetSweatshop";
}

uint64_t XlStreamer::replaceGarbledRecordData(OCCBinaryStreamer *this, const XlHeader *a2, SsrwOOStream *a3)
{
  int v6 = (SsrwOOStream *)(*((uint64_t (**)(void **))*this[1].var0 + 78))(this[1].var0);
  signed __int16 var1 = a2->var1;
  if (XlStreamer::isWorkbookRecordDataGarbled((XlStreamer *)v6, var1))
  {
    if (var1 == 133) {
      OCCBinaryStreamer::replaceGarbledBytes(this, v6, a3);
    }
    OCCBinaryStreamer::replaceGarbledBytes(this, v6, a3);
  }
  return 1;
}

uint64_t XlStreamer::isWorkbookRecordDataGarbled(XlStreamer *this, int a2)
{
  uint64_t result = 1;
  if (a2 <= 311)
  {
    if (a2 == 47 || a2 == 133 || a2 == 225) {
      return result;
    }
    return 0;
  }
  if ((a2 - 404) >= 3 && a2 != 312 && a2 != 2057) {
    return 0;
  }
  return result;
}

uint64_t XlStreamer::peekHeader(XlStreamer *this, XlHeader *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 3) + 624))(*((void *)this + 3));
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, *((unsigned int *)this + 8), 0);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  *((_DWORD *)this + 8) = result + v6;
  if (v5)
  {
    a2->var0 = v6;
    a2->signed __int16 var1 = v5;
    a2->unsigned int var2 = 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16);
    return v8(v4, 4294967292, 1);
  }
  else
  {
    a2->signed __int16 var1 = 0;
    a2->var0 = 0;
  }
  return result;
}

uint64_t XlStreamer::getNextRecordHeader(XlStreamer *this, int a2, XlHeader *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 624))(*((void *)this + 3));
  unsigned int v7 = a2 + a3->var0 + 4;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  if (v7 < result && (*((_DWORD *)this + 8) & 0x80000000) == 0)
  {
    return XlStreamer::peekHeader(this, a3);
  }
  return result;
}

uint64_t XlStreamer::replaceGarbledBytesInStream(OCCBinaryStreamer *this, SsrwOOStream *a2)
{
  uint64_t v4 = (*((uint64_t (**)(void **))*this[1].var0 + 78))(this[1].var0);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
  (*((void (**)(SsrwOOStream *, void, void))a2->var0 + 2))(a2, 0, 0);
  LODWORD(this[1].var1) = 0;
  XlHeader::XlHeader(&v9);
  XlStreamer::peekHeader((XlStreamer *)this, &v9);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 40))(v4) + 4 <= v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    unsigned int v7 = (SsrwOOStream *)(*((uint64_t (**)(void))*this[1].var0 + 78))();
    OCCBinaryStreamer::replaceGarbledBytes(this, v7, a2, v6);
  }
  return 1;
}

uint64_t XlStreamer::getInputStorage(XlStreamer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 616))();
}

uint64_t XlStreamer::decryptWorkbookStream(OCCBinaryStreamer *this, SsrwOOStream *a2)
{
  uint64_t v4 = (SsrwOOStream *)(*((uint64_t (**)(void **))*this[1].var0 + 78))(this[1].var0);
  uint64_t v5 = (*((uint64_t (**)(SsrwOOStream *))v4->var0 + 5))(v4);
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  OCCSegmenter::OCCSegmenter((OCCSegmenter *)v12, 1024);
  v12[0] = &unk_26EBD99D0;
  signed __int16 var1 = this->var1;
  unsigned int v8 = (*((uint64_t (**)(SsrwOOStream *))v4->var0 + 6))(v4);
  int v9 = OCCSegmenter::decryptSegmentsIntoStream((OCCSegmenter *)v12, v4, 0, var1, v8, a2);
  uint64_t v10 = 0;
  if (v9) {
    uint64_t v10 = XlStreamer::replaceGarbledBytesInStream(this, a2);
  }
  SsrwOOStream::seekFromStart(v4, v5);
  SsrwOOStream::seekFromStart(a2, v6);
  return v10;
}

uint64_t XlStreamer::encryptWorkbookStream(OCCBinaryStreamer *this, SsrwOOStream *a2)
{
  uint64_t v4 = (SsrwOOStream *)(*((uint64_t (**)(void **))*this[1].var0 + 78))(this[1].var0);
  uint64_t v5 = (*((uint64_t (**)(SsrwOOStream *))v4->var0 + 5))(v4);
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  OCCSegmenter::OCCSegmenter((OCCSegmenter *)v12, 1024);
  v12[0] = &unk_26EBD99D0;
  signed __int16 var1 = this->var1;
  unsigned int v8 = (*((uint64_t (**)(SsrwOOStream *))v4->var0 + 6))(v4);
  int v9 = OCCSegmenter::encryptSegmentsIntoStream((OCCSegmenter *)v12, v4, 0, var1, v8, a2);
  uint64_t v10 = 0;
  if (v9) {
    uint64_t v10 = XlStreamer::replaceGarbledBytesInStream(this, a2);
  }
  SsrwOOStream::seekFromStart(v4, v5);
  SsrwOOStream::seekFromStart(a2, v6);
  return v10;
}

uint64_t XlStreamer::decryptIntoRootStorage(OCCStreamer *this, SsrwOOStorage *a2)
{
  uint64_t v5 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v5, "Workbook")) {
    return 0;
  }
  uint64_t v3 = (*((uint64_t (**)(OCCStreamer *, SsrwOOStream *))this->var0 + 11))(this, v5);
  (*((void (**)(SsrwOOStream *, uint64_t))v5->var0 + 19))(v5, 1);
  if (v5) {
    (*((void (**)(SsrwOOStream *))v5->var0 + 1))(v5);
  }
  return v3;
}

uint64_t XlStreamer::encryptIntoRootStorage(OCCStreamer *this, SsrwOOStorage *a2)
{
  uint64_t v5 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v5, "Workbook")) {
    return 0;
  }
  uint64_t v3 = (*((uint64_t (**)(OCCStreamer *, SsrwOOStream *))this->var0 + 12))(this, v5);
  (*((void (**)(SsrwOOStream *, uint64_t))v5->var0 + 19))(v5, 1);
  if (v5) {
    (*((void (**)(SsrwOOStream *))v5->var0 + 1))(v5);
  }
  return v3;
}

const char *XlStreamer::cryptoAPI_getEncryptedSummaryStreamName(XlStreamer *this)
{
  return "encryption";
}

uint64_t XlStreamer::copySummaryInfoStreams(XlStreamer *this, SsrwOOStorage *a2)
{
  uint64_t v4 = (SsrwOOStorage *)(*(uint64_t (**)(XlStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v4, (SsrwOOStorage *)&OCCBinaryStreamer::DocumentSummaryInformationStreamName, v5);
  uint64_t v6 = (SsrwOOStorage *)(*(uint64_t (**)(XlStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v6, (SsrwOOStorage *)&OCCBinaryStreamer::SummaryInformationStreamName, v7);
  return 1;
}

void XlStreamer::~XlStreamer(OCCBinaryStreamer *this)
{
  OCCBinaryStreamer::~OCCBinaryStreamer(this);
  JUMPOUT(0x23EC997B0);
}

void XlChartTextPropsStream::XlChartTextPropsStream(XlChartTextPropsStream *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  void *v2 = &unk_26EBE48D8;
  v2[2] = 0;
  v2[3] = 0;
}

void XlChartTextPropsStream::~XlChartTextPropsStream(XlChartTextPropsStream *this)
{
  *(void *)this = &unk_26EBE48D8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE48D8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlChartTextPropsStream::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 2376))(a2, a1);
}

void XlContinueFrt12::XlContinueFrt12(XlContinueFrt12 *this, XlHeader *a2)
{
  XlRecord::XlRecord(this, a2);
  *(void *)uint64_t v2 = &unk_26EBE4918;
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

void XlContinueFrt12::~XlContinueFrt12(XlContinueFrt12 *this)
{
  *(void *)this = &unk_26EBE4918;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE4918;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x23EC99790](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x23EC997B0);
}

uint64_t XlContinueFrt12::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

uint64_t yyFlexLexer::yylex(yyFlexLexer *this)
{
  (*(void (**)(yyFlexLexer *, const char *, ...))(*(void *)this + 112))(this, "yyFlexLexer::yylex invoked but %option yyclass used", vars0);
  return 0;
}

uint64_t isCellName(const char *a1, unsigned int *a2, BOOL *a3, unsigned int *a4, BOOL *a5, EFormula *a6)
{
  uint64_t v11 = 0;
  *a3 = 1;
  *a5 = 1;
  int v12 = *(unsigned __int8 *)a1;
  if (v12 == 36) {
    uint64_t v13 = a1 + 1;
  }
  else {
    uint64_t v13 = a1;
  }
  uint64_t v14 = MEMORY[0x263EF8318];
  do
  {
    unsigned int v15 = v13[v11];
    if ((v15 & 0x80000000) != 0) {
      int v16 = __maskrune(v15, 0x8000uLL);
    }
    else {
      int v16 = *(_DWORD *)(v14 + 4 * v15 + 60) & 0x8000;
    }
    ++v11;
  }
  while (v16);
  uint64_t v17 = v11 - 1;
  if ((int)v11 - 1 > 3) {
    return 0;
  }
  int v18 = strlen(&v13[v17]);
  int v19 = v18;
  if ((int)v17 >= 1)
  {
    *a3 = v12 != 36;
    int v20 = *v13 - 64;
    *a2 = v20;
    if (v11 != 2)
    {
      int v21 = &a1[(v12 == 36) + 1];
      uint64_t v22 = (v11 - 1) - 1;
      do
      {
        int v23 = *v21++;
        int v20 = v23 + 26 * v20 - 64;
        *a2 = v20;
        --v22;
      }
      while (v22);
    }
    unsigned int v24 = v20 - 1;
    *a2 = v24;
    if (v24 >> 14) {
      return 0;
    }
  }
  if (v18)
  {
    if (v18 < 1)
    {
      BOOL v27 = 0;
    }
    else
    {
      int v25 = v18;
      int v26 = v13[v17];
      BOOL v27 = v26 == 36;
      if (v26 == 36) {
        uint64_t v28 = v13 + 1;
      }
      else {
        uint64_t v28 = v13;
      }
      int v29 = atoi(&v28[v11 - 1]);
      *a4 = v29;
      if ((v29 - 0x100000) < 0xFFF00001) {
        return 0;
      }
      *a4 = v29 - 1;
      int v19 = v25;
    }
    if (v11 == 1)
    {
      if (v12 == 36 && v27) {
        return 0;
      }
      BOOL v32 = !v27;
      if (v12 == 36) {
        BOOL v32 = 0;
      }
      *a5 = v32;
      return 287;
    }
    else
    {
      uint64_t result = 0;
      if ((int)v17 >= 1 && v19 >= 1)
      {
        *a5 = !v27;
        return 286;
      }
    }
  }
  else
  {
    char v34 = 0;
    if ([(EFormula *)a6 resolveSheet:v13 isCurrentSheet:&v34] == -1) {
      return 288;
    }
    else {
      return 0;
    }
  }
  return result;
}

void yyFlexLexer::yy_load_buffer_state(yyFlexLexer *this)
{
  uint64_t v2 = (char *)this + 48;
  uint64_t v1 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 54);
  uint64_t v4 = *((void *)this + 52);
  uint64_t v5 = *(void *)(v3 + 8 * v4);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = *(void *)(v5 + 16);
  *((void *)this + 48) = v6;
  *((void *)this + 49) = v7;
  *((void *)this + 1) = v7;
  unsigned int v8 = (std::ios_base *)((char *)this + *(void *)(v1 - 24) + 48);
  v8->__rdbuf_ = **(void ***)(v3 + 8 * v4);
  std::ios_base::clear(v8, 0);
  v2[328] = **((unsigned char **)v2 + 43);
}

uint64_t yyFlexLexer::yy_try_NUL_trans(yyFlexLexer *this, int a2)
{
  uint64_t v2 = a2;
  if (yy_accept[a2])
  {
    uint64_t v3 = *((void *)this + 49);
    *((_DWORD *)this + 110) = a2;
    *((void *)this + 56) = v3;
  }
  uint64_t v4 = yy_base[a2] + 1;
  if ((__int16)yy_chk[v4] != a2)
  {
    do
    {
      int v5 = (unsigned __int16)yy_def[v2];
      uint64_t v2 = (__int16)v5;
      uint64_t v4 = yy_base[(__int16)v5] + 1;
    }
    while (v5 != yy_chk[v4]);
  }
  int v6 = (unsigned __int16)yy_nxt[v4];
  if (v6 == 672) {
    LOWORD(v6) = 0;
  }
  return (__int16)v6;
}

uint64_t yyFlexLexer::yyFlexLexer(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = &unk_26EBE4958;
  if (a2) {
    int v5 = a2;
  }
  else {
    int v5 = (void *)MEMORY[0x263F8C0E8];
  }
  int v6 = *(void **)((char *)v5 + *(void *)(*v5 - 24) + 40);
  *(void *)(a1 + 48) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(a1 + 64), v6);
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = -1;
  if (a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = (void *)MEMORY[0x263F8C100];
  }
  unsigned int v8 = *(void **)((char *)v7 + *(void *)(*v7 - 24) + 40);
  *(void *)(a1 + 216) = MEMORY[0x263F8C2F8] + 24;
  *(void *)(a1 + 224) = MEMORY[0x263F8C2F8] + 64;
  std::ios_base::init((std::ios_base *)(a1 + 224), v8);
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = -1;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  return a1;
}

void yyFlexLexer::switch_streams(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1[54];
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8 * a1[52]);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, v7);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, 0x4000);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v8);
  int v9 = (std::ios_base *)((char *)a1 + *(void *)(a1[27] - 24) + 216);
  v9->__rdbuf_ = *(void **)((char *)a3 + *(void *)(*a3 - 24) + 40);
  std::ios_base::clear(v9, 0);
}

uint64_t yyFlexLexer::switch_streams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

void yyFlexLexer::yyrestart(yyFlexLexer *this, void *a2)
{
  uint64_t v4 = *((void *)this + 54);
  if (v4 && (uint64_t v5 = *((void *)this + 52), *(void *)(v4 + 8 * v5))
    || (double v6 = yyFlexLexer::yyensure_buffer_stack(this),
        v7 = (*(uint64_t (**)(yyFlexLexer *, char *, uint64_t, double))(*(void *)this + 32))(this, (char *)this + 48, 0x4000, v6), uint64_t v5 = *((void *)this + 52), *(void *)(*((void *)this + 54) + 8 * v5) = v7, (v4 = *((void *)this + 54)) != 0))
  {
    uint64_t v8 = *(void *)(v4 + 8 * v5);
  }
  else
  {
    uint64_t v8 = 0;
  }
  yyFlexLexer::yy_init_buffer(this, v8, a2);
  yyFlexLexer::yy_load_buffer_state(this);
}

int *yyFlexLexer::yy_init_buffer(yyFlexLexer *a1, uint64_t a2, void *a3)
{
  int v6 = *__error();
  yyFlexLexer::yy_flush_buffer(a1, a2);
  *(void *)a2 = *(void *)((char *)a3 + *(void *)(*a3 - 24) + 40);
  *(_DWORD *)(a2 + 60) = 1;
  uint64_t v7 = *((void *)a1 + 54);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 8 * *((void *)a1 + 52));
  }
  if (v7 != a2) {
    *(void *)(a2 + 52) = 1;
  }
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t result = __error();
  int *result = v6;
  return result;
}

uint64_t yyFlexLexer::yyrestart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

_DWORD *yyFlexLexer::yy_create_buffer(yyFlexLexer *a1, void *a2, int a3)
{
  int v6 = malloc_type_malloc(0x48uLL, 0xCCAAE399uLL);
  if (!v6) {
    (*(void (**)(yyFlexLexer *, const char *))(*(void *)a1 + 112))(a1, "out of dynamic memory in yy_create_buffer()");
  }
  v6[6] = a3;
  uint64_t v7 = malloc_type_malloc(a3 + 2, 0xCCAAE399uLL);
  *((void *)v6 + 1) = v7;
  if (!v7) {
    (*(void (**)(yyFlexLexer *, const char *))(*(void *)a1 + 112))(a1, "out of dynamic memory in yy_create_buffer()");
  }
  v6[10] = 1;
  yyFlexLexer::yy_init_buffer(a1, (uint64_t)v6, a2);
  return v6;
}

uint64_t yyFlexLexer::yy_create_buffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void yyFlexLexer::LexerError(yyFlexLexer *this, char *a2)
{
  uint64_t v2 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x263F8C0F8], a2);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v2);
  exit(2);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_238E0FF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23EC996B0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x23EC996C0](v13);
  return a1;
}

void sub_238E100DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x23EC996C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x238E100BCLL);
}

void sub_238E10130(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_238E102B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

id args(NSMutableArray *a1)
{
  id v2 = (id)[(NSMutableArray *)a1 objectAtIndex:0];
  unint64_t v3 = [(NSMutableArray *)a1 count];
  if (v3 >= 2)
  {
    unint64_t v4 = v3;
    for (uint64_t i = 1; i != v4; ++i)
    {
      uint64_t v6 = (void *)[(NSMutableArray *)a1 objectAtIndex:i];
      if (v6)
      {
        size_t v7 = v6;
        int v8 = [v6 tokenCount];
        if (v8)
        {
          int v9 = v8;
          uint64_t v10 = 0;
          do
          {
            [v2 copyTokenAtIndex:v10 fromFormula:v7];
            uint64_t v10 = (v10 + 1);
          }
          while (v9 != v10);
        }
      }
    }
  }

  return v2;
}

id strTokens(EFormula *a1, NSString *a2)
{
  id v3 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  addStringOperand(v3, a2);
  return v3;
}

id numberTokens(EFormula *a1, double a2)
{
  id v3 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  addNumberOperand(v3, a2);
  return v3;
}

id BOOLTokens(EFormula *a1, char a2)
{
  id v3 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  addBoolOperand(v3, a2);
  return v3;
}

id refTokens(EFormula *a1, const EFRefTok *a2)
{
  id v3 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  memcpy((void *)[v3 addToken:a2->type extendedDataLength:a2->dataSize], a2->data, a2->dataSize);
  return v3;
}

id sheetNameTokens(EFormula *a1, __int16 a2, __int16 a3)
{
  id v5 = objc_alloc_init([(EFormula *)a1 formulaClass]);
  uint64_t v6 = (_WORD *)[v5 addToken:35 extendedDataLength:6];
  _WORD *v6 = a2;
  v6[1] = a3;
  _OWORD v6[2] = 0;
  return v5;
}

void sub_238E10824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E10950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E10A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E10BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E10CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBConvertCsException(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 == 2001) {
    goto LABEL_4;
  }
  if (v1 == 8003)
  {
    id v2 = &WBUnsupportedVersion;
    return +[TCMessageException raise:*v2];
  }
  if (v1 == 2007)
  {
LABEL_4:
    id v2 = &TCInvalidFileFormatMessage;
    return +[TCMessageException raise:*v2];
  }
  return OCConvertCsException(a1);
}

void sub_238E10F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WrdTextRun::~WrdTextRun(WrdTextRun *this)
{
}

WrdTextRun *WrdTextRun::clone(WrdTextRun *this)
{
  id v2 = (WrdTextRun *)operator new(0x18uLL);
  WrdTextRun::WrdTextRun(v2, this);
  return v2;
}

void sub_238E11000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<WrdSectionTextRun *>::clear(void *result)
{
  if (result[2])
  {
    unsigned int v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

WrdDOPTypography *WrdDOPTypography::clone(WrdDOPTypography *this)
{
  uint64_t v2 = (WrdDOPTypography *)operator new(0x48uLL);
  WrdDOPTypography::WrdDOPTypography(v2, this);
  return v2;
}

void sub_238E110B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238E111D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E112E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E115E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E117A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E117FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238E11A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E11BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E11CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E11E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBParagraphReadState::~WBParagraphReadState(WBParagraphReadState *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

void sub_238E11F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E120B0(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  operator delete(v4);

  _Unwind_Resume(a1);
}

void sub_238E1214C(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40B2B3FEDDLL);
  _Unwind_Resume(a1);
}

void sub_238E121DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E123C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<WBTextBoxReaderInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<WBTextBoxReaderInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t WrdSectionProperties::getColumnWidthSpacing(WrdSectionProperties *this, unsigned int a2)
{
  unint64_t v4 = (char *)*((void *)this + 25);
  uint64_t v2 = (char *)this + 200;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  id v5 = v2;
  do
  {
    unsigned int v6 = *((_DWORD *)v3 + 7);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = (char **)v3;
    }
    else {
      int v8 = (char **)(v3 + 8);
    }
    if (v7) {
      id v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 7) > a2)
  {
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *((unsigned int *)v5 + 8);
}

uint64_t WrdSectionProperties::getColumnGap(WrdSectionProperties *this, unsigned int a2)
{
  unint64_t v4 = (char *)*((void *)this + 22);
  uint64_t v2 = (char *)this + 176;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  id v5 = v2;
  do
  {
    unsigned int v6 = *((_DWORD *)v3 + 7);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = (char **)v3;
    }
    else {
      int v8 = (char **)(v3 + 8);
    }
    if (v7) {
      id v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 7) > a2)
  {
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *((unsigned int *)v5 + 8);
}

void sub_238E12CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void transparentWhite(void)
{
  {
    transparentWhite(void)::transparentWhite = 0xFF00FF00FF0000;
    __cxa_atexit((void (*)(void *))CsColour::~CsColour, &transparentWhite(void)::transparentWhite, &dword_238A75000);
  }
}

void transparentBlack(void)
{
  {
    transparentBlack(void)::transparentBlack = 0;
    __cxa_atexit((void (*)(void *))CsColour::~CsColour, &transparentBlack(void)::transparentBlack, &dword_238A75000);
  }
}

void sub_238E13008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1312C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E13F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E14008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E140B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E14148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E141B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E142D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E14484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E14660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E146A4()
{
}

void sub_238E147D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E148B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E14940(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id WXMathJustificationEnumMap(void)
{
  v0 = (void *)WXMathJustificationEnumMap(void)::enumMap;
  if (!WXMathJustificationEnumMap(void)::enumMap)
  {
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_28, 0, &dword_238A75000);
    }
    uint64_t v1 = [[TCEnumerationMap alloc] initWithStructs:&WXMathJustificationEnumMap(void)::enumStructs count:4 caseSensitive:1];
    uint64_t v2 = (void *)WXMathJustificationEnumMap(void)::enumMap;
    WXMathJustificationEnumMap(void)::enumMap = (uint64_t)v1;

    v0 = (void *)WXMathJustificationEnumMap(void)::enumMap;
  }
  return v0;
}

void sub_238E14DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E14FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v16 = v14;

  _Unwind_Resume(a1);
}

void sub_238E150E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E15164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E15298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E15340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E153D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E15478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E15DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E172AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, int a15, int a16, id a17)
{
  if (v19)
  {

    if (v17)
    {
LABEL_3:

      if ((v18 & 1) == 0)
      {
LABEL_8:

        _Unwind_Resume(a1);
      }
LABEL_7:

      goto LABEL_8;
    }
  }
  else if (v17)
  {
    goto LABEL_3;
  }
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_238E17A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E18400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E19850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E19A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E1A56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1A5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1A66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1BC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1BE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1C048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1CD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1D974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1EB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E1EC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1EDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1EEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E1F0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E1F4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1F9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1FA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1FABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1FB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1FF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E1FF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E202B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E203C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E205A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E209A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E20E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E210D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E211FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E212C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2142C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E216D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E217AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E21F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E22078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2216C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2230C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238E22434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E224A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E224FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E22584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E22618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E22718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E22878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E23AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E24F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E25200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2559C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E25800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E25A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E25CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E267F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E26D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E26F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E27268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E274C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E27624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E27728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E27A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E283D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E29410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E29488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E29714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2A998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2AB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E2B6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2B934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2BAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2BBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2BC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2BD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E2C148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E2C2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E2C73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2C990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2CA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2CADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E2CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WDTableCellPropertiesValues::operator=(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  objc_storeStrong((id *)(a1 + 48), *(id *)(a2 + 48));
  objc_storeStrong((id *)(a1 + 56), *(id *)(a2 + 56));
  objc_storeStrong((id *)(a1 + 64), *(id *)(a2 + 64));
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 118) = *(_OWORD *)(a2 + 118);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  objc_storeStrong((id *)(a1 + 136), *(id *)(a2 + 136));
  objc_storeStrong((id *)(a1 + 144), *(id *)(a2 + 144));
  objc_storeStrong((id *)(a1 + 152), *(id *)(a2 + 152));
  int v7 = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v7;
  return a1;
}

void sub_238E30698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E30828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E309B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E30B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E31260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E31C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E31E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E3226C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E325C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void sub_238E328F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E329C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E32A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E32B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E32DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E334A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238E3390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDBorderStyle>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E33A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDLigatures>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E341C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDHighlightColor>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E342D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDCharacterVerticalAlign>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E343F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDCharacterEmphasisMark>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E34510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDTwoLineBrackets>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E34630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E34B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238E3501C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E35244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_101_0()
{
  for (uint64_t i = 0x108u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_113_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_125_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_140_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_155_0()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_167_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238E35614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_104_0()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_137_0()
{
  for (uint64_t i = 0x98u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_146_0()
{
  for (uint64_t i = 0x98u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_161_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_170_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_350_0()
{
  for (uint64_t i = 0x3A8u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_539_0()
{
  for (uint64_t i = 0x3E8u; i != -8; i -= 16)
}

void sub_238E362A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238E3636C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238E367E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E36924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E36BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDNumberFormat>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E36D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDNoteRestart>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E36E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDNotePosition>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E36F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_14_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void sub_238E37780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDFontFamily>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E37938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDCharacterSet>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E37A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDFontPitch>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E37B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_83_1()
{
  for (uint64_t i = 0x158u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_137_1()
{
  for (uint64_t i = 0x118u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_149_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void sub_238E37D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDListType>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E37FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDListLevelSuffix>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E381E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDJustification>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E38304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E386FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  objc_begin_catch(a1);
  if (a2 == 2) {
    objc_end_catch();
  }
  JUMPOUT(0x238E38660);
}

void sub_238E387D8()
{
}

void sub_238E387E0()
{
  if (v0) {
    JUMPOUT(0x238E387E8);
  }
  JUMPOUT(0x238E387ECLL);
}

void sub_238E38810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_238E38928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDATextWrappingModeType>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E38DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E38E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E38F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E39024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E39100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E391DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E39384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E39538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_38_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_53_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void sub_238E39798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E39874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E39A70(_Unwind_Exception *a1)
{
  long long v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238E39CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E39E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E39FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDHeightRule>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3A9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDHorizontalAnchor>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3AAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDVerticalAnchor>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3ABF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<char>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, unsigned char *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3AD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDLineSpacingRule>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3AE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDDropCapStyle>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3AF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<unsigned char>(const xmlNode *a1, const xmlChar *a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3B044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_14_1()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_20_1()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_26_1()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_35_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_59_0()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_68_1()
{
  for (uint64_t i = 0x68u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_92_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_101_1()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void sub_238E3BB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDTextDirection>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3BD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDSectionBreakType>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3BE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDPageOrientation>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3BF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDPageBorderDepth>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDPageBorderDisplay>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDPageBorderOffset>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDLineNumberRestart>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDVerticalJustification>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDChapterNumberSeparator>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  int64_t v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3C634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_20_2()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_29_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_41_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_50_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_59_1()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_74_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_92_1()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void sub_238E3CAF8(_Unwind_Exception *a1)
{
  int v8 = v6;

  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDShadingStyle>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3CC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3CD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDStyleType>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3D198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDTableStylePart>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  int64_t v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3D278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_47_1()
{
  for (uint64_t i = 0xB8u; i != -8; i -= 16)
}

void sub_238E3D528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3D80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t WXOptionalTableWidthAttribute(xmlNode *a1, void *a2, xmlChar *a3, _WORD *a4, unsigned int *a5)
{
  id v9 = a2;
  double v23 = 0.0;
  int v22 = 0;
  id v21 = 0;
  CXOptionalStringAttribute(a1, v9, a3, &v21);
  id v10 = v21;
  id v11 = v10;
  if (v10)
  {
    CXSplitValueAndUnit(v10, &v23, &v22);
    id v12 = +[WXCommon tableWidthTypeEnumMap];
    id v24 = 0;
    BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, (const xmlChar *)"type", &v24);
    id v14 = v24;
    int v15 = -130883970;
    if (NSStringAnyNsProp) {
      int v15 = [v12 valueForString:v14];
    }

    *a5 = v15;
    unsigned int v16 = *a5;
    if (*a5 == -130883970) {
      unsigned int v16 = 3;
    }
    *a5 = v16;
    if (v16 >= 3)
    {
      if (v16 != 3)
      {
LABEL_14:
        uint64_t v19 = 0;
        goto LABEL_17;
      }
      int v17 = v22;
    }
    else
    {
      int v17 = v22;
      if (v22 == 13) {
        goto LABEL_15;
      }
      if (!v22)
      {
        double v18 = v23 / 50.0;
LABEL_16:
        *a4 = (int)v18;
        uint64_t v19 = 1;
        goto LABEL_17;
      }
    }
    if (v17) {
      goto LABEL_14;
    }
LABEL_15:
    double v18 = v23;
    goto LABEL_16;
  }
  uint64_t v19 = 0;
  *a4 = 0;
  *a5 = 3;
LABEL_17:

  return v19;
}

void sub_238E3DA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDVerticalAlignment>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  id v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3DC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3E0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDTableWidthType>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  id v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3E738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDVerticalAnchor>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  id v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3E828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDHorizontalAnchor>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  id v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3E908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDVerticalPosition>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  id v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3E9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDHorizontalPosition>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  id v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E3EAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_8_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[WXTableProperties tableHorizontalAnchorEnumMap]::sTableHorizontalAnchorEnumStructs
                       + i));
}

void __cxx_global_array_dtor_26_2()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[WXTableProperties tableHorizontalPositionEnumMap]::sTableHorizontalPositionEnumStructs
                       + i));
}

void __cxx_global_array_dtor_35_1()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[WXTableProperties tableVerticalPositionEnumMap]::sTableVerticalPositionEnumStructs
                       + i));
}

void __cxx_global_array_dtor_56_1()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

uint64_t readEnumProperty<WDHeightType>(_xmlNode *a1, const char *a2, const xmlChar *a3, void *a4, _DWORD *a5, void *a6)
{
  id v11 = a4;
  id v12 = [a6 WXMainNamespace];
  int v13 = (const xmlNode *)OCXFindChild(a1, v12, a2);

  if (!v13) {
    goto LABEL_6;
  }
  id v14 = v11;
  id v21 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(v13, a3, &v21);
  id v16 = v21;
  int v17 = v16;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v18 = [v14 valueForString:v16];

  if (v18 == -130883970)
  {
LABEL_6:
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  *a5 = v18;
  uint64_t v19 = 1;
LABEL_7:

  return v19;
}

void sub_238E3ECC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E3EE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E3F090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL wmxmlGetBoolOnlyProperty(_xmlNode *a1, const char *a2, const xmlChar *a3, BOOL *a4, WXReadState *a5)
{
  id v9 = [(WXReadState *)a5 WXMainNamespace];
  id v10 = (const xmlNode *)OCXFindChild(a1, v9, a2);

  if (v10)
  {
    *a4 = 1;
    sfaxmlGetBoolAnyNsProp(v10, a3, a4);
  }
  return v10 != 0;
}

void sub_238E3F1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t wmxmlGetBoolProperty(_xmlNode *a1, const char *a2, const xmlChar *a3, BOOL *a4, WXReadState *a5)
{
  id v9 = [(WXReadState *)a5 WXMainNamespace];
  id v10 = (const xmlNode *)OCXFindChild(a1, v9, a2);

  if (!v10) {
    return 0;
  }
  *a4 = 1;
  return sfaxmlGetBoolAnyNsProp(v10, a3, a4);
}

void sub_238E3F2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id wmxmlGetAuthorProperty(_xmlNode *a1)
{
  id v4 = 0;
  sfaxmlGetNSStringAnyNsProp(a1, (const xmlChar *)"author", &v4);
  id v1 = v4;
  if (!v1)
  {
    uint64_t v2 = TCBundle();
    id v1 = [v2 localizedStringForKey:@"Unknown" value:&stru_26EBF24D8 table:@"TCCompatibility"];
  }
  return v1;
}

void sub_238E3F340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id wmxmlGetDateProperty(_xmlNode *a1)
{
  id v5 = 0;
  sfaxmlGetNSStringAnyNsProp(a1, (const xmlChar *)"date", &v5);
  id v1 = (NSString *)v5;
  uint64_t v2 = v1;
  if (!v1 || (CXDateForISO8601WithString(v1), (uint64_t v3 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    +[TCMessageContext reportWarning:WXFoundMissingCTDate];
    uint64_t v3 = [MEMORY[0x263EFF910] date];
  }

  return v3;
}

void sub_238E3F3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3F7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E3F85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3F8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3F914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3F970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3F9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3FA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3FA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3FAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E3FDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E40278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E40404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E404EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readEnumProperty<WDATextWrappingMode>(const xmlNode *a1, const xmlChar *a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  int v8 = v7;
  if (!a1) {
    goto LABEL_6;
  }
  id v9 = v7;
  id v16 = 0;
  BOOL NSStringAnyNsProp = sfaxmlGetNSStringAnyNsProp(a1, a2, &v16);
  id v11 = v16;
  id v12 = v11;
  if (!NSStringAnyNsProp)
  {

    goto LABEL_6;
  }
  int v13 = [v9 valueForString:v11];

  if (v13 == -130883970)
  {
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  *a4 = v13;
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_238E405C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_96_0()
{
  for (uint64_t i = 0x38u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_106_0()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_131_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_138_0()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_148_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void sub_238E409B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E40BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E40CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E41000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E41068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E410D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E41230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E413D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E414FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E415C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E4170C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_196_0()
{
  for (uint64_t i = 0x2E8u; i != -8; i -= 16)
}

void sub_238E41E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, id a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_238E42134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E42230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E42930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E42BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E42F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_238E43314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E43548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E43680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WXReadState;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238E43774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E43868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E438F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E4398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E43A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E43AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E43B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E43BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E43C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E43CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E440B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E44310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E443EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E44524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E44668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E44750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E447FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E4492C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E44DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotation::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  WrdAnnotationReferenceDescriptor::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdDateTime::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  return a1;
}

void *WrdAnnotation::clone(WrdAnnotation *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdAnnotationReferenceDescriptor *))(*(void *)this->var4 + 16))(this->var4);
  uint64_t v3 = (*((uint64_t (**)(WrdDateTime *))this->var5->var0 + 2))(this->var5);
  id v4 = operator new(0x28uLL);
  void *v4 = &unk_26EBE52D8;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 0;
  v4[3] = v2;
  v4[4] = v3;
  WrdAnnotation::operator=((uint64_t)v4, (uint64_t)this);
  return v4;
}

void sub_238E4544C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor(WrdAnnotationReferenceDescriptor *this, const WrdAnnotationReferenceDescriptor *a2)
{
  *(void *)this = &unk_26EBE5350;
  id v4 = (CsString *)((char *)this + 8);
  CsString::CsString((CsString *)((char *)this + 8));
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_WORD *)this + 18) = *((_WORD *)a2 + 18);
  *((_DWORD *)this + 6) = 0;
  bzero(*((void **)this + 2), 2 * *((unsigned int *)this + 7));
  CsString::append(v4, (const CsString *)((char *)a2 + 8));
}

void sub_238E45534(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

WrdAnnotationReferenceDescriptor *WrdAnnotationReferenceDescriptor::clone(WrdAnnotationReferenceDescriptor *this)
{
  uint64_t v2 = (WrdAnnotationReferenceDescriptor *)operator new(0x28uLL);
  WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor(v2, this);
  return v2;
}

void sub_238E455C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *WrdAnnotationTable::operator=(void *a1, uint64_t a2)
{
  WrdAnnotationDateTimeTable::clear(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      id v9 = (uint64_t *)a1[2];
      unint64_t v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[1];
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          id v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v15);
          uint64_t v18 = v17;
        }
        else
        {
          id v16 = 0;
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        id v10 = v19 + 1;
        id v21 = (char *)a1[1];
        int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          int v20 = (char *)a1[1];
        }
        a1[1] = v19;
        a1[2] = v10;
        a1[3] = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *id v9 = v6;
        id v10 = v9 + 1;
      }
      a1[2] = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  return a1;
}

void sub_238E45770(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WrdAnnotationTable::clone(WrdAnnotationTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26EBE53C8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  WrdAnnotationTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E457E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdAssociatedStrings::WrdAssociatedStrings(WrdAssociatedStrings *this)
{
  *(void *)this = &unk_26EBE5408;
  CsString::CsString((CsString *)((char *)this + 8));
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
}

uint64_t WrdAssociatedStrings::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 40);
  unint64_t v5 = (uint64_t **)(a1 + 32);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1 + 32, *(void **)(a1 + 40));
  unsigned int v6 = 0;
  *(v4 - 1) = v4;
  void *v4 = 0;
  uint64_t v7 = (uint64_t *)(a2 + 40);
  v4[1] = 0;
  unsigned int v20 = 0;
  do
  {
    unint64_t v8 = (uint64_t *)*v7;
    if (!*v7) {
      goto LABEL_20;
    }
    while (1)
    {
      unsigned int v9 = *((_DWORD *)v8 + 8);
      if (v6 >= v9) {
        break;
      }
LABEL_6:
      unint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_20;
      }
    }
    if (v9 < v6)
    {
      ++v8;
      goto LABEL_6;
    }
    id v10 = (CsString *)operator new(0x18uLL);
    CsString::CsString(v10);
    id v21 = &v20;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v20, (uint64_t)&std::piecewise_construct, &v21)[5] = (uint64_t *)v10;
    uint64_t v11 = *v7;
    if (!*v7) {
      goto LABEL_22;
    }
    uint64_t v12 = a2 + 40;
    do
    {
      unsigned int v13 = *(_DWORD *)(v11 + 32);
      BOOL v14 = v13 >= v20;
      if (v13 >= v20) {
        unint64_t v15 = (uint64_t *)v11;
      }
      else {
        unint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if ((uint64_t *)v12 == v7 || v20 < *(_DWORD *)(v12 + 32))
    {
LABEL_22:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    id v16 = *(const CsString **)(v12 + 40);
    id v21 = &v20;
    unsigned int v17 = (CsString *)std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v20, (uint64_t)&std::piecewise_construct, &v21)[5];
    v17->unsigned int var2 = 0;
    bzero(v17->var1, 2 * v17->var3);
    CsString::append(v17, v16);
    unsigned int v6 = v20;
LABEL_20:
    unsigned int v20 = ++v6;
  }
  while (v6 < 0x12);
  return a1;
}

void sub_238E45A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdAssociatedStrings::~WrdAssociatedStrings(WrdAssociatedStrings *this)
{
  unsigned int v2 = 0;
  *(void *)this = &unk_26EBE5408;
  uint64_t v3 = (uint64_t **)((char *)this + 40);
  uint64_t v4 = (uint64_t **)((char *)this + 32);
  do
  {
    unint64_t v5 = *v3;
    if (!*v3) {
      goto LABEL_11;
    }
    while (1)
    {
      unsigned int v6 = *((_DWORD *)v5 + 8);
      if (v6 <= v2) {
        break;
      }
LABEL_6:
      unint64_t v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_11;
      }
    }
    if (v6 < v2)
    {
      ++v5;
      goto LABEL_6;
    }
    unsigned int v8 = v2;
    unsigned int v9 = &v8;
    uint64_t v7 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)[5];
    if (v7) {
      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
    }
    unsigned int v8 = v2;
    unsigned int v9 = &v8;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)[5] = 0;
LABEL_11:
    ++v2;
  }
  while (v2 != 18);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v4, *((void **)this + 5));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v3;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v4, 0);
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdAssociatedStrings::~WrdAssociatedStrings(this);
  JUMPOUT(0x23EC997B0);
}

char *WrdAssociatedStrings::clone(WrdAssociatedStrings *this)
{
  unsigned int v2 = (char *)operator new(0x38uLL);
  *(void *)unsigned int v2 = &unk_26EBE5408;
  CsString::CsString((CsString *)(v2 + 8));
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 4) = v2 + 40;
  WrdAssociatedStrings::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E45C08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WrdAssociatedStrings::getStringReference(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v5 = *((_DWORD *)i + 8);
    if (v5 <= a2)
    {
      if (v5 >= a2) {
        goto LABEL_7;
      }
      ++i;
    }
  }
  unsigned int v6 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v6);
  unsigned int v8 = a2;
  unsigned int v9 = &v8;
  std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v8, (uint64_t)&std::piecewise_construct, &v9)[5] = (uint64_t *)v6;
LABEL_7:
  unsigned int v8 = a2;
  unsigned int v9 = &v8;
  return std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v8, (uint64_t)&std::piecewise_construct, &v9)[5];
}

void sub_238E45D14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double WrdAutoSummaryInfo::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  int v3 = *(unsigned char *)(a1 + 22) & 0xFE | *(unsigned char *)(a2 + 22) & 1;
  *(unsigned char *)(a1 + 22) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 22) >> 1) & 1));
  *(unsigned char *)(a1 + 22) = v4;
  *(unsigned char *)(a1 + 22) = v4 & 0xFB | *(unsigned char *)(a2 + 22) & 4;
  return result;
}

double WrdAutoSummaryInfo::clone(WrdAutoSummaryInfo *this)
{
  unsigned int v2 = operator new(0x18uLL);
  void *v2 = &unk_26EBE54D8;
  return WrdAutoSummaryInfo::operator=((uint64_t)v2, (uint64_t)this);
}

void WrdBinTable::~WrdBinTable(WrdBinTable *this)
{
  unsigned int v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

uint64_t WrdBookmark::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CsString *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  if (*(void *)(a2 + 16)) {
    unsigned int v5 = *(const unsigned __int16 **)(a2 + 16);
  }
  else {
    unsigned int v5 = (const unsigned __int16 *)&unk_238EEEF20;
  }
  CsString::append(v4, v5);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    MEMORY[0x23EC99790](v6, 0x1000C8077774924);
  }
  *(void *)(a1 + 32) = 0;
  size_t v7 = *(unsigned __int16 *)(a2 + 40);
  *(_WORD *)(a1 + 40) = v7;
  unsigned int v8 = operator new[](v7);
  *(void *)(a1 + 32) = v8;
  memcpy(v8, *(const void **)(a2 + 32), *(unsigned __int16 *)(a1 + 40));
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

char *WrdBookmark::clone(WrdBookmark *this)
{
  unsigned int v2 = (char *)operator new(0x40uLL);
  *(void *)unsigned int v2 = &unk_26EBE5518;
  CsString::CsString((CsString *)(v2 + 8));
  *((void *)v2 + 4) = 0;
  *((_WORD *)v2 + 20) = 0;
  *((void *)v2 + 6) = 0;
  *((_DWORD *)v2 + 11) = 0;
  *((_WORD *)v2 + 29) = 0;
  WrdBookmark::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E45F58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdBookmarkTable::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (((*(void *)(a2 + 24) - v3) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v3 + 8 * v5) + 16))(*(void *)(v3 + 8 * v5));
      uint64_t v7 = v6;
      unsigned int v9 = *(uint64_t **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          id v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 32, v15);
          uint64_t v18 = v17;
        }
        else
        {
          id v16 = 0;
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        id v10 = v19 + 1;
        id v21 = *(char **)(a1 + 16);
        unsigned int v20 = *(char **)(a1 + 24);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          unsigned int v20 = *(char **)(a1 + 16);
        }
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unsigned int v9 = v6;
        id v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      ++v5;
      uint64_t v3 = *(void *)(a2 + 16);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 24) - v3) >> 3));
  }
  return a1;
}

void sub_238E46160(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdBookmarkTable::clone(WrdBookmarkTable *this)
{
  unsigned int v2 = operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_26EBE5590;
  v2[2] = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  WrdBookmarkTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E461E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL WrdBorder::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10)
      && *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 14) == *(unsigned __int16 *)(a2 + 14)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && ((*(unsigned char *)(a2 + 24) ^ *(unsigned char *)(a1 + 24)) & 3) == 0
      && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
      && *(unsigned __int8 *)(a1 + 26) == *(unsigned __int8 *)(a2 + 26);
}

void non-virtual thunk to'WrdCharacterProperties::~WrdCharacterProperties(WrdCharacterProperties *this)
{
}

{
  uint64_t vars8;

  WrdCharacterProperties::~WrdCharacterProperties((WrdCharacterProperties *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

BOOL WrdShading::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 14) == *(unsigned __int16 *)(a2 + 14)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 22) == *(unsigned __int16 *)(a2 + 22)
      && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24)
      && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

BOOL WrdCharacterProperties::isEqualWithoutRevisions(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  if ((*(void *)&a2->var2 ^ *(void *)&this->var2) & 0xFF7FFFFFFFFFFFB7 | ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) ^ (*((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32))) & 0xF9C007E3FFFLL) {
    return 0;
  }
  BOOL result = WrdShading::operator==((uint64_t)this->var6, (uint64_t)a2->var6);
  if (result)
  {
    BOOL result = WrdBorder::operator==((uint64_t)this->var7, (uint64_t)a2->var7);
    if (result)
    {
      if (this->var13 != a2->var13) {
        return 0;
      }
      if (this->var14 != a2->var14) {
        return 0;
      }
      if (this->var15 != a2->var15) {
        return 0;
      }
      if (this->var16 != a2->var16) {
        return 0;
      }
      if (this->var17 != a2->var17) {
        return 0;
      }
      if (this->var18 != a2->var18) {
        return 0;
      }
      if (this->var19 != a2->var19) {
        return 0;
      }
      if (this->var20 != a2->var20) {
        return 0;
      }
      if (this->var21 != a2->var21) {
        return 0;
      }
      if (this->var22 != a2->var22) {
        return 0;
      }
      if (*((unsigned __int16 *)&this->var2 + 7) != *((unsigned __int16 *)&a2->var2 + 7)) {
        return 0;
      }
      if (this->var3.var0 != a2->var3.var0) {
        return 0;
      }
      if (this->var3.var1 != a2->var3.var1) {
        return 0;
      }
      if (this->var3.var2 != a2->var3.var2) {
        return 0;
      }
      if (this->var3.var3 != a2->var3.var3) {
        return 0;
      }
      if (this->var4.var0 != a2->var4.var0) {
        return 0;
      }
      if (this->var4.var1 != a2->var4.var1) {
        return 0;
      }
      if (this->var4.var2 != a2->var4.var2) {
        return 0;
      }
      if (this->var39 != a2->var39) {
        return 0;
      }
      if (this->var40 != a2->var40) {
        return 0;
      }
      if (this->var41 != a2->var41) {
        return 0;
      }
      if (this->var43 != a2->var43) {
        return 0;
      }
      if (this->var44 != a2->var44) {
        return 0;
      }
      if (this->var45 != a2->var45) {
        return 0;
      }
      if (this->var46 != a2->var46) {
        return 0;
      }
      if (this->var47 != a2->var47) {
        return 0;
      }
      if (this->var48 != a2->var48) {
        return 0;
      }
      if (this->var49 != a2->var49) {
        return 0;
      }
      if (this->var50 != a2->var50) {
        return 0;
      }
      if (this->var51 != a2->var51) {
        return 0;
      }
      if (this->var52 != a2->var52) {
        return 0;
      }
      if (this->var53 != a2->var53) {
        return 0;
      }
      if (this->var54 != a2->var54) {
        return 0;
      }
      if (this->var55 != a2->var55) {
        return 0;
      }
      if (this->var56 != a2->var56) {
        return 0;
      }
      if (this->var57 != a2->var57) {
        return 0;
      }
      if (this->var58 != a2->var58) {
        return 0;
      }
      if (this->var59 != a2->var59) {
        return 0;
      }
      if (this->var60 != a2->var60) {
        return 0;
      }
      if (this->var61 != a2->var61) {
        return 0;
      }
      if (this->var62 != a2->var62) {
        return 0;
      }
      if (this->var63 != a2->var63) {
        return 0;
      }
      if (this->var64 != a2->var64) {
        return 0;
      }
      if (this->var65 != a2->var65) {
        return 0;
      }
      if (this->var66 != a2->var66) {
        return 0;
      }
      if (this->var72 != a2->var72) {
        return 0;
      }
      if (this->var42 != a2->var42) {
        return 0;
      }
      if (this->var75 != a2->var75) {
        return 0;
      }
      int v5 = *((_DWORD *)a2 + 85) ^ *((_DWORD *)this + 85);
      if ((v5 & 0x7E) != 0) {
        return 0;
      }
      BOOL result = 0;
      if ((v5 & 0xF80) != 0) {
        return result;
      }
      if (this->var38 != a2->var38) {
        return result;
      }
      BOOL result = 0;
      if ((v5 & 0x87FF000) != 0 || this->var109 != a2->var109) {
        return result;
      }
      if (this->var105 != a2->var105
        || this->var106 != a2->var106
        || this->var107 != a2->var107
        || this->var108 != a2->var108
        || this->var23 != a2->var23
        || this->var24 != a2->var24
        || this->var25 != a2->var25
        || this->var27 != a2->var27
        || this->var28 != a2->var28
        || this->var29 != a2->var29
        || this->var26 != a2->var26
        || this->var30 != a2->var30
        || this->var31 != a2->var31
        || this->var32 != a2->var32
        || this->var33 != a2->var33
        || this->var34 != a2->var34)
      {
        return 0;
      }
      BOOL result = 0;
      if ((v5 & 0x10000001) == 0 && this->var35 == a2->var35)
      {
        BOOL result = CsString::operator==((uint64_t)&this->var5, (uint64_t)&a2->var5);
        if (result) {
          return this->var110 == a2->var110;
        }
      }
    }
  }
  return result;
}

uint64_t WrdCharacterProperties::getRevisionListNumberDateTimeReference(WrdCharacterProperties *this)
{
  unsigned int v2 = *((_DWORD *)&this->var2 + 2);
  uint64_t v1 = (char *)&this->var2 + 8;
  unint64_t v3 = v2 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | 0x200000000;
  *(_DWORD *)uint64_t v1 = v2;
  *((_WORD *)v1 + 2) = WORD2(v3);
  return *((void *)v1 + 10);
}

uint64_t WrdCharacterProperties::setEmphasisMark(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x40000uLL;
  *(_DWORD *)(result + 132) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setWarichuBracket(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x8000000000000000;
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setFitTextWidth(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 0x10;
  *(_DWORD *)(result + 236) = a2;
  return result;
}

int *WrdCharacterProperties::setOffsetToOLE1Object(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (int *)&this->var2 + 2;
  int *result = v3 | 0x100;
  result[64] = a2;
  return result;
}

uint64_t WrdCharacterProperties::setFitTextID(WrdCharacterProperties *this, int a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 0x80;
  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setIndexToAuthorIDOfRevisionListNumber(WrdCharacterProperties *this, __int16 a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 1;
  *(_WORD *)(result + 304) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setTatenakayoko(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x100000000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFBFF | ((a2 & 1) << 10);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setTatenakayokoNewLineState(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x200000000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFF7FF | ((a2 & 1) << 11);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setTatenakayokoID(WrdCharacterProperties *this, unsigned __int8 a2)
{
  *(void *)&this->var2 |= 0x400000000000000uLL;
  this->var109 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setWarichu(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x800000000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFEFFF | ((a2 & 1) << 12);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFitTextFE(WrdCharacterProperties *this, char a2)
{
  *(void *)&this->var2 |= 0x4000000000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFF7FFF | ((a2 & 1) << 15);
  return this;
}

unsigned int *WrdCharacterProperties::setRevisionListNumber(WrdCharacterProperties *this, char a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (unsigned int *)&this->var2 + 2;
  unsigned int *result = v3 | 0x80000000;
  result[79] = result[79] & 0xFEFFFFFF | ((a2 & 1) << 24);
  return result;
}

uint64_t WrdCharacterProperties::setXmlTag(WrdCharacterProperties *this, char a2)
{
  int v3 = *((_DWORD *)&this->var2 + 2);
  uint64_t result = (uint64_t)&this->var2 + 8;
  __int16 v4 = *(_WORD *)(result + 4);
  *(_DWORD *)uint64_t result = v3;
  *(_WORD *)(result + 4) = v4 | 0x800;
  *(unsigned char *)(result + 326) = a2;
  return result;
}

uint64_t WrdCharacterProperties::clearAllRevisionPropertiesAttributes(WrdCharacterProperties *this)
{
  unsigned int v2 = (unsigned int *)&this->var2 + 2;
  int v1 = *((_DWORD *)&this->var2 + 2);
  *((_DWORD *)this + 85) &= ~0x800000u;
  *((_DWORD *)&this->var2 + 2) = v1 & 0xFD7FFFFF;
  uint64_t result = (*((uint64_t (**)(WrdDateTime *))this->var8->var0 + 3))(this->var8);
  uint64_t v4 = *v2;
  unint64_t v5 = v4 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  unsigned int *v2 = v4 & 0xFEFFFFFF;
  *((_WORD *)v2 + 2) = WORD2(v5);
  *((_WORD *)v2 + 151) = 0;
  return result;
}

uint64_t WrdCharacterTextRun::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3 || !*(void *)(a1 + 32) || (uint64_t v5 = *(void *)(a2 + 24)) == 0 || !*(void *)(a2 + 32))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  WrdCharacterProperties::operator=(v3, v5);
  WrdCharacterProperties::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  return a1;
}

void *WrdCharacterTextRun::WrdCharacterTextRun(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)WrdTextRun::WrdTextRun(a1, a2, a3);
  void *result = &unk_26EBE56B0;
  if (!a4 || (result[3] = a4, !a5))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  result[4] = a5;
  return result;
}

void *WrdCharacterTextRun::clone(WrdCharacterTextRun *this)
{
  uint64_t v2 = (*((uint64_t (**)(WrdCharacterProperties *))this->var4->var0 + 3))(this->var4);
  uint64_t v3 = (*((uint64_t (**)(WrdCharacterProperties *))this->var5->var0 + 3))(this->var5);
  uint64_t v4 = operator new(0x28uLL);
  WrdCharacterTextRun::WrdCharacterTextRun((uint64_t)v4, this->var1, this->var2, v2, v3);
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1001;
  }
  WrdCharacterTextRun::operator=((uint64_t)v4, (uint64_t)this);
  return v4;
}

void sub_238E46CCC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdCHPXFKP::getGrpprlSize(WrdCHPXFKP *this)
{
  return *(unsigned __int8 *)(*((void *)this + 2)
                            + (*(unsigned int (**)(WrdCHPXFKP *))(*(void *)this + 32))(this));
}

BOOL WrdCHPXFKP::isRoomForGrpprl(WrdCHPXFKP *this, int a2)
{
  unsigned int v3 = 5
     * *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + *((void *)this + 2) - 1)
     + 10;
  unsigned int v4 = (*(uint64_t (**)(WrdCHPXFKP *))(*(void *)this + 56))(this);
  return v4 >= v3 && v4 - v3 > a2 + 1;
}

void *WrdCHPXFKP::appendGrpprl(WrdCHPXFKP *this, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = a3;
  unsigned int v10 = (*(uint64_t (**)(WrdCHPXFKP *, uint64_t, const unsigned __int8 *))(*(void *)this + 64))(this, a3, a2);
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1;
  if (*(unsigned char *)(v11 + v12))
  {
    unsigned int v13 = (*(uint64_t (**)(WrdCHPXFKP *))(*(void *)this + 56))(this) + ~v7;
    uint64_t v14 = *((void *)this + 2);
    memmove((void *)(v14 + 4 * *(unsigned __int8 *)(v14 + v12) + 8), (const void *)(v14 + 4 * *(unsigned __int8 *)(v14 + v12) + 4), *(unsigned __int8 *)(v14 + v12));
    uint64_t result = (void *)WrdFormattedDiskPage::setFC(this, ++*(unsigned char *)(*((void *)this + 2) + v12), a5);
  }
  else
  {
    *(unsigned char *)(v11 + v12) = 1;
    WrdFormattedDiskPage::setFC(this, 0, a4);
    uint64_t result = (void *)WrdFormattedDiskPage::setFC(this, 1u, a5);
    unsigned int v13 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - v7 - 2;
  }
  if (v10 == (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset)
  {
    __int16 v16 = v13 & 0xFFFE;
    *(unsigned char *)(4 * *(unsigned __int8 *)(*((void *)this + 2) + v12)
             + (*(unsigned char *)(*((void *)this + 2) + v12) - 1)
             + *((void *)this + 2)
             + 4) = v13 >> 1;
    if (*((unsigned __int16 *)this + 12) < (v13 & 0xFFFE)) {
      __int16 v16 = *((_WORD *)this + 12);
    }
    *((_WORD *)this + 12) = v16;
    uint64_t result = (void *)(*(uint64_t (**)(WrdCHPXFKP *, void))(*(void *)this + 32))(this, (*(unsigned char *)(*((void *)this + 2) + v12) - 1));
    *(unsigned char *)(*((void *)this + 2) + result) = v7;
    if (v7)
    {
      unsigned int v17 = (void *)(*((void *)this + 2) + ((unsigned __int16)v13 | 1u));
      return memcpy(v17, a2, v7);
    }
  }
  else
  {
    *(unsigned char *)(4 * *(unsigned __int8 *)(*((void *)this + 2) + v12)
             + (*(unsigned char *)(*((void *)this + 2) + v12) - 1)
             + *((void *)this + 2)
             + 4) = v10 >> 1;
    unsigned int v18 = *((unsigned __int16 *)this + 12);
    if (v18 >= v10) {
      LOWORD(v18) = v10;
    }
    *((_WORD *)this + 12) = v18;
  }
  return result;
}

uint64_t WrdCHPXFKP::grpprlSizeLimit(WrdCHPXFKP *this)
{
  return 498;
}

void WrdCommandDescription::WrdCommandDescription(WrdCommandDescription *this)
{
  *(void *)this = &unk_26EBE5760;
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  CsString::CsString((CsString *)this + 1);
  CsString::CsString((CsString *)this + 2);
  CsString::CsString((CsString *)this + 3);
  CsString::CsString((CsString *)this + 4);
  CsString::CsString((CsString *)this + 5);
  *((_WORD *)this + 72) = 0;
  CsString::CsString((CsString *)((char *)this + 152));
}

void sub_238E47118(_Unwind_Exception *a1)
{
  CsString::~CsString(v5);
  CsString::~CsString(v4);
  CsString::~CsString(v3);
  CsString::~CsString(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdCommandDescription::~WrdCommandDescription(WrdCommandDescription *this)
{
  *(void *)this = &unk_26EBE5760;
  uint64_t v2 = (CsString *)((char *)this + 24);
  CsString::~CsString((CsString *)((char *)this + 152));
  CsString::~CsString((CsString *)this + 5);
  CsString::~CsString((CsString *)this + 4);
  CsString::~CsString((CsString *)this + 3);
  CsString::~CsString((CsString *)this + 2);
  CsString::~CsString(v2);
}

{
  uint64_t vars8;

  WrdCommandDescription::~WrdCommandDescription(this);
  JUMPOUT(0x23EC997B0);
}

WrdCommandDescription *WrdCommandDescription::clone(WrdCommandDescription *this)
{
  uint64_t v1 = (WrdCommandDescription *)operator new(0xB0uLL);
  WrdCommandDescription::WrdCommandDescription(v1);
  return v1;
}

void sub_238E47254(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *WrdCPTable::operator=(void *a1, uint64_t a2)
{
  unsigned int v3 = (char *)a1[1];
  a1[2] = v3;
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v6 = 0;
    unsigned int v7 = a1 + 3;
    do
    {
      if ((unint64_t)v3 >= *v7)
      {
        unsigned int v9 = (char *)a1[1];
        int64_t v10 = v3 - v9;
        unint64_t v11 = (unint64_t)(v3 - v9) >> 2;
        uint64_t v12 = (*v7 - (void)v9) >> 2;
        if (2 * (int)v12 <= (v11 + 1)) {
          unsigned int v13 = v11 + 1;
        }
        else {
          unsigned int v13 = 2 * v12;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)(a1 + 3), v14);
          uint64_t v17 = v16;
          unsigned int v9 = (char *)a1[1];
          unsigned int v3 = (char *)a1[2];
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v17 = 0;
        }
        unsigned int v18 = &v15[v10 & 0x3FFFFFFFCLL];
        *(_DWORD *)unsigned int v18 = *(_DWORD *)(v4 + 4 * v6);
        unint64_t v8 = v18 + 4;
        while (v3 != v9)
        {
          int v19 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        a1[1] = v18;
        a1[2] = v8;
        a1[3] = &v15[4 * v17];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v3 = *(_DWORD *)(v4 + 4 * v6);
        unint64_t v8 = v3 + 4;
      }
      a1[2] = v8;
      ++v6;
      uint64_t v4 = *(void *)(a2 + 8);
      unsigned int v3 = v8;
    }
    while (v6 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 2));
  }
  return a1;
}

void *WrdCPTable::clone(WrdCPTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26EBE57A0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  WrdCPTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E47444(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdCustomization::WrdCustomization(WrdCustomization *this)
{
  *(void *)this = &unk_26EBE5808;
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 8));
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

void WrdCustomization::~WrdCustomization(WrdCustomization *this)
{
  *(void *)this = &unk_26EBE5808;
  WrdCustomization::clear(this);
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdCustomization::~WrdCustomization(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdCustomization::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[10];
  if (((this[11] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[10];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[10];
    }
    while (v3 < ((unint64_t)(v1[11] - v2) >> 3));
  }
  uint64_t v4 = v1[13];
  if (((v1[14] - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      this = *(void **)(v4 + 8 * v5);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v4 = v1[13];
      }
      *(void *)(v4 + 8 * v5++) = 0;
      uint64_t v4 = v1[13];
    }
    while (v5 < ((unint64_t)(v1[14] - v4) >> 3));
  }
  uint64_t v6 = v1[16];
  if (((v1[17] - v6) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v7 = 0;
    do
    {
      this = *(void **)(v6 + 8 * v7);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = v1[16];
      }
      *(void *)(v6 + 8 * v7++) = 0;
      uint64_t v6 = v1[16];
    }
    while (v7 < ((unint64_t)(v1[17] - v6) >> 3));
  }
  uint64_t v8 = v1[19];
  if (((v1[20] - v8) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v9 = 0;
    do
    {
      this = *(void **)(v8 + 8 * v9);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v8 = v1[19];
      }
      *(void *)(v8 + 8 * v9++) = 0;
      uint64_t v8 = v1[19];
    }
    while (v9 < ((unint64_t)(v1[20] - v8) >> 3));
  }
  uint64_t v10 = v1[22];
  if (((v1[23] - v10) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    do
    {
      this = *(void **)(v10 + 8 * v11);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v10 = v1[22];
      }
      *(void *)(v10 + 8 * v11++) = 0;
      uint64_t v10 = v1[22];
    }
    while (v11 < ((unint64_t)(v1[23] - v10) >> 3));
  }
  return this;
}

char *WrdCustomization::clone(WrdCustomization *this)
{
  uint64_t v1 = (char *)operator new(0xC8uLL);
  *(void *)uint64_t v1 = &unk_26EBE5808;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v1 + 8));
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  WrdCustomization::clear(v1);
  return v1;
}

void sub_238E47850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdCustomizedMenu::WrdCustomizedMenu(WrdCustomizedMenu *this)
{
  *(void *)this = &unk_26EBE5848;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

void WrdCustomizedMenu::~WrdCustomizedMenu(WrdCustomizedMenu *this)
{
  *(void *)this = &unk_26EBE5848;
  WrdCustomizedMenu::clear(this);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdCustomizedMenu::~WrdCustomizedMenu(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdCustomizedMenu::clear(void *this)
{
  uint64_t v1 = this[2];
  if (((this[3] - v1) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v1 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v1 = v2[2];
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = v2[2];
    }
    while (v3 < ((unint64_t)(v2[3] - v1) >> 3));
  }
  return this;
}

_DWORD *WrdCustomizedMenu::clone(WrdCustomizedMenu *this)
{
  uint64_t v1 = operator new(0x28uLL);
  *(void *)uint64_t v1 = &unk_26EBE5848;
  v1[2] = 0;
  *((void *)v1 + 3) = 0;
  *((void *)v1 + 4) = 0;
  *((void *)v1 + 2) = 0;
  WrdCustomizedMenu::clear(v1);
  return v1;
}

BOOL WrdDateTime::isDefault(WrdDateTime *this)
{
  return !this->var1 && !this->var4 && !this->var3 && !this->var2 && !this->var5 && this->var6 == 0;
}

void WrdDocumentFileRecord::WrdDocumentFileRecord(WrdDocumentFileRecord *this)
{
  *(void *)this = &unk_26EBE58D0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 32));
}

void sub_238E47A98(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdDocumentFileRecord::getType(WrdDocumentFileRecord *this)
{
  if (((*((void *)this + 2) - *((void *)this + 1)) & 0x3FFFFFFFCLL) != 0) {
    return 6;
  }
  else {
    return 8 * (*((_DWORD *)this + 12) != 0);
  }
}

uint64_t WrdDocumentProperties::operator=(uint64_t a1, uint64_t a2)
{
  WrdDOPTypography::operator=(*(void *)(a1 + 16), *(void *)(a2 + 16));
  WrdDrawingObjectGrid::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdAutoSummaryInfo::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdDateTime::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdDateTime::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdDateTime::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  *(_OWORD *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 156);
  unint64_t v5 = *(void *)(a1 + 148) & 0xFFFFFFFFFFFFFFFELL | *(void *)(a2 + 148) & 1;
  *(void *)(a1 + 148) = v5;
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*(void *)(a2 + 148) >> 1) & 1));
  *(void *)(a1 + 148) = v6;
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((*(void *)(a2 + 148) >> 2) & 1));
  *(void *)(a1 + 148) = v7;
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF7 | (8 * ((*(void *)(a2 + 148) >> 3) & 1));
  *(void *)(a1 + 148) = v8;
  unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFEFLL | (16 * ((*(void *)(a2 + 148) >> 4) & 1));
  *(void *)(a1 + 148) = v9;
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*(void *)(a2 + 148) >> 5) & 1));
  *(void *)(a1 + 148) = v10;
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFBFLL | (((*(void *)(a2 + 148) >> 6) & 1) << 6);
  *(void *)(a1 + 148) = v11;
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF7FLL | (((*(void *)(a2 + 148) >> 7) & 1) << 7);
  *(void *)(a1 + 148) = v12;
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFEFFLL | (((*(void *)(a2 + 148) >> 8) & 1) << 8);
  *(void *)(a1 + 148) = v13;
  unint64_t v14 = v13 & 0xFFFFFFFFFFFFFDFFLL | (((*(void *)(a2 + 148) >> 9) & 1) << 9);
  *(void *)(a1 + 148) = v14;
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFBFFLL | (((*(void *)(a2 + 148) >> 10) & 1) << 10);
  *(void *)(a1 + 148) = v15;
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFF7FFLL | (((*(void *)(a2 + 148) >> 11) & 1) << 11);
  *(void *)(a1 + 148) = v16;
  unint64_t v17 = v16 & 0xFFFFFFFFFFFFEFFFLL | (((*(void *)(a2 + 148) >> 12) & 1) << 12);
  *(void *)(a1 + 148) = v17;
  unint64_t v18 = v17 & 0xFFFFFFFFFFFFDFFFLL | (((*(void *)(a2 + 148) >> 13) & 1) << 13);
  *(void *)(a1 + 148) = v18;
  unint64_t v19 = v18 & 0xFFFFFFFFFFFFBFFFLL | (((*(void *)(a2 + 148) >> 14) & 1) << 14);
  *(void *)(a1 + 148) = v19;
  unint64_t v20 = v19 & 0xFFFFFFFFFFFF7FFFLL | (((*(void *)(a2 + 148) >> 15) & 1) << 15);
  *(void *)(a1 + 148) = v20;
  unint64_t v21 = v20 & 0xFFFFFFFFFFFEFFFFLL | (((*(void *)(a2 + 148) >> 16) & 1) << 16);
  *(void *)(a1 + 148) = v21;
  unint64_t v22 = v21 & 0xFFFFFFFFFFFDFFFFLL | (((*(void *)(a2 + 148) >> 17) & 1) << 17);
  *(void *)(a1 + 148) = v22;
  unint64_t v23 = v22 & 0xFFFFFFFFFFFBFFFFLL | (((*(void *)(a2 + 148) >> 18) & 1) << 18);
  *(void *)(a1 + 148) = v23;
  unint64_t v24 = v23 & 0xFFFFFFFFFFF7FFFFLL | (((*(void *)(a2 + 148) >> 19) & 1) << 19);
  *(void *)(a1 + 148) = v24;
  unint64_t v25 = v24 & 0xFFFFFFFFFFEFFFFFLL | (((*(void *)(a2 + 148) >> 20) & 1) << 20);
  *(void *)(a1 + 148) = v25;
  unint64_t v26 = v25 & 0xFFFFFFFFFFDFFFFFLL | (((*(void *)(a2 + 148) >> 21) & 1) << 21);
  *(void *)(a1 + 148) = v26;
  unint64_t v27 = v26 & 0xFFFFFFFFFFBFFFFFLL | (((*(void *)(a2 + 148) >> 22) & 1) << 22);
  *(void *)(a1 + 148) = v27;
  unint64_t v28 = v27 & 0xFFFFFFFFFF7FFFFFLL | (((*(void *)(a2 + 148) >> 23) & 1) << 23);
  *(void *)(a1 + 148) = v28;
  unint64_t v29 = v28 & 0xFFFFFFFFFEFFFFFFLL | (((*(void *)(a2 + 148) >> 24) & 1) << 24);
  *(void *)(a1 + 148) = v29;
  unint64_t v30 = v29 & 0xFFFFFFFFFDFFFFFFLL | (((*(void *)(a2 + 148) >> 25) & 1) << 25);
  *(void *)(a1 + 148) = v30;
  unint64_t v31 = v30 & 0xFFFFFFFFFBFFFFFFLL | (((*(void *)(a2 + 148) >> 26) & 1) << 26);
  *(void *)(a1 + 148) = v31;
  unint64_t v32 = v31 & 0xFFFFFFFFF7FFFFFFLL | (((*(void *)(a2 + 148) >> 27) & 1) << 27);
  *(void *)(a1 + 148) = v32;
  unint64_t v33 = v32 & 0xFFFFFFFFEFFFFFFFLL | (((*(void *)(a2 + 148) >> 28) & 1) << 28);
  *(void *)(a1 + 148) = v33;
  unint64_t v34 = v33 & 0xFFFFFFFFDFFFFFFFLL | (((*(void *)(a2 + 148) >> 29) & 1) << 29);
  *(void *)(a1 + 148) = v34;
  unint64_t v35 = v34 & 0xFFFFFFFFBFFFFFFFLL | (((*(void *)(a2 + 148) >> 30) & 1) << 30);
  *(void *)(a1 + 148) = v35;
  unint64_t v36 = v35 & 0xFFFFFFFF7FFFFFFFLL | (((*(void *)(a2 + 148) >> 31) & 1) << 31);
  *(void *)(a1 + 148) = v36;
  unint64_t v37 = v36 & 0xFFFFFFFEFFFFFFFFLL | ((HIDWORD(*(void *)(a2 + 148)) & 1) << 32);
  *(void *)(a1 + 148) = v37;
  unint64_t v38 = v37 & 0xFFFFFFFDFFFFFFFFLL | (((*(void *)(a2 + 148) >> 33) & 1) << 33);
  *(void *)(a1 + 148) = v38;
  unint64_t v39 = v38 & 0xFFFFFFFBFFFFFFFFLL | (((*(void *)(a2 + 148) >> 34) & 1) << 34);
  *(void *)(a1 + 148) = v39;
  unint64_t v40 = v39 & 0xFFFFFFF7FFFFFFFFLL | (((*(void *)(a2 + 148) >> 35) & 1) << 35);
  *(void *)(a1 + 148) = v40;
  unint64_t v41 = v40 & 0xFFFFFFEFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 36) & 1) << 36);
  *(void *)(a1 + 148) = v41;
  unint64_t v42 = v41 & 0xFFFFFFDFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 37) & 1) << 37);
  *(void *)(a1 + 148) = v42;
  unint64_t v43 = v42 & 0xFFFFFFBFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 38) & 1) << 38);
  *(void *)(a1 + 148) = v43;
  unint64_t v44 = v43 & 0xFFFFFF7FFFFFFFFFLL | (((*(void *)(a2 + 148) >> 39) & 1) << 39);
  *(void *)(a1 + 148) = v44;
  unint64_t v45 = v44 & 0xFFFFFEFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 40) & 1) << 40);
  *(void *)(a1 + 148) = v45;
  unint64_t v46 = v45 & 0xFFFFFDFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 41) & 1) << 41);
  *(void *)(a1 + 148) = v46;
  unint64_t v47 = v46 & 0xFFFFFBFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 42) & 1) << 42);
  *(void *)(a1 + 148) = v47;
  unint64_t v48 = v47 & 0xFFFFF7FFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 43) & 1) << 43);
  *(void *)(a1 + 148) = v48;
  unint64_t v49 = v48 & 0xFFFFEFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 44) & 1) << 44);
  *(void *)(a1 + 148) = v49;
  unint64_t v50 = v49 & 0xFFFFDFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 45) & 1) << 45);
  *(void *)(a1 + 148) = v50;
  unint64_t v51 = v50 & 0xFFFFBFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 46) & 1) << 46);
  *(void *)(a1 + 148) = v51;
  unint64_t v52 = v51 & 0xFFFF7FFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 47) & 1) << 47);
  *(void *)(a1 + 148) = v52;
  unint64_t v53 = v52 & 0xFFFEFFFFFFFFFFFFLL | ((HIWORD(*(void *)(a2 + 148)) & 1) << 48);
  *(void *)(a1 + 148) = v53;
  unint64_t v54 = v53 & 0xFFFDFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 49) & 1) << 49);
  *(void *)(a1 + 148) = v54;
  unint64_t v55 = v54 & 0xFFFBFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 50) & 1) << 50);
  *(void *)(a1 + 148) = v55;
  unint64_t v56 = v55 & 0xFFF7FFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 51) & 1) << 51);
  *(void *)(a1 + 148) = v56;
  unint64_t v57 = v56 & 0xFFEFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 52) & 1) << 52);
  *(void *)(a1 + 148) = v57;
  unint64_t v58 = v57 & 0xFFDFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 53) & 1) << 53);
  *(void *)(a1 + 148) = v58;
  unint64_t v59 = v58 & 0xFFBFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 54) & 1) << 54);
  *(void *)(a1 + 148) = v59;
  unint64_t v60 = v59 & 0xFF7FFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 55) & 1) << 55);
  *(void *)(a1 + 148) = v60;
  unint64_t v61 = v60 & 0xFEFFFFFFFFFFFFFFLL | ((HIBYTE(*(void *)(a2 + 148)) & 1) << 56);
  *(void *)(a1 + 148) = v61;
  unint64_t v62 = v61 & 0xFDFFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 57) & 1) << 57);
  *(void *)(a1 + 148) = v62;
  unint64_t v63 = v62 & 0xFBFFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 58) & 1) << 58);
  *(void *)(a1 + 148) = v63;
  unint64_t v64 = v63 & 0xF7FFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 59) & 1) << 59);
  *(void *)(a1 + 148) = v64;
  unint64_t v65 = v64 & 0xEFFFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 60) & 1) << 60);
  *(void *)(a1 + 148) = v65;
  unint64_t v66 = v65 & 0xDFFFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 61) & 1) << 61);
  *(void *)(a1 + 148) = v66;
  unint64_t v67 = v66 & 0xBFFFFFFFFFFFFFFFLL | (((*(void *)(a2 + 148) >> 62) & 1) << 62);
  *(void *)(a1 + 148) = v67;
  unint64_t v68 = *(void *)(a2 + 148) & 0x8000000000000000 | v67 & 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 148) = v68;
  unint64_t v69 = v4 & 0xFFFFFFFFFFFFFFFELL | *(void *)(a2 + 156) & 1;
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v69;
  unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*(void *)(a2 + 156) >> 1) & 1));
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v70;
  unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((*(void *)(a2 + 156) >> 2) & 1));
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v71;
  unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF7 | (8 * ((*(void *)(a2 + 156) >> 3) & 1));
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v72;
  unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFEFLL | (16 * ((*(void *)(a2 + 156) >> 4) & 1));
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v73;
  unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*(void *)(a2 + 156) >> 5) & 1));
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v74;
  unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFBFLL | (((*(void *)(a2 + 156) >> 6) & 1) << 6);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v75;
  unint64_t v76 = v75 & 0xFFFFFFFFFFFFFF7FLL | (((*(void *)(a2 + 156) >> 7) & 1) << 7);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v76;
  unint64_t v77 = v76 & 0xFFFFFFFFFFFFFEFFLL | (((*(void *)(a2 + 156) >> 8) & 1) << 8);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v77;
  unint64_t v78 = v77 & 0xFFFFFFFFFFFFFDFFLL | (((*(void *)(a2 + 156) >> 9) & 1) << 9);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v78;
  unint64_t v79 = v78 & 0xFFFFFFFFFFFFFBFFLL | (((*(void *)(a2 + 156) >> 10) & 1) << 10);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v79;
  unint64_t v80 = v79 & 0xFFFFFFFFFFFFF7FFLL | (((*(void *)(a2 + 156) >> 11) & 1) << 11);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v80;
  unint64_t v81 = v80 & 0xFFFFFFFFFFFFEFFFLL | (((*(void *)(a2 + 156) >> 12) & 1) << 12);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v81;
  unint64_t v82 = v81 & 0xFFFFFFFFFFFFDFFFLL | (((*(void *)(a2 + 156) >> 13) & 1) << 13);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v82;
  unint64_t v83 = v82 & 0xFFFFFFFFFFFFBFFFLL | (((*(void *)(a2 + 156) >> 14) & 1) << 14);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v83;
  unint64_t v84 = v83 & 0xFFFFFFFFFFFF7FFFLL | (((*(void *)(a2 + 156) >> 15) & 1) << 15);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v84;
  unint64_t v85 = v84 & 0xFFFFFFFFFFFEFFFFLL | (((*(void *)(a2 + 156) >> 16) & 1) << 16);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v85;
  unint64_t v86 = v85 & 0xFFFFFFFFFFFDFFFFLL | (((*(void *)(a2 + 156) >> 17) & 1) << 17);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v86;
  unint64_t v87 = v86 & 0xFFFFFFFFFFFBFFFFLL | (((*(void *)(a2 + 156) >> 18) & 1) << 18);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v87;
  unint64_t v88 = v87 & 0xFFFFFFFFFFF7FFFFLL | (((*(void *)(a2 + 156) >> 19) & 1) << 19);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v88;
  unint64_t v89 = v88 & 0xFFFFFFFFFFEFFFFFLL | (((*(void *)(a2 + 156) >> 20) & 1) << 20);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v89;
  unint64_t v90 = v89 & 0xFFFFFFFFFFDFFFFFLL | (((*(void *)(a2 + 156) >> 21) & 1) << 21);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v90;
  unint64_t v91 = v90 & 0xFFFFFFFFFFBFFFFFLL | (((*(void *)(a2 + 156) >> 22) & 1) << 22);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v91;
  unint64_t v92 = v91 & 0xFFFFFFFFFF7FFFFFLL | (((*(void *)(a2 + 156) >> 23) & 1) << 23);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v92;
  unint64_t v93 = v92 & 0xFFFFFFFFFEFFFFFFLL | (((*(void *)(a2 + 156) >> 24) & 1) << 24);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v93;
  unint64_t v94 = v93 & 0xFFFFFFFFFDFFFFFFLL | (((*(void *)(a2 + 156) >> 25) & 1) << 25);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v94;
  unint64_t v95 = v94 & 0xFFFFFFFFFBFFFFFFLL | (((*(void *)(a2 + 156) >> 26) & 1) << 26);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v95;
  *(_OWORD *)(a1 + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_DWORD *)(a1 + 218) = *(_DWORD *)(a2 + 218);
  unint64_t v96 = v95 & 0xFFFFFFFFDFFFFFFFLL | (((*(void *)(a2 + 156) >> 29) & 1) << 29);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v96;
  unint64_t v97 = v96 & 0xFFFFFFFFBFFFFFFFLL | (((*(void *)(a2 + 156) >> 30) & 1) << 30);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v97;
  unint64_t v98 = v97 & 0xFFFFFFFF7FFFFFFFLL | (((*(void *)(a2 + 156) >> 31) & 1) << 31);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v98;
  unint64_t v99 = v98 & 0xFFFFFFFEFFFFFFFFLL | ((HIDWORD(*(void *)(a2 + 156)) & 1) << 32);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v99;
  unint64_t v100 = v99 & 0xFFFFFFFDFFFFFFFFLL | (((*(void *)(a2 + 156) >> 33) & 1) << 33);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v100;
  unint64_t v101 = v100 & 0xFFFFFFFBFFFFFFFFLL | (((*(void *)(a2 + 156) >> 34) & 1) << 34);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v101;
  unint64_t v102 = v101 & 0xFFFFFFF7FFFFFFFFLL | (((*(void *)(a2 + 156) >> 35) & 1) << 35);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v102;
  unint64_t v103 = v102 & 0xFFFFFFEFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 36) & 1) << 36);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v103;
  unint64_t v104 = v103 & 0xFFFFFFDFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 37) & 1) << 37);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v104;
  unint64_t v105 = v104 & 0xFFFFFFBFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 38) & 1) << 38);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v105;
  unint64_t v106 = v105 & 0xFFFFFF7FFFFFFFFFLL | (((*(void *)(a2 + 156) >> 39) & 1) << 39);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v106;
  unint64_t v107 = v106 & 0xFFFFFEFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 40) & 1) << 40);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v107;
  unint64_t v108 = v107 & 0xFFFFFDFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 41) & 1) << 41);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v108;
  unint64_t v109 = v108 & 0xFFFFFBFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 42) & 1) << 42);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v109;
  unint64_t v110 = v109 & 0xFFFFF7FFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 43) & 1) << 43);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v110;
  unint64_t v111 = v110 & 0xFFFFEFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 44) & 1) << 44);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v111;
  unint64_t v112 = v111 & 0xFFFFDFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 45) & 1) << 45);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v112;
  unint64_t v113 = v112 & 0xFFFFBFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 46) & 1) << 46);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v113;
  unint64_t v114 = v113 & 0xFFFF7FFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 47) & 1) << 47);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v114;
  unint64_t v115 = v114 & 0xFFFEFFFFFFFFFFFFLL | ((HIWORD(*(void *)(a2 + 156)) & 1) << 48);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v115;
  unint64_t v116 = v115 & 0xFFFDFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 49) & 1) << 49);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v116;
  unint64_t v117 = v116 & 0xFFFBFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 50) & 1) << 50);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v117;
  unint64_t v118 = v117 & 0xFFF7FFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 51) & 1) << 51);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v118;
  unint64_t v119 = v118 & 0xFFEFFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 52) & 1) << 52);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v119;
  unint64_t v120 = v119 & 0xFFDFFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 53) & 1) << 53);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v120;
  unint64_t v121 = v120 & 0xFFBFFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 54) & 1) << 54);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v121;
  unint64_t v122 = v121 & 0xFF7FFFFFFFFFFFFFLL | (((*(void *)(a2 + 156) >> 55) & 1) << 55);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v122;
  unint64_t v123 = v122 & 0xFEFFFFFFFFFFFFFFLL | ((HIBYTE(*(void *)(a2 + 156)) & 1) << 56);
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v123;
  uint64_t v124 = *(void *)(a2 + 156) >> 57;
  *(void *)(a1 + 148) = v68;
  *(void *)(a1 + 156) = v123 & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)(v124 & 1) << 57);
  *(_WORD *)(a1 + 222) = *(_WORD *)(a2 + 222);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v125 = *(void *)(a1 + 232);
  if (v125) {
    MEMORY[0x23EC99790](v125, 0x1000C8077774924);
  }
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  size_t v126 = *(unsigned int *)(a2 + 240);
  if (v126 && *(void *)(a2 + 232))
  {
    *(_DWORD *)(a1 + 240) = v126;
    unsigned int v127 = operator new[](v126);
    *(void *)(a1 + 232) = v127;
    memcpy(v127, *(const void **)(a2 + 232), *(unsigned int *)(a1 + 240));
  }
  uint64_t v128 = *(void *)(a1 + 248);
  if (v128) {
    MEMORY[0x23EC99790](v128, 0x1000C8077774924);
  }
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  size_t v129 = *(unsigned int *)(a2 + 256);
  if (v129 && *(void *)(a2 + 248))
  {
    *(_DWORD *)(a1 + 256) = v129;
    uint64_t v130 = operator new[](v129);
    *(void *)(a1 + 248) = v130;
    memcpy(v130, *(const void **)(a2 + 248), *(unsigned int *)(a1 + 256));
  }
  return a1;
}

WrdDocumentProperties *WrdDocumentProperties::clone(WrdDocumentProperties *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdDOPTypography *))(*(void *)this->var2 + 16))(this->var2);
  uint64_t v3 = (*(uint64_t (**)(WrdDrawingObjectGrid *))(*(void *)this->var3 + 16))(this->var3);
  uint64_t v4 = (*(uint64_t (**)(WrdAutoSummaryInfo *))(*(void *)this->var4 + 16))(this->var4);
  uint64_t v5 = (*((uint64_t (**)(WrdDateTime *))this->var5->var0 + 2))(this->var5);
  uint64_t v6 = (*((uint64_t (**)(WrdDateTime *))this->var6->var0 + 2))(this->var6);
  uint64_t v7 = (*((uint64_t (**)(WrdDateTime *))this->var7->var0 + 2))(this->var7);
  unint64_t v8 = (WrdDocumentProperties *)operator new(0x108uLL);
  v8->var0 = (void **)&unk_26EBE5908;
  WrdDocumentProperties::simpleDefaults(v8);
  v8->unsigned int var2 = (WrdDOPTypography *)v2;
  v8->int var3 = (WrdDrawingObjectGrid *)v3;
  v8->var4 = (WrdAutoSummaryInfo *)v4;
  v8->var5 = (WrdDateTime *)v5;
  v8->var6 = (WrdDateTime *)v6;
  v8->var7 = (WrdDateTime *)v7;
  WrdDocumentProperties::operator=((uint64_t)v8, (uint64_t)this);
  return v8;
}

void sub_238E4866C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WrdDocumentProperties *WrdDocumentProperties::takeThemeData(WrdDocumentProperties *this, char *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = this;
    this = (WrdDocumentProperties *)this->var175;
    if (this) {
      this = (WrdDocumentProperties *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
    v5->var176 = a3;
    v5->var175 = a2;
  }
  return this;
}

WrdDocumentProperties *WrdDocumentProperties::takeColorSchemeMapXmlStream(WrdDocumentProperties *this, char *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = this;
    this = (WrdDocumentProperties *)this->var177;
    if (this) {
      this = (WrdDocumentProperties *)MEMORY[0x23EC99790](this, 0x1000C8077774924);
    }
    v5->var178 = a3;
    v5->var177 = a2;
  }
  return this;
}

double WrdDrawingObjectGrid::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  char v3 = *(unsigned char *)(a1 + 20) & 0xFE | *(unsigned char *)(a2 + 20) & 1;
  *(unsigned char *)(a1 + 20) = v3;
  *(unsigned char *)(a1 + 20) = v3 & 0xFD | *(unsigned char *)(a2 + 20) & 2;
  return result;
}

double WrdDrawingObjectGrid::clone(WrdDrawingObjectGrid *this)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = &unk_26EBE5948;
  return WrdDrawingObjectGrid::operator=((uint64_t)v2, (uint64_t)this);
}

char *WrdEmbeddedTrueTypeFont::clone(WrdEmbeddedTrueTypeFont *this)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26EBE59C8;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 8));
  *((_WORD *)v2 + 28) = 0;
  *((_WORD *)v2 + 28) = *((_WORD *)this + 28);
  OcBinaryData::operator=(v3, (uint64_t)this + 8);
  return v2;
}

void sub_238E48A40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdEmbeddedTrueTypeFont::~WrdEmbeddedTrueTypeFont(WrdEmbeddedTrueTypeFont *this)
{
  *(void *)this = &unk_26EBE59C8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE59C8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

BOOL WrdEmbeddedTrueTypeFont::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 56) == *(unsigned __int16 *)(a2 + 56) && OcBinaryData::operator==(a1 + 8, a2 + 8);
}

void WrdEmbeddedTrueTypeFontTable::WrdEmbeddedTrueTypeFontTable(WrdEmbeddedTrueTypeFontTable *this)
{
  *(void *)this = &unk_26EBE5A10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

void *WrdEmbeddedTrueTypeFontTable::operator=(void *a1, uint64_t a2)
{
  WrdAnnotationDateTimeTable::clear(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      a1[4] = v6;
      unint64_t v9 = (uint64_t *)a1[2];
      unint64_t v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[1];
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v15);
          uint64_t v18 = v17;
          uint64_t v7 = a1[4];
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        unint64_t v10 = v19 + 1;
        unint64_t v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unint64_t v20 = (char *)a1[1];
        }
        a1[1] = v19;
        a1[2] = v10;
        a1[3] = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v6;
        unint64_t v10 = v9 + 1;
      }
      a1[2] = v10;
      a1[4] = 0;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  return a1;
}

void WrdEmbeddedTrueTypeFontTable::~WrdEmbeddedTrueTypeFontTable(WrdEmbeddedTrueTypeFontTable *this)
{
  *(void *)this = &unk_26EBE5A10;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  WrdAnnotationDateTimeTable::clear(this);
  char v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  WrdEmbeddedTrueTypeFontTable::~WrdEmbeddedTrueTypeFontTable(this);
  JUMPOUT(0x23EC997B0);
}

char *WrdEmbeddedTrueTypeFontTable::clone(WrdEmbeddedTrueTypeFontTable *this)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE5A10;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  WrdEmbeddedTrueTypeFontTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E48DF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WrdEshGroup::~WrdEshGroup(WrdEshGroup *this)
{
  uint64_t v1 = (WrdEshGroup *)((char *)this - 272);
  *((void *)this - 34) = &unk_26EBE5D38;
  *(void *)this = &unk_26EBE5DE8;
  XlEshGroup::cleanup((WrdEshGroup *)((char *)this - 272));
  EshGroup::~EshGroup(v1);
}

{
  WrdEshGroup::~WrdEshGroup((WrdEshGroup *)((char *)this - 272));
}

void non-virtual thunk to'WrdEshShape::~WrdEshShape(WrdEshShape *this)
{
  uint64_t v1 = (WrdEshShape *)((char *)this - 416);
  *((void *)this - 52) = &unk_26EBE5E80;
  *(void *)this = &unk_26EBE5F50;
  XlEshShape::cleanup((WrdEshShape *)((char *)this - 416));
  EshContentBase::~EshContentBase(v1);
}

{
  WrdEshShape::~WrdEshShape((WrdEshShape *)((char *)this - 416));
}

double WrdFieldDescriptor::clone(WrdFieldDescriptor *this)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = &unk_26EBE5FA8;
  return WrdFieldDescriptor::operator=((uint64_t)v2, (uint64_t)this);
}

void WrdFieldPosition::WrdFieldPosition(WrdFieldPosition *this)
{
  this->var0 = (void **)&unk_26EBE6020;
  this->signed __int16 var1 = 0;
  uint64_t v2 = (WrdFieldDescriptor *)operator new(0x18uLL);
  WrdFieldDescriptor::WrdFieldDescriptor(v2);
  this->unsigned int var2 = v2;
}

void sub_238E49148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *WrdFieldPosition::clone(WrdFieldPosition *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdFieldDescriptor *))(*(void *)this->var2 + 16))(this->var2);
  char v3 = operator new(0x18uLL);
  *(void *)char v3 = &unk_26EBE6020;
  v3[2] = 0;
  *((void *)v3 + 2) = v2;
  v3[2] = this->var1;
  WrdFieldDescriptor::operator=(v2, (uint64_t)this->var2);
  return v3;
}

void sub_238E4920C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdFieldPositionTable::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  WrdBookmarkTable::clear((void *)a1);
  uint64_t v4 = *(void *)(a2 + 16);
  if (((*(void *)(a2 + 24) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unint64_t v9 = *(uint64_t **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 32, v15);
          uint64_t v18 = v17;
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        unint64_t v10 = v19 + 1;
        unint64_t v21 = *(char **)(a1 + 16);
        unint64_t v20 = *(char **)(a1 + 24);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unint64_t v20 = *(char **)(a1 + 16);
        }
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v6;
        unint64_t v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 16);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 24) - v4) >> 3));
  }
  return a1;
}

void sub_238E49414(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdFieldPositionTable::clone(WrdFieldPositionTable *this)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE6060;
  v2[2] = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  WrdFieldPositionTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E49494(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WrdFieldPositionTable::lowerBoundOfCP(WrdFieldPositionTable *this, int a2)
{
  WrdFieldPosition::WrdFieldPosition(&v13);
  v13.signed __int16 var1 = a2;
  uint64_t v4 = (char *)*((void *)this + 2);
  unint64_t v5 = (char *)*((void *)this + 3);
  if (v5 != v4)
  {
    unint64_t v6 = (v5 - v4) >> 3;
    unint64_t v5 = (char *)*((void *)this + 2);
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = (uint64_t *)&v5[8 * (v6 >> 1)];
      uint64_t v10 = *v8;
      unint64_t v9 = (char *)(v8 + 1);
      v6 += ~(v6 >> 1);
      if (*(_DWORD *)(v10 + 8) < a2) {
        unint64_t v5 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  unint64_t v11 = (unint64_t)(v5 - v4) >> 3;
  WrdFieldPosition::~WrdFieldPosition(&v13);
  return v11;
}

double WrdFileShapeAddress::clone(WrdFileShapeAddress *this)
{
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_26EBE60A0;
  return WrdFileShapeAddress::operator=((uint64_t)v2, (uint64_t)this);
}

uint64_t WrdFileShapeAddressTable::operator=(uint64_t a1, uint64_t a2)
{
  WrdBookmarkTable::clear((void *)a1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (((*(void *)(a2 + 24) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unint64_t v9 = *(uint64_t **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 32, v15);
          uint64_t v18 = v17;
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        uint64_t v10 = v19 + 1;
        unint64_t v21 = *(char **)(a1 + 16);
        unint64_t v20 = *(char **)(a1 + 24);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unint64_t v20 = *(char **)(a1 + 16);
        }
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v6;
        uint64_t v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 16);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 24) - v4) >> 3));
  }
  return a1;
}

void sub_238E49708(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdFileShapeAddressTable::clone(WrdFileShapeAddressTable *this)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE60E0;
  v2[2] = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  WrdFileShapeAddressTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E49784(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WrdFontFamilyName *WrdFontFamilyName::clone(WrdFontFamilyName *this)
{
  uint64_t v2 = (WrdFontFamilyName *)operator new(0x58uLL);
  WrdFontFamilyName::WrdFontFamilyName(v2);
  WrdFontFamilyName::init(v2);
  WrdFontFamilyName::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4980C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdFontFamilyName::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_DWORD *)(a1 + 82) = *(_DWORD *)(a2 + 82);
    *(void *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = operator new[](0xAuLL);
    *(void *)(a1 + 72) = operator new[](0x18uLL);
    uint64_t v4 = *(uint64_t **)(a2 + 64);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 64);
      uint64_t v6 = *v4;
      *(_WORD *)(v5 + 8) = *((_WORD *)v4 + 4);
      *(void *)uint64_t v5 = v6;
    }
    uint64_t v7 = *(long long **)(a2 + 72);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      long long v9 = *v7;
      *(void *)(v8 + 16) = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v8 = v9;
    }
  }
  return a1;
}

void *WrdFontFamilyNameTable::operator=(void *a1, uint64_t a2)
{
  WrdAnnotationDateTimeTable::clear(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      long long v9 = (uint64_t *)a1[2];
      unint64_t v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[1];
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v15);
          uint64_t v18 = v17;
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        uint64_t v10 = v19 + 1;
        unint64_t v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unint64_t v20 = (char *)a1[1];
        }
        a1[1] = v19;
        a1[2] = v10;
        a1[3] = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *long long v9 = v6;
        uint64_t v10 = v9 + 1;
      }
      a1[2] = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  return a1;
}

void sub_238E49A24(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WrdFontFamilyNameTable::clone(WrdFontFamilyNameTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26EBE6160;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  WrdFontFamilyNameTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E49AD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdFormattedDiskPage::setFC(WrdFormattedDiskPage *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (*(unsigned __int8 *)(v3 + 511) < a2 || a2 >= 0x7F)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v4 = (_DWORD *)(v3 + 4 * a2);
  return CsLeWriteUInt32(a3, v4);
}

uint64_t WrdFormattedDiskPage::getSmallestGrpprlOffset(WrdFormattedDiskPage *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 12);
  if (v1 == 0xFFFF)
  {
    if (*(unsigned char *)(*((void *)this + 2) + 511))
    {
      unsigned __int8 v3 = 0;
      LODWORD(v1) = 0xFFFF;
      do
      {
        if (v1 >= (*(unsigned int (**)(WrdFormattedDiskPage *, void))(*(void *)this + 32))(this, v3))uint64_t v1 = (*(uint64_t (**)(WrdFormattedDiskPage *, void))(*(void *)this + 32))(this, v3); {
        else
        }
          uint64_t v1 = *((unsigned __int16 *)this + 12);
        *((_WORD *)this + 12) = v1;
        ++v3;
      }
      while (*(unsigned __int8 *)(*((void *)this + 2) + 511) > v3);
    }
    else
    {
      return 0xFFFFLL;
    }
  }
  return v1;
}

uint64_t WrdFormattedDiskPage::findGrpprlOffset(WrdFormattedDiskPage *this, unsigned int a2, const unsigned __int8 *a3)
{
  if (*(unsigned char *)(*((void *)this + 2) + 511))
  {
    unsigned __int8 v6 = 0;
    size_t v7 = a2;
    do
    {
      if ((*(unsigned int (**)(WrdFormattedDiskPage *, void))(*(void *)this + 40))(this, v6) == a2)
      {
        unsigned int v8 = (*(uint64_t (**)(WrdFormattedDiskPage *, void))(*(void *)this + 32))(this, v6);
        unsigned __int16 v9 = v8;
        uint64_t v10 = *((void *)this + 2);
        if (a2 && memcmp(a3, (const void *)(v10 + v8), v7)) {
          unsigned __int16 v9 = -1;
        }
      }
      else
      {
        uint64_t v10 = *((void *)this + 2);
        unsigned __int16 v9 = -1;
      }
    }
    while (*(unsigned __int8 *)(v10 + 511) > ++v6 && (unsigned __int16)~v9 == 0);
  }
  else
  {
    return (unsigned __int16)-1;
  }
  return v9;
}

void WrdFormFieldBinaryData::WrdFormFieldBinaryData(WrdFormFieldBinaryData *this)
{
  *(void *)this = &unk_26EBE6208;
  *((void *)this + 1) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 16));
  *((_WORD *)this + 32) = 0;
  *((unsigned char *)this + 66) = 0;
  OcText::OcText((OcText *)((char *)this + 72));
  CsString::CsString((CsString *)this + 5);
  CsString::CsString((CsString *)this + 6);
  CsString::CsString((CsString *)this + 7);
  CsString::CsString((CsString *)this + 8);
  OcText::OcText((OcText *)((char *)this + 216));
  OcText::OcText((OcText *)((char *)this + 264));
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 312));
}

void sub_238E49E30(_Unwind_Exception *a1)
{
  OcText::~OcText(v8);
  OcText::~OcText(v7);
  CsString::~CsString(v6);
  CsString::~CsString(v5);
  CsString::~CsString(v4);
  CsString::~CsString(v3);
  OcText::~OcText(v2);
  OcBinaryData::~OcBinaryData(v1);
  _Unwind_Resume(a1);
}

void sub_238E49E9C()
{
}

void sub_238E49EA4()
{
}

void sub_238E49EAC()
{
}

char *WrdFormFieldBinaryData::clone(WrdFormFieldBinaryData *this)
{
  uint64_t v2 = (char *)operator new(0x168uLL);
  WrdFormFieldBinaryData::WrdFormFieldBinaryData((WrdFormFieldBinaryData *)v2);
  *((void *)v2 + 1) = *((void *)this + 1);
  *(_WORD *)(v2 + 65) = *(_WORD *)((char *)this + 65);
  OcText::operator=((uint64_t)(v2 + 72), (uint64_t)this + 72);
  *((_DWORD *)v2 + 34) = 0;
  bzero(*((void **)v2 + 16), 2 * *((unsigned int *)v2 + 35));
  CsString::append((CsString *)v2 + 5, (const CsString *)this + 5);
  *((_DWORD *)v2 + 40) = 0;
  bzero(*((void **)v2 + 19), 2 * *((unsigned int *)v2 + 41));
  CsString::append((CsString *)v2 + 6, (const CsString *)this + 6);
  *((_DWORD *)v2 + 46) = 0;
  bzero(*((void **)v2 + 22), 2 * *((unsigned int *)v2 + 47));
  CsString::append((CsString *)v2 + 7, (const CsString *)this + 7);
  *((_DWORD *)v2 + 52) = 0;
  bzero(*((void **)v2 + 25), 2 * *((unsigned int *)v2 + 53));
  CsString::append((CsString *)v2 + 8, (const CsString *)this + 8);
  OcText::operator=((uint64_t)(v2 + 264), (uint64_t)this + 264);
  OcText::operator=((uint64_t)(v2 + 216), (uint64_t)this + 216);
  OcBinaryData::operator=((OcBinaryData *)(v2 + 312), (uint64_t)this + 312);
  return v2;
}

void sub_238E49FD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdFormFieldBinaryData::~WrdFormFieldBinaryData(WrdFormFieldBinaryData *this)
{
  WrdFormFieldBinaryData::~WrdFormFieldBinaryData(this);
  JUMPOUT(0x23EC997B0);
}

{
  OcBinaryData *v2;

  *(void *)this = &unk_26EBE6208;
  uint64_t v2 = (OcBinaryData *)((char *)this + 16);
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 312));
  OcText::~OcText((OcText *)((char *)this + 264));
  OcText::~OcText((OcText *)((char *)this + 216));
  CsString::~CsString((CsString *)this + 8);
  CsString::~CsString((CsString *)this + 7);
  CsString::~CsString((CsString *)this + 6);
  CsString::~CsString((CsString *)this + 5);
  OcText::~OcText((OcText *)((char *)this + 72));
  OcBinaryData::~OcBinaryData(v2);
}

char *WrdFrameProperties::clone(WrdFrameProperties *this)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26EBE6248;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 8));
  OcBinaryData::operator=(v3, (uint64_t)this + 8);
  return v2;
}

void sub_238E4A144(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdFrameProperties::~WrdFrameProperties(WrdFrameProperties *this)
{
  *(void *)this = &unk_26EBE6248;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6248;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

BOOL WrdFrameProperties::operator==(uint64_t a1, uint64_t a2)
{
  return OcBinaryData::operator==(a1 + 8, a2 + 8);
}

void WrdKeyboardShortcut::WrdKeyboardShortcut(WrdKeyboardShortcut *this)
{
  *(void *)this = &unk_26EBE6290;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
}

void WrdKeyboardShortcut::~WrdKeyboardShortcut(WrdKeyboardShortcut *this)
{
  *(void *)this = &unk_26EBE6290;
}

{
  *(void *)this = &unk_26EBE6290;
  JUMPOUT(0x23EC997B0);
}

_DWORD *WrdKeyboardShortcut::clone(WrdKeyboardShortcut *this)
{
  double result = operator new(0x18uLL);
  *(void *)double result = &unk_26EBE6290;
  result[4] = 0;
  result[2] = 0;
  *((unsigned char *)result + 12) = 0;
  return result;
}

uint64_t WrdListFormat::operator=(uint64_t a1, uint64_t a2)
{
  WrdListFormat::cleanup((WrdListFormat *)a1);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  int v4 = *(_WORD *)(a1 + 50) & 0xFFFE | *(_WORD *)(a2 + 50) & 1;
  *(_WORD *)(a1 + 50) = *(_WORD *)(a1 + 50) & 0xFFFE | *(_WORD *)(a2 + 50) & 1;
  unsigned int v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 50) >> 1) & 1));
  *(_WORD *)(a1 + 50) = v5;
  unsigned int v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 50) >> 2) & 1));
  *(_WORD *)(a1 + 50) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 50) >> 3) & 1));
  *(_WORD *)(a1 + 50) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 50) >> 4) & 1));
  *(_WORD *)(a1 + 50) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 50) >> 5) & 1));
  *(_WORD *)(a1 + 50) = v9;
  unsigned int v10 = v9 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 50) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 50) = v10;
  unsigned int v11 = v10 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 50) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 50) = v11;
  unsigned int v12 = v11 & 0xFFFFFEFF | ((HIBYTE(*(unsigned __int16 *)(a2 + 50)) & 1) << 8);
  *(_WORD *)(a1 + 50) = v12;
  unsigned int v13 = v12 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a2 + 50) >> 9) & 1) << 9);
  *(_WORD *)(a1 + 50) = v13;
  unsigned int v14 = v13 & 0xFFFFFBFF | (((*(unsigned __int16 *)(a2 + 50) >> 10) & 1) << 10);
  *(_WORD *)(a1 + 50) = v14;
  unsigned int v15 = v14 & 0xFFFFF7FF | (((*(unsigned __int16 *)(a2 + 50) >> 11) & 1) << 11);
  *(_WORD *)(a1 + 50) = v15;
  *(_WORD *)(a1 + 50) = v15 & 0xEFFF | *(_WORD *)(a2 + 50) & 0x1000;
  unint64_t v16 = operator new[](0x12uLL);
  *(void *)(a1 + 32) = v16;
  unsigned int v17 = *(long long **)(a2 + 32);
  long long v18 = *v17;
  v16[8] = *((_WORD *)v17 + 8);
  *(_OWORD *)unint64_t v16 = v18;
  if (((*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(*(void *)(a2 + 8) + 8 * v19);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
      uint64_t v22 = v21;
      unint64_t v24 = *(uint64_t **)(a1 + 16);
      unint64_t v23 = *(void *)(a1 + 24);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = *(void *)(a1 + 8);
        unint64_t v27 = (unint64_t)v24 - v26;
        unint64_t v28 = (v23 - v26) >> 3;
        unsigned int v29 = 2 * v28;
        if (2 * (int)v28 <= (v27 >> 3) + 1) {
          unsigned int v29 = (v27 >> 3) + 1;
        }
        if (v28 >= 0x7FFFFFFF) {
          unint64_t v30 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 24, v30);
          uint64_t v33 = v32;
        }
        else
        {
          unint64_t v31 = 0;
          uint64_t v33 = 0;
        }
        unint64_t v34 = (uint64_t *)&v31[v27 & 0x7FFFFFFF8];
        uint64_t *v34 = v22;
        unint64_t v25 = v34 + 1;
        unint64_t v36 = *(char **)(a1 + 8);
        unint64_t v35 = *(char **)(a1 + 16);
        if (v35 != v36)
        {
          do
          {
            uint64_t v37 = *((void *)v35 - 1);
            v35 -= 8;
            *--unint64_t v34 = v37;
          }
          while (v35 != v36);
          unint64_t v35 = *(char **)(a1 + 8);
        }
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = &v31[8 * v33];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        uint64_t *v24 = v21;
        unint64_t v25 = v24 + 1;
      }
      *(void *)(a1 + 16) = v25;
      ++v19;
    }
    while (v19 < (((unint64_t)v25 - *(void *)(a1 + 8)) >> 3));
  }
  return a1;
}

void sub_238E4A560(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

char *WrdListFormat::clone(WrdListFormat *this)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26EBE6310;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  *((_WORD *)v2 + 24) = 12;
  *((_WORD *)v2 + 25) &= 0xE000u;
  v2[52] = 0;
  unsigned __int8 v3 = operator new[](0x12uLL);
  *((void *)v2 + 4) = v3;
  void *v3 = 0;
  v3[1] = 0;
  *((_WORD *)v3 + 8) = 0;
  WrdListFormat::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4A618(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdListFormatOverride::operator=(uint64_t a1, uint64_t a2)
{
  WrdListFormatOverride::cleanup((void *)a1);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  int v4 = *(unsigned char *)(a1 + 50) & 0xFE | *(unsigned char *)(a2 + 50) & 1;
  *(unsigned char *)(a1 + 50) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 50) >> 1) & 1));
  *(unsigned char *)(a1 + 50) = v5;
  unsigned int v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 50) >> 2) & 1));
  *(unsigned char *)(a1 + 50) = v6;
  unsigned int v7 = v6 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 50) >> 3) & 1));
  *(unsigned char *)(a1 + 50) = v7;
  unsigned int v8 = v7 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 50) >> 4) & 1));
  *(unsigned char *)(a1 + 50) = v8;
  unsigned int v9 = v8 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a2 + 50) >> 5) & 1));
  *(unsigned char *)(a1 + 50) = v9;
  LOBYTE(v9) = v9 & 0xBF | (((*(unsigned char *)(a2 + 50) & 0x40) != 0) << 6);
  *(unsigned char *)(a1 + 50) = v9;
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50) & 0x80 | v9 & 0x7F;
  uint64_t v10 = *(void *)(a2 + 24);
  if (((*(void *)(a2 + 32) - v10) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v10 + 8 * v11) + 16))(*(void *)(v10 + 8 * v11));
      uint64_t v13 = v12;
      unsigned int v15 = *(uint64_t **)(a1 + 32);
      unint64_t v14 = *(void *)(a1 + 40);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *(void *)(a1 + 24);
        unint64_t v18 = (unint64_t)v15 - v17;
        unint64_t v19 = (v14 - v17) >> 3;
        unsigned int v20 = 2 * v19;
        if (2 * (int)v19 <= (v18 >> 3) + 1) {
          unsigned int v20 = (v18 >> 3) + 1;
        }
        if (v19 >= 0x7FFFFFFF) {
          unint64_t v21 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 40, v21);
          uint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v24 = 0;
        }
        unint64_t v25 = (uint64_t *)&v22[v18 & 0x7FFFFFFF8];
        *unint64_t v25 = v13;
        unint64_t v16 = v25 + 1;
        unint64_t v27 = *(char **)(a1 + 24);
        uint64_t v26 = *(char **)(a1 + 32);
        if (v26 != v27)
        {
          do
          {
            uint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            *--unint64_t v25 = v28;
          }
          while (v26 != v27);
          uint64_t v26 = *(char **)(a1 + 24);
        }
        *(void *)(a1 + 24) = v25;
        *(void *)(a1 + 32) = v16;
        *(void *)(a1 + 40) = &v22[8 * v24];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        uint64_t *v15 = v12;
        unint64_t v16 = v15 + 1;
      }
      *(void *)(a1 + 32) = v16;
      ++v11;
      uint64_t v10 = *(void *)(a2 + 24);
    }
    while (v11 < ((unint64_t)(*(void *)(a2 + 32) - v10) >> 3));
  }
  return a1;
}

void sub_238E4A824(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdListFormatOverride::clone(WrdListFormatOverride *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  unsigned __int8 v3 = operator new(0x38uLL);
  v3[4] = -1;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 3) = 0;
  *(_DWORD *)((char *)v3 + 47) = 0;
  *(void *)unsigned __int8 v3 = &unk_26EBE6350;
  *((void *)v3 + 1) = v2;
  WrdListFormatOverride::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_238E4A8E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WrdListFormatOverrideTable::operator=(void *a1, uint64_t a2)
{
  WrdAnnotationDateTimeTable::clear(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unsigned int v9 = (uint64_t *)a1[2];
      unint64_t v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[1];
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v15);
          uint64_t v18 = v17;
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        uint64_t v10 = v19 + 1;
        unint64_t v21 = (char *)a1[1];
        unsigned int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unsigned int v20 = (char *)a1[1];
        }
        a1[1] = v19;
        a1[2] = v10;
        a1[3] = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unsigned int v9 = v6;
        uint64_t v10 = v9 + 1;
      }
      a1[2] = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  return a1;
}

void sub_238E4AA78(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WrdListFormatOverrideTable::clone(WrdListFormatOverrideTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26EBE6390;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  WrdListFormatOverrideTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E4AAEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WrdListFormatTable *WrdListFormatTable::clone(WrdListFormatTable *this)
{
  uint64_t v2 = (WrdListFormatTable *)operator new(0x20uLL);
  unsigned __int8 v3 = v2;
  *(void *)uint64_t v2 = &unk_26EBE63D0;
  *((void *)v2 + 1) = 0;
  uint64_t v4 = (void **)((char *)v2 + 8);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  if (v2 != this)
  {
    CsSimpleHeapVector<WrdListFormat>::clear((void *)v2 + 1);
    CsHeapVector<WrdListFormat>::copyElements(v4, (void *)this + 1);
  }
  return v3;
}

void sub_238E4ABE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void CsHeapVector<WrdListFormat>::copyElements(void **a1, void *a2)
{
  unint64_t v4 = a2[1] - *a2;
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve(a1, v4 >> 3);
  if ((v4 >> 3))
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      if (v5 >= ((a2[1] - *a2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v5) + 16))(*(void *)(*a2 + 8 * v5));
      CsSimpleHeapVector<XlRecord>::pushBack(a1, &v7);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      uint64_t v7 = 0;
      ++v5;
    }
    while (v6 != v5);
  }
}

void sub_238E4AD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WrdListFormatTable::append(a10);
  }
  _Unwind_Resume(exception_object);
}

void WrdMenuCustomizationOperation::WrdMenuCustomizationOperation(WrdMenuCustomizationOperation *this)
{
  *(void *)this = &unk_26EBE6490;
  *((_WORD *)this + 4) = 0;
  *(void *)((char *)this + 12) = 0;
  *((unsigned char *)this + 20) = 0;
  WrdCommandDescription::WrdCommandDescription((WrdMenuCustomizationOperation *)((char *)this + 24));
}

void WrdMenuCustomizationOperation::~WrdMenuCustomizationOperation(WrdMenuCustomizationOperation *this)
{
  *(void *)this = &unk_26EBE6490;
  WrdCommandDescription::~WrdCommandDescription((WrdMenuCustomizationOperation *)((char *)this + 24));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6490;
  WrdCommandDescription::~WrdCommandDescription((WrdMenuCustomizationOperation *)((char *)this + 24));
  JUMPOUT(0x23EC997B0);
}

char *WrdMenuCustomizationOperation::clone(WrdMenuCustomizationOperation *this)
{
  uint64_t v1 = (char *)operator new(0xC8uLL);
  *(void *)uint64_t v1 = &unk_26EBE6490;
  *((_WORD *)v1 + 4) = 0;
  *(void *)(v1 + 12) = 0;
  v1[20] = 0;
  WrdCommandDescription::WrdCommandDescription((WrdCommandDescription *)(v1 + 24));
  return v1;
}

void sub_238E4AEE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdNewMenu::WrdNewMenu(WrdNewMenu *this)
{
  *(void *)this = &unk_26EBE64D0;
  uint64_t v2 = (CsString *)((char *)this + 32);
  CsString::CsString((CsString *)((char *)this + 8));
  CsString::CsString(v2);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
}

void sub_238E4AF68(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdNewMenu::~WrdNewMenu(WrdNewMenu *this)
{
  *(void *)this = &unk_26EBE64D0;
  WrdNewMenu::clear(this);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  CsString::~CsString((CsString *)((char *)this + 32));
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdNewMenu::~WrdNewMenu(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdNewMenu::clear(void *this)
{
  uint64_t v1 = this[7];
  if (((this[8] - v1) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v1 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v1 = v2[7];
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = v2[7];
    }
    while (v3 < ((unint64_t)(v2[8] - v1) >> 3));
  }
  return this;
}

WrdNewMenu *WrdNewMenu::clone(WrdNewMenu *this)
{
  uint64_t v1 = (WrdNewMenu *)operator new(0x50uLL);
  WrdNewMenu::WrdNewMenu(v1);
  WrdNewMenu::clear(v1);
  return v1;
}

void sub_238E4B0DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double WrdNote::clone(WrdNote *this)
{
  uint64_t v2 = (double *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EBE6510;
  double result = *((double *)this + 1);
  v2[1] = result;
  *((_DWORD *)v2 + 4) = *((_DWORD *)this + 4);
  *((_WORD *)v2 + 10) = *((_WORD *)this + 10);
  return result;
}

uint64_t WrdNoteTable::operator=(uint64_t a1, uint64_t a2)
{
  WrdBookmarkTable::clear((void *)a1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (((*(void *)(a2 + 24) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unsigned int v9 = *(uint64_t **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 32, v15);
          uint64_t v18 = v17;
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        uint64_t v10 = v19 + 1;
        unint64_t v21 = *(char **)(a1 + 16);
        unsigned int v20 = *(char **)(a1 + 24);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          unsigned int v20 = *(char **)(a1 + 16);
        }
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unsigned int v9 = v6;
        uint64_t v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 16);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 24) - v4) >> 3));
  }
  return a1;
}

void sub_238E4B2F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdNoteTable::clone(WrdNoteTable *this)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE6588;
  v2[2] = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  WrdNoteTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4B370(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdOffsetPairList::translateOffsetsBy(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(int32x2_t **)this;
  unint64_t v3 = *(void *)(this + 8) - *(void *)this;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = (v3 >> 3);
    int32x2_t v5 = vdup_n_s32(a2);
    do
    {
      int32x2_t *v2 = vadd_s32(*v2, v5);
      ++v2;
      --v4;
    }
    while (v4);
  }
  return this;
}

void WrdOutlineListData::WrdOutlineListData(WrdOutlineListData *this, WrdAutoNumberLevelDescriptor *a2)
{
  *(void *)this = &unk_26EBE6640;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  CsString::CsString((CsString *)((char *)this + 40));
  *((void *)this + 4) = a2;
}

void sub_238E4B5DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

WrdOutlineListData *WrdOutlineListData::clone(WrdOutlineListData *this)
{
  uint64_t v2 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(void))(***((void ***)this + 1) + 16))(**((void **)this + 1));
  unint64_t v3 = (WrdOutlineListData *)operator new(0x48uLL);
  WrdOutlineListData::WrdOutlineListData(v3, v2);
  (*(void (**)(WrdOutlineListData *))(*(void *)v3 + 32))(v3);
  WrdOutlineListData::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_238E4B6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t WrdOutlineListData::operator=(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 72; i += 8)
    WrdAutoNumberLevelDescriptor::operator=(*(void *)(*(void *)(a1 + 8) + i), *(void *)(*(void *)(a2 + 8) + i));
  *(_DWORD *)(a1 + 56) = 0;
  bzero(*(void **)(a1 + 48), 2 * *(unsigned int *)(a1 + 60));
  CsString::append((CsString *)(a1 + 40), (const CsString *)(a2 + 40));
  *(unsigned char *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t WrdPAPXFKP::getGrpprlSize(WrdPAPXFKP *this)
{
  unsigned int v2 = (*(uint64_t (**)(WrdPAPXFKP *))(*(void *)this + 32))(this);
  uint64_t v3 = *((void *)this + 2);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (v2)
  {
    int v4 = *(unsigned __int8 *)(v3 + v2);
    if (!*(unsigned char *)(v3 + v2)) {
      int v4 = *(unsigned __int8 *)(v2 + v3 + 1);
    }
  }
  else
  {
    int v4 = 0;
  }
  return (2 * v4);
}

uint64_t WrdPAPXFKP::setGrpprlOffset(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 16);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(unsigned char *)(4 * *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + v3 - 1)
           + 13 * a2
           + v3
           + 4) = a3 >> 1;
  unsigned int v4 = *(unsigned __int16 *)(this + 24);
  if (v4 >= a3) {
    LOWORD(v4) = a3;
  }
  *(_WORD *)(this + 24) = v4;
  return this;
}

uint64_t WrdPAPXFKP::setGrpprlSize(WrdPAPXFKP *this, unsigned __int8 a2, unsigned int a3)
{
  if (!*((void *)this + 2))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  int v5 = a3 & 1;
  uint64_t result = (*(uint64_t (**)(WrdPAPXFKP *))(*(void *)this + 32))(this);
  uint64_t v7 = (unsigned char *)(*((void *)this + 2) + result);
  if (!v5)
  {
    *uint64_t v7 = 0;
    uint64_t v7 = (unsigned char *)(result + *((void *)this + 2) + 1);
  }
  *uint64_t v7 = v5 + (a3 >> 1);
  return result;
}

BOOL WrdPAPXFKP::isRoomForGrpprl(WrdPAPXFKP *this, int a2)
{
  unsigned int v3 = 17
     * *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + *((void *)this + 2) - 1)
     + 23;
  unsigned int v4 = (*(uint64_t (**)(WrdPAPXFKP *))(*(void *)this + 56))(this);
  if (((_BYTE)a2 + 1)) {
    unsigned int v5 = a2 + 2;
  }
  else {
    unsigned int v5 = a2 + 1;
  }
  return v4 >= v3 && v4 - v3 > v5;
}

void *WrdPAPXFKP::appendGrpprl(WrdPAPXFKP *this, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*((void *)this + 2))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int v7 = a3;
  if (a3) {
    __int16 v10 = 1;
  }
  else {
    __int16 v10 = 2;
  }
  __int16 v11 = v10 + a3;
  unsigned int v12 = (*(uint64_t (**)(WrdPAPXFKP *, uint64_t, const unsigned __int8 *))(*(void *)this + 64))(this, a3, a2);
  uint64_t v13 = *((void *)this + 2);
  uint64_t v14 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1;
  if (*(unsigned char *)(v13 + v14))
  {
    __int16 v15 = (*(uint64_t (**)(WrdPAPXFKP *))(*(void *)this + 56))(this);
    uint64_t v16 = *((void *)this + 2);
    unsigned __int16 v17 = v15 - v11;
    memmove((void *)(v16 + 4 * *(unsigned __int8 *)(v16 + v14) + 8), (const void *)(v16 + 4 * *(unsigned __int8 *)(v16 + v14) + 4), 13 * *(unsigned __int8 *)(v16 + v14));
    WrdFormattedDiskPage::setFC(this, ++*(unsigned char *)(*((void *)this + 2) + v14), a5);
  }
  else
  {
    *(unsigned char *)(v13 + v14) = 1;
    WrdFormattedDiskPage::setFC(this, 0, a4);
    WrdFormattedDiskPage::setFC(this, 1u, a5);
    unsigned __int16 v17 = WrdFormattedDiskPage::s_unPageBufferSize - v11 - 2;
  }
  unsigned int v18 = (*(unsigned char *)(*((void *)this + 2) + v14) - 1);
  if (v12 == (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset)
  {
    WrdPAPXFKP::setGrpprlOffset((uint64_t)this, v18, v17);
    uint64_t result = (void *)WrdPAPXFKP::setGrpprlSize(this, *(unsigned char *)(*((void *)this + 2) + v14) - 1, (unsigned __int16)v7);
    if (v7)
    {
      uint64_t v20 = v17 + *((void *)this + 2);
      if (v7) {
        unint64_t v21 = (void *)(v20 + 1);
      }
      else {
        unint64_t v21 = (void *)(v20 + 2);
      }
      return memcpy(v21, a2, v7);
    }
  }
  else
  {
    return (void *)WrdPAPXFKP::setGrpprlOffset((uint64_t)this, v18, v12);
  }
  return result;
}

uint64_t WrdPAPXFKP::findGrpprlOffset(WrdPAPXFKP *this, unsigned int a2, const unsigned __int8 *a3)
{
  uint64_t v3 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1;
  if (!*(unsigned char *)(*((void *)this + 2) + v3)) {
    return (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset;
  }
  unsigned __int8 v6 = 0;
  unsigned int v7 = a2 + 1;
  if (a2) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 2;
  }
  size_t v9 = a2;
  do
  {
    int v10 = (*(uint64_t (**)(WrdPAPXFKP *, void))(*(void *)this + 40))(this, v6);
    if (v10 == a2 || v7 == v10)
    {
      uint64_t v12 = (*(uint64_t (**)(WrdPAPXFKP *, void))(*(void *)this + 32))(this, v6);
      uint64_t v14 = v12;
      uint64_t v13 = *((void *)this + 2);
      if (a2)
      {
        if (!memcmp(a3, (const void *)(v13 + v8 + v12), v9)) {
          uint64_t v14 = v14;
        }
        else {
          uint64_t v14 = (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset;
        }
      }
    }
    else
    {
      uint64_t v13 = *((void *)this + 2);
      uint64_t v14 = (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset;
    }
  }
  while (*(unsigned __int8 *)(v13 + v3) > ++v6
       && v14 == (unsigned __int16)WrdFormattedDiskPage::s_unUndefinedOffset);
  return v14;
}

uint64_t WrdPAPXFKP::grpprlSizeLimit(WrdPAPXFKP *this)
{
  return 486;
}

void WrdParagraphProperties::WrdParagraphProperties(WrdParagraphProperties *this, WrdShading *a2, WrdLineSpaceDescriptor *a3, WrdDropCap *a4, WrdBorder *a5, WrdBorder *a6, WrdBorder *a7, WrdBorder *a8, long long a9, long long a10, WrdNumberRevisionMarkData *a11, WrdTabDescriptor *a12)
{
  *(void *)this = &unk_26EBE6700;
  *((void *)this + 1) = &unk_26EBE6748;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + 8) = a6;
  *((void *)this + 9) = a7;
  *((void *)this + 10) = a8;
  *(_OWORD *)((char *)this + 88) = a9;
  *(_OWORD *)((char *)this + 104) = a10;
  *((void *)this + 15) = a11;
  *((void *)this + 16) = a12;
  WrdParagraphProperties::reset(this);
}

{
  WrdParagraphProperties::WrdParagraphProperties(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_238E4BDF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  unsigned int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 184) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WrdParagraphProperties::~WrdParagraphProperties(WrdParagraphProperties *this)
{
}

{
  uint64_t vars8;

  WrdParagraphProperties::~WrdParagraphProperties((WrdParagraphProperties *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdParagraphProperties::setBorderLineStyle(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000uLL;
  *(_DWORD *)(result + 144) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setSideBySide(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x400uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFB | (4 * (a2 & 1));
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setKinsoku(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x200000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFBFF | ((a2 & 1) << 10);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setTopLinePunctuationProcessing(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x1000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFDFFF | ((a2 & 1) << 13);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVertical(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x10000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xF7FFFFFF | ((a2 & 1) << 27);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setBackward(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x20000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xEFFFFFFF | ((a2 & 1) << 28);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setRotateFont(WrdParagraphProperties *this, char a2)
{
  *((void *)this + 2) |= 0x40000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xDFFFFFFF | ((a2 & 1) << 29);
  return this;
}

char *WrdPictureBinary::clone(WrdPictureBinary *this)
{
  unsigned int v2 = (char *)operator new(0x38uLL);
  *(void *)unsigned int v2 = &unk_26EBE67E0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 8));
  OcBinaryData::operator=(v3, (uint64_t)this + 8);
  return v2;
}

void sub_238E4BFAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdPictureBinary::~WrdPictureBinary(WrdPictureBinary *this)
{
  *(void *)this = &unk_26EBE67E0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE67E0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

char *WrdPictureFilename::clone(WrdPictureFilename *this)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_26EBE6820;
  CsString::CsString((CsString *)(v2 + 8));
  *((_DWORD *)v2 + 6) = 0;
  bzero(*((void **)v2 + 2), 2 * *((unsigned int *)v2 + 7));
  CsString::append((CsString *)(v2 + 8), (const CsString *)((char *)this + 8));
  return v2;
}

void sub_238E4C124(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdPictureFilename::~WrdPictureFilename(WrdPictureFilename *this)
{
  *(void *)this = &unk_26EBE6820;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6820;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdPictureProperties::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 90);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 70);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  WrdBorder::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdBorder::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdBorder::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdBorder::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  *(_WORD *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  return a1;
}

void non-virtual thunk to'WrdPictureProperties::~WrdPictureProperties(WrdPictureProperties *this)
{
}

{
  uint64_t vars8;

  WrdPictureProperties::~WrdPictureProperties((WrdPictureProperties *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

void *WrdPictureProperties::clone(WrdPictureProperties *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  unsigned __int8 v6 = operator new(0x70uLL);
  void *v6 = &unk_26EBE6860;
  v6[1] = &unk_26EBE6890;
  v6[4] = v2;
  v6[5] = v3;
  v6[6] = v4;
  v6[7] = v5;
  *((_OWORD *)v6 + 1) = xmmword_238EEF500;
  v6[8] = 0;
  v6[9] = 0;
  v6[10] = 0;
  v6[11] = 0;
  *((_DWORD *)v6 + 26) = 0;
  WrdPictureProperties::operator=((uint64_t)v6, (uint64_t)this);
  return v6;
}

void sub_238E4C490(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_238E4C544()
{
  if (v0) {
    JUMPOUT(0x238E4C54CLL);
  }
  JUMPOUT(0x238E4C4E0);
}

void sub_238E4C57C()
{
  if (!v0) {
    JUMPOUT(0x238E4C50CLL);
  }
  JUMPOUT(0x238E4C4E4);
}

uint64_t WrdPictureProperties::getBorder(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = a1 + 5;
      goto LABEL_7;
    case 1:
      uint64_t v2 = a1 + 4;
      goto LABEL_7;
    case 2:
      uint64_t v2 = a1 + 7;
      goto LABEL_7;
    case 3:
    case 4:
      uint64_t v2 = a1 + 6;
LABEL_7:
      uint64_t result = *v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void WrdRoutingRecipient::WrdRoutingRecipient(WrdRoutingRecipient *this)
{
  *(void *)this = &unk_26EBE68E8;
  CsString::CsString((CsString *)((char *)this + 8));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(_DWORD *)((char *)this + 47) = 0;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 60) = 0;
  *((_DWORD *)this + 19) = 0;
}

uint64_t WrdRoutingRecipient::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (const CsString *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = 0;
    bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
    CsString::append((CsString *)(a1 + 8), v4);
    std::vector<WrdRoutingRecipient::MailParameter *,ChAllocator<WrdRoutingRecipient::MailParameter *>>::__assign_with_size[abi:ne180100]<WrdRoutingRecipient::MailParameter **,WrdRoutingRecipient::MailParameter **>((void *)(a1 + 56), *(char **)(a2 + 56), *(char **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }
  return a1;
}

char *WrdRoutingRecipient::clone(WrdRoutingRecipient *this)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26EBE68E8;
  CsString::CsString((CsString *)(v2 + 8));
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *(_DWORD *)(v2 + 47) = 0;
  *(void *)(v2 + 52) = 0;
  *(void *)(v2 + 68) = 0;
  *(void *)(v2 + 60) = 0;
  *((_DWORD *)v2 + 19) = 0;
  WrdRoutingRecipient::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4C74C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdRoutingRecipient::~WrdRoutingRecipient(WrdRoutingRecipient *this)
{
  *(void *)this = &unk_26EBE68E8;
  uint64_t v2 = (void *)*((void *)this + 7);
  uint64_t v3 = *((void *)this + 8);
  if (((v3 - (void)v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(void))(*(void *)v5 + 8))(v2[v4]);
        uint64_t v2 = (void *)*((void *)this + 7);
        uint64_t v3 = *((void *)this + 8);
      }
      if (v4 >= ((unint64_t)(v3 - (void)v2) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      v2[v4++] = 0;
      uint64_t v2 = (void *)*((void *)this + 7);
      uint64_t v3 = *((void *)this + 8);
    }
    while (v4 < ((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdRoutingRecipient::~WrdRoutingRecipient(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdRoutingRecipient::addMailParameter(WrdRoutingRecipient *this, const CsString *a2)
{
  unint64_t v4 = (char *)operator new(0x20uLL);
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 1) = 0;
  *(void *)unint64_t v4 = &unk_26EBE6910;
  CsString::CsString((CsString *)(v4 + 8));
  *((_DWORD *)v4 + 6) = 0;
  bzero(*((void **)v4 + 2), 2 * *((unsigned int *)v4 + 7));
  CsString::append((CsString *)(v4 + 8), a2);
  unint64_t v5 = *((void *)this + 9);
  unsigned __int8 v6 = (void *)*((void *)this + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *((void *)this + 7);
    unint64_t v9 = (unint64_t)v6 - v8;
    unint64_t v10 = (v5 - v8) >> 3;
    unsigned int v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1) {
      unsigned int v11 = (v9 >> 3) + 1;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 72, v12);
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v13[v9 & 0x7FFFFFFF8];
    unsigned __int16 v17 = &v13[8 * v15];
    *(void *)uint64_t v16 = v4;
    unsigned int v7 = v16 + 8;
    unint64_t v19 = (char *)*((void *)this + 7);
    unsigned int v18 = (char *)*((void *)this + 8);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*((void *)this + 7);
    }
    *((void *)this + 7) = v16;
    *((void *)this + 8) = v7;
    *((void *)this + 9) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v6 = v4;
    unsigned int v7 = v6 + 1;
  }
  *((void *)this + 8) = v7;
  return (((unint64_t)v7 - *((void *)this + 7)) >> 3) - 1;
}

void sub_238E4CA00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdRoutingRecipient::addMailParameter(WrdRoutingRecipient *this, const OcBinaryData *a2)
{
  unint64_t v4 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)unint64_t v4 = &unk_26EBE6970;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v4 + 8));
  OcBinaryData::operator=(v5, (uint64_t)a2);
  unint64_t v6 = *((void *)this + 9);
  unsigned int v7 = (void *)*((void *)this + 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 7);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v6 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 72, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned __int16 v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)unsigned __int16 v17 = v4;
    uint64_t v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 7);
    unint64_t v19 = (char *)*((void *)this + 8);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*((void *)this + 7);
    }
    *((void *)this + 7) = v17;
    *((void *)this + 8) = v8;
    *((void *)this + 9) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = v4;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 8) = v8;
  return (((unint64_t)v8 - *((void *)this + 7)) >> 3) - 1;
}

void sub_238E4CB78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL WrdRoutingRecipient::MailParameterString::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != 1) {
    return 0;
  }
  return CsString::operator==(a1 + 8, a2 + 8);
}

BOOL WrdRoutingRecipient::MailParameterBinary::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != 2) {
    return 0;
  }
  return OcBinaryData::operator==(a1 + 8, a2 + 8);
}

void WrdRoutingRecipient::MailParameterString::~MailParameterString(WrdRoutingRecipient::MailParameterString *this)
{
  *(void *)this = &unk_26EBE6910;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6910;
  CsString::~CsString((CsString *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdRoutingRecipient::MailParameterString::getType(WrdRoutingRecipient::MailParameterString *this)
{
  return 1;
}

void WrdRoutingRecipient::MailParameterBinary::~MailParameterBinary(WrdRoutingRecipient::MailParameterBinary *this)
{
  *(void *)this = &unk_26EBE6970;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6970;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdRoutingRecipient::MailParameterBinary::getType(WrdRoutingRecipient::MailParameterBinary *this)
{
  return 2;
}

void *std::vector<WrdRoutingRecipient::MailParameter *,ChAllocator<WrdRoutingRecipient::MailParameter *>>::__assign_with_size[abi:ne180100]<WrdRoutingRecipient::MailParameter **,WrdRoutingRecipient::MailParameter **>(void *result, char *__src, char *a3, unsigned int a4)
{
  unint64_t v6 = __src;
  unsigned int v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  unint64_t v8 = result[2];
  unint64_t v10 = (char *)*result;
  if (((v8 - *result) >> 3) >= a4)
  {
    unint64_t v19 = (void **)(result + 1);
    uint64_t v20 = (char *)result[1];
    unint64_t v21 = (unint64_t)(v20 - v10) >> 3;
    if (v21 >= a4)
    {
      size_t v18 = a3 - __src;
      if (a3 != __src) {
        uint64_t result = memmove((void *)*result, __src, v18);
      }
    }
    else
    {
      uint64_t v22 = &__src[8 * v21];
      if (((unint64_t)(v20 - v10) >> 3))
      {
        uint64_t result = memmove((void *)*result, __src, 8 * ((unint64_t)(v20 - v10) >> 3));
        uint64_t v20 = (char *)*v19;
      }
      unint64_t v10 = v20;
      unsigned int v23 = v20;
      if (v22 != a3)
      {
        unsigned int v23 = v20;
        uint64_t v24 = v20;
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 += 8;
          *(void *)uint64_t v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v22 != a3);
      }
      size_t v18 = v23 - v20;
    }
  }
  else
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      unint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    unint64_t v11 = v8 >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v9, v13);
    unint64_t v10 = (char *)result;
    *unsigned int v7 = result;
    v7[1] = result;
    unsigned __int16 v7[2] = &result[v14];
    unsigned int v15 = (char *)result;
    if (v6 != a3)
    {
      unsigned int v15 = (char *)result;
      uint64_t v16 = result;
      do
      {
        uint64_t v17 = *(void *)v6;
        v6 += 8;
        *v16++ = v17;
        v15 += 8;
      }
      while (v6 != a3);
    }
    size_t v18 = v15 - (char *)result;
    unint64_t v19 = (void **)(v7 + 1);
  }
  char *v19 = &v10[v18];
  return result;
}

void *WrdRoutingSlip::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[15];
  if (((this[16] - v2) & 0x7FFFFFFF8) != 0)
  {
    unsigned __int16 v3 = 0;
    do
    {
      uint64_t v4 = v3;
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[15];
      }
      *(void *)(v2 + 8 * v4) = 0;
      unsigned __int16 v3 = v4 + 1;
      uint64_t v2 = v1[15];
    }
    while (((unint64_t)(v1[16] - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  v1[16] = v2;
  return this;
}

void WrdRoutingSlip::append(WrdRoutingSlip *this, WrdRoutingRecipient *a2)
{
  unint64_t v6 = *((void *)this + 17);
  uint64_t v4 = (char *)this + 136;
  unint64_t v5 = v6;
  unsigned int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 15);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    size_t v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    unint64_t v8 = v17 + 8;
    uint64_t v20 = (char *)*((void *)this + 15);
    unint64_t v19 = (char *)*((void *)this + 16);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*((void *)this + 15);
    }
    *((void *)this + 15) = v17;
    *((void *)this + 16) = v8;
    *((void *)this + 17) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  *((void *)this + 16) = v8;
}

void *WrdSectionProperties::clone(WrdSectionProperties *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
  unint64_t v8 = operator new(0x148uLL);
  WrdSectionProperties::WrdSectionProperties((uint64_t)v8, v2, v3, v4, v5, v6, v7);
  WrdSectionProperties::operator=((uint64_t)v8, (uint64_t)this);
  return v8;
}

void sub_238E4D2A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdCharacterProperties::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_238E4D344()
{
  if (v0) {
    JUMPOUT(0x238E4D34CLL);
  }
  JUMPOUT(0x238E4D2D4);
}

void sub_238E4D37C()
{
  if (v0) {
    JUMPOUT(0x238E4D384);
  }
  JUMPOUT(0x238E4D2D8);
}

void sub_238E4D3B4()
{
  if (v0) {
    JUMPOUT(0x238E4D3BCLL);
  }
  JUMPOUT(0x238E4D2DCLL);
}

void sub_238E4D3EC()
{
  if (v0) {
    JUMPOUT(0x238E4D3F4);
  }
  JUMPOUT(0x238E4D2E0);
}

void sub_238E4D424()
{
  if (!v0) {
    JUMPOUT(0x238E4D30CLL);
  }
  JUMPOUT(0x238E4D2E4);
}

uint64_t WrdSectionProperties::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  WrdBorder::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdBorder::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  WrdBorder::operator=(*(void *)(a1 + 40), *(void *)(a2 + 40));
  WrdBorder::operator=(*(void *)(a1 + 48), *(void *)(a2 + 48));
  WrdDateTime::operator=(*(void *)(a1 + 56), *(void *)(a2 + 56));
  WrdOutlineListData::operator=(*(void *)(a1 + 64), *(void *)(a2 + 64));
  unsigned int v4 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v5 = (uint64_t *)(a2 + 176);
  uint64_t v6 = (uint64_t *)(a2 + 200);
  do
  {
    uint64_t v7 = *v5;
    if (!*v5) {
      goto LABEL_20;
    }
    unint64_t v8 = (uint64_t *)*v5;
    while (1)
    {
      unsigned int v9 = *((_DWORD *)v8 + 7);
      if (v9 <= v4) {
        break;
      }
LABEL_7:
      unint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_20;
      }
    }
    if (v9 < v4)
    {
      ++v8;
      goto LABEL_7;
    }
    uint64_t v10 = a2 + 176;
    do
    {
      unsigned int v11 = *(_DWORD *)(v7 + 28);
      BOOL v12 = v11 >= v4;
      if (v11 >= v4) {
        unint64_t v13 = (uint64_t *)v7;
      }
      else {
        unint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if ((uint64_t *)v10 == v5 || *(_DWORD *)(v10 + 28) > v4) {
      goto LABEL_40;
    }
    int v14 = *(_DWORD *)(v10 + 32);
    unsigned int v25 = v4;
    uint64_t v26 = &v25;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 168), &v25, (uint64_t)&std::piecewise_construct, &v26)+ 8) = v14;
LABEL_20:
    uint64_t v15 = *v6;
    if (!*v6) {
      goto LABEL_38;
    }
    uint64_t v16 = (uint64_t *)*v6;
    while (2)
    {
      unsigned int v17 = *((_DWORD *)v16 + 7);
      if (v17 > v4)
      {
LABEL_25:
        uint64_t v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_38;
        }
        continue;
      }
      break;
    }
    if (v17 < v4)
    {
      ++v16;
      goto LABEL_25;
    }
    uint64_t v18 = a2 + 200;
    do
    {
      unsigned int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 >= v4;
      if (v19 >= v4) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if ((uint64_t *)v18 == v6 || *(_DWORD *)(v18 + 28) > v4)
    {
LABEL_40:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1004;
    }
    int v22 = *(_DWORD *)(v18 + 32);
    unsigned int v25 = v4;
    uint64_t v26 = &v25;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 192), &v25, (uint64_t)&std::piecewise_construct, &v26)+ 8) = v22;
LABEL_38:
    ++v4;
  }
  while (v4 != 89);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_WORD *)(a1 + 236) = *(_WORD *)(a2 + 236);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_DWORD *)(a1 + 246) = *(_DWORD *)(a2 + 246);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 252);
  *(void *)(a1 + 268) = *(void *)(a2 + 268);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  OcBinaryData::operator=((OcBinaryData *)(a1 + 280), a2 + 280);
  return a1;
}

void non-virtual thunk to'WrdSectionProperties::~WrdSectionProperties(WrdSectionProperties *this)
{
}

{
  uint64_t vars8;

  WrdSectionProperties::~WrdSectionProperties((WrdSectionProperties *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdSectionTextRun::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  WrdSectionProperties::operator=(*(void *)(a1 + 24), *(void *)(a2 + 24));
  WrdSectionProperties::operator=(*(void *)(a1 + 32), *(void *)(a2 + 32));
  return a1;
}

void *WrdSectionTextRun::clone(WrdSectionTextRun *this)
{
  uint64_t v2 = (*(uint64_t (**)(WrdSectionProperties *))(*(void *)this->var4 + 24))(this->var4);
  uint64_t v3 = (*(uint64_t (**)(WrdSectionProperties *))(*(void *)this->var5 + 24))(this->var5);
  unsigned int v4 = operator new(0x28uLL);
  WrdTextRun::WrdTextRun((uint64_t)v4, this->var1, this->var2);
  void *v4 = &unk_26EBE6A90;
  v4[3] = v2;
  v4[4] = v3;
  WrdSectionTextRun::operator=((uint64_t)v4, (uint64_t)this);
  return v4;
}

void sub_238E4D81C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double WrdStory::clone(WrdStory *this)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE6B10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
  double result = *((double *)this + 3);
  *((double *)v2 + 3) = result;
  v2[32] = *((unsigned char *)this + 32);
  return result;
}

uint64_t WrdStoryTable::operator=(uint64_t a1, uint64_t a2)
{
  WrdBookmarkTable::clear((void *)a1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (((*(void *)(a2 + 24) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unsigned int v9 = *(uint64_t **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 32, v15);
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        unsigned int v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        uint64_t v10 = v19 + 1;
        uint64_t v21 = *(char **)(a1 + 16);
        BOOL v20 = *(char **)(a1 + 24);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unsigned int v19 = v22;
          }
          while (v20 != v21);
          BOOL v20 = *(char **)(a1 + 16);
        }
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unsigned int v9 = v6;
        uint64_t v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 16);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 24) - v4) >> 3));
  }
  return a1;
}

void sub_238E4DA88(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdStoryTable::clone(WrdStoryTable *this)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EBE6B50;
  v2[2] = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  WrdStoryTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4DB08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WrdStringTable::operator=(void *a1, uint64_t a2)
{
  WrdStringTable::cleanup(a1);
  if (((*(void *)(a2 + 16) - *(void *)(a2 + 8)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v5);
      uint64_t v6 = *(const CsString **)(*(void *)(a2 + 8) + 8 * v4);
      v5->unsigned int var2 = 0;
      bzero(v5->var1, 2 * v5->var3);
      CsString::append(v5, v6);
      unint64_t v8 = (CsString **)a1[2];
      unint64_t v7 = a1[3];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = a1[1];
        unint64_t v11 = (unint64_t)v8 - v10;
        unint64_t v12 = (v7 - v10) >> 3;
        unsigned int v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1) {
          unsigned int v13 = (v11 >> 3) + 1;
        }
        if (v12 >= 0x7FFFFFFF) {
          unint64_t v14 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v14);
          uint64_t v17 = v16;
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v17 = 0;
        }
        uint64_t v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
        char *v18 = v5;
        unsigned int v9 = v18 + 1;
        BOOL v20 = (char *)a1[1];
        unsigned int v19 = (char *)a1[2];
        if (v19 != v20)
        {
          do
          {
            uint64_t v21 = (CsString *)*((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v18 = v21;
          }
          while (v19 != v20);
          unsigned int v19 = (char *)a1[1];
        }
        a1[1] = v18;
        a1[2] = v9;
        a1[3] = &v15[8 * v17];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unint64_t v8 = v5;
        unsigned int v9 = v8 + 1;
      }
      a1[2] = v9;
      ++v4;
    }
    while (v4 < ((*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  return a1;
}

void sub_238E4DC98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WrdStringTable::clone(WrdStringTable *this)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26EBE6B90;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  WrdStringTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E4DD44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_DWORD *WrdStringTypedTable::clone(WrdStringTypedTable *this)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  uint64_t v3 = operator new(0x18uLL);
  int v4 = *((_DWORD *)this + 2);
  *(void *)uint64_t v3 = &unk_26EBE6BD0;
  v3[2] = v4;
  *((void *)v3 + 2) = v2;
  v3[2] = *((_DWORD *)this + 2);
  WrdStringTable::operator=(v2, *((void *)this + 2));
  return v3;
}

void sub_238E4DE94(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdStringWithDataTable::StringData::operator=(uint64_t a1, uint64_t a2)
{
  int v4 = (const CsString *)(a2 + 8);
  unint64_t v5 = (CsString *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append(v5, v4);
  size_t v6 = *(unsigned __int16 *)(a2 + 40);
  *(_WORD *)(a1 + 40) = v6;
  if (v6)
  {
    unint64_t v7 = operator new[](v6);
    *(void *)(a1 + 32) = v7;
    memcpy(v7, *(const void **)(a2 + 32), *(unsigned __int16 *)(a1 + 40));
  }
  return a1;
}

_DWORD *WrdStringWithDataTable::clone(WrdStringWithDataTable *this)
{
  uint64_t v2 = operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EBE6C10;
  v2[2] = 0;
  *((void *)v2 + 2) = 0;
  WrdStringWithDataTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4DFFC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdStringWithDataTable::operator=(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      WrdStringWithDataTable::StringData::operator=(*(void *)(a1 + 16) + v5, *(void *)(a2 + 16) + v5);
      ++v6;
      v5 += 48;
    }
    while (v6 < *(unsigned __int16 *)(a1 + 8));
  }
  return a1;
}

_DWORD *WrdStringWithDataTypedTable::clone(WrdStringWithDataTypedTable *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  int v3 = operator new(0x18uLL);
  int v4 = *((_DWORD *)this + 2);
  *(void *)int v3 = &unk_26EBE6C80;
  v3[2] = v4;
  *((void *)v3 + 2) = v2;
  v3[2] = *((_DWORD *)this + 2);
  WrdStringWithDataTable::operator=(v2, *((void *)this + 2));
  return v3;
}

void sub_238E4E188(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WrdStyle::getParaPropsReference(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 152) != 3 || (uint64_t v2 = *(uint64_t **)(a1 + 88)) == 0)
  {
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  unsigned int v6 = a2;
  unint64_t v7 = &v6;
  return std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v6, (uint64_t)&std::piecewise_construct, &v7)[5];
}

uint64_t **WrdStyle::takeParaProps(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v5 = (uint64_t **)(a1 + 80);
  for (uint64_t i = *(uint64_t **)(a1 + 88); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v7 = *((_DWORD *)i + 8);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        unsigned int v11 = a2;
        unint64_t v12 = &v11;
        unint64_t v8 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v11, (uint64_t)&std::piecewise_construct, &v12)[5];
        if (v8) {
          (*(void (**)(uint64_t *))(*v8 + 8))(v8);
        }
        unsigned int v11 = a2;
        unint64_t v12 = &v11;
        std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)[5] = 0;
        break;
      }
      ++i;
    }
  }
  unsigned int v11 = a2;
  unint64_t v12 = &v11;
  double result = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
  result[5] = a3;
  return result;
}

void *WrdStyleSheet::clone(WrdStyleSheet *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  unsigned int v3 = operator new(0x170uLL);
  int v4 = v3;
  void *v3 = &unk_26EBE6D00;
  v3[1] = 0;
  v3[2] = v2;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  for (uint64_t i = 48; i != 360; i += 2)
    *((unsigned char *)v3 + i) |= 1u;
  *((_WORD *)v3 + 180) = 0;
  WrdStyleSheet::operator=((WrdStyleSheet *)v3, (uint64_t)this);
  return v4;
}

void sub_238E4E4D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdStyleSheet::addStyle(WrdStyleSheet *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  unint64_t v3 = *((void *)this + 5);
  int v4 = (uint64_t *)*((void *)this + 4);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *((void *)this + 3);
    unint64_t v7 = (unint64_t)v4 - v6;
    unint64_t v8 = (v3 - v6) >> 3;
    unsigned int v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1) {
      unsigned int v9 = (v7 >> 3) + 1;
    }
    if (v8 >= 0x7FFFFFFF) {
      unint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      unsigned int v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v10);
      uint64_t v13 = v12;
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v13 = 0;
    }
    unint64_t v14 = (uint64_t *)&v11[v7 & 0x7FFFFFFF8];
    unint64_t v15 = &v11[8 * v13];
    uint64_t *v14 = v2;
    uint64_t v5 = v14 + 1;
    uint64_t v17 = (char *)*((void *)this + 3);
    unsigned int v16 = (char *)*((void *)this + 4);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--unint64_t v14 = v18;
      }
      while (v16 != v17);
      unsigned int v16 = (char *)*((void *)this + 3);
    }
    *((void *)this + 3) = v14;
    *((void *)this + 4) = v5;
    *((void *)this + 5) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    uint64_t *v4 = v2;
    uint64_t v5 = v4 + 1;
  }
  *((void *)this + 4) = v5;
  return *(void *)(*((void *)this + 3)
                   + 8 * ((((unint64_t)v5 - *((void *)this + 3)) >> 3) - 1));
}

void sub_238E4E630(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdTableCellDescriptor::getDiagonalDownBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 0x20;
  return *((void *)v1 + 6);
}

uint64_t WrdTableCellDescriptor::getDiagonalUpBorderReference(WrdTableCellDescriptor *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v1 = (char *)this + 8;
  *(_DWORD *)uint64_t v1 = v2 | 0x40;
  return *((void *)v1 + 7);
}

int *WrdTableCellDescriptor::setLeftSpacingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  double result = (int *)(a1 + 8);
  int *result = v3 | 0x40000;
  result[22] = a2;
  return result;
}

int *WrdTableCellDescriptor::setTopSpacingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  double result = (int *)(a1 + 8);
  int *result = v3 | 0x80000;
  result[23] = a2;
  return result;
}

int *WrdTableCellDescriptor::setBottomSpacingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  double result = (int *)(a1 + 8);
  int *result = v3 | 0x100000;
  result[24] = a2;
  return result;
}

int *WrdTableCellDescriptor::setRightSpacingUnit(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  double result = (int *)(a1 + 8);
  int *result = v3 | 0x200000;
  result[25] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setLeftSpacing(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x8000000;
  *(_WORD *)(result + 114) = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setTopSpacing(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x10000000;
  *(_WORD *)(result + 116) = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setBottomSpacing(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x20000000;
  *(_WORD *)(result + 118) = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setRightSpacing(WrdTableCellDescriptor *this, __int16 a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = (uint64_t)this + 8;
  *(_DWORD *)uint64_t result = v3 | 0x40000000;
  *(_WORD *)(result + 120) = a2;
  return result;
}

void WrdTableProperties::WrdTableProperties(WrdTableProperties *this, WrdTableAutoformatLookSpecifier *a2, WrdTableCellDescriptor *a3, WrdShading *a4, WrdBorder *a5, WrdBorder *a6, WrdBorder *a7, WrdBorder *a8, long long a9, long long a10, WrdDateTime *a11)
{
  *(void *)this = &unk_26EBE6E00;
  *((void *)this + 1) = &unk_26EBE6E30;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 2XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + 8) = a6;
  *((void *)this + 9) = a7;
  *((void *)this + 10) = a8;
  *(_OWORD *)((char *)this + 88) = a9;
  *(_OWORD *)((char *)this + 104) = a10;
  *((void *)this + 15) = a11;
  WrdTableProperties::reset(this);
}

{
  WrdTableProperties::WrdTableProperties(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_238E4E7BC(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[34];
  if (v4)
  {
    v1[35] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[32] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WrdTableProperties::~WrdTableProperties(WrdTableProperties *this)
{
}

{
  uint64_t vars8;

  WrdTableProperties::~WrdTableProperties((WrdTableProperties *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

WrdTableProperties *WrdTableProperties::setRevisionMark(WrdTableProperties *this, char a2)
{
  *((void *)this + 2) |= 1uLL;
  *((unsigned char *)this + 334) = *((unsigned char *)this + 334) & 0xDF | (32 * (a2 & 1));
  return this;
}

WrdTableProperties *WrdTableProperties::setAuthorIDForRevision(WrdTableProperties *this, __int16 a2)
{
  *((void *)this + 2) |= 2uLL;
  *((_WORD *)this + 166) = a2;
  return this;
}

uint64_t WrdTableProperties::getDttmRevisionMarkReference(WrdTableProperties *this)
{
  *((void *)this + 2) |= 4uLL;
  return *((void *)this + 15);
}

uint64_t WrdTableProperties::setDefaultCellTopCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x800000uLL;
  *(_DWORD *)(result + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultCellLeftCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x1000000uLL;
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultCellBottomCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x2000000uLL;
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultCellRightCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000000uLL;
  *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterTopCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x80000000uLL;
  *(_DWORD *)(result + 196) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterLeftCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x100000000uLL;
  *(_DWORD *)(result + 200) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterBottomCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x200000000uLL;
  *(_DWORD *)(result + 204) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterRightCellPaddingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x400000000uLL;
  *(_DWORD *)(result + 208) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterTopCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x800000000uLL;
  *(_DWORD *)(result + 212) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterLeftCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x1000000000uLL;
  *(_DWORD *)(result + 216) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterBottomCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x2000000000uLL;
  *(_DWORD *)(result + 220) = a2;
  return result;
}

uint64_t WrdTableProperties::setDefaultTableOuterRightCellSpacingUnit(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x4000000000uLL;
  *(_DWORD *)(result + 224) = a2;
  return result;
}

uint64_t WrdTableProperties::setVerticalCellAlignment(uint64_t result, int a2)
{
  *(void *)(result + 16) |= 0x20000000000uLL;
  *(_DWORD *)(result + 236) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setTopDistanceFromText(WrdTableProperties *this, int a2)
{
  *((void *)this + 2) |= 0x1000000000000uLL;
  *((_DWORD *)this + 79) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setKeepWithFollowing(WrdTableProperties *this, char a2)
{
  *((void *)this + 2) |= 0x20000000000000uLL;
  *((unsigned char *)this + 334) = *((unsigned char *)this + 334) & 0xFD | (2 * (a2 & 1));
  return this;
}

WrdTableProperties *WrdTableProperties::setNeverBeenAutoFit(WrdTableProperties *this, char a2)
{
  *((void *)this + 2) |= 0x40000000000000uLL;
  *((unsigned char *)this + 334) = *((unsigned char *)this + 334) & 0xFB | (4 * (a2 & 1));
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultCellTopCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 8u;
  *((_WORD *)this + 177) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultCellLeftCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x10u;
  *((_WORD *)this + 178) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultCellBottomCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x20u;
  *((_WORD *)this + 179) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultCellRightCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x40u;
  *((_WORD *)this + 180) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterTopCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x800u;
  *((_WORD *)this + 185) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterLeftCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x1000u;
  *((_WORD *)this + 186) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterBottomCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x2000u;
  *((_WORD *)this + 187) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterRightCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x4000u;
  *((_WORD *)this + 188) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterTopCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x8000u;
  *((_WORD *)this + 189) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterLeftCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x10000u;
  *((_WORD *)this + 190) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterBottomCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x20000u;
  *((_WORD *)this + 191) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableOuterRightCellSpacing(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x40000u;
  *((_WORD *)this + 192) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setBiDirectional(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x200000u;
  *((unsigned char *)this + 388) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setRightToLeft(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x400000u;
  *((unsigned char *)this + 389) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDoNotWrapText(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x1000000u;
  *((unsigned char *)this + 391) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setNumberOfRowsInRowBand(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x2000000u;
  *((unsigned char *)this + 392) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setNumberOfColumnsInColumnBand(WrdTableProperties *this, char a2)
{
  *((_DWORD *)this + 6) |= 0x4000000u;
  *((unsigned char *)this + 393) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setTableRevisionSaveID(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x20000000u;
  *((_WORD *)this + 165) = a2;
  return this;
}

void WrdTableProperties::deleteCells(WrdTableProperties *this, unsigned int a2, int a3)
{
  int v4 = (char *)this + 248;
  uint64_t v3 = *((void *)this + 31);
  *((void *)this + 2) |= 0x2000000000000000uLL;
  __int16 v5 = ((unint64_t)(*((void *)this + 32) - v3) >> 1) + ~(_WORD)a2;
  if (a3 <= v5) {
    __int16 v5 = a3;
  }
  __int16 v6 = v5;
  if (v5 >= 1)
  {
    unsigned int v7 = a2;
    int v9 = *((__int16 *)this + 172);
    __int16 v10 = v9 - a3;
    if (v9 > (int)a2)
    {
      __int16 v11 = *(_WORD *)(v3 + 2 * a2) - *(_WORD *)(v3 + 2 * (__int16)(v6 + a2));
      int v12 = (__int16)(v6 + a2);
      do
      {
        if ((int)v7 < v12)
        {
          uint64_t v13 = *((void *)this + 34);
          uint64_t v14 = *(void *)(v13 + 8 * v7);
          if (v14)
          {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            uint64_t v13 = *((void *)this + 34);
            LOWORD(v9) = *((_WORD *)this + 172);
          }
          *(void *)(v13 + 8 * v7) = 0;
        }
        unsigned int v15 = (__int16)(v6 + v7);
        if ((int)v15 >= (__int16)v9)
        {
          ++v7;
        }
        else
        {
          uint64_t v16 = *((void *)this + 31);
          __int16 v17 = *(_WORD *)(v16 + 2 * (v15 + 1));
          *(void *)(*((void *)this + 34) + 8 * v7++) = *(void *)(*((void *)this + 34) + 8 * v15);
          *(_WORD *)(v16 + 2 * v7) = v11 + v17;
          LOWORD(v9) = *((_WORD *)this + 172);
        }
      }
      while ((int)v7 < (__int16)v9);
    }
    *((_WORD *)this + 172) = v10;
    std::vector<short,ChAllocator<short>>::resize((uint64_t)v4, v10 + 1);
    unsigned int v18 = *((__int16 *)this + 172);
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 272, v18);
  }
}

void std::vector<short,ChAllocator<short>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 1;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<short,ChAllocator<short>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
  }
}

void std::vector<short,ChAllocator<short>>::__append(char **a1, unsigned int a2)
{
  __int16 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  __int16 v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 1) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = v7 - *a1;
    unsigned int v10 = (v9 >> 1) + a2;
    unint64_t v11 = (unint64_t)(v5 - *a1) >> 1;
    if (2 * (int)v11 > v10) {
      unsigned int v10 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v12);
      uint64_t v15 = v14;
      unint64_t v8 = *a1;
      unsigned int v7 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v13[v9 & 0x1FFFFFFFELL];
    __int16 v17 = &v13[2 * v15];
    bzero(v16, 2 * a2);
    unsigned int v18 = &v16[2 * a2];
    while (v7 != v8)
    {
      __int16 v19 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v16 - 1) = v19;
      v16 -= 2;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v17;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *WrdText::clone(WrdText *this)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  int v3 = *((_DWORD *)this + 14);
  uint64_t v4 = *(void *)((char *)this + 20);
  *(void *)uint64_t v2 = &unk_26EBE6E88;
  OcText::OcText((OcText *)(v2 + 8));
  *((_DWORD *)v2 + 14) = v3;
  *(void *)(v2 + 20) = v4;
  *((_DWORD *)v2 + 14) = *((_DWORD *)this + 14);
  OcText::operator=(v5, (uint64_t)this + 8);
  return v2;
}

void sub_238E4EEA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdText::~WrdText(WrdText *this)
{
  *(void *)this = &unk_26EBE6E88;
  OcText::~OcText((OcText *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE6E88;
  OcText::~OcText((OcText *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

void WrdTextRun::WrdTextRun(WrdTextRun *this, const WrdTextRun *a2)
{
  this->var0 = (void **)&unk_26EBE4AC0;
  *(void *)&this->signed __int16 var1 = *(void *)&a2->var1;
  this->int var3 = a2->var3;
}

void WrdUserRestriction::WrdUserRestriction(WrdUserRestriction *this)
{
  *(void *)this = &unk_26EBE6F00;
  *((_WORD *)this + 4) = -1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
}

void WrdUserRestriction::~WrdUserRestriction(WrdUserRestriction *this)
{
}

double WrdUserRestriction::clone(WrdUserRestriction *this)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EBE6F00;
  *((_WORD *)v2 + 4) = -1;
  *((_DWORD *)v2 + 3) = 0;
  *((_DWORD *)v2 + 4) = 0;
  *((_WORD *)v2 + 4) = *((_WORD *)this + 4);
  double result = *(double *)((char *)this + 12);
  *(double *)(v2 + 12) = result;
  return result;
}

void WrdUserRestrictionMap::WrdUserRestrictionMap(WrdUserRestrictionMap *this)
{
  *(void *)this = &unk_26EBE6F40;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void WrdUserRestrictionMap::~WrdUserRestrictionMap(WrdUserRestrictionMap *this)
{
  *(void *)this = &unk_26EBE6F40;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26EBE6F40;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

void WrdUserRestrictionTable::WrdUserRestrictionTable(WrdUserRestrictionTable *this)
{
  *(void *)this = &unk_26EBE6F78;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
}

uint64_t WrdUserRestrictionTable::operator=(uint64_t a1, uint64_t a2)
{
  WrdUserRestrictionTable::clear((void *)a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unint64_t v9 = *(uint64_t **)(a1 + 16);
      unint64_t v8 = *(void *)(a1 + 24);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *(void *)(a1 + 8);
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 24, v15);
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        __int16 v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        unsigned int v10 = v19 + 1;
        uint64_t v21 = *(char **)(a1 + 8);
        BOOL v20 = *(char **)(a1 + 16);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--__int16 v19 = v22;
          }
          while (v20 != v21);
          BOOL v20 = *(char **)(a1 + 8);
        }
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v6;
        unsigned int v10 = v9 + 1;
      }
      *(void *)(a1 + 16) = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void sub_238E4F32C(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

void WrdUserRestrictionTable::~WrdUserRestrictionTable(WrdUserRestrictionTable *this)
{
  *(void *)this = &unk_26EBE6F78;
  WrdUserRestrictionTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdUserRestrictionTable::~WrdUserRestrictionTable(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdUserRestrictionTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[1];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  *((_DWORD *)v1 + 8) = 0;
  return this;
}

void *WrdUserRestrictionTable::clone(WrdUserRestrictionTable *this)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26EBE6F78;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  *((_DWORD *)v2 + 8) = 0;
  WrdUserRestrictionTable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4F4BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdVariable::WrdVariable(WrdVariable *this)
{
  *(void *)this = &unk_26EBE6FB8;
  uint64_t v2 = (CsString *)((char *)this + 32);
  CsString::CsString((CsString *)((char *)this + 8));
  CsString::CsString(v2);
  *((_DWORD *)this + 14) = 0;
}

void sub_238E4F554(_Unwind_Exception *a1)
{
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdVariable::~WrdVariable(WrdVariable *this)
{
  *(void *)this = &unk_26EBE6FB8;
  uint64_t v2 = (CsString *)((char *)this + 8);
  *((_DWORD *)this + 6) = 0;
  bzero(*((void **)this + 2), 2 * *((unsigned int *)this + 7));
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 12) = 0;
  bzero(*((void **)this + 5), 2 * *((unsigned int *)this + 13));
  CsString::~CsString((CsString *)((char *)this + 32));
  CsString::~CsString(v2);
}

{
  uint64_t vars8;

  WrdVariable::~WrdVariable(this);
  JUMPOUT(0x23EC997B0);
}

WrdVariable *WrdVariable::clone(WrdVariable *this)
{
  uint64_t v2 = (WrdVariable *)operator new(0x40uLL);
  WrdVariable::WrdVariable(v2);
  WrdVariable::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_238E4F678(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdVariable::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (CsString *)(a1 + 8);
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  bzero(*(void **)(a1 + 40), 2 * *(unsigned int *)(a1 + 52));
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append(v4, (const CsString *)(a2 + 8));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 48) = 0;
  bzero(*(void **)(a1 + 40), 2 * *(unsigned int *)(a1 + 52));
  CsString::append((CsString *)(a1 + 32), (const CsString *)(a2 + 32));
  return a1;
}

void WrdVariableTable::WrdVariableTable(WrdVariableTable *this)
{
  *(void *)this = &unk_26EBE6FF8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void WrdVariableTable::~WrdVariableTable(WrdVariableTable *this)
{
  *(void *)this = &unk_26EBE6FF8;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdVariableTable::~WrdVariableTable(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdVariableTable::clone(WrdVariableTable *this)
{
  uint64_t v1 = operator new(0x20uLL);
  void *v1 = &unk_26EBE6FF8;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0;
  WrdAnnotationDateTimeTable::clear(v1);
  return v1;
}

void WrdVersionInfo::WrdVersionInfo(WrdVersionInfo *this)
{
  *(void *)this = &unk_26EBE7038;
  WrdDateTime::WrdDateTime((WrdDateTime *)((char *)this + 8));
  *((_DWORD *)this + 8) = 0;
  CsString::CsString((CsString *)((char *)this + 40));
}

void WrdVersionInfo::~WrdVersionInfo(WrdVersionInfo *this)
{
  *(void *)this = &unk_26EBE7038;
  CsString::~CsString((CsString *)((char *)this + 40));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE7038;
  CsString::~CsString((CsString *)((char *)this + 40));
  JUMPOUT(0x23EC997B0);
}

void WrdVersionInfoTable::WrdVersionInfoTable(WrdVersionInfoTable *this)
{
  *(void *)this = &unk_26EBE7070;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void WrdVersionInfoTable::~WrdVersionInfoTable(WrdVersionInfoTable *this)
{
  *(void *)this = &unk_26EBE7070;
  WrdAnnotationDateTimeTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdVersionInfoTable::~WrdVersionInfoTable(this);
  JUMPOUT(0x23EC997B0);
}

void WrdWorkBook::WrdWorkBook(WrdWorkBook *this)
{
  *((_DWORD *)this + 5) = 0;
  *(void *)this = &unk_26EBE70A8;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

void WrdWorkBook::~WrdWorkBook(WrdWorkBook *this)
{
}

double WrdWorkBook::clone(WrdWorkBook *this)
{
  uint64_t v2 = (double *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EBE70A8;
  double result = *((double *)this + 1);
  v2[1] = result;
  *((_WORD *)v2 + 8) = *((_WORD *)this + 8);
  *((_DWORD *)v2 + 5) = *((_DWORD *)this + 5);
  return result;
}

void WrdWorkBookTable::WrdWorkBookTable(WrdWorkBookTable *this)
{
  *(void *)this = &unk_26EBE70E8;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
}

void *WrdWorkBookTable::operator=(void *a1, uint64_t a2)
{
  WrdWorkBookTable::clear(a1);
  uint64_t v4 = *(void *)(a2 + 40);
  if (((*(void *)(a2 + 48) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
      uint64_t v7 = v6;
      unint64_t v9 = (uint64_t *)a1[6];
      unint64_t v8 = a1[7];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[5];
        unint64_t v12 = (unint64_t)v9 - v11;
        unint64_t v13 = (v8 - v11) >> 3;
        unsigned int v14 = 2 * v13;
        if (2 * (int)v13 <= (v12 >> 3) + 1) {
          unsigned int v14 = (v12 >> 3) + 1;
        }
        if (v13 >= 0x7FFFFFFF) {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 7), v15);
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v18 = 0;
        }
        __int16 v19 = (uint64_t *)&v16[v12 & 0x7FFFFFFF8];
        uint64_t *v19 = v7;
        unsigned int v10 = v19 + 1;
        uint64_t v21 = (char *)a1[5];
        BOOL v20 = (char *)a1[6];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--__int16 v19 = v22;
          }
          while (v20 != v21);
          BOOL v20 = (char *)a1[5];
        }
        a1[5] = v19;
        a1[6] = v10;
        a1[7] = &v16[8 * v18];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v6;
        unsigned int v10 = v9 + 1;
      }
      a1[6] = v10;
      ++v5;
      uint64_t v4 = *(void *)(a2 + 40);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 48) - v4) >> 3));
  }
  return a1;
}

void sub_238E4FC2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WrdWorkBookTable::clone(WrdWorkBookTable *this)
{
  uint64_t v2 = operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26EBE70E8;
  v2[2] = 0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  WrdWorkBookTable::operator=(v2, (uint64_t)this);
  return v2;
}

void sub_238E4FCAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WrdWorkBookTable::clear(void *this)
{
  uint64_t v1 = this;
  this[3] = this[2];
  uint64_t v2 = this[5];
  if (((this[6] - v2) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    do
    {
      this = *(void **)(v2 + 8 * v3);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v2 = v1[5];
      }
      *(void *)(v2 + 8 * v3++) = 0;
      uint64_t v2 = v1[5];
    }
    while (v3 < ((unint64_t)(v1[6] - v2) >> 3));
  }
  v1[6] = v2;
  return this;
}

void WrdWorkBookTable::~WrdWorkBookTable(WrdWorkBookTable *this)
{
  *(void *)this = &unk_26EBE70E8;
  WrdWorkBookTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  WrdWorkBookTable::~WrdWorkBookTable(this);
  JUMPOUT(0x23EC997B0);
}

void WrdWorkBookTable::setCP(WrdWorkBookTable *this, unsigned int a2, int a3)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = (uint64_t *)((char *)this + 16);
  if (((unint64_t)(*((void *)this + 3) - v5) >> 2) <= a2)
  {
    std::vector<int,ChAllocator<int>>::resize((uint64_t)this + 16, a2 + 1);
    uint64_t v5 = *v6;
  }
  *(_DWORD *)(v5 + 4 * a2) = a3;
}

void WrdWorkBookTable::append(WrdWorkBookTable *this, WrdWorkBook *a2)
{
  unint64_t v6 = *((void *)this + 7);
  uint64_t v4 = (char *)this + 56;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 5);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    uint64_t v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    unint64_t v8 = v17 + 8;
    BOOL v20 = (char *)*((void *)this + 5);
    __int16 v19 = (char *)*((void *)this + 6);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      __int16 v19 = (char *)*((void *)this + 5);
    }
    *((void *)this + 5) = v17;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  *((void *)this + 6) = v8;
}

void WrdXmlAttribute::WrdXmlAttribute(WrdXmlAttribute *this)
{
  *(void *)this = &unk_26EBE7128;
  *((void *)this + 1) = 0;
  CsString::CsString((CsString *)((char *)this + 16));
}

void WrdXmlAttribute::~WrdXmlAttribute(WrdXmlAttribute *this)
{
  *(void *)this = &unk_26EBE7128;
  CsString::~CsString((CsString *)((char *)this + 16));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE7128;
  CsString::~CsString((CsString *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void WrdXmlElement::WrdXmlElement(WrdXmlElement *this)
{
  *(void *)this = &unk_26EBE7160;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0x200000000;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
}

void WrdXmlElement::~WrdXmlElement(WrdXmlElement *this)
{
  *(void *)this = &unk_26EBE7160;
  WrdXmlElement::release(this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdXmlElement::~WrdXmlElement(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdXmlElement::release(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[4];
  unint64_t v3 = this[5] - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    do
    {
      uint64_t v6 = v1[4];
      this = *(void **)(v6 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = v1[4];
      }
      *(void *)(v6 + 8 * v4++) = 0;
    }
    while (v5 != v4);
    uint64_t v2 = v1[4];
  }
  v1[5] = v2;
  return this;
}

uint64_t WrdXmlElement::setDisplayType(uint64_t result, int a2)
{
  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *(_DWORD *)(result + 28) = a2;
  return result;
}

void WrdXmlElement::appendAttribute(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unint64_t v7 = a1[6];
  uint64_t v5 = (uint64_t)(a1 + 6);
  unint64_t v6 = v7;
  unint64_t v8 = *(void **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = a1[4];
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v6 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v5, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v15[v11 & 0x7FFFFFFF8];
    __int16 v19 = &v15[8 * v17];
    *(void *)uint64_t v18 = v2;
    uint64_t v9 = v18 + 8;
    uint64_t v21 = (char *)a1[4];
    BOOL v20 = (char *)a1[5];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      BOOL v20 = (char *)a1[4];
    }
    a1[4] = v18;
    a1[5] = v9;
    a1[6] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v8 = v2;
    uint64_t v9 = v8 + 1;
  }
  a1[5] = v9;
  *a2 = 0;
}

void WrdXmlElementTable::WrdXmlElementTable(WrdXmlElementTable *this)
{
  *(void *)this = &unk_26EBE7198;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void WrdXmlElementTable::~WrdXmlElementTable(WrdXmlElementTable *this)
{
  *(void *)this = &unk_26EBE7198;
  WrdXmlElementTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdXmlElementTable::~WrdXmlElementTable(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdXmlElementTable::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  unint64_t v3 = this[2] - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    do
    {
      uint64_t v6 = v1[1];
      this = *(void **)(v6 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = v1[1];
      }
      *(void *)(v6 + 8 * v4++) = 0;
    }
    while (v5 != v4);
    uint64_t v2 = v1[1];
  }
  v1[2] = v2;
  return this;
}

void WrdXmlElementTable::append(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unint64_t v7 = a1[3];
  uint64_t v5 = (uint64_t)(a1 + 3);
  unint64_t v6 = v7;
  unint64_t v8 = *(void **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = a1[1];
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v6 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v5, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v15[v11 & 0x7FFFFFFF8];
    __int16 v19 = &v15[8 * v17];
    *(void *)uint64_t v18 = v2;
    uint64_t v9 = v18 + 8;
    uint64_t v21 = (char *)a1[1];
    BOOL v20 = (char *)a1[2];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      BOOL v20 = (char *)a1[1];
    }
    a1[1] = v18;
    a1[2] = v9;
    a1[3] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v8 = v2;
    uint64_t v9 = v8 + 1;
  }
  a1[2] = v9;
  *a2 = 0;
}

void WrdXmlSchema::WrdXmlSchema(WrdXmlSchema *this)
{
  *(void *)this = &unk_26EBE71D0;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
}

void WrdXmlSchema::~WrdXmlSchema(WrdXmlSchema *this)
{
  *(void *)this = &unk_26EBE71D0;
  WrdXmlSchema::release(this);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  uint64_t vars8;

  WrdXmlSchema::~WrdXmlSchema(this);
  JUMPOUT(0x23EC997B0);
}

void *WrdXmlSchema::release(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[4];
  unint64_t v3 = this[5] - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    do
    {
      uint64_t v6 = v1[4];
      this = *(void **)(v6 + 8 * v4);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = v1[4];
      }
      *(void *)(v6 + 8 * v4++) = 0;
    }
    while (v5 != v4);
    uint64_t v2 = v1[4];
  }
  v1[5] = v2;
  uint64_t v7 = v1[7];
  unint64_t v8 = v1[8] - v7;
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v8 >> 3);
    do
    {
      uint64_t v11 = v1[7];
      this = *(void **)(v11 + 8 * v9);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v11 = v1[7];
      }
      *(void *)(v11 + 8 * v9++) = 0;
    }
    while (v10 != v9);
    uint64_t v7 = v1[7];
  }
  v1[8] = v7;
  return this;
}

void WrdXmlSchema::appendAttribute(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unint64_t v7 = a1[9];
  uint64_t v5 = (uint64_t)(a1 + 9);
  unint64_t v6 = v7;
  unint64_t v8 = *(void **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = a1[7];
    unint64_t v11 = (unint64_t)v8 - v10;
    unint64_t v12 = (v6 - v10) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v5, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v15[v11 & 0x7FFFFFFF8];
    __int16 v19 = &v15[8 * v17];
    *(void *)uint64_t v18 = v2;
    uint64_t v9 = v18 + 8;
    uint64_t v21 = (char *)a1[7];
    BOOL v20 = (char *)a1[8];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      BOOL v20 = (char *)a1[7];
    }
    a1[7] = v18;
    a1[8] = v9;
    a1[9] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v8 = v2;
    uint64_t v9 = v8 + 1;
  }
  a1[8] = v9;
  *a2 = 0;
}

void WrdXmlSchemaTable::WrdXmlSchemaTable(WrdXmlSchemaTable *this)
{
  *(void *)this = &unk_26EBE7208;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void WrdXmlSchemaTable::~WrdXmlSchemaTable(WrdXmlSchemaTable *this)
{
  *(void *)this = &unk_26EBE7208;
  WrdXmlElementTable::clear(this);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  WrdXmlSchemaTable::~WrdXmlSchemaTable(this);
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdBaseParser::parseBuffer(WrdBaseParser *this, WrdBorder *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 7)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  WrdBaseParser::parseBuffer(this, &a2->var1, a3, a4);
  uint64_t result = CsLeReadSInt32((unsigned int *)a3 + 1);
  a2->var6 = result;
  a2->unsigned int var2 = BYTE1(result);
  a2->var7 = BYTE2(result) & 0x1F;
  *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFC | (result >> 21) & 3;
  return result;
}

void WrdBaseParser::parseBuffer(WrdBaseParser *this, CsColour *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  a2->signed __int16 var1 = *a3;
  a2->unsigned int var2 = a3[1];
  a2->int var3 = a3[2];
  a2->var0 = a3[3] ^ 0xFF;
}

double WrdBaseParser::parseBRC10(WrdBaseParser *this, WrdBorder *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)((char *)a4 - (char *)a3) <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int UInt16 = CsLeReadUInt16(a3);
  int v6 = UInt16 | (UInt16 >> 3);
  if (((v6 | (UInt16 >> 6)) & 7) != 0)
  {
    int v7 = (UInt16 >> 6) & 7;
    int v8 = v6 & 7;
    if (v7 == 1 && !v8)
    {
      int v9 = 1;
LABEL_15:
      a2->unsigned int var2 = v9;
LABEL_26:
      a2->var6 = v9;
      goto LABEL_27;
    }
    if ((UInt16 & 0x3F) == 9 && v7 == 1)
    {
      int v9 = 3;
LABEL_25:
      a2->unsigned int var2 = v9;
      LOBYTE(v9) = 1;
      goto LABEL_26;
    }
    if (v7 == 4 && !v8)
    {
      int v9 = 2;
      goto LABEL_15;
    }
    if (v7 == 2 && !v8)
    {
      int v9 = 2;
      goto LABEL_25;
    }
    if (v7 == 6 && !v8)
    {
      int v9 = 6;
      goto LABEL_25;
    }
    if (v7 == 7 && !v8)
    {
      int v9 = 5;
      goto LABEL_25;
    }
  }
  else
  {
    a2->unsigned int var2 = 0;
  }
LABEL_27:
  *(void *)&double result = 255;
  a2->signed __int16 var1 = (CsColour)255;
  a2->int var3 = 0;
  a2->var7 = (UInt16 >> 9) & 0x1F;
  *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFC | ((UInt16 & 0x4000) != 0);
  return result;
}

uint64_t WrdBaseParser::parseBRC70(WrdBaseParser *this, WrdBorder *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  __int16 SInt16 = CsLeReadSInt16((__int16 *)a3);
  a2->unsigned int var2 = HIBYTE(SInt16);
  switch((char)SInt16)
  {
    case 0:
      unsigned __int8 v7 = 6;
      goto LABEL_12;
    case 1:
      unsigned __int8 v7 = 12;
      goto LABEL_12;
    case 2:
      unsigned __int8 v7 = 17;
      goto LABEL_12;
    case 3:
      unsigned __int8 v7 = 24;
      goto LABEL_12;
    case 4:
      unsigned __int8 v7 = 34;
      goto LABEL_12;
    case 5:
      unsigned __int8 v7 = 48;
LABEL_12:
      a2->var6 = v7;
      break;
    case 6:
      a2->var6 = 1;
      int v8 = 6;
      goto LABEL_15;
    case 7:
      a2->var6 = 1;
      int v8 = 7;
LABEL_15:
      a2->unsigned int var2 = v8;
      break;
    default:
      a2->var6 = 1;
      ChLogFunction("Unknown line width", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdBaseParser.cpp", 144);
      break;
  }
  __int16 v9 = CsLeReadSInt16((__int16 *)a3 + 1);
  char v10 = HIBYTE(v9);
  *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFE | ((v9 & 0x2000) != 0);
  int v11 = v9;
  uint64_t result = WrdProperty::convertWord97ColorEnumToColor(v9, (uint64_t)&a2->var1);
  a2->int var3 = v11;
  a2->var7 = v10 & 0x1F;
  return result;
}

uint64_t WrdBaseParser::parseBRC80(WrdBaseParser *this, WrdBorder *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)((char *)a4 - (char *)a3) <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  unsigned int UInt16 = CsLeReadUInt16(a3);
  unsigned int v7 = CsLeReadUInt16(a3 + 1);
  a2->var6 = UInt16;
  a2->unsigned int var2 = UInt16 >> 8;
  a2->int var3 = v7;
  uint64_t result = WrdProperty::convertWord97ColorEnumToColor(v7, (uint64_t)&a2->var1);
  a2->var7 = BYTE1(v7) & 0x1F;
  *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFC | (v7 >> 13) & 3;
  return result;
}

uint64_t WrdBaseParser::parseBuffer(WrdBaseParser *this, WrdDateTime *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int SInt16 = CsLeReadSInt16((__int16 *)a3);
  a2->unsigned int var2 = SInt16 & 0x3F;
  a2->int var3 = (SInt16 >> 6) & 0x1F;
  a2->var4 = (unsigned __int16)SInt16 >> 11;
  uint64_t result = CsLeReadSInt16((__int16 *)a3 + 1);
  a2->var5 = result & 0xF;
  a2->var6 = (result >> 4) & 0x1FF;
  a2->signed __int16 var1 = (unsigned __int16)result >> 13;
  return result;
}

uint64_t WrdBaseParser::parseBuffer(WrdBaseParser *this, WrdDropCap *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)((char *)a4 - (char *)a3) <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t result = CsLeReadUInt16(a3);
  *((_DWORD *)a2 + 2) = result & 7;
  *((unsigned char *)a2 + 12) = result >> 3;
  return result;
}

uint64_t WrdBaseParser::parseBuffer(WrdBaseParser *this, WrdLineSpaceDescriptor *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *((_WORD *)a2 + 4) = CsLeReadSInt16((__int16 *)a3);
  uint64_t result = CsLeReadUInt16((unsigned __int16 *)a3 + 1);
  *((_WORD *)a2 + 5) = result;
  return result;
}

uint64_t WrdBaseParser::parseBuffer(WrdBaseParser *this, WrdNumberRevisionMarkData *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3) {
    goto LABEL_20;
  }
  if (a3 >= a4) {
    goto LABEL_20;
  }
  int64_t v6 = a4 - a3;
  if ((unint64_t)(a4 - a3) <= 3) {
    goto LABEL_20;
  }
  int v8 = a3 + 8;
  *((unsigned char *)a2 + 66) = *((unsigned char *)a2 + 66) & 0xFE | (*a3 != 0);
  unsigned int SInt16 = (WrdBaseParser *)CsLeReadSInt16((__int16 *)a3 + 1);
  *((_WORD *)a2 + 32) = (_WORD)SInt16;
  WrdBaseParser::parseBuffer(SInt16, *((WrdDateTime **)a2 + 4), a3 + 4, a4);
  if (a4 <= v8) {
    goto LABEL_20;
  }
  if ((unint64_t)(a4 - v8) < 0x12) {
    goto LABEL_20;
  }
  int v10 = 0;
  int v11 = (unsigned int *)(a3 + 10);
  unint64_t v12 = v6 - 19;
  do
  {
    unsigned int v13 = (unsigned __int16)v10;
    WrdNumberRevisionMarkData::setIndexIntoNumberPlaceHolders((uint64_t)a2, (unsigned __int16)v10++, *((unsigned char *)v11 - 2));
    int v11 = (unsigned int *)((char *)v11 + 1);
  }
  while (v13 < 8);
  int v14 = 0;
  do
  {
    unsigned int v15 = (unsigned __int16)v14;
    WrdNumberRevisionMarkData::setNumberFormats((uint64_t)a2, (unsigned __int16)v14++, *((unsigned __int8 *)v11 - 2));
    --v12;
    int v11 = (unsigned int *)((char *)v11 + 1);
  }
  while (v15 < 8);
  if (v11 >= (unsigned int *)a4) {
    goto LABEL_20;
  }
  if (v12 < 0x24) {
    goto LABEL_20;
  }
  int v16 = 0;
  do
  {
    int SInt32 = CsLeReadSInt32(v11);
    unsigned int v18 = (unsigned __int16)v16;
    WrdNumberRevisionMarkData::setNumberValue((uint64_t)a2, (unsigned __int16)v16, SInt32);
    ++v11;
    ++v16;
    v12 -= 4;
  }
  while (v18 < 8);
  uint64_t v19 = WrdNumberRevisionMarkData::s_bMaxNumberOfCharactersForTextString;
  CsString::reserve((CsString *)((char *)a2 + 8), WrdNumberRevisionMarkData::s_bMaxNumberOfCharactersForTextString);
  uint64_t result = (uint64_t)CsString::setCount((CsString *)((char *)a2 + 8), WrdNumberRevisionMarkData::s_bMaxNumberOfCharactersForTextString);
  if (v11 >= (unsigned int *)a4
    || v12 < 2 * (unint64_t)WrdNumberRevisionMarkData::s_bMaxNumberOfCharactersForTextString)
  {
LABEL_20:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (WrdNumberRevisionMarkData::s_bMaxNumberOfCharactersForTextString)
  {
    uint64_t v21 = (_WORD *)*((void *)a2 + 2);
    do
    {
      uint64_t result = CsLeReadUInt16((unsigned __int16 *)v11);
      *v21++ = result;
      int v11 = (unsigned int *)((char *)v11 + 2);
      --v19;
    }
    while (v19);
  }
  return result;
}

uint64_t WrdBaseParser::parseSHD80(WrdBaseParser *this, WrdShading *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)((char *)a4 - (char *)a3) <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int UInt16 = CsLeReadUInt16(a3);
  a2->var5 = 1;
  BOOL v6 = UInt16 == 0xFFFF;
  int v7 = (UInt16 >> 5) & 0x1F;
  if (UInt16 == 0xFFFF) {
    int v8 = 0xFFFF;
  }
  else {
    int v8 = UInt16 >> 10;
  }
  if (UInt16 == 0xFFFF) {
    uint64_t v9 = 31;
  }
  else {
    uint64_t v9 = UInt16 & 0x1F;
  }
  a2->signed __int16 var1 = v8;
  if (v6) {
    int v10 = 31;
  }
  else {
    int v10 = v7;
  }
  a2->var6 = v9;
  a2->uint64_t var7 = v10;
  WrdProperty::convertWord97ColorEnumToColor(v9, (uint64_t)&a2->var3);
  uint64_t var7 = a2->var7;
  return WrdProperty::convertWord97ColorEnumToColor(var7, (uint64_t)&a2->var4);
}

uint64_t WrdBaseParser::parseANLV80(WrdBaseParser *this, WrdAutoNumberLevelDescriptor *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)(a4 - a3) <= 0xF)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *((_DWORD *)a2 + 4) = *a3;
  *((unsigned char *)a2 + 44) = a3[1];
  *((unsigned char *)a2 + 45) = a3[2];
  *((_DWORD *)a2 + 5) = a3[3] & 3;
  int v6 = *((_WORD *)a2 + 21) & 0xFFFE | (a3[3] >> 2) & 1;
  *((_WORD *)a2 + 21) = v6;
  unsigned int v7 = v6 & 0xFFFFFFFD | (2 * ((a3[3] >> 3) & 1));
  *((_WORD *)a2 + 21) = v7;
  unsigned int v8 = v7 & 0xFFFFFFFB | (4 * ((a3[3] >> 4) & 1));
  *((_WORD *)a2 + 21) = v8;
  unsigned int v9 = v8 & 0xFFFFFFF7 | (8 * ((a3[3] >> 5) & 1));
  *((_WORD *)a2 + 21) = v9;
  unsigned int v10 = v9 & 0xFFFFFFEF | (16 * ((a3[3] >> 6) & 1));
  *((_WORD *)a2 + 21) = v10;
  unsigned int v11 = v10 & 0xFFFFFFDF | (32 * ((a3[3] >> 7) & 1));
  *((_WORD *)a2 + 21) = v11;
  unsigned int v12 = v11 & 0xFFFFFFBF | ((a3[4] & 1) << 6);
  *((_WORD *)a2 + 21) = v12;
  unsigned int v13 = v12 & 0xFFFFFF7F | (((a3[4] >> 1) & 1) << 7);
  *((_WORD *)a2 + 21) = v13;
  unsigned int v14 = v13 & 0xFFFFFEFF | (((a3[4] >> 2) & 1) << 8);
  *((_WORD *)a2 + 21) = v14;
  unsigned int v15 = v14 & 0xFFFFFDFF | (((a3[4] >> 3) & 1) << 9);
  *((_WORD *)a2 + 21) = v15;
  unsigned int v16 = v15 & 0xFFFFFBFF | (((a3[4] >> 4) & 1) << 10);
  *((_WORD *)a2 + 21) = v16;
  unsigned int v17 = v16 & 0xFFFFF7FF | (((a3[4] >> 5) & 1) << 11);
  *((_WORD *)a2 + 21) = v17;
  unsigned int v18 = v17 & 0xFFFFEFFF | (((a3[4] >> 6) & 1) << 12);
  *((_WORD *)a2 + 21) = v18;
  unsigned int v19 = v18 & 0xFFFFDFFF | (((a3[4] >> 7) & 1) << 13);
  *((_WORD *)a2 + 21) = v19;
  *((_WORD *)a2 + 21) = v19 & 0xBFFF | (((a3[5] & 7) != 0) << 14);
  *((_DWORD *)a2 + 6) = (a3[5] >> 3) & 0x1E;
  int SInt16 = CsLeReadSInt16((__int16 *)a3 + 3);
  if (SInt16 == -32767) {
    __int16 v21 = 0;
  }
  else {
    __int16 v21 = SInt16;
  }
  *((_WORD *)a2 + 18) = v21;
  *((_WORD *)a2 + 19) = CsLeReadUInt16((unsigned __int16 *)a3 + 4);
  *((_WORD *)a2 + 20) = CsLeReadUInt16((unsigned __int16 *)a3 + 5);
  *((_DWORD *)a2 + 7) = CsLeReadUInt16((unsigned __int16 *)a3 + 6);
  uint64_t result = CsLeReadUInt16((unsigned __int16 *)a3 + 7);
  *((_DWORD *)a2 + 8) = result;
  return result;
}

uint64_t WrdBaseParser::parseOLST80(WrdBaseParser *this, WrdOutlineListData *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3) {
    goto LABEL_12;
  }
  if (a3 >= a4) {
    goto LABEL_12;
  }
  if ((unint64_t)(a4 - a3) < 0x93) {
    goto LABEL_12;
  }
  int v6 = 0;
  unint64_t v7 = a4 - a3 - 4;
  unsigned int v8 = a3 + 4;
  do
  {
    unsigned int v9 = v6;
    EmbeddedFontReference = (WrdBaseParser *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(a2, v6);
    WrdBaseParser::parseANLV80(EmbeddedFontReference, EmbeddedFontReference, v8 - 4, a4);
    ++v6;
    v7 -= 16;
    v8 += 16;
  }
  while (v9 < 8);
  *((unsigned char *)a2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(v8 - 4) != 0;
  CsString::reserve((CsString *)((char *)a2 + 40), WrdOutlineListData::s_bMaxNumberOfCharactersForTextString);
  uint64_t result = (uint64_t)CsString::setCount((CsString *)((char *)a2 + 40), WrdOutlineListData::s_bMaxNumberOfCharactersForTextString);
  if (v8 >= a4 || v7 < 2 * (unint64_t)WrdOutlineListData::s_bMaxNumberOfCharactersForTextString)
  {
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  if (WrdOutlineListData::s_bMaxNumberOfCharactersForTextString)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)a2 + 6);
    do
    {
      uint64_t result = CsLeReadUInt16((unsigned __int16 *)&v8[v12]);
      *(_WORD *)(v13 + v12) = result;
      v12 += 2;
    }
    while (2 * WrdOutlineListData::s_bMaxNumberOfCharactersForTextString != v12);
  }
  return result;
}

void non-virtual thunk to'WrdBinaryReader::~WrdBinaryReader(WrdBinaryReader *this)
{
}

{
  WrdBinaryReader::~WrdBinaryReader((WrdBinaryReader *)((char *)this - 24));
}

{
  uint64_t vars8;

  WrdBinaryReader::~WrdBinaryReader((WrdBinaryReader *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  WrdBinaryReader::~WrdBinaryReader((WrdBinaryReader *)((char *)this - 24));
  JUMPOUT(0x23EC997B0);
}

uint64_t WrdBinaryReader::start(WrdBinaryReader *this, __sFILE *a2)
{
  (*(void (**)(WrdBinaryReader *))(*(void *)this + 24))(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v4 = (WrdParser *)operator new(0x138uLL);
  WrdParser::WrdParser(v4);
  *((void *)this + 4) = v4;
  return WrdParser::openDoc(v4, a2);
}

void sub_238E514F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'WrdBinaryReader::start(WrdBinaryReader *this, __sFILE *a2)
{
  return WrdBinaryReader::start((WrdBinaryReader *)((char *)this - 8), a2);
}

void non-virtual thunk to'WrdBinaryReader::finish(WrdBinaryReader *this)
{
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  int v3 = *(_DWORD *)(v2 + 152);
  LODWORD(v2) = *(_DWORD *)(v2 + 160);
  *a2 = v3;
  a2[1] = v2;
  return result;
}

WrdRdrText *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdText *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

int *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdParagraphTextRun *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdCharacterTextRun *a2)
{
  return WrdBinaryReader::read((uint64_t *)this - 1, a2);
}

WrdSectionProperties *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdSectionTextRun *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

WrdStyleSheet *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdStyleSheet *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

void WrdBinaryReader::read(WrdBinaryReader *this, WrdEmbeddedTrueTypeFontTable *a2)
{
  if (!*((void *)this + 26))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1003;
  }
  WrdAnnotationDateTimeTable::clear(a2);
  WrdParser::parse(*((WrdParser **)this + 4), *((WrdEmbeddedTTFRecordTable **)this + 26));
  if (((*(void *)(*((void *)this + 26) + 16) - *(void *)(*((void *)this + 26) + 8)) & 0x7FFFFFFF8) != 0)
  {
    unsigned int v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 19);
      *((void *)this + 87) = v6;
      *(_WORD *)(v6 + 56) = *(_WORD *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(*((WrdEmbeddedTTFRecordTable **)this + 26), v4);
      unint64_t v7 = (WrdEmbeddedTrueTypeFont *)*((void *)this + 87);
      *((_DWORD *)v7 + 4) = 0;
      WrdEmbeddedTrueTypeFontTable::append(a2, v7);
      *((void *)this + 87) = 0;
      unsigned int v4 = (unsigned __int16)++v5;
    }
    while (((*(void *)(*((void *)this + 26) + 16) - *(void *)(*((void *)this + 26) + 8)) >> 3) > (unsigned __int16)v5);
  }
}

void non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdEmbeddedTrueTypeFontTable *a2)
{
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdEmbeddedTrueTypeFont *a2)
{
  unsigned int v4 = (OcBinaryData *)((char *)a2 + 8);
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    int v6 = *((_DWORD *)this + 155);
  }
  else
  {
    unint64_t v7 = (WrdEmbeddedTTFRecordTable *)*((void *)this + 26);
    if (((*((void *)v7 + 2) - *((void *)v7 + 1)) & 0x7FFFFFFF8) != 0)
    {
      unsigned int v8 = 0;
      int v9 = 0;
      while (*(unsigned __int16 *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(v7, v8) != *((unsigned __int16 *)a2
                                                                                                  + 28))
      {
        unsigned int v8 = (unsigned __int16)++v9;
        unint64_t v7 = (WrdEmbeddedTTFRecordTable *)*((void *)this + 26);
        if (((*((void *)v7 + 2) - *((void *)v7 + 1)) >> 3) <= (unsigned __int16)v9) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = *(unsigned int *)(WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(*((WrdEmbeddedTTFRecordTable **)this + 26), v8)+ 4);
    }
    else
    {
LABEL_7:
      uint64_t v10 = 0;
    }
    (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)this + 4) + 112) + 16))(*(void *)(*((void *)this + 4) + 112), v10, 0);
    int v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 112) + 104))(*(void *)(*((void *)this + 4) + 112))
       - 4;
    *((_DWORD *)this + 155) = v6;
    int v5 = *((_DWORD *)a2 + 4);
  }
  unsigned int v11 = v6 - v5;
  unsigned int v15 = v6 - v5;
  unsigned int v12 = *((_DWORD *)a2 + 7);
  if (v12)
  {
    if (v12 < v11)
    {
      unsigned int v15 = *((_DWORD *)a2 + 7);
LABEL_16:
      (*(void (**)(void, void, unsigned int *))(**(void **)(*((void *)this + 4) + 112) + 56))(*(void *)(*((void *)this + 4) + 112), *((void *)a2 + 4), &v15);
      unsigned int v13 = v15;
      goto LABEL_17;
    }
  }
  else
  {
    OcBinaryData::setMinimumCapacity(v4, v11);
  }
  if (v6 != v5) {
    goto LABEL_16;
  }
  unsigned int v13 = 0;
LABEL_17:
  uint64_t result = OcBinaryData::setMinimumCapacity(v4, v13);
  *((_DWORD *)a2 + 6) = v13;
  return result;
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdEmbeddedTrueTypeFont *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdBookmarkTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdNoteTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

WrdDocumentFileRecord *non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdListFormatTable *a2)
{
  return WrdBinaryReader::read(this - 1, a2);
}

const char *non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdListFormatOverrideTable *a2)
{
  return WrdParser::parse(this[3], a2);
}

unint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdFontFamilyNameTable *a2)
{
  return WrdParser::parse(this[3], a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdDocumentProperties *a2)
{
  return WrdParser::parse(this[3], a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdAnnotationTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

unint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdStringTypedTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdAssociatedStrings *a2)
{
  unsigned int v4 = (unsigned __int16 *)operator new(0x18uLL);
  WrdStringWithDataTable::WrdStringWithDataTable((WrdStringWithDataTable *)v4);
  WrdParser::parse(*((void *)this + 4), v4, 32);
  if (v4[4])
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t StringDataReference = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v4, (unsigned __int16)v5);
      StringReference = (CsString *)WrdAssociatedStrings::getStringReference((uint64_t)a2, v5);
      StringReference->unsigned int var2 = 0;
      bzero(StringReference->var1, 2 * StringReference->var3);
      CsString::append(StringReference, (const CsString *)(StringDataReference + 8));
      ++v5;
    }
    while (v5 < v4[4]);
  }
  unsigned int v8 = *(uint64_t (**)(unsigned __int16 *))(*(void *)v4 + 8);
  return v8(v4);
}

void sub_238E51940(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdAssociatedStrings *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

void non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdStringWithDataTypedTable *a2)
{
}

void non-virtual thunk to'WrdBinaryReader::read(uint64_t a1, int *a2)
{
}

void non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureProperties *a2)
{
}

OcBinaryData *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureBinary *a2)
{
  return WrdBinaryReader::read((OcBinaryData *)((char *)this - 8), (uint64_t)a2);
}

CsString *non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureFilename *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdFormFieldBinaryData *a2)
{
  unsigned int v5 = *((_DWORD *)a2 + 2);
  unsigned int v4 = *((_DWORD *)a2 + 3);
  unsigned int v17 = v4;
  int v6 = (char *)this + 24 * v5;
  unint64_t v7 = v6 + 416;
  for (uint64_t i = (uint64_t *)*((void *)v6 + 53); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v9 = *((_DWORD *)i + 7);
    if (v4 >= v9)
    {
      if (v9 >= v4) {
        goto LABEL_14;
      }
      ++i;
    }
  }
  uint64_t v10 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 11);
  v10[2] = v5;
  v10[3] = v4;
  (*(void (**)(WrdBinaryReader *, _DWORD *))(*(void *)this + 192))(this, v10);
  unsigned int v11 = (uint64_t *)*((void *)v7 + 1);
  if (!v11)
  {
LABEL_11:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  while (1)
  {
    unsigned int v12 = *((_DWORD *)v11 + 7);
    if (v4 >= v12) {
      break;
    }
LABEL_10:
    unsigned int v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_11;
    }
  }
  if (v12 < v4)
  {
    ++v11;
    goto LABEL_10;
  }
  if (v10) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
LABEL_14:
  unsigned int v14 = (WrdParser *)*((void *)this + 4);
  unsigned int v18 = &v17;
  unsigned int v15 = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v7, &v17, (uint64_t)&std::piecewise_construct, &v18);
  return WrdParser::parse(v14, a2, *((unsigned int *)v15 + 8));
}

void sub_238E51B50(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdFormFieldBinaryData *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdFieldPositionTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

WrdMark *WrdBinaryReader::createMark(WrdBinaryReader *this)
{
  uint64_t v2 = (WrdMark *)operator new(0x38uLL);
  WrdMark::WrdMark(v2);
  (*(void (**)(WrdBinaryReader *, WrdMark *))(*(void *)this + 32))(this, v2);
  return v2;
}

void sub_238E51C04(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdBinaryReader::createMark(v1);
  }
  _Unwind_Resume(exception_object);
}

WrdMark *non-virtual thunk to'WrdBinaryReader::createMark(WrdBinaryReader *this)
{
  return WrdBinaryReader::createMark((WrdBinaryReader *)((char *)this - 8));
}

_DWORD *WrdBinaryReader::mark(WrdBinaryReader *this, OcMark *a2)
{
  OcBinaryReader::mark((uint64_t)this, (uint64_t)a2);
  int v5 = *((_DWORD *)this + 154);
  result[12] = *((_DWORD *)this + 152);
  result[13] = v5;
  return result;
}

_DWORD *non-virtual thunk to'WrdBinaryReader::mark(WrdBinaryReader *this, OcMark *a2)
{
  return WrdBinaryReader::mark((WrdBinaryReader *)((char *)this - 8), a2);
}

_DWORD *WrdBinaryReader::seek(WrdBinaryReader *this, const OcMark *a2)
{
  OcBinaryReader::seek((uint64_t)this, (uint64_t)a2);
  int v5 = result[13];
  *((_DWORD *)this + 152) = result[12];
  *((_DWORD *)this + 154) = v5;
  return result;
}

_DWORD *non-virtual thunk to'WrdBinaryReader::seek(WrdBinaryReader *this, const OcMark *a2)
{
  return WrdBinaryReader::seek((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdFileShapeAddressTable *a2)
{
  return WrdBinaryReader::read(this - 1, a2);
}

void WrdBinaryReader::read(WrdParser **this, WrdWorkBookTable *a2)
{
}

void non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdWorkBookTable *a2)
{
}

uint64_t WrdBinaryReader::read(WrdParser **this, WrdVariableTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdVariableTable *a2)
{
  return WrdParser::parse(this[3], a2);
}

unint64_t WrdBinaryReader::read(WrdParser **this, WrdCustomization *a2)
{
  return WrdParser::parse(this[4], a2);
}

unint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdCustomization *a2)
{
  return WrdParser::parse(this[3], a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdStoryTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

void non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdCPTableHeaders *a2)
{
}

void WrdBinaryReader::read(WrdParser **this, WrdRoutingSlip *a2)
{
}

void non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdRoutingSlip *a2)
{
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdUserRestrictionTable *a2)
{
  unsigned int v4 = (WrdCPTable *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 4) + 280) + 16))(*(void *)(*((void *)this + 4) + 280), 12);
  int v6 = (WrdUserRestrictionMap *)operator new(0x20uLL);
  WrdUserRestrictionMap::WrdUserRestrictionMap(v6);
  WrdParser::parse(*((void *)this + 4), v6);
  uint64_t v7 = (*((void *)v6 + 2) - *((void *)v6 + 1)) >> 1;
  if (v7)
  {
    WrdParser::parse(*((WrdParser **)this + 4), (WrdCPTable *)v5, 0x8Fu);
    unsigned int v8 = (char **)operator new(0x18uLL);
    *unsigned int v8 = 0;
    v8[1] = 0;
    unsigned __int16 v8[2] = 0;
    unint64_t v38 = v8;
    uint64_t v9 = *((void *)this + 4);
    if (*(unsigned __int16 *)(v9 + 232) < 0x8Du)
    {
      int v30 = 0;
    }
    else
    {
      FCLCB = (unsigned int *)WrdFileInformationBlock::getFCLCB(v9 + 160, 142);
      (*(void (**)(void, void, void))(**(void **)(*((void *)this + 4) + 128) + 16))(*(void *)(*((void *)this + 4) + 128), *FCLCB, 0);
      int v11 = 0;
      do
      {
        int v12 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 128) + 96))(*(void *)(*((void *)this + 4) + 128));
        WrdCPTable::append(v4, v12);
        ++v11;
      }
      while (v7 > (unsigned __int16)v11);
      int v37 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 128) + 96))(*(void *)(*((void *)this + 4) + 128));
      int v13 = 0;
      do
      {
        unsigned int v14 = v38;
        __int16 v15 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 128) + 80))(*(void *)(*((void *)this + 4) + 128));
        __int16 v16 = v15;
        unint64_t v17 = (unint64_t)v38[2];
        unsigned int v18 = v38[1];
        if ((unint64_t)v18 >= v17)
        {
          BOOL v20 = *v38;
          unint64_t v21 = v18 - *v38;
          unint64_t v22 = (v17 - (unint64_t)*v38) >> 1;
          if (2 * (int)v22 <= (v21 >> 1) + 1) {
            unsigned int v23 = (v21 >> 1) + 1;
          }
          else {
            unsigned int v23 = 2 * v22;
          }
          if (v22 >= 0x7FFFFFFF) {
            uint64_t v24 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v24 = v23;
          }
          if (v24)
          {
            unsigned int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v38 + 2), v24);
            uint64_t v27 = v26;
            BOOL v20 = *v38;
            unsigned int v18 = v38[1];
          }
          else
          {
            unsigned int v25 = 0;
            uint64_t v27 = 0;
          }
          uint64_t v28 = &v25[v21 & 0x1FFFFFFFELL];
          *(_WORD *)uint64_t v28 = v16;
          unsigned int v19 = v28 + 2;
          while (v18 != v20)
          {
            __int16 v29 = *((_WORD *)v18 - 1);
            v18 -= 2;
            *((_WORD *)v28 - 1) = v29;
            v28 -= 2;
          }
          WrdParser *v14 = v28;
          v14[1] = v19;
          v14[2] = &v25[2 * v27];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(_WORD *)unsigned int v18 = v15;
          unsigned int v19 = v18 + 2;
        }
        v14[1] = v19;
        (*(void (**)(void))(**(void **)(*((void *)this + 4) + 128) + 96))(*(void *)(*((void *)this + 4) + 128));
        ++v13;
      }
      while (v7 > (unsigned __int16)v13);
      int v30 = v37;
    }
    uint64_t v31 = *(void *)(v5 + 8);
    *((_DWORD *)a2 + 8) = v30;
    if (v7 > (unsigned __int16)((*((_DWORD *)v4 + 4) - *((_DWORD *)v4 + 2)) >> 2)
      || v7 + 1 != (unsigned __int16)((*(_DWORD *)(v5 + 16) - v31) >> 2))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1000;
    }
    if (((*((void *)v6 + 2) - *((void *)v6 + 1)) & 0x1FFFFFFFELL) != 0)
    {
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = (WrdUserRestriction *)operator new(0x18uLL);
        WrdUserRestriction::WrdUserRestriction(v33);
        uint64_t v34 = *((void *)v6 + 1);
        if (v32 >= ((unint64_t)(*((void *)v6 + 2) - v34) >> 1)) {
          std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
        }
        *((_WORD *)v33 + 4) = *(_WORD *)(v34 + 2 * v32);
        *((_DWORD *)v33 + 3) = *(_DWORD *)(*((void *)v4 + 1) + 4 * v32);
        if (v32 >= ((unint64_t)(v38[1] - *v38) >> 1)) {
          std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
        }
        *((_DWORD *)v33 + 4) = *(_DWORD *)(*(void *)(v5 + 8) + 4 * *(unsigned __int16 *)&(*v38)[2 * v32]);
        WrdEmbeddedTrueTypeFontTable::append(a2, v33);
        ++v32;
      }
      while (v32 < ((*((void *)v6 + 2) - *((void *)v6 + 1)) >> 1));
    }
    ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)&v38);
  }
  uint64_t result = (*(uint64_t (**)(WrdUserRestrictionMap *))(*(void *)v6 + 8))(v6);
  if (v5) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    return (*(uint64_t (**)(WrdCPTable *))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void sub_238E52238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (!v13)
    {
LABEL_3:
      if (!v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  if (!v12) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  goto LABEL_5;
}

void WrdCPTable::append(WrdCPTable *this, int a2)
{
  unsigned int v4 = (char *)this + 24;
  unint64_t v5 = *((void *)this + 3);
  int v6 = (char *)*((void *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = (char *)*((void *)this + 1);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 2;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 2;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      unsigned int v8 = (char *)*((void *)this + 1);
      int v6 = (char *)*((void *)this + 2);
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v14[v9 & 0x3FFFFFFFCLL];
    unsigned int v18 = &v14[4 * v16];
    *(_DWORD *)unint64_t v17 = a2;
    uint64_t v7 = v17 + 4;
    while (v6 != v8)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)int v6 = a2;
    uint64_t v7 = v6 + 4;
  }
  *((void *)this + 2) = v7;
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdUserRestrictionTable *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

unint64_t WrdBinaryReader::read(WrdParser **this, WrdXmlSchemaTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

unint64_t non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdXmlSchemaTable *a2)
{
  return WrdParser::parse(this[3], a2);
}

uint64_t *WrdBinaryReader::read(WrdParser **this, WrdXmlElementTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

uint64_t *non-virtual thunk to'WrdBinaryReader::read(WrdParser **this, WrdXmlElementTable *a2)
{
  return WrdParser::parse(this[3], a2);
}

void WrdBinaryReader::read(OcBinaryReader *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v4 = (SsrwOOStorage *)(*((uint64_t (**)(OcBinaryReader *))a1->var0 + 11))(a1);
  *(void *)int v6 = *(void *)"M";
  *(void *)&v6[3] = 0x73006F0072;
  if (SsrwOOStorage::hasChild(v4, v6))
  {
    unint64_t v5 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v4, v6);
    OcBinaryReader::readMacros(a1, a2, v5);
  }
}

void non-virtual thunk to'WrdBinaryReader::read(uint64_t a1, uint64_t a2)
{
}

unsigned __int16 *WrdBinaryReader::read(unsigned __int16 **this, OcMsoEnvelope *a2)
{
  return WrdParser::parse(this[4], a2);
}

unsigned __int16 *non-virtual thunk to'WrdBinaryReader::read(unsigned __int16 **this, OcMsoEnvelope *a2)
{
  return WrdParser::parse(this[3], a2);
}

OcBinaryData *WrdBinaryReader::read(WrdDocumentFileRecord **this, WrdFrameProperties *a2)
{
  int v3 = (OcBinaryData *)((char *)a2 + 8);
  OcBinaryData::removeBuffer((OcBinaryData *)((char *)a2 + 8));
  uint64_t result = (OcBinaryData *)WrdDocumentFileRecord::getType(this[27]);
  if (result == 8)
  {
    uint64_t v5 = (uint64_t)this[27] + 32;
    return OcBinaryData::operator=(v3, v5);
  }
  return result;
}

OcBinaryData *non-virtual thunk to'WrdBinaryReader::read(WrdDocumentFileRecord **this, WrdFrameProperties *a2)
{
  return WrdBinaryReader::read(this - 1, a2);
}

unint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdVersionInfoTable *a2)
{
  return WrdParser::parse(*((void *)this + 4), a2);
}

unint64_t non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, WrdVersionInfoTable *a2)
{
  return WrdParser::parse(*((void *)this + 3), a2);
}

uint64_t WrdBinaryReader::seek(WrdBinaryReader *this, const EshContainer *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(WrdBinaryReader *))(*(void *)this + 112))(this)
                           + 64);
  return v2();
}

uint64_t WrdBinaryReader::seek(WrdBinaryReader *this, const EshRoot *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(WrdBinaryReader *))(*(void *)this + 112))(this)
                           + 72);
  return v2();
}

uint64_t WrdBinaryReader::getEshReader(WrdBinaryReader *this)
{
  return (uint64_t)this + 40;
}

SsrwOOStorage **non-virtual thunk to'WrdBinaryReader::read(OcBinaryReader *this, OcCustomProperties *a2)
{
  return OcBinaryReader::readCustomProperties(this - 1, a2);
}

uint64_t non-virtual thunk to'WrdBinaryReader::read(uint64_t a1)
{
  return TSURectWithOriginAndSize(a1 - 8);
}

uint64_t non-virtual thunk to'WrdBinaryReader::seek(WrdBinaryReader *this, const EshContainer *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(*((void *)this - 1) + 112))() + 64);
  return v2();
}

uint64_t non-virtual thunk to'WrdBinaryReader::seek(WrdBinaryReader *this, const EshRoot *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(*((void *)this - 1) + 112))() + 72);
  return v2();
}

void WrdEshReader::~WrdEshReader(WrdEshReader *this)
{
  EshBinaryReader::~EshBinaryReader(this);
  JUMPOUT(0x23EC997B0);
}

void WrdMark::WrdMark(WrdMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::EshMark((WrdMark *)((char *)this + 8));
  *(void *)this = &unk_26EBE77C0;
  *((void *)this + 6) = -1;
}

void WrdMark::~WrdMark(WrdMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((WrdMark *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((WrdMark *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

WrdParagraphProperties *handleCase0xC601(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 *a4)
{
  if (*(unsigned __int8 *)(a2 + 13) < 6u || (unint64_t)a4 <= a3 || (uint64_t)((uint64_t)a4 - a3) < 6)
  {
    return (WrdParagraphProperties *)ChLogFunction("applySprm case: 0xC601 wrong variable sized buffer\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdPapParser.cpp", 848);
  }
  else
  {
    *(_DWORD *)unint64_t v10 = 0;
    UnsignedShort = (unsigned __int16 *)readUnsignedShort((unsigned __int16 *)(a3 + 2), a4, &v10[1]);
    uint64_t result = (WrdParagraphProperties *)readUnsignedShort(UnsignedShort, a4, v10);
    uint64_t v8 = *(unsigned __int16 *)(a1 + 140);
    if (v8 > v10[1] && v8 <= v10[0])
    {
      unsigned __int16 v9 = 0;
      readUnsignedShort((unsigned __int16 *)result + v8 - v10[1], a4, &v9);
      return WrdParagraphProperties::setParagraphStyleIndex((WrdParagraphProperties *)a1, v9);
    }
  }
  return result;
}

CsString *WrdPapParser::parseANLD80(WrdPapParser *this, WrdAutoNumberLevelDescriptor **a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  if (!a3 || a3 >= a4 || a4 - a3 < 2 * WrdAutoNumberListDescriptor::s_bMaxNumberOfCharacters + 20)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  WrdBaseParser::parseANLV80(this, a2[1], a3, a4);
  *((unsigned char *)a2 + 41) = a3[16];
  *((unsigned char *)a2 + 42) = a3[17];
  *((unsigned char *)a2 + 40) = (_BYTE)a2[5] & 0xFE | (a3[18] != 0);
  int v6 = (CsString *)(a2 + 2);
  CsString::reserve((CsString *)(a2 + 2), WrdAutoNumberListDescriptor::s_bMaxNumberOfCharacters);
  uint64_t v7 = a2[3];
  if (v7 && WrdAutoNumberListDescriptor::s_bMaxNumberOfCharacters)
  {
    uint64_t v8 = (unsigned __int16 *)(a3 + 20);
    uint64_t v9 = WrdAutoNumberListDescriptor::s_bMaxNumberOfCharacters;
    do
    {
      *(_WORD *)uint64_t v7 = CsLeReadUInt16(v8);
      uint64_t v7 = (WrdAutoNumberLevelDescriptor *)((char *)v7 + 2);
      ++v8;
      --v9;
    }
    while (v9);
  }
  return CsString::setCount(v6, WrdAutoNumberListDescriptor::s_bMaxNumberOfCharacters);
}

const unsigned __int8 *readShort(unsigned __int8 *a1, unsigned __int8 *a2, __int16 *a3)
{
  if (a2 <= a1 || a2 - a1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  *a3 = CsLeReadSInt16((__int16 *)a1);
  return a1 + 2;
}

const unsigned __int8 *readUnsignedShort(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 <= a1 || (char *)a2 - (char *)a1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1005;
  }
  *a3 = CsLeReadUInt16(a1);
  return (const unsigned __int8 *)(a1 + 1);
}

uint64_t WrdParser::openDoc(WrdParser *this, __sFILE *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1006;
  }
  WrdParser::createFactories((uint64_t)this);
  *((void *)this + 2) = a2;
  if (*((void *)this + 37))
  {
    *((void *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
  }
  SsrwOORootStorage::openInStream((void *)this + 3, (uint64_t)a2, 0);
  return WrdParser::initStreamsAndFibBase(this);
}

uint64_t WrdParser::startFCLCB(WrdParser *this, unsigned int a2)
{
  FCLCB = (unsigned int *)WrdFileInformationBlock::getFCLCB((WrdParser *)((char *)this + 160), a2);
  uint64_t v4 = *FCLCB;
  if ((v4 & 0x80000000) != 0
    || (uint64_t v5 = FCLCB[1], __CFADD__(v5, v4))
    || (int)v5 + (int)v4 > (*(unsigned int (**)(void))(**((void **)this + 16) + 48))(*((void *)this + 16)))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  (*(void (**)(void, uint64_t, void))(**((void **)this + 16) + 16))(*((void *)this + 16), v4, 0);
  return v4 | (v5 << 32);
}

void *WrdParser::parseGrpprl(void *result, uint64_t a2, unsigned int a3, int a4, void **a5, WrdCharacterProperties *a6, WrdParagraphProperties *a7, WrdCharacterProperties *a8, WrdParagraphProperties *a9, WrdCharacterProperties *a10, WrdTableProperties *a11, WrdTableProperties *a12, WrdSectionProperties *a13, WrdSectionProperties *a14, uint64_t *a15)
{
  v60[0] = a3;
  if (a3)
  {
    unint64_t v17 = result;
    unsigned int v18 = operator new(0x10uLL);
    void *v18 = 0;
    v18[1] = 0;
    int v19 = (unsigned __int16 *)operator new[](a3);
    BOOL v20 = a10;
    v17[36] = v19;
    uint64_t v21 = v60[0];
    unsigned __int16 SizeOfSPRMParameter = 0;
    unint64_t v54 = a8;
    int v58 = -1;
    if (a10)
    {
      BOOL v22 = WrdCharacterProperties::doRevisionsExist(a10);
      unsigned int v23 = a8;
      if (v22) {
        unsigned int v23 = a10;
      }
      unint64_t v54 = v23;
    }
    uint64_t v24 = a7;
    if (a9)
    {
      if (WrdParagraphProperties::doRevisionsExist(a9)) {
        uint64_t v24 = a9;
      }
      else {
        uint64_t v24 = a7;
      }
    }
    uint64_t v53 = (uint64_t)a11;
    if (a12)
    {
      int v25 = WrdTableProperties::doRevisionsExist(a12);
      unsigned int v26 = a12;
      if (!v25) {
        unsigned int v26 = a11;
      }
      uint64_t v53 = (uint64_t)v26;
    }
    uint64_t v52 = (uint64_t)a13;
    if (a14)
    {
      int v27 = WrdSectionProperties::doRevisionsExist(a14);
      uint64_t v28 = a14;
      if (!v27) {
        uint64_t v28 = a13;
      }
      uint64_t v52 = (uint64_t)v28;
    }
    (*(void (**)(uint64_t, void, unsigned int *))(*(void *)a2 + 56))(a2, v17[36], v60);
    __int16 v29 = a12;
    if (v60[0])
    {
      unsigned int v30 = 0;
      unint64_t v57 = (unsigned __int16 *)((char *)v19 + v21);
      do
      {
        WrdPropertyParser::parseSPRM(v19, (unint64_t)v57, &SizeOfSPRMParameter, (uint64_t)v18);
        uint64_t v31 = (unsigned __int16 *)((char *)v19 + SizeOfSPRMParameter);
        unsigned int v32 = v30 + SizeOfSPRMParameter;
        unsigned __int16 SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v18);
        switch(*(_DWORD *)v18)
        {
          case 1:
            if (!a7) {
              goto LABEL_46;
            }
            if (a9
              && v24 != a9
              && WrdPropertyParser::isSPRMRelatedToTrackChanges((uint64_t)v18, v31, (unint64_t)v57))
            {
              int v33 = WrdProperty::getSizeOfSPRMParameter((uint64_t)v18);
              uint64_t v34 = a9;
              if (v32 + v33 == v60[0]) {
                goto LABEL_46;
              }
            }
            else
            {
              uint64_t v34 = v24;
            }
            if (a4)
            {
              int v46 = *((unsigned __int16 *)v18 + 4);
              if (v46 == 17931)
              {
                if (!CsLeReadUInt16(v31)) {
                  (*(void (**)(WrdParagraphProperties *))(*(void *)v34 + 48))(v34);
                }
              }
              else if (v46 == 17920)
              {
                (*(void (**)(WrdParagraphProperties *))(*(void *)v34 + 40))(v34);
              }
            }
            WrdPapParser::applySprm((WrdBaseParser *)(v17 + 32), (uint64_t)v34, (uint64_t)v18, (unsigned __int8 *)v31, v57, &SizeOfSPRMParameter, &v58);
            break;
          case 2:
            if (!a8) {
              goto LABEL_46;
            }
            if (v20
              && v54 != v20
              && WrdPropertyParser::isSPRMRelatedToTrackChanges((uint64_t)v18, v31, (unint64_t)v57))
            {
              int v35 = WrdProperty::getSizeOfSPRMParameter((uint64_t)v18);
              uint64_t v36 = (uint64_t)v20;
              if (v32 + v35 == v60[0]) {
                goto LABEL_46;
              }
            }
            else
            {
              uint64_t v36 = (uint64_t)v54;
            }
            if (a4)
            {
              int v47 = *((unsigned __int16 *)v18 + 4);
              if (v47 == 18992 || v47 == 17920) {
                (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
              }
            }
            WrdChpParser::applySprm((WrdBaseParser *)((char *)v17 + 252), v36, a6, (uint64_t)v18, (unsigned __int8 *)v31, v57, &SizeOfSPRMParameter);
            unint64_t v54 = (WrdCharacterProperties *)v36;
            uint64_t v34 = v24;
            break;
          case 3:
            if (!a15) {
              goto LABEL_46;
            }
            WrdPicParser::applySprm((uint64_t)v17 + 268, a15, (uint64_t)v18, (uint64_t)v31, v57, &SizeOfSPRMParameter);
            uint64_t v34 = v24;
            break;
          case 4:
            if (!a13) {
              goto LABEL_46;
            }
            if (a14
              && (WrdSectionProperties *)v52 != a14
              && WrdPropertyParser::isSPRMRelatedToTrackChanges((uint64_t)v18, v31, (unint64_t)v57))
            {
              int v37 = WrdProperty::getSizeOfSPRMParameter((uint64_t)v18);
              uint64_t v38 = (uint64_t)a14;
              if (v32 + v37 == v60[0]) {
                goto LABEL_46;
              }
            }
            else
            {
              uint64_t v38 = v52;
            }
            WrdSepParser::applySprm((WrdBaseParser *)((char *)v17 + 260), v38, (uint64_t)v18, (unsigned __int8 *)v31, v57, &SizeOfSPRMParameter);
            uint64_t v34 = v24;
            uint64_t v52 = v38;
            break;
          case 5:
            if (!a11) {
              goto LABEL_46;
            }
            if (v29
              && (WrdTableProperties *)v53 != v29
              && WrdPropertyParser::isSPRMRelatedToTrackChanges((uint64_t)v18, v31, (unint64_t)v57))
            {
              int v39 = WrdProperty::getSizeOfSPRMParameter((uint64_t)v18);
              uint64_t v40 = (uint64_t)v29;
              if (v32 + v39 == v60[0]) {
                goto LABEL_46;
              }
            }
            else
            {
              uint64_t v40 = v53;
            }
            WrdTapParser::applySprm((WrdBaseParser *)(v17 + 33), v40, (uint64_t)v18, (unsigned __int8 *)v31, v57, &SizeOfSPRMParameter);
            uint64_t v34 = v24;
            uint64_t v53 = v40;
            break;
          default:
LABEL_46:
            uint64_t v34 = v24;
            break;
        }
        uint64_t v41 = SizeOfSPRMParameter;
        if ((v58 & 0x80000000) == 0)
        {
          unint64_t v42 = v20;
          uint64_t v43 = v17[36];
          unint64_t v44 = a5;
          if (!a5)
          {
            unint64_t v44 = (void **)operator new(0x18uLL);
            *unint64_t v44 = 0;
            v44[1] = 0;
            v44[2] = 0;
          }
          WrdParser::applyHugePapx(v17, v44);
          if (!a5)
          {
            unint64_t v45 = *v44;
            if (*v44)
            {
              v44[1] = v45;
              operator delete(v45);
            }
            MEMORY[0x23EC997B0](v44, 0x20C40960023A9);
          }
          v17[36] = v43;
          BOOL v20 = v42;
          __int16 v29 = a12;
        }
        int v19 = (unsigned __int16 *)((char *)v31 + v41);
        unsigned int v30 = v32 + v41;
        uint64_t v24 = v34;
      }
      while (v30 < v60[0]);
    }
    uint64_t v48 = v17[36];
    if (v48) {
      MEMORY[0x23EC99790](v48, 0x1000C8077774924);
    }
    v17[36] = 0;
    return (void *)MEMORY[0x23EC997B0](v18, 0x1000C4099076E91);
  }
  return result;
}

void sub_238E53704(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4099076E91);
  _Unwind_Resume(a1);
}

uint64_t WrdParser::applyHugePapx(void *a1, char **a2, uint64_t a3, WrdParagraphProperties *a4, WrdParagraphProperties *a5, WrdTableProperties *a6, WrdTableProperties *a7)
{
  uint64_t result = a1[15];
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 40))(result);
    (*(void (**)(void, uint64_t, void))(*(void *)a1[15] + 16))(a1[15], a3, 0);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a1[15] + 80))(a1[15]);
    if (result >= 0x3FA3)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
    uint64_t v15 = result;
    uint64_t v16 = *a2;
    unint64_t v17 = (unint64_t *)a2[1];
    if (*a2 == (char *)v17)
    {
LABEL_16:
      unint64_t v24 = (unint64_t)a2[2];
      if ((unint64_t)v17 >= v24)
      {
        uint64_t v26 = ((char *)v17 - v16) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v24 - (void)v16;
        uint64_t v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          unsigned int v30 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a2 + 2), v29);
        }
        else {
          unsigned int v30 = 0;
        }
        uint64_t v31 = (unint64_t *)&v30[8 * v26];
        unsigned int v32 = &v30[8 * v29];
        *uint64_t v31 = a3 | (unint64_t)(v15 << 32);
        int v25 = (char *)(v31 + 1);
        uint64_t v34 = *a2;
        int v33 = a2[1];
        if (v33 != *a2)
        {
          do
          {
            unint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *--uint64_t v31 = v35;
          }
          while (v33 != v34);
          int v33 = *a2;
        }
        *a2 = (char *)v31;
        a2[1] = v25;
        a2[2] = v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        unint64_t *v17 = a3 | (unint64_t)(result << 32);
        int v25 = (char *)(v17 + 1);
      }
      a2[1] = v25;
      if (v15)
      {
        WrdParser::parseGrpprl(a1, a1[15], v15, 0, (void **)a2, 0, a4, 0, a5, 0, a6, a7, 0, 0, 0);
        int v25 = a2[1];
      }
      a2[1] = v25 - 8;
      uint64_t v36 = *(uint64_t (**)(void))(*(void *)a1[15] + 16);
      return v36();
    }
    else
    {
      unsigned int v18 = (unint64_t *)*a2;
      while (1)
      {
        if (*(_DWORD *)v18 <= (int)a3) {
          int v19 = a3;
        }
        else {
          int v19 = *(_DWORD *)v18;
        }
        int v20 = *((_DWORD *)v18 + 1) + *(_DWORD *)v18;
        if (v20 >= (int)result + (int)a3) {
          int v20 = result + a3;
        }
        BOOL v21 = __OFSUB__(v20, v19);
        int v22 = v20 - v19;
        if (v22 < 0 == v21 && v22 >= 1) {
          break;
        }
        if (++v18 == v17) {
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}

void WrdParser::parse(WrdParser *this, WrdEmbeddedTTFRecordTable *a2)
{
  unint64_t started = WrdParser::startFCLCB(this, 0x3Du);
  WrdEmbeddedTTFRecordTable::clear((uint64_t)a2);
  if (HIDWORD(started))
  {
    (*(void (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
    if (v5)
    {
      for (unsigned int i = 0; i < v5; ++i)
      {
        uint64_t v7 = (WrdEmbeddedTrueTypeFont *)operator new(8uLL);
        *(_WORD *)uint64_t v7 = 0;
        *((_DWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 1) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
        *(_WORD *)uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        (*(void (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
        (*(void (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
        WrdEmbeddedTrueTypeFontTable::append(a2, v7);
      }
    }
  }
}

void sub_238E53BE0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C40CE7E837CLL);
  _Unwind_Resume(a1);
}

uint64_t WrdParser::parse(WrdParser *this, WrdVariableTable *a2)
{
  uint64_t result = WrdParser::startFCLCB(this, 0x3Cu);
  if (HIDWORD(result) >= 6)
  {
    unsigned int v5 = HIDWORD(result) + result;
    (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    if (result + 8 * v6 <= v5 && v6 != 0)
    {
      unsigned int v8 = 0;
      do
      {
        uint64_t v9 = (WrdVariable *)operator new(0x40uLL);
        WrdVariable::WrdVariable(v9);
        WrdEmbeddedTrueTypeFontTable::append(a2, v9);
        ++v8;
      }
      while (v8 < v6);
      unsigned int v10 = 0;
      do
      {
        uint64_t EmbeddedFontReference = WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(a2, v10);
        if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) + 6 > v5) {
          goto LABEL_18;
        }
        unsigned int v18 = 0;
        unsigned int v18 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        int v12 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
        if (v12 + 2 * v18 + 4 > v5) {
          goto LABEL_18;
        }
        CsString::reserve((CsString *)(EmbeddedFontReference + 8), v18 + 1);
        (*(void (**)(void, unsigned int *, void))(**((void **)this + 16) + 136))(*((void *)this + 16), &v18, *(void *)(EmbeddedFontReference + 16));
        CsString::setCount((CsString *)(EmbeddedFontReference + 8), v18);
        *(_WORD *)(EmbeddedFontReference + 56) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
        *(_WORD *)(EmbeddedFontReference + 58) = result;
        ++v10;
      }
      while (v6 != v10);
      if (v6)
      {
        unsigned int v13 = 0;
        while (1)
        {
          uint64_t v14 = WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(a2, v13);
          if ((*(unsigned int (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16)) + 2 > v5) {
            break;
          }
          unsigned int v17 = 0;
          unsigned int v17 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
          int v15 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
          if (v15 + 2 * v17 > v5) {
            break;
          }
          CsString::reserve((CsString *)(v14 + 32), v17 + 1);
          (*(void (**)(void, unsigned int *, void))(**((void **)this + 16) + 136))(*((void *)this + 16), &v17, *(void *)(v14 + 40));
          uint64_t result = (uint64_t)CsString::setCount((CsString *)(v14 + 32), v17);
          if (v6 == ++v13) {
            return result;
          }
        }
LABEL_18:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 2001;
      }
    }
  }
  return result;
}

void sub_238E53FD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WrdParser::parse(WrdParser *this, WrdCustomization *a2)
{
  unint64_t result = WrdParser::startFCLCB(this, 0x18u);
  unint64_t v5 = HIDWORD(result);
  if (HIDWORD(result))
  {
    unint64_t v6 = result;
    unsigned int v16 = HIDWORD(result);
    OcBinaryData::allocBuffer((OcBinaryData *)((char *)a2 + 8), HIDWORD(result));
    (*(void (**)(void, void, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), *((void *)a2 + 4), &v16);
    unsigned int v7 = v16;
    OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 8), v16);
    *((_DWORD *)a2 + 6) = v7;
    (*(void (**)(void, unint64_t, void))(**((void **)this + 16) + 16))(*((void *)this + 16), v6, 0);
    if ((*(unsigned int (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16)) != 255)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
    unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    unsigned int v9 = v6 + v5 - 1;
    while (1)
    {
      if (v8 >= v9)
      {
        (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
        return WrdOffsetPairList::translateOffsetsBy((uint64_t)a2 + 56, -(int)v6);
      }
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      if (v10 > 15)
      {
        switch(v10)
        {
          case 16:
            WrdParser::parseMacroNames(this, a2);
            break;
          case 17:
            WrdParser::parseUpcaseMacroNames(this, a2);
            break;
          case 18:
            WrdParser::parseMenuCustomization(this, a2);
            break;
        }
      }
      else
      {
        switch(v10)
        {
          case 1:
            int v11 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
            uint64_t v12 = *((void *)this + 16);
            uint64_t v13 = (24 * v11);
LABEL_16:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v13, 1);
            break;
          case 2:
            int v14 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
            uint64_t v12 = *((void *)this + 16);
            uint64_t v13 = (4 * v14);
            goto LABEL_16;
          case 3:
            WrdParser::parseKeyboardShortcuts(this, a2);
            break;
        }
      }
      unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    }
  }
  return result;
}

uint64_t WrdParser::parseKeyboardShortcuts(WrdParser *this, WrdCustomization *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  if (result)
  {
    int v5 = result;
    do
    {
      unint64_t v6 = (WrdKeyboardShortcut *)operator new(0x18uLL);
      WrdKeyboardShortcut::WrdKeyboardShortcut(v6);
      WrdCustomization::addKeyboardShortcut(a2, v6);
      (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      *((unsigned char *)v6 + 8) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      *((unsigned char *)v6 + 9) = v7 & 1;
      *((unsigned char *)v6 + 10) = (v7 & 2) != 0;
      *((unsigned char *)v6 + 11) = (v7 & 4) != 0;
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      *((unsigned char *)v6 + 12) = (*(unsigned int (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16)) == 3;
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      *((_DWORD *)v6 + 4) = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_238E544E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdParser::parseMenuCustomization(WrdParser *this, WrdCustomization *a2)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 9, 1);
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), v5, 1);
  if (v4)
  {
    for (unsigned int i = 0; i < v4; ++i)
    {
      int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      if (v8)
      {
        int v9 = v8;
        int v10 = (WrdCustomizedMenu *)operator new(0x28uLL);
        WrdCustomizedMenu::WrdCustomizedMenu(v10);
        WrdCustomization::addCustomizedMenu(a2, v10);
        *((_DWORD *)v10 + 2) = v9;
        uint64_t result = WrdParser::parseCustomizedMenu(this, v10, (WrdCustomization *)((char *)a2 + 56));
      }
      else
      {
        int v11 = (WrdNewMenu *)operator new(0x50uLL);
        WrdNewMenu::WrdNewMenu(v11);
        WrdCustomization::addNewMenu(a2, v11);
        uint64_t result = WrdParser::parseNewMenu(this, v11);
      }
    }
  }
  return result;
}

void sub_238E546E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdParser::parseMacroNames(WrdParser *this, WrdCustomization *a2)
{
  (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  if (v4)
  {
    for (unsigned int i = 0; i < v4; ++i)
    {
      char v7 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v7);
      WrdCustomization::addMacroName(a2, v7);
      int v8 = (SsrwOOStream *)(*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      WrdParser::parseString(*((WrdParser **)this + 16), v8, v7, v9);
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    }
  }
  return result;
}

void sub_238E54890(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdParser::parseUpcaseMacroNames(WrdParser *this, WrdCustomization *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  if (result)
  {
    unsigned int v5 = result;
    for (unsigned int i = 0; i < v5; ++i)
    {
      char v7 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v7);
      WrdCustomization::addUpcaseMacroName(a2, v7);
      (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      int v8 = (SsrwOOStream *)(*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      WrdParser::parseString(*((WrdParser **)this + 16), v8, v7, v9);
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    }
  }
  return result;
}

void sub_238E549FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdCustomization::addKeyboardShortcut(WrdCustomization *this, WrdKeyboardShortcut *a2)
{
  unint64_t v6 = *((void *)this + 12);
  unsigned int v4 = (char *)this + 96;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 10);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 10);
    int v19 = (char *)*((void *)this + 11);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 10);
    }
    *((void *)this + 10) = v17;
    *((void *)this + 11) = v8;
    *((void *)this + 12) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 11) = v8;
}

void WrdCustomization::addCustomizedMenu(WrdCustomization *this, WrdCustomizedMenu *a2)
{
  unint64_t v6 = *((void *)this + 18);
  unsigned int v4 = (char *)this + 144;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 16);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 16);
    int v19 = (char *)*((void *)this + 17);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 16);
    }
    *((void *)this + 16) = v17;
    *((void *)this + 17) = v8;
    *((void *)this + 18) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 17) = v8;
}

uint64_t WrdParser::parseCustomizedMenu(WrdParser *this, WrdCustomizedMenu *a2, WrdOffsetPairList *a3)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  if (result)
  {
    unsigned int v7 = result;
    for (unsigned int i = 0; i < v7; ++i)
    {
      uint64_t v9 = (WrdMenuCustomizationOperation *)operator new(0xC8uLL);
      WrdMenuCustomizationOperation::WrdMenuCustomizationOperation(v9);
      OcCustomProperties::appendProperty(a2, v9);
      uint64_t result = WrdParser::parseMenuCustomizationOperation(this, v9, a3);
    }
  }
  return result;
}

void sub_238E54CCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdCustomization::addNewMenu(WrdCustomization *this, WrdNewMenu *a2)
{
  unint64_t v6 = *((void *)this + 15);
  unsigned int v4 = (char *)this + 120;
  unint64_t v5 = v6;
  unsigned int v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 13);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      int v14 = 0;
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)unsigned int v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 13);
    int v19 = (char *)*((void *)this + 14);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 13);
    }
    *((void *)this + 13) = v17;
    *((void *)this + 14) = v8;
    *((void *)this + 15) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 14) = v8;
}

uint64_t WrdParser::parseNewMenu(WrdParser *this, WrdNewMenu *a2)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  unsigned int v4 = (SsrwOOStream *)(*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  WrdParser::parseString(*((WrdParser **)this + 16), v4, (CsString *)((char *)a2 + 8), v5);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 20, 1);
  unint64_t v6 = (SsrwOOStream *)(*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  WrdParser::parseString(*((WrdParser **)this + 16), v6, (CsString *)((char *)a2 + 32), v7);
  int v8 = 5;
  do
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 20, 1);
    --v8;
  }
  while (v8);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 8, 1);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  if (result)
  {
    int v10 = result;
    do
    {
      unint64_t v11 = (WrdCommandDescription *)operator new(0xB0uLL);
      WrdCommandDescription::WrdCommandDescription(v11);
      WrdNewMenu::addCommandDescription(a2, v11);
      uint64_t result = WrdParser::parseCommandDescription(this, v11);
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_238E54F98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdParser::parseMenuCustomizationOperation(WrdParser *this, WrdMenuCustomizationOperation *a2, WrdOffsetPairList *a3)
{
  *((unsigned char *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  *((unsigned char *)a2 + 9) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  if (v7) {
    WrdOffsetPairList::addPair(a3, v6, v7);
  }
  (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  if (result)
  {
    *((unsigned char *)a2 + 20) = 1;
    (*(void (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    (*(void (**)(void, uint64_t, void))(**((void **)this + 16) + 16))(*((void *)this + 16), v7, 0);
    WrdParser::parseCommandDescription(this, (WrdMenuCustomizationOperation *)((char *)a2 + 24));
    (*(void (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
    uint64_t v9 = *(uint64_t (**)(void))(**((void **)this + 16) + 16);
    return v9();
  }
  return result;
}

void WrdOffsetPairList::addPair(WrdOffsetPairList *this, unsigned int a2, uint64_t a3)
{
  unint64_t v8 = *((void *)this + 2);
  unsigned int v6 = (char *)this + 16;
  unint64_t v7 = v8;
  uint64_t v9 = (unint64_t *)*((void *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = (unint64_t)v9 - *(void *)this;
    unint64_t v12 = (v7 - *(void *)this) >> 3;
    unsigned int v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1) {
      unsigned int v13 = (v11 >> 3) + 1;
    }
    if (v12 >= 0x7FFFFFFF) {
      unint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v6, v14);
      uint64_t v17 = v16;
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v17 = 0;
    }
    unsigned int v18 = &v15[v11 & 0x7FFFFFFF8];
    int v19 = &v15[8 * v17];
    *(void *)unsigned int v18 = a2 | (unint64_t)(a3 << 32);
    int v10 = v18 + 8;
    uint64_t v21 = *(char **)this;
    int v20 = (char *)*((void *)this + 1);
    if (v20 != *(char **)this)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      int v20 = *(char **)this;
    }
    *(void *)this = v18;
    *((void *)this + 1) = v10;
    *((void *)this + 2) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *uint64_t v9 = a2 | (unint64_t)(a3 << 32);
    int v10 = v9 + 1;
  }
  *((void *)this + 1) = v10;
}

uint64_t WrdParser::parseCommandDescription(WrdParser *this, WrdCommandDescription *a2)
{
  (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  *((unsigned char *)a2 + 8) = v4 == 10;
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((_WORD *)a2 + 5) = v5;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 5, 1);
  if (v5 != 1) {
    *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
  char v7 = result;
  if (v4 != 10)
  {
    if (result)
    {
      unsigned int v18 = (WrdParser *)*((void *)this + 16);
      int v19 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v18 + 64))(v18);
      WrdParser::parseString(v18, v19, (CsString *)a2 + 1, v20);
      if ((v7 & 4) == 0)
      {
LABEL_10:
        if ((v7 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_18;
      }
    }
    else if ((result & 4) == 0)
    {
      goto LABEL_10;
    }
    (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v21 = (WrdParser *)*((void *)this + 16);
    uint64_t v22 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v21 + 64))(v21);
    WrdParser::parseString(v21, v22, (CsString *)a2 + 3, v23);
    if ((v7 & 4) == 0) {
      goto LABEL_21;
    }
LABEL_19:
    int v24 = 6;
    do
    {
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      --v24;
    }
    while (v24);
LABEL_21:
    if ((v7 & 2) != 0)
    {
      int v25 = (WrdParser *)*((void *)this + 16);
      uint64_t v26 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v25 + 64))(v25);
      WrdParser::parseString(v25, v26, (CsString *)a2 + 4, v27);
    }
    if ((v7 & 4) != 0)
    {
      uint64_t v28 = (WrdParser *)*((void *)this + 16);
      unint64_t v29 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v28 + 64))(v28);
      WrdParser::parseString(v28, v29, (CsString *)a2 + 5, v30);
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      (*(void (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    }
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    char v31 = result;
    if ((result & 0x10) != 0)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
      *((_WORD *)a2 + 72) = result;
      if ((v31 & 8) == 0)
      {
LABEL_27:
        if ((v31 & 4) == 0) {
          return result;
        }
LABEL_31:
        unint64_t v11 = (WrdParser *)*((void *)this + 16);
        unint64_t v12 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v11 + 64))(v11);
        unint64_t v14 = (CsString *)((char *)a2 + 152);
LABEL_32:
        return (uint64_t)WrdParser::parseString(v11, v12, v14, v13);
      }
    }
    else if ((result & 8) == 0)
    {
      goto LABEL_27;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1164, 1);
    if ((v31 & 4) == 0) {
      return result;
    }
    goto LABEL_31;
  }
  if (v5 == 1)
  {
    if (result != 1) {
      return result;
    }
    unint64_t v8 = (WrdParser *)*((void *)this + 16);
    uint64_t v9 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v8 + 64))(v8);
    WrdParser::parseString(v8, v9, (CsString *)a2 + 1, v10);
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    if (result != 1) {
      return result;
    }
    unint64_t v11 = (WrdParser *)*((void *)this + 16);
    unint64_t v12 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v11 + 64))(v11);
    unint64_t v14 = (CsString *)((char *)a2 + 48);
    goto LABEL_32;
  }
  if (result == 1)
  {
    unsigned int v15 = (WrdParser *)*((void *)this + 16);
    unsigned int v16 = (SsrwOOStream *)(*(uint64_t (**)(WrdParser *))(*(void *)v15 + 64))(v15);
    WrdParser::parseString(v15, v16, (CsString *)a2 + 1, v17);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *((_DWORD *)a2 + 4) = result;
  return result;
}

CsString *WrdParser::parseString(WrdParser *this, SsrwOOStream *a2, CsString *a3, CsString *a4)
{
  int v5 = (int)a2;
  uint64_t result = CsString::setCount(a3, a2);
  if (v5)
  {
    int v8 = v5;
    return (CsString *)(*(uint64_t (**)(WrdParser *, int *, unsigned __int16 *))(*(void *)this + 136))(this, &v8, a3->var1);
  }
  return result;
}

void WrdNewMenu::addCommandDescription(WrdNewMenu *this, WrdCommandDescription *a2)
{
  unint64_t v6 = *((void *)this + 9);
  int v4 = (char *)this + 72;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 7);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 7);
    int v19 = (char *)*((void *)this + 8);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 7);
    }
    *((void *)this + 7) = v17;
    *((void *)this + 8) = v8;
    *((void *)this + 9) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 8) = v8;
}

void WrdCustomization::addMacroName(WrdCustomization *this, CsString *a2)
{
  unint64_t v6 = *((void *)this + 21);
  int v4 = (char *)this + 168;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 19);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 19);
    int v19 = (char *)*((void *)this + 20);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 19);
    }
    *((void *)this + 19) = v17;
    *((void *)this + 20) = v8;
    *((void *)this + 21) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 20) = v8;
}

void WrdCustomization::addUpcaseMacroName(WrdCustomization *this, CsString *a2)
{
  unint64_t v6 = *((void *)this + 24);
  int v4 = (char *)this + 192;
  unint64_t v5 = v6;
  char v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 22);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    unsigned int v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    int v8 = v17 + 8;
    int v20 = (char *)*((void *)this + 22);
    int v19 = (char *)*((void *)this + 23);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      int v19 = (char *)*((void *)this + 22);
    }
    *((void *)this + 22) = v17;
    *((void *)this + 23) = v8;
    *((void *)this + 24) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *char v7 = a2;
    int v8 = v7 + 1;
  }
  *((void *)this + 23) = v8;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFormFieldBinaryData *a2, uint64_t a3)
{
  uint64_t result = *((void *)this + 15);
  if (result)
  {
    char v7 = (SsrwOOStgInfo *)(*(uint64_t (**)(uint64_t))(*(void *)result + 168))(result);
    uint64_t result = SsrwOOStgInfo::getSize(v7);
    if (result > a3)
    {
      unsigned int v8 = result;
      unsigned int i = 0;
      uint64_t v9 = (OcBinaryData *)operator new(0x30uLL);
      OcBinaryData::OcBinaryData(v9);
      OcBinaryData::setMinimumCapacity(v9, 0x10u);
      (*(void (**)(void, uint64_t, void))(**((void **)this + 15) + 16))(*((void *)this + 15), a3, 0);
      unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
      unsigned int v11 = v10;
      if (a3) {
        unsigned int v12 = v10;
      }
      else {
        unsigned int v12 = v10 + 1;
      }
      if (v12 <= v8)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 2001;
      }
      int v13 = (*(uint64_t (**)(void))(**((void **)this + 15) + 80))(*((void *)this + 15));
      (*(void (**)(void, void, uint64_t))(**((void **)this + 15) + 16))(*((void *)this + 15), (v13 - 6), 1);
      int v14 = (*(uint64_t (**)(void))(**((void **)this + 15) + 64))(*((void *)this + 15));
      if ((v14 & 0xFFFFFFF7) != 0)
      {
        (*(void (**)(void, uint64_t, void))(**((void **)this + 15) + 16))(*((void *)this + 15), a3, 0);
        unsigned int i = v11;
        *((unsigned char *)a2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 1;
        OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 16), v11);
        (*(void (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 5), &i);
        unsigned int v15 = i;
        uint64_t result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 16), i);
        *((_DWORD *)a2 + 8) = v15;
        goto LABEL_9;
      }
      *((unsigned char *)a2 + 66) = v14 == 8;
      unsigned int i = 16;
      (*(void (**)(void, char *, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), v9->var5, &i);
      unsigned int v16 = i;
      OcBinaryData::setMinimumCapacity(v9, i);
      v9->int var3 = v16;
      var5 = v9->var5;
      uint64_t v19 = *(void *)var5;
      uint64_t v18 = *((void *)var5 + 1);
      if (v19 != 0x11CEBAF979EAC9D0 || v18 != 0xBA94B00AA00828CLL)
      {
        (*(void (**)(void, uint64_t, void))(**((void **)this + 15) + 16))(*((void *)this + 15), a3, 0);
        unsigned int i = v11;
        *((unsigned char *)a2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 1;
        OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 16), v11);
        (*(void (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 5), &i);
        unsigned int v21 = i;
        OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 16), i);
        *((_DWORD *)a2 + 8) = v21;
        return (*((uint64_t (**)(OcBinaryData *))v9->var0 + 1))(v9);
      }
      unsigned int v39 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
      int v22 = result;
      *((unsigned char *)a2 + 65) = (result & 2) != 0;
      if ((result & 0x80) != 0)
      {
        unsigned int v39 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
        WrdParser::parseString(*((WrdParser **)this + 15), (SsrwOOStream *)(v39 - 1), (CsString *)a2 + 5, v23);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 16))(*((void *)this + 15), 2, 1);
      }
      if ((~v22 & 0x14) == 0)
      {
        unsigned int v39 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
        WrdParser::parseString(*((WrdParser **)this + 15), (SsrwOOStream *)(v39 - 1), (CsString *)a2 + 7, v24);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 16))(*((void *)this + 15), 2, 1);
      }
      if ((v22 & 0x100) != 0)
      {
        unsigned int v34 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
        unsigned int v39 = v34;
      }
      else
      {
        if ((v22 & 1) == 0) {
          goto LABEL_44;
        }
        unsigned int i = 16;
        (*(void (**)(void, char *, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), v9->var5, &i);
        unsigned int v25 = i;
        uint64_t result = OcBinaryData::setMinimumCapacity(v9, i);
        v9->int var3 = v25;
        uint64_t v26 = v9->var5;
        if (*(void *)v26 != 0x11CEBAF979EAC9E0 || *((void *)v26 + 1) != 0xBA94B00AA00828CLL)
        {
          uint64_t v29 = *(void *)v26;
          uint64_t v28 = *((void *)v26 + 1);
          if (v29 == 771 && v28 == 0x46000000000000C0)
          {
            (*(void (**)(void))(**((void **)this + 15) + 80))(*((void *)this + 15));
            unsigned int v31 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
            unsigned int v39 = v31;
            *((_DWORD *)a2 + 20) = 1252;
            OcText::setMinimumCapacity((OcText *)((char *)a2 + 72), v31);
            (*(void (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 12), &v39);
            *((_DWORD *)a2 + 22) = v39 - 1;
            unsigned int i = 24;
            OcBinaryData::setMinimumCapacity(v9, 0x18u);
            (*(void (**)(void, char *, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), v9->var5, &i);
            unsigned int v32 = i;
            OcBinaryData::setMinimumCapacity(v9, i);
            v9->int var3 = v32;
            uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
            for (unsigned int i = result; i; unsigned int i = i - v38 - 6)
            {
              unsigned int v38 = 0;
              unsigned int v38 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
              uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
              if (result == 1)
              {
                OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 312), v38);
                (*(void (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 42), &v38);
                unsigned int v33 = v38;
                uint64_t result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 312), v38);
                *((_DWORD *)a2 + 82) = v33;
              }
              else if ((unsigned __int16)result == 3)
              {
                *((_DWORD *)a2 + 56) = 1;
                OcText::setMinimumCapacity((OcText *)((char *)a2 + 216), v38);
                uint64_t result = (*(uint64_t (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 30), &v38);
                *((_DWORD *)a2 + 58) = v38 >> 1;
              }
              else if ((unsigned __int16)result == 4)
              {
                *((_DWORD *)a2 + 68) = 1252;
                OcText::setMinimumCapacity((OcText *)((char *)a2 + 264), v38);
                uint64_t result = (*(uint64_t (**)(void, void, unsigned int *))(**((void **)this + 15) + 56))(*((void *)this + 15), *((void *)a2 + 36), &v38);
                *((_DWORD *)a2 + 70) = v38;
              }
            }
          }
          goto LABEL_44;
        }
        unsigned int v39 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
        unsigned int v34 = v39 >> 1;
      }
      WrdParser::parseString(*((WrdParser **)this + 15), (SsrwOOStream *)(v34 - 1), (CsString *)a2 + 8, v35);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 16))(*((void *)this + 15), 2, 1);
LABEL_44:
      if ((v22 & 8) != 0)
      {
        unsigned int v39 = (*(uint64_t (**)(void))(**((void **)this + 15) + 104))(*((void *)this + 15));
        uint64_t result = (uint64_t)WrdParser::parseString(*((WrdParser **)this + 15), (SsrwOOStream *)(v39 - 1), (CsString *)a2 + 6, v36);
      }
LABEL_9:
      if (!v9) {
        return result;
      }
      return (*((uint64_t (**)(OcBinaryData *))v9->var0 + 1))(v9);
    }
  }
  return result;
}

void sub_238E564DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdParser::parse(WrdParser *this, WrdWorkBook *a2)
{
  *((_WORD *)a2 + 4) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 5) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  *((_WORD *)a2 + 6) = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  unsigned __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16));
  *((_WORD *)a2 + 7) = v4 & 0xF;
  *((_WORD *)a2 + 8) = v4 >> 4;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
  *((_DWORD *)a2 + 5) = result;
  return result;
}

void WrdParser::parse(WrdParser *this, WrdWorkBookTable *a2)
{
  unint64_t v4 = (unint64_t)WrdParser::startFCLCB(this, 0x36u) >> 32;
  WrdWorkBookTable::clear(a2);
  if (v4 >= 4)
  {
    int v5 = (unsigned __int16)((v4 + 1048572) >> 4);
    if ((unsigned __int16)((v4 + 1048572) >> 4))
    {
      unsigned int v6 = 0;
      do
      {
        int v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
        WrdWorkBookTable::setCP(a2, v6++, v7);
      }
      while (v5 != v6);
    }
    *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 16) + 96))(*((void *)this + 16));
    if (v5)
    {
      int v8 = -v5;
      do
      {
        uint64_t v9 = (WrdWorkBook *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 65);
        WrdParser::parse(this, v9);
        WrdWorkBookTable::append(a2, v9);
      }
      while (!__CFADD__(v8++, 1));
    }
  }
}

void sub_238E56780(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

int *WrdParser::applyPiece(int *result, uint64_t a2, WrdCharacterProperties *a3, WrdParagraphProperties *a4, WrdCharacterProperties *a5, WrdParagraphProperties *a6, WrdCharacterProperties *a7, WrdTableProperties *a8, WrdTableProperties *a9, WrdSectionProperties *a10, WrdSectionProperties *a11, uint64_t *a12)
{
  uint64_t v15 = (uint64_t)a4;
  unsigned int v16 = result;
  unint64_t v17 = *(unsigned __int16 *)(a2 + 4);
  if (v17)
  {
    unint64_t v23 = v17 >> 1;
    uint64_t v24 = *((void *)result + 34);
    if (v23 >= *(unsigned __int16 *)(v24 + 10))
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
    (*(void (**)(void, void, void))(**((void **)result + 16) + 16))(*((void *)result + 16), *(unsigned int *)(*(void *)v24 + 4 * v23), 0);
    unsigned int v27 = (*(uint64_t (**)(void))(**((void **)v16 + 16) + 80))(*((void *)v16 + 16));
    return (int *)WrdParser::parseGrpprl(v16, *((void *)v16 + 16), v27, 1, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  else
  {
    if (!*(_WORD *)(a2 + 4)) {
      return result;
    }
    unsigned __int8 v34 = HIBYTE(*(_WORD *)(a2 + 4));
    int v18 = v17 & 0xFE;
    if (v18 > 0x99)
    {
      BOOL v19 = (v18 - 154) > 0x36 || ((1 << (v18 + 102)) & 0x40040401150001) == 0;
      if (v19 && v18 != 240) {
        return result;
      }
LABEL_8:
      __int16 v33 = 0;
      int v20 = operator new(0x10uLL);
      void *v20 = 0;
      v20[1] = 0;
      if (a5)
      {
        if (WrdCharacterProperties::doRevisionsExist(a7)) {
          uint64_t v21 = (uint64_t)a7;
        }
        else {
          uint64_t v21 = (uint64_t)a5;
        }
        if (v18 <= 187)
        {
          uint64_t v22 = 2101;
          switch(v18)
          {
            case 170:
              goto LABEL_41;
            case 171:
            case 173:
            case 175:
            case 176:
            case 177:
              return (int *)MEMORY[0x23EC997B0](v20, 0x1000C4099076E91);
            case 172:
              uint64_t v22 = 2102;
              goto LABEL_41;
            case 174:
              uint64_t v22 = 2103;
              goto LABEL_41;
            case 178:
              uint64_t v22 = 2105;
              goto LABEL_41;
            default:
              if (v18 != 154) {
                return (int *)MEMORY[0x23EC997B0](v20, 0x1000C4099076E91);
              }
              uint64_t v22 = 10764;
              break;
          }
          goto LABEL_41;
        }
        switch(v18)
        {
          case 188:
            uint64_t v22 = 10814;
            goto LABEL_41;
          case 196:
            uint64_t v22 = 10818;
            goto LABEL_41;
          case 208:
            uint64_t v22 = 10824;
LABEL_41:
            WrdPropertyParser::parseSPRM(v22, (uint64_t)v20);
            WrdChpParser::applySprm((WrdBaseParser *)(v16 + 63), v21, 0, (uint64_t)v20, &v34, (unsigned __int16 *)&v35, &v33);
            break;
        }
      }
      else if (v15)
      {
        int v32 = -1;
        if (WrdParagraphProperties::doRevisionsExist(a6)) {
          uint64_t v15 = (uint64_t)a6;
        }
        if (v18 == 10)
        {
          WrdPropertyParser::parseSPRM(9219, (uint64_t)v20);
          uint64_t v29 = (WrdBaseParser *)(v16 + 64);
          WrdPapParser::applySprm((WrdBaseParser *)(v16 + 64), v15, (uint64_t)v20, &v34, (unsigned __int16 *)&v35, &v33, &v32);
          if (v16[38] < 9) {
            return (int *)MEMORY[0x23EC997B0](v20, 0x1000C4099076E91);
          }
          WrdPropertyParser::parseSPRM(9313, (uint64_t)v20);
        }
        else
        {
          if (v18 == 16)
          {
            WrdPropertyParser::parseSPRM(9222, (uint64_t)v20);
          }
          else
          {
            if (v18 != 240) {
              return (int *)MEMORY[0x23EC997B0](v20, 0x1000C4099076E91);
            }
            WrdPropertyParser::parseSPRM(9792, (uint64_t)v20);
          }
          uint64_t v29 = (WrdBaseParser *)(v16 + 64);
        }
        WrdPapParser::applySprm(v29, v15, (uint64_t)v20, &v34, (unsigned __int16 *)&v35, &v33, &v32);
      }
      return (int *)MEMORY[0x23EC997B0](v20, 0x1000C4099076E91);
    }
    if (v18 == 10 || v18 == 16) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_238E56AF8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1000C4099076E91);
  _Unwind_Resume(a1);
}

void WrdParser::parse(WrdParser *this, WrdRoutingSlip *a2)
{
  WrdRoutingSlip::clear(a2);
  if ((unint64_t)WrdParser::startFCLCB(this, 0x46u) >> 32)
  {
    *((unsigned char *)a2 + 104) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16)) & 1;
    *((unsigned char *)a2 + 105) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16)) & 1;
    *((unsigned char *)a2 + 106) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16)) & 1;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
    *((_DWORD *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    *((_WORD *)a2 + 56) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    *((unsigned char *)a2 + 107) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16)) & 1;
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t v6 = v5 - 1;
    CsString::reserve((CsString *)((char *)a2 + 8), v6);
    CsString::setCount((CsString *)((char *)a2 + 8), v6);
    if (v5 >= 2)
    {
      int v7 = (_WORD *)*((void *)a2 + 2);
      int v8 = v7;
      do
      {
        __int16 v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
        if (v7) {
          *int v8 = v9;
        }
        ++v8;
        --v6;
      }
      while (v6);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
    unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t v11 = v10 - 1;
    CsString::reserve((CsString *)((char *)a2 + 32), v11);
    CsString::setCount((CsString *)((char *)a2 + 32), v11);
    if (v10 >= 2)
    {
      unsigned int v12 = (_WORD *)*((void *)a2 + 5);
      int v13 = v12;
      do
      {
        __int16 v14 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
        if (v12) {
          _WORD *v13 = v14;
        }
        ++v13;
        --v11;
      }
      while (v11);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
    unsigned int v15 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t v16 = v15 - 1;
    CsString::reserve((CsString *)((char *)a2 + 56), v16);
    CsString::setCount((CsString *)((char *)a2 + 56), v16);
    if (v15 >= 2)
    {
      unint64_t v17 = (_WORD *)*((void *)a2 + 8);
      int v18 = v17;
      do
      {
        __int16 v19 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
        if (v17) {
          _WORD *v18 = v19;
        }
        ++v18;
        --v16;
      }
      while (v16);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
    unsigned int v20 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
    uint64_t v21 = v20 - 1;
    CsString::reserve((CsString *)((char *)a2 + 80), v21);
    CsString::setCount((CsString *)((char *)a2 + 80), v21);
    if (v20 >= 2)
    {
      uint64_t v22 = (_WORD *)*((void *)a2 + 11);
      unint64_t v23 = v22;
      do
      {
        __int16 v24 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
        if (v22) {
          _WORD *v23 = v24;
        }
        ++v23;
        --v21;
      }
      while (v21);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
    if (v4)
    {
      for (unsigned int i = 0; i < v4; ++i)
      {
        uint64_t v26 = (WrdRoutingRecipient *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 46);
        WrdParser::parse(this, v26);
        WrdRoutingSlip::append(a2, v26);
      }
    }
  }
}

void sub_238E57084(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdParser::parse(WrdParser *this, WrdRoutingRecipient *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)((char *)this + 128);
  int v29 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
  int v5 = (*(uint64_t (**)(void))(*(void *)*v4 + 80))();
  unsigned int v30 = (*(uint64_t (**)(void))(*(void *)*v4 + 80))();
  (*(void (**)(void))(*(void *)*v4 + 104))();
  int v32 = 16;
  long long v33 = 0uLL;
  (*(void (**)(void, long long *, int *))(*(void *)*v4 + 56))(*v4, &v33, &v32);
  *((_OWORD *)a2 + 2) = v33;
  *((unsigned char *)a2 + 50) = (*(uint64_t (**)(void))(*(void *)*v4 + 80))() & 1;
  *((unsigned char *)a2 + 48) = (*(unsigned int (**)(void))(*(void *)*v4 + 64))() != 0;
  int v6 = (*(uint64_t (**)(void))(*(void *)*v4 + 64))();
  *((unsigned char *)a2 + 49) = v6 != 0;
  if (v6)
  {
    *((unsigned char *)a2 + 52) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
    *((unsigned char *)a2 + 53) = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))();
    *((_WORD *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))();
    int v7 = -4;
  }
  else
  {
    int v7 = 0;
  }
  if (*((unsigned char *)a2 + 50)) {
    (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  }
  unsigned int v31 = v5 + v7 - 28;
  int v8 = operator new[](v31);
  *((void *)this + 36) = v8;
  bzero(v8, v31);
  (*(void (**)(void, void, unsigned int *))(**((void **)this + 16) + 56))(*((void *)this + 16), *((void *)this + 36), &v31);
  unsigned int v9 = v31;
  if (v31)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    int v12 = *((unsigned __int8 *)a2 + 50);
    if (*((unsigned char *)a2 + 50)) {
      int v13 = 47;
    }
    else {
      int v13 = 0;
    }
    do
    {
      uint64_t v14 = *((void *)this + 36);
      uint64_t v15 = v9 - 1;
      if ((v13 == *(unsigned __int8 *)(v14 + v10) || v10 == v15) && v10 > v11)
      {
        if (v12) {
          BOOL v18 = 1;
        }
        else {
          BOOL v18 = v11 == 0;
        }
        int v19 = !v18;
        if (v18) {
          uint64_t v20 = v11;
        }
        else {
          uint64_t v20 = v11 + 1;
        }
        if (*(unsigned char *)(v14 + v20))
        {
          uint64_t v21 = (CsString *)operator new(0x18uLL);
          CsString::CsString(v21);
          CsString::append(v21, (const char *)(*((void *)this + 36) + v20), v10 - v11 - v19);
          WrdRoutingRecipient::addMailParameter(a2, v21);
        }
        else
        {
          uint64_t v21 = (CsString *)operator new(0x30uLL);
          OcBinaryData::OcBinaryData((OcBinaryData *)v21);
          OcBinaryData::copyBuffer((OcBinaryData *)v21, (const unsigned __int8 *)(*((void *)this + 36) + v20), v10 - v11 - v19);
          WrdRoutingRecipient::addMailParameter(a2, (const OcBinaryData *)v21);
        }
        (*((void (**)(CsString *))v21->var0 + 1))(v21);
        unsigned int v11 = v10;
      }
      ++v10;
      unsigned int v9 = v31;
    }
    while (v10 < v31);
  }
  uint64_t v22 = *((void *)this + 36);
  if (v22) {
    MEMORY[0x23EC99790](v22, 0x1000C8077774924);
  }
  *((void *)this + 36) = 0;
  if (!*((unsigned char *)a2 + 50)) {
    (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  }
  (*(void (**)(void, void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), (v29 + v5 + 4), 0);
  unint64_t v23 = (CsString *)((char *)a2 + 8);
  CsString::reserve((CsString *)((char *)a2 + 8), v30 - 1);
  CsString::setCount((CsString *)((char *)a2 + 8), v30 - 1);
  *((_DWORD *)a2 + 6) = 0;
  bzero(*((void **)a2 + 2), 2 * *((unsigned int *)a2 + 7));
  if (v30 >= 2)
  {
    __int16 v24 = (_WORD *)*((void *)a2 + 2);
    uint64_t v25 = v30 - 1;
    uint64_t v26 = v24;
    do
    {
      __int16 v27 = (*(uint64_t (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16));
      if (v24) {
        _WORD *v26 = v27;
      }
      ++v26;
      --v25;
    }
    while (v25);
  }
  CsString::setCount(v23, v30 - 1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 1, 1);
}

void sub_238E57640(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t WrdParser::parse(unint64_t this, WrdUserRestrictionMap *a2)
{
  if (*(unsigned __int16 *)(this + 232) >= 0x8Du)
  {
    unint64_t v3 = this;
    this = WrdParser::startFCLCB((WrdParser *)this, 0x8Du);
    if (HIDWORD(this))
    {
      (*(void (**)(void))(**(void **)(v3 + 128) + 80))(*(void *)(v3 + 128));
      int v4 = (*(uint64_t (**)(void))(**(void **)(v3 + 128) + 96))(*(void *)(v3 + 128));
      for (this = (*(uint64_t (**)(void))(**(void **)(v3 + 128) + 80))(*(void *)(v3 + 128)); v4; --v4)
      {
        (*(void (**)(void))(**(void **)(v3 + 128) + 80))(*(void *)(v3 + 128));
        __int16 v5 = (*(uint64_t (**)(void))(**(void **)(v3 + 128) + 80))(*(void *)(v3 + 128));
        WrdUserRestrictionMap::addUserIndex(a2, v5);
        (*(void (**)(void))(**(void **)(v3 + 128) + 80))(*(void *)(v3 + 128));
        this = (*(uint64_t (**)(void))(**(void **)(v3 + 128) + 96))(*(void *)(v3 + 128));
      }
    }
  }
  return this;
}

void WrdUserRestrictionMap::addUserIndex(WrdUserRestrictionMap *this, __int16 a2)
{
  int v4 = (char *)this + 24;
  unint64_t v5 = *((void *)this + 3);
  int v6 = (char *)*((void *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    int v8 = (char *)*((void *)this + 1);
    int64_t v9 = v6 - v8;
    unint64_t v10 = (unint64_t)(v6 - v8) >> 1;
    unint64_t v11 = (v5 - (unint64_t)v8) >> 1;
    if (2 * (int)v11 <= (v10 + 1)) {
      unsigned int v12 = v10 + 1;
    }
    else {
      unsigned int v12 = 2 * v11;
    }
    if (v11 >= 0x7FFFFFFF) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
      int v8 = (char *)*((void *)this + 1);
      int v6 = (char *)*((void *)this + 2);
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v14[v9 & 0x1FFFFFFFELL];
    BOOL v18 = &v14[2 * v16];
    *(_WORD *)unint64_t v17 = a2;
    int v7 = v17 + 2;
    while (v6 != v8)
    {
      __int16 v19 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v17 - 1) = v19;
      v17 -= 2;
    }
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)int v6 = a2;
    int v7 = v6 + 2;
  }
  *((void *)this + 2) = v7;
}

unint64_t WrdParser::parse(WrdParser *this, WrdXmlSchemaTable *a2)
{
  unint64_t result = (unint64_t)WrdXmlElementTable::clear(a2);
  if (*((unsigned __int16 *)this + 116) >= 0x89u)
  {
    unint64_t result = WrdParser::startFCLCB(this, 0x88u);
    if (HIDWORD(result))
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 48))(*((void *)this + 16));
      if (v5 - 1 < result)
      {
        do
        {
          int v6 = (WrdXmlSchema *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 75);
          WrdParser::parse((SsrwOOStream **)this, v6);
          int v7 = v6;
          WrdXmlElementTable::append(a2, (uint64_t *)&v7);
          unint64_t result = (unint64_t)v7;
          if (v7) {
            unint64_t result = (*(uint64_t (**)(WrdXmlSchema *))(*(void *)v7 + 8))(v7);
          }
          int v7 = 0;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

void sub_238E57A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

CsString *WrdParser::parse(SsrwOOStream **this, WrdXmlSchema *a2)
{
  SsrwOOStream::readCsString(this[16], (CsString *)((char *)a2 + 8));
  (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 4, 1);
  unsigned int v4 = (*((uint64_t (**)(SsrwOOStream *))this[16]->var0 + 13))(this[16]);
  unint64_t result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))this[16]->var0 + 6))(this[16]);
  if (v4 <= result)
  {
    (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 2, 1);
    for (; v4; --v4)
    {
      int v6 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v6);
      SsrwOOStream::readCsString(this[16], v6);
      unint64_t v10 = v6;
      WrdXmlElement::appendAttribute(a2, (uint64_t *)&v10);
      if (v10) {
        (*((void (**)(CsString *))v10->var0 + 1))(v10);
      }
      unint64_t v10 = 0;
    }
    (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 2, 1);
    unsigned int v7 = (*((uint64_t (**)(SsrwOOStream *))this[16]->var0 + 13))(this[16]);
    unint64_t result = (CsString *)(*((uint64_t (**)(SsrwOOStream *))this[16]->var0 + 6))(this[16]);
    if (v7 <= result)
    {
      for (unint64_t result = (CsString *)(*((uint64_t (**)(SsrwOOStream *, uint64_t, uint64_t))this[16]->var0 + 2))(this[16], 2, 1); v7; --v7)
      {
        int v8 = (CsString *)operator new(0x18uLL);
        CsString::CsString(v8);
        SsrwOOStream::readCsString(this[16], v8);
        int64_t v9 = v8;
        WrdXmlSchema::appendAttribute(a2, (uint64_t *)&v9);
        unint64_t result = v9;
        if (v9) {
          unint64_t result = (CsString *)(*((uint64_t (**)(CsString *))v9->var0 + 1))(v9);
        }
        int64_t v9 = 0;
      }
    }
  }
  return result;
}

void sub_238E57CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    WrdParser::parse();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WrdParser::parse(WrdParser *this, WrdXmlElementTable *a2)
{
  unint64_t result = WrdXmlElementTable::clear(a2);
  if (*((unsigned __int16 *)this + 116) >= 0x8Cu)
  {
    unint64_t result = (uint64_t *)WrdParser::parseDefinitions(this, a2);
    if (((*((void *)a2 + 2) - *((void *)a2 + 1)) & 0x7FFFFFFF8) != 0)
    {
      WrdParser::parseStartPositions(this, a2);
      return WrdParser::parseEndPositions(this, a2);
    }
  }
  return result;
}

unint64_t WrdParser::parseDefinitions(WrdParser *this, WrdXmlElementTable *a2)
{
  unint64_t result = WrdParser::startFCLCB(this, 0x89u);
  if (HIDWORD(result))
  {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
    unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
    unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 16) + 48))(*((void *)this + 16));
    if (v5 <= result)
    {
      for (unint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1); v5; --v5)
      {
        int v6 = (WrdXmlElement *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 73);
        WrdParser::parse(this, v6);
        unsigned int v7 = v6;
        WrdXmlElementTable::append(a2, (uint64_t *)&v7);
        unint64_t result = (unint64_t)v7;
        if (v7) {
          unint64_t result = (*(uint64_t (**)(WrdXmlElement *))(*(void *)v7 + 8))(v7);
        }
        unsigned int v7 = 0;
      }
    }
  }
  return result;
}

void sub_238E57F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdParser::parseStartPositions(WrdParser *this, WrdXmlElementTable *a2)
{
  unint64_t v4 = *((void *)a2 + 2) - *((void *)a2 + 1);
  uint64_t result = WrdParser::startFCLCB(this, 0x8Au);
  if (14 * (v4 >> 3) + 4 != HIDWORD(result))
  {
    ChLogFunction("Wrong number of XML element start positions", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 4643);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  if ((v4 >> 3))
  {
    unint64_t v6 = 0;
    uint64_t v7 = (v4 >> 3);
    do
    {
      int v8 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      int v13 = 0;
      int v14 = v8;
      uint64_t result = WrdParser::convertToRelativeCP((uint64_t)this, &v14, &v13, 1);
      uint64_t v9 = *((void *)a2 + 1);
      if (v6 >= ((unint64_t)(*((void *)a2 + 2) - v9) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v10 = *(void *)(v9 + 8 * v6);
      int v11 = v14;
      *(_DWORD *)(v10 + 16) = v13;
      *(_DWORD *)(v10 + 20) = v11;
      ++v6;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t *WrdParser::parseEndPositions(WrdParser *this, WrdXmlElementTable *a2)
{
  unint64_t v4 = *((void *)a2 + 2) - *((void *)a2 + 1);
  unint64_t v5 = v4 >> 3;
  if (12 * (v4 >> 3) + 4 != (unint64_t)WrdParser::startFCLCB(this, 0x8Bu) >> 32)
  {
    ChLogFunction("Wrong number of XML element end positions", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 4682);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 2001;
  }
  unint64_t v6 = (char **)operator new(0x18uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  WrdXmlElement *v6 = 0;
  uint64_t v36 = v6;
  std::vector<int,ChAllocator<int>>::reserve((void **)v6, v4 >> 3);
  if (v5)
  {
    int v7 = 0;
    do
    {
      int v8 = v36;
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      int v10 = v9;
      unint64_t v11 = (unint64_t)v36[2];
      unsigned int v12 = v36[1];
      if ((unint64_t)v12 >= v11)
      {
        int v14 = *v36;
        unint64_t v15 = v12 - *v36;
        unint64_t v16 = (v11 - (unint64_t)*v36) >> 2;
        if (2 * (int)v16 <= (v15 >> 2) + 1) {
          unsigned int v17 = (v15 >> 2) + 1;
        }
        else {
          unsigned int v17 = 2 * v16;
        }
        if (v16 >= 0x7FFFFFFF) {
          unint64_t v18 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18)
        {
          __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)(v36 + 2), v18);
          uint64_t v21 = v20;
          int v14 = *v36;
          unsigned int v12 = v36[1];
        }
        else
        {
          __int16 v19 = 0;
          uint64_t v21 = 0;
        }
        uint64_t v22 = &v19[v15 & 0x3FFFFFFFCLL];
        *(_DWORD *)uint64_t v22 = v10;
        int v13 = v22 + 4;
        while (v12 != v14)
        {
          int v23 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        *int v8 = v22;
        v8[1] = v13;
        unsigned __int16 v8[2] = &v19[4 * v21];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v12 = v9;
        int v13 = v12 + 4;
      }
      v8[1] = v13;
      ++v7;
    }
    while (v7 != v5);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  if (v5)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 4 * (v4 >> 3);
    do
    {
      unsigned int v26 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
      if (v26 >= v5)
      {
        ChLogFunction("Bad XML element index", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 4705);
        int v32 = __cxa_allocate_exception(4uLL);
        *int v32 = 2001;
      }
      int v27 = *(_DWORD *)&(*v36)[v24];
      int v34 = 0;
      int v35 = v27;
      WrdParser::convertToRelativeCP((uint64_t)this, &v35, &v34, 0);
      uint64_t v28 = *((void *)a2 + 1);
      if (v26 >= ((unint64_t)(*((void *)a2 + 2) - v28) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v29 = *(void *)(v28 + 8 * v26);
      if (v34 != *(_DWORD *)(v29 + 16))
      {
        ChLogFunction("Start CP and end CP of XML element are not in the same text type.", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 4716);
        unsigned int v31 = __cxa_allocate_exception(4uLL);
        *unsigned int v31 = 2001;
      }
      *(_DWORD *)(v29 + 24) = v35;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
      v24 += 4;
    }
    while (v25 != v24);
  }
  return ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)&v36);
}

void sub_238E58458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChAutoPtr<ChVector<unsigned short>>::~ChAutoPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

WrdXmlAttribute *WrdParser::parse(WrdParser *this, WrdXmlElement *a2)
{
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 2, 1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1);
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  WrdXmlElement::setDisplayType((uint64_t)a2, v4);
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  for (uint64_t result = (WrdXmlAttribute *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), 4, 1); v5; --v5)
  {
    int v7 = (WrdXmlAttribute *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), 71);
    WrdParser::parse(this, v7);
    int v8 = v7;
    WrdXmlElement::appendAttribute(a2, (uint64_t *)&v8);
    uint64_t result = v8;
    if (v8) {
      uint64_t result = (WrdXmlAttribute *)(*(uint64_t (**)(WrdXmlAttribute *))(*(void *)v8 + 8))(v8);
    }
    int v8 = 0;
  }
  return result;
}

void sub_238E58688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdParser::convertToRelativeCP(uint64_t a1, _DWORD *a2, int *a3, int a4)
{
  unint64_t v6 = a2;
  LOWORD(a2) = 0;
  uint64_t v7 = a1 + 160;
  *a3 = 0;
  while (1)
  {
    uint64_t result = WrdFileInformationBlock::getNumberOfCharInText(v7, (__int16)a2);
    int v9 = *v6 == result ? a4 : 0;
    if (*v6 <= result && v9 == 0) {
      break;
    }
    *v6 -= result;
    int v11 = *a3;
    LODWORD(a2) = *a3 + 1;
    *a3 = (int)a2;
    if (v11 >= 7)
    {
      ChLogFunction("Character position is not within the document text range.", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 4827);
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
  }
  return result;
}

CsString *WrdParser::parse(WrdParser *this, WrdXmlAttribute *a2)
{
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  int v4 = (SsrwOOStream *)*((void *)this + 16);
  return SsrwOOStream::readCsString(v4, (CsString *)((char *)a2 + 16));
}

unsigned __int16 *WrdParser::parse(unsigned __int16 *this, OcMsoEnvelope *a2)
{
  if (this[116] >= 0x62u
    && (unint64_t v3 = this, this = (unsigned __int16 *)WrdParser::startFCLCB((WrdParser *)this, 0x61u), HIDWORD(this)))
  {
    int v4 = (SsrwOOStream *)*((void *)v3 + 16);
    return (unsigned __int16 *)OcParser::parse((OcParser *)v3, a2, v4, (uint64_t)this, SHIDWORD(this));
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return this;
}

unint64_t WrdParser::parse(unint64_t this, WrdVersionInfoTable *a2)
{
  if (*(unsigned __int16 *)(this + 232) >= 0x5Cu)
  {
    unint64_t v3 = (WrdParser *)this;
    this = WrdParser::startFCLCB((WrdParser *)this, 0x5Cu);
    unint64_t v4 = HIDWORD(this);
    if (HIDWORD(this))
    {
      int v5 = this;
      (*(void (**)(void *))(**((void **)v3 + 16) + 80))(*((void **)v3 + 16));
      int v6 = (*(uint64_t (**)(void *))(**((void **)v3 + 16) + 104))(*((void **)v3 + 16));
      if (v6)
      {
        int v7 = v6;
        do
        {
          int v8 = (WrdVersionInfo *)operator new(0x40uLL);
          WrdVersionInfo::WrdVersionInfo(v8);
          WrdParser::parse(v3, v8);
          WrdEmbeddedTrueTypeFontTable::append(a2, v8);
          --v7;
        }
        while (v7);
      }
      if ((*(unsigned int (**)(void *))(**((void **)v3 + 16) + 40))(*((void **)v3 + 16)) > (int)v4 + v5)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 2001;
      }
      int v9 = *(uint64_t (**)(void))(**((void **)v3 + 16) + 16);
      return v9();
    }
  }
  return this;
}

void sub_238E58A04(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdAnnotation::clone(v1);
  }
  _Unwind_Resume(exception_object);
}

CsString *WrdParser::parse(WrdParser *this, WrdVersionInfo *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 16) + 40))(*((void *)this + 16));
  (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  (*(void (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16));
  (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  *(_DWORD *)int v11 = (*(uint64_t (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  int v6 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v6);
  WrdBaseParser::parseBuffer(this, (WrdDateTime *)((char *)a2 + 8), v11, (unsigned __int8 *)&v12);
  (*(void (**)(void))(**((void **)this + 16) + 104))(*((void *)this + 16));
  int v7 = (WrdParser *)*((void *)this + 16);
  int v8 = (*(uint64_t (**)(WrdParser *))(*(void *)v7 + 40))(v7);
  uint64_t result = WrdParser::parseString(v7, (SsrwOOStream *)((v5 + 2 * v4 - v8) >> 1), (CsString *)((char *)a2 + 40), v9);
  if (v6) {
    return (CsString *)(*((uint64_t (**)(WrdDateTime *))v6->var0 + 1))(v6);
  }
  return result;
}

void sub_238E58C5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdPicParser::applySprm(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  if (a4 && *(_DWORD *)a3 == 3)
  {
    int v11 = (WrdBaseParser *)result;
    uint64_t result = WrdProperty::getSizeOfSPRMParameter(a3);
    *a6 = result;
    if (!v13 & v12)
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x6C02:
          int v14 = a2;
          int v15 = 1;
          goto LABEL_21;
        case 0x6C03:
          int v14 = a2;
          int v15 = 0;
          goto LABEL_21;
        case 0x6C04:
          int v14 = a2;
          int v15 = 3;
          goto LABEL_21;
        case 0x6C05:
          int v14 = a2;
          int v15 = 2;
LABEL_21:
          BorderReference = (WrdBorder *)WrdPictureProperties::getBorderReference(v14, v15);
          uint64_t result = WrdBaseParser::parseBRC80(v11, BorderReference, (unsigned __int16 *)a4, a5);
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0xCE01:
          if (*(unsigned __int8 *)(a3 + 13) >= 0xCu)
          {
            *((_WORD *)a2 + 46) = CsLeReadSInt16((__int16 *)a4);
            *((_WORD *)a2 + 47) = CsLeReadSInt16((__int16 *)(a4 + 2));
            *((_WORD *)a2 + 40) = CsLeReadSInt16((__int16 *)(a4 + 4));
            *((_WORD *)a2 + 41) = CsLeReadSInt16((__int16 *)(a4 + 6));
            *((_WORD *)a2 + 42) = CsLeReadSInt16((__int16 *)(a4 + 8));
            uint64_t result = CsLeReadSInt16((__int16 *)(a4 + 10));
            *((_WORD *)a2 + 43) = result;
          }
          return result;
        case 0xCE02:
        case 0xCE03:
        case 0xCE04:
        case 0xCE05:
        case 0xCE06:
        case 0xCE07:
          return result;
        case 0xCE08:
          unint64_t v16 = a2;
          int v17 = 1;
          goto LABEL_15;
        case 0xCE09:
          unint64_t v16 = a2;
          int v17 = 0;
          goto LABEL_15;
        case 0xCE0A:
          unint64_t v16 = a2;
          int v17 = 3;
          goto LABEL_15;
        case 0xCE0B:
          unint64_t v16 = a2;
          int v17 = 2;
LABEL_15:
          unint64_t v18 = (WrdBorder *)WrdPictureProperties::getBorderReference(v16, v17);
          uint64_t result = WrdBaseParser::parseBuffer(v11, v18, (const unsigned __int8 *)a4, (const unsigned __int8 *)a5);
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  return result;
}

BOOL WrdPropertyParser::isSPRMRelatedToTrackChanges(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 8);
  BOOL result = 1;
  if (v3 <= 51809)
  {
    if (v3 <= 50750)
    {
      BOOL v5 = v3 == 10883;
      int v6 = 12857;
    }
    else
    {
      BOOL v5 = v3 == 50751 || v3 == 50799;
      int v6 = 51799;
    }
    goto LABEL_13;
  }
  if (v3 > 53798)
  {
    BOOL v5 = v3 == 53799 || v3 == 53827;
    int v6 = 54887;
LABEL_13:
    if (!v5 && v3 != v6) {
      return 0;
    }
    return result;
  }
  if (v3 == 51810)
  {
    if ((unint64_t)a2 >= a3)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2001;
    }
    return *a2 != 0;
  }
  else if (v3 != 51849)
  {
    return 0;
  }
  return result;
}

void WrdSepParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5, _WORD *a6)
{
  if (!a4) {
    goto LABEL_127;
  }
  int v7 = a4;
  if (a4 >= (unsigned __int8 *)a5) {
    goto LABEL_127;
  }
  if (*(_DWORD *)a3 != 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v27 = 2002;
LABEL_129:
    _DWORD *exception = v27;
  }
  unsigned int SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter(a3);
  *a6 = SizeOfSPRMParameter;
  if ((char *)a5 - (char *)v7 < SizeOfSPRMParameter)
  {
LABEL_127:
    exception = __cxa_allocate_exception(4uLL);
    int v27 = 1004;
    goto LABEL_129;
  }
  unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
  if (v13 <= 0x503E)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x303Bu)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x5007u)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x3228u)
        {
          switch(v13)
          {
            case 0x303Cu:
              *(_DWORD *)(a2 + 268) = *v7;
              uint64_t v14 = *(void *)(a2 + 16) | 0x400000000000000;
              break;
            case 0x303Eu:
              *(_DWORD *)(a2 + 272) = *v7;
              uint64_t v14 = *(void *)(a2 + 16) | 0x800000000000000;
              break;
            case 0x3228u:
              *(unsigned char *)(a2 + 246) = *v7;
              uint64_t v14 = *(void *)(a2 + 16) | 0x4000000000000;
              break;
            default:
              return;
          }
        }
        else if (*(unsigned __int16 *)(a3 + 8) > 0x3238u)
        {
          if (v13 == 12857)
          {
            *(_WORD *)(a2 + 230) = *v7;
            uint64_t v14 = *(void *)(a2 + 16) | 0x4000000000;
          }
          else
          {
            if (v13 != 20487) {
              return;
            }
            *(_WORD *)(a2 + 218) = CsLeReadUInt16((unsigned __int16 *)v7);
            uint64_t v14 = *(void *)(a2 + 16) | 0x100000000;
          }
        }
        else if (v13 == 12841)
        {
          *(unsigned char *)(a2 + 247) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x8000000000000;
        }
        else
        {
          if (v13 != 12842) {
            return;
          }
          *(unsigned char *)(a2 + 248) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x10000000000000;
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x501Bu)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0x5031u)
        {
          if (v13 == 20530)
          {
            *(_DWORD *)(a2 + 100) = CsLeReadUInt16((unsigned __int16 *)v7);
            uint64_t v14 = *(void *)(a2 + 16) | 0x2000;
          }
          else
          {
            if (v13 != 20531) {
              return;
            }
            *(_DWORD *)(a2 + 108) = CsLeReadUInt16((unsigned __int16 *)v7);
            uint64_t v14 = *(void *)(a2 + 16) | 0x8000;
          }
        }
        else if (v13 == 20508)
        {
          *(_WORD *)(a2 + 224) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x800000000;
        }
        else
        {
          if (v13 != 20518) {
            return;
          }
          *(_WORD *)(a2 + 222) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x400000000;
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x5014u)
      {
        if (v13 == 20501)
        {
          *(_WORD *)(a2 + 216) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x80000000;
        }
        else
        {
          if (v13 != 20507) {
            return;
          }
          *(_WORD *)(a2 + 234) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x10000000000;
        }
      }
      else if (v13 == 20488)
      {
        *(_WORD *)(a2 + 220) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x200000000;
      }
      else
      {
        if (v13 != 20491) {
          return;
        }
        *(_WORD *)(a2 + 236) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x20000000000;
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x3000:
          *(unsigned char *)(a2 + 241) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x200000000000;
          goto LABEL_125;
        case 0x3001:
          *(unsigned char *)(a2 + 244) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x1000000000000;
          goto LABEL_125;
        case 0x3002:
        case 0x3003:
        case 0x3004:
        case 0x3007:
        case 0x3008:
        case 0x300B:
        case 0x300C:
        case 0x300F:
        case 0x3010:
        case 0x3014:
        case 0x3015:
        case 0x3016:
        case 0x3017:
        case 0x3018:
        case 0x301B:
        case 0x301C:
          return;
        case 0x3005:
          *(unsigned char *)(a2 + 245) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x2000000000000;
          goto LABEL_125;
        case 0x3006:
          *(unsigned char *)(a2 + 240) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x100000000000;
          goto LABEL_125;
        case 0x3009:
          *(_DWORD *)(a2 + 72) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x40;
          goto LABEL_125;
        case 0x300A:
          *(unsigned char *)(a2 + 239) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x80000000000;
          goto LABEL_125;
        case 0x300D:
          *(unsigned char *)(a2 + 238) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x40000000000;
          goto LABEL_125;
        case 0x300E:
          *(_DWORD *)(a2 + 80) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x100;
          goto LABEL_125;
        case 0x3011:
          *(unsigned char *)(a2 + 242) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x400000000000;
          goto LABEL_125;
        case 0x3012:
          *(_DWORD *)(a2 + 256) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x80000000000000;
          goto LABEL_125;
        case 0x3013:
          *(_DWORD *)(a2 + 76) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x80;
          goto LABEL_125;
        case 0x3019:
          *(unsigned char *)(a2 + 243) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x800000000000;
          goto LABEL_125;
        case 0x301A:
          *(_DWORD *)(a2 + 84) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x200;
          goto LABEL_125;
        case 0x301D:
          *(_DWORD *)(a2 + 104) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x4000;
          goto LABEL_125;
        default:
          if (v13 != 12347) {
            return;
          }
          *(_DWORD *)(a2 + 252) = *v7;
          uint64_t v14 = *(void *)(a2 + 16) | 0x40000000000000;
          break;
      }
    }
    goto LABEL_125;
  }
  if (*(unsigned __int16 *)(a3 + 8) <= 0xB00Eu)
  {
    if (*(unsigned __int16 *)(a3 + 8) <= 0x900Bu)
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x702B:
          unint64_t v16 = *(WrdBorder **)(a2 + 24);
          *(void *)(a2 + 16) |= 1uLL;
          goto LABEL_76;
        case 0x702C:
          *(void *)(a2 + 16) |= 2uLL;
          unint64_t v16 = *(WrdBorder **)(a2 + 32);
          goto LABEL_76;
        case 0x702D:
          *(void *)(a2 + 16) |= 4uLL;
          unint64_t v16 = *(WrdBorder **)(a2 + 40);
          goto LABEL_76;
        case 0x702E:
          *(void *)(a2 + 16) |= 8uLL;
          unint64_t v16 = *(WrdBorder **)(a2 + 48);
LABEL_76:
          WrdBaseParser::parseBRC80(a1, v16, (unsigned __int16 *)v7, a5);
          return;
        case 0x702F:
          return;
        case 0x7030:
          *(_DWORD *)(a2 + 116) = CsLeReadSInt32((unsigned int *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x20000;
          goto LABEL_125;
        default:
          JUMPOUT(0);
      }
    }
    if (*(unsigned __int16 *)(a3 + 8) <= 0x9022u)
    {
      if (v13 == 36876)
      {
        *(_DWORD *)(a2 + 132) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x200000;
      }
      else
      {
        if (v13 != 36886) {
          return;
        }
        *(_DWORD *)(a2 + 112) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x10000;
      }
    }
    else
    {
      switch(v13)
      {
        case 0x9023u:
          *(_DWORD *)(a2 + 124) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x80000;
          break;
        case 0x9024u:
          *(_DWORD *)(a2 + 128) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x100000;
          break;
        case 0x9031u:
          *(_DWORD *)(a2 + 120) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x40000;
          break;
        default:
          return;
      }
    }
LABEL_125:
    *(void *)(a2 + 16) = v14;
    return;
  }
  if (*(unsigned __int16 *)(a3 + 8) > 0xD226u)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0xD242u)
    {
      switch(v13)
      {
        case 0xD243u:
LABEL_70:
          *(_WORD *)(a2 + 230) = *v7;
          *(void *)(a2 + 16) |= 0x4000000000uLL;
          *(_WORD *)(a2 + 232) = CsLeReadSInt16((__int16 *)(v7 + 1));
          *(void *)(a2 + 16) |= 0x8000000010uLL;
          unsigned int v20 = *(WrdDateTime **)(a2 + 56);
          WrdBaseParser::parseBuffer(a1, v20, v7 + 3, (unsigned __int8 *)a5);
          break;
        case 0xF203u:
          if (*v7 <= *(__int16 *)(a2 + 236))
          {
            int UInt16 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
            unsigned int v25 = *v7;
            WrdSectionProperties::setColumnWidthSpacing((WrdSectionProperties *)a2, v25, UInt16);
          }
          break;
        case 0xF204u:
          int v17 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
          unsigned int v18 = *v7;
          WrdSectionProperties::setColumnGap((WrdSectionProperties *)a2, v18, v17);
          break;
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0xD234:
          int v15 = *(WrdBorder **)(a2 + 24);
          *(void *)(a2 + 16) |= 1uLL;
          goto LABEL_104;
        case 0xD235:
          *(void *)(a2 + 16) |= 2uLL;
          int v15 = *(WrdBorder **)(a2 + 32);
          goto LABEL_104;
        case 0xD236:
          *(void *)(a2 + 16) |= 4uLL;
          int v15 = *(WrdBorder **)(a2 + 40);
          goto LABEL_104;
        case 0xD237:
          *(void *)(a2 + 16) |= 8uLL;
          int v15 = *(WrdBorder **)(a2 + 48);
LABEL_104:
          WrdBaseParser::parseBuffer(a1, v15, v7, (const unsigned __int8 *)a5);
          break;
        case 0xD238:
          int v21 = 0;
          do
          {
            *(void *)(a2 + 16) |= 0x20uLL;
            unsigned int v22 = v21;
            uint64_t EmbeddedFontReference = (CsColour *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(*(WrdEmbeddedTTFRecordTable **)(a2 + 64), v21);
            WrdBaseParser::parseBuffer(a1, EmbeddedFontReference + 1, v7, (const unsigned __int8 *)a5);
            v7 += 4;
            ++v21;
          }
          while (v22 < 8);
          break;
        default:
          if (v13 == 53799) {
            goto LABEL_70;
          }
          break;
      }
    }
  }
  else
  {
    switch(*(_WORD *)(a3 + 8))
    {
      case 0xB00F:
        *(_WORD *)(a2 + 228) = CsLeReadSInt16((__int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x2000000000;
        goto LABEL_125;
      case 0xB010:
        *(_WORD *)(a2 + 226) = CsLeReadSInt16((__int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x1000000000;
        goto LABEL_125;
      case 0xB011:
      case 0xB012:
      case 0xB013:
      case 0xB014:
      case 0xB015:
      case 0xB016:
      case 0xB019:
      case 0xB01A:
      case 0xB01B:
      case 0xB01C:
      case 0xB01D:
      case 0xB01E:
        return;
      case 0xB017:
        *(_DWORD *)(a2 + 156) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x8000000;
        goto LABEL_125;
      case 0xB018:
        *(_DWORD *)(a2 + 160) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x10000000;
        goto LABEL_125;
      case 0xB01F:
        *(_DWORD *)(a2 + 136) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x400000;
        goto LABEL_125;
      case 0xB020:
        *(_DWORD *)(a2 + 140) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x800000;
        goto LABEL_125;
      case 0xB021:
        *(_DWORD *)(a2 + 144) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x1000000;
        goto LABEL_125;
      case 0xB022:
        *(_DWORD *)(a2 + 148) = CsLeReadUInt16((unsigned __int16 *)v7);
        uint64_t v14 = *(void *)(a2 + 16) | 0x2000000;
        goto LABEL_125;
      default:
        if (v13 == 45093)
        {
          *(_DWORD *)(a2 + 152) = CsLeReadUInt16((unsigned __int16 *)v7);
          uint64_t v14 = *(void *)(a2 + 16) | 0x4000000;
          goto LABEL_125;
        }
        if (v13 == 53762)
        {
          *(void *)(a2 + 16) |= 0x20uLL;
          __int16 v19 = *(WrdOutlineListData **)(a2 + 64);
          WrdBaseParser::parseOLST80(a1, v19, v7, (const unsigned __int8 *)a5);
        }
        break;
    }
  }
}

uint64_t *WrdSectionProperties::setColumnWidthSpacing(WrdSectionProperties *this, unsigned int a2, int a3)
{
  *((void *)this + 2) |= 0x40000000uLL;
  unsigned int v5 = a2;
  int v6 = &v5;
  BOOL result = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 24, &v5, (uint64_t)&std::piecewise_construct, &v6);
  *((_DWORD *)result + 8) = a3;
  return result;
}

uint64_t *WrdSectionProperties::setColumnGap(WrdSectionProperties *this, unsigned int a2, int a3)
{
  *((void *)this + 2) |= 0x20000000uLL;
  unsigned int v5 = a2;
  int v6 = &v5;
  BOOL result = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 21, &v5, (uint64_t)&std::piecewise_construct, &v6);
  *((_DWORD *)result + 8) = a3;
  return result;
}

uint64_t WrdTapParser::parsePartOfTableCellDescriptor(WrdTapParser *this, WrdTableCellDescriptor *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a3 || a3 >= a4 || (unint64_t)((char *)a4 - (char *)a3) <= 0x13)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  unsigned int UInt16 = CsLeReadUInt16(a3);
  WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(a2, UInt16 & 1);
  WrdTableCellDescriptor::setIsMergedWithPrecedingCell(a2, (UInt16 & 2) != 0);
  WrdTableCellDescriptor::setVerticalTextFlow(a2, (UInt16 & 4) != 0);
  WrdTableCellDescriptor::setBottomToTopTextFlow(a2, (UInt16 & 8) != 0);
  WrdTableCellDescriptor::setRotateFont(a2, (UInt16 & 0x10) != 0);
  WrdTableCellDescriptor::setIsVerticallyMergedCell(a2, (UInt16 & 0x20) != 0);
  WrdTableCellDescriptor::setIsFirstInSetOfVerticallyMergedCells(a2, (UInt16 & 0x40) != 0);
  WrdTableCellDescriptor::setVerticalCellAlignment((uint64_t)a2, (UInt16 >> 7) & 3);
  if (*(int *)this >= 9)
  {
    WrdTableCellDescriptor::setWidthUnit((uint64_t)a2, (UInt16 >> 9) & 7);
    WrdTableCellDescriptor::setFitText(a2, (UInt16 & 0x1000) != 0);
    WrdTableCellDescriptor::setNoWrap(a2, (UInt16 & 0x2000) != 0);
  }
  __int16 SInt16 = CsLeReadSInt16((__int16 *)a3 + 1);
  WrdTableCellDescriptor::setWidth(a2, SInt16);
  TopBorderReference = (WrdBorder *)WrdTableCellDescriptor::getTopBorderReference(a2);
  WrdBaseParser::parseBRC80(this, TopBorderReference, a3 + 2, a4);
  LeftBorderReference = (WrdBorder *)WrdTableCellDescriptor::getLeftBorderReference(a2);
  WrdBaseParser::parseBRC80(this, LeftBorderReference, a3 + 4, a4);
  BottomBorderReference = (WrdBorder *)WrdTableCellDescriptor::getBottomBorderReference(a2);
  WrdBaseParser::parseBRC80(this, BottomBorderReference, a3 + 6, a4);
  RightBorderReference = (WrdBorder *)WrdTableCellDescriptor::getRightBorderReference(a2);
  return WrdBaseParser::parseBRC80(this, RightBorderReference, a3 + 8, a4);
}

uint64_t WrdTableProperties::getTableCellDescriptor(WrdTableProperties *this, unsigned int a2)
{
  if ((int)a2 >= *((__int16 *)this + 172))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *(void *)(*((void *)this + 34) + 8 * a2);
}

uint64_t WrdTapParser::parseTableAutoformatLookSpecifier(WrdTapParser *this, WrdTableAutoformatLookSpecifier *a2, unsigned __int8 *a3)
{
  *((_DWORD *)a2 + 2) = CsLeReadSInt16((__int16 *)a3);
  uint64_t result = CsLeReadSInt16((__int16 *)a3 + 1);
  *((_WORD *)a2 + 6) = *((_WORD *)a2 + 6) & 0xFE00 | result & 0x1FF;
  return result;
}

void WrdStreamer::~WrdStreamer(OCCBinaryStreamer *this)
{
  OCCBinaryStreamer::~OCCBinaryStreamer(this);
  JUMPOUT(0x23EC997B0);
}

void WrdStreamer::WrdStreamer(WrdStreamer *this, WrdBinaryReader *a2, OCCCryptoKey *a3, const char *a4)
{
  OCCBinaryStreamer::OCCBinaryStreamer((OCCBinaryStreamer *)this, a3, a4);
  void *v6 = &unk_26EBE7878;
  v6[3] = a2;
  OCCSegmenter::OCCSegmenter((OCCSegmenter *)(v6 + 4), 512);
  *((void *)this + 4) = &unk_26EBD99D0;
}

void sub_238E5A12C(_Unwind_Exception *a1)
{
  OCCBinaryStreamer::~OCCBinaryStreamer(v1);
  _Unwind_Resume(a1);
}

const char *WrdStreamer::getTableStreamName(WrdStreamer *this)
{
  if ((*(unsigned char *)(*(void *)(*((void *)this + 3) + 32) + 186) & 0x20) != 0) {
    return "0Table";
  }
  else {
    return "1Table";
  }
}

uint64_t WrdStreamer::getInputStorage(WrdStreamer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 88))();
}

uint64_t WrdStreamer::decryptStream(OCCBinaryStreamer *this, SsrwOOStream *a2, unsigned int a3, SsrwOOStream *a4)
{
  p_signed __int16 var1 = (OCCSegmenter *)&this[1].var1;
  signed __int16 var1 = this->var1;
  unsigned int v9 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 6))(a2);
  uint64_t result = OCCSegmenter::decryptSegmentsIntoStream(p_var1, a2, 0, var1, v9, a4);
  if (result)
  {
    OCCBinaryStreamer::replaceGarbledBytes(this, a2, a4, 0);
  }
  return result;
}

uint64_t WrdStreamer::encryptStream(OCCBinaryStreamer *this, SsrwOOStream *a2, unsigned int a3, SsrwOOStream *a4)
{
  p_signed __int16 var1 = (OCCSegmenter *)&this[1].var1;
  signed __int16 var1 = this->var1;
  unsigned int v9 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 6))(a2);
  uint64_t result = OCCSegmenter::decryptSegmentsIntoStream(p_var1, a2, 0, var1, v9, a4);
  if (result)
  {
    OCCBinaryStreamer::replaceGarbledBytes(this, a2, a4, 0);
  }
  return result;
}

uint64_t WrdStreamer::decryptIntoNewStream(OCCStreamer *this, SsrwOOStorage *a2, const char *__s, SsrwOOStream *a4, uint64_t a5)
{
  int v10 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v10, __s)) {
    return 0;
  }
  uint64_t v8 = (*((uint64_t (**)(OCCStreamer *, SsrwOOStream *, uint64_t, SsrwOOStream *))this->var0 + 12))(this, a4, a5, v10);
  (*((void (**)(SsrwOOStream *, uint64_t))v10->var0 + 19))(v10, 1);
  if (v10) {
    (*((void (**)(SsrwOOStream *))v10->var0 + 1))(v10);
  }
  return v8;
}

uint64_t WrdStreamer::encryptIntoNewStream(OCCStreamer *this, SsrwOOStorage *a2, const char *__s, SsrwOOStream *a4, uint64_t a5)
{
  int v10 = 0;
  if (!OCCStreamer::openOutputStream(this, a2, &v10, __s)) {
    return 0;
  }
  uint64_t v8 = (*((uint64_t (**)(OCCStreamer *, SsrwOOStream *, uint64_t, SsrwOOStream *))this->var0 + 13))(this, a4, a5, v10);
  (*((void (**)(SsrwOOStream *, uint64_t))v10->var0 + 19))(v10, 1);
  if (v10) {
    (*((void (**)(SsrwOOStream *))v10->var0 + 1))(v10);
  }
  return v8;
}

uint64_t WrdStreamer::decryptIntoRootStorage(WrdStreamer *this, SsrwOORootStorage *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 32);
  if ((*(unsigned char *)(v2 + 186) & 0x10) == 0) {
    return 0;
  }
  if ((*(_WORD *)(v2 + 198) & 8) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 128);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(v2 + 188);
  uint64_t v7 = (*(uint64_t (**)(WrdStreamer *))(*(void *)this + 88))(this);
  uint64_t result = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, uint64_t, uint64_t, uint64_t))(*(void *)this + 112))(this, a2, v7, v3, v6);
  if (!result) {
    return result;
  }
  uint64_t v9 = *(void *)(v2 + 112);
  if (!v9) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, const char *, uint64_t, uint64_t))(*(void *)this + 112))(this, a2, "WordDocument", v9, 68);
  if (result)
  {
    uint64_t v10 = *(void *)(v2 + 120);
    if (!v10) {
      return 1;
    }
    int v11 = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, const char *, uint64_t, void))(*(void *)this + 112))(this, a2, "Data", v10, 0);
    uint64_t result = 0;
    if (v11) {
      return 1;
    }
  }
  return result;
}

uint64_t WrdStreamer::encryptIntoRootStorage(WrdStreamer *this, SsrwOORootStorage *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 3) + 32);
  if ((*(unsigned char *)(v2 + 186) & 0x10) == 0) {
    return 0;
  }
  if ((*(_WORD *)(v2 + 198) & 8) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 128);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(v2 + 188);
  uint64_t v7 = (*(uint64_t (**)(WrdStreamer *))(*(void *)this + 88))(this);
  uint64_t result = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, uint64_t, uint64_t, uint64_t))(*(void *)this + 120))(this, a2, v7, v3, v6);
  if (!result) {
    return result;
  }
  uint64_t v9 = *(void *)(v2 + 112);
  if (!v9) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, const char *, uint64_t, uint64_t))(*(void *)this + 120))(this, a2, "WordDocument", v9, 68);
  if (result)
  {
    uint64_t v10 = *(void *)(v2 + 120);
    if (!v10) {
      return 1;
    }
    int v11 = (*(uint64_t (**)(WrdStreamer *, SsrwOORootStorage *, const char *, uint64_t, void))(*(void *)this + 120))(this, a2, "Data", v10, 0);
    uint64_t result = 0;
    if (v11) {
      return 1;
    }
  }
  return result;
}

const char *WrdStreamer::cryptoAPI_getEncryptedSummaryStreamName(WrdStreamer *this)
{
  return "encryption";
}

uint64_t WrdStreamer::copySummaryInfoStreams(WrdStreamer *this, SsrwOOStorage *a2)
{
  int v4 = (SsrwOOStorage *)(*(uint64_t (**)(WrdStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v4, (SsrwOOStorage *)&OCCBinaryStreamer::DocumentSummaryInformationStreamName, v5);
  uint64_t v6 = (SsrwOOStorage *)(*(uint64_t (**)(WrdStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v6, (SsrwOOStorage *)&OCCBinaryStreamer::SummaryInformationStreamName, v7);
  return 1;
}

uint64_t WrdStreamer::copyUnencryptedIntoRootStorage(WrdStreamer *this, SsrwOOStorage *a2)
{
  uint64_t v3 = (SsrwOOStorage *)(*(uint64_t (**)(WrdStreamer *))(*(void *)this + 24))(this);
  return OcBinaryWriter::copyMissingChildStorageWithUnicodeName(a2, v3, (SsrwOOStorage *)&WrdStreamer::ObjectPoolStreamName, v4);
}

void sub_238E5A978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5AC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5B060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, uint64_t a11, void *a12, void *a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_238E5B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E5BD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t getVariantVal(void *a1, __int16 a2, int a3, CsString *a4)
{
  id v7 = a1;
  uint64_t v8 = [v7 firstChildOfType:61757];
  if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  uint64_t v9 = [v8 childOfType:61762 instance:a2];
  uint64_t v10 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  if (*((_DWORD *)v11 + 12) != a3) {
    goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
      LOBYTE(a4->var0) = PptAnimVariantAtom::getBoolean(v11);
      break;
    case 1:
      a4->var0 = (void **)(int)PptAnimVariantAtom::getInteger(v11);
      break;
    case 2:
      *(double *)&a4->var0 = PptAnimVariantAtom::getReal(v11);
      break;
    case 3:
      StreamInfo = (const CsString *)getStreamInfo((uint64_t)v11);
      a4->unsigned int var2 = 0;
      bzero(a4->var1, 2 * a4->var3);
      CsString::append(a4, StreamInfo);
      break;
    default:
      goto LABEL_8;
  }
  uint64_t v12 = 1;
LABEL_9:

  return v12;
}

void sub_238E5BF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5C22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5C448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5C528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5C808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5C930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5CD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5CF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5D020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5D47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5D770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5D914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5D9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E5DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5DF58(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x238E5DF34);
  }

  _Unwind_Resume(exc_buf);
}

void sub_238E5E0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E5E24C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238E5E5A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_238E5E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete(v10);

  _Unwind_Resume(a1);
}

void sub_238E5E704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptContainer::hasId(PptContainer *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t PptContainer::setId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  *(unsigned char *)(this + XlPtg::XlPtg((uint64_t)this + 8, 64) = 1;
  return this;
}

uint64_t PptContainer::getId(PptContainer *this)
{
  return *((unsigned int *)this + 17);
}

void non-virtual thunk to'PptContainer::~PptContainer(PptContainer *this)
{
}

{
  uint64_t vars8;

  EshContainer::~EshContainer((PptContainer *)((char *)this - 56));
  JUMPOUT(0x23EC997B0);
}

uint64_t non-virtual thunk to'PptContainer::hasId(PptContainer *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t non-virtual thunk to'PptContainer::setId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  *(unsigned char *)(this + 8) = 1;
  return this;
}

uint64_t non-virtual thunk to'PptContainer::getId(PptContainer *this)
{
  return *((unsigned int *)this + 3);
}

void sub_238E5E9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripHeaderFooterDefaultsAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E5EB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PptTextMasterStyleAtom::getLevelReference(PptTextMasterStyleAtom *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (((unint64_t)(*((void *)this + 7) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  return *(void *)(v2 + 8 * a2);
}

void sub_238E5EEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E5EF74()
{
}

void sub_238E5F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5F780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_238E5FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5FCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E5FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E600B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E60328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E60620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptOutlineTextRefAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E6070C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextHeaderAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E607FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripShapeIdAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E608EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E609C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E60A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E60B2C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_238E60C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E60E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<PBReaderMasterStyleInfo,ChAllocator<PBReaderMasterStyleInfo>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 4;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<PBReaderMasterStyleInfo,ChAllocator<PBReaderMasterStyleInfo>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
  }
}

void sub_238E60FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E610C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E61250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete(v10);

  _Unwind_Resume(a1);
}

void sub_238E61590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E618B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, id a14)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238E61AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238E61E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238E62314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E62888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E62BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void sub_238E62ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E63238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_238E633CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptSlideAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E634CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<PBReaderMasterStyleInfo,ChAllocator<PBReaderMasterStyleInfo>>::__append(void **a1, unsigned int a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unsigned int v5 = v6;
  id v7 = *(char **)(v4 - 8);
  if (((unint64_t)(v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = (unint64_t)(v5 - (unsigned char *)*a1) >> 4;
    unsigned int v10 = 2 * v9;
    if (2 * (int)v9 <= (v8 >> 4) + a2) {
      unsigned int v10 = (v8 >> 4) + a2;
    }
    if (v9 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<TSUStringChunk>>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    int v15 = &v12[v8 & 0xFFFFFFFF0];
    unint64_t v16 = &v12[16 * v14];
    bzero(v15, 16 * a2);
    int v17 = &v15[16 * a2];
    __int16 v19 = (char *)*a1;
    unsigned int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v18 - 1);
        v15 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *ESDAtomAccess<PptRoundTripContentMasterIdAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E636DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripCompositeMasterIdAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E637CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptDocumentAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E638BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextDefaultSpecialInfoAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E639AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripCustomTableStylesAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextDefaultParagraphStyleAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextDefaultCharacterStyleAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextDefaultStyle9Atom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextMasterStyleAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripThemeAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E63F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripColorMappingAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E6403C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripOfficeArtTextStylesAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E6412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripNotesMasterTextStylesAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E6421C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptSlidePersistAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E6430C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptRoundTripOriginalMainMasterIdAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E643FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptNotesAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unsigned int v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E644EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E64614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E64730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E64780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6498C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E64A7C(_Unwind_Exception *a1)
{
  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_238E64B98(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x23EC997B0](v4, 0x10A1C40425EA2CFLL);

  _Unwind_Resume(a1);
}

void sub_238E64C60(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x10B1C40CA92E09DLL);
  _Unwind_Resume(a1);
}

void sub_238E64F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E65190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E65274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E65404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E65540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E657D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E659D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E65D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E65E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v15 = v13;

  _Unwind_Resume(a1);
}

void sub_238E65FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6616C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v12;

  _Unwind_Resume(a1);
}

void sub_238E66338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E66428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E66528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t verifyRangeValidity(int a1, int a2, int a3)
{
  TCVerifyInputMeetsCondition(a2 >= 0);
  TCVerifyInputMeetsCondition(a1 >= 0);
  uint64_t v6 = a2 + (uint64_t)a1;
  TCVerifyInputMeetsCondition(v6 == (int)v6);
  TCVerifyInputMeetsCondition((int)v6 >= 0);
  TCVerifyInputMeetsCondition((int)v6 <= a3);
  TCVerifyInputMeetsCondition((int)v6 >= a1);
  return TCVerifyInputMeetsCondition((int)v6 >= a2);
}

char *std::vector<PptTab,ChAllocator<PptTab>>::__assign_with_size[abi:ne180100]<PptTab*,PptTab*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (((v8 - (unint64_t)result) >> 3) >= a4)
  {
    int v21 = *(char **)(a1 + 8);
    __int16 v19 = (void **)(a1 + 8);
    unsigned int v20 = v21;
    unint64_t v22 = v21 - result;
    unint64_t v23 = (unint64_t)(v21 - result) >> 3;
    if (v23 >= a4)
    {
      unsigned int v31 = result;
      if (a2 != a3)
      {
        int v32 = result;
        do
        {
          int v33 = *(_DWORD *)v6;
          *((_WORD *)v32 + 2) = *((_WORD *)v6 + 2);
          *(_DWORD *)int v32 = v33;
          v32 += 8;
          ++v6;
          v31 += 8;
        }
        while (v6 != a3);
      }
      int64_t v18 = v31 - result;
    }
    else
    {
      uint64_t v24 = (v22 >> 3);
      unsigned int v25 = &a2[v23];
      if (v24)
      {
        uint64_t v26 = 8 * v24;
        do
        {
          int v27 = *(_DWORD *)v6;
          *((_WORD *)result + 2) = *((_WORD *)v6 + 2);
          *(_DWORD *)uint64_t result = v27;
          result += 8;
          ++v6;
          v26 -= 8;
        }
        while (v26);
        unsigned int v20 = (char *)*v19;
      }
      uint64_t result = v20;
      uint64_t v28 = v20;
      if (v25 != a3)
      {
        uint64_t v28 = v20;
        uint64_t v29 = v20;
        do
        {
          uint64_t v30 = *v25++;
          *(void *)uint64_t v29 = v30;
          v29 += 8;
          v28 += 8;
        }
        while (v25 != a3);
      }
      int64_t v18 = v28 - v20;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      unint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v11 = v8 >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= a4) {
      unsigned int v12 = a4;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v9, v13);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[8 * v14];
    int v15 = result;
    if (v6 != a3)
    {
      int v15 = result;
      unint64_t v16 = result;
      do
      {
        uint64_t v17 = *v6++;
        *(void *)unint64_t v16 = v17;
        v16 += 8;
        v15 += 8;
      }
      while (v6 != a3);
    }
    int64_t v18 = v15 - result;
    __int16 v19 = (void **)(a1 + 8);
  }
  char *v19 = &result[v18];
  return result;
}

void sub_238E66B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E66C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E66E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E66F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E66FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E67158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E67310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E674E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E67744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E67E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E68010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E68400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E687B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E68B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E68FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E69394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6981C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E699BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E69AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E69C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_782()
{
  for (uint64_t i = 0x358u; i != -8; i -= 16)
}

void sub_238E6A388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6A4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E6A9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6AA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6AB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_238E6AE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6B070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6B33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6B4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E6B6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6B890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6BC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6BCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6BDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6BF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6C0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6C428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6C698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6C884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6CAFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6CD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6CECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6D160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6D2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6D7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6D9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6DD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6DF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6DFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6E14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6E33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6E420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6E894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E6E9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6EACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6EC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6EE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6F01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6F140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6F874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E6FB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E6FDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E701C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E70470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E70620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E7089C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E708E0()
{
  JUMPOUT(0x238E708D8);
}

void sub_238E70B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E70D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_145_0()
{
  for (uint64_t i = 0x88u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_166_0()
{
  for (uint64_t i = 0x58u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_178_0()
{
  for (uint64_t i = 0x28u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_239_1()
{
  for (uint64_t i = 0x98u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_295_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_298_0()
{
  for (uint64_t i = 0x48u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_354_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
    objc_release(*(id *)((char *)&+[PXAnimation(Private) sequentialPreviousActionMap]::sSequentialPreviousActionStructs
                       + i));
}

void __cxx_global_array_dtor_360_0()
{
  for (uint64_t i = 0x18u; i != -8; i -= 16)
}

void sub_238E714E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E718AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E71A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E71B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id pptTreeWithData(NSData *a1)
{
  uint64_t v1 = a1;
  v9.var0 = (void **)[(NSData *)v1 bytes];
  uint64_t v2 = (SsrwOOStream *)SsrwOOStream::openMemStreamForReading(&v9, (void **)[(NSData *)v1 length]);
  uint64_t v3 = (PptEshObjectFactory *)operator new(0x10uLL);
  PptEshObjectFactory::PptEshObjectFactory(v3);
  *((unsigned char *)v3 + 8) = 1;
  PptObjectFactory::PptObjectFactory(&v8);
  PptObjectFactory::init(v4);
  WrdObjectFactory::takeEshObjectFactory((WrdObjectFactory *)&v8, (WrdEshObjectFactory *)v3);
  PptParserVisitor::PptParserVisitor((PptParserVisitor *)v7, v3);
  PptParserVisitor::init((PptParserVisitor *)v7, v2);
  unsigned int v5 = pptSubtree(v7, &v8, 0);
  if (v2) {
    (*((void (**)(SsrwOOStream *))v2->var0 + 1))(v2);
  }
  PptParserVisitor::~PptParserVisitor((PptParserVisitor *)v7);
  PptObjectFactory::~PptObjectFactory(&v8);

  return v5;
}

void sub_238E71CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PptParserVisitor::~PptParserVisitor((PptParserVisitor *)&a9);
  PptObjectFactory::~PptObjectFactory((PptObjectFactory *)(v10 - 56));

  _Unwind_Resume(a1);
}

void sub_238E721C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void PptTextBlockStylingAtom::addCharRun(PptTextBlockStylingAtom *this, PptCharRun *a2)
{
  unint64_t v6 = *((void *)this + 11);
  uint64_t v4 = (char *)this + 88;
  unint64_t v5 = v6;
  id v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)this + 9);
    unint64_t v10 = (unint64_t)v7 - v9;
    unint64_t v11 = (v5 - v9) >> 3;
    unsigned int v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1) {
      unsigned int v12 = (v10 >> 3) + 1;
    }
    if (v11 >= 0x7FFFFFFF) {
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v14[v10 & 0x7FFFFFFF8];
    int64_t v18 = &v14[8 * v16];
    *(void *)uint64_t v17 = a2;
    PptObjectFactory v8 = v17 + 8;
    unsigned int v20 = (char *)*((void *)this + 9);
    __int16 v19 = (char *)*((void *)this + 10);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      __int16 v19 = (char *)*((void *)this + 9);
    }
    *((void *)this + 9) = v17;
    *((void *)this + 10) = v8;
    *((void *)this + 11) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *id v7 = a2;
    PptObjectFactory v8 = v7 + 1;
  }
  *((void *)this + 10) = v8;
}

ESDContainer *pptSubtree(SsrwOOStream **a1, PptObjectFactory *a2, uint64_t a3)
{
  EshHeader::makeDefault((EshHeader *)&v16);
  PptParserVisitor::parse(a1, (EshHeader *)&v16, a3);
  Object = PptObjectFactory::createObject(a2, (PptObjectFactory *)v18, v19);
  if (Object) {
  else
  }
    id v7 = 0;
  EshRecord::setHeader(v7, (const EshHeader *)&v16);
  PptObjectFactory v8 = a1;
  if ((unsigned __int16)(v18 + 4096) <= 0x122u)
  {
    if (v18 == 61456
      || (isClientObject = EshObjectFactory::isClientObject((EshObjectFactory *)v18), PptObjectFactory v8 = a1, (isClientObject & 1) == 0))
    {
      PptObjectFactory v8 = (SsrwOOStream **)((uint64_t (*)(SsrwOOStream **, SsrwOOStream **))(*a1)[151].var0)(a1, v8);
    }
  }
  (*(void (**)(EshRecord *, SsrwOOStream **))(*(void *)v7 + 112))(v7, v8);
  if (v19 == 15)
  {
    if (v18 != 1064 && v18 != 12052 && v18 != 14003) {
      goto LABEL_12;
    }
LABEL_16:
    unint64_t v10 = [[ESDObject alloc] initWithEshObject:v7];
    goto LABEL_17;
  }
  if (v18 != 5003) {
    goto LABEL_16;
  }
LABEL_12:
  unint64_t v10 = [[ESDContainer alloc] initWithEshObject:v7];
  unsigned int v11 = v17 + 8;
  unsigned int v12 = v17 + 8 + v16;
  if (v17 + 8 < v12)
  {
    do
    {
      unint64_t v13 = pptSubtree((PptParserVisitor *)a1, a2, v11);
      [(ESDContainer *)v10 addChild:v13];
      unsigned int v11 = v14[4] + v14[3] + 8;
    }
    while (v11 < v12);
  }

LABEL_17:
  return v10;
}

void sub_238E72660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextBytesAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unint64_t v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      unint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E72760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ESDAtomAccess<PptTextCharsAtom>::extractAtom(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 eshObject];
  unint64_t v5 = (const void *)v4;
  if (!v4)
  {
    if (!a2)
    {
LABEL_8:
      unint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_7:
    TCVerifyInputMeetsCondition(0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0) {
    TCVerifyInputMeetsCondition(0);
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_9:

  return v6;
}

void sub_238E72850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E72904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E72B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL24PXPlaceholderTypeEnumMapv_block_invoke()
{
  uint64_t v0 = [[TCEnumerationMap alloc] initWithStructs:&PXPlaceholderTypeEnumMap(void)::theEnumStructs count:16 caseSensitive:1];
  uint64_t v1 = (void *)PXPlaceholderTypeEnumMap(void)::theEnumMap;
  PXPlaceholderTypeEnumMap(void)::theEnumMap = (uint64_t)v0;
}

void sub_238E72D18(_Unwind_Exception *exception_object)
{
}

void sub_238E72E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E7309C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E731F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E73564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E737AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E73F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32,void *a33,void *a34,void *a35,void *a36)
{
  unsigned int v38 = *(void **)(v37 - 168);
  uint64_t v40 = *(void **)(v37 - 136);
  unsigned int v39 = *(void **)(v37 - 128);

  _Unwind_Resume(a1);
}

void sub_238E74028()
{
}

void sub_238E74034()
{
}

void sub_238E74040()
{
}

void sub_238E7404C()
{
}

void sub_238E74058()
{
}

void sub_238E74064()
{
}

void sub_238E74070()
{
}

void sub_238E7407C()
{
}

void sub_238E74088()
{
}

void sub_238E74094()
{
}

void sub_238E740A0()
{
}

void sub_238E740AC()
{
}

void sub_238E740B8()
{
}

void sub_238E740C4()
{
}

void sub_238E740D0()
{
}

void sub_238E740D8()
{
}

void sub_238E74360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  int v32 = v27;

  _Unwind_Resume(a1);
}

void sub_238E74870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E74EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E75020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E750C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238E75174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238E75338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E75520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_182_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void __cxx_global_array_dtor_185_0()
{
  for (uint64_t i = 0x78u; i != -8; i -= 16)
}

void sub_238E75840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PBConvertCsException(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 - 4005 < 0xA || v1 - 4000 < 3)
  {
    uint64_t v2 = &TCInvalidFileFormatMessage;
    return +[TCMessageException raise:*v2];
  }
  if (v1 == 8003)
  {
    uint64_t v2 = &PCUnsupportedVersion;
    return +[TCMessageException raise:*v2];
  }
  return OCConvertCsException(a1);
}

void sub_238E75B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E75C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E75E14(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238E76054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E76238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E76688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E768AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PptAnimationInfoAtom::PptAnimationInfoAtom(PptAnimationInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE7D30;
  *(void *)(v2 + 32) = &unk_26EBE7DD8;
  *(void *)(v2 + 48) = 255;
  *(void *)(v2 + 56) = 255;
  *(_DWORD *)(v2 + 68) = 0;
  *(_DWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 76) = 0x10000;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 93) = 0;
}

void PptAnimationInfoAtom::~PptAnimationInfoAtom(PptAnimationInfoAtom *this)
{
}

uint64_t PptAtom::hasId(PptAtom *this)
{
  return *((unsigned __int8 *)this + 44);
}

uint64_t PptAtom::setId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  *(unsigned char *)(this + 44) = 1;
  return this;
}

uint64_t PptAtom::getId(PptAtom *this)
{
  return *((unsigned int *)this + 10);
}

void non-virtual thunk to'PptAnimationInfoAtom::~PptAnimationInfoAtom(PptAnimationInfoAtom *this)
{
}

void non-virtual thunk to'PptEntranceAnimationInfoAtom::~PptEntranceAnimationInfoAtom(PptEntranceAnimationInfoAtom *this)
{
}

void non-virtual thunk to'PptExitAnimationInfoAtom::~PptExitAnimationInfoAtom(PptExitAnimationInfoAtom *this)
{
}

void non-virtual thunk to'PptAnimBuildAtom::~PptAnimBuildAtom(PptAnimBuildAtom *this)
{
}

void non-virtual thunk to'PptAnimChartBuildAtom::~PptAnimChartBuildAtom(PptAnimChartBuildAtom *this)
{
}

void non-virtual thunk to'PptAnimCmdBehaviorAtom::~PptAnimCmdBehaviorAtom(PptAnimCmdBehaviorAtom *this)
{
}

void PptRoundTripXmlBlobAtom::PptRoundTripXmlBlobAtom(PptRoundTripXmlBlobAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE8350;
  *(void *)(v2 + 32) = &unk_26EBE83F8;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 48));
}

void PptRoundTripXmlBlobAtom::~PptRoundTripXmlBlobAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE8350;
  *(void *)&this->var6 = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE8350;
  *(void *)&this->var6 = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripXmlBlobAtom::~PptRoundTripXmlBlobAtom(PptRoundTripXmlBlobAtom *this)
{
  *((void *)this - 4) = &unk_26EBE8350;
  *(void *)this = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE8350;
  *(void *)this = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptAnimColorBehaviorAtom::~PptAnimColorBehaviorAtom(PptAnimColorBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimEffectBehaviorAtom::~PptAnimEffectBehaviorAtom(PptAnimEffectBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimHashCode10Atom::~PptAnimHashCode10Atom(PptAnimHashCode10Atom *this)
{
}

void non-virtual thunk to'PptAnimMotionBehaviorAtom::~PptAnimMotionBehaviorAtom(PptAnimMotionBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimParagraphBuildAtom::~PptAnimParagraphBuildAtom(PptAnimParagraphBuildAtom *this)
{
}

void non-virtual thunk to'PptAnimRotationBehaviorAtom::~PptAnimRotationBehaviorAtom(PptAnimRotationBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimSetBehaviorAtom::~PptAnimSetBehaviorAtom(PptAnimSetBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimVisualElementAtom::~PptAnimVisualElementAtom(PptAnimVisualElementAtom *this)
{
}

void non-virtual thunk to'PptAnimVisualPageAtom::~PptAnimVisualPageAtom(PptAnimVisualPageAtom *this)
{
}

uint64_t PptAtom::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    EshAtom::operator=(a1, a2);
  }
  return a1;
}

void non-virtual thunk to'PptBaseTextPropertyAtom::~PptBaseTextPropertyAtom(PptBaseTextPropertyAtom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStylingAtom::~PptTextBlockStylingAtom((PptBaseTextPropertyAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptBinaryDataAtom::~PptBinaryDataAtom(PptBinaryDataAtom *this)
{
}

{
  uint64_t vars8;

  PptBinaryDataAtom::~PptBinaryDataAtom((PptBinaryDataAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

uint64_t PptBinaryDataAtom::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 48) = 0;
  PptAtom::operator=(a1, a2);
  unint64_t v5 = (OcBinaryData *)operator new(0x30uLL);
  OcBinaryData::OcBinaryData(v5);
  *(void *)(a1 + 48) = v5;
  OcBinaryData::operator=(v5, *(void *)(a2 + 48));
  return a1;
}

void sub_238E76F74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptBinaryDataAtom::hasUnreadBinaryData(PptBinaryDataAtom *this)
{
  return 1;
}

void non-virtual thunk to'PptBinaryTagBlipAtom::~PptBinaryTagBlipAtom(PptBinaryTagBlipAtom *this)
{
}

{
  uint64_t vars8;

  PptBinaryTagBlipAtom::~PptBinaryTagBlipAtom((PptBinaryTagBlipAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptBinaryTagBlipAtom::operator=()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void PptBookmarkEntityAtom::PptBookmarkEntityAtom(PptBookmarkEntityAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9000;
  *(void *)(v2 + 32) = &unk_26EBE90A8;
  CsString::CsString((CsString *)(v2 + 56));
}

uint64_t PptBookmarkEntityAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptBookmarkEntityAtom::~PptBookmarkEntityAtom(PptBookmarkEntityAtom *this)
{
  *(void *)this = &unk_26EBE9000;
  *((void *)this + 4) = &unk_26EBE90A8;
  CsString::~CsString((CsString *)((char *)this + 56));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE9000;
  *((void *)this + 4) = &unk_26EBE90A8;
  CsString::~CsString((CsString *)((char *)this + 56));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptBookmarkEntityAtom::~PptBookmarkEntityAtom(CsString *this)
{
  *(void *)&this[-2].unsigned int var2 = &unk_26EBE9000;
  this->var0 = (void **)&unk_26EBE90A8;
  CsString::~CsString(this + 1);
}

{
  uint64_t vars8;

  *(void *)&this[-2].unsigned int var2 = &unk_26EBE9000;
  this->var0 = (void **)&unk_26EBE90A8;
  CsString::~CsString(this + 1);
  JUMPOUT(0x23EC997B0);
}

void PptBookmarkSeedAtom::PptBookmarkSeedAtom(PptBookmarkSeedAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE90F8;
  *(void *)(v2 + 32) = &unk_26EBE91A0;
}

uint64_t PptBookmarkSeedAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptBookmarkSeedAtom::~PptBookmarkSeedAtom(PptBookmarkSeedAtom *this)
{
}

void non-virtual thunk to'PptBookmarkSeedAtom::~PptBookmarkSeedAtom(PptBookmarkSeedAtom *this)
{
}

void non-virtual thunk to'PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom(PptTextBlockStylingMac11Atom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom((PptTextBlockStylingMac11Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultStyleMac11Atom::PptTextDefaultStyleMac11Atom(PptTextDefaultStyleMac11Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE92E8;
  *(void *)(v2 + 32) = &unk_26EBE9390;
  PptCharStyleMac11::PptCharStyleMac11((PptCharStyleMac11 *)(v2 + 48));
}

void non-virtual thunk to'PptTextDefaultStyleMac11Atom::~PptTextDefaultStyleMac11Atom(PptTextDefaultStyleMac11Atom *this)
{
  *((void *)this - 4) = &unk_26EBE92E8;
  *(void *)this = &unk_26EBE9390;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE92E8;
  *(void *)this = &unk_26EBE9390;
  PptCharStyleMac11::~PptCharStyleMac11((PptTextDefaultStyleMac11Atom *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextMasterStyleMac11Atom::~PptTextMasterStyleMac11Atom(PptTextMasterStyleMac11Atom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStylingMac11Atom::~PptTextBlockStylingMac11Atom((PptTextMasterStyleMac11Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptCharFormatAtom::PptCharFormatAtom(PptCharFormatAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE94D8;
  *(void *)(v2 + 32) = &unk_26EBE9580;
  *(void *)(v2 + 60) = 255;
  *(_DWORD *)(v2 + 68) = 255;
}

uint64_t PptCharFormatAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptCharFormatAtom::~PptCharFormatAtom(PptCharFormatAtom *this)
{
}

void non-virtual thunk to'PptCharFormatAtom::~PptCharFormatAtom(PptCharFormatAtom *this)
{
}

void PptColorSchemeAtom::PptColorSchemeAtom(PptColorSchemeAtom *this)
{
  EshAtom::EshAtom((EshAtom *)this, 0x7F0u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBE95D0;
  *(void *)(v1 + 32) = &unk_26EBE9688;
  *(void *)(v1 + 48) = &unk_26EBE96C0;
  *(void *)&long long v2 = 255;
  *((void *)&v2 + 1) = 255;
  *(_OWORD *)(v1 + 56) = v2;
  *(_OWORD *)(v1 + 72) = v2;
  *(_OWORD *)(v1 + 88) = v2;
  *(_OWORD *)(v1 + 104) = v2;
}

double PptColorSchemeAtom::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  double result = *(double *)(a2 + 112);
  *(double *)(a1 + 112) = result;
  return result;
}

void *non-virtual thunk to'PptColorSchemeAtom::getSchemeColor(PptColorSchemeAtom *this, int a2)
{
  switch(a2)
  {
    case 0:
      double result = &this->var1;
      break;
    case 1:
      double result = &this->var2.var1;
      break;
    case 2:
      double result = &this->var2.var4;
      break;
    case 3:
      double result = &this->var3;
      break;
    case 4:
      double result = &this->var4;
      break;
    case 5:
      double result = &this->var6;
      break;
    case 6:
      double result = &this->var7;
      break;
    case 7:
      double result = &this->var8;
      break;
    default:
      double result = 0;
      break;
  }
  return result;
}

void ***PptColorSchemeAtom::clone(PptColorSchemeAtom *this)
{
  long long v2 = (PptColorSchemeAtom *)operator new(0x78uLL);
  PptColorSchemeAtom::PptColorSchemeAtom(v2);
  PptColorSchemeAtom::operator=((uint64_t)v2, (uint64_t)this);
  return &v2->var6;
}

void sub_238E77A14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ***non-virtual thunk to'PptColorSchemeAtom::clone(PptColorSchemeAtom *this)
{
  return PptColorSchemeAtom::clone((PptColorSchemeAtom *)((char *)this - 48));
}

void non-virtual thunk to'PptColorSchemeAtom::~PptColorSchemeAtom(PptColorSchemeAtom *this)
{
}

{
  JUMPOUT(0x23EC997B0);
}

void PptCorePictAtom::PptCorePictAtom(PptCorePictAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9738;
  *(void *)(v2 + 32) = &unk_26EBE97E0;
  PptGRectAtom::PptGRectAtom((PptGRectAtom *)(v2 + 48));
}

uint64_t PptCorePictAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptCorePictAtom::~PptCorePictAtom(PptCorePictAtom *this)
{
}

void non-virtual thunk to'PptCorePictAtom::~PptCorePictAtom(PptCorePictAtom *this)
{
}

void PptCString::PptCString(PptCString *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9830;
  *(void *)(v2 + 32) = &unk_26EBE98D8;
  CsString::CsString((CsString *)(v2 + 48));
}

void PptCString::PptCString(PptCString *this)
{
  EshAtom::EshAtom(this, 0xFBAu, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBE9830;
  *(void *)(v1 + 32) = &unk_26EBE98D8;
  CsString::CsString((CsString *)(v1 + 48));
}

void non-virtual thunk to'PptCString::~PptCString(PptCString *this)
{
  *((void *)this - 4) = &unk_26EBE9830;
  *(void *)this = &unk_26EBE98D8;
  CsString::~CsString((CsString *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9830;
  *(void *)this = &unk_26EBE98D8;
  CsString::~CsString((CsString *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptCurrentUserAtom::~PptCurrentUserAtom(PptCurrentUserAtom *this)
{
}

{
  uint64_t vars8;

  PptCurrentUserAtom::~PptCurrentUserAtom((PptCurrentUserAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptCurrentUserAtom::operator=()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

void non-virtual thunk to'PptDateTimeMCAtom::~PptDateTimeMCAtom(PptDateTimeMCAtom *this)
{
}

void PptDocRoutingSlip::PptDocRoutingSlip(PptDocRoutingSlip *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBE9B20;
  *(void *)(v3 + 32) = &unk_26EBE9BD0;
  *(_DWORD *)(v3 + 60) = 0;
  *(_WORD *)(v3 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  CsString::CsString((CsString *)(v3 + 72));
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  CsString::CsString((CsString *)this + 5);
  CsString::CsString((CsString *)this + 6);
}

void sub_238E77F34(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;
  CsString::~CsString(v5);
  id v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 104) = v7;
    operator delete(v7);
  }
  CsString::~CsString(v2);
  _Unwind_Resume(a1);
}

void PptDocRoutingSlip::~PptDocRoutingSlip(CsString *this)
{
  this->var0 = (void **)&unk_26EBE9B20;
  this[1].signed __int16 var1 = (unsigned __int16 *)&unk_26EBE9BD0;
  var0 = this[4].var0;
  signed __int16 var1 = this[4].var1;
  if ((((char *)var1 - (char *)var0) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (char *)var0[v4];
      if (v5)
      {
        CsString::~CsString((CsString *)(v5 + 8));
        MEMORY[0x23EC997B0](v5, 0x1090C40575F3A09);
        var0 = this[4].var0;
        signed __int16 var1 = this[4].var1;
      }
      if (v4 >= ((unint64_t)((char *)var1 - (char *)var0) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      var0[v4++] = 0;
      var0 = this[4].var0;
      signed __int16 var1 = this[4].var1;
    }
    while (v4 < ((unint64_t)((char *)var1 - (char *)var0) >> 3));
  }
  this[2].var0 = 0;
  this[2].signed __int16 var1 = 0;
  LOWORD(this[2].var2) = 0;
  CsString::~CsString(this + 6);
  CsString::~CsString(this + 5);
  unint64_t v6 = (unsigned __int16 *)this[4].var0;
  if (v6)
  {
    this[4].signed __int16 var1 = v6;
    operator delete(v6);
  }
  CsString::~CsString(this + 3);
}

{
  uint64_t vars8;

  PptDocRoutingSlip::~PptDocRoutingSlip(this);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptDocRoutingSlip::~PptDocRoutingSlip(PptDocRoutingSlip *this)
{
}

{
  uint64_t vars8;

  PptDocRoutingSlip::~PptDocRoutingSlip((CsString *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

uint64_t PptDocRoutingSlip::accept(int a1, void *lpsrc)
{
  return v2();
}

uint64_t *PptDocRoutingSlip::addRecipient(PptDocRoutingSlip *this, const CsString *a2, __int16 a3, char a4)
{
  PptObjectFactory v8 = (char *)operator new(0x20uLL);
  *(_OWORD *)PptObjectFactory v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  CsString::CsString((CsString *)(v8 + 8));
  uint64_t v27 = (uint64_t)v8;
  *(_WORD *)PptObjectFactory v8 = a3;
  unsigned __int16 v8[2] = a4;
  *((_DWORD *)v8 + 6) = 0;
  bzero(*((void **)v8 + 2), 2 * *((unsigned int *)v8 + 7));
  CsString::append((CsString *)(v8 + 8), a2);
  uint64_t v9 = v27;
  uint64_t v27 = 0;
  unint64_t v10 = *((void *)this + 14);
  unsigned int v11 = (uint64_t *)*((void *)this + 13);
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = *((void *)this + 12);
    unint64_t v14 = (unint64_t)v11 - v13;
    unint64_t v15 = (v10 - v13) >> 3;
    unsigned int v16 = 2 * v15;
    if (2 * (int)v15 <= (v14 >> 3) + 1) {
      unsigned int v16 = (v14 >> 3) + 1;
    }
    if (v15 >= 0x7FFFFFFF) {
      unint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      unsigned __int16 v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 112, v17);
      uint64_t v20 = v19;
    }
    else
    {
      unsigned __int16 v18 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v21 = (uint64_t *)&v18[v14 & 0x7FFFFFFF8];
    unint64_t v22 = &v18[8 * v20];
    uint64_t *v21 = v9;
    unsigned int v12 = v21 + 1;
    uint64_t v24 = (char *)*((void *)this + 12);
    unint64_t v23 = (char *)*((void *)this + 13);
    if (v23 != v24)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *--uint64_t v21 = v25;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*((void *)this + 12);
    }
    *((void *)this + 12) = v21;
    *((void *)this + 13) = v12;
    *((void *)this + 14) = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    uint64_t *v11 = v9;
    unsigned int v12 = v11 + 1;
  }
  *((void *)this + 13) = v12;
  return ChAutoPtr<PptDocRoutingSlip::RecipientElement>::~ChAutoPtr(&v27);
}

void sub_238E7830C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChAutoPtr<PptDocRoutingSlip::RecipientElement>::~ChAutoPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PptDocRoutingSlip::operator=()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1009;
}

uint64_t *ChAutoPtr<PptDocRoutingSlip::RecipientElement>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    CsString::~CsString((CsString *)(v2 + 8));
    MEMORY[0x23EC997B0](v2, 0x1090C40575F3A09);
  }
  *a1 = 0;
  return a1;
}

void non-virtual thunk to'PptDocumentAtom::~PptDocumentAtom(PptDocumentAtom *this)
{
}

void PptEmFormatAtom::PptEmFormatAtom(PptEmFormatAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9D18;
  *(void *)(v2 + 32) = &unk_26EBE9DC0;
}

uint64_t PptEmFormatAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptEmFormatAtom::~PptEmFormatAtom(PptEmFormatAtom *this)
{
}

void non-virtual thunk to'PptEmFormatAtom::~PptEmFormatAtom(PptEmFormatAtom *this)
{
}

uint64_t PptEshBackground::getChildType(PptEshBackground *this, unsigned int a2)
{
  return PptEshClientContainer::getChildType((PptEshBackground *)((char *)this + 328), a2);
}

uint64_t PptEshBackground::getChildVersion(PptEshBackground *this, unsigned int a2)
{
  return PptEshClientContainer::getChildVersion((PptEshBackground *)((char *)this + 328), a2);
}

void non-virtual thunk to'PptEshBackground::~PptEshBackground(PptEshBackground *this)
{
  uint64_t v1 = (PptEshBackground *)((char *)this - 328);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshContentBase::~EshContentBase(v1);
}

{
  EshContentBase *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshBackground *)((char *)this - 328);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshContentBase::~EshContentBase(v1);
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripOfficeArtTextStylesAtom::PptRoundTripOfficeArtTextStylesAtom(PptRoundTripOfficeArtTextStylesAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBE9EC0;
  v2[4] = &unk_26EBE9F68;
}

uint64_t PptRoundTripOfficeArtTextStylesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripOfficeArtTextStylesAtom::~PptRoundTripOfficeArtTextStylesAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripOfficeArtTextStylesAtom::~PptRoundTripOfficeArtTextStylesAtom(PptRoundTripOfficeArtTextStylesAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripZipBlobAtom::~PptRoundTripZipBlobAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripZipBlobAtom::~PptRoundTripZipBlobAtom(PptRoundTripZipBlobAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

PptEshClientContainer *PptEshClientContainer::operator=(PptEshClientContainer *a1, uint64_t a2)
{
  PptEshClientContainer::removeChildren((uint64_t)a1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (((*(void *)(a2 + 16) - v4) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      PptEshClientContainer::addChild(a1, *(const EshHeader **)(v4 + 8 * v5++));
      uint64_t v4 = *(void *)(a2 + 8);
    }
    while (v5 < ((unint64_t)(*(void *)(a2 + 16) - v4) >> 3));
  }
  return a1;
}

uint64_t PptEshClientTextBox::accept(int a1, void *lpsrc)
{
  return v2();
}

void non-virtual thunk to'PptEshGroup::~PptEshGroup(PptEshGroup *this)
{
  uint64_t v1 = (PptEshGroup *)((char *)this - 272);
  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 96));
  EshGroup::~EshGroup(v1);
}

{
  EshGroup *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshGroup *)((char *)this - 272);
  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 96));
  EshGroup::~EshGroup(v1);
  JUMPOUT(0x23EC997B0);
}

{
  EshGroup *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshGroup *)((char *)this - 368);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshGroup::~EshGroup(v1);
}

{
  EshGroup *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshGroup *)((char *)this - 368);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshGroup::~EshGroup(v1);
  JUMPOUT(0x23EC997B0);
}

uint64_t PptEshShape::copy(PptEshShape *this, const PptEshShape *a2)
{
  EshContentBase::copy(this, a2);
  uint64_t result = (*(uint64_t (**)(const PptEshShape *))(*(void *)a2 + 40))(a2);
  if (result)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (PptEshShape *)((char *)this + 576);
    do
    {
      uint64_t v7 = *((void *)a2 + 73);
      if (v5 >= ((unint64_t)(*((void *)a2 + 74) - v7) >> 3)) {
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      }
      PptEshClientContainer::addChild(v6, *(const EshHeader **)(v7 + 8 * v5++));
      uint64_t result = (*(uint64_t (**)(const PptEshShape *))(*(void *)a2 + 40))(a2);
    }
    while (v5 < result);
  }
  return result;
}

void non-virtual thunk to'PptEshShape::~PptEshShape(PptEshShape *this)
{
  uint64_t v1 = (PptEshShape *)((char *)this - 416);
  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 160));
  EshContentBase::~EshContentBase(v1);
}

{
  EshContentBase *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshShape *)((char *)this - 416);
  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 160));
  EshContentBase::~EshContentBase(v1);
  JUMPOUT(0x23EC997B0);
}

{
  EshContentBase *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshShape *)((char *)this - 576);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshContentBase::~EshContentBase(v1);
}

{
  EshContentBase *v1;
  uint64_t vars8;

  uint64_t v1 = (PptEshShape *)((char *)this - 576);
  PptEshClientContainer::~PptEshClientContainer(this);
  EshContentBase::~EshContentBase(v1);
  JUMPOUT(0x23EC997B0);
}

void PptExCDAudioAtom::PptExCDAudioAtom(PptExCDAudioAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEA568;
  *(void *)(v2 + 32) = &unk_26EBEA610;
}

uint64_t PptExCDAudioAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptExCDAudioAtom::~PptExCDAudioAtom(PptExCDAudioAtom *this)
{
}

void non-virtual thunk to'PptExCDAudioAtom::~PptExCDAudioAtom(PptExCDAudioAtom *this)
{
}

void non-virtual thunk to'PptExControlAtom::~PptExControlAtom(PptExControlAtom *this)
{
}

void non-virtual thunk to'PptExEmbedAtom::~PptExEmbedAtom(PptExEmbedAtom *this)
{
}

void non-virtual thunk to'PptExHyperlinkAtom::~PptExHyperlinkAtom(PptExHyperlinkAtom *this)
{
}

void non-virtual thunk to'PptExHyperlinkExtraAtom::~PptExHyperlinkExtraAtom(PptExHyperlinkExtraAtom *this)
{
}

void PptRoundTripAnimationHashAtom::PptRoundTripAnimationHashAtom(PptRoundTripAnimationHashAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEAA40;
  *(void *)(v2 + 32) = &unk_26EBEAAE8;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptRoundTripAnimationHashAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripAnimationHashAtom::~PptRoundTripAnimationHashAtom(PptRoundTripAnimationHashAtom *this)
{
}

void non-virtual thunk to'PptRoundTripAnimationHashAtom::~PptRoundTripAnimationHashAtom(PptRoundTripAnimationHashAtom *this)
{
}

void non-virtual thunk to'PptExLinkAtom::~PptExLinkAtom(PptExLinkAtom *this)
{
}

void non-virtual thunk to'PptExMediaAtom::~PptExMediaAtom(PptExMediaAtom *this)
{
}

void PptRoundTripContentMasterInfoAtom::PptRoundTripContentMasterInfoAtom(PptRoundTripContentMasterInfoAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBEAD28;
  v2[4] = &unk_26EBEADD0;
}

uint64_t PptRoundTripContentMasterInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripContentMasterInfoAtom::~PptRoundTripContentMasterInfoAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripContentMasterInfoAtom::~PptRoundTripContentMasterInfoAtom(PptRoundTripContentMasterInfoAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptExObjListAtom::~PptExObjListAtom(PptExObjListAtom *this)
{
}

void non-virtual thunk to'PptExObjRefAtom::~PptExObjRefAtom(PptExObjRefAtom *this)
{
}

void PptExOleObj::PptExOleObj(PptExOleObj *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB010;
  *(void *)(v2 + 32) = &unk_26EBEB0B8;
}

uint64_t PptExOleObj::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptExOleObj::~PptExOleObj(PptExOleObj *this)
{
}

void non-virtual thunk to'PptExOleObj::~PptExOleObj(PptExOleObj *this)
{
}

void non-virtual thunk to'PptExOleObjAtom::~PptExOleObjAtom(PptExOleObjAtom *this)
{
}

void PptExOleObjStg::PptExOleObjStg(PptExOleObjStg *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB200;
  *(void *)(v2 + 32) = &unk_26EBEB2A8;
  *(_DWORD *)(v2 + 48) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 56));
}

void PptExOleObjStg::PptExOleObjStg(PptExOleObjStg *this)
{
  EshAtom::EshAtom(this, 0x1011u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEB200;
  *(void *)(v1 + 32) = &unk_26EBEB2A8;
  *(_DWORD *)(v1 + 48) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v1 + 56));
}

void non-virtual thunk to'PptExOleObjStg::~PptExOleObjStg(PptExOleObjStg *this)
{
  *((void *)this - 4) = &unk_26EBEB200;
  *(void *)this = &unk_26EBEB2A8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 24));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEB200;
  *(void *)this = &unk_26EBEB2A8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 24));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripContentMasterIdAtom::PptRoundTripContentMasterIdAtom(PptRoundTripContentMasterIdAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB2F8;
  *(void *)(v2 + 32) = &unk_26EBEB3A0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 52) = 0;
}

uint64_t PptRoundTripContentMasterIdAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripContentMasterIdAtom::~PptRoundTripContentMasterIdAtom(PptRoundTripContentMasterIdAtom *this)
{
}

void non-virtual thunk to'PptRoundTripContentMasterIdAtom::~PptRoundTripContentMasterIdAtom(PptRoundTripContentMasterIdAtom *this)
{
}

void non-virtual thunk to'PptExWaveAudioEmbeddedAtom::~PptExWaveAudioEmbeddedAtom(PptExWaveAudioEmbeddedAtom *this)
{
}

void non-virtual thunk to'PptFontEmbedDataAtom::~PptFontEmbedDataAtom(PptFontEmbedDataAtom *this)
{
}

{
  uint64_t vars8;

  PptBinaryDataAtom::~PptBinaryDataAtom((PptFontEmbedDataAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptFontEntityAtom::PptFontEntityAtom(PptFontEntityAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBEB5F0;
  *(void *)(v3 + 32) = &unk_26EBEB698;
  CsString::CsString((CsString *)(v3 + 48));
  *((_WORD *)this + 36) = 0;
}

void non-virtual thunk to'PptFontEntityAtom::~PptFontEntityAtom(PptFontEntityAtom *this)
{
  *((void *)this - 4) = &unk_26EBEB5F0;
  *(void *)this = &unk_26EBEB698;
  CsString::~CsString((CsString *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEB5F0;
  *(void *)this = &unk_26EBEB698;
  CsString::~CsString((CsString *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptFooterMCAtom::~PptFooterMCAtom(PptFooterMCAtom *this)
{
}

void non-virtual thunk to'PptGenericDateMCAtom::~PptGenericDateMCAtom(PptGenericDateMCAtom *this)
{
}

void PptGLineAtom::PptGLineAtom(PptGLineAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBEB8D8;
  *(void *)(v3 + 32) = &unk_26EBEB980;
  PptGPointAtom::PptGPointAtom((PptGPointAtom *)(v3 + 48));
  PptGPointAtom::PptGPointAtom((PptGLineAtom *)((char *)this + 104));
}

uint64_t PptGLineAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGLineAtom::~PptGLineAtom(PptGLineAtom *this)
{
}

void non-virtual thunk to'PptGLineAtom::~PptGLineAtom(PptGLineAtom *this)
{
}

void PptGPointAtom::PptGPointAtom(PptGPointAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEB9D0;
  *(void *)(v2 + 32) = &unk_26EBEBA78;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptGPointAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGPointAtom::~PptGPointAtom(PptGPointAtom *this)
{
}

void non-virtual thunk to'PptGPointAtom::~PptGPointAtom(PptGPointAtom *this)
{
}

void PptRoundTripNewPlaceholderIdAtom::PptRoundTripNewPlaceholderIdAtom(PptRoundTripNewPlaceholderIdAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBAC8;
  *(void *)(v2 + 32) = &unk_26EBEBB70;
}

uint64_t PptRoundTripNewPlaceholderIdAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripNewPlaceholderIdAtom::~PptRoundTripNewPlaceholderIdAtom(PptRoundTripNewPlaceholderIdAtom *this)
{
}

void non-virtual thunk to'PptRoundTripNewPlaceholderIdAtom::~PptRoundTripNewPlaceholderIdAtom(PptRoundTripNewPlaceholderIdAtom *this)
{
}

void PptGRatioAtom::PptGRatioAtom(PptGRatioAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBBC0;
  *(void *)(v2 + 32) = &unk_26EBEBC68;
}

uint64_t PptGRatioAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGRatioAtom::~PptGRatioAtom(PptGRatioAtom *this)
{
}

void non-virtual thunk to'PptGRatioAtom::~PptGRatioAtom(PptGRatioAtom *this)
{
}

void PptGRColorAtom::PptGRColorAtom(PptGRColorAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBCB8;
  *(void *)(v2 + 32) = &unk_26EBEBD60;
  *(void *)(v2 + 48) = 255;
  *(_DWORD *)(v2 + 56) = 255;
}

uint64_t PptGRColorAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGRColorAtom::~PptGRColorAtom(PptGRColorAtom *this)
{
}

void non-virtual thunk to'PptGRColorAtom::~PptGRColorAtom(PptGRColorAtom *this)
{
}

void PptGRectAtom::PptGRectAtom(PptGRectAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEBDB0;
  *(void *)(v2 + 32) = &unk_26EBEBE58;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
}

void PptGRectAtom::PptGRectAtom(PptGRectAtom *this)
{
  EshAtom::EshAtom(this, 0xBD1u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEBDB0;
  *(void *)(v1 + 32) = &unk_26EBEBE58;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
}

uint64_t PptGRectAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGRectAtom::~PptGRectAtom(PptGRectAtom *this)
{
}

void non-virtual thunk to'PptGRectAtom::~PptGRectAtom(PptGRectAtom *this)
{
}

void PptGScalingAtom::PptGScalingAtom(PptGScalingAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBEBEA8;
  *(void *)(v3 + 32) = &unk_26EBEBF50;
  PptGRatioAtom::PptGRatioAtom((PptGRatioAtom *)(v3 + 48));
  PptGRatioAtom::PptGRatioAtom((PptGScalingAtom *)((char *)this + 104));
}

uint64_t PptGScalingAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptGScalingAtom::~PptGScalingAtom(PptGScalingAtom *this)
{
}

void non-virtual thunk to'PptGScalingAtom::~PptGScalingAtom(PptGScalingAtom *this)
{
}

void non-virtual thunk to'PptGuideAtom::~PptGuideAtom(PptGuideAtom *this)
{
}

void non-virtual thunk to'PptHeaderMCAtom::~PptHeaderMCAtom(PptHeaderMCAtom *this)
{
}

void non-virtual thunk to'PptHeadersFootersAtom::~PptHeadersFootersAtom(PptHeadersFootersAtom *this)
{
}

void PptInt4ArrayAtom::PptInt4ArrayAtom(PptInt4ArrayAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEC288;
  *(void *)(v2 + 32) = &unk_26EBEC330;
}

uint64_t PptInt4ArrayAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptInt4ArrayAtom::~PptInt4ArrayAtom(PptInt4ArrayAtom *this)
{
}

void non-virtual thunk to'PptInt4ArrayAtom::~PptInt4ArrayAtom(PptInt4ArrayAtom *this)
{
}

void non-virtual thunk to'PptInteractiveInfoAtom::~PptInteractiveInfoAtom(PptInteractiveInfoAtom *this)
{
}

void non-virtual thunk to'PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom(PptTextMasterStyle9Atom *this)
{
}

{
  uint64_t vars8;

  PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom((PptTextMasterStyle9Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptNamedShowSlidesAtom::~PptNamedShowSlidesAtom(PptNamedShowSlidesAtom *this)
{
  *((void *)this - 4) = &unk_26EBEC570;
  *(void *)this = &unk_26EBEC618;
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1)
  {
    *((void *)this + 3) = v1;
    operator delete(v1);
  }
}

{
  void *v1;
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEC570;
  *(void *)this = &unk_26EBEC618;
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1)
  {
    *((void *)this + 3) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptNotesAtom::~PptNotesAtom(PptNotesAtom *this)
{
}

void non-virtual thunk to'PptOEPlaceholderAtom::~PptOEPlaceholderAtom(PptOEPlaceholderAtom *this)
{
}

void non-virtual thunk to'PptOEShapeAtom::~PptOEShapeAtom(PptOEShapeAtom *this)
{
}

void non-virtual thunk to'PptTextOutlineBlockKeyAtom::~PptTextOutlineBlockKeyAtom(PptTextOutlineBlockKeyAtom *this)
{
}

void non-virtual thunk to'PptOutlineTextRefAtom::~PptOutlineTextRefAtom(PptOutlineTextRefAtom *this)
{
}

void PptParaFormatAtom::PptParaFormatAtom(PptParaFormatAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBECB40;
  *(void *)(v2 + 32) = &unk_26EBECBE8;
  *(_DWORD *)(v2 + 45) = 0;
  *(void *)(v2 + 52) = 255;
  *(_DWORD *)(v2 + 60) = 255;
}

uint64_t PptParaFormatAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptParaFormatAtom::~PptParaFormatAtom(PptParaFormatAtom *this)
{
}

void non-virtual thunk to'PptParaFormatAtom::~PptParaFormatAtom(PptParaFormatAtom *this)
{
}

uint64_t PptPersistPtrIncrAtom::operator==(uint64_t a1, uint64_t a2)
{
  if (EshHeader::operator!=(a2 + 12, a1 + 12)) {
    return 0;
  }
  uint64_t v4 = *(const void **)(a2 + 48);
  size_t v5 = *(void *)(a2 + 56) - (void)v4;
  unint64_t v6 = *(const void **)(a1 + 48);
  if ((v5 >> 2) != ((*(void *)(a1 + 56) - (void)v6) >> 2) || memcmp(v4, v6, v5)) {
    return 0;
  }
  return ChSet<ChPair<unsigned int,unsigned int>,PptPersistPtrIncrAtom::RefLess<ChPair<unsigned int,unsigned int>>>::operator==(a2 + 72, a1 + 72);
}

BOOL EshHeader::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2
      || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
      || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12);
}

uint64_t ChSet<ChPair<unsigned int,unsigned int>,PptPersistPtrIncrAtom::RefLess<ChPair<unsigned int,unsigned int>>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  uint64_t v7 = *(void **)a2;
  size_t v5 = (void *)(a2 + 8);
  unint64_t v6 = v7;
  BOOL v8 = v3 == v2 || v6 == v5;
  if (v8) {
    return 1;
  }
  do
  {
    BOOL v9 = *(void *)((char *)v3 + 28) == *(void *)((char *)v6 + 28);
    if (*(void *)((char *)v3 + 28) != *(void *)((char *)v6 + 28)) {
      break;
    }
    unint64_t v10 = (void *)v3[1];
    if (v10)
    {
      do
      {
        unsigned int v11 = v10;
        unint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unsigned int v11 = (void *)v3[2];
        BOOL v8 = *v11 == (void)v3;
        uint64_t v3 = v11;
      }
      while (!v8);
    }
    unsigned int v12 = (void *)v6[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = v12;
        unsigned int v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (void *)v6[2];
        BOOL v8 = *v13 == (void)v6;
        unint64_t v6 = v13;
      }
      while (!v8);
    }
    if (v11 == v2) {
      break;
    }
    uint64_t v3 = v11;
    unint64_t v6 = v13;
  }
  while (v13 != v5);
  return v9;
}

void non-virtual thunk to'PptPersistPtrIncrAtom::~PptPersistPtrIncrAtom(PptPersistPtrIncrAtom *this)
{
  *((void *)this - 4) = &unk_26EBECC38;
  *(void *)this = &unk_26EBECCE8;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBECC38;
  *(void *)this = &unk_26EBECCE8;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23EC997B0);
}

uint64_t *std::__tree<ChPair<unsigned int,unsigned int>,PptPersistPtrIncrAtom::RefLess<ChPair<unsigned int,unsigned int>>,std::allocator<ChPair<unsigned int,unsigned int>>>::__emplace_unique_key_args<ChPair<unsigned int,unsigned int>,ChPair<unsigned int,unsigned int> const&>(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  size_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        size_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      size_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerTimeStampLess,std::allocator<TSUFlushableObjectInfo *>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void non-virtual thunk to'PptPrintOptions::~PptPrintOptions(PptPrintOptions *this)
{
}

void non-virtual thunk to'PptRecolorInfoAtom::~PptRecolorInfoAtom(PptRecolorInfoAtom *this)
{
}

{
  uint64_t vars8;

  PptRecolorInfoAtom::~PptRecolorInfoAtom((PptRecolorInfoAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

uint64_t PptRecolorInfoAtom::operator=(uint64_t a1, uint64_t a2)
{
  PptRecolorInfoAtom::clearColors((void *)a1);
  PptRecolorInfoAtom::clearFills((void *)a1);
  PptAtom::operator=(a1, a2);
  if (((*(void *)(a2 + 56) - *(void *)(a2 + 48)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      size_t v5 = (PptRecolorSpec *)operator new(0x20uLL);
      PptRecolorSpec::PptRecolorSpec(v5, *(unsigned char *)(*(void *)(*(void *)(a2 + 48) + 8 * v4) + 25));
      (*((void (**)(PptRecolorSpec *, void))v5->var0 + 2))(v5, *(void *)(*(void *)(a2 + 48) + 8 * v4));
      unsigned int v7 = *(PptRecolorSpec ***)(a1 + 56);
      unint64_t v6 = *(void *)(a1 + 64);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *(void *)(a1 + 48);
        unint64_t v10 = (unint64_t)v7 - v9;
        unint64_t v11 = (v6 - v9) >> 3;
        unsigned int v12 = 2 * v11;
        if (2 * (int)v11 <= (v10 >> 3) + 1) {
          unsigned int v12 = (v10 >> 3) + 1;
        }
        if (v11 >= 0x7FFFFFFF) {
          unint64_t v13 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 64, v13);
          uint64_t v16 = v15;
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v16 = 0;
        }
        unint64_t v17 = (PptRecolorSpec **)&v14[v10 & 0x7FFFFFFF8];
        char *v17 = v5;
        BOOL v8 = v17 + 1;
        unsigned int v19 = *(char **)(a1 + 48);
        unsigned __int16 v18 = *(char **)(a1 + 56);
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = (PptRecolorSpec *)*((void *)v18 - 1);
            v18 -= 8;
            *--unint64_t v17 = v20;
          }
          while (v18 != v19);
          unsigned __int16 v18 = *(char **)(a1 + 48);
        }
        *(void *)(a1 + 48) = v17;
        *(void *)(a1 + 56) = v8;
        *(void *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = &v14[8 * v16];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *unsigned int v7 = v5;
        BOOL v8 = v7 + 1;
      }
      *(void *)(a1 + 56) = v8;
      ++v4;
    }
    while (v4 < ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  }
  if (((*(void *)(a2 + 80) - *(void *)(a2 + 72)) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v21 = 0;
    do
    {
      unint64_t v22 = (PptRecolorSpec *)operator new(0x20uLL);
      PptRecolorSpec::PptRecolorSpec(v22, *(unsigned char *)(*(void *)(*(void *)(a2 + 48) + 8 * v21) + 25));
      (*((void (**)(PptRecolorSpec *, void))v22->var0 + 2))(v22, *(void *)(*(void *)(a2 + 72) + 8 * v21));
      uint64_t v24 = *(PptRecolorSpec ***)(a1 + 80);
      unint64_t v23 = *(void *)(a1 + 88);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = *(void *)(a1 + 72);
        unint64_t v27 = (unint64_t)v24 - v26;
        unint64_t v28 = (v23 - v26) >> 3;
        unsigned int v29 = 2 * v28;
        if (2 * (int)v28 <= (v27 >> 3) + 1) {
          unsigned int v29 = (v27 >> 3) + 1;
        }
        if (v28 >= 0x7FFFFFFF) {
          unint64_t v30 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 88, v30);
          uint64_t v33 = v32;
        }
        else
        {
          uint64_t v31 = 0;
          uint64_t v33 = 0;
        }
        int v34 = (PptRecolorSpec **)&v31[v27 & 0x7FFFFFFF8];
        char *v34 = v22;
        uint64_t v25 = v34 + 1;
        uint64_t v36 = *(char **)(a1 + 72);
        int v35 = *(char **)(a1 + 80);
        if (v35 != v36)
        {
          do
          {
            uint64_t v37 = (PptRecolorSpec *)*((void *)v35 - 1);
            v35 -= 8;
            *--int v34 = v37;
          }
          while (v35 != v36);
          int v35 = *(char **)(a1 + 72);
        }
        *(void *)(a1 + 72) = v34;
        *(void *)(a1 + 80) = v25;
        *(void *)(a1 + 88) = &v31[8 * v33];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        char *v24 = v22;
        uint64_t v25 = v24 + 1;
      }
      *(void *)(a1 + 80) = v25;
      ++v21;
    }
    while (v21 < ((*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  }
  *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
  return a1;
}

void sub_238E7B284(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PptRecolorSpec::operator=(uint64_t a1, uint64_t a2)
{
  EshColor::operator=(a1 + 8, a2 + 8);
  EshColor::operator=(a1 + 16, a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void non-virtual thunk to'PptReviewAtom::~PptReviewAtom(PptReviewAtom *this)
{
}

void PptRTFDateTimeMCAtom::PptRTFDateTimeMCAtom(PptRTFDateTimeMCAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED068;
  *(void *)(v2 + 32) = &unk_26EBED110;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_DWORD *)(v2 + 176) = 0;
}

uint64_t PptRTFDateTimeMCAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRTFDateTimeMCAtom::~PptRTFDateTimeMCAtom(PptRTFDateTimeMCAtom *this)
{
}

void non-virtual thunk to'PptRTFDateTimeMCAtom::~PptRTFDateTimeMCAtom(PptRTFDateTimeMCAtom *this)
{
}

void PptRulerIndentAtom::PptRulerIndentAtom(PptRulerIndentAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBED160;
  *(void *)(v2 + 32) = &unk_26EBED208;
}

uint64_t PptRulerIndentAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRulerIndentAtom::~PptRulerIndentAtom(PptRulerIndentAtom *this)
{
}

void non-virtual thunk to'PptRulerIndentAtom::~PptRulerIndentAtom(PptRulerIndentAtom *this)
{
}

uint64_t ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::find_internal(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t result = a3;
  if (a3)
  {
    unsigned int v4 = *a2;
    unsigned int v5 = *((_DWORD *)a2 + 1);
    unsigned int v6 = *((_DWORD *)a2 + 2);
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(result + 24);
      if (v4 > v7
        || v4 == v7 && ((unsigned int v10 = *(_DWORD *)(result + 28), v5 > v10) || v5 == v10 && v6 >= *(_DWORD *)(result + 32)))
      {
        if (v7 > v4) {
          return result;
        }
        if (v7 == v4)
        {
          unsigned int v8 = *(_DWORD *)(result + 28);
          if (v8 > v5 || v8 == v5 && *(_DWORD *)(result + 32) >= v6) {
            return result;
          }
        }
        uint64_t v9 = (uint64_t *)(result + 16);
      }
      else
      {
        uint64_t v9 = (uint64_t *)(result + 8);
      }
      uint64_t result = *v9;
    }
    while (*v9);
  }
  return result;
}

double ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::insert_internal(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v5 = a3;
  uint64_t v7 = *a3;
  if (*a3)
  {
    unsigned int v8 = *a2;
    unsigned int v9 = *((_DWORD *)a2 + 1);
    unsigned int v10 = *((_DWORD *)a2 + 2);
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v7 + 24);
      if (v8 > v11 || v8 == v11 && ((unsigned int v13 = *(_DWORD *)(v7 + 28), v9 > v13) || v9 == v13 && v10 >= *(_DWORD *)(v7 + 32)))
      {
        if (v11 > v8) {
          return result;
        }
        if (v11 == v8)
        {
          unsigned int v12 = *(_DWORD *)(v7 + 28);
          if (v12 > v9 || v12 == v9 && *(_DWORD *)(v7 + 32) >= v10) {
            return result;
          }
        }
        unsigned int v5 = (uint64_t *)(v7 + 16);
      }
      else
      {
        unsigned int v5 = (uint64_t *)(v7 + 8);
      }
      a4 = v7;
      uint64_t v7 = *v5;
    }
    while (*v5);
  }
  unint64_t v14 = operator new(0x28uLL);
  v14[1] = 0;
  v14[2] = 0;
  uint64_t *v5 = (uint64_t)v14;
  void *v14 = a4;
  uint64_t v15 = *v5;
  *(_WORD *)(v15 + 24) = *a2;
  double result = *(double *)(a2 + 2);
  *(double *)(v15 + 28) = result;
  return result;
}

void non-virtual thunk to'PptSlideAtom::~PptSlideAtom(PptSlideAtom *this)
{
}

void PptSlideBaseAtom::PptSlideBaseAtom(PptSlideBaseAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(unsigned char *)(v3 + 44) = 0;
  *(void *)uint64_t v3 = &unk_26EBED350;
  *(void *)(v3 + 32) = &unk_26EBED3F8;
  PptGRectAtom::PptGRectAtom((PptGRectAtom *)(v3 + 48));
  *((unsigned char *)this + 116) = 0;
  *((_DWORD *)this + 28) = 0;
}

uint64_t PptSlideBaseAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptSlideBaseAtom::~PptSlideBaseAtom(PptSlideBaseAtom *this)
{
}

void non-virtual thunk to'PptSlideBaseAtom::~PptSlideBaseAtom(PptSlideBaseAtom *this)
{
}

void non-virtual thunk to'PptSlideNumberMCAtom::~PptSlideNumberMCAtom(PptSlideNumberMCAtom *this)
{
}

void non-virtual thunk to'PptSlidePersistAtom::~PptSlidePersistAtom(PptSlidePersistAtom *this)
{
}

void non-virtual thunk to'PptSlideViewInfoAtom::~PptSlideViewInfoAtom(PptSlideViewInfoAtom *this)
{
}

void non-virtual thunk to'PptSoundCollAtom::~PptSoundCollAtom(PptSoundCollAtom *this)
{
}

void non-virtual thunk to'PptSoundDataAtom::~PptSoundDataAtom(PptSoundDataAtom *this)
{
  *((void *)this - 4) = &unk_26EBED828;
  *(void *)this = &unk_26EBED8E0;
  PptBinaryDataAtom::~PptBinaryDataAtom((PptSoundDataAtom *)((char *)this - 32));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBED828;
  *(void *)this = &unk_26EBED8E0;
  PptBinaryDataAtom::~PptBinaryDataAtom((PptSoundDataAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptSrKinsokuAtom::~PptSrKinsokuAtom(PptSrKinsokuAtom *this)
{
}

void non-virtual thunk to'PptSSDocInfoAtom::~PptSSDocInfoAtom(PptSSDocInfoAtom *this)
{
  *((void *)this - 4) = &unk_26EBEDA28;
  *(void *)this = &unk_26EBEDAD0;
  CsString::~CsString((CsString *)((char *)this + 32));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEDA28;
  *(void *)this = &unk_26EBEDAD0;
  CsString::~CsString((CsString *)((char *)this + 32));
  JUMPOUT(0x23EC997B0);
}

void PptSSlideLayoutAtom::PptSSlideLayoutAtom(PptSSlideLayoutAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEDB20;
  *(void *)(v2 + 32) = &unk_26EBEDBC8;
}

uint64_t PptSSlideLayoutAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptSSlideLayoutAtom::~PptSSlideLayoutAtom(PptSSlideLayoutAtom *this)
{
}

void non-virtual thunk to'PptSSlideLayoutAtom::~PptSSlideLayoutAtom(PptSSlideLayoutAtom *this)
{
}

void non-virtual thunk to'PptSSSlideInfoAtom::~PptSSSlideInfoAtom(PptSSSlideInfoAtom *this)
{
}

void non-virtual thunk to'PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom(PptTextBlockStyling10Atom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom((PptTextBlockStyling10Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptTextBlockStylingAtom::PptTextBlockStylingAtom(PptTextBlockStylingAtom *this)
{
  EshAtom::EshAtom(this, 0xFA1u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEDE08;
  *(void *)(v1 + 32) = &unk_26EBEDEB0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
}

void non-virtual thunk to'PptTextBlockStylingAtom::~PptTextBlockStylingAtom(PptTextBlockStylingAtom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStylingAtom::~PptTextBlockStylingAtom((PptTextBlockStylingAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextBookmarkAtom::~PptTextBookmarkAtom(PptTextBookmarkAtom *this)
{
}

void non-virtual thunk to'PptTextBytesAtom::~PptTextBytesAtom(PptTextBytesAtom *this)
{
}

{
  uint64_t vars8;

  PptTextBytesAtom::~PptTextBytesAtom((PptTextBytesAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

uint64_t PptTextBytesAtom::operator=(uint64_t a1, const void **a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    MEMORY[0x23EC99790](v4, 0x1000C8077774924);
  }
  *(void *)(a1 + 48) = 0;
  PptAtom::operator=(a1, (uint64_t)a2);
  unsigned int DataLength = EshRecord::getDataLength((EshRecord *)a2);
  EshRecord::setDataLength(a1, DataLength);
  if (DataLength)
  {
    unsigned int v6 = operator new[](DataLength);
    *(void *)(a1 + 48) = v6;
    memcpy(v6, a2[6], DataLength);
  }
  return a1;
}

void PptTextCharsAtom::PptTextCharsAtom(PptTextCharsAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE0F8;
  *(void *)(v2 + 32) = &unk_26EBEE1A0;
  CsString::CsString((CsString *)(v2 + 48));
}

void non-virtual thunk to'PptTextCharsAtom::~PptTextCharsAtom(PptTextCharsAtom *this)
{
  *((void *)this - 4) = &unk_26EBEE0F8;
  *(void *)this = &unk_26EBEE1A0;
  CsString::~CsString((CsString *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEE0F8;
  *(void *)this = &unk_26EBEE1A0;
  CsString::~CsString((CsString *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextHeaderAtom::~PptTextHeaderAtom(PptTextHeaderAtom *this)
{
}

void PptRoundTripNotesMasterTextStylesAtom::PptRoundTripNotesMasterTextStylesAtom(PptRoundTripNotesMasterTextStylesAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBEE2E8;
  v2[4] = &unk_26EBEE390;
}

uint64_t PptRoundTripNotesMasterTextStylesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripNotesMasterTextStylesAtom::~PptRoundTripNotesMasterTextStylesAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripNotesMasterTextStylesAtom::~PptRoundTripNotesMasterTextStylesAtom(PptRoundTripNotesMasterTextStylesAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void PptTextGenericRulerAtom::~PptTextGenericRulerAtom(PptTextGenericRulerAtom *this)
{
  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextGenericRulerAtom::~PptTextGenericRulerAtom(PptTextGenericRulerAtom *this)
{
  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom(PptTextBlockSpecialInfoAtom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom((PptTextBlockSpecialInfoAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom(PptTextBlockStyling9Atom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom((PptTextBlockStyling9Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultCharacterStyleAtom::PptTextDefaultCharacterStyleAtom(PptTextDefaultCharacterStyleAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE6C8;
  *(void *)(v2 + 32) = &unk_26EBEE778;
  PptCharProperty::PptCharProperty((PptCharProperty *)(v2 + 48));
}

uint64_t PptTextDefaultCharacterStyleAtom::operator=(uint64_t a1, uint64_t a2)
{
  PptAtom::operator=(a1, a2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + XlPtg::XlPtg((uint64_t)this + 8, 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  return a1;
}

void non-virtual thunk to'PptTextDefaultCharacterStyleAtom::~PptTextDefaultCharacterStyleAtom(PptTextDefaultCharacterStyleAtom *this)
{
}

void non-virtual thunk to'PptTxInteracInfoAtom::~PptTxInteracInfoAtom(PptTxInteracInfoAtom *this)
{
}

void non-virtual thunk to'PptTextMasterStyleAtom::~PptTextMasterStyleAtom(PptTextMasterStyleAtom *this)
{
}

{
  uint64_t vars8;

  PptTextMasterStyleAtom::~PptTextMasterStyleAtom((PptTextMasterStyleAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultParagraphStyleAtom::PptTextDefaultParagraphStyleAtom(PptTextDefaultParagraphStyleAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEE9B8;
  *(void *)(v2 + 32) = &unk_26EBEEA60;
  PptParaProperty::PptParaProperty((PptParaProperty *)(v2 + 48));
}

void non-virtual thunk to'PptTextDefaultParagraphStyleAtom::~PptTextDefaultParagraphStyleAtom(PptTextDefaultParagraphStyleAtom *this)
{
  *((void *)this - 4) = &unk_26EBEE9B8;
  *(void *)this = &unk_26EBEEA60;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEE9B8;
  *(void *)this = &unk_26EBEEA60;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultSpecialInfoAtom::PptTextDefaultSpecialInfoAtom(PptTextDefaultSpecialInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEEAB0;
  *(void *)(v2 + 32) = &unk_26EBEEB58;
  PptSpecialInfo::PptSpecialInfo((PptSpecialInfo *)(v2 + 48));
}

void non-virtual thunk to'PptTextDefaultSpecialInfoAtom::~PptTextDefaultSpecialInfoAtom(PptTextDefaultSpecialInfoAtom *this)
{
}

void non-virtual thunk to'PptUserEditAtom::~PptUserEditAtom(PptUserEditAtom *this)
{
}

void PptVBAInfoAtom::PptVBAInfoAtom(PptVBAInfoAtom *this)
{
  EshAtom::EshAtom(this, 0x400u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)uint64_t v1 = &unk_26EBEECA0;
  *(void *)(v1 + 32) = &unk_26EBEED48;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

void non-virtual thunk to'PptVBAInfoAtom::~PptVBAInfoAtom(PptVBAInfoAtom *this)
{
  *((void *)this - 4) = &unk_26EBEECA0;
  *(void *)this = &unk_26EBEED48;
}

{
  *((void *)this - 4) = &unk_26EBEECA0;
  *(void *)this = &unk_26EBEED48;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptViewInfoAtom::~PptViewInfoAtom(PptViewInfoAtom *this)
{
}

void non-virtual thunk to'PptViewSettingsAtom::~PptViewSettingsAtom(PptViewSettingsAtom *this)
{
}

void PptRoundTripColorMappingAtom::PptRoundTripColorMappingAtom(PptRoundTripColorMappingAtom *this, const EshHeader *a2)
{
  PptRoundTripXmlBlobAtom::PptRoundTripXmlBlobAtom(this, a2);
  void *v2 = &unk_26EBEEF88;
  v2[4] = &unk_26EBEF030;
}

uint64_t PptRoundTripColorMappingAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripColorMappingAtom::~PptRoundTripColorMappingAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE8350;
  *(void *)&this->var6 = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE8350;
  *(void *)&this->var6 = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripColorMappingAtom::~PptRoundTripColorMappingAtom(PptRoundTripColorMappingAtom *this)
{
  *((void *)this - 4) = &unk_26EBE8350;
  *(void *)this = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE8350;
  *(void *)this = &unk_26EBE83F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripHeaderFooterPlaceholderAtom::PptRoundTripHeaderFooterPlaceholderAtom(PptRoundTripHeaderFooterPlaceholderAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEF080;
  *(void *)(v2 + 32) = &unk_26EBEF128;
}

uint64_t PptRoundTripHeaderFooterPlaceholderAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripHeaderFooterPlaceholderAtom::~PptRoundTripHeaderFooterPlaceholderAtom(PptRoundTripHeaderFooterPlaceholderAtom *this)
{
}

void non-virtual thunk to'PptRoundTripHeaderFooterPlaceholderAtom::~PptRoundTripHeaderFooterPlaceholderAtom(PptRoundTripHeaderFooterPlaceholderAtom *this)
{
}

void PptRoundTripCustomTableStylesAtom::PptRoundTripCustomTableStylesAtom(PptRoundTripCustomTableStylesAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBEF178;
  v2[4] = &unk_26EBEF220;
}

uint64_t PptRoundTripCustomTableStylesAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripCustomTableStylesAtom::~PptRoundTripCustomTableStylesAtom(OcBinaryData *this)
{
  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripCustomTableStylesAtom::~PptRoundTripCustomTableStylesAtom(PptRoundTripCustomTableStylesAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextRulerAtom::~PptTextRulerAtom(PptTextRulerAtom *this)
{
  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultRulerAtom::~PptTextDefaultRulerAtom(PptTextDefaultRulerAtom *this)
{
  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBEE3E0;
  *((void *)this + 4) = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextDefaultRulerAtom::~PptTextDefaultRulerAtom(PptTextDefaultRulerAtom *this)
{
  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBEE3E0;
  *(void *)this = &unk_26EBEE488;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this - 32);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptAtom::~PptAtom(PptAtom *this)
{
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, OcBinaryData *a2)
{
  signed int v2 = *((_DWORD *)this + 12) - a2->var1;
  if (v2 <= 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 4012;
    goto LABEL_8;
  }
  signed int var3 = a2->var3;
  if (v2 < var3)
  {
    OcBinaryData::setMinimumCapacity(a2, v2);
    a2->signed int var3 = v2;
    signed int var3 = v2;
  }
  (*(void (**)(void, char *, signed int *))(**((void **)this + 1) + 56))(*((void *)this + 1), a2->var5, &var3);
  if (var3 != a2->var3)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v7 = 4003;
LABEL_8:
    _DWORD *exception = v7;
  }
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

{
  PptParserVisitor::visitRoundTripZipBlobAtom(this, a2);
  return 1;
}

uint64_t PptParserVisitor::parseParaProperty9(PptParserVisitor *this, PptParaProperty9 *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v5 = result;
  if ((result & 0x800000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
    *((_WORD *)&a2->var0 + 1) = result;
    *(unsigned char *)&a2->var0 |= 1u;
    if ((v5 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000000) == 0) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else if ((result & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  LOBYTE(a2->var1) = result != 0;
  char var0 = (char)a2->var0;
  a2->signed int var3 = (PptTextAutoNumberScheme)65539;
  *(unsigned char *)&a2->char var0 = var0 | 6;
  if ((v5 & 0x1000000) == 0) {
    return result;
  }
LABEL_4:
  char v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  a2->signed int var3 = (PptTextAutoNumberScheme)(v6 & 0x3F | (result << 16));
  *(unsigned char *)&a2->var0 |= 4u;
  return result;
}

uint64_t PptParserVisitor::parseCharProperty9(PptParserVisitor *this, PptCharProperty9 *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((result & 0x100000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    *(unsigned char *)a2 = *(unsigned char *)a2 & 0xE0 | (2 * (result & 0xF)) | 1;
  }
  return result;
}

uint64_t PptParserVisitor::visit(uint64_t a1)
{
  return 1;
}

uint64_t PptParserVisitor::parseParaRun(PptParserVisitor *this, PptParaRun *a2, unsigned int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *(_DWORD *)a2 = result;
  if (result)
  {
    unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
    if (v7 <= 5) {
      __int16 v8 = v7;
    }
    else {
      __int16 v8 = 0;
    }
    *((_WORD *)a2 + 2) = v8;
    return PptParserVisitor::parseParaProperty(this, (PptParaRun *)((char *)a2 + 8), a3);
  }
  else
  {
    *(_DWORD *)a2 = 0;
  }
  return result;
}

uint64_t PptParserVisitor::parseCharRun(PptParserVisitor *this, PptCharRun *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  a2->char var0 = result;
  if (result)
  {
    return PptParserVisitor::parseCharProperty(this, &a2->var1);
  }
  return result;
}

uint64_t PptParserVisitor::parseTabs(uint64_t a1, void *a2, unsigned int a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 2 > a3
    || (unsigned int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8)),
        int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)),
        __CFADD__(v7, 4 * v6))
    || v7 + 4 * v6 > a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  std::vector<PptTab,ChAllocator<PptTab>>::resize((uint64_t)a2, v6);
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v6;
    do
    {
      __int16 v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
      int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
      PptTab::PptTab((uint64_t)&v16, v11, v10);
      uint64_t v12 = *a2 + v8;
      int v13 = v16;
      *(_WORD *)(v12 + 4) = v17;
      *(_DWORD *)uint64_t v12 = v13;
      v8 += 8;
    }
    while (v9 != v8);
  }
  return 1;
}

uint64_t PptParserVisitor::parseSpecialInfo9(PptParserVisitor *this, PptSpecialInfo9 *a2, char a3, unsigned int a4)
{
  if ((a3 & 0x40) != 0)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 2 > a4) {
      goto LABEL_8;
    }
    *((unsigned char *)a2 + 1) = *((unsigned char *)a2 + 1) & 0xFE | ((*(unsigned int (**)(void))(**((void **)this + 1)
                                                                                             + 80))(*((void *)this + 1)) != 0);
    *(unsigned char *)a2 |= 2u;
  }
  if ((a3 & 0x20) != 0)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 4 <= a4)
    {
      int v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
      *((unsigned char *)a2 + 2) = v8 & 0xF | (16 * (v8 < 0));
      *(unsigned char *)a2 |= 1u;
      return 1;
    }
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  return 1;
}

uint64_t PptParserVisitor::parseParaProperty(PptParserVisitor *this, PptParaProperty *a2, unsigned int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v7 = result;
  if ((result & 0xF) == 0) {
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if ((v7 & 1) == 0)
  {
    if ((v7 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_45:
    *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFFD | result & 2;
    *(_WORD *)a2 |= 2u;
    if ((v7 & 4) == 0)
    {
LABEL_5:
      if ((v7 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    goto LABEL_46;
  }
  *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFFE | result & 1;
  *(_WORD *)a2 |= 1u;
  if ((v7 & 2) != 0) {
    goto LABEL_45;
  }
LABEL_4:
  if ((v7 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_46:
  *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFFB | result & 4;
  *(_WORD *)a2 |= 4u;
  if ((v7 & 8) != 0)
  {
LABEL_6:
    *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFF7 | result & 8;
    *(_WORD *)a2 |= 8u;
  }
LABEL_7:
  if ((v7 & 0x80) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    *((_WORD *)a2 + 3) = result;
    *(_WORD *)a2 |= 0x80u;
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x40) == 0) {
        goto LABEL_10;
      }
      goto LABEL_33;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  *((_WORD *)a2 + 4) = result;
  *(_WORD *)a2 |= 0x10u;
  if ((v7 & 0x40) == 0)
  {
LABEL_10:
    if ((v7 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 5) = result;
  *(_WORD *)a2 |= 0x40u;
  if ((v7 & 0x20) == 0)
  {
LABEL_11:
    if ((v7 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  v12.char var0 = (CsColour)255;
  v12.int var1 = 255;
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  uint64_t result = (uint64_t)PptColor::setColor(&v12, v9);
  int var1 = v12.var1;
  *(CsColour *)((char *)a2 + 12) = v12.var0;
  *((_DWORD *)a2 + 5) = var1;
  *(_WORD *)a2 |= 0x20u;
  if ((v7 & 0x800) == 0)
  {
LABEL_12:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xF0FF | ((result & 0xF) << 8);
  *(_WORD *)a2 |= 0x400u;
  if ((v7 & 0x1000) == 0)
  {
LABEL_13:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 12) = result;
  *(_WORD *)a2 |= 0x800u;
  if ((v7 & 0x2000) == 0)
  {
LABEL_14:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 13) = result;
  *(_WORD *)a2 |= 0x1000u;
  if ((v7 & 0x4000) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 14) = result;
  *(_WORD *)a2 |= 0x2000u;
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 15) = result;
  *(_WORD *)a2 |= 0x100u;
  if ((v7 & 0x400) == 0)
  {
LABEL_17:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 16) = result;
  *(_WORD *)a2 |= 0x200u;
  if ((v7 & 0x8000) == 0)
  {
LABEL_18:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  *((_WORD *)a2 + 17) = result;
  *(_WORD *)a2 |= 0x4000u;
  if ((v7 & 0x100000) == 0)
  {
LABEL_19:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_42:
  int v11 = operator new(0x18uLL);
  v11[1] = 0;
  void v11[2] = 0;
  void *v11 = 0;
  *((void *)a2 + 5) = v11;
  *(_WORD *)a2 |= 0x8000u;
  uint64_t result = PptParserVisitor::parseTabs((uint64_t)this, v11, a3);
  if ((v7 & 0x10000) != 0)
  {
LABEL_20:
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xCFFF | ((result & 3) << 12);
    *((unsigned char *)a2 + 2) |= 1u;
  }
LABEL_21:
  if ((*(void *)&v7 & 0xE0000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    if ((v7 & 0x20000) != 0)
    {
      *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFEF | (16 * (result & 1));
      *((unsigned char *)a2 + 2) |= 2u;
    }
    char v8 = 16 * result;
    if ((v7 & 0x40000) != 0)
    {
      *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFDF | v8 & 0x20;
      *((unsigned char *)a2 + 2) |= 4u;
    }
    if ((v7 & 0x80000) != 0)
    {
      *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFFBF | v8 & 0x40;
      *((unsigned char *)a2 + 2) |= 8u;
    }
  }
  if ((v7 & 0x200000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    *(_WORD *)((char *)a2 + 3) = *(_WORD *)((unsigned char *)a2 + 3) & 0xFF7F | ((result & 1) << 7);
    *((unsigned char *)a2 + 2) |= 0x10u;
  }
  return result;
}

uint64_t PptParserVisitor::parseCharProperty(PptParserVisitor *this, PptCharProperty *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v5 = result;
  if (!(_WORD)result) {
    goto LABEL_15;
  }
  unsigned int v6 = result;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if (v5)
  {
    *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFFE | result & 1;
    *(_DWORD *)&a2->var0 |= 1u;
    if ((v5 & 2) == 0)
    {
LABEL_4:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_4;
  }
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFFD | result & 2;
  *(_DWORD *)&a2->var0 |= 2u;
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFFB | result & 4;
  *(_DWORD *)&a2->var0 |= 4u;
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFF7 | result & 8;
  *(_DWORD *)&a2->var0 |= 8u;
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFEF | result & 0x10;
  *(_DWORD *)&a2->var0 |= 0x10u;
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFDF | result & 0x20;
  *(_DWORD *)&a2->var0 |= 0x20u;
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFFBF | result & 0x40;
  *(_DWORD *)&a2->var0 |= 0x40u;
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFF7F | result & 0x80;
  *(_DWORD *)&a2->var0 |= 0x80u;
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_40:
  *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFEFF | result & 0x100;
  *(_DWORD *)&a2->var0 |= 0x100u;
  if ((v5 & 0x200) != 0)
  {
LABEL_12:
    *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xFDFF | result & 0x200;
    *(_DWORD *)&a2->var0 |= 0x200u;
  }
LABEL_13:
  if (((v6 >> 10) & 0xF) != 0)
  {
    a2->char var0 = ($4A9E05CF4EB813CDA9C8B3A246960F55)(*(_DWORD *)&a2->var0 & 0xFFE1FFFF | (((v6 >> 10) & 0xF) << 17));
    *((_WORD *)a2 + 2) = *((_WORD *)a2 + 2) & 0xC3FF | result & 0x3C00;
  }
LABEL_15:
  if ((v5 & 0x10000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    a2->var13 = result;
    *(_DWORD *)&a2->var0 |= 0x400u;
    if ((v5 & 0x200000) == 0)
    {
LABEL_17:
      if ((v5 & 0x400000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200000) == 0)
  {
    goto LABEL_17;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  a2->var14 = result;
  *(_DWORD *)&a2->var0 |= 0x800u;
  if ((v5 & 0x400000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  a2->var15 = result;
  *(_DWORD *)&a2->var0 |= 0x1000u;
  if ((v5 & 0x800000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  a2->var16 = result;
  *(_DWORD *)&a2->var0 |= 0x2000u;
  if ((v5 & 0x20000) == 0) {
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  if (result)
  {
    a2->var17 = result;
    *(_DWORD *)&a2->var0 |= 0x4000u;
  }
LABEL_27:
  if ((v5 & 0x40000) != 0)
  {
    v9.char var0 = (CsColour)255;
    v9.int var1 = 255;
    unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
    uint64_t result = (uint64_t)PptColor::setColor(&v9, v7);
    int var1 = v9.var1;
    a2->var18.char var0 = v9.var0;
    a2->var18.int var1 = var1;
    *(_DWORD *)&a2->var0 |= 0x8000u;
  }
  if ((v5 & 0x80000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
    a2->var19 = result;
    *(_DWORD *)&a2->var0 |= 0x10000u;
  }
  return result;
}

uint64_t PptParserVisitor::parseCharProperty10(PptParserVisitor *this, PptCharProperty10 *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  int v5 = result;
  if ((result & 0x1000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    *((_WORD *)a2 + 1) = result;
    *(unsigned char *)a2 |= 1u;
    if ((v5 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x4000000) == 0) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else if ((result & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  *((_WORD *)a2 + 2) = result;
  *(unsigned char *)a2 |= 2u;
  if ((v5 & 0x4000000) == 0) {
    return result;
  }
LABEL_4:
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 2) = result;
  *(unsigned char *)a2 |= 4u;
  return result;
}

uint64_t PptParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  return 1;
}

{
  (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), (*(_DWORD *)(a2 + 16) + 8), 0);
  PptSkipVisitor::beginRead(*(void *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptEshClientAnchor *a2)
{
  return 1;
}

uint64_t PptParserVisitor::visit(uint64_t a1, _DWORD *a2)
{
  (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), (a2[4] + 8), 0);
  PptSkipVisitor::beginRead(*(void *)(a1 + 24));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  a2[7] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  a2[8] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8));
  return 1;
}

uint64_t PptParserVisitor::parseSpecialInfo(PptParserVisitor *this, PptSpecialInfo *a2, char a3, unsigned int a4)
{
  if (a3)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 2 > a4) {
      goto LABEL_11;
    }
    *((unsigned char *)&a2->var0 + 1) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1)) & 7;
    *(unsigned char *)&a2->var0 |= 1u;
  }
  if ((a3 & 2) != 0)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 2 > a4) {
      goto LABEL_11;
    }
    a2->int var1 = (SpellingInfo)(*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    *(unsigned char *)&a2->var0 |= 2u;
  }
  if ((a3 & 4) != 0)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 2 <= a4)
    {
      a2->unsigned int var2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      *(unsigned char *)&a2->var0 |= 4u;
      return 1;
    }
LABEL_11:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  return 1;
}

uint64_t PptParserVisitor::parseSpecialInfo11(PptParserVisitor *this, PptSpecialInfo11 *a2, __int16 a3, unsigned int a4)
{
  if ((a3 & 0x200) != 0)
  {
    unsigned int v7 = operator new(0x18uLL);
    v7[1] = 0;
    unsigned __int16 v7[2] = 0;
    *unsigned int v7 = 0;
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 4 > a4
      || (unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
          int v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)),
          __CFADD__(v9, 4 * v8))
      || v9 + 4 * v8 > a4)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 4003;
    }
    std::vector<int,ChAllocator<int>>::resize((uint64_t)v7, v8);
    if (v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 4 * v8;
      do
      {
        *(_DWORD *)(*v7 + v10) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
        v10 += 4;
      }
      while (v11 != v10);
    }
    *((void *)a2 + 1) = v7;
    *(unsigned char *)a2 = 1;
  }
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptColor *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*(_DWORD *)&a2[1].var0.var2 + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptColor::setColor(a2 + 4, v4);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

{
  int v4;
  unsigned int v5;
  _DWORD *exception;

  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*(_DWORD *)&a2[1].var0.var2 + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  HIWORD(a2[3].var1) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 2
    || (a2[4].var0.char var0 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
    || (*(_DWORD *)&a2[4].var0.unsigned int var2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (LOWORD(a2[4].var1) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1)),
        int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)),
        PptColor::setColor(a2 + 5, v5),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 14)
    || (PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 2u),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16)
    || (*(_DWORD *)&a2[6].var0.char var0 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *(_DWORD *)&a2[6].var0.unsigned int var2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBookmarkSeedAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGRectAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGRatioAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGScalingAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 38) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 39) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGPointAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGLineAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 38) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 39) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptCorePictAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptEmFormatAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExCDAudioAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExOleObj *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptParaFormatAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  int16x8_t v5 = (int16x8_t)vtstq_s32(vdupq_n_s32((*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1))), (int32x4_t)xmmword_238EF0EB0);
  *(int8x8_t *)v5.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 45) = vmovn_s16(v5).u32[0];
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_19;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 1u);
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptColor::setColor((PptColor *)((char *)a2 + 52), v6);
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 9) {
    goto LABEL_19;
  }
  *((_WORD *)a2 + 32) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 11) {
    goto LABEL_19;
  }
  *((_WORD *)a2 + 33) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 13) {
    goto LABEL_19;
  }
  *((_WORD *)a2 + 34) = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 15) {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 19) {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 23) {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 27) {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 21) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 31) {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 22) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 35
    || (*((_DWORD *)a2 + 23) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 39)
    || (*((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 43)
    || (*((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 47)
    || (*((_DWORD *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 51)
    || (*((_DWORD *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 52)
    || (*((unsigned char *)a2 + 112) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 53)
    || (*((unsigned char *)a2 + 113) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 54))
  {
LABEL_19:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((unsigned char *)a2 + 114) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRulerIndentAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideBaseAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 24) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 25) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((_DWORD *)a2 + 27) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16
    || (*((unsigned char *)a2 + 112) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 17)
    || (*((unsigned char *)a2 + 113) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 18)
    || (*((unsigned char *)a2 + 114) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 19)
    || (*((unsigned char *)a2 + 115) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20)
    || (*((unsigned char *)a2 + 116) = (*(unsigned int (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) != 0,
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 21))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((unsigned char **)this + 3), a2, 3u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSSlideLayoutAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 5)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 6)
    || (*((_DWORD *)a2 + 15) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 7)
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 17) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 9)
    || (*((_DWORD *)a2 + 18) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 10)
    || (*((_DWORD *)a2 + 19) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)),
        (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 11))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 20) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBookmarkEntityAtom *a2)
{
  if (*((_DWORD *)a2 + 3) != 68
    || ((*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0), PptSkipVisitor::beginRead(*((void *)this + 3)), int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)), *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1)), (*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  int v7 = *((_DWORD *)a2 + 3) - 4;
  CsString::reserve((CsString *)((char *)a2 + 56), v7);
  (*(void (**)(void, int *, void))(**((void **)this + 1) + 136))(*((void *)this + 1), &v7, *((void *)a2 + 8));
  CsString::setCount((CsString *)((char *)a2 + 56), v7 - 1);
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), a2);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptInt4ArrayAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRTFDateTimeMCAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  for (uint64_t i = 52; i != 180; i += 2)
    *(_WORD *)((char *)a2 + i) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptDocRoutingSlip *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 4) {
    goto LABEL_27;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 8) {
    goto LABEL_27;
  }
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 12) {
    goto LABEL_27;
  }
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 16) {
    goto LABEL_27;
  }
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  *((unsigned char *)a2 + 60) = (v6 & 1) == 0;
  v7.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 61) = vmovn_s16(v7).u32[0];
  *((unsigned char *)a2 + 65) = (v6 & 0x20) != 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 20) {
    goto LABEL_27;
  }
  unsigned int v37 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
  if (v37 <= 2) {
    goto LABEL_27;
  }
  int v26 = v5;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) != v4 + 24) {
    goto LABEL_27;
  }
  int v8 = 0;
  unint64_t v30 = (char *)a2 + 160;
  uint64_t v31 = (CsString *)((char *)a2 + 144);
  unint64_t v28 = (char *)a2 + 164;
  unsigned int v29 = (void **)((char *)a2 + 152);
  int v34 = (char *)a2 + 136;
  int v35 = (CsString *)((char *)a2 + 120);
  unsigned int v32 = (char *)a2 + 140;
  uint64_t v33 = (void **)((char *)a2 + 128);
  uint64_t v36 = (CsString *)((char *)a2 + 72);
  int v9 = (char *)a2 + 88;
  uint64_t v10 = (void **)((char *)a2 + 80);
  unint64_t v27 = a2;
  uint64_t v11 = (char *)a2 + 92;
  do
  {
    PptColor v12 = (CsString *)operator new(0x18uLL);
    CsString::CsString(v12);
    __int16 v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    unsigned int v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    unsigned int v15 = v14;
    if (v14)
    {
      CsString::reserve(v12, v14 + 1);
      v12->unsigned int var2 = 0;
      bzero(v12->var1, 2 * v12->var3);
      unsigned int v16 = v15 - 1;
      unsigned int v17 = v15;
      while (1)
      {
        int v18 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
        if (v17 == 1 && !v18) {
          break;
        }
        CsString::append(v12, v18);
        if (!--v17)
        {
          unsigned int v16 = v15;
          break;
        }
      }
      CsString::setCount(v12, v16);
    }
    char v19 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
    uint64_t v20 = v9;
    unint64_t v21 = v10;
    unint64_t v22 = (unsigned int *)v11;
    unint64_t v23 = v36;
    if (!v8) {
      goto LABEL_19;
    }
    unint64_t v21 = v33;
    uint64_t v20 = v34;
    unint64_t v22 = (unsigned int *)v32;
    unint64_t v23 = v35;
    if (v8 == v37 - 2 || (v21 = v29, v20 = v30, unint64_t v22 = (unsigned int *)v28, v23 = v31, v8 == v37 - 1))
    {
LABEL_19:
      _DWORD *v20 = 0;
      bzero(*v21, 2 * *v22);
      CsString::append(v23, v12);
    }
    else
    {
      PptDocRoutingSlip::addRecipient(v27, v12, v13, v19);
    }
    if (v12) {
      (*((void (**)(CsString *))v12->var0 + 1))(v12);
    }
    ++v8;
  }
  while (v8 != v37);
  if (v26 != ((*((void *)v27 + 13) - *((void *)v27 + 12)) >> 3))
  {
LABEL_27:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4003;
  }
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), v27);
  PptParserVisitor::endRead(this, v27);
  return 1;
}

void sub_238E81DF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<PptTab,ChAllocator<PptTab>>::resize(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<PptTab,ChAllocator<PptTab>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
  }
}

void PptParserVisitor::visit(PptParserVisitor *this, PptCryptSession10ContainerAtom *a2)
{
}

uint64_t PptParserVisitor::visitRoundTripZipBlobAtom(PptParserVisitor *this, OcBinaryData *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), a2->var3 + 8, 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  unsigned int DataLength = EshRecord::getDataLength((EshRecord *)a2);
  OcBinaryData::allocBuffer(a2 + 1, DataLength);
  (*(void (**)(void, char *, unsigned int *))(**((void **)this + 1) + 56))(*((void *)this + 1), a2[1].var5, &DataLength);
  unsigned int v4 = DataLength;
  OcBinaryData::setMinimumCapacity(a2 + 1, DataLength);
  a2[1].signed int var3 = v4;
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripAnimationHashAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripCompositeMasterIdAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripContentMasterIdAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_WORD *)a2 + 26) = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripDocFlagsAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1)) & 1;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripHeaderFooterDefaultsAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  char v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  *((unsigned char *)a2 + 45) = v4 & 1;
  *((unsigned char *)a2 + 46) = (v4 & 2) != 0;
  *((unsigned char *)a2 + 47) = (v4 & 4) != 0;
  *((unsigned char *)a2 + 48) = (v4 & 8) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripHeaderFooterPlaceholderAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripNewPlaceholderIdAtom *a2)
{
  *((unsigned char *)a2 + 45) = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripOriginalMainMasterIdAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripShapeCheckSumForCustomLayoutsAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripShapeIdAtom *a2)
{
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(void))(**((void **)this + 1) + 104))(*((void *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRoundTripSlideSyncInfoAtom *a2)
{
  (*(void (**)(void, void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((void *)this + 3));
  *(void *)((char *)a2 + 46) = OcParser::parseSystemTimeFromStream(*((OcParser **)this + 1), v4);
  *((_WORD *)a2 + 27) = (_WORD)v5;
  *((void *)a2 + 7) = OcParser::parseSystemTimeFromStream(*((OcParser **)this + 1), v5);
  *((_WORD *)a2 + 32) = v6;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::node::~node(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v2 = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::node::~node();
    MEMORY[0x23EC997B0](v2, 0x1020C40E213B89CLL);
  }
  *(void *)(a1 + 8) = 0;
  if (*(void *)(a1 + 16))
  {
    uint64_t v3 = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::node::~node();
    MEMORY[0x23EC997B0](v3, 0x1020C40E213B89CLL);
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void std::vector<PptTab,ChAllocator<PptTab>>::__append(void **a1, unsigned int a2)
{
  __int16 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (((unint64_t)&v6[-v7] >> 3) >= a2)
  {
    std::vector<PptTab,ChAllocator<PptTab>>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = v7 - (void)*a1;
    unsigned int v9 = (v8 >> 3) + a2;
    unint64_t v10 = (unint64_t)(v5 - (unsigned char *)*a1) >> 3;
    if (2 * (int)v10 > v9) {
      unsigned int v9 = 2 * v10;
    }
    if (v10 >= 0x7FFFFFFF) {
      unint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      PptColor v12 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v4, v11);
      uint64_t v14 = v13;
    }
    else
    {
      PptColor v12 = 0;
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v12[v8 & 0x7FFFFFFF8];
    unsigned int v16 = &v12[8 * v14];
    unsigned int v17 = &v15[8 * a2];
    uint64_t v18 = 8 * a2;
    uint64_t v19 = (uint64_t)v15;
    do
    {
      uint64_t v19 = PptTab::PptTab(v19, 0, 0) + 8;
      v18 -= 8;
    }
    while (v18);
    unint64_t v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void sub_238E82A48(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<PptTab,ChAllocator<PptTab>>::__construct_at_end(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 8 * a2;
    uint64_t v5 = 8 * a2;
    do
    {
      uint64_t result = PptTab::PptTab(v3, 0, 0);
      v3 += 8;
      v5 -= 8;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_238E82AC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t PptPersistDir::getOffsetByRef(PptPersistDir *this, unsigned int a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (*((_DWORD *)this + 20) < (signed int)a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (char *)*((void *)this + 5);
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((_DWORD *)v3 + 7);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unint64_t v8 = (char **)v3;
    }
    else {
      unint64_t v8 = (char **)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *((_DWORD *)v5 + 7) <= a2) {
    return *((unsigned int *)v5 + 8);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t non-virtual thunk to'PptBinaryReader::getObjectFactory(PptBinaryReader *this)
{
  return *((void *)this + 32);
}

void non-virtual thunk to'PptBinaryReader::~PptBinaryReader(PptBinaryReader *this)
{
}

{
  PptBinaryReader::~PptBinaryReader((PptBinaryReader *)((char *)this - 24));
}

{
  uint64_t vars8;

  PptBinaryReader::~PptBinaryReader((PptBinaryReader *)((char *)this - 8));
  JUMPOUT(0x23EC997B0);
}

{
  uint64_t vars8;

  PptBinaryReader::~PptBinaryReader((PptBinaryReader *)((char *)this - 24));
  JUMPOUT(0x23EC997B0);
}

void PptBinaryReader::start(PptBinaryReader *this, __sFILE *a2)
{
  (*(void (**)(PptBinaryReader *))(*(void *)this + 24))(this);
  PptBinaryReader::initSkipConditions(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  SsrwOORootStorage::openInStream((void *)this + 5, (uint64_t)a2, 0);
  PptBinaryReader::commonStart(this);
}

void non-virtual thunk to'PptBinaryReader::start(PptBinaryReader *this, __sFILE *a2)
{
}

double non-virtual thunk to'PptBinaryReader::finish(PptBinaryReader *this)
{
  return PptBinaryReader::finish((PptBinaryReader *)((char *)this - 8));
}

uint64_t PptBinaryReader::getEshReader(PptBinaryReader *this)
{
  return *((void *)this + 21);
}

uint64_t PptBinaryReader::parseStore(PptBinaryReader *this)
{
  uint64_t v2 = (EshBSE *)operator new(0x68uLL);
  EshBSE::EshBSE(v2);
  uint64_t v3 = (EshRoot *)operator new(0x28uLL);
  EshRoot::EshRoot(v3);
  uint64_t v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF001u);
  uint64_t v5 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v5, 0xF000u);
  unsigned int v6 = (EshContainer *)operator new(0x48uLL);
  EshContainer::EshContainer(v6, 0x3E8u);
  *(void *)unsigned int v6 = &unk_26EBE7950;
  *((void *)v6 + 7) = &unk_26EBE7A00;
  *((unsigned char *)v6 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *((_DWORD *)v6 + 17) = -1;
  BOOL v7 = (EshContainer *)operator new(0x48uLL);
  EshContainer::EshContainer(v7, 0x40Bu);
  *(void *)BOOL v7 = &unk_26EBE7950;
  *((void *)v7 + 7) = &unk_26EBE7A00;
  *((unsigned char *)v7 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *((_DWORD *)v7 + 17) = -1;
  unint64_t v8 = (EshHeader *)*((void *)this + 25);
  unsigned int v9 = (SsrwOOStream **)*((void *)this + 23);
  unsigned int v37 = v3;
  uint64_t OffsetByRef = PptPersistDir::getOffsetByRef(*((PptPersistDir **)this + 24), *(_DWORD *)(*((void *)this + 24) + 84));
  double v11 = PptParserVisitor::parse(v9, v8, OffsetByRef);
  if (*(_WORD *)(*((void *)this + 25) + 10) != 1000
    || ((*(void (**)(PptBinaryReader *, EshContainer *, double))(*(void *)this + 80))(this, v6, v11),
        uint64_t v12 = (*(uint64_t (**)(EshContainer *, void, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, 0, 1035, 0xFFFFFFFFLL), (*(void (**)(PptBinaryReader *, EshContainer *, uint64_t))(*(void *)this + 48))(this, v6, v12), (*(void (**)(PptBinaryReader *, EshContainer *))(*(void *)this + 80))(this, v7), (*(unsigned int (**)(EshContainer *, void))(*(void *)v7 + 48))(v7, 0) != 1))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4004;
  }
  (*(void (**)(PptBinaryReader *, EshRoot *))(*(void *)this + 72))(this, v3);
  (*(void (**)(PptBinaryReader *, EshContainer *))(*(void *)this + 80))(this, v5);
  uint64_t v13 = 0;
  while (v13 < (*(unsigned int (**)(EshContainer *))(*(void *)v5 + 40))(v5))
  {
    int v14 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(void *)v5 + 48))(v5, v13);
    uint64_t v13 = (v13 + 1);
    if (v14 == 61441)
    {
      (*(void (**)(PptBinaryReader *, EshContainer *))(*(void *)this + 80))(this, v4);
      for (uint64_t i = 0;
            i < (*(unsigned int (**)(EshContainer *))(*(void *)v4 + 40))(v4);
            uint64_t i = (i + 1))
      {
        (*(void (**)(PptBinaryReader *, EshContainer *, uint64_t))(*(void *)this + 48))(this, v4, i);
        (*(void (**)(PptBinaryReader *, EshBSE *))(*(void *)this + 80))(this, v2);
        if (EshRecord::getInstance((EshRecord *)v2) == 5)
        {
          int v16 = 61469;
        }
        else if (EshRecord::getInstance((EshRecord *)v2) == 6)
        {
          int v16 = 61470;
        }
        else if (EshRecord::getInstance((EshRecord *)v2) == 3)
        {
          int v16 = 61467;
        }
        else if (EshRecord::getInstance((EshRecord *)v2) == 2)
        {
          int v16 = 61466;
        }
        else if (EshRecord::getInstance((EshRecord *)v2) == 4)
        {
          int v16 = 61468;
        }
        else if (EshRecord::getInstance((EshRecord *)v2))
        {
          int v16 = 61471;
        }
        else
        {
          int v16 = 61464;
        }
        unsigned int v17 = operator new(8uLL);
        uint64_t v18 = v17;
        _DWORD *v17 = v2->var7;
        v17[1] = v16;
        uint64_t v20 = (void *)*((void *)this + 37);
        unint64_t v19 = *((void *)this + 38);
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v22 = *((void *)this + 36);
          unint64_t v23 = (unint64_t)v20 - v22;
          unint64_t v24 = (v19 - v22) >> 3;
          unsigned int v25 = 2 * v24;
          if (2 * (int)v24 <= (v23 >> 3) + 1) {
            unsigned int v25 = (v23 >> 3) + 1;
          }
          if (v24 >= 0x7FFFFFFF) {
            unint64_t v26 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26)
          {
            unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 304, v26);
            uint64_t v29 = v28;
          }
          else
          {
            unint64_t v27 = 0;
            uint64_t v29 = 0;
          }
          unint64_t v30 = &v27[v23 & 0x7FFFFFFF8];
          *(void *)unint64_t v30 = *v18;
          unint64_t v21 = v30 + 8;
          unsigned int v32 = (char *)*((void *)this + 36);
          uint64_t v31 = (char *)*((void *)this + 37);
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = *((void *)v31 - 1);
              v31 -= 8;
              *((void *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v31 != v32);
            uint64_t v31 = (char *)*((void *)this + 36);
          }
          *((void *)this + 36) = v30;
          *((void *)this + 37) = v21;
          *((void *)this + 38) = &v27[8 * v29];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          void *v20 = *(void *)v17;
          unint64_t v21 = v20 + 1;
        }
        *((void *)this + 37) = v21;
        MEMORY[0x23EC997B0](v18, 0x1000C4000313F17);
      }
      break;
    }
  }
  (*(void (**)(void))(**((void **)this + 21) + 24))(*((void *)this + 21));
  (*(void (**)(EshContainer *))(*(void *)v7 + 8))(v7);
  (*(void (**)(EshContainer *))(*(void *)v6 + 8))(v6);
  uint64_t result = (*(uint64_t (**)(EshContainer *))(*(void *)v5 + 8))(v5);
  if (v4) {
    uint64_t result = (*(uint64_t (**)(EshContainer *))(*(void *)v4 + 8))(v4);
  }
  if (v37) {
    uint64_t result = (*(uint64_t (**)(EshRoot *))(*(void *)v37 + 8))(v37);
  }
  if (v2)
  {
    int v35 = (uint64_t (*)(EshBSE *))*((void *)v2->var0 + 1);
    return v35(v2);
  }
  return result;
}

void sub_238E83368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v15);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    if (!v12)
    {
LABEL_3:
      if (!v11) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (!v11)
  {
LABEL_4:
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (!v10) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  goto LABEL_6;
}

uint64_t PptBinaryReader::findGoodHeader(PptBinaryReader *this, unsigned int a2)
{
  while (1)
  {
    uint64_t v3 = (unsigned int *)*((void *)this + 36);
    unint64_t v4 = *((void *)this + 37) - (void)v3;
    if ((v4 & 0x7FFFFFFF8) == 0) {
      break;
    }
    uint64_t v5 = (v4 >> 3);
    LODWORD(v6) = -1;
    do
    {
      unsigned int v8 = *v3;
      v3 += 2;
      unsigned int v7 = v8;
      if (v8 < v6 && v7 > a2) {
        uint64_t v6 = v7;
      }
      else {
        uint64_t v6 = v6;
      }
      --v5;
    }
    while (v5);
    if (v6 == -1) {
      break;
    }
    (*(void (**)(void, uint64_t, void))(**((void **)this + 18) + 16))(*((void *)this + 18), v6, 0);
    PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), v6, *((SsrwOOStream **)this + 18));
    BOOL isBadHeader = PptBinaryReader::isBadHeader(this);
    a2 = v6;
    if (!isBadHeader) {
      return 1;
    }
  }
  return 0;
}

void non-virtual thunk to'PptBinaryReader::read(PptBinaryReader *this, EshRoot *a2)
{
}

uint64_t non-virtual thunk to'PptBinaryReader::read(PptBinaryReader *this, EshObject *a2)
{
  return PptBinaryReader::read((PptBinaryReader *)((char *)this - 8), a2);
}

PptMark *PptBinaryReader::createMark(PptBinaryReader *this)
{
  uint64_t v2 = (PptMark *)operator new(0x50uLL);
  PptMark::PptMark(v2);
  (*(void (**)(PptBinaryReader *, PptMark *))(*(void *)this + 32))(this, v2);
  return v2;
}

void sub_238E83698(_Unwind_Exception *exception_object)
{
  if (v1) {
    WrdBinaryReader::createMark(v1);
  }
  _Unwind_Resume(exception_object);
}

PptMark *non-virtual thunk to'PptBinaryReader::createMark(PptBinaryReader *this)
{
  return PptBinaryReader::createMark((PptBinaryReader *)((char *)this - 8));
}

void PptBinaryReader::mark(PptBinaryReader *this, OcMark *lpsrc)
{
  if (!lpsrc)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  PptBinaryReader::checkStarted(this);
  EshHeader::operator=((uint64_t)(v3 + 12), *((void *)this + 25));
  int v4 = *((_DWORD *)this + 40);
  v3[16] = v4;
  *((unsigned char *)v3 + 76) = *((unsigned char *)this + 164);
  if (v4)
  {
    if (v4 == 2)
    {
      if (EshBinaryReader::isStarted(*((EshBinaryReader **)this + 21)))
      {
        uint64_t v5 = (_DWORD *)*((void *)this + 21);
        v3[17] = v5[8];
        (*(void (**)(_DWORD *, _DWORD *))(*(void *)v5 + 48))(v5, v3 + 2);
      }
      else
      {
        v3[17] = -1;
      }
      v3[18] = -1;
    }
  }
  else
  {
    uint64_t v6 = (EshBinaryReader *)*((void *)this + 22);
    if (v6)
    {
      if (EshBinaryReader::isStarted(v6))
      {
        unsigned int v7 = (_DWORD *)*((void *)this + 22);
        v3[18] = v7[8];
        (*(void (**)(_DWORD *, _DWORD *))(*(void *)v7 + 48))(v7, v3 + 2);
      }
      else
      {
        v3[18] = -1;
      }
      v3[17] = -1;
    }
  }
}

void non-virtual thunk to'PptBinaryReader::mark(PptBinaryReader *this, OcMark *a2)
{
}

void PptBinaryReader::seek(PptBinaryReader *this, const EshContainer *a2, uint64_t a3)
{
  PptBinaryReader::checkStarted(this);
  uint64_t v6 = (*(uint64_t (**)(const EshContainer *, uint64_t))(*(void *)a2 + 104))(a2, a3);
  unsigned int v7 = (EshObjectFactory *)*(unsigned __int16 *)(v6 + 10);
  if (!EshRecord::isEscherRecord(a2)
    || (unsigned __int16)(*(_WORD *)(v6 + 10) + 4096) >= 0x123u
    && (!EshObjectFactory::isClientObject(v7) ? (BOOL v8 = v7 >= 2) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = v7 > 0x1C) : (BOOL v9 = 1),
        v9))
  {
    if (v7 == 1)
    {
      EshHeader::makeDefault(&v15);
      PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), &v15, *(unsigned int *)(v6 + 4));
      EshHeader::operator=(*((void *)this + 25), (uint64_t)&v15);
      *(_DWORD *)(*((void *)this + 21) + 72) = *(_DWORD *)(*((void *)this + 25) + 4);
    }
    else
    {
      uint64_t v11 = (PptMark *)operator new(0x50uLL);
      PptMark::PptMark(v11);
      double v12 = EshHeader::operator=((uint64_t)v11 + 48, v6);
      *((_DWORD *)v11 + 16) = *((_DWORD *)this + 40);
      *((unsigned char *)v11 + 76) = *((unsigned char *)this + 164);
      (*(void (**)(PptBinaryReader *, PptMark *, double))(*(void *)this + 40))(this, v11, v12);
      uint64_t v13 = *(void (**)(PptMark *))(*(void *)v11 + 8);
      v13(v11);
    }
  }
  else
  {
    if (*((_DWORD *)this + 40) == 2)
    {
      uint64_t v10 = *((void *)this + 21);
    }
    else
    {
      uint64_t v10 = *((void *)this + 22);
      if (!v10) {
        return;
      }
    }
    uint64_t v14 = *(void (**)(void))(*(void *)v10 + 64);
    v14();
  }
}

void sub_238E83A44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, const EshContainer *a2, uint64_t a3)
{
}

uint64_t PptBinaryReader::seek(PptBinaryReader *this, const EshRoot *a2, uint64_t a3)
{
  PptBinaryReader::checkStarted(this);
  uint64_t v6 = (*(uint64_t (**)(const EshRoot *, uint64_t))(*(void *)a2 + 112))(a2, a3);
  if (!v6)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  uint64_t v7 = v6;
  if ((unsigned __int16)(*(_WORD *)(v6 + 10) + 4096) > 0x122u)
  {
    BOOL v9 = (PptMark *)operator new(0x50uLL);
    PptMark::PptMark(v9);
    double v10 = EshHeader::operator=((uint64_t)v9 + 48, v7);
    *((_DWORD *)v9 + 16) = *((_DWORD *)this + 40);
    *((unsigned char *)v9 + 76) = 1;
    (*(void (**)(PptBinaryReader *, PptMark *, double))(*(void *)this + 40))(this, v9, v10);
    uint64_t v11 = *(uint64_t (**)(PptMark *))(*(void *)v9 + 8);
    return v11(v9);
  }
  else
  {
    if (*((_DWORD *)this + 40) == 2)
    {
      uint64_t result = *((void *)this + 21);
    }
    else
    {
      uint64_t result = *((void *)this + 22);
      if (!result) {
        return result;
      }
    }
    double v12 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v12();
  }
}

void sub_238E83C40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, const EshRoot *a2, uint64_t a3)
{
  return PptBinaryReader::seek((PptBinaryReader *)((char *)this - 8), a2, a3);
}

BOOL PptBinaryReader::seek(PptBinaryReader *this, const PptEshClientContainer *a2, unsigned int a3)
{
  BOOL result = PptBinaryReader::checkStarted(this);
  uint64_t v7 = *((void *)a2 + 1);
  if (((unint64_t)(*((void *)a2 + 2) - v7) >> 3) <= a3) {
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  *(_DWORD *)(*((void *)this + 21) + 72) = *(_DWORD *)(*(void *)(v7 + 8 * a3) + 4);
  return result;
}

BOOL non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, const PptEshClientContainer *a2, unsigned int a3)
{
  return PptBinaryReader::seek((PptBinaryReader *)((char *)this - 8), a2, a3);
}

void PptBinaryReader::seek(PptPersistDir **this, unsigned int a2)
{
  int v4 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v4);
  uint64_t v5 = (PptMark *)operator new(0x50uLL);
  PptMark::PptMark(v5);
  PptBinaryReader::checkStarted((PptBinaryReader *)this);
  uint64_t v6 = (SsrwOOStream **)this[23];
  uint64_t OffsetByRef = PptPersistDir::getOffsetByRef(this[24], a2);
  PptParserVisitor::parse(v6, v4, OffsetByRef);
  double v8 = EshHeader::operator=((uint64_t)v5 + 48, (uint64_t)v4);
  *((_DWORD *)v5 + 16) = *((_DWORD *)this + 40);
  *((unsigned char *)v5 + 76) = *((unsigned char *)this + 164);
  (*((void (**)(PptPersistDir **, PptMark *, double))*this + 5))(this, v5, v8);
  (*(void (**)(PptMark *))(*(void *)v5 + 8))(v5);
  JUMPOUT(0x23EC997B0);
}

void sub_238E83E18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C408B6DE1C6);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'PptBinaryReader::seek(PptPersistDir **this, unsigned int a2)
{
}

void PptBinaryReader::seek(PptBinaryReader *this, const OcMark *lpsrc)
{
  if (!lpsrc)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1004;
  }
  *((_DWORD *)this + 40) = v3[16];
  PptBinaryReader::checkStarted(this);
  v4.n128_f64[0] = EshHeader::operator=(*((void *)this + 25), (uint64_t)(v3 + 12));
  *((unsigned char *)this + 1XlPtg::XlPtg((uint64_t)this + 8, 64) = *((unsigned char *)v3 + 76);
  int v5 = *((_DWORD *)this + 40);
  if (!v5)
  {
    BOOL v9 = (EshBinaryReader *)*((void *)this + 22);
    if (!v9) {
      return;
    }
    int v10 = v3[18];
    if ((v10 & 0x80000000) == 0)
    {
      if (*((_DWORD *)v9 + 8) != v10)
      {
        (*(void (**)(EshBinaryReader *, double))(*(void *)v9 + 24))(v9, v4.n128_f64[0]);
        BOOL v9 = (EshBinaryReader *)*((void *)this + 22);
      }
      if (!EshBinaryReader::isStarted(v9))
      {
        (*(void (**)(void, void, void))(**((void **)this + 18) + 16))(*((void *)this + 18), v3[18], 0);
        (*(void (**)(void, void))(**((void **)this + 22) + 16))(*((void *)this + 22), *((void *)this + 18));
      }
      (*(void (**)(void, _DWORD *))(**((void **)this + 22) + 56))(*((void *)this + 22), v3 + 2);
    }
    uint64_t v8 = *((void *)this + 21);
    goto LABEL_20;
  }
  if (v5 == 2)
  {
    int v6 = v3[17];
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v7 = (EshBinaryReader *)*((void *)this + 21);
      if (*((_DWORD *)v7 + 8) != v6)
      {
        (*(void (**)(EshBinaryReader *, double))(*(void *)v7 + 24))(v7, v4.n128_f64[0]);
        uint64_t v7 = (EshBinaryReader *)*((void *)this + 21);
      }
      if (!EshBinaryReader::isStarted(v7))
      {
        (*(void (**)(void, void, void))(**((void **)this + 19) + 16))(*((void *)this + 19), v3[17], 0);
        (*(void (**)(void, void))(**((void **)this + 21) + 16))(*((void *)this + 21), *((void *)this + 19));
      }
      (*(void (**)(void, _DWORD *))(**((void **)this + 21) + 56))(*((void *)this + 21), v3 + 2);
    }
    uint64_t v8 = *((void *)this + 22);
    if (v8)
    {
LABEL_20:
      uint64_t v11 = *(void (**)(__n128))(*(void *)v8 + 24);
      v11(v4);
    }
  }
}

void non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, const OcMark *a2)
{
}

uint64_t PptBinaryReader::seek(PptBinaryReader *this, const EshBSE *a2)
{
  *((_DWORD *)this + 40) = 0;
  (*(void (**)(void, void, void))(**((void **)this + 18) + 16))(*((void *)this + 18), a2->var7, 0);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 22) + 16);
  return v3();
}

uint64_t non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, const EshBSE *a2)
{
  *((_DWORD *)this + 38) = 0;
  (*(void (**)(void, void, void))(**((void **)this + 17) + 16))(*((void *)this + 17), a2->var7, 0);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 21) + 16);
  return v3();
}

void PptBinaryReader::seek(PptBinaryReader *this, int a2)
{
  __n128 v4 = (EshBSE *)operator new(0x68uLL);
  EshBSE::EshBSE(v4);
  uint64_t v5 = *((void *)this + 36);
  unint64_t v6 = *((void *)this + 37) - v5;
  if ((v6 & 0x7FFFFFFF8) == 0)
  {
    PptBinaryReader::parseStore(this);
    uint64_t v5 = *((void *)this + 36);
    unint64_t v6 = *((void *)this + 37) - v5;
  }
  if (a2 - 1 >= (v6 >> 3))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1000;
  }
  uint64_t v7 = *(void *)(v5 + 8 * (a2 - 1));
  if (HIDWORD(v7) == 61464)
  {
    if (!v4) {
      return;
    }
  }
  else
  {
    v4->uint64_t var7 = v7;
    *((_DWORD *)this + 70) = HIDWORD(v7);
    (*(void (**)(PptBinaryReader *, EshBSE *))(*(void *)this + 168))(this, v4);
  }
  uint64_t v8 = (void (*)(EshBSE *))*((void *)v4->var0 + 1);
  v8(v4);
}

void sub_238E843A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'PptBinaryReader::seek(PptBinaryReader *this, int a2)
{
}

uint64_t PptBinaryReader::read(PptBinaryReader *this, EshBlip *a2)
{
  if ((*((unsigned int (**)(EshBlip *))a2->var0 + 2))(a2) == 61465)
  {
    (*((void (**)(EshBlip *, void))a2->var0 + 3))(a2, *((unsigned __int16 *)this + 140));
    EshRecord::setRecordType((uint64_t)a2, *((_WORD *)this + 140));
  }
  __n128 v4 = *(uint64_t (**)(PptBinaryReader *, EshBlip *))(*(void *)this + 80);
  return v4(this, a2);
}

uint64_t non-virtual thunk to'PptBinaryReader::read(PptBinaryReader *this, EshBlip *a2)
{
  return PptBinaryReader::read((PptBinaryReader *)((char *)this - 8), a2);
}

uint64_t PptBinaryReader::read(uint64_t this, OcBinaryData *a2)
{
  int v2 = *(_DWORD *)(this + 236);
  if (v2)
  {
    uint64_t v4 = this;
    unsigned int var4 = a2->var4;
    if (!var4)
    {
      OcBinaryData::setMinimumCapacity(a2, v2 - a2->var1);
      unsigned int var4 = a2->var4;
      int v2 = *(_DWORD *)(v4 + 236);
    }
    unsigned int var1 = a2->var1;
    unsigned int v7 = v2 - var1;
    if (var4 < v7) {
      unsigned int v7 = var4;
    }
    unsigned int v12 = v7;
    uint64_t v8 = var1 + *(_DWORD *)(v4 + 232) + 8;
    if (*(_DWORD *)(v4 + 160))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 152) + 16))(*(void *)(v4 + 152), v8, 0);
      uint64_t v9 = *(void *)(v4 + 152);
    }
    else
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 144) + 16))(*(void *)(v4 + 144), v8, 0);
      uint64_t v9 = *(void *)(v4 + 144);
    }
    (*(void (**)(uint64_t, char *, unsigned int *))(*(void *)v9 + 56))(v9, a2->var5, &v12);
    unsigned int v10 = v12;
    if (v12 == -1)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1000;
    }
    this = OcBinaryData::setMinimumCapacity(a2, v12);
    a2->signed int var3 = v10;
  }
  return this;
}

uint64_t PptBinaryReader::nextType(PptBinaryReader *this)
{
  return *(unsigned __int16 *)(*((void *)this + 25) + 10);
}

uint64_t non-virtual thunk to'PptBinaryReader::nextType(PptBinaryReader *this)
{
  return *(unsigned __int16 *)(*((void *)this + 24) + 10);
}

uint64_t PptBinaryReader::getLastReferenceIdInDocument(PptBinaryReader *this)
{
  return *(unsigned int *)(*((void *)this + 24) + 88);
}

void PptBinaryReader::read(OcBinaryReader *a1, uint64_t a2)
{
  PptVBAInfoAtom::PptVBAInfoAtom((PptVBAInfoAtom *)v20);
  (*((void (**)(OcBinaryReader *, unsigned char *))a1->var0 + 10))(a1, v20);
  if (v21)
  {
    (*((void (**)(OcBinaryReader *))a1->var0 + 24))(a1);
    PptExOleObjStg::PptExOleObjStg((PptExOleObjStg *)&v14);
    (*((void (**)(OcBinaryReader *, void **))a1->var0 + 10))(a1, &v14);
    unsigned int v4 = v18;
    uLongf destLen = v18;
    OcBinaryData::OcBinaryData(&sourceLen_4);
    OcBinaryData::setMinimumCapacity(&sourceLen_4, v4);
    sourceLen_4.signed int var3 = v4;
    unsigned int v5 = v15 - 4;
    unsigned int sourceLen = v15 - 4;
    OcBinaryData::OcBinaryData(&v10);
    OcBinaryData::setMinimumCapacity(&v10, v5);
    v10.signed int var3 = v5;
    uint64_t v6 = (*((uint64_t (**)(void **))*a1[19].var0 + 5))(a1[19].var0);
    (*((void (**)(void **, void, void))*a1[19].var0 + 2))(a1[19].var0, (v16 + 12), 0);
    (*((void (**)(void **, char *, unsigned int *))*a1[19].var0 + 7))(a1[19].var0, v10.var5, &sourceLen);
    (*((void (**)(void **, uint64_t, void))*a1[19].var0 + 2))(a1[19].var0, v6, 0);
    if (uncompress((Bytef *)sourceLen_4.var5, &destLen, (const Bytef *)v10.var5, sourceLen))
    {
      unsigned int v7 = 0;
      uLongf destLen = 0;
    }
    else
    {
      unsigned int v7 = destLen;
    }
    OcBinaryData::setMinimumCapacity(&sourceLen_4, v7);
    sourceLen_4.signed int var3 = v7;
    SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)&v9);
    var5 = sourceLen_4.var5;
    SsrwOORootStorage::openInBuf((SsrwOORootStorage *)&v9, (const void **)&var5, sourceLen_4.var3);
    OcBinaryReader::readMacros(a1, a2, &v9);
    SsrwOORootStorage::close((SsrwOORootStorage *)&v9, 0);
    SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&v9);
    OcBinaryData::~OcBinaryData(&v10);
    OcBinaryData::~OcBinaryData(&sourceLen_4);
    uint64_t v14 = &unk_26EBEB200;
    unsigned int v17 = &unk_26EBEB2A8;
    OcBinaryData::~OcBinaryData(&v19);
  }
  PptVBAInfoAtom::~PptVBAInfoAtom((PptVBAInfoAtom *)v20);
}

void sub_238E8492C(_Unwind_Exception *a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, OcBinaryData *a14, uint64_t a15, OcBinaryData *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  OcBinaryData::~OcBinaryData((OcBinaryData *)&a22);
  OcBinaryData::~OcBinaryData((OcBinaryData *)&a29);
  *(void *)(v29 - 200) = &unk_26EBEB200;
  *(void *)(v29 - 168) = &unk_26EBEB2A8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)(v29 - 144));
  PptVBAInfoAtom::~PptVBAInfoAtom((PptVBAInfoAtom *)(v29 - 96));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x238E84918);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'PptBinaryReader::read(uint64_t a1, uint64_t a2)
{
}

uint64_t PptBinaryReader::getPictureStream(PptBinaryReader *this)
{
  return *((void *)this + 18);
}

uint64_t PptBinaryReader::getPersistDirectory(PptBinaryReader *this)
{
  return *((void *)this + 24);
}

uint64_t PptBinaryReader::getEshObjectFactory(PptBinaryReader *this)
{
  return *((void *)this + 2);
}

SsrwOOStorage **non-virtual thunk to'PptBinaryReader::read(OcBinaryReader *this, OcCustomProperties *a2)
{
  return OcBinaryReader::readCustomProperties(this - 1, a2);
}

uint64_t non-virtual thunk to'PptBinaryReader::read(uint64_t a1)
{
  return TSURectWithOriginAndSize(a1 - 8);
}

void PptMark::PptMark(PptMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::EshMark((PptMark *)((char *)this + 8));
  *(void *)this = &unk_26EBEFDF8;
  EshHeader::makeDefault((EshHeader *)this + 3);
  *(void *)((char *)this + 68) = -1;
  *((unsigned char *)this + 76) = 0;
}

void sub_238E84AD8(_Unwind_Exception *a1)
{
  void *v1 = v2;
  EshMark::~EshMark(v3);
  _Unwind_Resume(a1);
}

void PptMark::~PptMark(PptMark *this)
{
  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((PptMark *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26EBE45E0;
  EshMark::~EshMark((PptMark *)((char *)this + 8));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripDocFlagsAtom::PptRoundTripDocFlagsAtom(PptRoundTripDocFlagsAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEFE30;
  *(void *)(v2 + 32) = &unk_26EBEFED8;
}

uint64_t PptRoundTripDocFlagsAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripDocFlagsAtom::~PptRoundTripDocFlagsAtom(PptRoundTripDocFlagsAtom *this)
{
}

void non-virtual thunk to'PptRoundTripDocFlagsAtom::~PptRoundTripDocFlagsAtom(PptRoundTripDocFlagsAtom *this)
{
}

void PptRoundTripCompositeMasterIdAtom::PptRoundTripCompositeMasterIdAtom(PptRoundTripCompositeMasterIdAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBEFF28;
  *(void *)(v2 + 32) = &unk_26EBEFFD0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptRoundTripCompositeMasterIdAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripCompositeMasterIdAtom::~PptRoundTripCompositeMasterIdAtom(PptRoundTripCompositeMasterIdAtom *this)
{
}

void non-virtual thunk to'PptRoundTripCompositeMasterIdAtom::~PptRoundTripCompositeMasterIdAtom(PptRoundTripCompositeMasterIdAtom *this)
{
}

void PptRoundTripThemeAtom::PptRoundTripThemeAtom(PptRoundTripThemeAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBF0020;
  v2[4] = &unk_26EBF00C8;
}

uint64_t PptRoundTripThemeAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripThemeAtom::~PptRoundTripThemeAtom(OcBinaryData *this)
{
  this->char var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->char var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripThemeAtom::~PptRoundTripThemeAtom(PptRoundTripThemeAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripShapeIdAtom::PptRoundTripShapeIdAtom(PptRoundTripShapeIdAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0118;
  *(void *)(v2 + 32) = &unk_26EBF01C0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptRoundTripShapeIdAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripShapeIdAtom::~PptRoundTripShapeIdAtom(PptRoundTripShapeIdAtom *this)
{
}

void non-virtual thunk to'PptRoundTripShapeIdAtom::~PptRoundTripShapeIdAtom(PptRoundTripShapeIdAtom *this)
{
}

void PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(PptRoundTripZipBlobAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBE9FD0;
  *(void *)(v2 + 32) = &unk_26EBEA078;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 48));
}

void PptRoundTripShapeCheckSumForCustomLayoutsAtom::PptRoundTripShapeCheckSumForCustomLayoutsAtom(PptRoundTripShapeCheckSumForCustomLayoutsAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0210;
  *(void *)(v2 + 32) = &unk_26EBF02B8;
  *(void *)(v2 + 48) = 0;
}

uint64_t PptRoundTripShapeCheckSumForCustomLayoutsAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripShapeCheckSumForCustomLayoutsAtom::~PptRoundTripShapeCheckSumForCustomLayoutsAtom(PptRoundTripShapeCheckSumForCustomLayoutsAtom *this)
{
}

void non-virtual thunk to'PptRoundTripShapeCheckSumForCustomLayoutsAtom::~PptRoundTripShapeCheckSumForCustomLayoutsAtom(PptRoundTripShapeCheckSumForCustomLayoutsAtom *this)
{
}

void PptRoundTripSlideSyncInfoAtom::PptRoundTripSlideSyncInfoAtom(PptRoundTripSlideSyncInfoAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0308;
  *(void *)(v2 + 32) = &unk_26EBF03B0;
  *(_WORD *)(v2 + XlPtg::XlPtg((uint64_t)this + 8, 64) = 0;
  *(_DWORD *)(v2 + 46) = 0;
  *(_DWORD *)(v2 + 49) = 0;
  *(void *)(v2 + 54) = 0;
  *(unsigned char *)(v2 + 62) = 0;
}

uint64_t PptRoundTripSlideSyncInfoAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripSlideSyncInfoAtom::~PptRoundTripSlideSyncInfoAtom(PptRoundTripSlideSyncInfoAtom *this)
{
}

void non-virtual thunk to'PptRoundTripSlideSyncInfoAtom::~PptRoundTripSlideSyncInfoAtom(PptRoundTripSlideSyncInfoAtom *this)
{
}

void non-virtual thunk to'PptTextDefaultStyle9Atom::~PptTextDefaultStyle9Atom(PptTextDefaultStyle9Atom *this)
{
  *((void *)this - 4) = &unk_26EBF0400;
  *(void *)this = &unk_26EBF04A8;
}

{
  *((void *)this - 4) = &unk_26EBF0400;
  *(void *)this = &unk_26EBF04A8;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom(PptTextMasterStyle10Atom *this)
{
}

{
  uint64_t vars8;

  PptTextMasterStyle10Atom::~PptTextMasterStyle10Atom((PptTextMasterStyle10Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptTextDefaultStyle10Atom::PptTextDefaultStyle10Atom(PptTextDefaultStyle10Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF05F0;
  *(void *)(v2 + 32) = &unk_26EBF0698;
  PptCharProperty10::PptCharProperty10((PptCharProperty10 *)(v2 + 48));
}

void non-virtual thunk to'PptTextDefaultStyle10Atom::~PptTextDefaultStyle10Atom(PptTextDefaultStyle10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF05F0;
  *(void *)this = &unk_26EBF0698;
}

{
  *((void *)this - 4) = &unk_26EBF05F0;
  *(void *)this = &unk_26EBF0698;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom(PptTextBlockStyling11Atom *this)
{
}

{
  uint64_t vars8;

  PptTextBlockStyling11Atom::~PptTextBlockStyling11Atom((PptTextBlockStyling11Atom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptPicturesDecryptorVisitor::PptPicturesDecryptorVisitor(PptPicturesDecryptorVisitor *this, SsrwOOStream *a2, SsrwOOStream *a3, OCCCryptoKey *a4)
{
  EshDataModelVisitor::EshDataModelVisitor(this);
  *unsigned int v7 = &unk_26EBF07E0;
  unsigned __int16 v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
}

uint64_t PptPicturesDecryptorVisitor::writeDecryptedRecordHeader(SsrwOOStream **this, uint64_t a2, EshHeader *a3)
{
  v10[1] = *MEMORY[0x263EF8340];
  SsrwOOStream::seekFromStart(this[2], a2);
  SsrwOOStream::seekFromStart(this[3], a2);
  v10[0] = 0;
  PptPicturesDecryptorVisitor::decryptIntoStreamAndBuffer((PptPicturesDecryptorVisitor *)this, 8, v10);
  int v6 = LOWORD(v10[0]) >> 4;
  unsigned __int16 v7 = WORD1(v10[0]);
  int v8 = HIDWORD(v10[0]);
  a3->unsigned int var4 = v10[0] & 0xF;
  a3->unsigned int var2 = v6;
  a3->signed int var3 = v7;
  a3->char var0 = v8;
  a3->unsigned int var1 = a2;
  return 1;
}

BOOL PptPicturesDecryptorVisitor::decryptIntoStreamAndBuffer(PptPicturesDecryptorVisitor *this, uint64_t a2, void *a3)
{
  int v6 = (OCCCryptoKey *)*((void *)this + 4);
  unsigned __int16 v7 = (SsrwOOStream *)*((void *)this + 2);
  uint64_t v8 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 5))(v7);
  int v9 = OCCCryptoKey::decryptBlock(v6, v7, v8, a2, 0, a3);
  BOOL result = 0;
  if (v9)
  {
    int v11 = a2;
    (*(void (**)(void, void *, int *))(**((void **)this + 3) + 184))(*((void *)this + 3), a3, &v11);
    return v11 == a2;
  }
  return result;
}

uint64_t PptPicturesDecryptorVisitor::beginRead(PptPicturesDecryptorVisitor *this, EshRecord *a2)
{
  uint64_t v3 = EshRecord::getOffset(a2) + 8;
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v3, 0);
  unsigned int v4 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
  return v4();
}

uint64_t PptPicturesDecryptorVisitor::endRead(PptPicturesDecryptorVisitor *this, EshRecord *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  uint64_t v5 = (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8);
  if (result != v5)
  {
    (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v5, 0);
    int v6 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
    return v6();
  }
  return result;
}

BOOL PptPicturesDecryptorVisitor::decrypt(PptPicturesDecryptorVisitor *this, uint64_t a2)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (a2)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a2);
    unsigned int v4 = __p;
  }
  else
  {
    unsigned int v4 = 0;
  }
  BOOL v5 = PptPicturesDecryptorVisitor::decryptIntoStreamAndBuffer(this, a2, v4);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_238E85BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshAtom *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshContainer *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshAlignRule *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshArcRule *a2)
{
  return 0;
}

BOOL PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshBitmapBlip *a2)
{
  PptPicturesDecryptorVisitor::beginRead(this, a2);
  if (PptPicturesDecryptorVisitor::decryptAllBlipUidFields<EshBitmapBlipInfo>(this, (uint64_t)a2)
    && PptPicturesDecryptorVisitor::decrypt(this, 1))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    BOOL v6 = PptPicturesDecryptorVisitor::decrypt(this, (v4 - v5 + 8));
  }
  else
  {
    BOOL v6 = 0;
  }
  PptPicturesDecryptorVisitor::endRead(this, a2);
  return v6;
}

uint64_t PptPicturesDecryptorVisitor::decryptAllBlipUidFields<EshBitmapBlipInfo>(PptPicturesDecryptorVisitor *a1, uint64_t a2)
{
  uint64_t result = PptPicturesDecryptorVisitor::decrypt(a1, 16);
  if (result)
  {
    if (**(_WORD **)(a2 + 48))
    {
      return PptPicturesDecryptorVisitor::decrypt(a1, 16);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *a1, EshRecord *a2)
{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  if (PptPicturesDecryptorVisitor::decryptAllBlipUidFields<EshBitmapBlipInfo>(a1, (uint64_t)a2)
    && PptPicturesDecryptorVisitor::decrypt(a1, 1))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 40))(*((void **)a1 + 2));
    PptPicturesDecryptorVisitor::decrypt(a1, (v4 - v5 + 8));
  }
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 1;
}

{
  int v4;
  int v5;

  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  if (PptPicturesDecryptorVisitor::decryptAllBlipUidFields<EshBitmapBlipInfo>(a1, (uint64_t)a2)
    && PptPicturesDecryptorVisitor::decrypt(a1, 34))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 40))(*((void **)a1 + 2));
    PptPicturesDecryptorVisitor::decrypt(a1, (v4 - v5 + 8));
  }
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 1;
}

{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 0;
}

{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshBSE *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshCalloutRule *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshColorMRU *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshConnectorRule *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshDeletedPspl *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshDg *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshDgg *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshRectAtom *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshRegroupItems *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshSelection *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshSp *a2)
{
  return 0;
}

uint64_t PptPicturesDecryptorVisitor::visit(PptPicturesDecryptorVisitor *this, EshSplitMenuColors *a2)
{
  return 0;
}

void PptPicturesDecryptorVisitor::~PptPicturesDecryptorVisitor(PptPicturesDecryptorVisitor *this)
{
  EshDataModelVisitor::~EshDataModelVisitor(this);
  JUMPOUT(0x23EC997B0);
}

void PptStreamer::~PptStreamer(OCCBinaryStreamer *this)
{
  this->char var0 = (void **)&unk_26EBF08C0;
  char var0 = this[2].var0;
  if (var0)
  {
    (*((void (**)(void **))*var0 + 1))(var0);
    this[2].char var0 = 0;
  }
  unsigned int var1 = this[2].var1;
  if (var1)
  {
    (*((void (**)(OCCCryptoKey *))var1->var0 + 1))(var1);
    this[2].unsigned int var1 = 0;
  }
  OCCBinaryStreamer::~OCCBinaryStreamer(this);
}

{
  uint64_t vars8;

  PptStreamer::~PptStreamer(this);
  JUMPOUT(0x23EC997B0);
}

void PptStreamer::PptStreamer(PptStreamer *this, PptBinaryReader *a2, OCCCryptoKey *a3, const char *a4)
{
  OCCBinaryStreamer::OCCBinaryStreamer((OCCBinaryStreamer *)this, a3, a4);
  *(void *)uint64_t v5 = &unk_26EBF08C0;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = &unk_26EBD8750;
  *(unsigned char *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
}

const char *PptStreamer::getDefaultPassphraseInUTF8(PptStreamer *this)
{
  return "/01Hannes Ruescher/01";
}

uint64_t PptStreamer::getInputStorage(PptStreamer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 88))();
}

uint64_t PptStreamer::copySummaryInfoStreams(PptStreamer *this, SsrwOOStorage *a2)
{
  int v4 = (SsrwOOStorage *)(*(uint64_t (**)(PptStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v4, (SsrwOOStorage *)&OCCBinaryStreamer::DocumentSummaryInformationStreamName, v5);
  BOOL v6 = (SsrwOOStorage *)(*(uint64_t (**)(PptStreamer *))(*(void *)this + 24))(this);
  OcBinaryWriter::copyStreamWithName(a2, v6, (SsrwOOStorage *)&OCCBinaryStreamer::SummaryInformationStreamName, v7);
  return 1;
}

uint64_t PptStreamer::decryptIntoRootStorage(PptStreamer *this, SsrwOOStorage *a2)
{
  int v4 = (SsrwOOStorage *)(*(uint64_t (**)(PptStreamer *))(*(void *)this + 24))(this);
  if (!OcBinaryWriter::copyStreamWithName(a2, v4, (SsrwOOStorage *)"Current User", v5)) {
    return 0;
  }
  uint64_t v9 = 0;
  if (OCCStreamer::openOutputStream((OCCStreamer *)this, a2, &v9, "PowerPoint Document"))
  {
    if ((*(unsigned int (**)(PptStreamer *, SsrwOOStream *))(*(void *)this + 88))(this, v9))
    {
      if (PptBinaryReader::getPictureStream(*((PptBinaryReader **)this + 3)))
      {
        uint64_t v8 = 0;
        if (OCCStreamer::openOutputStream((OCCStreamer *)this, a2, &v8, "Pictures"))
        {
          uint64_t v6 = (*(uint64_t (**)(PptStreamer *, SsrwOOStream *))(*(void *)this + 104))(this, v8);
          (*((void (**)(SsrwOOStream *, uint64_t))v8->var0 + 19))(v8, 1);
        }
        else
        {
          uint64_t v6 = 0;
        }
        if (v8) {
          (*((void (**)(SsrwOOStream *))v8->var0 + 1))(v8);
        }
      }
      else
      {
        uint64_t v6 = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  }
  return v6;
}

uint64_t PptStreamer::encryptIntoRootStorage(PptStreamer *this, SsrwOOStorage *a2)
{
  int v4 = (SsrwOOStorage *)(*(uint64_t (**)(PptStreamer *))(*(void *)this + 24))(this);
  if (!OcBinaryWriter::copyStreamWithName(a2, v4, (SsrwOOStorage *)"Current User", v5)) {
    return 0;
  }
  uint64_t v9 = 0;
  if (OCCStreamer::openOutputStream((OCCStreamer *)this, a2, &v9, "PowerPoint Document"))
  {
    if ((*(unsigned int (**)(PptStreamer *, SsrwOOStream *))(*(void *)this + 96))(this, v9))
    {
      if (PptBinaryReader::getPictureStream(*((PptBinaryReader **)this + 3)))
      {
        uint64_t v8 = 0;
        if (OCCStreamer::openOutputStream((OCCStreamer *)this, a2, &v8, "Pictures"))
        {
          uint64_t v6 = (*(uint64_t (**)(PptStreamer *, SsrwOOStream *))(*(void *)this + 112))(this, v8);
          (*((void (**)(SsrwOOStream *, uint64_t))v8->var0 + 19))(v8, 1);
        }
        else
        {
          uint64_t v6 = 0;
        }
        if (v8) {
          (*((void (**)(SsrwOOStream *))v8->var0 + 1))(v8);
        }
      }
      else
      {
        uint64_t v6 = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    (*((void (**)(SsrwOOStream *, uint64_t))v9->var0 + 19))(v9, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    (*((void (**)(SsrwOOStream *))v9->var0 + 1))(v9);
  }
  return v6;
}

uint64_t PptStreamer::decryptDocumentStream(PptStreamer *this, SsrwOOStream *a2)
{
  StreamLength = (SsrwOOStream *)directoryGetStreamLength(*((void *)this + 3));
  if (!OcBinaryWriter::copyStream((OcBinaryWriter *)a2, StreamLength, v5)) {
    return 0;
  }
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))StreamLength->var0 + 5))(StreamLength);
  uint64_t v7 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  SsrwOOStream::seekFromStart(StreamLength, 0);
  SsrwOOStream::seekFromStart(a2, 0);
  PersistDirectorint y = PptBinaryReader::getPersistDirectory(*((PptBinaryReader **)this + 3));
  uint64_t v9 = PptBinaryReader::getPersistDirectory(*((PptBinaryReader **)this + 3));
  OcBinaryData v10 = *(void **)(PersistDirectory + 32);
  int v11 = (void *)(PersistDirectory + 40);
  if (v10 == v11)
  {
LABEL_15:
    uint64_t v18 = 1;
  }
  else
  {
    int v12 = *(_DWORD *)(v9 + 96);
    while (1)
    {
      uint64_t v14 = *((unsigned int *)v10 + 7);
      uint64_t v13 = *((unsigned int *)v10 + 8);
      BOOL v15 = v14 == v12 || v13 == -1;
      if (!v15 && !PptStreamer::decryptRecord((OCCCryptoKey **)this, v13, v14, StreamLength, a2)) {
        break;
      }
      int v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          unsigned int v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unsigned int v17 = (void *)v10[2];
          BOOL v15 = *v17 == (void)v10;
          OcBinaryData v10 = v17;
        }
        while (!v15);
      }
      OcBinaryData v10 = v17;
      if (v17 == v11) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = 0;
  }
  SsrwOOStream::seekFromStart(StreamLength, v6);
  SsrwOOStream::seekFromStart(a2, v7);
  return v18;
}

BOOL PptStreamer::decryptRecord(OCCCryptoKey **this, uint64_t a2, uint64_t a3, SsrwOOStream *a4, SsrwOOStream *a5)
{
  __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, 8u);
  if ((OCCCryptoKey::decryptBlock(this[1], a4, a2, 8, a3, __p) & 1) == 0) {
    goto LABEL_8;
  }
  OcBinaryData v10 = __p;
  uint64_t v11 = (*((_DWORD *)__p + 1) + 8);
  if (v11 <= (int)v16 - (int)__p)
  {
    if (v11 < (int)v16 - (int)__p) {
      int v16 = (char *)__p + v11;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v11 - (v16 - __p));
    OcBinaryData v10 = __p;
  }
  if (OCCCryptoKey::decryptBlock(this[1], a4, a2, v11, a3, v10))
  {
    SsrwOOStream::seekFromStart(a5, a2);
    int v14 = v11;
    (*((void (**)(SsrwOOStream *, void *, int *))a5->var0 + 23))(a5, __p, &v14);
    BOOL v12 = v14 == v11;
  }
  else
  {
LABEL_8:
    BOOL v12 = 0;
  }
  if (__p)
  {
    int v16 = (char *)__p;
    operator delete(__p);
  }
  return v12;
}

void sub_238E86B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PptStreamer::encryptDocumentStream(PptStreamer *this, SsrwOOStream *a2)
{
  StreamLength = (SsrwOOStream *)directoryGetStreamLength(*((void *)this + 3));
  if (!OcBinaryWriter::copyStream((OcBinaryWriter *)a2, StreamLength, v5)) {
    return 0;
  }
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))StreamLength->var0 + 5))(StreamLength);
  uint64_t v7 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  SsrwOOStream::seekFromStart(StreamLength, 0);
  SsrwOOStream::seekFromStart(a2, 0);
  PersistDirectorint y = PptBinaryReader::getPersistDirectory(*((PptBinaryReader **)this + 3));
  uint64_t v9 = PptBinaryReader::getPersistDirectory(*((PptBinaryReader **)this + 3));
  OcBinaryData v10 = *(void **)(PersistDirectory + 32);
  uint64_t v11 = (void *)(PersistDirectory + 40);
  if (v10 == v11)
  {
LABEL_15:
    uint64_t v18 = 1;
  }
  else
  {
    int v12 = *(_DWORD *)(v9 + 96);
    while (1)
    {
      uint64_t v14 = *((unsigned int *)v10 + 7);
      uint64_t v13 = *((unsigned int *)v10 + 8);
      BOOL v15 = v14 == v12 || v13 == -1;
      if (!v15 && !PptStreamer::encryptRecord((OCCCryptoKey **)this, v13, v14, StreamLength, a2)) {
        break;
      }
      int v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v15 = *v17 == (void)v10;
          OcBinaryData v10 = v17;
        }
        while (!v15);
      }
      OcBinaryData v10 = v17;
      if (v17 == v11) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = 0;
  }
  SsrwOOStream::seekFromStart(StreamLength, v6);
  SsrwOOStream::seekFromStart(a2, v7);
  return v18;
}

BOOL PptStreamer::encryptRecord(OCCCryptoKey **this, uint64_t a2, uint64_t a3, SsrwOOStream *a4, SsrwOOStream *a5)
{
  __p = 0;
  OcBinaryData v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, 8u);
  int v17 = 8;
  SsrwOOStream::seekFromStart(a4, a2);
  (*((void (**)(SsrwOOStream *, void *, int *))a4->var0 + 7))(a4, __p, &v17);
  OcBinaryData v10 = (char *)__p;
  int v11 = *((unsigned __int16 *)__p + 1);
  if (v11 == 4085 || v11 == 6002)
  {
    BOOL v13 = 1;
LABEL_15:
    OcBinaryData v19 = v10;
    operator delete(v10);
    return v13;
  }
  uint64_t v14 = (*((_DWORD *)__p + 1) + 8);
  if (v14 <= (int)v19 - (int)__p)
  {
    if (v14 < (int)v19 - (int)__p) {
      OcBinaryData v19 = (char *)__p + v14;
    }
  }
  else
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, v14 - (v19 - __p));
    OcBinaryData v10 = (char *)__p;
  }
  if (OCCCryptoKey::encryptBlock(this[1], a4, a2, v14, a3, v10))
  {
    SsrwOOStream::seekFromStart(a5, a2);
    int v16 = v14;
    (*((void (**)(SsrwOOStream *, void *, int *))a5->var0 + 23))(a5, __p, &v16);
    BOOL v13 = v16 == v14;
  }
  else
  {
    BOOL v13 = 0;
  }
  OcBinaryData v10 = (char *)__p;
  if (__p) {
    goto LABEL_15;
  }
  return v13;
}

void sub_238E86E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PptStreamer::decryptPicturesStream(PptBinaryReader **this, SsrwOOStream *a2)
{
  PictureStream = (SsrwOOStream *)PptBinaryReader::getPictureStream(this[3]);
  if (!this[6]) {
    operator new();
  }
  uint64_t v5 = (*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 5))(PictureStream);
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  SsrwOOStream::seekFromStart(PictureStream, 0);
  SsrwOOStream::seekFromStart(a2, 0);
  uint64_t v7 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 21))(PictureStream);
  unsigned int Size = SsrwOOStgInfo::getSize(v7);
  if (Size)
  {
    unsigned int v11 = Size;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = PptStreamer::decryptPictureRecord((PptStreamer *)this, v12, v9, v10);
      if (!v13) {
        break;
      }
      uint64_t v12 = (*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 5))(PictureStream);
    }
    while (v12 < v11);
  }
  else
  {
    uint64_t v13 = 1;
  }
  SsrwOOStream::seekFromStart(PictureStream, v5);
  SsrwOOStream::seekFromStart(a2, v6);
  return v13;
}

void sub_238E86FE0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

uint64_t PptStreamer::decryptPictureRecord(PptStreamer *this, uint64_t a2, SsrwOOStream *a3, SsrwOOStream *a4)
{
  EshHeader::makeDefault(&v12);
  PptPicturesDecryptorVisitor::writeDecryptedRecordHeader(*((SsrwOOStream ***)this + 6), a2, &v12);
  Object = EshObjectFactory::createObject((EshObjectFactory *)this + 2, v12.var3, v12.var4);
  if (!Object) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  double v9 = EshRecord::setHeader(v7, &v12);
  uint64_t v10 = (*(uint64_t (**)(EshRecord *, void, double))(*(void *)v8 + 112))(v8, *((void *)this + 6), v9);
  (*(void (**)(EshRecord *))(*(void *)v8 + 8))(v8);
  return v10;
}

uint64_t PptStreamer::encryptPicturesStream(PptBinaryReader **this, SsrwOOStream *a2)
{
  PictureStream = (SsrwOOStream *)PptBinaryReader::getPictureStream(this[3]);
  if (!this[7]) {
    operator new();
  }
  uint64_t v5 = (*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 5))(PictureStream);
  uint64_t v6 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  SsrwOOStream::seekFromStart(PictureStream, 0);
  SsrwOOStream::seekFromStart(a2, 0);
  uint64_t v7 = (SsrwOOStgInfo *)(*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 21))(PictureStream);
  unsigned int Size = SsrwOOStgInfo::getSize(v7);
  if (Size)
  {
    unsigned int v11 = Size;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = PptStreamer::encryptPictureRecord((PptStreamer *)this, v12, v9, v10);
      if (!v13) {
        break;
      }
      uint64_t v12 = (*((uint64_t (**)(SsrwOOStream *))PictureStream->var0 + 5))(PictureStream);
    }
    while (v12 < v11);
  }
  else
  {
    uint64_t v13 = 1;
  }
  SsrwOOStream::seekFromStart(PictureStream, v5);
  SsrwOOStream::seekFromStart(a2, v6);
  return v13;
}

void sub_238E872A0(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

uint64_t PptStreamer::encryptPictureRecord(PptStreamer *this, uint64_t a2, SsrwOOStream *a3, SsrwOOStream *a4)
{
  EshHeader::makeDefault(&v12);
  PptPicturesEncryptorVisitor::writeEncryptedRecordHeader(*((SsrwOOStream ***)this + 7), a2, &v12);
  Object = EshObjectFactory::createObject((EshObjectFactory *)this + 2, v12.var3, v12.var4);
  if (!Object) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  double v9 = EshRecord::setHeader(v7, &v12);
  uint64_t v10 = (*(uint64_t (**)(EshRecord *, void, double))(*(void *)v8 + 112))(v8, *((void *)this + 7), v9);
  (*(void (**)(EshRecord *))(*(void *)v8 + 8))(v8);
  return v10;
}

const char *PptStreamer::cryptoAPI_getEncryptedSummaryStreamName(PptStreamer *this)
{
  return "EncryptedSummary";
}

void PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom(PptCryptSession10ContainerAtom *this)
{
  *(void *)this = &unk_26EBF0960;
  *((void *)this + 4) = &unk_26EBF0A08;
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    MEMORY[0x23EC997B0](v1, 0x1000C4077774924);
  }
}

{
  uint64_t vars8;

  PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom(this);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom(PptCryptSession10ContainerAtom *this)
{
}

{
  uint64_t vars8;

  PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)((char *)this - 32));
  JUMPOUT(0x23EC997B0);
}

void PptCryptSession10ContainerAtom::PptCryptSession10ContainerAtom(PptCryptSession10ContainerAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0960;
  *(void *)(v2 + 32) = &unk_26EBF0A08;
  *(void *)(v2 + 56) = 0;
}

uint64_t PptCryptSession10ContainerAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptEnvelopeData9Atom::PptEnvelopeData9Atom(PptEnvelopeData9Atom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0A58;
  *(void *)(v2 + 32) = &unk_26EBF0B00;
  OcMsoEnvelope::OcMsoEnvelope((OcMsoEnvelope *)(v2 + 48));
}

void non-virtual thunk to'PptEnvelopeData9Atom::~PptEnvelopeData9Atom(PptEnvelopeData9Atom *this)
{
  *((void *)this - 4) = &unk_26EBF0A58;
  *(void *)this = &unk_26EBF0B00;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBF0A58;
  *(void *)this = &unk_26EBF0B00;
  OcMsoEnvelope::~OcMsoEnvelope((PptEnvelopeData9Atom *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptAnimAnimateBehaviorAtom::~PptAnimAnimateBehaviorAtom(PptAnimAnimateBehaviorAtom *this)
{
}

void PptRoundTripHeaderFooterDefaultsAtom::PptRoundTripHeaderFooterDefaultsAtom(PptRoundTripHeaderFooterDefaultsAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF0C80;
  *(void *)(v2 + 32) = &unk_26EBF0D28;
  *(_DWORD *)(v2 + 45) = 0;
}

uint64_t PptRoundTripHeaderFooterDefaultsAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripHeaderFooterDefaultsAtom::~PptRoundTripHeaderFooterDefaultsAtom(PptRoundTripHeaderFooterDefaultsAtom *this)
{
}

void non-virtual thunk to'PptRoundTripHeaderFooterDefaultsAtom::~PptRoundTripHeaderFooterDefaultsAtom(PptRoundTripHeaderFooterDefaultsAtom *this)
{
}

void non-virtual thunk to'PptAnimAnimationValueAtom::~PptAnimAnimationValueAtom(PptAnimAnimationValueAtom *this)
{
}

void non-virtual thunk to'PptAnimConditionAtom::~PptAnimConditionAtom(PptAnimConditionAtom *this)
{
}

void non-virtual thunk to'PptAnimModifierAtom::~PptAnimModifierAtom(PptAnimModifierAtom *this)
{
}

void non-virtual thunk to'PptAnimNodeAtom::~PptAnimNodeAtom(PptAnimNodeAtom *this)
{
}

void non-virtual thunk to'PptAnimScaleBehaviorAtom::~PptAnimScaleBehaviorAtom(PptAnimScaleBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimSequenceDataAtom::~PptAnimSequenceDataAtom(PptAnimSequenceDataAtom *this)
{
}

void PptAnimVariantAtom::PptAnimVariantAtom(PptAnimVariantAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1348;
  *(void *)(v2 + 32) = &unk_26EBF13F0;
  *(_DWORD *)(v2 + 48) = -1;
  *(unsigned char *)(v2 + 52) = 0;
  *(void *)(v2 + 56) = 0;
  CsString::CsString((CsString *)(v2 + 64));
}

uint64_t PptAnimVariantAtom::getBoolean(PptAnimVariantAtom *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t PptAnimVariantAtom::getInteger(PptAnimVariantAtom *this)
{
  return *((unsigned int *)this + 14);
}

float PptAnimVariantAtom::getReal(PptAnimVariantAtom *this)
{
  return *((float *)this + 15);
}

void non-virtual thunk to'PptAnimVariantAtom::~PptAnimVariantAtom(PptAnimVariantAtom *this)
{
  *((void *)this - 4) = &unk_26EBF1348;
  *(void *)this = &unk_26EBF13F0;
  CsString::~CsString((CsString *)((char *)this + 32));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBF1348;
  *(void *)this = &unk_26EBF13F0;
  CsString::~CsString((CsString *)((char *)this + 32));
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripOriginalMainMasterIdAtom::PptRoundTripOriginalMainMasterIdAtom(PptRoundTripOriginalMainMasterIdAtom *this, const EshHeader *a2)
{
  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)uint64_t v2 = &unk_26EBF1440;
  *(void *)(v2 + 32) = &unk_26EBF14E8;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptRoundTripOriginalMainMasterIdAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripOriginalMainMasterIdAtom::~PptRoundTripOriginalMainMasterIdAtom(PptRoundTripOriginalMainMasterIdAtom *this)
{
}

void non-virtual thunk to'PptRoundTripOriginalMainMasterIdAtom::~PptRoundTripOriginalMainMasterIdAtom(PptRoundTripOriginalMainMasterIdAtom *this)
{
}

void non-virtual thunk to'PptAnimBehaviorAtom::~PptAnimBehaviorAtom(PptAnimBehaviorAtom *this)
{
}

void non-virtual thunk to'PptAnimIterateDataAtom::~PptAnimIterateDataAtom(PptAnimIterateDataAtom *this)
{
  *((void *)this - 4) = &unk_26EBF1630;
  *(void *)this = &unk_26EBF16D8;
}

{
  *((void *)this - 4) = &unk_26EBF1630;
  *(void *)this = &unk_26EBF16D8;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptGridSpacing10Atom::~PptGridSpacing10Atom(PptGridSpacing10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1728;
  *(void *)this = &unk_26EBF17D0;
}

{
  *((void *)this - 4) = &unk_26EBF1728;
  *(void *)this = &unk_26EBF17D0;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptComment10Atom::~PptComment10Atom(PptComment10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1820;
  *(void *)this = &unk_26EBF18C8;
}

{
  *((void *)this - 4) = &unk_26EBF1820;
  *(void *)this = &unk_26EBF18C8;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptCommentIndex10Atom::~PptCommentIndex10Atom(PptCommentIndex10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1918;
  *(void *)this = &unk_26EBF19C0;
}

{
  *((void *)this - 4) = &unk_26EBF1918;
  *(void *)this = &unk_26EBF19C0;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptLinkedShape10Atom::~PptLinkedShape10Atom(PptLinkedShape10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1A10;
  *(void *)this = &unk_26EBF1AB8;
}

{
  *((void *)this - 4) = &unk_26EBF1A10;
  *(void *)this = &unk_26EBF1AB8;
  JUMPOUT(0x23EC997B0);
}

void PptRoundTripAnimationAtom::PptRoundTripAnimationAtom(PptRoundTripAnimationAtom *this, const EshHeader *a2)
{
  PptRoundTripZipBlobAtom::PptRoundTripZipBlobAtom(this, a2);
  void *v2 = &unk_26EBF1B08;
  v2[4] = &unk_26EBF1BB0;
}

uint64_t PptRoundTripAnimationAtom::accept(int a1, void *lpsrc)
{
  return v2();
}

void PptRoundTripAnimationAtom::~PptRoundTripAnimationAtom(OcBinaryData *this)
{
  this->char var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
}

{
  uint64_t vars8;

  this->char var0 = (void **)&unk_26EBE9FD0;
  *(void *)&this->var6 = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData(this + 1);
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptRoundTripAnimationAtom::~PptRoundTripAnimationAtom(PptRoundTripAnimationAtom *this)
{
  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
}

{
  uint64_t vars8;

  *((void *)this - 4) = &unk_26EBE9FD0;
  *(void *)this = &unk_26EBEA078;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 16));
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptLinkedSlide10Atom::~PptLinkedSlide10Atom(PptLinkedSlide10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1C00;
  *(void *)this = &unk_26EBF1CA8;
}

{
  *((void *)this - 4) = &unk_26EBF1C00;
  *(void *)this = &unk_26EBF1CA8;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptSlideFlags10Atom::~PptSlideFlags10Atom(PptSlideFlags10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1CF8;
  *(void *)this = &unk_26EBF1DA0;
}

{
  *((void *)this - 4) = &unk_26EBF1CF8;
  *(void *)this = &unk_26EBF1DA0;
  JUMPOUT(0x23EC997B0);
}

void non-virtual thunk to'PptSlideTime10Atom::~PptSlideTime10Atom(PptSlideTime10Atom *this)
{
  *((void *)this - 4) = &unk_26EBF1DF0;
  *(void *)this = &unk_26EBF1E98;
}

{
  *((void *)this - 4) = &unk_26EBF1DF0;
  *(void *)this = &unk_26EBF1E98;
  JUMPOUT(0x23EC997B0);
}

void PptPicturesEncryptorVisitor::PptPicturesEncryptorVisitor(PptPicturesEncryptorVisitor *this, SsrwOOStream *a2, SsrwOOStream *a3, OCCCryptoKey *a4)
{
  EshDataModelVisitor::EshDataModelVisitor(this);
  *uint64_t v7 = &unk_26EBF1EE8;
  unsigned __int16 v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
}

uint64_t PptPicturesEncryptorVisitor::writeEncryptedRecordHeader(SsrwOOStream **this, uint64_t a2, EshHeader *a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  SsrwOOStream::seekFromStart(this[2], a2);
  SsrwOOStream::seekFromStart(this[3], a2);
  v11[0] = 0;
  int v10 = 8;
  (*((void (**)(SsrwOOStream *, void *, int *))this[2]->var0 + 7))(this[2], v11, &v10);
  int v6 = LOWORD(v11[0]) >> 4;
  unsigned __int16 v7 = WORD1(v11[0]);
  int v8 = HIDWORD(v11[0]);
  a3->unsigned int var4 = v11[0] & 0xF;
  a3->unsigned int var2 = v6;
  a3->signed int var3 = v7;
  a3->char var0 = v8;
  a3->unsigned int var1 = a2;
  SsrwOOStream::seekFromStart(this[2], a2);
  PptPicturesEncryptorVisitor::encryptIntoStreamAndBuffer((PptPicturesEncryptorVisitor *)this, 8, v11);
  return 1;
}

BOOL PptPicturesEncryptorVisitor::encryptIntoStreamAndBuffer(PptPicturesEncryptorVisitor *this, uint64_t a2, void *a3)
{
  int v6 = (OCCCryptoKey *)*((void *)this + 4);
  unsigned __int16 v7 = (SsrwOOStream *)*((void *)this + 2);
  uint64_t v8 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 5))(v7);
  int v9 = OCCCryptoKey::encryptBlock(v6, v7, v8, a2, 0, a3);
  BOOL result = 0;
  if (v9)
  {
    int v11 = a2;
    (*(void (**)(void, void *, int *))(**((void **)this + 3) + 184))(*((void *)this + 3), a3, &v11);
    return v11 == a2;
  }
  return result;
}

BOOL PptPicturesEncryptorVisitor::encrypt(PptPicturesEncryptorVisitor *this, uint64_t a2)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (a2)
  {
    std::vector<unsigned char,ChAllocator<unsigned char>>::__append((char **)&__p, a2);
    int v4 = __p;
  }
  else
  {
    int v4 = 0;
  }
  BOOL v5 = PptPicturesEncryptorVisitor::encryptIntoStreamAndBuffer(this, a2, v4);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_238E888D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshAtom *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshContainer *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshAlignRule *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshArcRule *a2)
{
  return 0;
}

BOOL PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshBitmapBlip *a2)
{
  PptPicturesDecryptorVisitor::beginRead(this, a2);
  if (PptPicturesEncryptorVisitor::encryptAllBlipUidFields<EshBitmapBlipInfo>(this, (uint64_t)a2)
    && PptPicturesEncryptorVisitor::encrypt(this, 1))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    BOOL v6 = PptPicturesEncryptorVisitor::encrypt(this, (v4 - v5 + 8));
  }
  else
  {
    BOOL v6 = 0;
  }
  PptPicturesDecryptorVisitor::endRead(this, a2);
  return v6;
}

uint64_t PptPicturesEncryptorVisitor::encryptAllBlipUidFields<EshBitmapBlipInfo>(PptPicturesEncryptorVisitor *a1, uint64_t a2)
{
  uint64_t result = PptPicturesEncryptorVisitor::encrypt(a1, 16);
  if (result)
  {
    if (**(_WORD **)(a2 + 48))
    {
      return PptPicturesEncryptorVisitor::encrypt(a1, 16);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesDecryptorVisitor *a1, EshRecord *a2)
{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  if (PptPicturesEncryptorVisitor::encryptAllBlipUidFields<EshBitmapBlipInfo>(a1, (uint64_t)a2)
    && PptPicturesEncryptorVisitor::encrypt(a1, 1))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 40))(*((void **)a1 + 2));
    PptPicturesEncryptorVisitor::encrypt(a1, (v4 - v5 + 8));
  }
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 1;
}

{
  int v4;
  int v5;

  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  if (PptPicturesEncryptorVisitor::encryptAllBlipUidFields<EshBitmapBlipInfo>(a1, (uint64_t)a2)
    && PptPicturesEncryptorVisitor::encrypt(a1, 34))
  {
    int v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
    int v5 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 40))(*((void **)a1 + 2));
    PptPicturesEncryptorVisitor::encrypt(a1, (v4 - v5 + 8));
  }
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 1;
}

{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 0;
}

{
  PptPicturesDecryptorVisitor::beginRead(a1, a2);
  PptPicturesDecryptorVisitor::endRead(a1, a2);
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshBSE *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshCalloutRule *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshColorMRU *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshConnectorRule *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshDeletedPspl *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshDg *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshDgg *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshRectAtom *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshRegroupItems *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshSelection *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshSp *a2)
{
  return 0;
}

uint64_t PptPicturesEncryptorVisitor::visit(PptPicturesEncryptorVisitor *this, EshSplitMenuColors *a2)
{
  return 0;
}

void PptPicturesEncryptorVisitor::~PptPicturesEncryptorVisitor(PptPicturesEncryptorVisitor *this)
{
  EshDataModelVisitor::~EshDataModelVisitor(this);
  JUMPOUT(0x23EC997B0);
}

void sub_238E89010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E89148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E89308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E89384()
{
}

void sub_238E894A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E895A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E896C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E89A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E89CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E89E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E89EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8A054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8A3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8A530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8A62C(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238E8A7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238E8A910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v12;

  _Unwind_Resume(a1);
}

void sub_238E8AA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8ACE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8ADAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8B0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8B544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8B620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8B6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8B77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8B7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8B850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8B9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8BBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8BF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8BFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8C0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8C294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8C36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8C49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_238E8C588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8C718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8C7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8CA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8CBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8CFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8D228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8D3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CMNumberFormatter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238E8DA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8DC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8E1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_238E8E444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8E554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8E668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8E8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E8EA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8EA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8EEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8EF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8F0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8F358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E8F54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8F72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E8F8D4(_Unwind_Exception *a1)
{
  int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_238E8FE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_238E90208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E90578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E90728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E90830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E908D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E9099C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E90BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E90D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E910CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E91538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E915B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E918C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E91AA8(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_238E91B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E91C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E91D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E91E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E91F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  EshHeader v12 = v11;

  _Unwind_Resume(a1);
}

void sub_238E92060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E92124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E9226C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E92428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E924B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E928FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E92AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E92BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E92DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E92F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E932A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9348C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E935E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E938A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E93C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E93DEC(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238E93EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9435C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ODIRegularPolygonBoundsMapper(unint64_t a1, float a2, float a3)
{
  float v4 = -a2;
  if (a1)
  {
    unint64_t v6 = 0;
    double v7 = 6.28318531 / (double)a1;
    float v8 = a2;
    float v9 = a2;
    double v10 = a3 * 3.14159265 / 180.0;
    float v11 = -a2;
    do
    {
      float v12 = v10 + (double)v6 * v7;
      __float2 v13 = __sincosf_stret(v12);
      float v14 = v13.__sinval * a2;
      if (v8 >= (float)(v13.__cosval * a2)) {
        float v8 = v13.__cosval * a2;
      }
      if (v4 <= (float)(v13.__cosval * a2)) {
        float v4 = v13.__cosval * a2;
      }
      if (v9 >= v14) {
        float v9 = v13.__sinval * a2;
      }
      if (v11 <= v14) {
        float v11 = v13.__sinval * a2;
      }
      ++v6;
    }
    while (a1 != v6);
  }
  else
  {
    return a2;
  }
  return v8;
}

void sub_238E94664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E94AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E94E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCurrentTextReaderElementInNamespaces(_xmlTextReader *a1, const unsigned __int8 **a2)
{
  uint64_t v3 = xmlTextReaderConstNamespaceUri(a1);
  float v4 = *a2;
  if (!*a2) {
    return 0;
  }
  int v5 = v3;
  unint64_t v6 = a2 + 1;
  do
  {
    int v7 = xmlStrcmp(v5, v4);
    BOOL result = v7 == 0;
    if (!v7) {
      break;
    }
    float v9 = *v6++;
    float v4 = v9;
  }
  while (v9);
  return result;
}

void sub_238E952B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E95794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E95A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E95C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E95D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E95ED8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    if (v14)
    {
      NSLog((NSString *)@"Ignoring exception: %@");
      OcBinaryData v19 = (void *)MEMORY[0x263F087E8];
      a10 = *MEMORY[0x263F07F80];
      uint64_t v20 = [v18 description];
      a11 = v20;
      int v21 = [NSDictionary dictionaryWithObjects:&a11 forKeys:&a10 count:1];
      void *v14 = [v19 errorWithDomain:@"OIErrorDomain" code:3 userInfo:v21];
    }
    objc_end_catch();
    JUMPOUT(0x238E95E78);
  }

  _Unwind_Resume(a1);
}

void sub_238E96130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9627C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E965F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9690C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E969E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E96B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E97044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_238E97288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E97394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E974EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E97638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E97850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E97B20(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_238E97D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E97ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9804C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E98150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E98244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EMCreateFormattedDate(void *a1, double a2)
{
  uint64_t v3 = a1;
  if ([v3 formatType] == 5)
  {
    uint64_t v4 = [v3 formatPercent:a2];
  }
  else if ([v3 formatType] == 8)
  {
    int v5 = (void *)[objc_alloc(MEMORY[0x263EFF910]) initWithTimeIntervalSinceReferenceDate:a2];
    uint64_t v4 = [v3 formatDate:v5];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_238E98300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9854C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E986D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E98844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E98A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_238E98BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z26EMNumberFormatterGetLocalev_block_invoke()
{
  if (!qword_2689BCCE8) {
    qword_2689BCCE8 = (uint64_t)CFLocaleCopyCurrent();
  }
}

void sub_238E98F90(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238E990F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238E991D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_238E99884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E99A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E99AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E99C6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_238E99E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E99FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9A33C(_Unwind_Exception *a1, char a2, OcText *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, XlFormatInfo *a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_238E9A3C8(_Unwind_Exception *a1)
{
  MEMORY[0x23EC997B0](v1, 0x1020C406CDE2A18);
  _Unwind_Resume(a1);
}

void sub_238E9A520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

XlFormatInfo **ChAutoPtr<XlFormatInfo>::~ChAutoPtr(XlFormatInfo **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    XlFormatInfo::~XlFormatInfo(v2);
    MEMORY[0x23EC997B0]();
  }
  *a1 = 0;
  return a1;
}

void sub_238E9A8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9A96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9ABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9AC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9AE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __float2 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_238E9AFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9B298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9B490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9B778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_238E9BA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9BBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9BD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9C1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9C278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9C38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9C64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9C770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v14 = v12;

  _Unwind_Resume(a1);
}

void sub_238E9C834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9C94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9CC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v16 = v12;

  _Unwind_Resume(a1);
}

void sub_238E9CEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9D040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9D16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9D1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  double v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CMDocumentMapper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_238E9D3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  BOOL v15 = v14;

  _Unwind_Resume(a1);
}

void sub_238E9D5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OICopyHTMLFromFileAtURL(const __CFURL *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  objc_opt_class();
  objc_opt_class();
  float v8 = [(__CFURL *)a1 path];
  float v9 = [CMDictArchiveManager alloc];
  double v10 = +[CMFileManager canonicalUrlPrefix:a3];
  float v11 = [(CMDictArchiveManager *)v9 initWithName:v8 resourcePathPrefix:v10];

  [(CMArchiveManager *)v11 setResourcePathPrefix:a3];
  if (a4) {
    [(CMArchiveManager *)v11 setIsThumbnail:1];
  }
  float v12 = [MEMORY[0x263EFFA40] standardUserDefaults];
  __float2 v13 = [v12 valueForKey:@"OfficeImportDumpDuration"];
  int v14 = [v13 BOOLValue];

  if (v14)
  {
    BOOL v15 = [v8 lastPathComponent];
    NSLog((NSString *)@"Starting OfficeImport conversion for file %@", v15);

    gettimeofday(&v27, 0);
  }
  if (!a2 || (unint64_t v16 = +[CMFileManager getFileTypeFromUTI:a2]) == 0) {
    unint64_t v16 = +[CMFileManager getFileTypeFromPath:v8];
  }
  +[QLTop fillHTMLArchiveForOfficeFile:v8 dataFormat:v16 archiver:v11];
  uint64_t v17 = [(CMDictArchiveManager *)v11 copyDictionaryWithSizeInfos:v16 != 7];
  if (v14)
  {
    gettimeofday(&v26, 0);
    __darwin_suseconds_t tv_usec = v26.tv_usec;
    __darwin_suseconds_t v19 = v27.tv_usec;
    __darwin_time_t tv_sec = v26.tv_sec;
    __darwin_time_t v21 = v27.tv_sec;
    uint64_t v22 = [v8 lastPathComponent];
    unint64_t v23 = (void *)v22;
    __darwin_suseconds_t v24 = tv_usec + 1000000;
    if (tv_usec >= v19) {
      __darwin_suseconds_t v24 = tv_usec;
    }
    NSLog((NSString *)@"File \"%@\" has been converted in %ld.%6d seconds", v22, tv_sec - (tv_usec < v19) - v21, (v24 - v19));
  }
  return v17;
}

void sub_238E9D84C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    float v8 = (NSException *)objc_begin_catch(a1);
    copyDictionaryFromException(v8);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x238E9D820);
  }

  _Unwind_Resume(a1);
}

void sub_238E9D908()
{
}

id copyDictionaryFromException(NSException *a1)
{
  uint64_t v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([(NSException *)v1 getEntry],
        uint64_t v2 = objc_claimAutoreleasedReturnValue(),
        [v2 getMessageText],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        v2,
        v3))
  {
    id v4 = objc_alloc(NSDictionary);
    int v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", v3, *MEMORY[0x263F08320], 0);
    unint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"OIErrorDomain" code:912 userInfo:v5];
    id v7 = objc_alloc(NSDictionary);
    id v8 = (id)objc_msgSend(v7, "initWithObjectsAndKeys:", v6, HTMLError, 0);
  }
  else
  {
    float v9 = [(NSException *)v1 name];
    int v10 = [v9 isEqualToString:kCMTopExceptionDocumentIsEncrypted];

    if (v10)
    {
      float v11 = (void *)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"OIErrorDomain" code:1 userInfo:0];
      id v12 = objc_alloc(NSDictionary);
      __float2 v13 = objc_msgSend(v12, "initWithObjectsAndKeys:", v11, HTMLError, 0);
    }
    else
    {
      __float2 v13 = 0;
    }
    id v8 = v13;
  }

  return v8;
}

void sub_238E9DAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OICopyPrecomputedThumbnailDataFromFileAtURLIfPresent()
{
  return 0;
}

uint64_t OICopyHTMLFromFileAtURL(const __CFURL *a1, const __CFString *a2, const __CFString *a3)
{
  return OICopyHTMLFromFileAtURL(a1, a2, a3, 0);
}

uint64_t OICopyHTMLThumbnailFromFileAtURL(const __CFURL *a1, const __CFString *a2, const __CFString *a3)
{
  return OICopyHTMLFromFileAtURL(a1, a2, a3, 1);
}

uint64_t OICopyHTMLForOfficeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  objc_opt_class();
  objc_opt_class();
  int v10 = +[CMFileManager canonicalUrlPrefix:a3];
  float v11 = [[CMDictArchiveManager alloc] initWithName:a2 resourcePathPrefix:v10];
  [(CMArchiveManager *)v11 setResourcePathPrefix:a3];
  if (a5) {
    [(CMArchiveManager *)v11 setIsThumbnail:1];
  }
  id v12 = [MEMORY[0x263EFFA40] standardUserDefaults];
  __float2 v13 = [v12 valueForKey:@"OfficeImportDumpDuration"];
  int v14 = [v13 BOOLValue];

  if (v14)
  {
    NSLog((NSString *)@"Starting OfficeImport conversion for file %@", a2);
    gettimeofday(&v19, 0);
  }
  +[QLTop fillHTMLArchiveForOfficeData:a1 fileName:a2 dataFormat:a4 archiver:v11];
  uint64_t v15 = [(CMDictArchiveManager *)v11 copyDictionaryWithSizeInfos:a4 != 7];
  if (v14)
  {
    gettimeofday(&v18, 0);
    __darwin_suseconds_t tv_usec = v18.tv_usec;
    if (v18.tv_usec < v19.tv_usec) {
      __darwin_suseconds_t tv_usec = v18.tv_usec + 1000000;
    }
    NSLog((NSString *)@"File \"%@\" has been converted in %ld.%6d seconds", a2, v18.tv_sec - (v18.tv_usec < v19.tv_usec) - v19.tv_sec, (tv_usec - v19.tv_usec));
  }

  return v15;
}

void sub_238E9DCC8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v8 = (NSException *)objc_begin_catch(a1);
    copyDictionaryFromException(v8);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x238E9DCA0);
  }

  _Unwind_Resume(a1);
}

void sub_238E9DD54()
{
}

uint64_t OICopyHTMLThumbnailForOfficeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OICopyHTMLForOfficeData(a1, a2, a3, a4, 1);
}

uint64_t OICopyHTMLForOfficeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OICopyHTMLForOfficeData(a1, a2, a3, a4, 0);
}

void sub_238E9DE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9DF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9DFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9E07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9E18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9E2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9E4B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_begin_catch(a1);
  +[QLTop fillHTMLArchiveForOfficeFile:a10 orData:0 dataFileName:0 dataFormat:v11 archiver:v10];
  objc_end_catch();
  JUMPOUT(0x238E9E490);
}

void sub_238E9E4E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_begin_catch(a1);
  +[QLTop fillHTMLArchiveForOfficeFile:a10 orData:0 dataFileName:0 dataFormat:v11 archiver:v10];
  objc_end_catch();
  JUMPOUT(0x238E9E4DCLL);
}

void sub_238E9E510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

id classForFormat(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = objc_opt_class();
  }
  return v2;
}

void sub_238E9E80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9EB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9EC84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_begin_catch(a1);
  +[QLTop fillHTMLArchiveForOfficeFile:0 orData:a10 dataFileName:v10 dataFormat:v12 archiver:v11];
  objc_end_catch();
  JUMPOUT(0x238E9EC54);
}

void sub_238E9ECB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_begin_catch(a1);
  +[QLTop fillHTMLArchiveForOfficeFile:0 orData:a10 dataFileName:v10 dataFormat:v12 archiver:v11];
  objc_end_catch();
  JUMPOUT(0x238E9ECA8);
}

void sub_238E9ECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238E9F038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9F3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9F7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_238E9F92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9FB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238E9FC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9FE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_238E9FF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238EA01D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, id a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_238EA03F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OIPreviewProcessWithURL(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OIPreviewProcessWithURLAndOptions(a1, a2, 0, a3, a4);
}

uint64_t OIPreviewProcessWithURLAndOptions(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  objc_opt_class();
  objc_opt_class();
  uint64_t v10 = [a1 path];
  uint64_t v12 = createArchiverForClient(a4, a5, a3);
  if (!a2 || (unint64_t v11 = +[CMFileManager getFileTypeFromUTI:a2]) == 0) {
    unint64_t v11 = +[CMFileManager getFileTypeFromPath:](CMFileManager, "getFileTypeFromPath:", v10, v11);
  }
  +[QLTop fillHTMLArchiveForOfficeFile:v10 dataFormat:v11 archiver:v12];

  return 0;
}

void sub_238EA0584(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    id v4 = objc_begin_catch(exc_buf);
    handleExceptionForClientWithCallbacks(v4, v3, v2);
    objc_end_catch();
    JUMPOUT(0x238EA0564);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_238EA05D8(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_238EA065C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238EA0720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *cStringRetainCallback(const __CFAllocator *a1, char *__s1)
{
  return strdup(__s1);
}

void cStringReleaseCallback(const __CFAllocator *a1, void *a2)
{
}

BOOL cStringEqualCallback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t cStringHashCallback(const char *a1)
{
  uint64_t v1 = a1;
  int v2 = -1640531527;
  size_t v3 = strlen(a1);
  if (v3 < 0xC)
  {
    int v6 = -1640531527;
    unsigned int v5 = -1640531527;
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = v3;
    unsigned int v5 = -1640531527;
    int v6 = -1640531527;
    do
    {
      unsigned int v7 = *((_DWORD *)v1 + 1) + v5;
      unsigned int v8 = *((_DWORD *)v1 + 2) + v2;
      int v9 = (*(_DWORD *)v1 + v6 - (v7 + v8)) ^ (v8 >> 13);
      unsigned int v10 = (v7 - v8 - v9) ^ (v9 << 8);
      unsigned int v11 = (v8 - v9 - v10) ^ (v10 >> 13);
      int v12 = (v9 - v10 - v11) ^ (v11 >> 12);
      unsigned int v13 = (v10 - v11 - v12) ^ (v12 << 16);
      unsigned int v14 = (v11 - v12 - v13) ^ (v13 >> 5);
      int v6 = (v12 - v13 - v14) ^ (v14 >> 3);
      unsigned int v5 = (v13 - v14 - v6) ^ (v6 << 10);
      int v2 = (v14 - v6 - v5) ^ (v5 >> 15);
      v1 += 12;
      v4 -= 12;
    }
    while (v4 > 0xB);
  }
  unsigned int v15 = v2 + v3;
  switch(v4)
  {
    case 1uLL:
      goto LABEL_17;
    case 2uLL:
      goto LABEL_16;
    case 3uLL:
      goto LABEL_15;
    case 4uLL:
      goto LABEL_14;
    case 5uLL:
      goto LABEL_13;
    case 6uLL:
      goto LABEL_12;
    case 7uLL:
      goto LABEL_11;
    case 8uLL:
      goto LABEL_10;
    case 9uLL:
      goto LABEL_9;
    case 0xAuLL:
      goto LABEL_8;
    case 0xBuLL:
      v15 += *((unsigned __int8 *)v1 + 10) << 24;
LABEL_8:
      v15 += *((unsigned __int8 *)v1 + 9) << 16;
LABEL_9:
      v15 += *((unsigned __int8 *)v1 + 8) << 8;
LABEL_10:
      v5 += *((unsigned __int8 *)v1 + 7) << 24;
LABEL_11:
      v5 += *((unsigned __int8 *)v1 + 6) << 16;
LABEL_12:
      v5 += *((unsigned __int8 *)v1 + 5) << 8;
LABEL_13:
      v5 += *((unsigned __int8 *)v1 + 4);
LABEL_14:
      v6 += *((unsigned __int8 *)v1 + 3) << 24;
LABEL_15:
      v6 += *((unsigned __int8 *)v1 + 2) << 16;
LABEL_16:
      v6 += *((unsigned __int8 *)v1 + 1) << 8;
LABEL_17:
      v6 += *(unsigned __int8 *)v1;
      break;
    default:
      break;
  }
  int v16 = (v6 - v5 - v15) ^ (v15 >> 13);
  unsigned int v17 = (v5 - v15 - v16) ^ (v16 << 8);
  unsigned int v18 = (v15 - v16 - v17) ^ (v17 >> 13);
  int v19 = (v16 - v17 - v18) ^ (v18 >> 12);
  unsigned int v20 = (v17 - v18 - v19) ^ (v19 << 16);
  unsigned int v21 = (v18 - v19 - v20) ^ (v20 >> 5);
  int v22 = (v19 - v20 - v21) ^ (v21 >> 3);
  return (v21 - v22 - ((v20 - v21 - v22) ^ (v22 << 10))) ^ (((v20 - v21 - v22) ^ (v22 << 10)) >> 15);
}

void sub_238EA0A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_238EA0AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ObjectCacheByCString;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t EshBinaryReader::readObject(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void operator new(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = 1001;
}

uint64_t OcBinaryReader::getPropertyValue(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<ChAllocator<OcText>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>,std::reverse_iterator<OcText*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  size_t v3 = a1;
  unint64_t v4 = a1;
  do
  {
    unsigned int v5 = *v4;
    v4 += 6;
    (*v5)();
    v3 += 6;
    BOOL result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t XlChartBinaryReader::scanChartProperties()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XlChartBinaryReader::scanChartObjects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlChartBinaryReader::readTextFrame()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XlChartBinaryReader::read()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XlChartBinaryReader::readAxisDisplayUnit(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlDocumentPresentationTable::setDefault(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlFontTable::setDefault(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t XlObjectFactory::createObject(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlSheetPresentationTable::setDefault(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlParserVisitor::visit(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlFormulaProcessor::init(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t XlFormulaProcessor::externSheetToString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t XlBinaryReader::readCell()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WrdAnnotation::clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t WrdCharacterProperties::clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t WrdListFormatTable::append(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void WrdBinaryReader::WrdBinaryReader(uint64_t a1, uint64_t a2, uint64_t a3, EshBinaryReader *a4)
{
  do
  {
    uint64_t v7 = a1 - 24;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a1 - 24, *(void **)(a1 - 16));
    a1 = v7;
  }
  while (v7 != a2);
  do
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(a2 - 24, *(void **)(a2 - 16));
    a2 -= 24;
  }
  while (a2 != a3);
  EshBinaryReader::~EshBinaryReader(a4);
}

uint64_t WrdBinaryReader::createMark(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t WrdChpParser::applyCMajoritySPRM(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t WrdParser::parse()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PptTextBlockStylingMac11Atom::addNewStyle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED78A0](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, dataIn, dataInLength);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x270ED78C8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED78E8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

size_t CCCryptorGetOutputLength(CCCryptorRef cryptorRef, size_t inputLength, BOOL final)
{
  return MEMORY[0x270ED7930](cryptorRef, inputLength, final);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x270ED7940](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED7950](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

unsigned __int8 *__cdecl CC_MD2(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AA8](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_MD4(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AB0](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AD0](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AF0](data, *(void *)&len, md);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7AF8](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7B00](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B08](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B28](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA384(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B48](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B68](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFAttributedStringBeginEditing(CFMutableAttributedStringRef aStr)
{
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x270EE43B0](alloc, str, attributes);
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x270EE43B8](alloc, aStr);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x270EE43C8](alloc, maxLength, aStr);
}

CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range)
{
  return (CFAttributedStringRef)MEMORY[0x270EE43D0](alloc, aStr, range.location, range.length);
}

void CFAttributedStringEndEditing(CFMutableAttributedStringRef aStr)
{
}

CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange)
{
  return (CFTypeRef)MEMORY[0x270EE43E0](aStr, loc, attrName, effectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x270EE43F0](aStr, loc, effectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x270EE43F8](aStr, loc, inRange.location, inRange.length, longestEffectiveRange);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x270EE4400](aStr);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x270EE4408](aStr);
}

void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x270EE4540](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE4548](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x270EE4570](locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x270EE4580]();
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x270EE4598](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x270EE45B8](allocator, bundleURL);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x270EE4600]();
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x270EE4760](theSet, theChar);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x270EE47B0](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E8](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x270EE4868](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x270EE4870](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringRef)MEMORY[0x270EE4878](allocator, tmplate, options, locale);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x270EE4880](allocator, formatter, string, rangep);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x270EE4898](allocator, formatter, date);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return MEMORY[0x270EE48A0](formatter, string, rangep, atp);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x270EE48A8](formatter);
}

CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x270EE48B0](formatter);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE4938](theDict, key);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFArrayRef CFLocaleCopyCommonISOCurrencyCodes(void)
{
  return (CFArrayRef)MEMORY[0x270EE4A58]();
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x270EE4A60]();
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x270EE4AB0](locale);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4B20](cf);
}

CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x270EE4BF0](formatter, key);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x270EE4BF8](allocator, locale, style);
}

CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x270EE4C08](allocator, formatter, number);
}

CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr)
{
  return (CFStringRef)MEMORY[0x270EE4C10](allocator, formatter, numberType, valuePtr);
}

Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement)
{
  return MEMORY[0x270EE4C18](currencyCode, defaultFractionDigits, roundingIncrement);
}

CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x270EE4C20](formatter);
}

CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x270EE4C28](formatter);
}

Boolean CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr)
{
  return MEMORY[0x270EE4C30](formatter, string, rangep, numberType, valuePtr);
}

void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString)
{
}

void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key, CFTypeRef value)
{
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x270EE4C50](number);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x270EE4F50](allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x270EE4F58](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x270EE4F60](allocator, capacity, callBacks);
}

CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
{
  return (CFMutableSetRef)MEMORY[0x270EE4F68](allocator, capacity, theSet);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x270EE4F70](theSet);
}

Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value)
{
  return MEMORY[0x270EE4F88](theSet, candidate, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x270EE5068](*(void *)&encoding);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x270EE5078](encoding);
}

CFStringEncoding CFStringConvertWindowsCodepageToEncoding(UInt32 codepage)
{
  return MEMORY[0x270EE5080](*(void *)&codepage);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5150](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x270EE51A0](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x270EE5210]();
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x270EE5278](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x270EE5290](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x270EE52A0](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x270EE52A8](tokenizer, index);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x270EE52B8](string, range, transform, reverse);
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x270EE52F8](allocator, ti);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x270EE5470](alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x270EE5478](alloc, uuidStr);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x270EE5488](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x270EE54A8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x270EE5970](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x270EE5978](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x270EE5980](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59D8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return (CGContextRef)MEMORY[0x270EE5A10](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo, releaseCallback);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5B58](color);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x270EE5B60](a1, *(void *)&intent, color, options);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B68](color, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B90](space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x270EE5B98](color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x270EE5BC0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x270EE5BD0](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x270EE5BE0](color);
}

CGPatternRef CGColorGetPattern(CGColorRef color)
{
  return (CGPatternRef)MEMORY[0x270EE5BE8](color);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5C20](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C50]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C90](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

BOOL CGColorSpaceIsWideGamutRGB(CGColorSpaceRef a1)
{
  return MEMORY[0x270EE5D58](a1);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginPage(CGContextRef c, const CGRect *mediaBox)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextClosePath(CGContextRef c)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextDrawShading(CGContextRef c, CGShadingRef shading)
{
}

void CGContextEOClip(CGContextRef c)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextEndPage(CGContextRef c)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x270EE5FC0](retstr, c);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
{
}

void CGContextSetFont(CGContextRef c, CGFontRef font)
{
}

void CGContextSetFontSize(CGContextRef c, CGFloat size)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
{
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextShowGlyphsAtPositions(CGContextRef c, const CGGlyph *glyphs, const CGPoint *Lpositions, size_t count)
{
}

void CGContextStrokeLineSegments(CGContextRef c, const CGPoint *points, size_t count)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x270EE6298](data);
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
}

CGDataProviderRef CGDataProviderCreateSequential(void *info, const CGDataProviderSequentialCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x270EE62C8](info, callbacks);
}

CGFunctionRef CGFunctionCreate(void *info, size_t domainDimension, const CGFloat *domain, size_t rangeDimension, const CGFloat *range, const CGFunctionCallbacks *callbacks)
{
  return (CGFunctionRef)MEMORY[0x270EE6530](info, domainDimension, domain, rangeDimension, range, callbacks);
}

void CGFunctionRelease(CGFunctionRef function)
{
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x270EE6750](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F20](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x270EE6908](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5048](isrc);
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
}

void CGPDFContextClose(CGContextRef context)
{
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x270EE6A80](consumer, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

void CGPathAddArcToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x270EE6FD0](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7070](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.int y = v2;
  result.origin.int x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  MEMORY[0x270EE7078](path);
  result.int y = v2;
  result.int x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.int y = v2;
  result.origin.int x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x270EE7108](path);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x270EE7110](info, matrix, *(void *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

void CGPatternRelease(CGPatternRef pattern)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.int y = v3;
  result.origin.int x = v2;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7180]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.int y = v4;
  result.origin.int x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7238]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.int y = v3;
  result.origin.int x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7250]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x270EE7268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x270EE7270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.int y = v3;
  result.origin.int x = v2;
  return result;
}

CGShadingRef CGShadingCreateAxial(CGColorSpaceRef space, CGPoint start, CGPoint end, CGFunctionRef function, BOOL extendStart, BOOL extendEnd)
{
  return (CGShadingRef)MEMORY[0x270EE72E8](space, function, extendStart, extendEnd, (__n128)start, *(__n128 *)&start.y, (__n128)end, *(__n128 *)&end.y);
}

CGShadingRef CGShadingCreateRadial(CGColorSpaceRef space, CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius, CGFunctionRef function, BOOL extendStart, BOOL extendEnd)
{
  return (CGShadingRef)MEMORY[0x270EE72F0](space, function, extendStart, extendEnd, (__n128)start, *(__n128 *)&start.y, startRadius, (__n128)end, *(__n128 *)&end.y, endRadius);
}

void CGShadingRelease(CGShadingRef shading)
{
}

CTFontCollectionRef CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef options)
{
  return (CTFontCollectionRef)MEMORY[0x270EE99F8](options);
}

CFArrayRef CTFontCollectionCreateMatchingFontDescriptors(CTFontCollectionRef collection)
{
  return (CFArrayRef)MEMORY[0x270EE9A00](collection);
}

CFStringRef CTFontCopyFamilyName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x270EE9A28](font);
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x270EE9A50](font, attributes);
}

CTFontRef CTFontCreateCopyWithSymbolicTraits(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  return (CTFontRef)MEMORY[0x270EE9AC0](font, matrix, *(void *)&symTraitValue, *(void *)&symTraitMask, size);
}

CTFontRef CTFontCreateForString(CTFontRef currentFont, CFStringRef string, CFRange range)
{
  return (CTFontRef)MEMORY[0x270EE9AC8](currentFont, string, range.location, range.length);
}

CTFontRef CTFontCreateWithFontDescriptorAndOptions(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  return (CTFontRef)MEMORY[0x270EE9AE8](descriptor, matrix, options, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CTFontRef CTFontCreateWithNameAndOptions(CFStringRef name, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  return (CTFontRef)MEMORY[0x270EE9B00](name, matrix, options, size);
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x270EE9B08](descriptor, attribute);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B60](attributes);
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  MEMORY[0x270EE9BE0](font, *(void *)&orientation, glyphs, advances, count);
  return result;
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  MEMORY[0x270EE9BE8](font);
  return result;
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  MEMORY[0x270EE9BF8](font, *(void *)&orientation, glyphs, boundingRects, count);
  result.size.height = v8;
  result.size.width = v7;
  result.origin.int y = v6;
  result.origin.int x = v5;
  return result;
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  MEMORY[0x270EE9C10](font);
  return result;
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x270EE9C28](font, characters, glyphs, count);
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  MEMORY[0x270EE9C38](font);
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x270EE9C40](font);
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x270EE9C60](font);
}

NSMapTable *__cdecl NSCreateMapTable(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity)
{
  return (NSMapTable *)MEMORY[0x270EF2A58](keyCallBacks, valueCallBacks, capacity);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x270EE5598](typePtr, sizep, alignp);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x270EF2AF8](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x270EF2B30](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1 = MEMORY[0x270EF2BA8](aString);
  result.length = v2;
  result.location = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x270EF2BD8](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x270F05EA0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x270EF2C28](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x270EF2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSZoneFree(NSZone *zone, void *ptr)
{
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return (void *)MEMORY[0x270EF2C80](zone, size);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  return (void *)MEMORY[0x270EF2C88](zone, ptr, size);
}

uint64_t OIChartingCreatePDFDataWithFormatterCallback()
{
  return MEMORY[0x270F58BC8]();
}

uint64_t QLGuessEncodingForTextFileFromData()
{
  return MEMORY[0x270F58CD8]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x270F06030]();
}

void UIGraphicsPopContext(void)
{
}

void UIGraphicsPushContext(CGContextRef context)
{
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x270F06070](image, compressionQuality);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x270F06078](image);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986C8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98768]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::terminate(void)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x270ED7DE8](a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x270ED8688](a1, a2);
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x270ED86F0](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x270ED8718](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x270ED8730](a1, *(void *)&a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x270F9A428](cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x270F9A450](cls, name);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x270F9A460](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x270F9A468](cls);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x270F9A478](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x270F9A480](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x270F9A490](cls);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x270F9C678](dest, destLen, source, sourceLen);
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x270F9C690](crc, buf, *(void *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C698](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C6A8](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x270F9C6B0](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x270ED92B8](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x270ED92D0](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x270ED92E0](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x270ED92E8](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x270ED92F0](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x270ED9300](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x270ED9320](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x270ED9390](type, *(void *)&fd, queue, cleanup_handler);
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  return MEMORY[0x270ED93A8](channel);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x270ED9470](queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x270ED9678](*(void *)&a1);
}

void exit(int a1)
{
}

int fchflags(int a1, __uint32_t a2)
{
  return MEMORY[0x270ED9898](*(void *)&a1, *(void *)&a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x270ED9AC8](__stream, a2, *(void *)&__whence);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x270ED9B10](*(void *)&a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

off_t ftello(FILE *__stream)
{
  return MEMORY[0x270ED9B20](__stream);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x270ED9B30](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270ED9DC0](path, name, value, size, *(void *)&position, *(void *)&options);
}

int gzclose(gzFile file)
{
  return MEMORY[0x270F9C6D0](file);
}

gzFile gzdopen(int fd, const char *mode)
{
  return (gzFile)MEMORY[0x270F9C6E0](*(void *)&fd, mode);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x270F9C710](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x270F9C718](file, buf, *(void *)&len);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x270F9C728](file, buf, *(void *)&len);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x270ED9E60](a1, a2);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C730](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C738](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x270F9C740](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x270F9C748](strm, version, *(void *)&stream_size);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x270EDA028](*(void *)&__e, __x);
  return result;
}

ssize_t listxattr(const char *path, char *namebuff, size_t size, int options)
{
  return MEMORY[0x270EDA080](path, namebuff, size, *(void *)&options);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x270EDA528](a1);
}

int mkstemp(char *a1)
{
  return MEMORY[0x270EDA560](a1);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x270EDA570](a1, *(void *)&a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x270EDA588](a1);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x270EDA5A8](__y, __x);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x270F9A6A0](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D8](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x270F9AA40](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x270F9AA48](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x270F9AA60](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x270EDAEE0](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

uint64_t random(void)
{
  return MEMORY[0x270EDB0E8]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x270EDB170](a1, a2);
}

int regcomp(regex_t *a1, const char *a2, int a3)
{
  return MEMORY[0x270EDB1A8](a1, a2, *(void *)&a3);
}

int regexec(const regex_t *a1, const char *a2, size_t a3, regmatch_t __pmatch[], int a5)
{
  return MEMORY[0x270EDB1B8](a1, a2, a3, __pmatch, *(void *)&a5);
}

void regfree(regex_t *a1)
{
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x270EDB218](path, name, *(void *)&options);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270EDB460](path, name, value, size, *(void *)&position, *(void *)&options);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void srand(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x270EDB570](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x270EDB6B8](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x270EDB7D8](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x270F994D0](*(void *)&c);
}

UChar32 u_toupper(UChar32 c)
{
  return MEMORY[0x270F995E0](*(void *)&c);
}

uint64_t uloc_canonicalize()
{
  return MEMORY[0x270F99748]();
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x270F9C770](dest, destLen, source, sourceLen);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

uint64_t unum_close()
{
  return MEMORY[0x270F997A0]();
}

uint64_t unum_format()
{
  return MEMORY[0x270F997A8]();
}

uint64_t unum_open()
{
  return MEMORY[0x270F997F0]();
}

uint64_t unum_setTextAttribute()
{
  return MEMORY[0x270F99830]();
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

int wcscmp(const __int32 *a1, const __int32 *a2)
{
  return MEMORY[0x270EDBB88](a1, a2);
}

__int32 *__cdecl wcscpy(__int32 *a1, const __int32 *a2)
{
  return (__int32 *)MEMORY[0x270EDBB90](a1, a2);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x270EDBBA0](a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

char *__cdecl xattr_name_without_flags(const char *a1)
{
  return (char *)MEMORY[0x270EDBC58](a1);
}

int xattr_preserve_for_intent(const char *a1, xattr_operation_intent_t a2)
{
  return MEMORY[0x270EDBC60](a1, *(void *)&a2);
}

xmlNodePtr xmlAddChild(xmlNodePtr parent, xmlNodePtr cur)
{
  return (xmlNodePtr)MEMORY[0x270F9BAF8](parent, cur);
}

xmlNodePtr xmlAddPrevSibling(xmlNodePtr cur, xmlNodePtr elem)
{
  return (xmlNodePtr)MEMORY[0x270F9BB08](cur, elem);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return (const xmlChar *)MEMORY[0x270F9BB40](buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x270F9BB48]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

int xmlBufferLength(const xmlBuffer *buf)
{
  return MEMORY[0x270F9BB68](buf);
}

int xmlCheckFilename(const char *path)
{
  return MEMORY[0x270F9BB98](path);
}

xmlNodePtr xmlCopyNode(xmlNodePtr node, int recursive)
{
  return (xmlNodePtr)MEMORY[0x270F9BBB8](node, *(void *)&recursive);
}

xmlParserCtxtPtr xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
{
  return (xmlParserCtxtPtr)MEMORY[0x270F9BBC8](sax, user_data, chunk, *(void *)&size, filename);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x270F9BC50](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

void xmlFreeNode(xmlNodePtr cur)
{
}

void xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
{
}

void xmlFreeTextReader(xmlTextReaderPtr reader)
{
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)MEMORY[0x270F9BCE8]();
}

xmlChar *__cdecl xmlGetNoNsProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x270F9BD10](node, name);
}

xmlNsPtr *__cdecl xmlGetNsList(const xmlDoc *doc, const xmlNode *node)
{
  return (xmlNsPtr *)MEMORY[0x270F9BD18](doc, node);
}

xmlChar *__cdecl xmlGetNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
{
  return (xmlChar *)MEMORY[0x270F9BD20](node, name, nameSpace);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x270F9BD30](node, name);
}

xmlAttrPtr xmlHasNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
{
  return (xmlAttrPtr)MEMORY[0x270F9BD38](node, name, nameSpace);
}

void xmlInitParser(void)
{
}

int xmlKeepBlanksDefault(int val)
{
  return MEMORY[0x270F9BDE0](*(void *)&val);
}

xmlNodePtr xmlNewNode(xmlNsPtr ns, const xmlChar *name)
{
  return (xmlNodePtr)MEMORY[0x270F9BE88](ns, name);
}

xmlTextWriterPtr xmlNewTextWriter(xmlOutputBufferPtr out)
{
  return (xmlTextWriterPtr)MEMORY[0x270F9BED8](out);
}

xmlTextWriterPtr xmlNewTextWriterFilename(const char *uri, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x270F9BEE8](uri, *(void *)&compression);
}

int xmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  return MEMORY[0x270F9BF18](buf, doc, cur, *(void *)&level, *(void *)&format);
}

void xmlNodeDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format, const char *encoding)
{
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x270F9BF30](cur);
}

xmlChar *__cdecl xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
{
  return (xmlChar *)MEMORY[0x270F9BF48](doc, list, *(void *)&inLine);
}

int xmlOutputBufferClose(xmlOutputBufferPtr out)
{
  return MEMORY[0x270F9BF58](out);
}

xmlOutputBufferPtr xmlOutputBufferCreateIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, xmlCharEncodingHandlerPtr encoder)
{
  return (xmlOutputBufferPtr)MEMORY[0x270F9BF78](iowrite, ioclose, ioctx, encoder);
}

int xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x270F9BF90](ctxt, chunk, *(void *)&size, *(void *)&terminate);
}

int xmlPopInputCallbacks(void)
{
  return MEMORY[0x270F9BFD0]();
}

xmlDocPtr xmlReadDoc(const xmlChar *cur, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x270F9BFD8](cur, URL, encoding, *(void *)&options);
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x270F9BFE0](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

xmlTextReaderPtr xmlReaderForIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options)
{
  return (xmlTextReaderPtr)MEMORY[0x270F9BFE8](ioread, ioclose, ioctx, URL, encoding, *(void *)&options);
}

int xmlRegisterInputCallbacks(xmlInputMatchCallback matchFunc, xmlInputOpenCallback openFunc, xmlInputReadCallback readFunc, xmlInputCloseCallback closeFunc)
{
  return MEMORY[0x270F9BFF0](matchFunc, openFunc, readFunc, closeFunc);
}

xmlDocPtr xmlSAXParseFile(xmlSAXHandlerPtr sax, const char *filename, int recovery)
{
  return (xmlDocPtr)MEMORY[0x270F9C028](sax, filename, *(void *)&recovery);
}

xmlNsPtr xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar *href)
{
  return (xmlNsPtr)MEMORY[0x270F9C0C8](doc, node, href);
}

void xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme)
{
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
}

xmlAttrPtr xmlSetProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
{
  return (xmlAttrPtr)MEMORY[0x270F9C0F0](node, name, value);
}

int xmlStrEqual(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x270F9C110](str1, str2);
}

int xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x270F9C120](str1, str2);
}

int xmlStrcmp(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x270F9C138](str1, str2);
}

int xmlStrlen(const xmlChar *str)
{
  return MEMORY[0x270F9C150](str);
}

int xmlSubstituteEntitiesDefault(int val)
{
  return MEMORY[0x270F9C188](*(void *)&val);
}

const xmlChar *__cdecl xmlTextReaderConstLocalName(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x270F9C190](reader);
}

const xmlChar *__cdecl xmlTextReaderConstNamespaceUri(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x270F9C198](reader);
}

int xmlTextReaderDepth(xmlTextReaderPtr reader)
{
  return MEMORY[0x270F9C1A8](reader);
}

xmlNodePtr xmlTextReaderExpand(xmlTextReaderPtr reader)
{
  return (xmlNodePtr)MEMORY[0x270F9C1B0](reader);
}

xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x270F9C1B8](reader, name);
}

xmlChar *__cdecl xmlTextReaderGetAttributeNs(xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI)
{
  return (xmlChar *)MEMORY[0x270F9C1C0](reader, localName, namespaceURI);
}

int xmlTextReaderHasAttributes(xmlTextReaderPtr reader)
{
  return MEMORY[0x270F9C1C8](reader);
}

int xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader)
{
  return MEMORY[0x270F9C1D0](reader);
}

xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix)
{
  return (xmlChar *)MEMORY[0x270F9C1D8](reader, prefix);
}

int xmlTextReaderNodeType(xmlTextReaderPtr reader)
{
  return MEMORY[0x270F9C1F0](reader);
}

int xmlTextReaderRead(xmlTextReaderPtr reader)
{
  return MEMORY[0x270F9C1F8](reader);
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C230](writer);
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C238](writer);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C248](writer);
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  return MEMORY[0x270F9C258](writer, *(void *)&indent);
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  return MEMORY[0x270F9C280](writer, version, encoding, standalone);
}

int xmlTextWriterStartElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI)
{
  return MEMORY[0x270F9C290](writer, prefix, name, namespaceURI);
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  return MEMORY[0x270F9C2A0](writer, name, content);
}

int xmlTextWriterWriteAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content)
{
  return MEMORY[0x270F9C2A8](writer, prefix, name, namespaceURI, content);
}

int xmlTextWriterWriteDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *subset)
{
  return MEMORY[0x270F9C2C8](writer, name, pubid, sysid, subset);
}

int xmlTextWriterWriteString(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x270F9C2E0](writer, content);
}

void xmlUnlinkNode(xmlNodePtr cur)
{
}